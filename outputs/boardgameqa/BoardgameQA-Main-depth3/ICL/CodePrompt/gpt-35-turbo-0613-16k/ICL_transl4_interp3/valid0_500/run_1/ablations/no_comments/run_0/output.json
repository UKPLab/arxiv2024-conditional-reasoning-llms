[{"idx": 0, "response": "has(grizzly_bear, banana_strawberry_smoothie) == True\noffer_job(grizzly_bear, amberjack) = rule7()\noffer_job(grizzly_bear, amberjack) == True\noffer_job(grizzly_bear, amberjack) == True\nsame_points(parrot, amberjack) = rule14()\nsame_points(parrot, amberjack) == True\nsame_points(parrot, amberjack) == True\ngive(amberjack, magnifying_glass, wolverine) = rule9()\ngive(amberjack, magnifying_glass, wolverine) == True\ngive(amberjack, magnifying_glass, wolverine) == True\nremove(amberjack, piece_of(carp)) = rule13()\nremove(amberjack, piece_of(carp)) == True\nremove(amberjack, piece_of(carp)) == True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(sheep, amberjack) => remove(amberjack, piece_of(raven))\nrule2() = respects(oscar, parrot) => not same_points(parrot, amberjack)\nrule3() = first_letter_of(name(hummingbird)) == first_letter_of(name(pig)) => knows(defensive_plans_of(halibut), hummingbird)\nrule4(something) = respects(something, ferret) => prepare_armor(something, amberjack)\nrule5() = not wink(puffin, grizzly_bear) => not offer_job(grizzly_bear, amberjack)\nrule6() = first_letter_of(name(sheep)) == first_letter_of(name(hare)) => not prepare_armor(sheep, amberjack)\nrule7() = has(grizzly_bear, drink) => offer_job(grizzly_bear, amberjack)\nrule8() = friends(sheep) < 6 => prepare_armor(sheep, amberjack)\nrule9() = offer_job(grizzly_bear, amberjack) & same_points(parrot, amberjack) => give(amberjack, magnifying_glass, wolverine)\nrule10(something) = burn(warehouse_of(canary), something) => not prepare_armor(sea_bass, amberjack)\nrule11() = not prepare_armor(sea_bass, amberjack) => not remove(amberjack, piece_of(raven))\nrule12(something) = wink(something, panther) => not knows(defense_plan_of(halibut), something)\nrule13(something) = remove(something, piece_of(raven)) & not give(something, magnifying_glass, wolverine) => remove(something, piece_of(carp))\nrule14() = has(parrot, sharp_object) => same_points(parrot, amberjack)\nrule15(something) = knows(defensive_plans_of(halibut), something) => not give(amberjack, magnifying_glass, wolverine)\nrule16() = has(sheep, card) and color(card) in rainbow_colors => prepare_armor(sheep, amberjack)\nrule17() = has(hummingbird, card_with(color_starting_with(\"b\"))) => knows(defense_plan_of(halibut), hummingbird)\norder(rule1) > order(rule11) = True\norder(rule12) > order(rule17) = True\norder(rule12) > order(rule3) = True\norder(rule14) > order(rule2) = True\norder(rule15) > order(rule9) = True\norder(rule4) > order(rule10) = True\norder(rule5) > order(rule7) = True\norder(rule6) > order(rule16) = True\norder(rule6) > order(rule8) = True\n\nhas(grizzly_bear, banana_strawberry_smoothie) = True\nhas(hummingbird, card_with(black_color)) = True\nname(hummingbird, Milo) = True\nrespects(oscar, parrot) = True\nhas(parrot, cutter) = True\nname(pig, Blossom) = True\nfriends(sheep) = 11\nname(sheep, Buddy) = True\nhas(sheep, card_with(red_color)) = True\nburn(warehouse_of(canary), swordfish) = True\n\nquestion = remove(amberjack, piece_of(carp))\n"}, {"idx": 1, "response": "name(donkey, Charlie) == True\nproceed(donkey, spot_right_after(spot_of(pig))) = rule7(donkey)\nproceed(donkey, spot_right_after(spot_of(pig))) == True\nproceed(donkey, spot_right_after(spot_of(pig))) == True\nnot raise_flag_of_peace(donkey, caterpillar) = rule1()\nraise_flag_of_peace(donkey, caterpillar) == False\nraise_flag_of_peace(donkey, caterpillar) == False\nquestion = False", "answer": -1, "code": "rule1() = proceed(something, spot_right_after(spot_of(pig))) => not raise_flag_of_peace(something, caterpillar)\nrule2() = friends(snail) > 6 => not show_all_cards(snail, kudu)\nrule3() = roll_dice(zander, donkey) => not wink(donkey, carp)\nrule4() = give_magnifying_glass(something, amberjack) => wink(something, carp)\nrule5() = first_letter_of(name(donkey)) == first_letter_of(name(penguin)) => give_magnifying_glass(donkey, amberjack)\nrule6() = has(snail, card_with(color_in(rainbow_colors))) => not show_all_cards(snail, kudu)\nrule7(something) = show_all_cards(something, kudu) => proceed(donkey, spot_right_after(spot_of(pig)))\nrule8() = give_magnifying_glass(goldfish, donkey) & learn(squirrel, elementary_resource_management_from(donkey)) => not give_magnifying_glass(donkey, amberjack)\nrule9() = has(snail, connect_to_internet(device)) => show_all_cards(snail, kudu)\norder(rule2) > order(rule9) = True\norder(rule3) > order(rule4) = True\norder(rule5) > order(rule8) = True\norder(rule6) > order(rule9) = True\n\nname(donkey, Charlie) = True\ngive_magnifying_glass(goldfish, donkey) = True\nname(penguin, Casper) = True\nhas(snail, card_with(white_color)) = True\nhas(snail, cell_phone) = True\nlearn(squirrel, elementary_resource_management_from(donkey)) = True\n\nquestion = raise_flag_of_peace(donkey, caterpillar)\n"}, {"idx": 2, "response": "has(halibut, card_with(green_color)) == True\nnot respects(halibut, cheetah) = rule1()\nrespects(halibut, cheetah) == False\nnot (points(hippopotamus) == points(tiger)) = rule6()\npoints(hippopotamus) == points(tiger) == False\nattack_green_fields(cheetah, green_fields_of(oscar)) = rule8()\nattack_green_fields(cheetah, green_fields_of(oscar)) == True\nattack_green_fields(cheetah, green_fields_of(oscar)) == True\nknock_down_fortress(turtle, fortress_of(black_bear)) = rule4()\nknock_down_fortress(turtle, fortress_of(black_bear)) == True\nknock_down_fortress(turtle, fortress_of(black_bear)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(halibut, card_with(color_starting_with(\"w\"))) => not respects(halibut, cheetah)\nrule2() = has(hippopotamus, something_to_sit_on) => points(hippopotamus) == points(tiger)\nrule3() = not (points(hippopotamus) == points(tiger)) & show_cards(sheep, tiger) => add_conclusion(\"the tiger gives a magnifying glass to the turtle\")\nrule4() = attack_green_fields(something, oscar) => knock_down_fortress(turtle, fortress_of(black_bear))\nrule5() = raise_flag_of_peace(hummingbird, tiger) => not give_magnifying_glass(tiger, turtle)\nrule6() = eat_food(something, food_of(bat)) => not (points(hippopotamus) == points(tiger))\nrule7() = prepare_armor(something, tilapia) => show_cards(something, tiger)\nrule8() = not respects(halibut, cheetah) => attack_green_fields(cheetah, green_fields_of(oscar))\nrule9() = has(halibut, leafy_green_vegetable) => not respects(halibut, cheetah)\norder(rule3) > order(rule5) = True\norder(rule6) > order(rule2) = True\n\nneeds_support(amberjack, bat) = True\nhas(halibut, card_with(green_color)) = True\nhas(halibut, trumpet) = True\nnot roll_dice(sheep, tilapia) = True\n\nquestion = knock_down_fortress(turtle, fortress_of(black_bear))\n"}, {"idx": 3, "response": "has(whale, card_with(green_color)) == True\nproceed(whale, spot_right_after(spot_of(grasshopper))) = rule2()\nproceed(whale, spot_right_after(spot_of(grasshopper))) == True\nproceed(whale, spot_right_after(spot_of(grasshopper))) == True\nnot attack(green_fields_of(leopard), buffalo) = rule4()\nnot attack(green_fields_of(leopard), buffalo) == True\nroll_dice(whale, leopard) = rule1(whale)\nroll_dice(whale, leopard) == True\nroll_dice(whale, leopard) == True\nraise_flag_of_peace(leopard, zander) = rule4()\nraise_flag_of_peace(leopard, zander) == True\nraise_flag_of_peace(leopard, zander) == True\nquestion = True", "answer": 1, "code": "rule1(something) = proceed(something, spot_right_after(spot_of(grasshopper))) => roll_dice(something, leopard)\nrule2() = has(whale, card_with(primary_color)) => proceed(whale, spot_right_after(spot_of(grasshopper)))\nrule3(something) = not respects(something, kudu) => not raise_flag_of_peace(something, zander)\nrule4() = not attack(green_fields_of(leopard), buffalo) & roll_dice(whale, leopard) => raise_flag_of_peace(leopard, zander)\nrule5(something) = eats_food_of(something, raven) => not knows(defense_plan_of(cat), something)\nrule6(something) = not knows(defense_plan_of(cat), something) => not attack(green_fields_of(leopard), something)\norder(rule3) > order(rule4) = True\n\neats_food_of(buffalo, raven) = True\nhas(whale, card_with(green_color)) = True\n\nquestion = raise_flag_of_peace(leopard, zander)\n"}, {"idx": 4, "response": "has(canary, card_with(white_color)) == True\nfirst_letter_of(name(canary)) == first_letter_of(name(oscar)) == True\nwink(canary, mosquito) = rule9()\nwink(canary, mosquito) == True\nwink(canary, mosquito) == True\nnot wink(canary, mosquito) = rule8()\nwink(canary, mosquito) == True\nnot wink(canary, mosquito) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(baboon) < 8 => not actual_enemy(baboon, canary)\nrule2() = wink(something, mosquito) => not knock_down(fortress_of(grizzly_bear))\nrule3() = needs_support(something, eagle) => wink(canary, cheetah)\nrule4() = first_letter_of(name(cat)) == first_letter_of(name(sheep)) => attack(cat, green_fields_of(canary))\nrule5() = has(cat, card) and color(card) in rainbow_colors => attack(cat, green_fields_of(canary))\nrule6() = has(canary, card_with(color_starting_with(\"w\"))) => wink(canary, mosquito)\nrule7() = steals_points(something, 5, amberjack) => respects(jellyfish, black_bear)\nrule8() = friends(canary) > 6 => not wink(canary, mosquito)\nrule9() = first_letter_of(name(canary)) == first_letter_of(name(oscar)) => wink(canary, mosquito)\nrule10() = has(baboon, leafy_green_vegetable) => enemy(baboon, canary)\nrule11() = respects(something, black_bear) => knock_down(fortress_of(grizzly_bear))\nrule12(something) = needs_support(something, hare) => not proceed(something, spot_right_after(spot_of(whale)))\nrule13() = not actual_enemy(baboon, canary) & attack(cat, green_fields_of(canary)) => needs_support(canary, hare)\nrule14() = has(donkey, musical_instrument) => needs_support(donkey, eagle)\nrule15() = first_letter_of(name(donkey)) == first_letter_of(name(meerkat)) => needs_support(donkey, eagle)\nrule16() = has(baboon, leafy_green_vegetable) => not enemy(baboon, canary)\norder(rule1) > order(rule10) = True\norder(rule11) > order(rule2) = True\norder(rule16) > order(rule10) = True\norder(rule6) > order(rule8) = True\norder(rule9) > order(rule8) = True\n\nhas(baboon, arugula) = True\nfriends(baboon) = 10\nhas(baboon, romaine_lettuce) = True\ngot_job(canary, well_paid) = True\nhas(canary, card_with(white_color)) = True\nfriends(canary) = 2\nname(canary, Tessa) = True\nhas(cat, card_with(red_color)) = True\nname(cat, Tarzan) = True\nhas(donkey, bench) = True\nname(donkey, Paco) = True\nsteals_points(grizzly_bear, 5, amberjack) = True\nname(meerkat, Pashmak) = True\nname(oscar, Bella) = True\nname(sheep, Meadow) = True\nrespects(octopus, donkey) = False\n\nquestion = proceed(canary, spot_right_after(spot_of(whale)))\n"}, {"idx": 5, "response": "has(eagle, card_with(orange_color)) == True\nnot raise_flag_of_peace(eagle, squid) = rule3()\nraise_flag_of_peace(eagle, squid) == False\nproceed(eagle, spot_right_after(spot_of(carp))) == True\nraise_flag_of_peace(eagle, catfish) == True\nraise_flag_of_peace(eagle, catfish) == True\nnot raise_flag_of_peace(eagle, squid) == False\npoints(meerkat) == points(spider) = rule4()\npoints(meerkat) == points(spider) == False\ngive_magnifying_glass(spider, tilapia) = unknown\nquestion = unknown", "answer": 0, "code": "rule1(something) = raise_flag_of_peace(something, catfish) & proceed(something, spot_right_after(spot_of(carp))) => raise_flag_of_peace(something, squid)\nrule2() = has(eagle, something_to_sit_on) => not raise_flag_of_peace(eagle, squid)\nrule3() = has(eagle, card_with(color_in_flag_of_Japan)) => not raise_flag_of_peace(eagle, squid)\nrule4() = points(meerkat) == points(spider) => give_magnifying_glass(spider, tilapia)\nrule5() = raise_flag_of_peace(something, squid) => offer_job(meerkat, spider)\norder(rule2) > order(rule1) = True\norder(rule3) > order(rule1) = True\n\nhas(eagle, card_with(orange_color)) = True\nproceed(eagle, spot_right_after(spot_of(carp))) = True\nraise_flag_of_peace(eagle, catfish) = True\n\nquestion = give_magnifying_glass(spider, tilapia)\n"}, {"idx": 6, "response": "knows(defense_plan_of(tiger), aardvark) = rule10()\nknows(defense_plan_of(tiger), aardvark) == True\nnot remove(crocodile, piece_of(tiger)) = rule10()\nremove(crocodile, piece_of(tiger)) == False\nactual_enemy(tiger, cheetah) = question = True", "answer": 1, "code": "rule1() = friends(crocodile) > 12 => steal_points(crocodile, 5, cockroach)\nrule2(something) = not give_magnifier(something, eagle) & not eat_food(something, food_of(spider)) => knows_defense_plan(tiger, something)\nrule3() = attack_green_fields(catfish) => eat_food(aardvark, food_of(spider))\nrule4() = knows(defensive_plans_of(buffalo), something) => not steal_points(crocodile, 5, cockroach)\nrule5() = friends(buffalo) > 7 => owes_money_to(buffalo, hare)\nrule6(something) = saw_steal_points(something, 5, cockroach) => not remove(something, piece_of(tiger))\nrule7(something) = not same_points(something, phoenix) => not give_magnifying_glass(something, eagle)\nrule8(something) = proceed(something, spot_right_after(spot_of(lion))) => not eat_food(something, food_of(spider))\nrule9() = offer_job(something, panda_bear) => not owes_money_to(buffalo, hare)\nrule10() = knows(defense_plan_of(tiger), aardvark) & not remove(crocodile, piece_of(tiger)) => actual_enemy(tiger, cheetah)\nrule11() = first_letter_of(name(crocodile)) == first_letter_of(name(donkey)) => steal_points(crocodile, 5, cockroach)\norder(rule3) > order(rule8) = True\norder(rule4) > order(rule1) = True\norder(rule4) > order(rule11) = True\norder(rule9) > order(rule5) = True\n\nproceed(aardvark, spot_right_after(spot_of(lion))) = True\nfriends(buffalo) = 15\nfriends(crocodile) = 9\nplayful_friends(crocodile) = 2\nnon_playful_friends(crocodile) = 7\nname(crocodile, Milo) = True\nname(donkey, Meadow) = True\nsame_points(aardvark, phoenix) = False\n\nquestion = actual_enemy(tiger, cheetah)\n"}, {"idx": 7, "response": "took_bike(squirrel, store) == True\nnot sing_song(squirrel, victory_song_for(lobster)) = rule1()\nsing_song(squirrel, victory_song_for(lobster)) == False\nprepare_armor(lobster, goldfish) = rule3()\nprepare_armor(lobster, goldfish) == True\nraise_flag_of_peace(octopus, goldfish) = rule4()\nraise_flag_of_peace(octopus, goldfish) == True\nnot eat_food(raven, food_of(octopus)) = rule7()\neat_food(raven, food_of(octopus)) == False\nnot owes_money_to(goldfish, kudu) = rule6()\nowes_money_to(goldfish, kudu) == False\nquestion = False", "answer": -1, "code": "rule1() = took_bike(squirrel, store) => not sing_song(squirrel, victory_song_for(lobster))\nrule2() = sing_song(something, victory_song_for(grasshopper)) => not prepare_armor(something, goldfish)\nrule3() = sing_song(squirrel, victory_song_for(lobster)) => prepare_armor(lobster, goldfish)\nrule4() = not eat_food(raven, food_of(octopus)) => raise_flag_of_peace(octopus, goldfish)\nrule5(something) = attacks_green_fields(something, owner_is(tiger)) & not knows(defensive_plans_of(panda_bear), something) => sing_song(something, victory_song_for(lobster))\nrule6() = raise_flag_of_peace(octopus, goldfish) & prepare_armor(lobster, goldfish) => not owe_money_to(goldfish, kudu)\nrule7() = eats_food(something, food_of(cockroach)) => not eat_food(raven, food_of(octopus))\norder(rule2) > order(rule3) = True\norder(rule5) > order(rule1) = True\n\noffers_job(donkey, raven) = True\neats_food(hare, food_of(cockroach)) = True\nattacks_green_fields(squirrel, owner_is(tiger)) = True\ntook_bike(squirrel, store) = True\nnot knows(defensive_plans_of(panda_bear), squirrel) = True\n\nquestion = owe_money_to(goldfish, kudu)\n"}, {"idx": 8, "response": "not sing_song(amberjack, victory_song_for(penguin)) = rule1()\nsing_song(amberjack, victory_song_for(penguin)) == False\nquestion = False", "answer": -1, "code": "rule1() = steal_points(something, 5, cat) => not sing_song(amberjack, victory_song_for(penguin))\nrule2(something) = not raise_flag_of_peace(something, viperfish) & needs_support(something, mosquito) => not sing_song(something, victory_song_for(amberjack))\nrule3(something) = owes_money_to(something, grizzly_bear) => respects(something, amberjack)\nrule4() = not sing_song(sun_bear, victory_song_for(amberjack)) & respects(octopus, amberjack) => eat_food(amberjack, food_of(elephant))\nrule5(something) = not eat_food(something, food_of(elephant)) => sing_song(something, victory_song_for(penguin))\norder(rule1) > order(rule5) = True\n\nowes_money_to(octopus, grizzly_bear) = True\nneeds_support(sun_bear, mosquito) = True\nnot raise_flag_of_peace(sun_bear, viperfish) = True\n\nquestion = sing_song(amberjack, victory_song_for(penguin))\n"}, {"idx": 9, "response": "stole_bike_from_store(dog) == True\ntook_bike_from_store(dog) = rule5()\ntook_bike_from_store(dog) == True\ntook_bike_from_store(dog) == True\nprepare_armor(dog, eel) = rule7(dog)\nprepare_armor(dog, eel) == True\nprepare_armor(dog, eel) == True\nnot enemy(dog, black_bear) = rule2()\nenemy(dog, black_bear) == False\nenemy(dog, black_bear) == False\nquestion = True", "answer": 1, "code": "rule1() = has(dog, sharp_object) => roll_dice(dog, polar_bear)\nrule2() = not enemy(something, black_bear) => not prepare_armor(something, eel)\nrule3() = raise_flag_of_peace(leopard, dog) => enemy(dog, black_bear)\nrule4() = has(dog, card_with(primary_color)) => knows_defensive_plans(dog, canary)\nrule5() = took_bike_from_store(dog) => roll_dice(dog, polar_bear)\nrule6() = eats_food_of(something, amberjack) => remove(turtle, piece_of(dog))\nrule7(something) = attack_green_fields(something, puffin) => prepare_armor(something, eel)\nrule8() = remove(turtle, piece_of(dog)) => not enemy(dog, black_bear)\nrule9() = proceed(salmon, spot_right_after(spot_of(dog))) => not roll_dice(dog, polar_bear)\nrule10() = first_letter_of(name(turtle)) == first_letter_of(name(donkey)) => not remove(turtle, piece_of(dog))\nrule11() = count(playful_friends(dog)) + count(non_playful_friends(dog)) > 17 => knows_defensive_plans(dog, canary)\nrule12(something) = knows_defensive_plans(something, canary) & roll_dice(something, polar_bear) => attack_green_fields(something, puffin)\norder(rule3) > order(rule8) = True\norder(rule6) > order(rule10) = True\norder(rule7) > order(rule2) = True\norder(rule9) > order(rule1) = True\norder(rule9) > order(rule5) = True\n\nhas(dog, card_with(red_color)) = True\nhas(dog, plastic_bag) = True\ncount(playful_friends(dog)) = 5\ncount(non_playful_friends(dog)) = 2\nstole_bike_from_store(dog) = True\nname(donkey, Charlie) = True\neats_food_of(rabbit, amberjack) = True\nhates(turtle, Chris_Ronaldo) = True\nname(turtle, Casper) = True\n\nquestion = prepare_armor(dog, eel)\n"}, {"idx": 10, "response": "has(kiwi, sharp_object) == False\nhas(kiwi, card_with(color)) == False\nhas(kiwi, connect_to_internet(device)) == False\nhas(kiwi, drink) == False\npoints(kiwi) == points(spider) == False\nowe_money_to(spider, sea_bass) == unknown\n\nquestion = unknown", "answer": 0, "code": "rule1() = has(kiwi, sharp_object) => actual_enemy(kiwi, tiger)\nrule2() = has(kiwi, card_with(color)) & color in flag_of(Netherlands) => actual_enemy(kiwi, tiger)\nrule3() = has(kiwi, connect_to_internet(device)) => not sing_song(kiwi, victory_song_for(rabbit))\nrule4(something) = actual_enemy(something, tiger) & not sing_song(something, victory_song_for(rabbit)) => points(something) == points(spider)\nrule5() = has(kiwi, drink) => not sing_song(kiwi, victory_song_for(rabbit))\nrule6() = points(kiwi) == points(spider) => not owe_money_to(spider, sea_bass)\n\nname(hummingbird, Lola) = True\nfriends(kiwi) = 2\nhas(kiwi, computer) = True\nhas(kiwi, card_with(white_color)) = True\nhas(kiwi, spinach) = True\nname(kiwi, Lily) = True\n\nquestion = owe_money_to(spider, sea_bass)\n"}, {"idx": 11, "response": "has(kiwi, basket) == True\ncarry_apples_and_oranges(basket) == True\nnot wink(kiwi, turtle) = rule3()\nwink(kiwi, turtle) == False\ngive_magnifying_glass(turtle, grasshopper) = rule3()\ngive_magnifying_glass(turtle, grasshopper) == True\ngive_magnifying_glass(turtle, grasshopper) == True\nquestion = True", "answer": 1, "code": "rule1() = give_magnifier(something, parrot) => not offer_job(something, turtle)\nrule2() = becomes_enemy(something, kudu) => give_magnifier(sheep, parrot)\nrule3() = not offer_job(sheep, turtle) & not wink(kiwi, turtle) => give_magnifying_glass(turtle, grasshopper)\nrule4() = steal_points(something, pig, 5) => not sing_song(something, victory_song_for(hippopotamus))\nrule5() = has(kiwi, carry_apples_and_oranges) => sing_song(kiwi, victory_song_for(hippopotamus))\nrule6() = sing_song(something, victory_song_for(hippopotamus)) => not wink(something, turtle)\norder(rule4) > order(rule5) = True\n\nhas(kiwi, basket) = True\nknows(polar_bear, defensive_plans_of(kudu)) = True\n\nquestion = give_magnifier(turtle, grasshopper)\n"}, {"idx": 12, "response": "eats_food_of(octopus, kangaroo) == True\nenemy(viperfish, jellyfish) = rule3()\nenemy(viperfish, jellyfish) == True\nlearn(something, elementary_resource_management_from(eel)) = rule1()\nlearn(something, elementary_resource_management_from(eel)) == True\nwink(viperfish, halibut) = rule2()\nwink(viperfish, halibut) == True\nquestion = True", "answer": 1, "code": "rule1() = enemy(something, jellyfish) => learn(something, elementary_resource_management_from(eel))\nrule2() = learn(something, elementary_resource_management_from(eel)) => wink(something, halibut)\nrule3() = eats_food_of(something, kangaroo) => enemy(viperfish, jellyfish)\nrule4() = took_bike(viperfish, store) => not enemy(viperfish, jellyfish)\norder(rule4) > order(rule3) = True\n\neats_food_of(octopus, kangaroo) = True\n\nquestion = wink(viperfish, halibut)\n"}, {"idx": 13, "response": "give_magnifier(meerkat, donkey) = rule5()\ngive_magnifier(meerkat, donkey) == True\ngive_magnifier(meerkat, donkey) == True\nquestion = True", "answer": 1, "code": "rule1() = not roll_dice(squirrel, gecko) => not give_magnifying_glass(gecko, squid)\nrule2() = friends(sea_bass) > 2 => needs_support(sea_bass, dog)\nrule3(something) = knows(defense_plan_of(lion), something) => not burn(warehouse_of(meerkat), something)\nrule4() = give_magnifier(animal, squirrel) => proceed(gecko, spot_right_after(spot_of(meerkat)))\nrule5() = raise_flag_of_peace(animal, leopard) => give_magnifier(meerkat, donkey)\nrule6() = steal_points(animal, lobster, 5) => give_magnifier(gecko, squid)\nrule7() = has(sea_bass, card) and color(card) in rainbow_colors => needs_support(sea_bass, dog)\nrule8(something) = not remove(something, piece_of(squid)) & give_magnifier(something, squid) => not proceed(something, spot_right_after(spot_of(meerkat)))\nrule9(something) = needs_support(something, dog) => burn(warehouse_of(meerkat), something)\nrule10() = raise_flag_of_peace(animal, squid) => not remove(gecko, piece_of(squid))\nrule11() = burn(warehouse_of(meerkat), sea_bass) & not proceed(gecko, spot_right_after(spot_of(meerkat))) => never_give_magnifying_glass(meerkat, donkey)\norder(rule1) > order(rule6) = True\norder(rule3) > order(rule9) = True\norder(rule4) > order(rule8) = True\norder(rule5) > order(rule11) = True\n\nraise_flag_of_peace(penguin, squid) = True\nhas(sea_bass, card_with(black_color)) = True\nfriends(sea_bass) = 5\nsteal_points(sun_bear, lobster, 5) = True\n\nquestion = give_magnifier(meerkat, donkey)\n"}, {"idx": 14, "response": "knock_down(black_bear, fortress_of(snail)) = True\nnot respects(cricket, snail) = rule7()\nrespects(cricket, snail) == False\nrespects(cricket, snail) == False\nraise_flag_of_peace(snail, grizzly_bear) = rule7()\nraise_flag_of_peace(snail, grizzly_bear) == True\nraise_flag_of_peace(snail, grizzly_bear) == True\nsteal_points(bat, 5, oscar) = rule6()\nsteal_points(bat, 5, oscar) == True\nsteal_points(bat, 5, oscar) == True\nrespects(bat, panther) = question\nrespects(bat, panther) = unknown", "answer": 0, "code": "rule1() = has(snail, card_with(primary_color)) => not raise_flag_of_peace(snail, grizzly_bear)\nrule2() = friends(snail) < 6 => not raise_flag_of_peace(snail, grizzly_bear)\nrule3() = raise_flag_of_peace(snail, grizzly_bear) => steal_points(grizzly_bear, 5, oscar)\nrule4() = owes_money_to(something, penguin) => wink(cockroach, bat)\nrule5() = has(cockroach, something_to_sit_on) => not prepare_armor(cockroach, lobster)\nrule6() = steal_points(something, 5, oscar) => respects(bat, panther)\nrule7() = knock_down(black_bear, fortress_of(snail)) & not respects(cricket, snail) => raise_flag_of_peace(snail, grizzly_bear)\nrule8() = attack(donkey, green_fields_of(grasshopper)) => owes_money_to(grasshopper, penguin)\nrule9() = purchased(cockroach, time_machine) => not prepare_armor(cockroach, lobster)\norder(rule1) > order(rule7) = True\norder(rule2) > order(rule7) = True\n\nknock_down(black_bear, fortress_of(snail)) = True\nhas(cockroach, love_seat_sofa) = True\ninvented(cockroach, time_machine) = True\nhas(snail, card_with(violet_color)) = True\nnot roll_dice(cricket, snail) = True\nnot attack(donkey, green_fields_of(grasshopper)) = True\n\nquestion = respects(bat, panther)\n"}, {"idx": 15, "response": "knows(defensive_plans_of(rabbit), blobfish) == True\nknock_down(rabbit, fortress_of(cricket)) = rule1()\nknock_down(rabbit, fortress_of(cricket)) == True\nknock_down(rabbit, fortress_of(cricket)) == True\nactual_enemy(cricket, parrot) = rule1()\nactual_enemy(cricket, parrot) == True\nactual_enemy(cricket, parrot) == True\nquestion = False", "answer": -1, "code": "rule1() = knock_down(rabbit, fortress_of(cricket)) => actual_enemy(cricket, parrot)\nrule2() = first_letter_of(name(kangaroo)) == first_letter_of(name(meerkat)) => actual_enemy(kangaroo, cricket)\nrule3() = first_letter_of(name(grasshopper)) == first_letter_of(name(lobster)) => not sing_song(grasshopper, victory_song_for(cricket))\nrule4(something) = not proceed(something, spot_right_after(spot_of(viperfish))) => knock_down(fortress_of(cricket), something)\nrule5(something) = respects(something, elephant) => points(something) == points(phoenix)\nrule6() = friends(kangaroo) > 3 => enemy(kangaroo, cricket)\nrule7(something) = not remove(something, piece_of(wolverine)) => respect(something, elephant)\nrule8(something) = actual_enemy(something, parrot) & points(something) == points(phoenix) => sing_song(something, victory_song_for(goldfish))\n\nknows(defensive_plans_of(rabbit), blobfish) = True\nname(grasshopper, Luna) = True\nfriends(kangaroo) = 2\nname(kangaroo, Cinnamon) = True\nname(lobster, Lily) = True\nname(meerkat, Charlie) = True\nnot remove(cricket, piece_of(wolverine)) = True\nnot proceed(rabbit, spot_right_after(spot_of(viperfish))) = True\n\nquestion = sing_song(cricket, victory_song_for(goldfish))\n"}, {"idx": 16, "response": "respects(grasshopper, hummingbird) == False\nnot sing_song(hare, victory_song_for(hummingbird)) = rule4()\nsing_song(hare, victory_song_for(hummingbird)) == False\nknows_defensive_plans(hummingbird, polar_bear) = rule4()\nknows_defensive_plans(hummingbird, polar_bear) == False\nhas(hummingbird, card_with(indigo_color)) = True\nknows_defensive_plans(hummingbird, polar_bear) = rule5()\nknows_defensive_plans(hummingbird, polar_bear) == True\nsteal_points(hummingbird, cheetah, 5) = rule2()\nsteal_points(hummingbird, cheetah, 5) == True\nsteal_points(cheetah, cat, 5) = rule2()\nsteal_points(cheetah, cat, 5) == False\nquestion = False", "answer": -1, "code": "rule1() = respects(something, hippopotamus) => steal_points(something, cheetah, 5)\nrule2() = steal_points(hummingbird, cheetah, 5) => not steal_points(cheetah, cat, 5)\nrule3(something) = attacks(something, green_fields_of(spider)) & rolls_dice(something, bat) => respects(something, hippopotamus)\nrule4() = not respects(grasshopper, hummingbird) & not sing_song(hare, victory_song_for(hummingbird)) => not knows_defensive_plans(hummingbird, polar_bear)\nrule5() = has(hummingbird, card_with(color_in(rainbow_colors))) => knows_defensive_plans(hummingbird, polar_bear)\norder(rule4) > order(rule5) = True\n\nattacks(hummingbird, green_fields_of(spider)) = True\nhas(hummingbird, card_with(indigo_color)) = True\nrolls_dice(hummingbird, bat) = True\nrespects(grasshopper, hummingbird) = False\n\nquestion = steal_points(cheetah, cat, 5)\n"}, {"idx": 17, "response": "not roll_dice(lobster, sea_bass) = True\nroll_dice(lobster, sea_bass) = False\nnot roll_dice(lobster, sea_bass) = True\nrespect(lobster, blobfish) = rule8()\nrespect(lobster, blobfish) = True\nknock_down(fortress_of(panda_bear), blobfish) = rule8()\nknock_down(fortress_of(panda_bear), blobfish) = True\nknock_down(fortress_of(panda_bear), blobfish) = True\nsing_song(grizzly_bear, victory_song_for(panda_bear)) = rule9()\nsing_song(grizzly_bear, victory_song_for(panda_bear)) = True\nsing_song(grizzly_bear, victory_song_for(panda_bear)) = True\nowes_money_to(panda_bear, elephant) = rule9()\nowes_money_to(panda_bear, elephant) = True\nquestion = True", "answer": 1, "code": "rule1() = knock_down(fortress_of(viperfish), something) & enemy(something, kudu) => not owes_money_to(something, elephant)\nrule2() = enemy(something, parrot) => offer_job(kiwi, swordfish)\nrule3() = offer_job(something, swordfish) => enemy(panda_bear, kudu)\nrule4() = has(catfish, musical_instrument) => not steal_points(catfish, 5, grizzly_bear)\nrule5() = not owes_money_to(catfish, grizzly_bear) => sing_song(grizzly_bear, victory_song_for(panda_bear))\nrule6() = friends(catfish) < 12 => not steal_points(catfish, 5, grizzly_bear)\nrule7(something) = not roll_dice(something, sea_bass) => respect(something, blobfish)\nrule8() = respect(lobster, blobfish) => knock_down(fortress_of(panda_bear), blobfish)\nrule9() = knock_down(fortress_of(panda_bear), blobfish) & sing_song(grizzly_bear, victory_song_for(panda_bear)) => owes_money_to(panda_bear, elephant)\norder(rule1) > order(rule9) = True\n\nenemy(baboon, parrot) = True\nhas(catfish, card_with(black_color)) = True\nfriends(catfish, easy_going) = 8\nfriends(catfish, not_easy_going) = 2\nhas(catfish, spinach) = True\nnot roll_dice(lobster, sea_bass) = True\n\nquestion = owes_money_to(panda_bear, elephant)\n"}, {"idx": 18, "response": "eats_food(canary, food_of(amberjack)) = unknown", "answer": 0, "code": "rule1() = friends(sea_bass) > 1 => knock_down(fortress_of(squirrel))\nrule2() = show_cards(something, viperfish) => not roll_dice(sea_bass, canary)\nrule3() = learn(something, elementary_resource_management_from(starfish)) => show_all_cards(goldfish, viperfish)\nrule4(something) = owes_money_to(something, carp) => steal_points(something, 5, cat)\nrule5() = first_letter_of(name(sea_bass)) == first_letter_of(name(leopard)) => not knock_down(fortress_of(squirrel))\nrule6() = has(koala, leafy_green_vegetable) => eats_food(koala, food_of(cow))\nrule7() = first_letter_of(name(koala)) == first_letter_of(name(meerkat)) => eats_food(koala, food_of(cow))\nrule8(something) = knock_down(fortress_of(squirrel), something) & raise_flag_of_peace(something, doctorfish) => roll_dice(something, canary)\nrule9() = not knows(defensive_plans_of(koala), elephant) => enemy(koala, cockroach)\nrule10() = steal_points(something, 5, cat) => enemy(bat, canary)\nrule11() = has(sea_bass, something_to_sit_on) => not knock_down(fortress_of(squirrel))\nrule12() = eats_food(rabbit, food_of(elephant)) => not knows(defensive_plans_of(koala), elephant)\nrule13() = has(sea_bass, card_with(primary_color)) => raise_flag_of_peace(sea_bass, doctorfish)\nrule14() = belief(enemy(bat, canary)) & roll_dice(sea_bass, canary) => eats_food(canary, food_of(amberjack))\nrule15() = took(sea_bass, bike_from(store)) => knock_down(fortress_of(squirrel))\nrule16(something) = eats_food(something, food_of(cow)) => not enemy(something, cockroach)\norder(rule11) > order(rule1) = True\norder(rule11) > order(rule15) = True\norder(rule5) > order(rule1) = True\norder(rule5) > order(rule15) = True\norder(rule8) > order(rule2) = True\norder(rule9) > order(rule16) = True\n\nowes_money_to(ferret, carp) = True\nhas(koala, romaine_lettuce) = True\nname(koala, Mojo) = True\nname(meerkat, Buddy) = True\neats_food(rabbit, food_of(elephant)) = True\nfriends(sea_bass) = 1\nparked(sea_bass, bike, in_front_of(store)) = True\nhas(sea_bass, backpack) = True\nhas(sea_bass, card_with(blue_color)) = True\nname(sea_bass, Bella) = True\nlearn(tilapia, basics_of_resource_management_from(starfish)) = True\n\nquestion = eats_food(canary, food_of(amberjack))\n"}, {"idx": 19, "response": "has(hummingbird, card_with(white_color)) == True\nfirst_letter_of(name(hummingbird)) == first_letter_of(name(oscar)) == True\nnot sing_song(hummingbird, victory_song_for(starfish)) = rule3()\nsing_song(hummingbird, victory_song_for(starfish)) == False\nknock_down(starfish, fortress_of(gecko)) = rule2()\nknock_down(starfish, fortress_of(gecko)) == True\nknock_down(starfish, fortress_of(gecko)) == True\nnot need_support(starfish, black_bear) = rule5()\nneed_support(starfish, black_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = has(hummingbird, card_with(color_starting_with(\"h\"))) => not sing_song(hummingbird, victory_song_for(starfish))\nrule2() = sing_song(hummingbird, victory_song_for(starfish)) => knock_down(starfish, fortress_of(gecko))\nrule3() = first_letter_of(name(hummingbird)) == first_letter_of(name(oscar)) => not sing_song(hummingbird, victory_song_for(starfish))\nrule4() = not sing_song(blobfish, victory_song_for(hummingbird)) & proceed(oscar, spot_right_after(spot_of(hummingbird))) => sing_song(hummingbird, victory_song_for(starfish))\nrule5(something) = knock_down(something, fortress_of(gecko)) => not need_support(something, black_bear)\norder(rule1) > order(rule4) = True\norder(rule3) > order(rule4) = True\n\nhas(hummingbird, card_with(white_color)) = True\nname(hummingbird, Teddy) = True\nproceed(oscar, spot_right_after(spot_of(hummingbird))) = True\nnot sing_song(blobfish, victory_song_for(hummingbird)) = True\n\nquestion = need_support(starfish, black_bear)\n"}, {"idx": 20, "response": "knock_down(fortress_of(jellyfish), cricket) == True\npoints(jellyfish) == points(mosquito) = rule1()\npoints(jellyfish) == points(mosquito) == True\nfirst_letter_of(name(phoenix)) == first_letter_of(name(viperfish)) = rule2()\nfirst_letter_of(name(phoenix)) == first_letter_of(name(viperfish)) == False\nnot equal_points(something, mosquito) = rule3(something)\nequal_points(something, mosquito) == False\nnot proceed(something, spot_right_after(spot_of(zander))) == True\nnot give_magnifying_glass(something, hare) & raise_flag_of_peace(something, moose) = rule4(something)\nnot give_magnifying_glass(something, hare) & raise_flag_of_peace(something, moose) == False\nnot wink_at(something, zander) == True\nneeds_support(something, grasshopper) = rule5()\nneeds_support(something, grasshopper) == True\nproceed(jellyfish, spot_right_after(spot_of(zander))) == True\nfriends(phoenix) < 8 = rule6()\nfriends(phoenix) < 8 == False\nneeds_support(phoenix, grasshopper) == False\nfirst_letter_of(name(baboon)) == first_letter_of(name(buffalo)) = rule7()\nfirst_letter_of(name(baboon)) == first_letter_of(name(buffalo)) == False\ngive_magnifying_glass(baboon, hummingbird) == False\nrolls_dice(rabbit, elephant) == True\nnot give_magnifying_glass(cheetah, hare) = rule8()\nnot give_magnifying_glass(cheetah, hare) == True\ngive_magnifier(something, hummingbird) = rule10(something)\ngive_magnifier(something, hummingbird) == False\nwink_at(cheetah, zander) == False\nbelief(wink_at(cheetah, zander) & proceed(jellyfish, spot_right_after(spot_of(zander)))) = False\nadd_conclusion(\"the zander eats the food that belongs to the swordfish\") = rule9()\n\"the zander eats the food that belongs to the swordfish\" in conclusions == False\n\nquestion = False", "answer": -1, "code": "rule1() = knock_down(fortress_of(jellyfish), cricket) => points(jellyfish) == points(mosquito)\nrule2() = first_letter_of(name(phoenix)) == first_letter_of(name(viperfish)) => needs_support(phoenix, grasshopper)\nrule3(something) = not equal_points(something, mosquito) => not proceed(something, spot_right_after(spot_of(zander)))\nrule4(something) = not give_magnifying_glass(something, hare) & raise_flag_of_peace(something, moose) => not wink_at(something, zander)\nrule5() = needs_support(something, grasshopper) => proceed(jellyfish, spot_right_after(spot_of(zander)))\nrule6() = friends(phoenix) < 8 => needs_support(phoenix, grasshopper)\nrule7() = first_letter_of(name(baboon)) == first_letter_of(name(buffalo)) => give_magnifying_glass(baboon, hummingbird)\nrule8() = rolls_dice(something, elephant) => not give_magnifying_glass(cheetah, hare)\nrule9() = belief(wink_at(cheetah, zander) & proceed(jellyfish, spot_right_after(spot_of(zander)))) => add_conclusion(\"the zander eats the food that belongs to the swordfish\")\nrule10() = give_magnifier(something, hummingbird) => wink_at(cheetah, zander)\norder(rule4) > order(rule10) = True\norder(rule5) > order(rule3) = True\n\nname(baboon, Cinnamon) = True\nname(buffalo, Casper) = True\nknock_down(fortress_of(jellyfish), cricket) = True\nfriends(phoenix) = 15\nname(phoenix, Charlie) = True\nrolls_dice(rabbit, elephant) = True\nname(viperfish, Pashmak) = True\n\nquestion = \"the zander eats the food that belongs to the swordfish\" in conclusions\n"}, {"idx": 21, "response": "has(baboon, card_with(black_color)) == True\ncolor_starts_with(card_with(black_color), \"l\") == False\nnot knock_down(fortress_of(kiwi)) = rule10()\nknock_down(fortress_of(kiwi)) == False\nsteal_points(eel, 5, grasshopper) = rule9(eel)\nsteal_points(eel, 5, grasshopper) == True\nsteal_points(eel, 5, grasshopper) == True\nquestion = True", "answer": 1, "code": "rule1() = has(aardvark, connect_to_internet(device)) => burn(warehouse_of(buffalo))\nrule2() = has(baboon, high_quality_paper) => steal_points(baboon, 5, zander)\nrule3() = needs_support(carp, eel) => not respect(eel, ferret)\nrule4() = friends(eel) < 5 => respect(eel, ferret)\nrule5() = first_letter_of(name(baboon)) == first_letter_of(name(mosquito)) => knock_down(fortress_of(kiwi))\nrule6(something) = remove(something, piece_of(squid)) => attack_green_fields(something, eel)\nrule7() = has(aardvark, card) and color(card) in rainbow_colors => burn(warehouse_of(buffalo))\nrule8(something) = not knock_down(fortress_of(kiwi)) & steal_points(something, 5, zander) => not proceed(something, spot_right_after(spot_of(eel)))\nrule9(something) = not needs_support(something, gecko) => steal_points(something, 5, grasshopper)\nrule10() = has(baboon, drink) => not knock_down(fortress_of(kiwi))\nrule11(something) = respects(something, ferret) => not needs_support(something, gecko)\nrule12() = proceed(baboon, spot_right_after(spot_of(eel))) & attack_green_fields(wolverine, eel) => not steal_points(eel, 5, grasshopper)\nrule13() = has(baboon, card) and color_starts_with(card, \"l\") => not knock_down(fortress_of(kiwi))\nrule14() = first_letter_of(name(eel)) == first_letter_of(name(turtle)) => respect(eel, ferret)\nrule15() = burn(warehouse_of(buffalo)) => proceed(baboon, spot_right_after(spot_of(eel)))\nrule16() = needs_support(something, doctorfish) => remove(wolverine, piece_of(squid))\norder(rule10) > order(rule5) = True\norder(rule13) > order(rule5) = True\norder(rule15) > order(rule8) = True\norder(rule3) > order(rule14) = True\norder(rule3) > order(rule4) = True\norder(rule9) > order(rule12) = True\n\nhas(aardvark, card_with(black_color)) = True\nhas(aardvark, cell_phone) = True\nhas(baboon, banana_strawberry_smoothie) = True\nhas(baboon, hot_chocolate) = True\nname(baboon, Buddy) = True\nhas(baboon, card_with(black_color)) = True\npublished_high_quality_paper(baboon) = True\nfriends(eel) = 15\nname(eel, Peddi) = True\nneeds_support(elephant, doctorfish) = True\nname(mosquito, Casper) = True\nname(turtle, Pashmak) = True\n\nquestion = steal_points(eel, 5, grasshopper)\n"}, {"idx": 22, "response": "has(whale, card_with(indigo_color)) == True\nraise_flag_of_peace(swordfish, gecko) = rule5()\nraise_flag_of_peace(swordfish, gecko) == True\nraise_flag_of_peace(swordfish, gecko) == True\nquestion = True", "answer": 1, "code": "rule1() = has(catfish, card_with(color_starting_with(\"v\"))) => proceed(catfish, spot_right_after(spot_of(snail)))\nrule2(something) = roll_dice_for(something, lobster) => knows(defensive_plans_of(swordfish), something)\nrule3() = proceed(something, spot_right_after(spot_of(snail))) => burn(warehouse_of(swordfish), cheetah)\nrule4() = not knows(defense_plan_of(swordfish), whale) & burn(warehouse_of(swordfish), cheetah) => not raise_flag_of_peace(swordfish, gecko)\nrule5() = raise_flag_of_peace(zander, swordfish) => raise_flag_of_peace(swordfish, gecko)\nrule6(something) = knock_down(fortress_of(crocodile), something) & sing_song(something, victory_song_for(kiwi)) => not knows(defense_plan_of(swordfish), something)\nrule7() = has(whale, leafy_green_vegetable) => sing_song(whale, victory_song_for(kiwi))\nrule8() = has(whale, card_with(color_in(rainbow_colors))) => sing_song(whale, victory_song_for(kiwi))\nrule9() = becomes_enemy(something, penguin) => knock_down(fortress_of(crocodile), whale)\nrule10() = fan_of(catfish, Chris_Ronaldo) => proceed(catfish, spot_right_after(spot_of(snail)))\nrule11() = attack(eel, green_fields_of(cheetah)) => not burn(warehouse_of(swordfish), cheetah)\norder(rule11) > order(rule3) = True\norder(rule2) > order(rule6) = True\norder(rule5) > order(rule4) = True\n\nhas(catfish, card_with(violet_color)) = True\nhates(catfish, Chris_Ronaldo) = True\nbecomes_enemy(spider, penguin) = True\nhas(whale, banana_strawberry_smoothie) = True\nhas(whale, card_with(indigo_color)) = True\n\nquestion = raise_flag_of_peace(swordfish, gecko)\n"}, {"idx": 23, "response": "respects(phoenix, octopus) == True\nnot respects(phoenix, octopus) == False\norder(rule2) > order(rule1) == True\n\nroll_dice(canary, lobster) = rule1()\nroll_dice(animal, eagle) = rule1()\nroll_dice(canary, lobster) == True\n\nquestion = True", "answer": 1, "code": "rule1() = roll_dice(canary, lobster) & roll_dice(animal, eagle)\nrule2(something) = offer_job_position(something, parrot) => not roll_dice(something, lobster)\nrule3() = roll_dice(aardvark, eagle) & respects(animal, rabbit)\nrule4(something) = not respects(something, octopus) => respects(something, rabbit)\norder(rule2) > order(rule1) = True\n\nrespects(phoenix, octopus) = True\n\nquestion = roll_dice(canary, lobster)\n"}, {"idx": 24, "response": "has(salmon, card_with(indigo_color)) == True\ncolor(card_with(indigo_color)) == indigo\nactual_enemy(salmon, grizzly_bear) = rule3()\nactual_enemy(salmon, grizzly_bear) == True\nnot knock_down(fortress_of(grizzly_bear), crocodile) = rule5()\nknock_down(fortress_of(grizzly_bear), crocodile) == False\npoints(grizzly_bear) == points(cheetah) = rule1(grizzly_bear)\npoints(grizzly_bear) == points(cheetah) == True\nlearn_basics_of_resource_management(grizzly_bear, jellyfish) = rule1(grizzly_bear)\nlearn_basics_of_resource_management(grizzly_bear, jellyfish) == True\nquestion = True", "answer": 1, "code": "rule1(something) = points(something) == points(cheetah) => learn_basics_of_resource_management(something, jellyfish)\nrule2() = friends(salmon) < 7 => not actual_enemy(salmon, grizzly_bear)\nrule3() = has(salmon, card) and color(card) in rainbow_colors => actual_enemy(salmon, grizzly_bear)\nrule4() = raise_flag_of_peace(something, tilapia) => not knock_down(fortress_of(grizzly_bear), crocodile)\nrule5() = not knock_down(fortress_of(grizzly_bear), crocodile) & actual_enemy(salmon, grizzly_bear) => points(grizzly_bear) == points(cheetah)\norder(rule2) > order(rule3) = True\n\nhas(salmon, card_with(indigo_color)) = True\nraise_flag_of_peace(squirrel, tilapia) = True\n\nquestion = learn_basics_of_resource_management(grizzly_bear, jellyfish)\n"}, {"idx": 25, "response": "not remove(hummingbird, piece_of(halibut)) = rule2(hummingbird)\nnot remove(hummingbird, piece_of(halibut)) == True\nrespects(hummingbird, cow) = rule5()\nrespects(hummingbird, cow) == False\nproceed(hummingbird, spot_right_after(spot_of(moose))) = rule1()\nproceed(hummingbird, spot_right_after(spot_of(moose))) == False\nquestion = True", "answer": 1, "code": "rule1() = not offer_job_position(tilapia, hummingbird) & roll_dice(pig, hummingbird) => not proceed(hummingbird, spot_right_after(spot_of(moose)))\nrule2(something) = proceed(something, spot_right_after(spot_of(moose))) & not respects(something, cow) => not remove(hummingbird, piece_of(halibut))\nrule3() = has(pig, card) & color(card) in rainbow_colors => not roll_dice(pig, hummingbird)\nrule4() = owes_money_to(something, caterpillar) => not respects(hummingbird, cow)\nrule5() = respects(something, cricket) => remove(hummingbird, piece_of(halibut))\nrule6(something) = wink(something, carp) => owes_money_to(something, caterpillar)\nrule7(something) = not give_magnifier(something, snail) => not owes_money_to(something, caterpillar)\nrule8(something) = not knows(defensive_plans_of(phoenix), something) => proceed(something, spot_right_after(spot_of(moose)))\nrule9() = give_magnifier(something, starfish) => roll_dice(pig, hummingbird)\nrule10() = show_cards(something, pig) => not knows(defensive_plans_of(phoenix), hummingbird)\norder(rule1) > order(rule8) = True\norder(rule3) > order(rule9) = True\norder(rule5) > order(rule2) = True\norder(rule6) > order(rule7) = True\n\ngive_magnifier(crocodile, starfish) = True\nwink(leopard, carp) = True\nnot give_magnifier(leopard, snail) = True\nshow_cards(wolverine, pig) = True\n\nquestion = remove(hummingbird, piece_of(halibut))\n"}, {"idx": 26, "response": "give_magnifying_glass(hummingbird, donkey) == False\nnot knows(defense_plan_of(sea_bass), hummingbird) = rule4()\nknows(defense_plan_of(sea_bass), hummingbird) == False\nfriends(hummingbird) = 6\nfriends(hummingbird) > 1 == True\nnot knows(defense_plan_of(sea_bass), hummingbird) == False\noffer_job_position(cow, hare) = rule5()\noffer_job_position(cow, hare) == True\nquestion = True", "answer": 1, "code": "rule1() = knows(defense_plan_of(sea_bass), something) => not wink(spider, cow)\nrule2() = has(polar_bear, card) and color(card) in rainbow_colors => enemy(polar_bear, aardvark)\nrule3() = give_magnifying_glass(something, donkey) => knows(defense_plan_of(sea_bass), something)\nrule4() = friends(hummingbird) > 1 => not knows(defense_plan_of(sea_bass), hummingbird)\nrule5() = not wink(spider, cow) & learn_basics_of_resource_management(donkey, cow) => offer_job_position(cow, hare)\nrule6() = enemy(something, aardvark) => learn_elementary_resource_management(donkey, cow)\nrule7() = respects(mosquito, spider) => wink(spider, cow)\nrule8() = owns(polar_bear, luxury_aircraft) => enemy(polar_bear, aardvark)\norder(rule1) > order(rule7) = True\norder(rule3) > order(rule4) = True\n\nfriends(hummingbird) = 6\nhas(hummingbird, blade) = True\nhas(polar_bear, card_with(black_color)) = True\nfriends(polar_bear) = 3\nowns(polar_bear, luxury_aircraft) = True\ngive_magnifying_glass(hummingbird, donkey) = False\n\nquestion = offer_job_position(cow, hare)\n"}, {"idx": 27, "response": "respects(wolverine, phoenix) == True\noffer_job_position(leopard, salmon) = rule3()\noffer_job_position(leopard, salmon) == True\noffer_job_position(leopard, salmon) == True\nnot sing_song(moose, victory_song_for(salmon)) = rule4()\nsing_song(moose, victory_song_for(salmon)) == False\nsing_song(moose, victory_song_for(salmon)) == False\ngive_magnifier(moose, polar_bear) = rule1(moose)\ngive_magnifier(moose, polar_bear) == True\ngive_magnifier(moose, polar_bear) == True\nquestion = True", "answer": 1, "code": "rule1(something) = needs_support(something, amberjack) & not sing_song(something, victory_song_for(salmon)) => give_magnifier(something, polar_bear)\nrule2(something) = eat_food(something, food_of(panda_bear)) => knock_down_fortress(something, fortress_of(gecko))\nrule3() = respects(animal, phoenix) => offer_job_position(leopard, salmon)\nrule4() = offer_job_position(animal, salmon) => not sing_song(moose, victory_song_for(salmon))\nrule5() = knock_down_fortress(animal, fortress_of(gecko)) => needs_support(moose, amberjack)\nrule6() = friends(leopard) < 16 => not offer_job_position(leopard, salmon)\norder(rule6) > order(rule3) = True\n\neat_food(cockroach, food_of(panda_bear)) = True\nrespects(wolverine, phoenix) = True\n\nquestion = give_magnifier(moose, polar_bear)\n"}, {"idx": 28, "response": "not eat_food(cow, food_of(panda_bear)) == True\nrespects(cow, black_bear) == rule9(cow)\nrespects(cow, black_bear) == True\nneeds_support(hummingbird, black_bear) == False\nsteal_points(black_bear, 5, ferret) == rule6()\nsteal_points(black_bear, 5, ferret) == True\nsteal_points(black_bear, 5, ferret) == True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(something, kudu) & wink_at(something, penguin) => not steal_points(something, 5, ferret)\nrule2() = wink_at(black_bear, penguin) <= wink_at(meerkat, black_bear)\nrule3() = prepare_armor(something, cricket) => not wink_at(something, black_bear)\nrule4() = roll_dice(something, grasshopper) => wink_at(meerkat, black_bear)\nrule5() = belief(cow, respects(black_bear)) & belief(cockroach, points(cockroach) == points(black_bear)) => prepare_armor(black_bear, kudu)\nrule6() = needs_support(hummingbird, black_bear) => steal_points(black_bear, 5, ferret)\nrule7(something) = raise_flag_of_peace(something, mosquito) => offer_job_position(something, oscar)\nrule8() = first_letter_of(name(cockroach)) == first_letter_of(name(panther)) => points(cockroach) == points(black_bear)\nrule9(something) = not eat_food(something, food_of(panda_bear)) => respects(something, black_bear)\nrule10(something) = offer_job_position(something, oscar) => not wink_at(something, penguin)\nrule11() = friends(cockroach) < 12 => points(cockroach) == points(black_bear)\norder(rule2) > order(rule10) = True\norder(rule3) > order(rule4) = True\norder(rule6) > order(rule1) = True\n\nraise_flag_of_peace(black_bear, mosquito) = True\nhas(cockroach, card_with(red_color)) = True\nname(cockroach, Tango) = True\nfriends(cockroach) = 4\nburn(warehouse_of(lion), leopard) = True\nname(panther, Lily) = True\nroll_dice(parrot, grasshopper) = True\nnot eat_food(cow, food_of(panda_bear)) = True\n\nquestion = steal_points(black_bear, 5, ferret)\n"}, {"idx": 29, "response": "question = unknown", "answer": 0, "code": "rule1() = not eat_food(something, donkey) & raise_flag_of_peace(something, elephant) => wink_at(something, elephant)\nrule2() = prepare_armor(pig, lobster) & not offer_job_position(catfish, lobster) => never_give_magnifying_glass(lobster, eagle)\nrule3() = has_high_salary(oscar) => not raise_flag_of_peace(oscar, elephant)\nrule4() = offer_job_position(tilapia, catfish) => not offer_job_position(catfish, lobster)\nrule5() = not knows_defense_plan(kudu, oscar) => raise_flag_of_peace(oscar, elephant)\nrule6() = show_all_cards(animal, raven) => eat_food(oscar, donkey)\nrule7() = has(oscar, musical_instrument) => give_magnifying_glass(oscar, gecko)\nrule8() = wink_at(animal, elephant) => give_magnifier(lobster, eagle)\nrule9() = learn_basics_of_resource_management(animal, parrot) => offer_job_position(tilapia, catfish)\nrule10() = has(oscar, musical_instrument) => not eat_food(oscar, donkey)\nrule11() = has(oscar, sharp_object) => not raise_flag_of_peace(oscar, elephant)\nrule12() = friends(oscar) > 5 => not eat_food(oscar, donkey)\nrule13() = first_letter_of(name(oscar)) == first_letter_of(name(polar_bear)) => give_magnifying_glass(oscar, gecko)\norder(rule2) > order(rule8) = True\norder(rule5) > order(rule11) = True\norder(rule5) > order(rule3) = True\norder(rule6) > order(rule10) = True\norder(rule6) > order(rule12) = True\n\nlearn_basics_of_resource_management(cheetah, parrot) = True\nknows_defense_plan(kudu, oscar) = True\nfriends(oscar) = 4\nhas(oscar, beer) = True\nhas(oscar, harmonica) = True\nname(oscar, Beauty) = True\nhas(oscar, flute) = True\nname(polar_bear, Bella) = True\n\nquestion = give_magnifier(lobster, eagle)\n"}, {"idx": 30, "response": "has(koala, cappuccino) == True\neat_food(gecko, food_of(koala)) == False\nnot eat_food(gecko, food_of(koala)) == True\nowes_money_to(koala, raven) = rule4()\nowes_money_to(koala, raven) == True\nneeds_support(grizzly_bear, oscar) = rule5()\nneeds_support(grizzly_bear, oscar) == True\nsteal_points(grizzly_bear, 5, salmon) = rule2()\nsteal_points(grizzly_bear, 5, salmon) == True\nsteal_points(grizzly_bear, 5, salmon) == True\nneeds_support(grizzly_bear, oscar) == True\nroll_dice(grizzly_bear, cockroach) = rule1(grizzly_bear)\nroll_dice(grizzly_bear, cockroach) == True\nroll_dice(grizzly_bear, cockroach) == True\nquestion = True", "answer": 1, "code": "rule1(something) = steal_points(something, 5, salmon) & needs_support(something, oscar) => roll_dice(something, cockroach)\nrule2() = prepare_armor(something, hummingbird) => steal_points(grizzly_bear, 5, salmon)\nrule3() = has(spider, card_with(color_in_flag_of_belgium)) => prepare_armor(spider, hummingbird)\nrule4() = has(koala, drink) => owes_money_to(koala, raven)\nrule5() = owes_money_to(something, raven) => needs_support(grizzly_bear, oscar)\nrule6() = not eat_food(gecko, food_of(koala)) => not owes_money_to(koala, raven)\norder(rule6) > order(rule4) = True\n\nhas(koala, cappuccino) = True\nhas(spider, card_with(red_color)) = True\n\nquestion = roll_dice(grizzly_bear, cockroach)\n"}, {"idx": 31, "response": "name(carp, Meadow) == True\nfriends(carp) == 6\nprepare_armor(carp, turtle) = rule1()\nprepare_armor(carp, turtle) == False\nparked_bike(carp, in_front_of(store)) == True\nprepare_armor(carp, turtle) = rule3()\nprepare_armor(carp, turtle) == False\nfirst_letter_of(name(carp)) == first_letter_of(name(bat)) == True\nsing_song(carp, victory_song_for(parrot)) = rule4()\nsing_song(carp, victory_song_for(parrot)) == True\nsing_song(carp, victory_song_for(parrot)) == True\nprepare_armor(carp, turtle) == False\neat_food(carp, food_of(spider)) = rule5(carp)\neat_food(carp, food_of(spider)) == True\neat_food(carp, food_of(spider)) == True\nproceed(carp, spot_right_after(spot_of(grizzly_bear))) = question\nproceed(carp, spot_right_after(spot_of(grizzly_bear))) == unknown", "answer": 0, "code": "rule1() = friends(carp) > 5 => not prepare_armor(carp, turtle)\nrule2() = eat_food(something, food_of(spider)) => not proceed(something, spot_right_after(spot_of(grizzly_bear)))\nrule3() = took_bike(carp, store) => not prepare_armor(carp, turtle)\nrule4() = first_letter_of(name(carp)) == first_letter_of(name(bat)) => sing_song(carp, victory_song_for(parrot))\nrule5(something) = sing_song(something, victory_song_for(parrot)) & not prepare_armor(something, turtle) => eat_food(something, food_of(spider))\n\nname(bat, Milo) = True\nfriends(carp) = 6\nname(carp, Meadow) = True\nparked_bike(carp, in_front_of(store)) = True\n\nquestion = proceed(carp, spot_right_after(spot_of(grizzly_bear)))\n"}, {"idx": 32, "response": "has(penguin, card_with(black_color)) == True\ncolor(card_with(black_color)) == black\nrespects(penguin, hippopotamus) = rule3()\nrespects(penguin, hippopotamus) == True\nnot knock_down(fortress_of(carp), penguin) = rule4(penguin)\nknock_down(fortress_of(carp), penguin) == False\nproceed(penguin, spot_right_after(spot_of(lion))) = rule4(penguin)\nproceed(penguin, spot_right_after(spot_of(lion))) == True\nquestion = True", "answer": 1, "code": "rule1() = not sing_song(koala, victory_song_for(penguin)) => not proceed(penguin, spot_right_after(spot_of(lion)))\nrule2(something) = not respects(something, hippopotamus) => not knock_down(fortress_of(carp), something)\nrule3() = has(penguin, card) and color(card) in colors_of(flag_of(Netherlands)) => respects(penguin, hippopotamus)\nrule4(something) = not knock_down(fortress_of(carp), something) => proceed(something, spot_right_after(spot_of(lion)))\nrule5() = killed(penguin, mayor) => respects(penguin, hippopotamus)\norder(rule1) > order(rule4) = True\n\nkilled(penguin, mayor) = True\nhas(penguin, romaine_lettuce) = True\nhas(penguin, card_with(black_color)) = True\n\nquestion = proceed(penguin, spot_right_after(spot_of(lion)))\n"}, {"idx": 33, "response": "has(lobster, card_with(blue_color)) == True\nknock_down_fortress(tilapia, eagle) = rule2()\nknock_down_fortress(tilapia, eagle) == True\nknock_down_fortress(tilapia, eagle) == True\nquestion = True", "answer": 1, "code": "rule1() = respects(sun_bear, goldfish) => steal_points(goldfish, 5, tilapia)\nrule2() = respects(leopard, tilapia) & steal_points(goldfish, 5, tilapia) => knock_down_fortress(tilapia, eagle)\nrule3(something) = not remove(something, piece_of(raven)) & owes_money_to(something, blobfish) => not respect(something, tilapia)\nrule4() = has(lobster, card_with(color_starting_with(\"l\"))) => knock_down_fortress(lobster, catfish)\nrule5() = has(lobster, sharp_object) => not knock_down_fortress(lobster, catfish)\nrule6() = sing_song(something, victory_song_for(moose)) => not owes_money_to(leopard, blobfish)\nrule7() = prepare_armor(something, parrot) => respects(sun_bear, goldfish)\nrule8(something) = not steal_points(something, 5, ferret) => owes_money_to(something, blobfish)\nrule9() = knock_down_fortress(something, catfish) => respects(leopard, tilapia)\nrule10() = friends(lobster) > 5 => knock_down_fortress(lobster, catfish)\norder(rule10) > order(rule5) = True\norder(rule3) > order(rule9) = True\norder(rule4) > order(rule5) = True\norder(rule6) > order(rule8) = True\n\nhas(lobster, card_with(blue_color)) = True\nhas(lobster, tablet) = True\nfriends(lobster) = 6\npublished_high_quality_paper(lobster) = True\nprepare_armor(oscar, parrot) = True\nnot steal_points(leopard, 5, ferret) = True\n\nquestion = knock_down_fortress(tilapia, eagle)\n"}, {"idx": 34, "response": "has(cockroach, bench) == True\nhas(cockroach, card_with(indigo_color)) == True\nhas(cockroach, cello) == True\nname(cockroach, Beauty) == True\nnot has(cockroach, keys) == True\nlearn_elementary_resource_management(cockroach, cheetah) = rule1()\nlearn_elementary_resource_management(cockroach, cheetah) == True\nlearn_elementary_resource_management(cockroach, cheetah) == True\nkiwi_knocks_down_fortress_of(cockroach) == True\nstarfish_attacks_green_fields_of(cockroach) == True\nnot eat_food_of(cockroach, starfish) = rule2()\neat_food_of(cockroach, starfish) == False\neat_food_of(cockroach, starfish) == False\nhas(cockroach, card_with(primary_color)) == True\nlearn_basics_of_resource_management(cockroach, cheetah) = rule3()\nlearn_basics_of_resource_management(cockroach, cheetah) == True\nlearn_basics_of_resource_management(cockroach, cheetah) == True\nnot eat_food_of(cockroach, starfish) = rule4(cockroach)\nnot learn_basics_of_resource_management(cockroach, hippopotamus) == True\nnot learn_basics_of_resource_management(cockroach, hippopotamus) == True\nhas(cockroach, something_to_drink) == True\ngive_magnifier_to(cockroach, bat) = rule5()\ngive_magnifier_to(cockroach, bat) == True\ngive_magnifier_to(cockroach, bat) == True\nhas(cockroach, something_to_sit_on) == True\nnot give_magnifier_to(cockroach, bat) = rule6()\nnot give_magnifier_to(cockroach, bat) == False\nnot give_magnifier_to(cockroach, bat) == False\nfirst_letter_of(name(cockroach)) == first_letter_of(name(parrot)) == True\neat_food_of(cockroach, starfish) = rule7()\neat_food_of(cockroach, starfish) == True\neat_food_of(cockroach, starfish) == True\nnot learn_basics_of_resource_management(cockroach, hippopotamus) == True\nnot sing_song(hippopotamus, victory_song_for(jellyfish)) = rule8()\nnot sing_song(hippopotamus, victory_song_for(jellyfish)) == True\nnot sing_song(hippopotamus, victory_song_for(jellyfish)) == True\nquestion = True", "answer": 1, "code": "rule1() = not has(cockroach, keys) => learn_elementary_resource_management(cockroach, cheetah)\nrule2() = belief(kiwi_knocks_down_fortress_of(cockroach)) & belief(starfish_attacks_green_fields_of(cockroach)) => not eat_food_of(cockroach, starfish)\nrule3() = has(cockroach, card_with(primary_color)) => learn_basics_of_resource_management(cockroach, cheetah)\nrule4(something) = not eat_food_of(something, starfish) & learn_basics_of_resource_management(something, cheetah) => not learn_basics_of_resource_management(something, hippopotamus)\nrule5() = has(cockroach, something_to_drink) => give_magnifier_to(cockroach, bat)\nrule6() = has(cockroach, something_to_sit_on) => not give_magnifier_to(cockroach, bat)\nrule7() = first_letter_of(name(cockroach)) == first_letter_of(name(parrot)) => eat_food_of(cockroach, starfish)\nrule8() = not learn_basics_of_resource_management(cockroach, hippopotamus) => not sing_song(hippopotamus, victory_song_for(jellyfish))\norder(rule2) > order(rule7) = True\norder(rule5) > order(rule6) = True\n\nhas(cockroach, bench) = True\nhas(cockroach, card_with(indigo_color)) = True\nhas(cockroach, cello) = True\nname(cockroach, Beauty) = True\nnot has(cockroach, keys) = True\nhas(cockroach, hot_chocolate) = True\nkiwi_knocks_down_fortress_of(cockroach) = True\nname(parrot, Bella) = True\nstarfish_attacks_green_fields_of(cockroach) = True\n\nquestion = sing_song(hippopotamus, victory_song_for(jellyfish))\n"}, {"idx": 35, "response": "roll_dice(caterpillar, leopard) == True\nnot offer_job(leopard, cockroach) = rule1()\noffer_job(leopard, cockroach) == False\nholds_same_points(leopard, squid) == False\nnot offer_job(leopard, leopard) = rule2(leopard)\noffer_job(leopard, leopard) == False\nnot offer_job(halibut, leopard) = rule3()\noffer_job(halibut, leopard) == False\nattacks_green_fields(whale, leopard) = rule4()\nattacks_green_fields(whale, leopard) == True\nlearns_elementary_resource_management(leopard, rabbit) = rule5()\nlearns_elementary_resource_management(leopard, rabbit) == False\ngives_magnifier(leopard, cow) = rule6()\ngives_magnifier(leopard, cow) == False\nnot offer_job(leopard, cockroach) == False\nnot learn_basics_of_resource_management(leopard, rabbit) = rule6()\nlearn_basics_of_resource_management(leopard, rabbit) == False\nrespects(leopard, lobster) = question\nrespects(leopard, lobster) == unknown", "answer": 0, "code": "rule1() = not roll_dice(caterpillar, leopard) => not offer_job(leopard, cockroach)\nrule2(something) = holds_same_points(something, squid) => not offer_job(something, leopard)\nrule3() = not offer_job(halibut, leopard) & attacks_green_fields(whale, leopard) => learn_basics_of_resource_management(leopard, rabbit)\nrule4() = has(drink, whale) => attacks_green_fields(whale, leopard)\nrule5(something) = learns_elementary_resource_management(something, rabbit) => respects(something, lobster)\nrule6() = gives_magnifier(something, cow) & not offer_job(something, cockroach) => not learn_basics_of_resource_management(something, rabbit)\norder(rule6) > order(rule3) = True\n\nroll_dice(caterpillar, leopard) = True\nholds_same_points(halibut, squid) = True\nhas(whale, tablet) = True\nnot roll_dice(whale, rabbit) = True\n\nquestion = respects(leopard, lobster)\n"}, {"idx": 36, "response": "has(black_bear, card_with(blue_color)) == True\nnot steal_points(black_bear, 5, eagle) = rule8()\nsteal_points(black_bear, 5, eagle) == False\nraise_flag_of_peace(cheetah, eagle) = rule4()\nraise_flag_of_peace(cheetah, eagle) == True\nraise_flag_of_peace(cheetah, eagle) == True\nnot steal_points(black_bear, 5, eagle) == False\nprepare_armor(eagle, donkey) = rule9()\nprepare_armor(eagle, donkey) == True\nprepare_armor(eagle, donkey) == True\nquestion = True", "answer": 1, "code": "rule1() = not offer_job_position(something, squid) => not raise_flag_of_peace(something, eagle)\nrule2() = not enemy(cheetah, eagle) => not prepare_armor(eagle, donkey)\nrule3() = not show_all_cards(zander, kangaroo) => not roll_dice(kangaroo, halibut)\nrule4() = roll_dice(something, halibut) => raise_flag_of_peace(cheetah, eagle)\nrule5() = has(black_bear, card_with(primary_color)) => burn(warehouse_of(jellyfish), black_bear)\nrule6() = has(black_bear, something_to_carry_apples_and_oranges) => burn(warehouse_of(jellyfish), black_bear)\nrule7() = knock_down(fortress_of(doctorfish), something) => roll_dice(kangaroo, halibut)\nrule8(something) = burn(warehouse_of(jellyfish), something) => not steal_points(something, 5, eagle)\nrule9() = raise_flag_of_peace(cheetah, eagle) & not steal_points(black_bear, 5, eagle) => prepare_armor(eagle, donkey)\norder(rule1) > order(rule4) = True\norder(rule2) > order(rule9) = True\norder(rule3) > order(rule7) = True\n\nhas(black_bear, beer) = True\nhas(black_bear, card_with(blue_color)) = True\nknock_down(fortress_of(doctorfish), cricket) = True\n\nquestion = prepare_armor(eagle, donkey)\n"}, {"idx": 37, "response": "attacks(green_fields_of(kangaroo), leopard) == True\nsteal_points(cricket, elephant, 5) = rule3()\nsteal_points(cricket, elephant, 5) == True\nsteal_points(cricket, elephant, 5) == True\nnot need_support(cricket, goldfish) = rule4(cricket)\nnot need_support(cricket, goldfish) == True\nnot need_support(cricket, goldfish) == True\nnot owes_money_to(cricket, catfish) = rule1()\nowes_money_to(cricket, catfish) == False\nowes_money_to(cricket, catfish) == False\nnot learn_basics_of_resource_management(cricket, blobfish) = rule5(cricket)\nnot learn_basics_of_resource_management(cricket, blobfish) == True\nnot learn_basics_of_resource_management(cricket, blobfish) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(something, crocodile) => owes_money_to(something, catfish)\nrule2() = rolls_dice_for(something, buffalo) => respects(something, turtle)\nrule3() = attacks(green_fields_of(kangaroo), something) => steal_points(cricket, elephant, 5)\nrule4(something) = steal_points(something, elephant, 5) => not need_support(something, goldfish)\nrule5(something) = not need_support(something, goldfish) & not owes_money_to(something, catfish) => not learn_basics_of_resource_management(something, blobfish)\nrule6() = respects(something, turtle) => not owes_money_to(something, catfish)\nrule7() = not respects(something, doctorfish) => learn_basics_of_resource_management(something, blobfish)\norder(rule1) > order(rule6) = True\norder(rule7) > order(rule5) = True\n\nrolls_dice_for(cricket, buffalo) = True\nattacks(green_fields_of(kangaroo), leopard) = True\n\nquestion = learn_basics_of_resource_management(cricket, blobfish)\n"}, {"idx": 38, "response": "mean_friends(kudu) = 3\nnot_mean_friends(kudu) = 2\nactual_enemy(kudu, hare) = rule2()\nactual_enemy(kudu, hare) == True\nactual_enemy(kudu, hare) == True\nsing_song(spider, victory_song_for(panda_bear)) = rule3()\nsing_song(spider, victory_song_for(panda_bear)) == True\nsing_song(spider, victory_song_for(panda_bear)) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(aardvark) < 17 => owes_money_to(aardvark, phoenix)\nrule2() = has(kudu, card_with(color_in_flag_of_france)) => actual_enemy(kudu, hare)\nrule3() = actual_enemy(kudu, spider) => sing_song(spider, victory_song_for(panda_bear))\nrule4(something) = give(something, magnifying_glass, hare) & enemy(something, hare) => enemy(something, spider)\nrule5() = first_letter_of(name(kudu)) == first_letter_of(name(cat)) => give(kudu, magnifying_glass, hare)\nrule6() = has(kudu, something_to_sit_on) => give(kudu, magnifier, hare)\n\nfriends(aardvark) = 10\nname(cat, Paco) = True\nhas(kudu, card_with(blue_color)) = True\nmean_friends(kudu) = 3\nnot_mean_friends(kudu) = 2\nhas(kudu, cutter) = True\nname(kudu, Buddy) = True\n\nquestion = sing_song(spider, victory_song_for(panda_bear))\n"}, {"idx": 39, "response": "friends(meerkat) = 1\nfriends(rabbit) = 7\norder(rule10) > order(rule1) = True\norder(rule10) > order(rule13) = True\norder(rule3) > order(rule11) = True\norder(rule6) > order(rule4) = True\norder(rule8) > order(rule1) = True\norder(rule8) > order(rule13) = True\n\nnot owes_money_to(meerkat, sheep) = rule8()\nowes_money_to(meerkat, sheep) == False\nlearn(dog, elementary_resource_management_from(pig)) = rule3()\nlearn(dog, elementary_resource_management_from(pig)) == True\nnot sing_song(viperfish, victory_song_for(pig)) = rule2()\nsing_song(viperfish, victory_song_for(pig)) == False\nsing_song(pig, victory_song_for(tiger)) = rule9()\nsing_song(pig, victory_song_for(tiger)) == True\n\nquestion = True", "answer": 1, "code": "rule1() = friends(meerkat) > 10 => owes_money_to(meerkat, sheep)\nrule2() = respects(rabbit, viperfish) => not sing_song(viperfish, victory_song_for(pig))\nrule3() = owes_money_to(some_animal, sheep) => learn(dog, elementary_resource_management_from(pig))\nrule4() = not burn(warehouse_of(panther), catfish) => not knock_down(fortress_of(dog), panther)\nrule5() = has(rabbit, card) and color(card) in rainbow_colors => respects(rabbit, viperfish)\nrule6(something) = remove(something, piece_of(squirrel)) & eat_food(something, food_of(cockroach)) => knock_down(fortress_of(dog), something)\nrule7() = wink(wolverine, moose) => roll_dice(moose, viperfish)\nrule8() = has(meerkat, something_to_sit_on) => not owes_money_to(meerkat, sheep)\nrule9() = learn(dog, elementary_resource_management_from(pig)) & not sing_song(viperfish, victory_song_for(pig)) => sing_song(pig, victory_song_for(tiger))\nrule10() = has(meerkat, something_to_sit_on) => not owe_money(meerkat, sheep)\nrule11() = knock_down(fortress_of(dog), panther) => not learn(dog, basics_of_resource_management_from(pig))\nrule12() = friends(rabbit) > 15 => respects(rabbit, viperfish)\nrule13() = first_letter_of(name(meerkat)) == first_letter_of(name(hippopotamus)) => owes_money_to(meerkat, sheep)\norder(rule10) > order(rule1) = True\norder(rule10) > order(rule13) = True\norder(rule3) > order(rule11) = True\norder(rule6) > order(rule4) = True\norder(rule8) > order(rule1) = True\norder(rule8) > order(rule13) = True\n\nlearn(donkey, basics_of_resource_management_from(moose)) = True\nburn(warehouse_of(cow), goldfish) = True\nname(hippopotamus, Chickpea) = True\nfriends(meerkat) = 1\nhas(meerkat, arugula) = True\nname(meerkat, Cinnamon) = True\neat_food(panther, food_of(cockroach)) = True\nremove(panther, piece_of(squirrel)) = True\nfriends(rabbit) = 7\nhas(rabbit, card_with(violet_color)) = True\nwink(wolverine, moose) = True\nnot burn(warehouse_of(panther), catfish) = True\n\nquestion = sing_song(pig, victory_song_for(tiger))\n"}, {"idx": 40, "response": "lost_keys(cow) == True\nnot has(cow, keys) = rule3()\nhas(cow, keys) == False\nowes_money_to(donkey, crocodile) == True\nbecome_enemy(crocodile, phoenix) = rule10()\nbecome_enemy(crocodile, phoenix) == True\nbecome_enemy(crocodile, phoenix) == True\nquestion = False", "answer": -1, "code": "rule1(something) = eat_food(something, food_of(halibut)) & not roll_dice(something, raven) => not become_enemy(something, tilapia)\nrule2(something) = not sing_song(something, victory_song_for(viperfish)) => prepare_armor(something, tilapia)\nrule3() = not has(cow, keys) => eat_food(cow, food_of(halibut))\nrule4() = knock_down(something, fortress_of(bat)) => not become_enemy(crocodile, phoenix)\nrule5() = not give(blobfish, magnifying_glass, sun_bear) => not sing_song(sun_bear, victory_song_for(viperfish))\nrule6() = has(cow, card_with(color_in(rainbow_colors))) => sing_song(cow, victory_song_for(whale))\nrule7() = become_enemy(cow, tilapia) & prepare_armor(sun_bear, tilapia) => not raise_flag_of_peace(tilapia, sea_bass)\nrule8() = wink_at(something, snail) => sing_song(sun_bear, victory_song_for(viperfish))\nrule9(something) = knows(defensive_plans_of(spider), something) => not sing_song(something, victory_song_for(whale))\nrule10() = owes_money_to(donkey, crocodile) => become_enemy(crocodile, phoenix)\nrule11(something) = not sing_song(something, victory_song_for(whale)) => become_enemy(something, tilapia)\norder(rule1) > order(rule11) = True\norder(rule10) > order(rule4) = True\norder(rule6) > order(rule9) = True\norder(rule8) > order(rule5) = True\n\nknows(defensive_plans_of(spider), cow) = True\nlost_keys(cow) = True\nowes_money_to(donkey, crocodile) = True\nknock_down(elephant, fortress_of(bat)) = True\nnot give(blobfish, magnifying_glass, sun_bear) = True\n\nquestion = raise_flag_of_peace(tilapia, sea_bass)\n"}, {"idx": 41, "response": "remove(buffalo, piece_of(spider)) == True\nnot respects(ferret, carp) = rule3()\nrespects(ferret, carp) == False\nstole(ferret, bike_from(store)) == True\nnot has(ferret, keys) = rule4()\nhas(ferret, keys) == False\nlearns_basics_of_resource_management(meerkat, wolverine) = rule2()\nlearns_basics_of_resource_management(meerkat, wolverine) == True\nlearns_basics_of_resource_management(meerkat, wolverine) == True\nquestion = True", "answer": 1, "code": "rule1() = learns_basics_of_resource_management(something, wolverine) => give(squid, magnifying_glass, aardvark)\nrule2() = respects(something, carp) => learns_basics_of_resource_management(meerkat, wolverine)\nrule3() = remove(something, piece_of(spider)) => not respects(ferret, carp)\nrule4() = not has(ferret, keys) => respects(ferret, carp)\norder(rule4) > order(rule3) = True\n\nremove(buffalo, piece_of(spider)) = True\nstole(ferret, bike_from(store)) = True\n\nquestion = give(squid, magnifying_glass, aardvark)\n"}, {"idx": 42, "response": "has(oscar, tablet) == True\nhas(oscar, drink) = rule7()\npoints(oscar) == points(kiwi) == True\ngive_magnifier(oscar, phoenix) = rule8()\ngive_magnifier(oscar, phoenix) == True\ngive_magnifier(oscar, phoenix) == True\nquestion = True", "answer": 1, "code": "rule1() = saw_burn(warehouse_of(blobfish), something) => knock_down(fortress_of(oscar), something)\nrule2(something) = not burn(warehouse_of(tilapia), something) & points(something) == points(kiwi) => points(something) == points(turtle)\nrule3() = enemy(goldfish, oscar) & not knock_down(fortress_of(oscar), wolverine) => never_equal_points(oscar, turtle)\nrule4() = has(oscar, card) and color(card) in rainbow_colors => points(oscar) == points(kiwi)\nrule5() = friends(oscar) < 17 => not burn(warehouse_of(tilapia), oscar)\nrule6() = first_letter_of(name(wolverine)) == first_letter_of(name(polar_bear)) => not knock_down(fortress_of(oscar), wolverine)\nrule7() = has(oscar, drink) => points(oscar) == points(kiwi)\nrule8() = saw_equal_points(something, turtle) => give_magnifier(something, phoenix)\norder(rule1) > order(rule6) = True\norder(rule3) > order(rule2) = True\n\nfriends(oscar) = 8\nhas(oscar, card_with(blue_color)) = True\nhas(oscar, tablet) = True\nname(polar_bear, Lucy) = True\nname(wolverine, Lola) = True\n\nquestion = give_magnifier(oscar, phoenix)\n"}, {"idx": 43, "response": "actual_enemy(cat, donkey) == True\nnot actual_enemy(cat, hare) = rule2()\nactual_enemy(cat, hare) == False\nneed_support(cat, squirrel) = rule5()\nneed_support(cat, squirrel) == True\nneed_support(cat, squirrel) == True\nquestion = True", "answer": 1, "code": "rule1() = show_cards(something, octopus) => knock_down(kudu, fortress_of(cat))\nrule2() = eat_food(something, jellyfish) => not actual_enemy(cat, hare)\nrule3() = owes_money_to(something, salmon) => not need_support(something, squirrel)\nrule4() = not actual_enemy(something, hare) => owes_money_to(something, salmon)\nrule5() = rolls_dice_for(something, wolverine) => need_support(something, squirrel)\nrule6() = knock_down(kudu, fortress_of(cat)) & offer_job_position(salmon, cat) => not owes_money_to(cat, salmon)\norder(rule5) > order(rule3) = True\norder(rule6) > order(rule4) = True\n\nactual_enemy(cat, donkey) = True\nraise_flag_of_peace(cat, carp) = True\nshow_cards(cockroach, octopus) = True\neat_food(hummingbird, jellyfish) = True\n\nquestion = need_support(cat, squirrel)\n"}, {"idx": 44, "response": "name(phoenix, Pashmak) == True\nname(whale, Tarzan) == True\nfirst_letter_of(name(phoenix)) == first_letter_of(name(whale)) == True\nattack_green_fields(phoenix, owner_is(tiger)) = rule1()\nattack_green_fields(phoenix, owner_is(tiger)) == True\nattack_green_fields(phoenix, owner_is(tiger)) == True\nnot offer_job(phoenix, cricket) = rule2()\nnot offer_job(phoenix, cricket) == True\nnot offer_job(phoenix, cricket) == True\nlearn_basics_of_resource_management(cricket, canary) = rule2()\nlearn_basics_of_resource_management(cricket, canary) == True\nlearn_basics_of_resource_management(cricket, canary) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(phoenix)) == first_letter_of(name(whale)) => attack_green_fields(phoenix, owner_is(tiger))\nrule2() = not offer_job(phoenix, cricket) & not attack_green_fields(oscar, owner_is(cricket)) => learn_basics_of_resource_management(cricket, canary)\nrule3(something) = attack_green_fields(something, owner_is(tiger)) & points(something) == points(panther) => not offer_job(something, cricket)\nrule4() = owes_money_to(something, meerkat) => points(phoenix) == points(panther)\nrule5(something) = enemy(something, amberjack) => give_magnifier(something, sheep)\nrule6() = give_magnifier(something, sheep) => not attack_green_fields(oscar, owner_is(cricket))\nrule7() = has(phoenix, card_with(color_in_flag_of_france)) => attack_green_fields(phoenix, owner_is(tiger))\nrule8(something) = not raise_flag_of_peace(something, panda_bear) => not attack_green_fields(something, owner_is(tiger))\norder(rule8) > order(rule1) = True\norder(rule8) > order(rule7) = True\n\nhas(phoenix, card_with(white_color)) = True\nname(phoenix, Pashmak) = True\nowes_money_to(salmon, meerkat) = True\nname(whale, Tarzan) = True\nnot enemy(spider, amberjack) = True\n\nquestion = learn_basics_of_resource_management(cricket, canary)\n"}, {"idx": 45, "response": "proceed_to_spot_right_after(hippopotamus, spot_of(lobster)) == True\nneed_support(puffin, octopus) = rule6()\nneed_support(puffin, octopus) == True\nattack_green_fields(halibut, green_fields_of(oscar)) = rule1()\nattack_green_fields(halibut, green_fields_of(oscar)) == True\nattack_green_fields(halibut, green_fields_of(oscar)) == True\neat_food(oscar, food_of(moose)) = rule3()\neat_food(oscar, food_of(moose)) == True\neat_food(oscar, food_of(moose)) == True\nquestion = True", "answer": 1, "code": "rule1() = attack_green_fields(something, green_fields_of(eel)) => attack_green_fields(halibut, green_fields_of(oscar))\nrule2() = first_letter_of(name(puffin)) == first_letter_of(name(sun_bear)) => not need_support(puffin, octopus)\nrule3() = offer_job(puffin, oscar) & attack_green_fields(halibut, green_fields_of(oscar)) => eat_food(oscar, food_of(moose))\nrule4(something) = points(something) == points(eagle) => attack_green_fields(something, green_fields_of(eel))\nrule5(something) = knock_down_fortress(something, fortress_of(ferret)) => not learn_elementary_resource_management(something, parrot)\nrule6() = proceed_to_spot_right_after(something, spot_of(lobster)) => need_support(puffin, octopus)\nrule7() = has(puffin, card_with(color_in(rainbow_colors))) => not knock_down_fortress(puffin, fortress_of(jellyfish))\nrule8() = has(puffin, sharp_object) => not knock_down_fortress(puffin, fortress_of(jellyfish))\nrule9(something) = not learn_basics_of_resource_management(something, parrot) => offer_job_position(something, oscar)\norder(rule6) > order(rule2) = True\n\nproceed_to_spot_right_after(hippopotamus, spot_of(lobster)) = True\nhas(puffin, card_with(orange_color)) = True\nhas(puffin, cello) = True\nname(puffin, Buddy) = True\nknock_down_fortress(puffin, fortress_of(ferret)) = True\npoints(squirrel) == points(eagle) = True\nname(sun_bear, Beauty) = True\n\nquestion = eat_food(oscar, food_of(moose))\n"}, {"idx": 46, "response": "struggles_to_find_food(kangaroo) == True\nnot attack(kangaroo, green_fields_of(eel)) = rule1()\nattack(kangaroo, green_fields_of(eel)) == False\nnot sing_song(kangaroo, victory_song_for(viperfish)) = rule2()\nsing_song(kangaroo, victory_song_for(viperfish)) == False\nowes_money_to(dog, kangaroo) == True\nsteal_points(kangaroo, dog, 5) = rule9()\nsteal_points(kangaroo, dog, 5) == True\nnot attack(kangaroo, green_fields_of(eel)) = rule7()\nattack(kangaroo, green_fields_of(eel)) == False\nquestion = False", "answer": -1, "code": "rule1() = give_magnifier(something, kiwi) => attack(kangaroo, green_fields_of(eel))\nrule2() = points(leopard) == points(kangaroo) & sing_song(sea_bass, victory_song_for(kangaroo)) => not sing_song(kangaroo, victory_song_for(viperfish))\nrule3() = has(pig, leafy_green_vegetable) => not roll_dice(pig, leopard)\nrule4(something) = not attack(something, green_fields_of(sun_bear)) => sing_song(something, victory_song_for(kangaroo))\nrule5() = not roll_dice(pig, leopard) => points(leopard) == points(kangaroo)\nrule6(something) = not attack(green_fields_of(eel), something) & offer_job(something, starfish) => sing_song(something, victory_song_for(viperfish))\nrule7(something) = steal_points(something, dog, 5) => not attack(something, green_fields_of(eel))\nrule8() = show_all_cards(something, cat) => not attack(green_fields_of(sun_bear), sea_bass)\nrule9() = owes_money_to(dog, kangaroo) => steal_points(kangaroo, dog, 5)\nrule10() = has(pig, card_with(color_in_flag_of_Japan)) => roll_dice(pig, leopard)\norder(rule1) > order(rule7) = True\norder(rule10) > order(rule3) = True\norder(rule6) > order(rule2) = True\n\nowes_money_to(dog, kangaroo) = True\nstruggles_to_find_food(kangaroo) = True\nshow_all_cards(parrot, cat) = True\nhas(pig, spinach) = True\nnot roll_dice(puffin, sea_bass) = True\n\nquestion = sing_song(kangaroo, victory_song_for(viperfish))\n"}, {"idx": 47, "response": "has(squid, high_quality_paper) == True\nneeds_support(squid, sea_bass) = rule8()\nneeds_support(squid, sea_bass) == True\nburn(warehouse_of(zander), something) = rule7()\nburn(warehouse_of(zander), something) == True\nburn(warehouse_of(zander), something) == True\nremove(squid, piece_of(parrot)) = question\nremove(squid, piece_of(parrot)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(blobfish, connect_to_internet(device)) => show_cards(blobfish, eagle)\nrule2() = not enemy(eel, eagle) & show_cards(blobfish, eagle) => burn(warehouse_of(zander), eagle)\nrule3(something) = not needs_support(something, sea_bass) => sing_song(something, victory_song_for(spider))\nrule4() = has(squid, card_with(color_in_flag_of(Netherlands))) => needs_support(squid, sea_bass)\nrule5(something) = sing_song(something, victory_song_for(spider)) & points(something) != points(dog) => not remove(something, piece_of(parrot))\nrule6() = has(eel, card_with(color_in_flag_of(Belgium))) => not enemy(eel, eagle)\nrule7() = burn(warehouse_of(zander), something) => remove(squid, piece_of(parrot))\nrule8() = has(squid, high_quality_paper) => needs_support(squid, sea_bass)\nrule9() = learn(tilapia, elementary_resource_management_from(eel)) => enemy(eel, eagle)\nrule10() = friends(blobfish) > 7 => show_cards(blobfish, eagle)\norder(rule6) > order(rule9) = True\norder(rule7) > order(rule5) = True\n\nhas(blobfish, knapsack) = True\nfriends(blobfish) = 6\nhas(eel, card_with(black_color)) = True\nhas(squid, card_with(indigo_color)) = True\npublished(squid, high_quality_paper) = True\n\nquestion = remove(squid, piece_of(parrot))\n"}, {"idx": 48, "response": "difficulty_finding_food(polar_bear) == True\nowes_money_to(polar_bear, grasshopper) = rule3()\nowes_money_to(polar_bear, grasshopper) == True\nremove(sun_bear, piece_of(viperfish)) = rule4()\nremove(sun_bear, piece_of(viperfish)) == False\nraise_flag_of_peace(viperfish, lobster) = rule4()\nraise_flag_of_peace(viperfish, lobster) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(sun_bear) < 14 => sing_song(sun_bear, victory_song_for(turtle))\nrule2(something) = raise_flag_of_peace(something, jellyfish) & sing_song(something, victory_song_for(turtle)) => remove(something, piece_of(viperfish))\nrule3() = difficulty_finding_food(polar_bear) => owes_money_to(polar_bear, grasshopper)\nrule4() = remove(sun_bear, piece_of(viperfish)) => raise_flag_of_peace(viperfish, lobster)\nrule5() = first_letter_of(name(sun_bear)) == first_letter_of(name(oscar)) => raise_flag_of_peace(sun_bear, jellyfish)\nrule6() = has(sun_bear, card_with(primary_color)) => raise_flag_of_peace(sun_bear, jellyfish)\nrule7() = first_letter_of(name(polar_bear)) == first_letter_of(name(cheetah)) => owes_money_to(polar_bear, grasshopper)\n\nname(cheetah, Lucy) = True\nowes_money_to(mosquito, penguin) = True\nname(oscar, Tango) = True\nname(polar_bear, Charlie) = True\ndifficulty_finding_food(polar_bear) = True\nhas(sun_bear, card_with(green_color)) = True\nfriends(sun_bear, adventurous) = 2\nfriends(sun_bear, not_adventurous) = 8\nname(sun_bear, Peddi) = True\n\nquestion = raise_flag_of_peace(viperfish, lobster)\n"}, {"idx": 49, "response": "name(goldfish, Beauty) == True\nfirst_letter_of(name(goldfish)) == 'B'\nfirst_letter_of(name(cow)) == 'T'\nnot proceed(panda_bear, spot_right_after(spot_of(goldfish))) = rule5()\nproceed(panda_bear, spot_right_after(spot_of(goldfish))) == False\nfriends(panda_bear) = 2\nproceed(panda_bear, spot_right_after(spot_of(goldfish))) = rule7()\nproceed(panda_bear, spot_right_after(spot_of(goldfish))) == True\nproceed(panda_bear, spot_right_after(spot_of(goldfish))) == True\nnot burn(warehouse_of(eel), goldfish) = rule11(goldfish)\nburn(warehouse_of(eel), goldfish) == False\nburn(warehouse_of(eel), goldfish) == False\nquestion = False", "answer": -1, "code": "rule1() = proceed(panda_bear, spot_right_after(spot_of(goldfish))) & give(caterpillar, magnifier, goldfish) => knows_defensive_plans(goldfish, sun_bear)\nrule2() = has(goldfish, carry_apples_and_oranges) => remove(goldfish, piece_of(grasshopper))\nrule3(something) = remove(something, piece_of(grasshopper)) => needs_support(something, cheetah)\nrule4() = owes_money_to(someone, crocodile) => not remove(goldfish, piece_of(grasshopper))\nrule5() = first_letter_of(name(panda_bear)) == first_letter_of(name(baboon)) => not proceed(panda_bear, spot_right_after(spot_of(goldfish)))\nrule6() = first_letter_of(name(goldfish)) == first_letter_of(name(cow)) => remove(goldfish, piece_of(grasshopper))\nrule7() = friends(panda_bear) < 7 => proceed(panda_bear, spot_right_after(spot_of(goldfish)))\nrule8(something) = learns(something, elementary_resource_management_from(cheetah)) => not needs_support(something, cheetah)\nrule9() = not remove(starfish, piece_of(caterpillar)) => give(caterpillar, magnifying_glass, goldfish)\nrule10() = has(panda_bear, card_with(color_in(rainbow_colors))) => not proceed(panda_bear, spot_right_after(spot_of(goldfish)))\nrule11(something) = knows_defensive_plans(something, sun_bear) & needs_support(something, cheetah) => not burn(warehouse_of(eel), something)\norder(rule10) > order(rule7) = True\norder(rule2) > order(rule4) = True\norder(rule5) > order(rule7) = True\norder(rule6) > order(rule4) = True\norder(rule8) > order(rule3) = True\n\nname(cow, Tango) = True\nhas(goldfish, basket) = True\nname(goldfish, Beauty) = True\nowes_money_to(oscar, crocodile) = True\nfriends(panda_bear) = 2\nhas(panda_bear, card_with(black_color)) = True\nname(panda_bear, Charlie) = True\nnot remove(starfish, piece_of(caterpillar)) = True\n\nquestion = burn(warehouse_of(eel), goldfish)\n"}, {"idx": 50, "response": "attack(kudu, green_fields_of(panda_bear)) = True\nproceed(kudu, spot_right_after(eagle)) = True\nnot proceed(kudu, spot_right_after(eagle)) = False\nattack(green_fields_of(panda_bear), kudu) = rule3(kudu)\nattack(green_fields_of(panda_bear), kudu) == True\nattack(green_fields_of(panda_bear), kudu) == True\neat_food(kudu, food_of(hummingbird)) = rule1()\neat_food(kudu, food_of(hummingbird)) == True\nattack(hummingbird, green_fields_of(jellyfish)) = rule1()\nattack(hummingbird, green_fields_of(jellyfish)) == True\nattack(hummingbird, green_fields_of(jellyfish)) == True\nattack(something, green_fields_of(jellyfish)) = rule2()\nattack(something, green_fields_of(jellyfish)) == True\nattack(something, green_fields_of(jellyfish)) == True\nattack(caterpillar, green_fields_of(baboon)) = rule2()\nattack(caterpillar, green_fields_of(baboon)) == True\nquestion = True", "answer": 1, "code": "rule1() = eat_food(kudu, food_of(hummingbird)) => attack(hummingbird, green_fields_of(jellyfish))\nrule2() = attack(something, green_fields_of(jellyfish)) => attack(caterpillar, green_fields_of(baboon))\nrule3(something) = attack(green_fields_of(panda_bear), something) & not proceed(something, spot_right_after(eagle)) => eat_food(something, food_of(hummingbird))\n\nattack(kudu, green_fields_of(panda_bear)) = True\nproceed(kudu, spot_right_after(eagle)) = True\n\nquestion = attack(caterpillar, green_fields_of(baboon))\n"}, {"idx": 51, "response": "invented_time_machine(turtle) == True\ncreated_time_machine(turtle) = rule1()\ncreated_time_machine(turtle) == True\nremove(turtle, piece_of(panther)) = rule1()\nremove(turtle, piece_of(panther)) == True\nproceed(panther, spot_right_after(spot_of(squirrel))) = rule3()\nproceed(panther, spot_right_after(spot_of(squirrel))) == True\nremove(cockroach, piece_of(tilapia)) = rule2()\nremove(cockroach, piece_of(tilapia)) == True\nquestion = True", "answer": 1, "code": "rule1() = created_time_machine(turtle) => remove(turtle, piece_of(panther))\nrule2() = proceed(animal, spot_right_after(spot_of(squirrel))) => remove(cockroach, piece_of(tilapia))\nrule3() = remove(turtle, piece_of(panther)) => proceed(panther, spot_right_after(spot_of(squirrel)))\nrule4() = has(turtle, card_with(color_starting_with(\"e\"))) => remove(turtle, piece_of(panther))\n\nhas(turtle, card_with(red_color)) = True\ninvented_time_machine(turtle) = True\n\nquestion = remove(cockroach, piece_of(tilapia))\n"}, {"idx": 52, "response": "name(mosquito, Peddi) == True\nfirst_letter_of(name(mosquito)) == 'P'\nfirst_letter_of(name(cricket)) == 'C'\nfirst_letter_of(name(mosquito)) == first_letter_of(name(cricket)) == False\nnot knows(defensive_plans_of(amberjack), mosquito) = rule7()\nknows(defensive_plans_of(amberjack), mosquito) == False\nnot raise_flag_of_peace(amberjack, sea_bass) = rule13()\nraise_flag_of_peace(amberjack, sea_bass) == False\nraise_flag_of_peace(amberjack, sea_bass) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(mosquito) > 13 => knows(defensive_plans_of(amberjack), mosquito)\nrule2() = raise_flag_of_peace(caterpillar, kangaroo) => not offer_job(kangaroo, polar_bear)\nrule3(something) = not knock_down(fortress_of(canary), something) => raise_flag_of_peace(something, sea_bass)\nrule4() = first_letter_of(name(kangaroo)) == first_letter_of(name(doctorfish)) => offer_job(kangaroo, polar_bear)\nrule5() = eats_food_of(something, parrot) => winks(kangaroo, whale)\nrule6() = has(mosquito, card_with(primary_color)) => not knows(defense_plan_of(amberjack), mosquito)\nrule7() = first_letter_of(name(mosquito)) == first_letter_of(name(cricket)) => not knows(defensive_plans_of(amberjack), mosquito)\nrule8() = knows(defense_plan_of(amberjack), mosquito) => not knock_down(fortress_of(canary), amberjack)\nrule9() = raise_flag_of_peace(something, moose) => not knows(defense_plan_of(lion), kangaroo)\nrule10() = killed(mosquito, mayor) => knows(defensive_plans_of(amberjack), mosquito)\nrule11() = increase_work_hours(kangaroo) => offer_job(kangaroo, polar_bear)\nrule12(something) = give(something, magnifier, oscar) => eats_food_of(something, parrot)\nrule13() = winks(something, whale) => not raise_flag_of_peace(amberjack, sea_bass)\nrule14(something) = eats_food_of(something, rabbit) => knows(defensive_plans_of(lion), something)\norder(rule13) > order(rule3) = True\norder(rule2) > order(rule11) = True\norder(rule2) > order(rule4) = True\norder(rule6) > order(rule1) = True\norder(rule6) > order(rule10) = True\norder(rule7) > order(rule1) = True\norder(rule7) > order(rule10) = True\norder(rule9) > order(rule14) = True\n\nname(doctorfish, Tessa) = True\nrespects(hippopotamus, whale) = True\neats_food_of(kangaroo, rabbit) = True\nname(kangaroo, Teddy) = True\nreduce_work_hours(kangaroo) = True\nkilled(mosquito, mayor) = True\nfriends(mosquito) = 8\nhas(mosquito, card_with(black_color)) = True\nname(mosquito, Peddi) = True\ngive(whale, magnifier, oscar) = True\nnot proceed(turtle, spot_right_after(spot_of(whale))) = True\n\nquestion = raise_flag_of_peace(amberjack, sea_bass)\n"}, {"idx": 53, "response": "not offer_job(grasshopper, koala) == True\nknock_down(leopard, fortress_of(sun_bear) == rule9()\nknock_down(leopard, fortress_of(sun_bear) == True\nproceed(leopard, spot_right_after(spot_of(dog))) == rule4(leopard)\nproceed(leopard, spot_right_after(spot_of(dog))) == True\nproceed(leopard, spot_right_after(spot_of(dog))) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(puffin, leopard) & not remove(halibut, piece_of(leopard)) => never_knock_down(leopard, fortress_of(carp))\nrule2() = has(koala, card_with(primary_color)) => sing_song(koala, victory_song_for(leopard))\nrule3() = friends(koala) < 5 => sing_song(koala, victory_song_for(leopard))\nrule4(something) = not offer_job(something, carp) & knock_down(something, fortress_of(sun_bear)) => proceed(something, spot_right_after(spot_of(dog)))\nrule5() = attack(tilapia, green_fields_of(puffin)) => not raise_flag_of_peace(puffin, leopard)\nrule6() = has(puffin, card_with(color_in_flag_of_Belgium)) => raise_flag_of_peace(puffin, leopard)\nrule7() = sing_song(pig, victory_song_for(leopard)) => knock_down(leopard, fortress_of(carp))\nrule8() = owns(halibut, luxury_aircraft) => not remove(halibut, piece_of(leopard))\nrule9() = sing_song(koala, victory_song_for(leopard)) => knock_down(leopard, fortress_of(sun_bear))\nrule10() = first_letter_of(name(puffin)) == first_letter_of(name(eel)) => raise_flag_of_peace(puffin, leopard)\norder(rule1) > order(rule7) = True\norder(rule10) > order(rule5) = True\norder(rule6) > order(rule5) = True\n\nname(eel, Meadow) = True\nfriends(halibut) = 8\nname(halibut, Charlie) = True\nowns(halibut, luxury_aircraft) = True\nhas(koala, card_with(orange_color)) = True\nfriends(koala) = 1\nhas(puffin, card_with(indigo_color)) = True\nname(puffin, Milo) = True\nname(turtle, Cinnamon) = True\nnot offer_job(grasshopper, koala) = True\n\nquestion = proceed(leopard, spot_right_after(spot_of(dog)))\n"}, {"idx": 54, "response": "has(phoenix, card_with(red_color)) == True\nburn(warehouse_of(sheep), something) = rule1()\nburn(warehouse_of(sheep), something) == False\nremove(whale, piece) = rule5()\nremove(whale, piece) == True\nquestion = True", "answer": 1, "code": "rule1() = burn(warehouse_of(sheep), something) => not learn_basics_of_resource_management(squirrel, catfish)\nrule2() = friends(zander) > 6 => prepare_armor(zander, panther)\nrule3() = has(phoenix, card_with(primary_color)) => knock_down(fortress_of(squirrel), phoenix)\nrule4() = supports(squirrel, Chris_Ronaldo) => learn_basics_of_resource_management(squirrel, catfish)\nrule5() = eat_food(panther, food_of(canary)) => remove(whale, piece)\nrule6() = prepare_armor(zander, panther) => eat_food(panther, food_of(canary))\nrule7() = has(squirrel, drink) => sing_song(squirrel, victory_song_for(leopard))\nrule8() = show_all_cards(something, halibut) => not sing_song(something, victory_song_for(leopard))\nrule9() = first_letter_of(name(zander)) == first_letter_of(name(meerkat)) => prepare_armor(zander, panther)\nrule10() = sing_song(something, victory_song_for(leopard)) & learn_elementary_resource_management(something, catfish) => attack_fields(something, green_fields_of(bat))\nrule11() = has(squirrel, card_with(color_starting_with(\"e\"))) => sing_song(squirrel, victory_song_for(leopard))\norder(rule1) > order(rule4) = True\norder(rule8) > order(rule11) = True\norder(rule8) > order(rule7) = True\n\nname(meerkat, Chickpea) = True\nhas(phoenix, card_with(red_color)) = True\nhas(squirrel, card_with(red_color)) = True\nhas(squirrel, hot_chocolate) = True\nsupports(squirrel, Chris_Ronaldo) = True\nfriends(zander) = 11\nname(zander, Paco) = True\n\nquestion = remove(whale, piece)\n"}, {"idx": 55, "response": "not offer_job_position(raven, hummingbird) = rule1()\noffer_job_position(raven, hummingbird) == False\nwink(hummingbird, cheetah) = rule1()\nwink(hummingbird, cheetah) == True\nwink(hummingbird, cheetah) == True\nquestion = True", "answer": 1, "code": "rule1() = not offer_job_position(raven, hummingbird) => wink(hummingbird, cheetah)\nrule2() = friends(buffalo) > 3 => knows(defense_plan_of(turtle), buffalo)\nrule3(something) = owes_money_to(something, spider) => not roll_dice(something, tilapia)\nrule4() = show_cards(polar_bear, hummingbird) & not owes_money_to(sea_bass, hummingbird) => never_wink(hummingbird, cheetah)\nrule5(device) = has(sea_bass, connect_to_internet(device)) => not roll_dice(sea_bass, kangaroo)\nrule6() = has(sea_bass, card_with(primary_color)) => roll_dice(sea_bass, kangaroo)\nrule7() = friends(sea_bass) > 17 => roll_dice(sea_bass, kangaroo)\nrule8(something) = roll_dice(something, kangaroo) => not owes_money_to(something, hummingbird)\nrule9(something) = proceed(something, spot_right_after(spot_of(hippopotamus))) => owes_money_to(something, hummingbird)\nrule10() = first_letter_of(name(sea_bass)) == first_letter_of(name(whale)) => not roll_dice(sea_bass, kangaroo)\nrule11() = owes_money_to(something, zander) & not roll_dice(something, tilapia) => not show_cards(something, hummingbird)\nrule12() = knows(defense_plan_of(turtle), something) => show_cards(polar_bear, hummingbird)\norder(rule1) > order(rule4) = True\norder(rule10) > order(rule6) = True\norder(rule10) > order(rule7) = True\norder(rule11) > order(rule12) = True\norder(rule5) > order(rule6) = True\norder(rule5) > order(rule7) = True\norder(rule9) > order(rule8) = True\n\nfriends(buffalo) = 4\nowes_money_to(polar_bear, spider) = True\nfriends(sea_bass, lazy) = 2\nfriends(sea_bass, not_lazy) = 8\nhas(sea_bass, card_with(red_color)) = True\nhas(sea_bass, knapsack) = True\nname(whale, Paco) = True\n\nquestion = wink(hummingbird, cheetah)\n"}, {"idx": 56, "response": "has(rabbit, spinach) == True\nhas(rabbit, leafy_green_vegetable) == True\nnot needs_support(rabbit, halibut) = rule4()\nneeds_support(rabbit, halibut) == False\nnot proceed(rabbit, spot_right_after(spot_of(sea_bass))) == True\nnot learn_elementary_resource_management(cockroach, kangaroo) = rule5()\nnot points(cockroach) == points(cricket) == True\nknows(defense_plan_of(oscar), cockroach) = rule3()\nknows(defense_plan_of(oscar), cockroach) == True\nknows(defense_plan_of(oscar), cockroach) == True\npoints(cockroach) == points(cricket) == True\nquestion = True", "answer": 1, "code": "rule1() = knows(defensive_plans_of(oscar), something) => points(something) == points(cricket)\nrule2() = not proceed(something, spot_right_after(spot_of(sea_bass))) => needs_support(something, halibut)\nrule3() = needs_support(something, halibut) => knows(defense_plan_of(oscar), cockroach)\nrule4() = has(rabbit, leafy_green_vegetable) => not needs_support(rabbit, halibut)\nrule5() = not learn_elementary_resource_management(something, kangaroo) => not points(something) == points(cricket)\norder(rule1) > order(rule5) = True\norder(rule4) > order(rule2) = True\n\nhas(rabbit, card_with(white_color)) = True\nhas(rabbit, spinach) = True\nnot proceed(rabbit, spot_right_after(spot_of(sea_bass))) = True\n\nquestion = points(cockroach) == points(cricket)\n"}, {"idx": 57, "response": "invented_time_machine(kudu) == True\nattacks(kudu, green_fields_of(wolverine)) = rule1()\nattacks(kudu, green_fields_of(wolverine)) == True\nattacks(kudu, green_fields_of(wolverine)) == True\nknock_down(elephant, fortress_of(wolverine)) = rule6()\nknock_down(elephant, fortress_of(wolverine)) == True\nknock_down(elephant, fortress_of(wolverine)) == True\nnot know_defensive_plans(wolverine, penguin) = rule3()\nknow_defensive_plans(wolverine, penguin) == False\nknow_defensive_plans(wolverine, penguin) == False\nproceed(jellyfish, spot_right_after(spot_of(cow))) = rule7()\nproceed(jellyfish, spot_right_after(spot_of(cow))) == True\nproceed(jellyfish, spot_right_after(spot_of(cow))) == True\nquestion = True", "answer": 1, "code": "rule1() = created_time_machine(kudu) => attacks(kudu, green_fields_of(wolverine))\nrule2() = not owes_money_to(doctorfish, wolverine) => not remove(wolverine, piece_of(lobster))\nrule3() = attacks(kudu, green_fields_of(wolverine)) & knock_down(elephant, fortress_of(wolverine)) => not know_defensive_plans(wolverine, penguin)\nrule4() = has(wolverine, card_with(color_in_flag_of_Italy)) => remove(wolverine, piece_of(lobster))\nrule5() = owns(wolverine, luxury_aircraft) => not wink(wolverine, carp)\nrule6() = has(elephant, connect_to_internet(device)) => knock_down(elephant, fortress_of(wolverine))\nrule7() = knows_defense_plan(something, penguin) => proceed(jellyfish, spot_right_after(spot_of(cow)))\nrule8() = give(magnifier, meerkat, wolverine) => wink(wolverine, carp)\nrule9() = remove(something, piece_of(lobster)) & wink(something, carp) => know_defense_plan(something, penguin)\nrule10() = first_letter_of(name(kudu)) == first_letter_of(name(dog)) => attacks(kudu, green_fields_of(wolverine))\nrule11() = needs_support(buffalo, jellyfish) => not proceed(jellyfish, spot_right_after(spot_of(cow)))\norder(rule11) > order(rule7) = True\norder(rule2) > order(rule4) = True\norder(rule8) > order(rule5) = True\norder(rule9) > order(rule3) = True\n\nname(dog, Blossom) = True\nhas(elephant, cell_phone) = True\ninvented_time_machine(kudu) = True\nname(kudu, Pablo) = True\ngive(magnifier, meerkat, wolverine) = True\ndreamed_of(wolverine, luxury_aircraft) = True\nhas(wolverine, card_with(white_color)) = True\nhas(wolverine, knapsack) = True\n\nquestion = proceed(jellyfish, spot_right_after(spot_of(cow)))\n"}, {"idx": 58, "response": "has(cockroach, card_with(indigo_color)) == True\ncolor(card_with(indigo_color)) == indigo\nremove(cockroach, piece_of(parrot)) = rule2()\nremove(cockroach, piece_of(parrot)) == True\nproceed(parrot, spot_right_after(spot_of(tiger))) = rule1()\nproceed(parrot, spot_right_after(spot_of(tiger))) == True\nproceed(parrot, spot_right_after(spot_of(tiger))) == True\nnot remove(tiger, piece_of(moose)) = rule4()\nremove(tiger, piece_of(moose)) == False\nquestion = False", "answer": -1, "code": "rule1() = remove(cockroach, piece_of(parrot)) => proceed(parrot, spot_right_after(spot_of(tiger)))\nrule2() = has(cockroach, card) and color(card) in rainbow_colors => remove(cockroach, piece_of(parrot))\nrule3(something) = not wink(something, puffin) => not proceed(something, spot_right_after(spot_of(tiger)))\nrule4() = proceed(parrot, spot_right_after(spot_of(tiger))) => not remove(tiger, piece_of(moose))\norder(rule3) > order(rule1) = True\n\nhas(cockroach, card_with(indigo_color)) = True\n\nquestion = remove(tiger, piece_of(moose))\n"}, {"idx": 59, "response": "points(snail) == points(eel) = question", "answer": 0, "code": "rule1() = created(hummingbird, time_machine) => learn(hummingbird, elementary_resource_management_from(parrot))\nrule2() = show_cards(something, panda_bear) => points(something) == points(cheetah)\nrule3(something) = not learn_basics_of_resource_management(something, parrot) & points(something) == points(cheetah) => attack(something, green_fields_of(snail))\nrule4() = not attack(hummingbird, green_fields_of(snail)) => points(snail) == points(eel)\nrule5() = give_magnifier(something, oscar) => not learn(hummingbird, elementary_resource_management_from(parrot))\nrule6() = sing_song(penguin, victory_song_for(hummingbird)) & give_magnifier(wolverine, hummingbird) => not points(hummingbird) == points(cheetah)\norder(rule1) > order(rule5) = True\norder(rule6) > order(rule2) = True\n\ngive_magnifier(eagle, oscar) = True\nshow_cards(hummingbird, panda_bear) = True\nsing_song(penguin, victory_song_for(hummingbird)) = True\n\nquestion = points(snail) == points(eel)\n"}, {"idx": 60, "response": "eat_food(cat, catfish) == True\nnot give_magnifying_glass(catfish, panther) = rule2()\ngive_magnifying_glass(catfish, panther) == False\neat_food(panther, dog) = rule3()\neat_food(panther, dog) == True\nknows_defensive_plans(dog, jellyfish) = rule4()\nknows_defensive_plans(dog, jellyfish) == True\nquestion = True", "answer": 1, "code": "rule1() = eat_food(something, amberjack) => give_magnifying_glass(something, panther)\nrule2() = eat_food(cat, catfish) => not give_magnifying_glass(catfish, panther)\nrule3() = not give_magnifying_glass(catfish, panther) => eat_food(panther, dog)\nrule4() = eat_food(panther, dog) => knows_defensive_plans(dog, jellyfish)\norder(rule1) > order(rule2) = True\n\neat_food(cat, catfish) = True\n\nquestion = knows_defensive_plans(dog, jellyfish)\n"}, {"idx": 61, "response": "steals_points(kangaroo, 5, bat) == True\nburn(warehouse_of(parrot), leopard) = rule1()\nburn(warehouse_of(parrot), leopard) == True\nburn(warehouse_of(parrot), leopard) == True\nnot show_cards(ferret, parrot) = rule3()\nshow_cards(ferret, parrot) == False\nshow_cards(ferret, parrot) == False\nsing_song(parrot, victory_song_for(bat)) = rule2()\nsing_song(parrot, victory_song_for(bat)) == True\nsing_song(parrot, victory_song_for(bat)) == True\nnot owes_money_to(parrot, cat) = rule4()\nowes_money_to(parrot, cat) == False\nquestion = False", "answer": -1, "code": "rule1() = steals_points(something, 5, bat) => burn(warehouse_of(parrot), leopard)\nrule2() = not show_cards(ferret, parrot) => sing_song(parrot, victory_song_for(bat))\nrule3() = not give(cheetah, magnifier, ferret) & give(lion, magnifying_glass, ferret) => not show_cards(ferret, parrot)\nrule4() = steals_points(something, 5, lobster) & sing_song(something, victory_song_for(bat)) => not owes_money_to(something, cat)\nrule5() = burn(warehouse_of(parrot), leopard) => steals_points(parrot, 5, lobster)\n\nsteals_points(kangaroo, 5, bat) = True\ngive(lion, magnifier, ferret) = True\nnot give(cheetah, magnifier, ferret) = True\n\nquestion = owes_money_to(parrot, cat)\n"}, {"idx": 62, "response": "roll_dice(halibut, cheetah) == True\nroll_dice(kangaroo, cheetah) = rule4()\nroll_dice(kangaroo, cheetah) == True\nroll_dice(kangaroo, cheetah) == True\nnot roll_dice(kangaroo, cheetah) == False\nshow_cards(cheetah, dog) = rule1()\nshow_cards(cheetah, dog) == True\nshow_cards(cheetah, dog) == True\nquestion = True", "answer": 1, "code": "rule1() = roll_dice(kiwi, cheetah) & not roll_dice(kangaroo, cheetah) => show_cards(cheetah, dog)\nrule2(something) = eats_food(something, food_of(snail)) => not learn_basics_of_resource_management(something, phoenix)\nrule3(something) = not holds_equal_points(something, eagle) => roll_dice(something, cheetah)\nrule4(something) = raise_flag_of_peace(something, catfish) => roll_dice(kangaroo, cheetah)\nrule5(something) = not proceed(something, spot_right_after(spot_of(phoenix))) & roll_dice(something, spider) => not show_cards(something, dog)\nrule6() = give_magnifier(swordfish, kangaroo) => not roll_dice(kangaroo, cheetah)\nrule7() = has(kiwi, card_with(color_starting_with(\"r\"))) => not prepare_armor(kiwi, eagle)\nrule8() = first_letter_of(name(cheetah)) == first_letter_of(name(puffin)) => not eats_food(cheetah, food_of(snail))\nrule9() = roll_dice(halibut, cheetah) => eats_food(cheetah, food_of(snail))\nrule10() = friends(swordfish) < 4 => give_magnifying_glass(swordfish, kangaroo)\nrule11() = first_letter_of(name(swordfish)) == first_letter_of(name(raven)) => give_magnifier(swordfish, kangaroo)\norder(rule4) > order(rule6) = True\norder(rule5) > order(rule1) = True\norder(rule9) > order(rule8) = True\n\nname(cheetah, Teddy) = True\nroll_dice(halibut, cheetah) = True\nhas(kiwi, banana_strawberry_smoothie) = True\nhas(kiwi, card_with(red_color)) = True\nname(puffin, Tarzan) = True\nname(raven, Peddi) = True\nfriends(swordfish) = 6\nname(swordfish, Pablo) = True\n\nquestion = show_cards(cheetah, dog)\n"}, {"idx": 63, "response": "has(panda_bear, backpack) == True\nsomething_to_carry_apples_and_oranges(backpack) == True\nraise_flag_of_peace(panda_bear, kangaroo) = rule3()\nraise_flag_of_peace(panda_bear, kangaroo) == True\nraise_flag_of_peace(panda_bear, kangaroo) == True\noffer_job_position(panda_bear, bat) = rule2(panda_bear)\noffer_job_position(panda_bear, bat) == True\noffer_job_position(panda_bear, bat) == True\nowes_money_to(mosquito, phoenix) = rule5(panda_bear)\nowes_money_to(mosquito, phoenix) == True\nquestion = True", "answer": 1, "code": "rule1() = has(panda_bear, something_to_sit_on) => eat_food(panda_bear, food_of(crocodile))\nrule2(something) = eat_food(something, food_of(crocodile)) & raise_flag_of_peace(something, kangaroo) => offer_job_position(something, bat)\nrule3() = has(panda_bear, something_to_carry_apples_and_oranges) => raise_flag_of_peace(panda_bear, kangaroo)\nrule4() = friends(panda_bear) > 10 => eat_food(panda_bear, food_of(crocodile))\nrule5(something) = offer_job_position(something, bat) => owes_money_to(mosquito, phoenix)\n\nhas(panda_bear, backpack) = True\nhas(panda_bear, bench) = True\nfriends(panda_bear) = 3\n\nquestion = owes_money_to(mosquito, phoenix)\n"}, {"idx": 64, "response": "offer_job_position(cow, phoenix) == True\nnot proceed(amberjack, spot_right_after(spot_of(baboon))) = rule3()\nproceed(amberjack, spot_right_after(spot_of(baboon))) == False\nsteal_points(amberjack, 5, grizzly_bear) == True\nnot offer_job_position(something, caterpillar) = rule2()\noffer_job_position(amberjack, caterpillar) == False\noffer_job_position(amberjack, caterpillar) == False\nsteal_points(amberjack, 5, grizzly_bear) == True\nproceed(amberjack, spot_right_after(spot_of(baboon))) == False\nneeds_support(baboon, jellyfish) = rule4()\nneeds_support(baboon, jellyfish) == True\nknows(defense_plan_of(tiger), baboon) = rule1()\nknows(defense_plan_of(tiger), baboon) == not needs_support(baboon, jellyfish)\nknows(defense_plan_of(tiger), baboon) == not True\nquestion = False", "answer": -1, "code": "rule1() = needs_support(something, jellyfish) => not knows(defense_plan_of(tiger), something)\nrule2() = not offer_job_position(something, caterpillar) & steal_points(something, 5, grizzly_bear) => proceed(something, spot_right_after(spot_of(baboon)))\nrule3() = offer_job_position(something, phoenix) => not proceed(amberjack, spot_right_after(spot_of(baboon)))\nrule4() = not proceed(amberjack, spot_right_after(spot_of(baboon))) => needs_support(baboon, jellyfish)\norder(rule2) > order(rule3) = True\n\nsteal_points(amberjack, 5, grizzly_bear) = True\noffer_job_position(cow, phoenix) = True\n\nquestion = knows(defense_plan_of(tiger), baboon)\n"}, {"idx": 65, "response": "has(meerkat, card_with(black_color)) == True\ngive(meerkat, magnifying_glass, swordfish) = rule4()\ngive(meerkat, magnifying_glass, swordfish) == True\ngive(meerkat, magnifying_glass, swordfish) == True\nowes_money_to(meerkat, cockroach) = rule1()\nowes_money_to(meerkat, cockroach) == True\nnot owes_money_to(meerkat, cockroach) == False\nlearn_elementary_resource_management(cockroach, cow) = rule2()\nlearn_elementary_resource_management(cockroach, cow) == True\nlearn_elementary_resource_management(cockroach, cow) == True\nquestion = True", "answer": 1, "code": "rule1() = give(something, magnifying_glass, swordfish) => owes_money_to(something, cockroach)\nrule2() = not owes_money_to(meerkat, cockroach) => learn_elementary_resource_management(cockroach, cow)\nrule3() = has_high_salary(meerkat) => give(meerkat, magnifying_glass, swordfish)\nrule4() = has(meerkat, card_with(primary_color)) => give(meerkat, magnifying_glass, swordfish)\nrule5() = knows(defensive_plans_of(cockroach), moose) => not learn_elementary_resource_management(cockroach, cow)\norder(rule2) > order(rule5) = True\n\nhas_high_salary(meerkat) = True\nhas(meerkat, card_with(black_color)) = True\n\nquestion = learn_elementary_resource_management(cockroach, cow)\n"}, {"idx": 66, "response": "has(leopard, card_with(color_in(rainbow_colors))) == True\nremove(leopard, piece_of(kudu)) = rule4()\nremove(leopard, piece_of(kudu)) == True\ntook_bike(leopard) == True\nremove(leopard, piece_of(kudu)) == True\nwinks_at(catfish, elephant) = rule6()\nwinks_at(catfish, elephant) == True\nwinks_at(catfish, elephant) == True\nnot knows_defense_plan_of(catfish, meerkat) = rule7()\nknows_defense_plan_of(catfish, meerkat) == False\nknows_defense_plan_of(catfish, meerkat) == False\nnot enemy(catfish, phoenix) = rule8(catfish)\nenemy(catfish, phoenix) == False\nenemy(catfish, phoenix) == False\nknows_defensive_plans_of(catfish, pig) = rule10(catfish)\nknows_defensive_plans_of(catfish, pig) == True\nknows_defensive_plans_of(catfish, pig) == True\nquestion = True", "answer": 1, "code": "rule1() = has(elephant, card_with(primary_color)) => knock_down(elephant, fortress_of(panda_bear))\nrule2(something) = winks_at(something, elephant) => not knows_defensive_plans_of(something, pig)\nrule3() = took_bike(leopard) => remove(leopard, piece_of(kudu))\nrule4() = has(leopard, card_with(color_in(rainbow_colors))) => remove(leopard, piece_of(kudu))\nrule5() = has(lion, card_with(color_in(flag_of(Belgium)))) => not proceed(lion, spot_right_after(spot_of(catfish)))\nrule6() = remove(something, piece_of(kudu)) => winks_at(catfish, elephant)\nrule7() = not proceed(lion, spot_right_after(spot_of(catfish))) => not knows_defense_plan_of(catfish, meerkat)\nrule8(something) = knock_down(something, fortress_of(panda_bear)) => not enemy(catfish, phoenix)\nrule9() = rolls_dice(aardvark, catfish) & rolls_dice(goldfish, catfish) => prepare_armor(catfish, caterpillar)\nrule10(something) = not enemy(something, phoenix) & not knows_defensive_plans_of(something, meerkat) => knows_defensive_plans_of(something, pig)\nrule11(something) = show_all_cards(something, hippopotamus) => not winks_at(something, elephant)\norder(rule10) > order(rule2) = True\norder(rule11) > order(rule6) = True\n\nrolls_dice(aardvark, catfish) = True\nhas(elephant, card_with(red_color)) = True\nrolls_dice(goldfish, catfish) = True\nhas(leopard, card_with(white_color)) = True\ntook_bike(leopard) = True\nhas(lion, card_with(red_color)) = True\n\nquestion = knows_defensive_plans_of(catfish, pig)\n"}, {"idx": 67, "response": "has(leopard, plastic_bag) == True\nsomething_to_carry_apples_and_oranges(plastic_bag) == True\nshow_cards(leopard, aardvark) = rule5()\nshow_cards(leopard, aardvark) == True\nshow_cards(leopard, aardvark) == True\nlearn_elementary_resource_management(panda_bear, halibut) = rule4()\nlearn_elementary_resource_management(panda_bear, halibut) == False\nnot learn_elementary_resource_management(panda_bear, halibut) == True\nquestion = True", "answer": 1, "code": "rule1() = show_cards(leopard, aardvark) & burn(warehouse_of(aardvark), koala) => not burn(warehouse_of(panda_bear), aardvark)\nrule2() = roll_dice(something, grizzly_bear) => learn_elementary_resource_management(aardvark, catfish)\nrule3() = has(koala, card_with(primary_color)) => burn(warehouse_of(aardvark), koala)\nrule4() = not burn(warehouse_of(panda_bear), aardvark) => not learn_elementary_resource_management(panda_bear, halibut)\nrule5() = has(leopard, something_to_carry_apples_and_oranges) => show_cards(leopard, aardvark)\n\nwinks(aardvark, salmon) = True\nroll_dice(carp, grizzly_bear) = True\nhas(koala, card_with(blue_color)) = True\nhas(leopard, plastic_bag) = True\n\nquestion = learn_elementary_resource_management(panda_bear, halibut)\n"}, {"idx": 68, "response": "knock_down(fortress_of(zander), starfish) = rule8()\nknock_down(fortress_of(zander), starfish) == True\nknock_down(fortress_of(zander), starfish) == True\nattack_green_fields(zander, grasshopper) = False\nquestion = False", "answer": -1, "code": "rule1() = has(polar_bear, musical_instrument) => wink(polar_bear, goldfish)\nrule2() = steals_points(something, baboon, 5) => not wink(polar_bear, goldfish)\nrule3() = knock_down(fortress_of(cheetah), something) => knows(defensive_plans_of(salmon), polar_bear)\nrule4() = remove(something, piece_of(elephant)) => not attack_green_fields(something, zander)\nrule5() = attack_green_fields(polar_bear, zander) & knock_down(fortress_of(zander), starfish) => add_conclusion(\"the zander attacks the green fields of the grasshopper\")\nrule6(something) = knock_down(fortress_of(rabbit), something) => not knock_down(fortress_of(zander), something)\nrule7() = points(panther) == points(octopus) => knock_down(fortress_of(starfish), octopus)\nrule8() = knock_down(fortress_of(starfish), octopus) => knock_down(fortress_of(zander), starfish)\nrule9() = has(octopus, card_with(color_starting_with(\"w\"))) => not knock_down(fortress_of(starfish), octopus)\nrule10() = has(polar_bear, card_with(color_in(flag_of_italy))) => remove(polar_bear, piece_of(elephant))\nrule11() = has(polar_bear, musical_instrument) => wink(polar_bear, goldfish)\nrule12() = first_letter_of(name(polar_bear)) == first_letter_of(name(halibut)) => remove(polar_bear, piece_of(elephant))\norder(rule1) > order(rule2) = True\norder(rule11) > order(rule2) = True\norder(rule6) > order(rule8) = True\norder(rule9) > order(rule7) = True\n\nknock_down(fortress_of(cheetah), cricket) = True\nname(halibut, Luna) = True\nsteals_points(meerkat, baboon, 5) = True\npoints(panther) == points(octopus) = True\nhas(polar_bear, card_with(yellow_color)) = True\nname(polar_bear, Lily) = True\nhas(polar_bear, spinach) = True\nsupports(polar_bear, Chris_Ronaldo) = True\n\nquestion = attack_green_fields(zander, grasshopper)\n"}, {"idx": 69, "response": "show_all_cards(penguin, lion) = True\npoints(sun_bear) == points(cow) = rule1()\npoints(sun_bear) == points(cow) == True\ngive_magnifying_glass(sun_bear, kiwi) = rule3(sun_bear)\ngive_magnifying_glass(sun_bear, kiwi) == True\ngive_magnifying_glass(sun_bear, kiwi) == True\nneeds_support(sun_bear, wolverine) = rule2(sun_bear)\nneeds_support(sun_bear, wolverine) == True\nquestion = True", "answer": 1, "code": "rule1() = show_all_cards(something, lion) => points(sun_bear) == points(cow)\nrule2(something) = give_magnifier(something, kiwi) => needs_support(something, wolverine)\nrule3(something) = points(something) == points(cow) => give_magnifying_glass(something, kiwi)\n\nshow_all_cards(penguin, lion) = True\n\nquestion = needs_support(sun_bear, wolverine)\n"}, {"idx": 70, "response": "has(tiger, card_with(green_color)) == True\nnot needs_support(tiger, rabbit) = rule7()\nneeds_support(tiger, rabbit) == False\nnot remove(tiger, piece_of(doctorfish)) = rule4()\nremove(tiger, piece_of(doctorfish)) == False\nquestion = False", "answer": -1, "code": "rule1() = attack(green_fields_of(panda_bear), something) => needs_support(tiger, rabbit)\nrule2() = has(tiger, something_to_sit_on) => not needs_support(tiger, rabbit)\nrule3(something) = not needs_support(something, rabbit) & attack(green_fields_of(kiwi), something) => needs_support(something, eagle)\nrule4(something) = needs_support(something, eagle) => not remove(something, piece_of(doctorfish))\nrule5(something) = not show_cards(something, black_bear) => attack(green_fields_of(kiwi), something)\nrule6() = first_letter_of(name(tiger)) == first_letter_of(name(leopard)) => not attack(green_fields_of(kiwi), tiger)\nrule7() = has(tiger, card_with(primary_color)) => not needs_support(tiger, rabbit)\norder(rule1) > order(rule2) = True\norder(rule1) > order(rule7) = True\norder(rule5) > order(rule6) = True\n\nname(leopard, Buddy) = True\nhas(tiger, basket) = True\nhas(tiger, card_with(green_color)) = True\nname(tiger, Beauty) = True\nnot show_cards(tiger, black_bear) = True\n\nquestion = remove(tiger, piece_of(doctorfish))\n"}, {"idx": 71, "response": "has(salmon, something_to_drink) == True\ngive_magnifier(salmon, sheep) = rule1()\ngive_magnifier(salmon, sheep) == True\nnot learn_elementary_resource_management_from(mosquito, koala) = rule2(mosquito)\nlearn_elementary_resource_management_from(mosquito, koala) == False\noffer_job_position(mosquito, donkey) = rule2(mosquito)\noffer_job_position(mosquito, donkey) == True\noffer_job_position(mosquito, donkey) == True\nquestion = True", "answer": 1, "code": "rule1() = has(salmon, something_to_drink) => give_magnifier(salmon, sheep)\nrule2(something) = not learn_elementary_resource_management_from(something, koala) => offer_job_position(something, donkey)\nrule3() = give_magnifying_glass(something, sheep) => eat_food(jellyfish, mosquito)\nrule4(something) = roll_dice(something, cockroach) => learn_basics_of_resource_management(something, koala)\nrule5() = attack_green_fields(catfish, mosquito) & eat_food(jellyfish, mosquito) => not offer_job_position(mosquito, donkey)\nrule6(something) = points(something) == points(crocodile) & needs_support(something, raven) => not give_magnifying_glass(something, sheep)\nrule7() = first_letter_of(name(tiger)) == first_letter_of(name(zander)) => show_cards(tiger, mosquito)\nrule8() = show_cards(tiger, mosquito) => not learn_basics_of_resource_management(mosquito, koala)\norder(rule2) > order(rule5) = True\norder(rule4) > order(rule8) = True\norder(rule6) > order(rule1) = True\n\ngive_magnifier(salmon, crocodile) = True\nhas(salmon, cappuccino) = True\nname(tiger, Casper) = True\nstole(tiger, bike_from(store)) = True\nname(zander, Lily) = True\n\nquestion = offer_job_position(mosquito, donkey)\n"}, {"idx": 72, "response": "not offer_job(octopus, hippopotamus) = rule9(octopus)\noffer_job(octopus, hippopotamus) == False\nquestion = False", "answer": -1, "code": "rule1() = has(blobfish, card_with(color_starting_with(\"g\"))) => remove(blobfish, piece_of(octopus))\nrule2() = has(blobfish, high_quality_paper) => not remove(blobfish, piece_of(octopus))\nrule3() = remove(something, piece_of(halibut)) => proceed(octopus, spot_right_after(spot_of(zander)))\nrule4() = not remove(blobfish, piece_of(octopus)) => offer_job(octopus, amberjack)\nrule5() = killed(cow, mayor) => raise_flag_of_peace(cow, elephant)\nrule6() = raise_flag_of_peace(cow, elephant) => roll_dice(elephant, cow)\nrule7() = sing_song(something, victory_song_for(polar_bear)) => not raise_flag_of_peace(octopus, bat)\nrule8(something) = proceed(something, spot_right_after(spot_of(zander))) => offer_job_position(something, sea_bass)\nrule9(something) = offer_job(something, amberjack) & offer_job_position(something, sea_bass) => not offer_job(something, hippopotamus)\nrule10() = first_letter_of(name(octopus)) == first_letter_of(name(sea_bass)) => raise_flag_of_peace(octopus, bat)\nrule11() = roll_dice(something, cow) => offer_job_position(octopus, hippopotamus)\nrule12() = owes_money_to(meerkat, cow) & not learn(sun_bear, elementary_resource_management_from(cow)) => never_raise_flag_of_peace(cow, elephant)\norder(rule1) > order(rule2) = True\norder(rule11) > order(rule9) = True\norder(rule5) > order(rule12) = True\norder(rule7) > order(rule10) = True\n\nhas(blobfish, high_quality_paper) = True\nkilled(cow, mayor) = True\nowes_money_to(meerkat, cow) = True\nname(octopus, Teddy) = True\nremove(penguin, piece_of(halibut)) = True\nname(sea_bass, Tango) = True\nnot learn(sun_bear, elementary_resource_management_from(cow)) = True\n\nquestion = offer_job(octopus, hippopotamus)\n"}, {"idx": 73, "response": "has(snail, something_to_sit_on) == True\nproceed(snail, spot_right_after(spot_of(meerkat))) = rule1()\nproceed(snail, spot_right_after(spot_of(meerkat))) == True\nproceed(snail, spot_right_after(spot_of(meerkat))) == True\nneeds_support(snail, lobster) = rule3(snail)\nneeds_support(snail, lobster) == True\nnot offer_job(snail, buffalo) = rule8()\noffer_job(snail, buffalo) == False\nburn(warehouse_of(pig), snail) = rule7(snail)\nburn(warehouse_of(pig), snail) == True\nburn(warehouse_of(pig), snail) == True\nquestion = True", "answer": 1, "code": "rule1() = has(snail, something_to_sit_on) => proceed(snail, spot_right_after(spot_of(meerkat)))\nrule2() = has(tiger, card_with(color_starting_with(\"b\"))) => not raise_flag_of_peace(tiger, snail)\nrule3(something) = proceed(something, spot_right_after(spot_of(meerkat))) => needs_support(something, lobster)\nrule4(something) = wink(something, puffin) => sing_song(something, victory_song_for(snail))\nrule5() = steal_points_from(grasshopper, 5) => raise_flag_of_peace(tiger, snail)\nrule6() = owes_money_to(aardvark, moose) => not sing_song(moose, victory_song_for(snail))\nrule7(something) = needs_support(something, lobster) & not offer_job(something, buffalo) => not burn(warehouse_of(pig), something)\nrule8() = raise_flag_of_peace(tiger, snail) & sing_song(moose, victory_song_for(snail)) => not offer_job(snail, buffalo)\nrule9() = first_letter_of(name(snail)) == first_letter_of(name(jellyfish)) => proceed(snail, spot_right_after(spot_of(meerkat)))\norder(rule5) > order(rule2) = True\norder(rule6) > order(rule4) = True\n\nname(jellyfish, Tarzan) = True\nwink(moose, puffin) = True\nsteal_points_from(panda_bear, 5) = True\nhas(snail, green_tea) = True\nhas(snail, knapsack) = True\nname(snail, Tessa) = True\nreduce_work_hours(snail) = True\nhas(tiger, card_with(blue_color)) = True\n\nquestion = burn(warehouse_of(pig), snail)\n"}, {"idx": 74, "response": "has(catfish, card_with(white_color)) == True\nsteal_points(catfish, 5, kudu) = rule1()\nsteal_points(catfish, 5, kudu) == True\nsteal_points(catfish, 5, kudu) == True\nnot raise_flag_of_peace(kudu, squirrel) = rule3()\nraise_flag_of_peace(kudu, squirrel) == False\nraise_flag_of_peace(kudu, squirrel) == False\nrespects(kudu, swordfish) = rule6(kudu)\nrespects(kudu, swordfish) == True\nrespects(kudu, swordfish) == True\nquestion = True", "answer": 1, "code": "rule1() = has(catfish, card_with(color_starting_with(\"w\"))) => steal_points(catfish, 5, kudu)\nrule2() = proceed(something, spot_right_after(spot_of(canary))) => offer_job_position(kudu, parrot)\nrule3() = steal_points(catfish, 5, kudu) => not raise_flag_of_peace(kudu, squirrel)\nrule4() = raise_flag_of_peace(something, caterpillar) => not knows_defense_plan(kudu, squirrel)\nrule5() = sing_song(something, victory_song_for(cheetah)) => proceed(something, spot_right_after(spot_of(canary)))\nrule6(something) = points(something) == points(parrot) & not raise_flag_of_peace(something, squirrel) => respects(something, swordfish)\nrule7() = friends(grasshopper) > 3 => not steal_points(grasshopper, 5, squirrel)\nrule8() = steal_points(grasshopper, 5, squirrel) => knows_defensive_plans(squirrel, kudu)\nrule9() = burn(warehouse_of(kudu), squirrel) => not respects(kudu, swordfish)\nrule10() = offer_job_position(something, crocodile) => not knows_defensive_plans(halibut, kudu)\nrule11() = not show_cards(puffin, halibut) & prepare_armor(hummingbird, halibut) => knows_defense_plan(halibut, kudu)\nrule12() = remove(something, piece_of(lion)) => raise_flag_of_peace(something, squirrel)\nrule13() = knock_down(fortress_of(goldfish), something) => steal_points(grasshopper, 5, squirrel)\nrule14() = not knows_defensive_plans(halibut, kudu) => not offer_job_position(kudu, parrot)\norder(rule11) > order(rule10) = True\norder(rule12) > order(rule3) = True\norder(rule13) > order(rule7) = True\norder(rule2) > order(rule14) = True\norder(rule4) > order(rule8) = True\norder(rule6) > order(rule9) = True\n\nhas(catfish, card_with(white_color)) = True\nfriends(grasshopper) = 5\noffer_job_position(hippopotamus, crocodile) = True\nprepare_armor(hummingbird, halibut) = True\nproceed(pig, spot_right_after(spot_of(cheetah))) = True\nknock_down(fortress_of(goldfish), zander) = True\n\nquestion = respects(kudu, swordfish)\n"}, {"idx": 75, "response": "not show_all_cards(cockroach, penguin) = rule15()\nnot enemy(hare, cockroach) = rule15()\nnot steal_points(baboon, 5, cockroach) = rule15()\nburn(warehouse_of(zander), cockroach) = rule12(cockroach)\nburn(warehouse_of(zander), cockroach) == True\nquestion = True", "answer": 1, "code": "rule1() = has(carp, drink) => not needs_support(carp, cockroach)\nrule2() = show_all_cards(something, cat) => not enemy(hare, cockroach)\nrule3(something) = rolls_dice(something, raven) => rolls_dice(something, phoenix)\nrule4() = proceed(something, spot_right_after(spot_of(eel))) => points(snail) == points(rabbit)\nrule5() = friends(lion) < 2 => enemy(lion, snail)\nrule6() = killed(lion, mayor) => enemy(lion, snail)\nrule7() = not rolls_dice(cricket, carp) => needs_support(carp, cockroach)\nrule8() = has(mosquito, card_with(primary_color)) => proceed(mosquito, spot_right_after(spot_of(eel)))\nrule9() = first_letter_of(name(lion)) == first_letter_of(name(octopus)) => not enemy(lion, snail)\nrule10(something) = rolls_dice(something, phoenix) => respects(something, canary)\nrule11() = first_letter_of(name(mosquito)) == first_letter_of(name(viperfish)) => proceed(mosquito, spot_right_after(spot_of(eel)))\nrule12(something) = not show_all_cards(something, penguin) & respects(something, canary) => burn(warehouse_of(zander), something)\nrule13() = has(hare, card_with(color_starting_with(\"w\"))) => enemy(hare, cockroach)\nrule14() = eats_food(something, food_of(grasshopper)) => steal_points(baboon, 5, cockroach)\nrule15() = not steal_points(baboon, 5, cockroach) & not enemy(hare, cockroach) => not show_all_cards(cockroach, penguin)\nrule16() = first_letter_of(name(baboon)) == first_letter_of(name(penguin)) => not steal_points(baboon, 5, cockroach)\norder(rule1) > order(rule7) = True\norder(rule13) > order(rule2) = True\norder(rule14) > order(rule16) = True\norder(rule9) > order(rule5) = True\norder(rule9) > order(rule6) = True\n\nname(baboon, Peddi) = True\nrolls_dice(cockroach, raven) = True\nkilled(lion, mayor) = True\nfriends(lion, energetic) = 5\nfriends(lion, not_energetic) = 2\nname(lion, Max) = True\nhas(mosquito, card_with(white_color)) = True\nname(mosquito, Max) = True\nname(penguin, Pablo) = True\nshow_all_cards(squid, cat) = True\nname(viperfish, Meadow) = True\nnot rolls_dice(cricket, carp) = True\n\nquestion = burn(warehouse_of(zander), cockroach)\n"}, {"idx": 76, "response": "friends(catfish) = 14\nfriends(cheetah) = 2\nfriends(octopus) = 12\nowns(catfish, luxury_aircraft) = True\nname(cheetah, Chickpea) = True\nname(cricket, Tango) = True\nname(donkey, Cinnamon) = True\nname(octopus, Tessa) = True\nproceed_to_spot_right_after(spot_of(eagle), sun_bear) = True\nnot steal_points(octopus, 5, bat) = rule1()\nsteal_points(cheetah, 5, bat) = rule1()\nnot roll_dice(bat, leopard) = rule1()\nsteal_points(cheetah, 5, bat) = True\nnot roll_dice(bat, leopard) = False\nquestion = False", "answer": -1, "code": "rule1() = not steal_points(octopus, 5, bat) & steal_points(cheetah, 5, bat) => not roll_dice(bat, leopard)\nrule2() = friends(catfish) < 5 => show_cards(catfish, oscar)\nrule3() = friends(octopus) < 3 => enemy(octopus, raven)\nrule4() = first_letter_of(name(cheetah)) == first_letter_of(name(donkey)) => actual_enemy(cheetah, squid)\nrule5() = owns(catfish, luxury_aircraft) => show_all_cards(catfish, oscar)\nrule6() = friends(cheetah) > 5 => actual_enemy(cheetah, squid)\nrule7() = first_letter_of(name(octopus)) == first_letter_of(name(cricket)) => actual_enemy(octopus, raven)\nrule8(something) = learn_basics_of_resource_management(something, kudu) & actual_enemy(something, squid) => steal_points(something, 5, bat)\nrule9() = proceed_to_spot_right_after(spot_of(eagle), something) => learn_basics_of_resource_management(cheetah, kudu)\nrule10() = enemy(something, raven) => not steal_points(something, 5, bat)\n\nfriends(catfish) = 14\nowns(catfish, luxury_aircraft) = True\nfriends(cheetah) = 2\nhas_friend(cheetah, bald) = True\nhas_friend(cheetah, not_bald) = True\nname(cheetah, Chickpea) = True\nname(cricket, Tango) = True\nname(donkey, Cinnamon) = True\nfriends(octopus) = 12\nname(octopus, Tessa) = True\nsing_song(polar_bear, victory_song_for(cheetah)) = True\nproceed_to_spot_right_after(spot_of(eagle), sun_bear) = True\n\nquestion = roll_dice(bat, leopard)\n"}, {"idx": 77, "response": "recently_read(dog, high_quality_paper) == True\nhas_published_high_quality_paper(dog) = rule7()\nhas_published_high_quality_paper(dog) == True\nhas_published_high_quality_paper(dog) == True\nnot burn(warehouse_of(grizzly_bear)) = rule7()\nburn(warehouse_of(grizzly_bear)) == False\nowes_money_to(panda_bear, dog) == True\nburn(warehouse_of(grizzly_bear)) == False\nrolls_dice_for(panther, blobfish) == True\ngive_magnifying_glass(dog, sheep) = rule5()\ngive_magnifying_glass(dog, sheep) == True\ngive_magnifying_glass(dog, sheep) == True\nprepare_armor(raven, eagle) = unknown\nquestion = unknown", "answer": 0, "code": "rule1() = believes(dog_respects_raven) & not knows_defensive_plans(sheep, raven) => add_conclusion(\"the raven prepares armor for the eagle\")\nrule2() = owes_money_to(panda_bear, dog) => burn(warehouse_of(grizzly_bear))\nrule3(something) = attacks(green_fields_of(elephant)) & not attacks(green_fields_of(squirrel)) => conclude(learns_elementary_resource_management(something, octopus))\nrule4() = not prepare_armor(rabbit, sheep) => not learn_basics_of_resource_management(sheep, octopus)\nrule5() = rolls_dice_for(blobfish) => give_magnifying_glass(dog, sheep)\nrule6(something) = learns_basics_of_resource_management(something, octopus) => not knows_defensive_plans(something, raven)\nrule7() = has_published_high_quality_paper(dog) => not burn(warehouse_of(grizzly_bear))\nrule8(something) = give_magnifier(something, sheep) => respects(something, raven)\nrule9() = has(dog, card_with(primary_color)) => not burn(warehouse_of(grizzly_bear))\norder(rule4) > order(rule3) = True\norder(rule7) > order(rule2) = True\norder(rule9) > order(rule2) = True\n\nrecently_read(dog, high_quality_paper) = True\nowes_money_to(panda_bear, dog) = True\nrolls_dice_for(panther, blobfish) = True\nattacks(sheep, green_fields_of(elephant)) = True\nnot respects(sheep, squirrel) = True\n\nquestion = prepare_armor(raven, eagle)\n"}, {"idx": 78, "response": "not wink(leopard, spider) = rule3()\nwink(leopard, spider) == False\nactual_enemy(crocodile, dog) = rule2()\nactual_enemy(crocodile, dog) == True\nactual_enemy(crocodile, dog) == True\nsteal_points(leopard, 5, panda_bear) = rule8(leopard)\nsteal_points(leopard, 5, panda_bear) == True\nsteal_points(leopard, 5, panda_bear) == True\nenemy(leopard, sea_bass) = rule1()\nenemy(leopard, sea_bass) == True\nenemy(leopard, sea_bass) == True\nquestion = True", "answer": 1, "code": "rule1() = steal_points(something, 5, panda_bear) => enemy(leopard, sea_bass)\nrule2() = not learn_elementary_resource_management(panda_bear, crocodile) => actual_enemy(crocodile, dog)\nrule3() = knock_down_fortress(something, kangaroo) => not wink(leopard, spider)\nrule4() = learn_basics_of_resource_management(zander, mosquito) => not owes_money_to(mosquito, leopard)\nrule5() = not owes_money_to(mosquito, leopard) => wink(leopard, spider)\nrule6() = first_letter_of(name(mosquito)) == first_letter_of(name(canary)) => owes_money_to(mosquito, leopard)\nrule7() = has(mosquito, something_to_sit_on) => owes_money_to(mosquito, leopard)\nrule8(something) = actual_enemy(something, dog) => steal_points(something, 5, panda_bear)\norder(rule3) > order(rule5) = True\norder(rule6) > order(rule4) = True\norder(rule7) > order(rule4) = True\n\nname(canary, Lily) = True\nname(mosquito, Cinnamon) = True\nlearn_basics_of_resource_management(zander, mosquito) = True\nnot learn_elementary_resource_management(panda_bear, crocodile) = True\n\nquestion = enemy(leopard, sea_bass)\n"}, {"idx": 79, "response": "not prepare_armor(koala, zander) = True\nremove(zander, piece_of(viperfish)) = rule3()\nremove(zander, piece_of(viperfish)) == True\nburn(warehouse_of(kudu), sea_bass) = rule1()\nburn(warehouse_of(kudu), sea_bass) == True\nburn(warehouse_of(kudu), sea_bass) == True\nnot eat_food(kudu, cow) = rule2()\neat_food(kudu, cow) == False\nquestion = False", "answer": -1, "code": "rule1() = remove(something, piece_of(viperfish)) => burn(warehouse_of(kudu), sea_bass)\nrule2() = burn(warehouse_of(kudu), sea_bass) => not eat_food(kudu, cow)\nrule3() = not prepare_armor(koala, zander) => remove(zander, piece_of(viperfish))\n\nnot prepare_armor(koala, zander) = True\n\nquestion = eat_food(kudu, cow)\n"}, {"idx": 80, "response": "lost_keys(panda_bear) == True\nnot proceed(panda_bear, spot_right_after(spot_of(koala))) = rule6()\nproceed(panda_bear, spot_right_after(spot_of(koala))) == False\neat_food(koala, squid) = rule1()\neat_food(koala, squid) == True\nquestion = True", "answer": 1, "code": "rule1() = not proceed(panda_bear, spot_right_after(spot_of(koala))) => eat_food(koala, squid)\nrule2() = wink(snail, octopus) => prepare_armor(octopus, polar_bear)\nrule3(something) = rolls_dice_for(something, parrot) & points(something) == points(cat) => not proceed(something, spot_right_after(spot_of(koala)))\nrule4() = rolls_dice_for(something, canary) => wink(snail, octopus)\nrule5() = not needs_support(turtle, panda_bear) => points(panda_bear) == points(cat)\nrule6() = prepare_armor(parrot, panda_bear) => proceed(panda_bear, spot_right_after(spot_of(koala)))\nrule7() = enemy(cockroach, panda_bear) => rolls_dice_for(panda_bear, parrot)\norder(rule6) > order(rule3) = True\n\nenemy(cockroach, panda_bear) = True\nrolls_dice_for(kangaroo, canary) = True\nhas(panda_bear, arugula) = True\nlost_keys(panda_bear) = True\nneeds_support(turtle, panda_bear) = True\n\nquestion = eat_food(koala, squid)\n"}, {"idx": 81, "response": "friends(squid) = 2\nnot need_support(squid, kudu) = rule1()\nneed_support(squid, kudu) == False\nreduce_work_hours(squid) = True\nnot need_support(squid, bat) = rule10()\nneed_support(squid, bat) == False\ngive_magnifying_glass(raven, bat) = rule7()\ngive_magnifying_glass(raven, bat) == True\nnot give_magnifying_glass(bat, grasshopper) = rule7()\ngive_magnifying_glass(bat, grasshopper) == False\nsing_song(bat, victory_song_for(parrot)) = rule5()\nsing_song(bat, victory_song_for(parrot)) == not need_support(squid, bat)\nsing_song(bat, victory_song_for(parrot)) == not False\nquestion = True", "answer": 1, "code": "rule1() = friends(squid) > 1 => not need_support(squid, kudu)\nrule2(something) = raise_flag_of_peace(something, moose) & prepare_armor(something, starfish) => sing_song(something, victory_song_for(parrot))\nrule3() = show_cards(some_animal, panther) => raise_flag_of_peace(bat, moose)\nrule4() = proceed(some_animal, spot_right_after(spot_of(sea_bass))) => not need_support(squid, bat)\nrule5() = give_magnifying_glass(turtle, bat) & need_support(squid, bat) => not sing_song(bat, victory_song_for(parrot))\nrule6() = roll_dice(some_animal, jellyfish) => not prepare_armor(bat, starfish)\nrule7() = give_magnifying_glass(raven, bat) => not give_magnifying_glass(bat, grasshopper)\nrule8(something) = not give_magnifying_glass(something, grasshopper) => prepare_armor(something, starfish)\nrule9() = learn_basics_of_resource_management(elephant, gecko) => show_cards(gecko, panther)\nrule10(something) = not need_support(something, kudu) => need_support(something, bat)\norder(rule4) > order(rule10) = True\norder(rule5) > order(rule2) = True\norder(rule6) > order(rule8) = True\n\nlearn_basics_of_resource_management(elephant, gecko) = True\ngive_magnifying_glass(raven, bat) = True\nfriends(squid) = 2\nreduce_work_hours(squid) = True\n\nquestion = sing_song(bat, victory_song_for(parrot))\n"}, {"idx": 82, "response": "name(buffalo, Cinnamon) == True\nname(dog, Charlie) == True\nfirst_letter_of(name(buffalo)) == first_letter_of(name(dog)) == True\neat_food(buffalo, food_of(kangaroo)) = rule1()\neat_food(buffalo, food_of(kangaroo)) == True\nroll_dice(meerkat, kangaroo) = rule4()\nroll_dice(meerkat, kangaroo) == True\nwink(kangaroo, parrot) = rule2()\nwink(kangaroo, parrot) == True\nproceed_to_spot_right_after(spot_of(salmon), something) = rule3()\nproceed_to_spot_right_after(spot_of(salmon), something) == True\nnot wink(kangaroo, parrot) == False\nneeds_support(aardvark, meerkat) == True\nroll_dice(meerkat, kangaroo) == True\nremove(tiger, piece_of(kangaroo)) = rule5()\nremove(tiger, piece_of(kangaroo)) == True\nremove(tiger, piece_of(kangaroo)) == True\nshow_cards(kangaroo, mosquito) = rule7()\nshow_cards(kangaroo, mosquito) == True\nshow_cards(kangaroo, mosquito) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(buffalo)) == first_letter_of(name(dog)) => eat_food(buffalo, food_of(kangaroo))\nrule2() = roll_dice(meerkat, kangaroo) => wink(kangaroo, parrot)\nrule3() = proceed_to_spot_right_after(spot_of(salmon), something) => not wink(kangaroo, parrot)\nrule4() = needs_support(aardvark, meerkat) => roll_dice(meerkat, kangaroo)\nrule5() = has(tiger, sharp_object) => remove(tiger, piece_of(kangaroo))\nrule6() = knows(defense_plan_of(kangaroo), penguin) & eat_food(buffalo, food_of(kangaroo)) => not show_cards(kangaroo, mosquito)\nrule7() = remove(tiger, piece_of(kangaroo)) => show_cards(kangaroo, mosquito)\nrule8() = friends(buffalo) > 12 => eat_food(buffalo, food_of(kangaroo))\nrule9() = show_cards(something, mosquito) & wink(something, parrot) => not remove(something, piece_of(panther))\nrule10() = fan_of(tiger, Chris_Ronaldo) => remove(tiger, piece_of(kangaroo))\norder(rule3) > order(rule2) = True\norder(rule6) > order(rule7) = True\n\nneeds_support(aardvark, meerkat) = True\nfriends(buffalo) = 6\nname(buffalo, Cinnamon) = True\nname(dog, Charlie) = True\nhas(tiger, violin) = True\nsupports(tiger, Chris_Ronaldo) = True\n\nquestion = remove(kangaroo, piece_of(panther))\n"}, {"idx": 83, "response": "has(caterpillar, card_with(blue_color)) == True\nprepare_armor(caterpillar, meerkat) = rule3()\nprepare_armor(caterpillar, meerkat) == True\nprepare_armor(caterpillar, meerkat) == True\nsing_song(meerkat, victory_song_for(elephant)) = rule6()\nsing_song(meerkat, victory_song_for(elephant)) == True\nsing_song(meerkat, victory_song_for(elephant)) == True\nlearn_elementary_resource_management(elephant, swordfish) = rule1()\nlearn_elementary_resource_management(elephant, swordfish) == True\nlearn_elementary_resource_management(elephant, swordfish) == True\nquestion = True", "answer": 1, "code": "rule1() = roll_dice(eel, elephant) & sing_song(meerkat, victory_song_for(elephant)) => learn_elementary_resource_management(elephant, swordfish)\nrule2() = owes_money_to(something, hippopotamus) => roll_dice(eel, elephant)\nrule3() = has(caterpillar, card_with(color_starting_with(\"b\"))) => prepare_armor(caterpillar, meerkat)\nrule4(something) = not proceed(something, spot_right_after(spot_of(cricket))) => not roll_dice(something, elephant)\nrule5() = first_letter_of(name(caterpillar)) == first_letter_of(name(kudu)) => not prepare_armor(caterpillar, meerkat)\nrule6() = prepare_armor(caterpillar, meerkat) => sing_song(meerkat, victory_song_for(elephant))\nrule7() = steal_points(something, polar_bear, 5) => owes_money_to(viperfish, hippopotamus)\norder(rule2) > order(rule4) = True\norder(rule5) > order(rule3) = True\n\nhas(caterpillar, card_with(blue_color)) = True\nname(caterpillar, Casper) = True\nsteal_points(kangaroo, polar_bear, 5) = True\nname(kudu, Charlie) = True\n\nquestion = learn_elementary_resource_management(elephant, swordfish)\n"}, {"idx": 84, "response": "has(moose, card_with(orange_color)) == True\ncolor(card_with(orange_color)) == orange\nnot remove(moose, piece_of(cricket)) = rule3()\nremove(moose, piece_of(cricket)) == False\nowes_money_to(something, amberjack) = rule4()\nowes_money_to(moose, amberjack) == False\nburn(warehouse_of(ferret)) = rule2()\nburn(warehouse_of(ferret)) == True\nburn(warehouse_of(ferret)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = attack_green_fields(something, tiger) & not remove(something, piece_of(cricket)) => attack_green_fields(something, octopus)\nrule2() = attack_green_fields(something, octopus) => burn(warehouse_of(ferret))\nrule3() = has(moose, card) and color(card) in rainbow_colors => not remove(moose, piece_of(cricket))\nrule4() = owes_money_to(something, amberjack) => not burn(warehouse_of(ferret))\nrule5() = first_letter_of(name(moose)) == first_letter_of(name(lion)) => attack_green_fields(moose, tiger)\norder(rule4) > order(rule2) = True\n\nname(lion, Lucy) = True\nhas(moose, card_with(orange_color)) = True\nname(moose, Luna) = True\n\nquestion = burn(warehouse_of(ferret))\n"}, {"idx": 85, "response": "has(bat, card_with(yellow_color)) == True\nhas(bat, knife) == True\ninvented(bat, time_machine) == True\nhas(bat, cello) == True\nfriends(bat) == 8\nnot raise_flag_of_peace(bat, aardvark) == True\nname(bat, Pablo) == True\nfriends(buffalo) == 11\nname(sun_bear, Paco) == True\nnot offer_job(cat, moose) == True\nattack_fields(rabbit, green_fields_of(bat)) = rule3()\nattack_fields(rabbit, green_fields_of(bat)) == True\nattack_fields(rabbit, green_fields_of(bat)) == True\neat_food(kiwi, food_of(bat)) = rule11()\neat_food(kiwi, food_of(bat)) == True\neat_food(kiwi, food_of(bat)) == True\nsing_song(bat, victory_song_for(jellyfish)) = rule11()\nsing_song(bat, victory_song_for(jellyfish)) == True\nsing_song(bat, victory_song_for(jellyfish)) == True\nquestion = True", "answer": 1, "code": "rule1() = enemy(something, blobfish) => eat_food(bat, food_of(tiger))\nrule2() = remove(something, piece_of(wolverine)) => not eat_food(something, food_of(tiger))\nrule3() = steal_points(something, 5, salmon) => attack_fields(rabbit, green_fields_of(bat))\nrule4() = has(bat, connect_to_internet(device)) => not remove(bat, piece_of(wolverine))\nrule5() = friends(buffalo) > 9 => steal_points(buffalo, 5, salmon)\nrule6() = not prepare_armor(starfish, buffalo) => not steal_points(buffalo, 5, salmon)\nrule7() = not knows(defense_plan_of(octopus), something) => burn(warehouse_of(doctorfish), something)\nrule8() = friends(bat) > 12 => not knows(defense_plan_of(octopus), bat)\nrule9(something) = burn(warehouse_of(doctorfish), something) & eat_food(something, food_of(tiger)) => not sing_song(something, victory_song_for(jellyfish))\nrule10() = not offer_job(cat, moose) => enemy(moose, blobfish)\nrule11() = attack_fields(rabbit, green_fields_of(bat)) & eat_food(kiwi, food_of(bat)) => sing_song(bat, victory_song_for(jellyfish))\nrule12(something) = not raise_flag_of_peace(something, aardvark) => remove(something, piece_of(wolverine))\nrule13() = first_letter_of(name(bat)) == first_letter_of(name(sun_bear)) => not knows(defense_plan_of(octopus), bat)\norder(rule1) > order(rule2) = True\norder(rule11) > order(rule9) = True\norder(rule12) > order(rule4) = True\norder(rule6) > order(rule5) = True\n\nhas(bat, card_with(yellow_color)) = True\nhas(bat, knife) = True\ninvented(bat, time_machine) = True\nhas(bat, cello) = True\nfriends(bat) = 8\nnot raise_flag_of_peace(bat, aardvark) = True\nname(bat, Pablo) = True\nfriends(buffalo) = 11\nname(sun_bear, Paco) = True\nnot offer_job(cat, moose) = True\n\nquestion = sing_song(bat, victory_song_for(jellyfish))\n"}, {"idx": 86, "response": "name(grizzly_bear, Pashmak) == True\nraise_flag_of_peace(grizzly_bear, penguin) = rule3()\nraise_flag_of_peace(grizzly_bear, penguin) == True\nraise_flag_of_peace(grizzly_bear, penguin) == True\nnot show_cards(leopard, puffin) = rule8()\nshow_cards(leopard, puffin) == False\nshow_cards(leopard, puffin) == False\nquestion = False", "answer": -1, "code": "rule1() = burn(warehouse_of(kudu), something) => owes_money_to(leopard, sea_bass)\nrule2() = owes_money_to(something, sea_bass) => respects(something, donkey)\nrule3() = has(grizzly_bear, card_with(primary_color)) => raise_flag_of_peace(grizzly_bear, penguin)\nrule4() = first_letter_of(name(grizzly_bear)) == first_letter_of(name(dog)) => raise_flag_of_peace(grizzly_bear, penguin)\nrule5() = steal_points_from(penguin, something, 5) => not owes_money_to(leopard, oscar)\nrule6(something) = respects(something, donkey) & not owes_money_to(something, oscar) => show_cards(something, puffin)\nrule7() = not steal_points_from(oscar, snail, 5) => knock_down(fortress_of(leopard), oscar)\nrule8() = raise_flag_of_peace(something, parrot) => not show_cards(leopard, puffin)\norder(rule8) > order(rule6) = True\n\nname(dog, Max) = True\nhas(grizzly_bear, card_with(blue_color)) = True\nname(grizzly_bear, Pashmak) = True\nburn(warehouse_of(kudu), tiger) = True\nnot proceed(snail, spot_right_after(spot_of(oscar))) = True\n\nquestion = show_cards(leopard, puffin)\n"}, {"idx": 87, "response": "has(baboon, plastic_bag) == True\nremove(baboon, piece_of(leopard)) = rule11()\nremove(baboon, piece_of(leopard)) == True\ngive(cheetah, magnifier, zander) == True\nsteal_points(zander, cow, 5) = rule4()\nsteal_points(zander, cow, 5) == True\nsteal_points(zander, cow, 5) == True\nfriends(zander) > 10 = rule5()\nfriends(zander) > 10 == False\nhas(zander, card_with(yellow_color)) == True\nnot steal_points(zander, cow, 5) = rule6()\nsteal_points(zander, cow, 5) == True\nnot respects(koala, zander) = rule14()\nrespects(koala, zander) == False\nnot sing_song(zander, victory_song_for(jellyfish)) = rule14()\nsing_song(zander, victory_song_for(jellyfish)) == False\nsing_song(zander, victory_song_for(jellyfish)) == False\nraise_flag_of_peace(zander, blobfish) = rule2()\nraise_flag_of_peace(zander, blobfish) == True\nraise_flag_of_peace(zander, blobfish) == True\nquestion = True", "answer": 1, "code": "rule1() = steal_points(something, cow, 5) => not respects(something, kudu)\nrule2() = sing_song(something, victory_song_for(jellyfish)) & not respects(something, kudu) => raise_flag_of_peace(something, blobfish)\nrule3() = remove(baboon, piece_of(leopard)) => not respects(leopard, zander)\nrule4() = give(cheetah, magnifier, zander) => steal_points(zander, cow, 5)\nrule5() = friends(zander) > 10 => not steal_points(zander, cow, 5)\nrule6() = has(zander, card_with(primary_color)) => not steal_points(zander, cow, 5)\nrule7() = sing_song(animal, victory_song_for(phoenix)) => not remove(kangaroo, piece_of(zander))\nrule8() = not become_enemy(panda_bear, phoenix) => not knows(defense_plan_of(zander), phoenix)\nrule9() = not remove(kangaroo, piece_of(zander)) => sing_song(zander, victory_song_for(jellyfish))\nrule10(animal) = become_enemy(animal, polar_bear) => not become_enemy(animal, phoenix)\nrule11() = has(baboon, carry_apples_and_oranges) => remove(baboon, piece_of(leopard))\nrule12() = prepare_armor(squirrel, baboon) => not remove(baboon, piece_of(leopard))\nrule13() = owes_money_to(animal, lobster) => respects(zander, kudu)\nrule14() = not respects(koala, zander) => not sing_song(zander, victory_song_for(jellyfish))\norder(rule12) > order(rule11) = True\norder(rule13) > order(rule1) = True\norder(rule14) > order(rule9) = True\norder(rule5) > order(rule4) = True\norder(rule6) > order(rule4) = True\n\nhas(baboon, plastic_bag) = True\nsing_song(caterpillar, victory_song_for(phoenix)) = True\ngive(cheetah, magnifier, zander) = True\nbecome_enemy(panda_bear, polar_bear) = True\nhas(zander, card_with(yellow_color)) = True\n\nquestion = raise_flag_of_peace(zander, blobfish)\n"}, {"idx": 88, "response": "attack(crocodile, green_fields_of(swordfish)) == True\nknows_defense_plan(aardvark, cow) = rule5()\nknows_defense_plan(aardvark, cow) == True\nraise_flag_of_peace(cow, raven) = rule6()\nraise_flag_of_peace(cow, raven) == True\nraise_flag_of_peace(cow, raven) == True\nnot knock_down(cow, fortress_of(hare)) = rule2(cow)\nknock_down(cow, fortress_of(hare)) == False\nknock_down(cow, fortress_of(hare)) == False\nquestion = False", "answer": -1, "code": "rule1() = steal_points(lion, squid, 5) => sing_song(squid, victory_song_for(cricket))\nrule2(something) = not attack(something, green_fields_of(crocodile)) & raise_flag_of_peace(something, raven) => not knock_down(something, fortress_of(hare))\nrule3() = sing_song(something, victory_song_for(cricket)) => not attack(cow, green_fields_of(crocodile))\nrule4() = show_cards(grasshopper, oscar) & not roll_dice(amberjack, oscar) => sing_song(oscar, victory_song_for(caterpillar))\nrule5() = attack(something, green_fields_of(swordfish)) => knows_defense_plan(aardvark, cow)\nrule6() = sing_song(something, victory_song_for(caterpillar)) => raise_flag_of_peace(cow, raven)\nrule7() = knows_defensive_plans(panda_bear, cow) => not raise_flag_of_peace(cow, raven)\norder(rule7) > order(rule6) = True\n\nattack(crocodile, green_fields_of(swordfish)) = True\nshow_cards(grasshopper, oscar) = True\nsteal_points(lion, squid, 5) = True\neat_food(oscar, tiger) = True\nnot roll_dice(amberjack, oscar) = True\n\nquestion = knock_down(cow, fortress_of(hare))\n"}, {"idx": 89, "response": "name(panda_bear) == \"Milo\"\nname(sea_bass) == \"Mojo\"\nfirst_letter_of(\"Milo\") == first_letter_of(\"Mojo\")\nprepare_armor(panda_bear, whale) = rule1()\nprepare_armor(panda_bear, whale) == False\nreduce_work_hours(panda_bear) = True\nprepare_armor(panda_bear, whale) = rule2()\nprepare_armor(panda_bear, whale) == True\nwink_at(elephant, sheep) = True\nnot enemy(elephant, carp) = True\nknock_down_fortress(elephant, whale) = rule3(elephant)\nknock_down_fortress(elephant, whale) == True\nknock_down_fortress(elephant, whale) == True\nneeds_support(elephant, kudu) = rule5(elephant)\nneeds_support(elephant, kudu) == True\nproceed(kudu, spot_right_after(spot_of(penguin))) = rule11()\nproceed(kudu, spot_right_after(spot_of(penguin))) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(panda_bear)) == first_letter_of(name(sea_bass)) => not prepare_armor(panda_bear, whale)\nrule2() = reduce_work_hours(panda_bear) => prepare_armor(panda_bear, whale)\nrule3(something) = wink_at(something, sheep) & not enemy(something, carp) => knock_down_fortress(something, whale)\nrule4(something) = respects(something, doctorfish) => points(something) == points(lion)\nrule5(something) = knock_down_fortress(something, whale) => needs_support(something, kudu)\nrule6() = enemy(lion, kudu) => proceed(kudu, spot_right_after(spot_of(penguin)))\nrule7() = points(amberjack) == points(lion) => enemy(lion, kudu)\nrule8() = friends(oscar) < 17 => wink_at(oscar, mosquito)\nrule9() = prepare_armor(panda_bear, whale) => knock_down_fortress(whale, kudu)\nrule10(something) = points(something) == points(cricket) => not knock_down_fortress(something, kudu)\nrule11() = needs_support(elephant, kudu) & knock_down_fortress(whale, kudu) => not proceed(kudu, spot_right_after(spot_of(penguin)))\nrule12() = voted_for(oscar, mayor) => wink_at(oscar, mosquito)\norder(rule1) > order(rule2) = True\norder(rule10) > order(rule9) = True\norder(rule11) > order(rule6) = True\n\nrespects(amberjack, doctorfish) = True\nwink_at(elephant, sheep) = True\nfriends(oscar) = 12\nparked_bike(oscar, front_of(store)) = True\nname(panda_bear, Milo) = True\nreduce_work_hours(panda_bear) = True\nname(sea_bass, Mojo) = True\nnot enemy(elephant, carp) = True\n\nquestion = proceed(kudu, spot_right_after(spot_of(penguin)))\n"}, {"idx": 90, "response": "has(baboon, card_with(primary_color)) = rule1()\neats_food(baboon, food_of(panther)) == True\nfriends(baboon, easy_going) < 3 = rule2()\nfriends(baboon, easy_going) == 6\neats_food(baboon, food_of(panther)) == True\nnot has(canary, keys) = rule3()\nhas(canary, keys) == True\nprepare_armor(canary, rabbit) == False\nhas(rabbit, high_quality_paper) = rule4()\nhas(rabbit, high_quality_paper) == True\nneeds_support(rabbit, catfish) == True\nexists(animal, eats_food(animal, food_of(panther))) = rule5()\nexists(animal, eats_food(animal, food_of(panther))) == True\nnot offer_job_position(kudu, moose) = rule5()\noffer_job_position(kudu, moose) == False\nhas(canary, card_with(color_in(rainbow_colors))) = rule6()\nhas(canary, card_with(color_in(rainbow_colors))) == False\nprepare_armor(canary, rabbit) == False\nfirst_letter_of(name(kudu)) == first_letter_of(name(doctorfish)) = rule7()\nfirst_letter_of(name(kudu)) == first_letter_of(name(doctorfish)) == True\nlearn_elementary_resource_management(kudu, kangaroo) == True\nhas(kudu, card_with(color_in(rainbow_colors))) = rule8()\nhas(kudu, card_with(color_in(rainbow_colors))) == True\nlearn_elementary_resource_management(kudu, kangaroo) == True\nnot actual_enemy(rabbit, koala) = rule10()\nactual_enemy(rabbit, koala) == False\nnot offer_job_position(kudu, moose) & show_cards(rabbit, moose) = rule11()\noffer_job_position(kudu, moose) == False\nshow_cards(rabbit, moose) == True\nneeds_support(moose, goldfish) = rule11()\nneeds_support(moose, goldfish) == True\nquestion = True", "answer": 1, "code": "rule1() = has(baboon, card_with(primary_color)) => eats_food(baboon, food_of(panther))\nrule2() = friends(baboon, easy_going) < 3 => eats_food(baboon, food_of(panther))\nrule3() = not has(canary, keys) => prepare_armor(canary, rabbit)\nrule4() = has(rabbit, high_quality_paper) => needs_support(rabbit, catfish)\nrule5() = exists(animal, eats_food(animal, food_of(panther))) => not offer_job_position(kudu, moose)\nrule6() = has(canary, card_with(color_in(rainbow_colors))) => prepare_armor(canary, rabbit)\nrule7() = first_letter_of(name(kudu)) == first_letter_of(name(doctorfish)) => learn_elementary_resource_management(kudu, kangaroo)\nrule8() = has(kudu, card_with(color_in(rainbow_colors))) => learn_elementary_resource_management(kudu, kangaroo)\nrule9(something) = not actual_enemy(something, koala) & needs_support(something, catfish) => show_cards(something, moose)\nrule10() = exists(animal, steals_points_from(animal, donkey, 5)) => not actual_enemy(rabbit, koala)\nrule11() = not offer_job_position(kudu, moose) & show_cards(rabbit, moose) => needs_support(moose, goldfish)\n\nhas(baboon, card_with(red_color)) = True\nfriends(baboon, easy_going) = 6\nhas(canary, card_with(yellow_color)) = True\nhas(canary, keys) = True\nproceed(canary, spot_right_after(spot_of(bat))) = True\nsteals_points_from(cow, donkey, 5) = True\nname(doctorfish, Lily) = True\noffer_job_position(halibut, jellyfish) = True\nhas(kudu, card_with(black_color)) = True\nname(kudu, Luna) = True\npublished_high_quality_paper(rabbit) = True\n\nquestion = needs_support(moose, goldfish)\n"}, {"idx": 91, "response": "name(lion, Lucy) == True\nname(snail, Lola) == True\nfirst_letter_of(name(lion)) == first_letter_of(name(snail)) == True\nshow_cards(lion, rabbit) = rule1()\nshow_cards(lion, rabbit) == True\nshow_cards(lion, rabbit) == True\nknows(defense_plan_of(starfish), rabbit) = rule4()\nknows(defense_plan_of(starfish), rabbit) == True\nknows(defense_plan_of(starfish), rabbit) == True\nnot offer_job(starfish, caterpillar) = rule7()\noffer_job(starfish, caterpillar) == False\noffer_job(starfish, caterpillar) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(lion)) == first_letter_of(name(snail)) => show_cards(lion, rabbit)\nrule2() = has(moose, card_with(color)) & color in colors_of(flag_of(Belgium)) => not owes_money_to(moose, rabbit)\nrule3() = burn(warehouse_of(moose), sea_bass) & points(kangaroo) == points(moose) => owes_money_to(moose, rabbit)\nrule4() = show_cards(lion, rabbit) => knows(defense_plan_of(starfish), rabbit)\nrule5(something) = sing_song(something, victory_song_for(tiger)) => give(something, magnifying_glass, wolverine)\nrule6() = give(something, magnifying_glass, wolverine) => needs_support(starfish, grasshopper)\nrule7() = knows(defense_plan_of(starfish), rabbit) => not offer_job(starfish, caterpillar)\nrule8() = friends(moose) > 5 => not owes_money_to(moose, rabbit)\nrule9() = not knows(defense_plan_of(starfish), kiwi) => not needs_support(starfish, grasshopper)\norder(rule3) > order(rule2) = True\norder(rule3) > order(rule8) = True\norder(rule9) > order(rule6) = True\n\nname(lion, Lucy) = True\nfriends(moose, playful) = 3\nfriends(moose, not_playful) = 4\nhas(moose, card_with(blue_color)) = True\nsing_song(pig, victory_song_for(tiger)) = True\nburn(warehouse_of(moose), sea_bass) = True\nname(snail, Lola) = True\nnot show_cards(pig, canary) = True\n\nquestion = offer_job(starfish, caterpillar)\n"}, {"idx": 92, "response": "attack(halibut, green_fields_of(viperfish)) = True\nwink(phoenix, viperfish) = False\nnot raise_flag_of_peace(viperfish, spider) = rule2()\nraise_flag_of_peace(viperfish, spider) = False\nnot eat_food(viperfish, food_of(carp)) = rule1()\neat_food(viperfish, food_of(carp)) = False\nowes_money_to(carp, panda_bear) = rule1()\nowes_money_to(carp, panda_bear) = True\nquestion = True", "answer": 1, "code": "rule1() = not eat_food(viperfish, food_of(carp)) => owes_money_to(carp, panda_bear)\nrule2() = wink(phoenix, viperfish) & attack(halibut, green_fields_of(viperfish)) => not raise_flag_of_peace(viperfish, spider)\nrule3(something) = not raise_flag_of_peace(something, spider) => not eat_food(something, food_of(carp))\n\nattack(halibut, green_fields_of(viperfish)) = True\nwink(phoenix, viperfish) = False\n\nquestion = owes_money_to(carp, panda_bear)\n"}, {"idx": 93, "response": "not eat_food(tiger, food_of(halibut)) = True\ngive_magnifying_glass(tiger, sheep) = rule2()\ngive_magnifying_glass(tiger, sheep) == True\nneeds_support(zander, meerkat) = rule1()\nneeds_support(zander, meerkat) == True\nburn(warehouse_of(jellyfish), zander) = rule3()\nburn(warehouse_of(jellyfish), zander) == False\nquestion = False", "answer": -1, "code": "rule1() = give_magnifying_glass(something, sheep) => needs_support(zander, meerkat)\nrule2() = not eat_food(something, food_of(halibut)) => give_magnifying_glass(something, sheep)\nrule3() = needs_support(something, meerkat) => burn(warehouse_of(jellyfish), something)\n\nnot eat_food(tiger, food_of(halibut)) = True\n\nquestion = burn(warehouse_of(jellyfish), zander)\n"}, {"idx": 94, "response": "not prepare_armor(rabbit, octopus) = True\nprepare_armor(rabbit, octopus) == False\nowes_money_to(rabbit, snail) = True\nnot learn_basics_of_resource_management(rabbit, moose) = rule2(rabbit)\nlearn_basics_of_resource_management(rabbit, moose) == False\nknows(defensive_plans_of(goldfish), zander) = rule6()\nknows(defensive_plans_of(goldfish), zander) == True\nquestion = True", "answer": 1, "code": "rule1() = give(magnifying_glass, carp) => not show_cards(mosquito, moose)\nrule2(something) = not prepare_armor(something, octopus) & owes_money_to(something, snail) => not learn_basics_of_resource_management(something, moose)\nrule3() = wink_at(ferret, something) => not knows(defensive_plans_of(goldfish), zander)\nrule4() = not show_all_cards(mosquito, moose) & learn_elementary_resource_management(rabbit, moose) => wink_at(ferret, moose)\nrule5() = has(rabbit, card_with(color_in_flag_of_france)) => learn_elementary_resource_management(rabbit, moose)\nrule6() = respects(cockroach, zander) => knows(defensive_plans_of(goldfish), zander)\nrule7() = not has(rabbit, keys) => learn_basics_of_resource_management(rabbit, moose)\norder(rule5) > order(rule2) = True\norder(rule6) > order(rule3) = True\norder(rule7) > order(rule2) = True\n\nname(kiwi, Beauty) = True\nname(mosquito, Buddy) = True\npark_bike(mosquito, in_front_of(store)) = True\nhas(rabbit, card_with(white_color)) = True\nhas(rabbit, keys) = True\nowes_money_to(rabbit, snail) = True\ngive(tiger, magnifier, carp) = True\nnot prepare_armor(rabbit, octopus) = True\n\nquestion = knows(defensive_plans_of(goldfish), zander)\n"}, {"idx": 95, "response": "prepare_armor(hippopotamus, parrot) == True\nrespects(parrot, meerkat) = rule2()\nrespects(parrot, meerkat) == True\nquestion = True", "answer": 1, "code": "rule1() = has_high_salary(hippopotamus) => steal_points(hippopotamus, 5, raven)\nrule2() = prepare_armor(hippopotamus, parrot) => respects(parrot, meerkat)\nrule3() = has(hippopotamus, card) and color(card) in rainbow_colors => not attack(hippopotamus, green_fields_of(eel))\nrule4() = first_letter_of(name(hippopotamus)) == first_letter_of(name(squid)) => steal_points(hippopotamus, 5, raven)\nrule5(something) = not attack(something, green_fields_of(eel)) => respects(something, parrot)\n\nhas(hippopotamus, card_with(violet_color)) = True\nfriends(hippopotamus) = 12\nname(hippopotamus, Pablo) = True\nrecently_read(hippopotamus, high_quality_paper) = True\nname(squid, Peddi) = True\n\nquestion = respects(parrot, meerkat)\n"}, {"idx": 96, "response": "holds_same_points(ferret, spider) == True\nactual_enemy(turtle, salmon) = rule1()\nactual_enemy(turtle, salmon) == True\ninvented_time_machine(cockroach) == True\nproceed(cockroach, spot_right_after(spot_of(salmon))) = rule2()\nproceed(cockroach, spot_right_after(spot_of(salmon))) == True\nproceed(cockroach, spot_right_after(spot_of(salmon))) == True\nactual_enemy(turtle, salmon) == True\ngive_magnifying_glass(salmon, eel) = rule3()\ngive_magnifying_glass(salmon, eel) == True\ngive_magnifying_glass(salmon, eel) == True\nowes_money_to(salmon, koala) = rule9(salmon)\nowes_money_to(salmon, koala) == True\nquestion = True", "answer": 1, "code": "rule1() = holds_same_points(animal, spider) => actual_enemy(turtle, salmon)\nrule2() = created_time_machine(cockroach) => proceed(cockroach, spot_right_after(spot_of(salmon)))\nrule3() = proceed(cockroach, spot_right_after(spot_of(salmon))) & actual_enemy(turtle, salmon) => give_magnifying_glass(salmon, eel)\nrule4() = voted_for(buffalo, mayor) => attack_green_fields(buffalo, owner_is(jellyfish))\nrule5() = rolls_dice_for(animal, goldfish) => not actual_enemy(animal, salmon)\nrule6() = offers_job_position(animal, meerkat) => not proceed(cockroach, spot_right_after(spot_of(salmon)))\nrule7() = first_letter_of(name(buffalo)) == first_letter_of(name(hare)) => attack_green_fields(buffalo, owner_is(jellyfish))\nrule8() = attack_green_fields(animal, owner_is(jellyfish)) => actual_enemy(salmon, penguin)\nrule9(something) = give_magnifier(something, eel) & actual_enemy(something, penguin) => owes_money_to(something, koala)\norder(rule5) > order(rule1) = True\norder(rule6) > order(rule2) = True\n\nassassinated(buffalo, mayor) = True\nname(buffalo, Lily) = True\ninvented_time_machine(cockroach) = True\nenemy(eagle, crocodile) = True\nholds_same_points(ferret, spider) = True\nname(hare, Lola) = True\n\nquestion = owes_money_to(salmon, koala)\n"}, {"idx": 97, "response": "eats_food(octopus, moose) == True\nhas(octopus, card_with(black_color)) == True\ngive_magnifying_glass(octopus, eel) = rule2()\ngive_magnifying_glass(octopus, eel) == True\ngive_magnifying_glass(octopus, eel) == True\nnot owes_money_to(octopus, mosquito) = rule1()\nowes_money_to(octopus, mosquito) == False\nlearns_basics_of_resource_management(octopus, squirrel) == True\nowes_money_to(pig, sea_bass) == True\nneeds_support(pig, donkey) = rule3()\nneeds_support(pig, donkey) == True\nnot owes_money_to(pig, mosquito) = rule1()\nowes_money_to(pig, mosquito) == False\ngive_magnifying_glass(pig, eel) = rule4()\ngive_magnifying_glass(pig, eel) == True\ngive_magnifying_glass(pig, eel) == True\nknows_defense_plan_of(cat, pig) = rule4()\nknows_defense_plan_of(cat, pig) == True\nknock_down(elephant, fortress_of(cat)) = rule6()\nknock_down(elephant, fortress_of(cat)) == True\nknock_down(elephant, fortress_of(cat)) == True\nknows_defense_plan_of(octopus, cat) == True\nwink(cat, baboon) = rule5()\nwink(cat, baboon) == False\nquestion = False", "answer": -1, "code": "rule1() = learns_basics_of_resource_management(something, squirrel) => not owes_money_to(something, mosquito)\nrule2() = has(octopus, card_with(color)) & color in colors_of_Belgium_flag => give_magnifying_glass(octopus, eel)\nrule3() = owes_money_to(something, sea_bass) => needs_support(something, donkey)\nrule4() = not owes_money_to(something, mosquito) & give_magnifying_glass(something, eel) => knows_defense_plan_of(cat, something)\nrule5() = knock_down(elephant, fortress_of(cat)) & knows_defense_plan_of(octopus, cat) => not wink(cat, baboon)\nrule6() = needs_support(something, donkey) => knock_down(elephant, fortress_of(cat))\n\neats_food(octopus, moose) = True\nhas(octopus, card_with(black_color)) = True\nlearns_basics_of_resource_management(octopus, squirrel) = True\nhas(pig, card_with(white_color)) = True\nstole(pig, bike_from(store)) = True\nowes_money_to(pig, sea_bass) = True\n\nquestion = wink(cat, baboon)\n"}, {"idx": 98, "response": "learn_basics_of_resource_management(puffin, meerkat) == False\nnot learn_basics_of_resource_management(puffin, meerkat) == True\nlearn_elementary_resource_management(meerkat, tiger) == True\nnot learn_elementary_resource_management(puffin, meerkat) == False\nadd_conclusion(\"the tiger attacks the green fields of the raven\") = rule2()\n\"the tiger attacks the green fields of the raven\" in conclusions == True\nquestion = True", "answer": 1, "code": "rule1() = not learn_basics_of_resource_management(puffin, meerkat) => learn_elementary_resource_management(meerkat, tiger)\nrule2() = belief(catfish_rolls_dice_for(tiger)) & learn_elementary_resource_management(meerkat, tiger) => add_conclusion(\"the tiger attacks the green fields of the raven\")\nrule3() = owes_money_to(something, hare) => needs_support(lion, wolverine)\nrule4() = first_letter_of(name(lion)) == first_letter_of(name(dog)) => not needs_support(lion, wolverine)\nrule5() = fan_of(lion, Chris_Ronaldo) => not needs_support(lion, wolverine)\nrule6() = killed(puffin, mayor) => learn_basics_of_resource_management(puffin, meerkat)\nrule7() = has(catfish, drink) => not raise_flag_of_peace(catfish, lobster)\nrule8(something) = not knock_down(something, fortress_of(mosquito)) & not raise_flag_of_peace(something, lobster) => roll_dice(something, tiger)\nrule9() = first_letter_of(name(catfish)) == first_letter_of(name(penguin)) => not knock_down(catfish, fortress_of(mosquito))\nrule10() = friends(catfish) > 3 => not knock_down(catfish, fortress_of(mosquito))\nrule11() = knock_down(fortress_of(cow), something) => not learn_elementary_resource_management(puffin, meerkat)\norder(rule4) > order(rule3) = True\norder(rule5) > order(rule3) = True\norder(rule6) > order(rule11) = True\n\nfriends(catfish) = 12\nname(catfish, Casper) = True\nhas(catfish, cappuccino) = True\nhates(lion, Chris_Ronaldo) = True\nname(lion, Pablo) = True\nowes_money_to(meerkat, hare) = True\nname(penguin, Buddy) = True\nkilled(puffin, mayor) = True\n\nquestion = \"the tiger attacks the green fields of the raven\" in conclusions\n"}, {"idx": 99, "response": "name(aardvark, Tarzan) == True\nname(snail, Tango) == True\nfirst_letter_of(name(aardvark)) == first_letter_of(name(snail)) == True\nraise_flag_of_peace(aardvark, carp) = rule1()\nraise_flag_of_peace(aardvark, carp) == True\nfriends(eel, adventurous) + friends(eel, not adventurous) = 5 + 4 = 9\nfriends(eel) < 15 == True\nnot wink_at(eel, carp) = rule2()\nnot wink_at(eel, carp) == True\neat_food(carp, food_of(tiger)) = rule4()\neat_food(carp, food_of(tiger)) == True\nlearn_basics_of_resource_management(tiger, doctorfish) = rule3()\nlearn_basics_of_resource_management(tiger, doctorfish) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(aardvark)) == first_letter_of(name(snail)) => raise_flag_of_peace(aardvark, carp)\nrule2() = friends(eel) < 15 => not wink_at(eel, carp)\nrule3() = eat_food(carp, food_of(tiger)) => learn_elementary_resource_management(tiger, squid)\nrule4() = wink_at(eel, carp) & raise_flag_of_peace(aardvark, carp) => eat_food(carp, food_of(tiger))\nrule5(something) = not needs_support(something, jellyfish) & learn_basics_of_resource_management(something, doctorfish) => wink_at(something, carp)\norder(rule5) > order(rule2) = True\n\nname(aardvark, Tarzan) = True\nfriends(eel, adventurous) = 5\nfriends(eel, not adventurous) = 4\nlearn_basics_of_resource_management(eel, doctorfish) = True\nnot needs_support(eel, jellyfish) = True\nname(snail, Tango) = True\n\nquestion = learn_elementary_resource_management(tiger, squid)\n"}, {"idx": 100, "response": "name(cheetah, Pablo) == True\nname(pig, Max) == True\nfirst_letter_of(name(cheetah)) == first_letter_of(name(pig)) == True\nsing_song(cheetah, victory_song_for(hare)) = rule1()\nsing_song(cheetah, victory_song_for(hare)) == True\nsing_song(cheetah, victory_song_for(hare)) == True\nnot remove(cheetah, piece_of(bat)) = rule2()\nnot remove(cheetah, piece_of(bat)) == False\nnot remove(cheetah, piece_of(bat)) == False\nnot attack(cheetah, green_fields_of(tiger)) = rule4()\nnot attack(cheetah, green_fields_of(tiger)) == True\nnot attack(cheetah, green_fields_of(tiger)) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(cheetah)) == first_letter_of(name(pig)) => sing_song(cheetah, victory_song_for(hare))\nrule2() = sing_song(something, victory_song_for(hare)) => not remove(something, piece_of(bat))\nrule3() = friends(cheetah) > 9 => sing_song(cheetah, victory_song_for(hare))\nrule4() = not remove(something, piece_of(bat)) => not attack(something, green_fields_of(tiger))\n\nfriends(cheetah) = 19\nname(cheetah, Pablo) = True\nname(pig, Max) = True\n\nquestion = attack(cheetah, green_fields_of(tiger))\n"}, {"idx": 101, "response": "has(gecko, something_to_drink) == True\nrespects(gecko, panther) = rule1()\nrespects(gecko, panther) == True\nrespects(gecko, panther) == True\ngive_magnifier(buffalo, eel) = rule2()\ngive_magnifier(buffalo, eel) == True\ngive_magnifier(buffalo, eel) == True\ngive_magnifying_glass(something, canary) = rule3()\ngive_magnifying_glass(something, canary) == True\ngive_magnifying_glass(something, canary) == True\nquestion = False", "answer": -1, "code": "rule1() = has(gecko, something_to_drink) => respects(gecko, panther)\nrule2() = respects(something, panther) => give_magnifier(buffalo, eel)\nrule3() = sing_song(something, victory_song_for(eel)) => give_magnifying_glass(something, canary)\nrule4() = first_letter_of(name(gecko)) == first_letter_of(name(amberjack)) => respects(gecko, panther)\n\nname(amberjack, Beauty) = True\nhas(gecko, trumpet) = True\nname(gecko, Buddy) = True\n\nquestion = give_magnifier(buffalo, canary)\n"}, {"idx": 102, "response": "not prepare_armor(dog, swordfish) = rule2()\nprepare_armor(dog, swordfish) == False\nsteal_points(dog, 5, carp) = rule4(dog)\nsteal_points(dog, 5, carp) == False\nrespects(gecko, dog) = rule5()\nrespects(gecko, dog) == False\nquestion = False", "answer": -1, "code": "rule1() = not raise_flag_of_peace(penguin, gecko) => steal_points(gecko, 5, sheep)\nrule2() = sing_song(elephant, victory_song_for(dog)) => not prepare_armor(dog, swordfish)\nrule3() = steal_points(something, 5, koala) => burn(warehouse_of(tilapia), jellyfish)\nrule4(something) = not prepare_armor(something, swordfish) => not steal_points(something, 5, carp)\nrule5() = respects(gecko, dog) => steal_points(dog, 5, carp)\nrule6() = knock_down_fortress(something, fortress_of(eagle)) => not sing_song(elephant, victory_song_for(dog))\nrule7() = has(elephant, leafy_green_vegetable) => sing_song(elephant, victory_song_for(dog))\nrule8(device) = has(gecko, connect_to_internet(device)) => not learn_basics_of_resource_management(gecko, whale)\nrule9() = friends(elephant) > 13 => sing_song(elephant, victory_song_for(dog))\nrule10() = burn(warehouse_of(tilapia), something) => respects(gecko, dog)\norder(rule5) > order(rule4) = True\norder(rule6) > order(rule7) = True\norder(rule6) > order(rule9) = True\n\nhas(elephant, romaine_lettuce) = True\nfriends(elephant, smart) = 2\nfriends(elephant, not_smart) = 3\nhas(gecko, cell_phone) = True\nname(gecko, Buddy) = True\nsteal_points(sheep, 5, koala) = True\nname(snail, Bella) = True\nnot raise_flag_of_peace(penguin, gecko) = True\n\nquestion = steal_points(dog, 5, carp)\n"}, {"idx": 103, "response": "has(kudu, leafy_green_vegetable) == True\nknows(defensive_plans_of(catfish), kudu) = rule1()\nknows(defensive_plans_of(catfish), kudu) == True\nknows(defensive_plans_of(catfish), kudu) == True\neat_food(kudu, food_of(dog)) = rule2()\neat_food(kudu, food_of(dog)) == False\nnot equal_points(dog, rabbit) = rule2()\nequal_points(dog, rabbit) == False\nattack(green_fields_of(cat), kudu) == True\nowes_money_to(kudu, donkey) = rule5()\nowes_money_to(kudu, donkey) == True\nowes_money_to(kudu, donkey) == True\neat_food(kudu, food_of(dog)) = rule6(kudu)\neat_food(kudu, food_of(dog)) == True\neat_food(kudu, food_of(dog)) == True\nquestion = False", "answer": -1, "code": "rule1() = has(kudu, leafy_green_vegetable) => knows(defensive_plans_of(catfish), kudu)\nrule2() = eat_food(kudu, food_of(dog)) => not equal_points(dog, rabbit)\nrule3(something) = burn(warehouse_of(aardvark), something) => not eat_food(something, food_of(dog))\nrule4() = has(kudu, something_to_sit_on) => knows(defense_plan_of(catfish), kudu)\nrule5(something) = attack(green_fields_of(cat), something) => owes_money_to(something, donkey)\nrule6(something) = owes_money_to(something, donkey) & knows(defensive_plans_of(catfish), something) => eat_food(something, food_of(dog))\norder(rule3) > order(rule6) = True\n\nattack(green_fields_of(cat), kudu) = True\nhas(kudu, plastic_bag) = True\nhas(kudu, bench) = True\n\nquestion = equal_points(dog, rabbit)\n"}, {"idx": 104, "response": "struggles_to_find_food(cow) == True\nnot roll_dice(buffalo, kangaroo) = rule4()\nroll_dice(buffalo, kangaroo) == False\nnot attack_green_fields(buffalo, hippopotamus) = rule5()\nattack_green_fields(buffalo, hippopotamus) == False\nquestion = True", "answer": 1, "code": "rule1() = burn(warehouse_of(buffalo), cow) => roll_dice(buffalo, kangaroo)\nrule2() = first_letter_of(name(cow)) == first_letter_of(name(tilapia)) => burn(warehouse_of(buffalo), cow)\nrule3() = friends(cow) > 10 => burn(warehouse_of(buffalo), cow)\nrule4(something) = not roll_dice(something, kangaroo) => steal_points(something, 5, oscar)\nrule5(something) = not attack_green_fields(something, hippopotamus) => not steal_points(something, 5, oscar)\norder(rule5) > order(rule4) = True\n\nfriends(cow) = 20\nstruggles_to_find_food(cow) = True\nname(cow, Peddi) = True\nname(tilapia, Milo) = True\n\nquestion = steal_points(buffalo, 5, oscar)\n"}, {"idx": 105, "response": "friends(amberjack) = 19\nfriends(amberjack) > 9 = True\ngive(amberjack, magnifier, tiger) = rule1()\ngive(amberjack, magnifier, tiger) == True\nroll_dice_for(donkey, aardvark) = rule3(donkey)\nroll_dice_for(donkey, aardvark) == True\nknock_down(fortress_of(donkey)) = rule2(donkey)\nknock_down(fortress_of(donkey)) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(amberjack) > 9 => give(amberjack, magnifier, tiger)\nrule2(something) = roll_dice_for(something, aardvark) => knock_down(fortress_of(donkey))\nrule3(something) = give(something, magnifier, tiger) => roll_dice_for(something, aardvark)\n\nfriends(amberjack) = 19\ninvented(amberjack, time_machine) = True\n\nquestion = knock_down(fortress_of(donkey))\n"}, {"idx": 106, "response": "question = unknown", "answer": 0, "code": "rule1() = knows(defense_plan_of(lion), something) => not give_magnifier(something, cheetah)\nrule2(something) = knows(defense_plan_of(blobfish), something) => give_magnifier(something, cheetah)\nrule3(something) = give_magnifier(something, cheetah) & remove(something, piece_of(wolverine)) => show_cards(something, puffin)\nrule4() = remove(pig, piece_of(salmon)) => prepare_armor(salmon, amberjack)\nrule5() = friends(canary) < 4 => not eat_food(canary, panther)\nrule6(something) = remove(something, piece_of(baboon)) => not prepare_armor(something, amberjack)\nrule7() = burn(warehouse_of(canary), kiwi) => eat_food(canary, panther)\nrule8() = prepare_armor(_, amberjack) => prepare_armor(kudu, puffin)\nrule9() = show_cards(parrot, puffin) & prepare_armor(kudu, puffin) => not learn_basics_of_resource_management(puffin, buffalo)\nrule10() = respects(black_bear, parrot) => remove(parrot, piece_of(wolverine))\nrule11(something) = respects(something, starfish) => not prepare_armor(something, puffin)\norder(rule1) > order(rule2) = True\norder(rule11) > order(rule8) = True\norder(rule5) > order(rule7) = True\norder(rule6) > order(rule4) = True\n\nrespects(black_bear, parrot) = True\nburn(warehouse_of(canary), kiwi) = True\nknows(defense_plan_of(blobfish), parrot) = True\nremove(pig, piece_of(salmon)) = True\n\nquestion = learn_basics_of_resource_management(puffin, buffalo)\n"}, {"idx": 107, "response": "has_difficulty_finding_food(spider) == False\nnot offers_job_position(spider, cricket) = rule4()\noffers_job_position(spider, cricket) == False\nprepare_armor(spider, carp) == True\noffers_job_position(spider, cricket) == False\nnot knock_down(fortress_of(zander), spider) = rule7()\nknock_down(fortress_of(zander), spider) == False\nlearns_basics_of_resource_management(kudu, zander) = rule2()\nlearns_basics_of_resource_management(kudu, zander) == False\nnever_attack(zander, green_fields_of(meerkat)) = rule7()\nnever_attack(zander, green_fields_of(meerkat)) == True\nnever_attack(zander, green_fields_of(meerkat)) == True\nquestion = True", "answer": 1, "code": "rule1() = learns_basics_of_resource_management(something, buffalo) => attack(zander, green_fields_of(meerkat))\nrule2() = offers_job_position(something, cricket) => not learns_basics_of_resource_management(kudu, zander)\nrule3() = eats_food_of(something, dog) => not learns_elementary_resource_management(pig, buffalo)\nrule4() = has_difficulty_finding_food(spider) => not offers_job_position(spider, cricket)\nrule5() = prepare_armor(something, carp) => offers_job_position(something, cricket)\nrule6() = respects(something, baboon) => not learns_elementary_resource_management(something, octopus)\nrule7() = not knock_down(fortress_of(zander), spider) & not learns_basics_of_resource_management(kudu, zander) => never_attack(zander, green_fields_of(meerkat))\nrule8() = has(spider, sharp_object) => not offers_job_position(spider, cricket)\nrule9() = show_all_cards(something, catfish) & not learns_elementary_resource_management(something, octopus) => learns_basics_of_resource_management(something, buffalo)\nrule10() = has(pig, connect_to_internet(device)) => show_all_cards(pig, catfish)\norder(rule5) > order(rule4) = True\norder(rule5) > order(rule8) = True\norder(rule7) > order(rule1) = True\norder(rule9) > order(rule3) = True\n\nenemy(pig, baboon) = True\npurchased(pig, luxury_aircraft) = True\nhas(pig, cell_phone) = True\nname(pig, Buddy) = True\nname(snail, Cinnamon) = True\nhas(spider, basket) = True\nprepare_armor(spider, carp) = True\nnot show_all_cards(panda_bear, hummingbird) = True\n\nquestion = attack(zander, green_fields_of(meerkat))\n"}, {"idx": 108, "response": "steal_points(aardvark, 5, ferret) == True\ngive(grizzly_bear, magnifying_glass, ferret) == True\nwink(baboon, squid) = rule2()\nwink(baboon, squid) == True\nwink(baboon, squid) == True\nknock_down(squid, fortress_of(leopard)) = rule1()\nknock_down(squid, fortress_of(leopard)) == True\nknock_down(squid, fortress_of(leopard)) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(baboon, squid) => knock_down(squid, fortress_of(leopard))\nrule2() = remove(something, piece_of(lion)) => wink(baboon, squid)\nrule3() = steal_points(aardvark, 5, ferret) & give(grizzly_bear, magnifying_glass, ferret) => remove(ferret, piece_of(lion))\n\nsteal_points(aardvark, 5, ferret) = True\ngive(grizzly_bear, magnifying_glass, ferret) = True\n\nquestion = knock_down(squid, fortress_of(leopard))\n"}, {"idx": 109, "response": "question = unknown", "answer": 0, "code": "rule1() = prepare_armor(buffalo, moose) => steal_points(moose, 5, cat)\nrule2() = owes_money_to(something, meerkat) => not steal_points(sea_bass, 5, canary)\nrule3(something) = not knock_down(something, fortress_of(pig)) => not steal_points(something, 5, cat)\nrule4(device) = has(moose, connect_to_internet(device)) => show_cards(moose, eagle)\nrule5() = steal_points(something, 5, cat) & show_cards(something, eagle) => owes_money_to(something, meerkat)\nrule6() = has(moose, carry_apples_and_oranges) => show_cards(moose, eagle)\nrule7() = owes_money_to(something, whale) => steal_points(something, 5, canary)\norder(rule3) > order(rule1) = True\norder(rule7) > order(rule2) = True\n\nprepare_armor(buffalo, moose) = True\nhas(moose, computer) = True\nhas(moose, violin) = True\nproceed(raven, spot_right_after(spot_of(moose))) = True\nnot sing_song(catfish, victory_song_for(moose)) = True\n\nquestion = steal_points(sea_bass, 5, canary)\n"}, {"idx": 110, "response": "reduce_work_hours(sun_bear) == True\nsteal_points(sun_bear, 5, elephant) = rule9()\nsteal_points(sun_bear, 5, elephant) == True\nsteal_points(sun_bear, 5, elephant) == True\nraise_flag_of_peace(sun_bear, octopus) = rule6()\nraise_flag_of_peace(sun_bear, octopus) == False\nneeds_support(bat, octopus) = rule11(bat)\nneeds_support(bat, octopus) == True\npoints(octopus) == points(turtle) = rule6()\npoints(octopus) == points(turtle) == True\nquestion = True", "answer": 1, "code": "rule1() = has(sun_bear, card_with(primary_color)) => steal_points(sun_bear, 5, elephant)\nrule2() = not learn_basics_of_resource_management(pig, sun_bear) => steal_points(sun_bear, 5, tiger)\nrule3() = friends(bat) < 11 => enemy(bat, ferret)\nrule4(something) = steal_points(something, 5, tiger) & steal_points(something, 5, elephant) => raise_flag_of_peace(something, octopus)\nrule5() = learn_basics_of_resource_management(something, carp) => not steal_points(something, 5, elephant)\nrule6() = raise_flag_of_peace(sun_bear, octopus) & needs_support(bat, octopus) => points(octopus) == points(turtle)\nrule7() = proceed(cricket, spot_right_after(spot_of(bat))) => not needs_support(bat, octopus)\nrule8() = sing_song(something, victory_song_for(jellyfish)) => not raise_flag_of_peace(something, octopus)\nrule9() = reduce_work_hours(sun_bear) => steal_points(sun_bear, 5, elephant)\nrule10() = first_letter_of(name(bat)) == first_letter_of(name(cricket)) => actual_enemy(bat, ferret)\nrule11(something) = enemy(something, ferret) => needs_support(something, octopus)\norder(rule5) > order(rule1) = True\norder(rule5) > order(rule9) = True\norder(rule7) > order(rule11) = True\norder(rule8) > order(rule4) = True\n\nfriends(bat) = 2\nhas_friend(bat, bald) = True\nhas_friend(bat, not_bald) = True\nname(bat, Teddy) = True\nname(cricket, Beauty) = True\nlearn_basics_of_resource_management(pig, sun_bear) = True\nhas(sun_bear, card_with(violet_color)) = True\nreduce_work_hours(sun_bear) = True\nnot proceed(bat, spot_right_after(spot_of(spider))) = True\n\nquestion = points(octopus) == points(turtle)\n"}, {"idx": 111, "response": "name(dog, Milo) == True\nname(zander, Max) == True\nfirst_letter_of(name(dog)) == first_letter_of(name(zander)) == True\nburn(warehouse_of(meerkat), dog) = rule5()\nburn(warehouse_of(meerkat), dog) == True\nburn(warehouse_of(meerkat), dog) == True\nenemy(octopus, hippopotamus) = rule1()\nenemy(octopus, hippopotamus) == True\nenemy(octopus, hippopotamus) == True\nquestion = True", "answer": 1, "code": "rule1() = enemy(something, wolverine) => not actual_enemy(octopus, hippopotamus)\nrule2(something) = burn(warehouse_of(meerkat), something) & not prepare_armor(something, leopard) => not knows_defensive_plans_of(octopus, something)\nrule3() = raise_flag_of_peace(bat, dog) => knows_defensive_plans_of(octopus, dog)\nrule4() = knock_down(fortress_of(gecko), something) => raise_flag_of_peace(bat, dog)\nrule5() = first_letter_of(name(dog)) == first_letter_of(name(zander)) => burn(warehouse_of(meerkat), dog)\nrule6() = knows_defensive_plans_of(octopus, dog) => enemy(octopus, hippopotamus)\norder(rule1) > order(rule6) = True\norder(rule2) > order(rule3) = True\n\nname(dog, Milo) = True\nknock_down(fortress_of(gecko), meerkat) = True\nname(zander, Max) = True\n\nquestion = enemy(octopus, hippopotamus)\n"}, {"idx": 112, "response": "not learn_basics_of_resource_management(leopard, doctorfish) = rule2()\nnot give_magnifier(cat, leopard) = rule1()\nnot steal_points(puffin, 5, cat) = rule4()\nfriends(puffin) = 6\nnot steal_points(puffin, 5, cat) = True\nnot give_magnifier(cat, leopard) = True\nnot learn_basics_of_resource_management(leopard, doctorfish) = True\nquestion = True", "answer": 1, "code": "rule1() = not steal_points(puffin, 5, cat) => not give_magnifier(cat, leopard)\nrule2() = not give_magnifier(cat, leopard) & points(carp) == points(leopard) => not learn_basics_of_resource_management(leopard, doctorfish)\nrule3() = proceed(something, spot_right_after(spot_of(tiger))) => not eat_food(cow, food_of(carp))\nrule4() = friends(puffin) < 8 => not steal_points(puffin, 5, cat)\nrule5() = first_letter_of(name(puffin)) == first_letter_of(name(octopus)) => not steal_points(puffin, 5, cat)\nrule6() = remove(viperfish, piece_of(leopard)) => learn_basics_of_resource_management(leopard, doctorfish)\nrule7(something) = remove(something, piece_of(whale)) & wink_at(something, turtle) => give_magnifier(something, leopard)\nrule8() = eat_food(cow, food_of(carp)) => points(carp) == points(leopard)\nrule9() = prepare_armor(something, rabbit) => not remove(cat, piece_of(whale))\nrule10() = learn_basics_of_resource_management(rabbit, cat) => remove(cat, piece_of(whale))\nrule11(something) = not wink_at(something, salmon) => eat_food(something, food_of(carp))\norder(rule3) > order(rule11) = True\norder(rule6) > order(rule2) = True\norder(rule7) > order(rule1) = True\norder(rule9) > order(rule10) = True\n\nname(octopus, Lola) = True\nfriends(puffin) = 6\nhas(puffin, keys) = True\nname(puffin, Milo) = True\nhas(puffin, card_with(red_color)) = True\nlearn_basics_of_resource_management(rabbit, cat) = True\nnot wink_at(cow, salmon) = True\n\nquestion = learn_basics_of_resource_management(leopard, doctorfish)\n"}, {"idx": 113, "response": "difficulty_finding_food(grizzly_bear) == True\nlearn_elementary_resource_management(grizzly_bear, donkey) = rule4()\nlearn_elementary_resource_management(grizzly_bear, donkey) == True\nlearn_elementary_resource_management(grizzly_bear, donkey) == True\nnot holds_equal_points_as(donkey, kangaroo) = rule9(donkey)\nholds_equal_points_as(donkey, kangaroo) == False\nneeds_support(donkey, dog) = rule8()\nneeds_support(donkey, dog) == True\noffer_job(donkey, cricket) = rule9(donkey)\noffer_job(donkey, cricket) == True\noffer_job(donkey, cricket) == True\nquestion = True", "answer": 1, "code": "rule1() = not owes_money_to(buffalo, caterpillar) => learn_elementary_resource_management(caterpillar, donkey)\nrule2(something) = eat_food(something, sheep) => points(something) == points(squid)\nrule3() = friends(grizzly_bear) > 4 => not learn_elementary_resource_management(grizzly_bear, donkey)\nrule4() = difficulty_finding_food(grizzly_bear) => learn_elementary_resource_management(grizzly_bear, donkey)\nrule5() = not learn_elementary_resource_management(caterpillar, donkey) & learn_elementary_resource_management(grizzly_bear, donkey) => points(donkey) == points(kangaroo)\nrule6() = remove(leopard, piece_of(donkey)) => not offer_job(donkey, cricket)\nrule7() = not raise_flag_of_peace(panther, caterpillar) => not learn_basics_of_resource_management(caterpillar, donkey)\nrule8() = holds_equal_points_as(something, squid) => needs_support(donkey, dog)\nrule9(something) = not holds_equal_points_as(something, kangaroo) & needs_support(something, dog) => offer_job(something, cricket)\norder(rule1) > order(rule7) = True\norder(rule4) > order(rule3) = True\norder(rule6) > order(rule9) = True\n\nname(crocodile, Paco) = True\nfriends(grizzly_bear) = 11\ndifficulty_finding_food(grizzly_bear) = True\nname(grizzly_bear, Tessa) = True\neat_food(salmon, sheep) = True\nnot raise_flag_of_peace(panther, caterpillar) = True\n\nquestion = offer_job(donkey, cricket)\n"}, {"idx": 114, "response": "has(buffalo, high_quality_paper) == True\nenemy(buffalo, zander) == True\nowes_money_to(zander, phoenix) = rule11()\nowes_money_to(zander, phoenix) == False\nowes_money_to(zander, phoenix) == False\nquestion = False", "answer": -1, "code": "rule1() = not burn(warehouse_of(dog), something) => wink_at(something, panda_bear)\nrule2() = learn(puffin, elementary_resource_management_from(zander)) & enemy(buffalo, zander) => not owes_money_to(zander, bat)\nrule3() = has(hare, drink) => burn(warehouse_of(meerkat), hare)\nrule4(something) = burn(warehouse_of(meerkat), something) => knows(defense_plan_of(zander), tilapia)\nrule5(something) = show_cards(something, ferret) => learn(puffin, elementary_resource_management_from(zander))\nrule6(something) = burn(warehouse_of(eel), something) => owes_money_to(zander, bat)\nrule7(something) = owes_money_to(something, cat) & not owes_money_to(something, bat) => owes_money_to(something, phoenix)\nrule8() = not has(hare, keys) => burn(warehouse_of(meerkat), hare)\nrule9() = has(buffalo, high_quality_paper) => enemy(buffalo, zander)\nrule10() = saw_roll_dice(something, caterpillar) => not owes_money_to(something, cat)\nrule11() = knows(defense_plan_of(zander), tilapia) => not owes_money_to(zander, phoenix)\nrule12(something) = wink_at(something, panda_bear) => owes_money_to(zander, cat)\norder(rule10) > order(rule12) = True\norder(rule6) > order(rule2) = True\norder(rule7) > order(rule11) = True\n\nhas(buffalo, high_quality_paper) = True\nhas(hare, card_with(white_color)) = True\nhas(hare, keys) = True\nhas(hare, hot_chocolate) = True\nshow_cards(whale, ferret) = True\nnot burn(warehouse_of(dog), koala) = True\nnot sing_song(leopard, victory_song_for(puffin)) = True\n\nquestion = owes_money_to(zander, phoenix)\n"}, {"idx": 115, "response": "roll_dice(turtle, polar_bear) = question\n", "answer": 0, "code": "rule1() = roll_dice(viperfish, eagle) => not prepare_armor(eagle, turtle)\nrule2() = prepare_armor(eagle, turtle) & burn(warehouse_of(turtle), squid) => not roll_dice(turtle, polar_bear)\nrule3(something) = roll_dice(something, baboon) => knows(defense_plan_of(black_bear), elephant)\nrule4() = prepare_armor(oscar, squid) => raise_flag_of_peace(squid, swordfish)\nrule5(something) = not eat_food_of(penguin, something) => not knows(defensive_plans_of(black_bear), something)\nrule6(something) = not proceed(something, spot_right_after(spot_of(whale))) => prepare_armor(something, turtle)\nrule7() = knock_down(fortress_of(squid), hippopotamus) => owes_money_to(squid, starfish)\nrule8() = has(eagle, something_to_sit_on) => proceed(eagle, spot_right_after(spot_of(whale)))\nrule9() = knows(defensive_plans_of(black_bear), something) => burn(warehouse_of(turtle), squid)\nrule10() = first_letter_of(name(squid)) == first_letter_of(name(buffalo)) => not raise_flag_of_peace(squid, swordfish)\nrule11() = has(eagle, card_with(color_starting_with(\"i\"))) => proceed(eagle, spot_right_after(spot_of(whale)))\nrule12() = friends(eagle) < 7 => not proceed(eagle, spot_right_after(spot_of(whale)))\norder(rule1) > order(rule6) = True\norder(rule10) > order(rule4) = True\norder(rule11) > order(rule12) = True\norder(rule5) > order(rule3) = True\norder(rule8) > order(rule12) = True\n\nfriends(eagle) = 5\nwise_friends(eagle) = 5\nnot_wise_friends(eagle) = 1\nhas(eagle, card_with(violet_color)) = True\nknock_down(fortress_of(squid), hippopotamus) = True\nprepare_armor(oscar, squid) = True\nroll_dice(spider, baboon) = True\nname(squid, Milo) = True\n\nquestion = roll_dice(turtle, polar_bear)\n"}, {"idx": 116, "response": "has(elephant, knife) == True\nnot offer_job(elephant, whale) == True\nname(elephant, Pashmak) == True\nremove(ferret, piece_of(viperfish)) == True\nname(hummingbird, Pablo) == True\nhas(kudu, card_with(orange_color)) == True\nknock_down(fortress_of(wolverine), tilapia) = rule4()\nknock_down(fortress_of(wolverine), tilapia) == True\nknock_down(fortress_of(wolverine), tilapia) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(elephant)) == first_letter_of(name(hummingbird)) => enemy(elephant, ferret)\nrule2() = needs_support(something, bat) => knows(defensive_plans_of(tilapia), cow)\nrule3() = owes_money_to(something, raven) => show_cards(something, tilapia)\nrule4() = not eat_food(something, food_of(blobfish)) => knock_down(fortress_of(wolverine), something)\nrule5() = learn_basics_of_resource_management(something, hippopotamus) => not eat_food(something, food_of(blobfish))\nrule6() = has(elephant, leafy_green_vegetable) => enemy(elephant, ferret)\nrule7() = friends(ferret) > 5 => not owes_money_to(ferret, raven)\nrule8() = enemy(something, ferret) => eat_food(tilapia, food_of(blobfish))\nrule9() = has(kudu, card_with(color_in(rainbow_colors))) => needs_support(kudu, bat)\nrule10() = needs_support(something, eel) => not needs_support(kudu, bat)\nrule11() = not offer_job(something, whale) & show_cards(something, puffin) => not enemy(something, ferret)\nrule12() = remove(something, piece_of(viperfish)) => owes_money_to(something, raven)\norder(rule1) > order(rule11) = True\norder(rule10) > order(rule9) = True\norder(rule5) > order(rule8) = True\norder(rule6) > order(rule11) = True\norder(rule7) > order(rule12) = True\n\nhas(elephant, knife) = True\nnot offer_job(elephant, whale) = True\nname(elephant, Pashmak) = True\nremove(ferret, piece_of(viperfish)) = True\nname(hummingbird, Pablo) = True\nhas(kudu, card_with(orange_color)) = True\n\nquestion = knock_down(fortress_of(wolverine), tilapia)\n"}, {"idx": 117, "response": "has(bat, card_with(violet_color)) == True\nnot proceed(bat, spot_right_after(spot_of(panda_bear)) = rule3()\nproceed(bat, spot_right_after(spot_of(panda_bear)) == False\nfriends(bat) = 16\nnot proceed(bat, spot_right_after(spot_of(panda_bear)) = rule8()\nproceed(bat, spot_right_after(spot_of(panda_bear)) == False\nsteal_points(panda_bear, 5, panther) = rule6()\nsteal_points(panda_bear, 5, panther) == True\nlearn_basics_of_resource_management(panda_bear, bat) = rule4()\nlearn_basics_of_resource_management(panda_bear, bat) == False\nneed_support(panda_bear, elephant) = rule7(panda_bear)\nneed_support(panda_bear, elephant) == True\nquestion = True", "answer": 1, "code": "rule1() = eats_food_of(something, lion) => learn_basics_of_resource_management(something, bat)\nrule2() = sing_song(cow, victory_song_for(panda_bear)) => eats_food_of(panda_bear, lion)\nrule3() = has(bat, card_with(primary_color)) => not proceed(bat, spot_right_after(spot_of(panda_bear)))\nrule4() = wink_at(something, leopard) => not learn_basics_of_resource_management(panda_bear, bat)\nrule5() = fan_of(squid, Chris_Ronaldo) => proceed(squid, spot_right_after(spot_of(panda_bear)))\nrule6() = proceed(squid, spot_right_after(spot_of(panda_bear))) & not proceed(bat, spot_right_after(spot_of(panda_bear))) => steal_points(panda_bear, 5, panther)\nrule7(something) = steal_points(something, 5, panther) & learn_basics_of_resource_management(something, bat) => need_support(something, elephant)\nrule8() = friends(bat) > 6 => not proceed(bat, spot_right_after(spot_of(panda_bear)))\norder(rule4) > order(rule1) = True\n\nhas(bat, card_with(violet_color)) = True\nfriends(bat) = 16\nsing_song(cow, victory_song_for(panda_bear)) = True\nenemy(hare, squid) = True\nsupports(squid, Chris_Ronaldo) = True\n\nquestion = need_support(panda_bear, elephant)\n"}, {"idx": 118, "response": "publish_high_quality_paper(amberjack) == True\nnot attack(amberjack, green_fields_of(zander)) = rule2()\nattack(amberjack, green_fields_of(zander)) == False\nname(amberjack, Beauty) == True\nname(black_bear, Buddy) == True\nfirst_letter_of(name(amberjack)) == first_letter_of(name(black_bear)) = rule3()\nfirst_letter_of(name(amberjack)) == first_letter_of(name(black_bear)) == True\nnot attack(amberjack, green_fields_of(zander)) == False\nnot attack(amberjack, green_fields_of(zander)) == False\nnot attack(amberjack, green_fields_of(zander)) == False\nnot offer_job(zander, kangaroo) = rule1()\noffer_job(zander, kangaroo) == False\noffer_job(zander, kangaroo) == False\nquestion = False", "answer": -1, "code": "rule1() = not attack(amberjack, green_fields_of(zander)) & remove(turtle, piece_of(zander)) => not offer_job(zander, kangaroo)\nrule2() = publish_high_quality_paper(amberjack) => not attack(amberjack, green_fields_of(zander))\nrule3() = first_letter_of(name(amberjack)) == first_letter_of(name(black_bear)) => not attack(amberjack, green_fields_of(zander))\nrule4() = publish_high_quality_paper(turtle) => remove(turtle, piece_of(zander))\nrule5(something) = needs_support(something, spider) => offer_job(zander, kangaroo)\nrule6() = knock_down(something, fortress_of(cricket)) => eat_food(lion, food_of(grizzly_bear))\nrule7(something) = offer_job(something, kangaroo) & not knows(defense_plan_of(kudu), something) => not owe_money_to(something, baboon)\nrule8() = steal_points(whale, 5, eagle) => needs_support(eagle, spider)\nrule9() = has(turtle, card_with(primary_color)) => remove(turtle, piece_of(zander))\nrule10() = eat_food(something, food_of(grizzly_bear)) => not knows(defense_plan_of(kudu), zander)\norder(rule5) > order(rule1) = True\n\nknock_down(aardvark, fortress_of(cricket)) = True\nfriends(amberjack) = 6\nfriends(amberjack, smart) = 3\nfriends(amberjack, not_smart) = 3\nname(amberjack, Beauty) = True\nread_high_quality_paper(amberjack) = True\nname(black_bear, Buddy) = True\nhas(turtle, card_with(white_color)) = True\npublish_high_quality_paper(turtle) = True\nsteal_points(whale, 5, eagle) = True\n\nquestion = owe_money_to(zander, baboon)\n"}, {"idx": 119, "response": "eat_food(black_bear, food_of(eel)) == True\nwink(eel, octopus) = rule5()\nwink(eel, octopus) == True\nwink(eel, octopus) == True\noffer_job_position(sun_bear, canary) = rule3()\noffer_job_position(sun_bear, canary) == True\noffer_job_position(sun_bear, canary) == True\nquestion = True", "answer": 1, "code": "rule1() = has(gecko, card_with(primary_color)) => wink(gecko, catfish)\nrule2() = wink(something, octopus) => not steal_points(something, 5, sun_bear)\nrule3() = needs_support(gecko, sun_bear) & not steal_points(eel, 5, sun_bear) => offer_job_position(sun_bear, canary)\nrule4() = wink(something, catfish) => needs_support(something, sun_bear)\nrule5() = eat_food(black_bear, food_of(eel)) => wink(eel, octopus)\nrule6() = took_bike(crocodile, store) => give_magnifier(crocodile, salmon)\n\neat_food(black_bear, food_of(eel)) = True\ntook_bike(crocodile, store) = True\nhas(gecko, card_with(violet_color)) = True\nrespects(moose, grasshopper) = True\n\nquestion = offer_job_position(sun_bear, canary)\n"}, {"idx": 120, "response": "points(buffalo) == points(mosquito) == True\nnot learn_basics_of_resource_management(buffalo, cheetah) == True\nsing_song(buffalo, victory_song_for(panda_bear)) = rule1(buffalo)\nsing_song(buffalo, victory_song_for(panda_bear)) == True\nnot knock_down(panda_bear, fortress_of(squid)) = rule3()\nnot knock_down(panda_bear, fortress_of(squid)) == True\nnot knock_down(panda_bear, fortress_of(squid)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = points(something) == points(mosquito) & not learn_basics_of_resource_management(something, cheetah) => sing_song(something, victory_song_for(panda_bear))\nrule2() = not knock_down(panda_bear, fortress_of(squid)) & not burn(warehouse_of(squid), kangaroo) => knows_defensive_plans(squid, meerkat)\nrule3() = sing_song(buffalo, victory_song_for(panda_bear)) => not knock_down(panda_bear, fortress_of(squid))\nrule4() = friends(dog) < 11 => attack(dog, green_fields_of(eel))\nrule5() = attack(something, green_fields_of(eel)) => not burn(warehouse_of(squid), kangaroo)\n\npoints(buffalo) == points(mosquito) = True\nnot learn_basics_of_resource_management(buffalo, cheetah) = True\nfriends(dog) = 9\nneeds_support(leopard, mosquito) = True\n\nquestion = knows_defensive_plans(squid, meerkat)\n"}, {"idx": 121, "response": "has(elephant, card_with(blue_color)) == True\nremove(elephant, piece_of(lion)) = rule3()\nremove(elephant, piece_of(lion)) == True\nroll_dice(lion, hippopotamus) = rule8()\nroll_dice(lion, hippopotamus) == True\nroll_dice(lion, hippopotamus) == True\npoints(tilapia) == points(lion) = rule5()\npoints(tilapia) == points(lion) == True\npoints(tilapia) == points(lion) == True\nnot burn(warehouse_of(lion)) = rule4()\nburn(warehouse_of(lion)) == False\nsing_song(lion, victory_song_for(polar_bear)) = rule6()\nsing_song(lion, victory_song_for(polar_bear)) == True\nsing_song(lion, victory_song_for(polar_bear)) == True\nnot sing_song(lion, victory_song_for(polar_bear)) = rule7()\nsing_song(lion, victory_song_for(polar_bear)) == False\nsing_song(lion, victory_song_for(polar_bear)) == False\nquestion = False", "answer": -1, "code": "rule1() = needs_support(something, parrot) => show_cards(something, canary)\nrule2() = sing_song(something, victory_song_for(polar_bear)) & roll_dice(something, hippopotamus) => not show_cards(something, canary)\nrule3() = has(elephant, card_with(color_starting_with(\"b\"))) => remove(elephant, piece_of(lion))\nrule4() = has(squid, leafy_green_vegetable) => not burn(warehouse_of(lion))\nrule5() = has(tilapia, leafy_green_vegetable) => points(tilapia) == points(lion)\nrule6() = points(tilapia) == points(lion) & not burn(warehouse_of(lion)) => sing_song(lion, victory_song_for(polar_bear))\nrule7() = eat(eel, food_of(lion)) => not sing_song(lion, victory_song_for(polar_bear))\nrule8() = remove(elephant, piece_of(lion)) => roll_dice(lion, hippopotamus)\norder(rule1) > order(rule2) = True\norder(rule7) > order(rule6) = True\n\nhas(elephant, card_with(blue_color)) = True\nhas(squid, card_with(blue_color)) = True\nhas(squid, spinach) = True\nhas(tilapia, spinach) = True\n\nquestion = show_cards(lion, canary)\n"}, {"idx": 122, "response": "friends(whale) = 13\nfriends(moose) = 17\nwink_at(moose, gecko) = question\norder(rule6) > order(rule11) = True\noffer_job_position(moose, sea_bass) = rule6(moose)\noffer_job_position(moose, sea_bass) == True\nrespects(moose, tilapia) = rule6(moose)\nrespects(moose, tilapia) == True\nnot wink_at(moose, gecko) = rule6(moose)\nwink_at(moose, gecko) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(whale) < 7 => not sing_song(whale, victory_song_for(moose))\nrule2() = has(whale, card) and color(card) in colors_of(flag_of_Italy) => sing_song(whale, victory_song_for(moose))\nrule3() = knock_down(fortress_of(leopard), fortress_of(moose)) & sing_song(whale, victory_song_for(moose)) => respects(moose, tilapia)\nrule4() = first_letter_of(name(whale)) == first_letter_of(name(cricket)) => not sing_song(whale, victory_song_for(moose))\nrule5() = friends(moose) > 7 => respects(moose, doctorfish)\nrule6(something) = offer_job_position(something, sea_bass) & respects(something, tilapia) => not wink_at(something, gecko)\nrule7() = has(whale, sharp_object) => sing_song(whale, victory_song_for(moose))\nrule8() = has(moose, something_to_sit_on) => not burn(warehouse_of(black_bear))\nrule9(something) = knock_down(fortress_of(carp), something) => knock_down(fortress_of(moose), something)\nrule10(something) = not burn(warehouse_of(black_bear), something) => proceed(something, spot_right_after(spot_of(eel)))\nrule11(something) = steal_points(something, 5, eel) => wink_at(something, gecko)\norder(rule2) > order(rule1) = True\norder(rule2) > order(rule4) = True\norder(rule6) > order(rule11) = True\norder(rule7) > order(rule1) = True\norder(rule7) > order(rule4) = True\n\nname(cricket, Lola) = True\nknock_down(fortress_of(leopard), fortress_of(carp)) = True\nfriends(moose) = 17\nhas(moose, couch) = True\nhas(whale, card_with(red_color)) = True\nhas(whale, hot_chocolate) = True\nfriends(whale) = 13\n\nquestion = wink_at(moose, gecko)\n"}, {"idx": 123, "response": "has(baboon, low_income_job) == True\nfriends(baboon) == 7\nfriends(baboon) < 12 == True\nproceed(baboon, spot_right_after(spot_of(spider))) = rule5()\nproceed(baboon, spot_right_after(spot_of(spider))) == True\nproceed(baboon, spot_right_after(spot_of(spider))) == True\nattack_green_fields(koala, owner_is(viperfish)) = rule6(koala)\nattack_green_fields(koala, owner_is(viperfish)) == True\nattack_green_fields(koala, owner_is(viperfish)) == True\nquestion = True", "answer": 1, "code": "rule1() = sing_song(something, victory_song_for(penguin)) => knows(defensive_plans_of(koala), whale)\nrule2() = reduce_work_hours(whale) => not knows(defense_plan_of(koala), whale)\nrule3() = proceed(something, spot_right_after(spot_of(spider))) => not show_cards(koala, cockroach)\nrule4() = knows(defensive_plans_of(koala), whale) => not give(koala, magnifying_glass, raven)\nrule5() = friends(baboon) < 12 => proceed(baboon, spot_right_after(spot_of(spider)))\nrule6(something) = not show_cards(something, cockroach) & not give(something, magnifying_glass, raven) => attack_green_fields(something, owner_is(viperfish))\norder(rule2) > order(rule1) = True\n\nhas(baboon, low_income_job) = True\nfriends(baboon) = 7\nhas(baboon, arugula) = True\nsing_song(panda_bear, victory_song_for(penguin)) = True\n\nquestion = attack_green_fields(koala, owner_is(viperfish))\n"}, {"idx": 124, "response": "name(moose, Pablo) == True\nname(wolverine, Lily) == True\nfirst_letter_of(name(moose)) == first_letter_of(name(wolverine)) == True\nknock_down(moose, fortress_of(gecko)) = rule1()\nknock_down(moose, fortress_of(gecko)) == True\nknock_down(moose, fortress_of(gecko)) == True\nowes_money_to(moose, panda_bear) == True\nnot knock_down(fortress_of(gecko), moose) = rule3()\nknock_down(fortress_of(gecko), moose) == False\nknock_down(fortress_of(gecko), moose) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(moose)) == first_letter_of(name(wolverine)) => knock_down(moose, fortress_of(gecko))\nrule2() = burn(warehouse_of(hummingbird), something) => not knows_defensive_plans(something, catfish)\nrule3() = owes_money_to(something, panda_bear) => not knock_down(fortress_of(gecko), something)\nrule4(something) = not knock_down(fortress_of(gecko), something) => burn(warehouse_of(hummingbird), something)\nrule5() = has(moose, card_with(color_starting_with(\"b\"))) => knock_down(moose, fortress_of(gecko))\norder(rule1) > order(rule3) = True\norder(rule5) > order(rule3) = True\n\nname(moose, Pablo) = True\nowes_money_to(moose, panda_bear) = True\nname(wolverine, Lily) = True\n\nquestion = knows_defensive_plans(moose, catfish)\n"}, {"idx": 125, "response": "not respects(doctorfish, goldfish) = rule1()\nrespects(doctorfish, goldfish) == False\nattack(green_fields_of(cheetah), doctorfish) = rule5()\nattack(green_fields_of(cheetah), doctorfish) == True\nattack(green_fields_of(cheetah), doctorfish) == True\noffer_job_position(doctorfish, lion) = rule8()\noffer_job_position(doctorfish, lion) == True\nremove(goldfish, piece_of(doctorfish)) = rule3()\nremove(goldfish, piece_of(doctorfish)) == True\nshow_cards(elephant, doctorfish) = rule11()\nshow_cards(elephant, doctorfish) == True\nshow_cards(elephant, doctorfish) == True\nnot enemy(doctorfish, kangaroo) = rule11()\nenemy(doctorfish, kangaroo) == False\nenemy(doctorfish, kangaroo) == False\nquestion = False", "answer": -1, "code": "rule1() = respects(something, baboon) => respects(something, goldfish)\nrule2(something) = attack(something, green_fields_of(cheetah)) & offer_job_position(something, lion) => enemy(something, kangaroo)\nrule3() = respects(tilapia, goldfish) => remove(goldfish, piece_of(doctorfish))\nrule4() = has(hummingbird, high_quality_paper) => points(hummingbird) == points(doctorfish)\nrule5() = not wink(cow, doctorfish) => attack(green_fields_of(cheetah), doctorfish)\nrule6() = has(hummingbird, card_with(primary_color)) => points(hummingbird) == points(doctorfish)\nrule7() = has(cow, card_with(color_in(rainbow_colors))) => not wink(cow, doctorfish)\nrule8() = rolls_dice_for(grizzly_bear, something) => offer_job_position(doctorfish, lion)\nrule9() = raise_flag_of_peace(penguin, cow) => wink(cow, doctorfish)\nrule10(something) = show_cards(something, ferret) => not respects(something, goldfish)\nrule11() = remove(goldfish, piece_of(doctorfish)) & show_cards(elephant, doctorfish) => not enemy(doctorfish, kangaroo)\nrule12() = show_cards(rabbit, carp) => rolls_dice_for(grizzly_bear, carp)\norder(rule10) > order(rule1) = True\norder(rule11) > order(rule2) = True\norder(rule7) > order(rule9) = True\n\nhas(hummingbird, card_with(violet_color)) = True\npublished(high_quality_paper, hummingbird) = True\nraise_flag_of_peace(penguin, cow) = True\nshow_cards(rabbit, carp) = True\nenemy(turtle, aardvark) = True\nnot wink(tilapia, baboon) = True\n\nquestion = enemy(doctorfish, kangaroo)\n"}, {"idx": 126, "response": "owes_money_to(puffin, aardvark) == True\npoints(aardvark) == points(octopus) = rule1()\npoints(aardvark) == points(octopus) == True\nfriends(cat) < 10 = rule2()\nfriends(cat) < 10 == True\nenemy(cat, octopus) == True\npoints(aardvark) == points(octopus) == True\nenemy(cat, octopus) & points(aardvark) == points(octopus) = rule5()\nenemy(cat, octopus) & points(aardvark) == points(octopus) == True\nnot respects(octopus, sheep) = rule5()\nrespects(octopus, sheep) == False\neat_food(sheep, parrot) = rule3()\neat_food(sheep, parrot) == True\nquestion = True", "answer": 1, "code": "rule1() = owes_money_to(puffin, aardvark) => points(aardvark) == points(octopus)\nrule2() = friends(cat) < 10 => enemy(cat, octopus)\nrule3() = not respects(octopus, sheep) => eat_food(sheep, parrot)\nrule4() = attack_green_fields(something, eagle) => not points(aardvark) == points(octopus)\nrule5() = enemy(cat, octopus) & points(aardvark) == points(octopus) => not respects(octopus, sheep)\norder(rule1) > order(rule4) = True\n\nattack_green_fields(canary, eagle) = True\nfriends(cat) = 3\nowes_money_to(puffin, aardvark) = True\n\nquestion = eat_food(sheep, parrot)\n"}, {"idx": 127, "response": "removes(puffin, piece_of(catfish)) == True\nnot prepare_armor(puffin, parrot) = rule3()\nprepare_armor(puffin, parrot) == False\nremoves(puffin, piece_of(viperfish)) = rule4(puffin)\nremoves(puffin, piece_of(viperfish)) == True\nsteals_points(puffin, 5, spider) = rule7()\nsteals_points(puffin, 5, spider) == True\nnot learn_elementary_resource_management(puffin, aardvark) = rule5()\nlearn_elementary_resource_management(puffin, aardvark) == False\nquestion = False", "answer": -1, "code": "rule1() = rolls_dice_for(something, rabbit) => wink_at(something, puffin)\nrule2() = sings_song(black_bear, victory_song_for(kiwi)) => not wink_at(kiwi, puffin)\nrule3() = removes(something, piece_of(catfish)) => not prepare_armor(something, parrot)\nrule4(something) = not prepare_armor(something, parrot) => removes(something, piece_of(viperfish))\nrule5(something) = removes(something, piece_of(viperfish)) & steals_points(something, 5, spider) => not learn_elementary_resource_management(something, aardvark)\nrule6() = burn(warehouse_of(puffin), wolverine) => not removes(puffin, piece_of(viperfish))\nrule7() = wink_at(kiwi, puffin) => steals_points(puffin, 5, spider)\norder(rule2) > order(rule1) = True\norder(rule6) > order(rule4) = True\n\nrolls_dice_for(kiwi, rabbit) = True\nremoves(puffin, piece_of(catfish)) = True\n\nquestion = learn_elementary_resource_management(puffin, aardvark)\n"}, {"idx": 128, "response": "has(kangaroo, something_to_drink) = rule1()\nhas(kangaroo, something_to_drink) == True\nrespects(kangaroo, bat) = not rule1()\nrespects(kangaroo, bat) == False\neats_food(octopus, food_of(kangaroo)) = rule4()\neats_food(octopus, food_of(kangaroo)) == True\nrespects(kangaroo, bat) == True\nknows(defense_plan_of(panther), something) = rule5()\nknows(defense_plan_of(panther), something) == True\nrespects(kangaroo, salmon) = not rule2(something)\nrespects(kangaroo, salmon) == False\npoints(kangaroo) == points(halibut) = rule6(kangaroo)\npoints(kangaroo) == points(halibut) == True\nquestion = True", "answer": 1, "code": "rule1() = has(kangaroo, something_to_drink) => not respects(kangaroo, bat)\nrule2(something) = respects(something, bat) & not roll_dice(something, carp) => not respects(something, salmon)\nrule3(something) = learns_basics_of_resource_management(something, tilapia) => remove(parrot, piece_of(octopus))\nrule4() = eats_food(octopus, food_of(kangaroo)) => respects(kangaroo, bat)\nrule5() = knows(defense_plan_of(panther), something) => respects(kangaroo, salmon)\nrule6(something) = not respects(something, salmon) => points(something) == points(halibut)\nrule7() = has(cheetah, connect_to_internet(device)) => learns_elementary_resource_management(cheetah, tilapia)\nrule8() = not roll_dice(wolverine, kangaroo) & give(gecko, magnifier, kangaroo) => not roll_dice(kangaroo, carp)\norder(rule1) > order(rule4) = True\norder(rule2) > order(rule5) = True\n\nhas(cheetah, cell_phone) = True\ngive(gecko, magnifier, kangaroo) = True\nhas(kangaroo, blade) = True\nhas(kangaroo, cappuccino) = True\neats_food(octopus, food_of(kangaroo)) = True\nnot roll_dice(wolverine, kangaroo) = True\n\nquestion = points(kangaroo) == points(halibut)\n"}, {"idx": 129, "response": "invented_time_machine(doctorfish, Buddy) == True\nshow_cards(doctorfish, snail) = rule5()\nshow_cards(doctorfish, snail) == True\nshow_cards(doctorfish, snail) == True\nrespects(leopard, snail) = rule2()\nrespects(leopard, snail) == True\nrespects(leopard, snail) == True\nraise_flag_of_peace(snail, cat) = rule4()\nraise_flag_of_peace(snail, cat) == True\nraise_flag_of_peace(snail, cat) == True\nburn(warehouse_of(parrot), gecko) = rule7()\nburn(warehouse_of(parrot), gecko) == True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(something, wolverine) => not raise_flag_of_peace(snail, cat)\nrule2() = first_letter_of(name(leopard)) == first_letter_of(name(kangaroo)) => respects(leopard, snail)\nrule3() = friends(doctorfish) < 11 => not show_cards(doctorfish, snail)\nrule4() = show_cards(doctorfish, snail) & respects(leopard, snail) => raise_flag_of_peace(snail, cat)\nrule5() = created_time_machine(doctorfish) => show_cards(doctorfish, snail)\nrule6() = friends(leopard) > 8 => respects(leopard, snail)\nrule7() = raise_flag_of_peace(something, cat) => burn(warehouse_of(parrot), gecko)\nrule8() = first_letter_of(name(doctorfish)) == first_letter_of(name(donkey)) => not show_cards(doctorfish, snail)\norder(rule1) > order(rule4) = True\norder(rule3) > order(rule5) = True\norder(rule8) > order(rule5) = True\n\ninvented_time_machine(doctorfish, Buddy) = True\nname(donkey, Casper) = True\nname(kangaroo, Beauty) = True\nfriends(leopard) = 13\nname(leopard, Lily) = True\n\nquestion = burn(warehouse_of(parrot), gecko)\n"}, {"idx": 130, "response": "not learn_elementary_resource_management(whale, kudu) = rule8(whale)\nlearn_elementary_resource_management(whale, kudu) == False\nneeds_support(whale, ferret) = rule3(whale)\nneeds_support(whale, ferret) == True\nnot sing_song(whale, victory_song_for(dog)) = rule8(whale)\nsing_song(whale, victory_song_for(dog)) == False\nquestion = False", "answer": -1, "code": "rule1() = proceed(something, spot_right_after(spot_of(buffalo))) => not sing_song(whale, victory_song_for(dog))\nrule2(something) = not needs_support(something, zander) => not owes_money_to(something, wolverine)\nrule3(something) = owes_money_to(something, wolverine) => needs_support(something, ferret)\nrule4() = enemy(something, oscar) => not needs_support(whale, ferret)\nrule5() = knows(defense_plan_of(rabbit), eel) & steal_points(koala, 5, rabbit) => proceed(rabbit, spot_right_after(spot_of(buffalo)))\nrule6() = not give_magnifying_glass(raven, whale) => owes_money_to(whale, wolverine)\nrule7() = points(polar_bear) == points(elephant) => not knows(defense_plan_of(whale), elephant)\nrule8(something) = needs_support(something, ferret) & not sing_song(something, victory_song_for(dog)) => not learn_elementary_resource_management(something, kudu)\norder(rule2) > order(rule6) = True\norder(rule4) > order(rule3) = True\n\nknows(defense_plan_of(rabbit), eel) = True\nsteal_points(koala, 5, rabbit) = True\npoints(polar_bear) == points(elephant) = True\nnot give_magnifying_glass(raven, whale) = True\n\nquestion = learn_elementary_resource_management(whale, kudu)\n"}, {"idx": 131, "response": "respect(kangaroo, donkey) == True\nnot respect(kangaroo, donkey) == False\npoints(donkey) == points(zander) == True\nnot needs_support(kangaroo, ferret) = rule6()\nneeds_support(kangaroo, ferret) == False\nneeds_support(kangaroo, ferret) == False\nrespect(donkey, squirrel) = rule1()\nrespect(donkey, squirrel) == False\nrespect(donkey, squirrel) == False\nneeds_support(kangaroo, squirrel) = rule4(kangaroo)\nneeds_support(kangaroo, squirrel) == True\nneeds_support(kangaroo, squirrel) == True\nenemy(squirrel, kiwi) = rule3()\nenemy(squirrel, kiwi) == True\nenemy(squirrel, kiwi) == True\nquestion = True", "answer": 1, "code": "rule1() = owes_money_to(something, tilapia) => not respect(donkey, squirrel)\nrule2() = points(ferret) == points(kangaroo) => not needs_support(kangaroo, ferret)\nrule3() = respect(donkey, squirrel) & needs_support(kangaroo, squirrel) => enemy(squirrel, kiwi)\nrule4(something) = needs_support(something, ferret) => needs_support(something, squirrel)\nrule5(something) = prepare_armor(something, wolverine) & points(something) == points(zander) => respect(something, squirrel)\nrule6() = has(kangaroo, sharp_object) => needs_support(kangaroo, ferret)\nrule7() = friends(donkey) > 5 => prepare_armor(donkey, wolverine)\nrule8() = not respect(kangaroo, donkey) => points(donkey) == points(zander)\nrule9() = has(kangaroo, card_with(color_in_flag_of_france)) => needs_support(kangaroo, ferret)\norder(rule1) > order(rule5) = True\norder(rule2) > order(rule6) = True\norder(rule2) > order(rule9) = True\n\nfriends(donkey) = 14\nhas(kangaroo, card_with(blue_color)) = True\nhas(kangaroo, knapsack) = True\nrespect(kangaroo, donkey) = True\n\nquestion = enemy(squirrel, kiwi)\n"}, {"idx": 132, "response": "has(polar_bear, card_with(indigo_color)) == True\nholds_same_points_as(polar_bear, canary) = rule4()\nholds_same_points_as(polar_bear, canary) == True\nsteal_points(polar_bear, rabbit, 5) = rule1()\nsteal_points(polar_bear, rabbit, 5) == True\nsteal_points(polar_bear, rabbit, 5) == True\nquestion = True", "answer": 1, "code": "rule1() = holds_same_points_as(something, canary) => steal_points(something, rabbit, 5)\nrule2() = friends(mosquito) > 1 => not offer_job(mosquito, polar_bear)\nrule3() = has(polar_bear, card) and color(card) in rainbow_colors => needs_support(polar_bear, eel)\nrule4() = offer_job(mosquito, polar_bear) => holds_same_points_as(polar_bear, canary)\nrule5() = not wink(something, cow) => not steal_points(something, rabbit, 5)\nrule6() = has(mosquito, card_with(color_starting_with(\"i\"))) => offer_job(mosquito, polar_bear)\nrule7() = friends(polar_bear) > 10 => not raise_flag_of_peace(polar_bear, sheep)\nrule8() = first_letter_of(name(polar_bear)) == first_letter_of(name(parrot)) => raise_flag_of_peace(polar_bear, sheep)\nrule9() = has_difficulty_finding_food(polar_bear) => not raise_flag_of_peace(polar_bear, sheep)\nrule10() = has(polar_bear, connect_to_internet(device)) => needs_support(polar_bear, eel)\nrule11() = raise_flag_of_peace(something, sheep) & needs_support(something, eel) => not holds_same_points_as(something, canary)\norder(rule2) > order(rule6) = True\norder(rule4) > order(rule11) = True\norder(rule5) > order(rule1) = True\norder(rule7) > order(rule8) = True\norder(rule9) > order(rule8) = True\n\nowes_money_to(buffalo, polar_bear) = True\nhas(mosquito, card_with(indigo_color)) = True\nname(parrot, Cinnamon) = True\nhas(polar_bear, card_with(indigo_color)) = True\nhas(polar_bear, knapsack) = True\nfriends(polar_bear) = 4\nname(polar_bear, Charlie) = True\n\nquestion = steal_points(polar_bear, rabbit, 5)\n"}, {"idx": 133, "response": "name(donkey, Beauty) == True\nfirst_letter_of(name(jellyfish)) == first_letter_of(name(donkey)) == True\noffer_job(jellyfish, squid) = rule3()\noffer_job(jellyfish, squid) == False\nknows_defense_plan(parrot, blobfish) = rule2()\nknows_defense_plan(parrot, blobfish) == False\nquestion = False", "answer": -1, "code": "rule1() = owns(jellyfish, luxury_aircraft) => offer_job(jellyfish, squid)\nrule2() = wink_at(something, buffalo) => not knows_defense_plan(parrot, blobfish)\nrule3() = first_letter_of(name(jellyfish)) == first_letter_of(name(donkey)) => not offer_job(jellyfish, squid)\nrule4() = has(jellyfish, card) and color(card) in colors_of(flag_of(Italy)) => offer_job(jellyfish, squid)\nrule5() = exists(animal) offer_job(animal, squid) => wink_at(cat, buffalo)\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule4) = True\n\nname(donkey, Beauty) = True\ndreamed_of(jellyfish, luxury_aircraft) = True\nhas(jellyfish, card_with(red_color)) = True\n\nquestion = knows_defense_plan(parrot, blobfish)\n"}, {"idx": 134, "response": "proceed(snail, spot_right_after(spot_of(pig))) == True\nnot remove(pig, piece_of(buffalo)) = rule1()\nremove(pig, piece_of(buffalo)) == False\nshow_cards(doctorfish, caterpillar) == True\nattack(doctorfish, green_fields_of(blobfish)) = rule4(doctorfish)\nattack(doctorfish, green_fields_of(blobfish)) == True\nattack(doctorfish, green_fields_of(blobfish)) == True\nnot raise_flag_of_peace(doctorfish, carp) = rule2(doctorfish)\nraise_flag_of_peace(doctorfish, carp) == False\nraise_flag_of_peace(doctorfish, carp) == False\nnot remove(doctorfish, piece_of(buffalo)) = rule3(doctorfish)\nremove(doctorfish, piece_of(buffalo)) == False\nknock_down(fortress_of(kangaroo), pig) = rule6()\nknock_down(fortress_of(kangaroo), pig) == True\nknock_down(fortress_of(kangaroo), pig) == True\nroll_dice(pig, carp) = rule3(pig)\nroll_dice(pig, carp) == True\nroll_dice(pig, carp) == True\nnot raise_flag_of_peace(doctorfish, carp) == False\nneeds_support(carp, baboon) = rule5()\nneeds_support(carp, baboon) == True\nquestion = True", "answer": 1, "code": "rule1() = proceed(snail, spot_right_after(spot_of(pig))) => not remove(pig, piece_of(buffalo))\nrule2(something) = attack(something, green_fields_of(blobfish)) => not raise_flag_of_peace(something, carp)\nrule3(something) = not remove(something, piece_of(buffalo)) & knock_down(fortress_of(kangaroo), something) => roll_dice(something, carp)\nrule4(something) = show_cards(something, caterpillar) => attack(something, green_fields_of(blobfish))\nrule5() = roll_dice(pig, carp) & not raise_flag_of_peace(doctorfish, carp) => needs_support(carp, baboon)\nrule6() = prepare_armor(doctorfish, pig) => knock_down(fortress_of(kangaroo), pig)\n\nshow_cards(doctorfish, caterpillar) = True\nnot prepare_armor(doctorfish, pig) = True\nproceed(snail, spot_right_after(spot_of(pig))) = True\n\nquestion = needs_support(carp, baboon)\n"}, {"idx": 135, "response": "reduce_work_hours(eagle) == True\nknows(defensive_plans_of(squid), eagle) = rule11()\nknows(defensive_plans_of(squid), eagle) == True\nknows(defensive_plans_of(squid), eagle) == True\nnot give(eagle, magnifying_glass, cheetah) = rule6(eagle)\ngive(eagle, magnifying_glass, cheetah) == False\nowes_money_to(jellyfish, cheetah) = rule9()\nowes_money_to(jellyfish, cheetah) == False\neat_food(cheetah, food_of(cockroach)) = rule9()\neat_food(cheetah, food_of(cockroach)) == True\neat_food(cheetah, food_of(cockroach)) == True\nquestion = True", "answer": 1, "code": "rule1() = sing_song(amberjack, victory_song_for(eagle)) => attack(eagle, green_fields_of(penguin))\nrule2() = not remove(something, piece_of(kiwi)) => remove(something, piece_of(phoenix))\nrule3() = friends(eagle) < 8 => knows(defensive_plans_of(squid), eagle)\nrule4() = proceed(something, spot_right_after(spot_of(eel))) => owes_money_to(something, cheetah)\nrule5() = killed(jellyfish, mayor) => proceed(jellyfish, spot_right_after(spot_of(eel)))\nrule6(something) = remove(something, piece_of(phoenix)) => not give(something, magnifying_glass, cheetah)\nrule7() = not has(black_bear, keys) => enemy(black_bear, jellyfish)\nrule8() = has(eagle, card_with(color_in(rainbow_colors))) => not remove(eagle, piece_of(phoenix))\nrule9() = not give(eagle, magnifier, cheetah) & owes_money_to(jellyfish, cheetah) => eat_food(cheetah, food_of(cockroach))\nrule10() = has(jellyfish, something_to_sit_on) => proceed(jellyfish, spot_right_after(spot_of(eel)))\nrule11() = reduce_work_hours(eagle) => knows(defensive_plans_of(squid), eagle)\norder(rule2) > order(rule8) = True\n\nsing_song(amberjack, victory_song_for(eagle)) = True\nhas(black_bear, keys) = False\nhas(eagle, card_with(indigo_color)) = True\nreduce_work_hours(eagle) = True\nnot remove(eagle, piece_of(kiwi)) = True\nfriends(eagle) = 9\nkilled(jellyfish, mayor) = True\nhas(jellyfish, piano) = True\nshow_cards(lion, eagle) = True\nremove(moose, piece_of(gecko)) = True\n\nquestion = eat_food(cheetah, food_of(cockroach))\n"}, {"idx": 136, "response": "has(hippopotamus, sharp_object) == False\noffer_job_position(hippopotamus, oscar) = rule1()\noffer_job_position(hippopotamus, oscar) == False\nhas(hot_chocolate, donkey) == True\nremove(donkey, piece_of(oscar)) = rule2() or rule3()\nremove(donkey, piece_of(oscar)) == True\nknows(defense_plan_of(gecko), oscar) = rule8()\nknows(defense_plan_of(gecko), oscar) == True\neat_food_of(grizzly_bear) = rule4()\neat_food_of(grizzly_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = has(hippopotamus, sharp_object) => not offer_job_position(hippopotamus, oscar)\nrule2() = has(drink, donkey) => remove(donkey, piece_of(oscar))\nrule3() = has(abundance_of(food), donkey) => remove(donkey, piece_of(oscar))\nrule4(something) = knows(defense_plan_of(gecko), something) & not give_magnifying_glass(something, turtle) => not eat_food_of(grizzly_bear)\nrule5() = first_letter_of(name(starfish)) == first_letter_of(name(wolverine)) => attack(starfish, green_fields_of(oscar))\nrule6() = attack(starfish, green_fields_of(oscar)) => not give_magnifying_glass(oscar, turtle)\nrule7() = fan_of(hippopotamus, Chris_Ronaldo) => offer_job_position(hippopotamus, oscar)\nrule8() = offer_job_position(hippopotamus, oscar) & remove(donkey, piece_of(oscar)) => knows(defense_plan_of(gecko), oscar)\norder(rule1) > order(rule7) = True\n\nhas(hot_chocolate, donkey) = True\nstruggles_to_find_food(donkey) = True\nsupports(hippopotamus, Chris_Ronaldo) = True\nname(starfish, Teddy) = True\nname(wolverine, Tango) = True\n\nquestion = eat_food_of(grizzly_bear)\n"}, {"idx": 137, "response": "knows(defensive_plans_of(bat), kudu) = rule4()\nknows(defensive_plans_of(bat), kudu) == True\nburn(warehouse_of(mosquito), parrot) = rule2()\nburn(warehouse_of(mosquito), parrot) == True\nburn(warehouse_of(mosquito), parrot) == True\nquestion = True", "answer": 1, "code": "rule1() = roll_dice(cockroach, starfish) => steal_points(starfish, 5, tiger)\nrule2() = knows(defensive_plans_of(bat), something) => burn(warehouse_of(mosquito), parrot)\nrule3(something) = knows(defensive_plans_of(tiger), something) => not knows(defense_plan_of(hummingbird), something)\nrule4() = burn(warehouse_of(kudu), zander) => knows(defensive_plans_of(bat), kudu)\nrule5(something) = knows(defensive_plans_of(hummingbird), something) & sing_song(something, victory_song_for(canary)) => not burn(warehouse_of(mosquito), something)\nrule6() = steal_points(something, 5, tiger) => knows(defensive_plans_of(hummingbird), parrot)\nrule7() = enemy(something, kangaroo) => burn(warehouse_of(kudu), zander)\nrule8() = raise_flag_of_peace(moose, phoenix) => attack(phoenix, green_fields_of(kudu))\nrule9() = friends(starfish) < 5 => not steal_points(starfish, 5, tiger)\nrule10() = owns(starfish, luxury_aircraft) => not steal_points(starfish, 5, tiger)\nrule11() = eat_food(leopard, food_of(hippopotamus)) => enemy(hippopotamus, kudu)\norder(rule1) > order(rule10) = True\norder(rule1) > order(rule9) = True\norder(rule2) > order(rule5) = True\norder(rule3) > order(rule6) = True\n\neat_food(leopard, food_of(hippopotamus)) = True\nraise_flag_of_peace(moose, phoenix) = True\nfriends(starfish) = 9\nroll_dice(cockroach, starfish) = False\nenemy(crocodile, kangaroo) = False\n\nquestion = burn(warehouse_of(mosquito), parrot)\n"}, {"idx": 138, "response": "friends(squirrel) = 1\nrespect(squirrel, tilapia) = rule6()\nrespect(squirrel, tilapia) == True\nrespect(squirrel, tilapia) == True\nroll_dice(salmon, cockroach) = rule8()\nroll_dice(salmon, cockroach) == True\nroll_dice(salmon, cockroach) == True\nrespect(zander, dog) = rule7()\nrespect(zander, dog) == True\nrespect(zander, dog) == True\nquestion = True", "answer": 1, "code": "rule1() = offer_job(something, spider) => not respect(squirrel, tilapia)\nrule2() = not steal_points(squirrel, salmon, 5) & points(raven) == points(salmon) => not roll_dice(salmon, cockroach)\nrule3() = first_letter_of(name(squirrel)) == first_letter_of(name(eel)) => respect(squirrel, tilapia)\nrule4() = enemy(something, oscar) => not steal_points(squirrel, salmon, 5)\nrule5() = has(squirrel, card_with(color_in_flag_of_france)) => steal_points(squirrel, salmon, 5)\nrule6() = friends(squirrel) < 1 => respect(squirrel, tilapia)\nrule7() = roll_dice(something, cockroach) => respect(zander, dog)\nrule8() = respect(something, tilapia) => roll_dice(salmon, cockroach)\norder(rule1) > order(rule3) = True\norder(rule1) > order(rule6) = True\norder(rule2) > order(rule8) = True\norder(rule4) > order(rule5) = True\n\nname(eel, Luna) = True\nenemy(sea_bass, oscar) = True\nhas(squirrel, card_with(white_color)) = True\nhas(squirrel, saxophone) = True\nname(squirrel, Lucy) = True\nfriends(squirrel) = 1\n\nquestion = respect(zander, dog)\n"}, {"idx": 139, "response": "friends(halibut) = 5\nholds_same_number_of_points(raven, carp) = unknown\nquestion = unknown", "answer": 0, "code": "rule1() = friends(halibut) < 8 => not knows(defense_plan_of(panther), halibut)\nrule2() = offer_job_position(baboon, rabbit) => not respects(rabbit, panther)\nrule3() = created_time_machine(panther) => not proceed(panther, spot_right_after(spot_of(oscar)))\nrule4() = enemy(panther, raven) => not holds_same_number_of_points(raven, carp)\nrule5() = took_bike(rabbit, store) => respects(rabbit, panther)\nrule6() = color_starts_with(halibut_card, \"e\") => not knows(defense_plan_of(panther), halibut)\nrule7() = has(rabbit, leafy_green_vegetable) => respects(rabbit, panther)\nrule8() = not knows(defense_plan_of(panther), halibut) & respects(rabbit, panther) => enemy(panther, raven)\nrule9(something) = not proceed(something, spot_right_after(spot_of(oscar))) & owes_money_to(something, buffalo) => not enemy(something, raven)\norder(rule2) > order(rule5) = True\norder(rule2) > order(rule7) = True\norder(rule9) > order(rule8) = True\n\nhas(halibut, card_with(yellow_color)) = True\nfriends(halibut) = 5\ncreated_time_machine(panther) = True\nhas(rabbit, romaine_lettuce) = True\nparked_bike(rabbit, store) = True\n\nquestion = holds_same_number_of_points(raven, carp)\n"}, {"idx": 140, "response": "friends(hummingbird) = 8\nfriends(hummingbird) < 17 = True\nburn(warehouse_of(canary)) = rule1()\nburn(warehouse_of(canary)) == True\nhas(hummingbird, musical_instrument) = rule2()\nhas(hummingbird, musical_instrument) == True\nburn(warehouse_of(canary)) == True\nnot eat_food_of(tilapia, leopard) = rule3(tilapia)\nnot eat_food_of(tilapia, leopard) == True\nprepare_armor(tilapia, doctorfish) = rule3(tilapia)\nprepare_armor(tilapia, doctorfish) == True\nraise_flag_of_peace(pig, tilapia) = rule6()\nraise_flag_of_peace(pig, tilapia) == True\nattack(canary, green_fields_of(tilapia)) = rule4()\nattack(canary, green_fields_of(tilapia)) == True\nlearn_elementary_resource_management(tilapia, tiger) = rule4()\nlearn_elementary_resource_management(tilapia, tiger) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(hummingbird) < 17 => burn(warehouse_of(canary))\nrule2() = has(hummingbird, musical_instrument) => burn(warehouse_of(canary))\nrule3(something) = not eat_food_of(something, leopard) => prepare_armor(something, doctorfish)\nrule4() = raise_flag_of_peace(pig, tilapia) & attack(canary, green_fields_of(tilapia)) => learn_elementary_resource_management(tilapia, tiger)\nrule5() = burn(warehouse_of(canary), hummingbird) => attack(canary, green_fields_of(tilapia))\nrule6() = prepare_armor(something, doctorfish) => raise_flag_of_peace(pig, tilapia)\n\ngive(bat, magnifier, hummingbird) = True\nhas(hummingbird, tablet) = True\nfriends(hummingbird) = 8\neat_food_of(swordfish, leopard) = True\n\nquestion = learn_elementary_resource_management(tilapia, tiger)\n"}, {"idx": 141, "response": "question = unknown", "answer": 0, "code": "rule1() = friends(leopard) > 9 => show_cards(leopard, carp)\nrule2() = not remove(oscar, piece_of(lion)) & not raise_flag_of_peace(spider, lion) => enemy(lion, squid)\nrule3() = first_letter_of(name(oscar)) == first_letter_of(name(spider)) => remove(oscar, piece_of(lion))\nrule4() = not eat_food(zander, food_of(tilapia)) => prepare_armor(tilapia, lion)\nrule5(something) = enemy(something, squid) & not remove(something, piece_of(dog)) => steal_points(something, 5, mosquito)\nrule6() = not roll_dice(something, starfish) => not prepare_armor(something, lion)\nrule7() = friends(spider) < 3 => raise_flag_of_peace(spider, lion)\nrule8() = has(oscar, connect_to_internet(device)) => remove(oscar, piece_of(lion))\nrule9() = has(spider, card_with(primary_color)) => not raise_flag_of_peace(spider, lion)\nrule10() = has_high_salary(leopard) => show_cards(leopard, carp)\nrule11() = has(spider, drink) => raise_flag_of_peace(spider, lion)\nrule12() = owns(spider, luxury_aircraft) => not raise_flag_of_peace(spider, lion)\nrule13(something) = roll_dice(something, wolverine) => not remove(something, piece_of(lion))\nrule14() = show_cards(something, carp) => not remove(lion, piece_of(dog))\norder(rule12) > order(rule11) = True\norder(rule12) > order(rule7) = True\norder(rule3) > order(rule13) = True\norder(rule6) > order(rule4) = True\norder(rule8) > order(rule13) = True\norder(rule9) > order(rule11) = True\norder(rule9) > order(rule7) = True\n\nname(carp, Cinnamon) = True\nhas_high_salary(leopard) = True\nfriends(leopard) = 1\nname(leopard, Chickpea) = True\nname(oscar, Charlie) = True\nroll_dice(oscar, wolverine) = True\nname(spider, Paco) = True\ndreamed(spider, luxury_aircraft) = True\nhas(spider, cappuccino) = True\nhas(spider, card_with(blue_color)) = True\nfriends(spider) = 12\nnot eat_food(zander, food_of(tilapia)) = True\n\nquestion = steal_points(lion, 5, mosquito)\n"}, {"idx": 142, "response": "name(puffin, Milo) == True\nname(wolverine, Meadow) == True\nfirst_letter_of(name(puffin)) == first_letter_of(name(wolverine)) == True\nproceed(puffin, spot_right_after(spot_of(jellyfish))) = rule1()\nproceed(puffin, spot_right_after(spot_of(jellyfish))) == True\nfriends(moose) < 12 = rule2()\nfriends(moose) < 12 == True\nremove(moose, piece_of(jellyfish)) = rule2()\nremove(moose, piece_of(jellyfish)) == True\nproceed(puffin, spot_right_after(spot_of(jellyfish))) == True\nremove(moose, piece_of(jellyfish)) == True\nnot give_magnifying_glass(jellyfish, halibut) = rule6()\nnot give_magnifying_glass(jellyfish, halibut) == True\nnot give_magnifying_glass(jellyfish, halibut) == True\nquestion = not offer_job_position(jellyfish, swordfish)\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(puffin)) == first_letter_of(name(wolverine)) => proceed(puffin, spot_right_after(spot_of(jellyfish)))\nrule2() = friends(moose) < 12 => remove(moose, piece_of(jellyfish))\nrule3() = friends(puffin) > 5 => proceed(puffin, spot_right_after(spot_of(jellyfish)))\nrule4() = wink(squirrel, grizzly_bear) => not remove(grizzly_bear, piece_of(jellyfish))\nrule5(something) = not give_magnifying_glass(something, halibut) & not sing_song(something, victory_song_for(canary)) => not offer_job_position(something, swordfish)\nrule6() = proceed(puffin, spot_right_after(spot_of(jellyfish))) & remove(moose, piece_of(jellyfish)) => not give_magnifying_glass(jellyfish, halibut)\nrule7() = enemy(tiger, grizzly_bear) => remove(grizzly_bear, piece_of(jellyfish))\nrule8() = remove(grizzly_bear, piece_of(jellyfish)) => not sing_song(jellyfish, victory_song_for(canary))\norder(rule4) > order(rule7) = True\n\nfriends(moose) = 7\nfriends(puffin) = 2\nhas_friend(puffin, playful) = True\nhas_friend(puffin, not_playful) = True\nname(puffin, Milo) = True\nenemy(tiger, grizzly_bear) = True\nname(wolverine, Meadow) = True\n\nquestion = offer_job_position(jellyfish, swordfish)\n"}, {"idx": 143, "response": "name(sun_bear, Tarzan) == True\nremove(sun_bear, piece_of(hummingbird)) = rule1()\nremove(sun_bear, piece_of(hummingbird)) == True\nknock_down_fortress(sun_bear, sea_bass) = rule1()\nknock_down_fortress(sun_bear, sea_bass) == True\nknock_down_fortress(sun_bear, sea_bass) == True\nquestion = True", "answer": 1, "code": "rule1() = remove(something, piece_of(hummingbird)) => knock_down_fortress(something, sea_bass)\nrule2() = has(sun_bear, drink) => not roll_dice(sun_bear, lobster)\nrule3() = has(sun_bear, card_with(primary_color)) => wink_at(sun_bear, polar_bear)\nrule4() = wink_at(something, polar_bear) & not roll_dice(something, lobster) => not remove(something, piece_of(hummingbird))\nrule5() = friends(sun_bear) < 2 => not roll_dice(sun_bear, lobster)\nrule6() = first_letter_of(name(sun_bear)) == first_letter_of(name(blobfish)) => wink_at(sun_bear, polar_bear)\n\nname(blobfish, Pashmak) = True\nfriends(sun_bear) = 11\nhas(sun_bear, beer) = True\nhas(sun_bear, card_with(blue_color)) = True\nname(sun_bear, Tarzan) = True\n\nquestion = knock_down_fortress(sun_bear, sea_bass)\n"}, {"idx": 144, "response": "prepare_armor(canary, kudu) = rule3()\nprepare_armor(canary, kudu) == True\nnot knock_down(fortress_of(canary), jellyfish) = rule4()\nknock_down(fortress_of(canary), jellyfish) == False\nshow_cards(canary, lobster) = rule1()\nshow_cards(canary, lobster) == True\nshow_cards(canary, lobster) == True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(something, kudu) => show_cards(something, lobster)\nrule2() = not needs_support(donkey, eagle) => proceed(eagle, spot_right_after(spot_of(canary)))\nrule3() = not knock_down(fortress_of(canary), jellyfish) => prepare_armor(canary, kudu)\nrule4() = reduce_work_hours(jellyfish) => knock_down(fortress_of(canary), jellyfish)\nrule5() = has(eagle, card_with(color_starting_with(\"r\"))) => not proceed(eagle, spot_right_after(spot_of(canary)))\nrule6(something) = raise_flag_of_peace(something, wolverine) & needs_support(something, kangaroo) => not knock_down(fortress_of(canary), something)\norder(rule4) > order(rule6) = True\norder(rule5) > order(rule2) = True\n\nneeds_support(jellyfish, kangaroo) = True\nraise_flag_of_peace(jellyfish, wolverine) = True\nnot needs_support(donkey, eagle) = True\n\nquestion = show_cards(canary, lobster)\n"}, {"idx": 145, "response": "has(puffin, card_with(primary_color)) == True\nraise_flag_of_peace(puffin, panda_bear) = rule10()\nraise_flag_of_peace(puffin, panda_bear) == True\nraise_flag_of_peace(puffin, panda_bear) == True\nnot show_cards(puffin, buffalo) = rule1(puffin)\nshow_cards(puffin, buffalo) == False\nshow_cards(puffin, buffalo) == False\nquestion = False", "answer": -1, "code": "rule1(something) = not burn(warehouse_of(blobfish), something) & show_cards(something, hippopotamus) => not show_cards(something, buffalo)\nrule2() = has(puffin, sharp_object) => raise_flag_of_peace(puffin, panda_bear)\nrule3() = not wink(carp, puffin) => not show_cards(puffin, hippopotamus)\nrule4(something) = show_cards(something, viperfish) => not burn(warehouse_of(blobfish), puffin)\nrule5(something) = not raise_flag_of_peace(something, panda_bear) => show_cards(something, hippopotamus)\nrule6() = fan_of(puffin, Chris_Ronaldo) => not raise_flag_of_peace(puffin, panda_bear)\nrule7() = first_letter_of(name(puffin)) == first_letter_of(name(hummingbird)) => not raise_flag_of_peace(puffin, panda_bear)\nrule8() = friends(blobfish) < 1 => show_cards(blobfish, viperfish)\nrule9() = has(blobfish, something_to_sit_on) => show_cards(blobfish, viperfish)\nrule10() = has(puffin, card_with(primary_color)) => raise_flag_of_peace(puffin, panda_bear)\norder(rule10) > order(rule6) = True\norder(rule10) > order(rule7) = True\norder(rule2) > order(rule6) = True\norder(rule2) > order(rule7) = True\norder(rule3) > order(rule5) = True\n\nhas(blobfish, club_chair) = True\nfriends(blobfish) = 7\nname(hummingbird, Paco) = True\nhas(puffin, club_chair) = True\nhates(puffin, Chris_Ronaldo) = True\nname(puffin, Peddi) = True\n\nquestion = show_cards(puffin, buffalo)\n"}, {"idx": 146, "response": "has(hummingbird, sharp_object) == True\nproceed(hummingbird, spot_right_after(spot_of(oscar))) = rule1()\nproceed(hummingbird, spot_right_after(spot_of(oscar))) == True\nproceed(hummingbird, spot_right_after(spot_of(oscar))) == True\nhas(oscar, leafy_green_vegetable) == False\nattack(oscar, green_fields_of(squirrel)) = rule2()\nattack(oscar, green_fields_of(squirrel)) == False\nattack(oscar, green_fields_of(squirrel)) == False\nremove(oscar, piece_of(octopus)) = rule4(oscar)\nremove(oscar, piece_of(octopus)) == True\nremove(oscar, piece_of(octopus)) == True\nfirst_letter_of(name(oscar)) == first_letter_of(name(wolverine)) == True\nshow_cards(oscar, eel) = rule5()\nshow_cards(oscar, eel) == True\nshow_cards(oscar, eel) == True\nnot has(oscar, keys) = rule7()\nhas(oscar, keys) == False\nhas(oscar, keys) == False\nfriends(oscar) < 4 == True\nshow_cards(oscar, eel) = rule8()\nshow_cards(oscar, eel) == True\nshow_cards(oscar, eel) == True\nhas(oscar, card_with(primary_color)) == False\nattack(oscar, green_fields_of(squirrel)) == False\nattack(oscar, green_fields_of(squirrel)) == False\nhas(hummingbird, card_with(color_in_flag_of(Belgium))) == False\nproceed(hummingbird, spot_right_after(spot_of(oscar))) == False\nproceed(hummingbird, spot_right_after(spot_of(oscar))) == False\nneeds_support(oscar, salmon) == False\nnot owes_money_to(oscar, gecko) = rule11()\nowes_money_to(oscar, gecko) == False\nquestion = False", "answer": -1, "code": "rule1() = has(hummingbird, sharp_object) => proceed(hummingbird, spot_right_after(spot_of(oscar)))\nrule2() = has(oscar, leafy_green_vegetable) => attack(oscar, green_fields_of(squirrel))\nrule3(something) = remove(something, piece_of(octopus)) => owes_money_to(something, gecko)\nrule4(something) = not show_cards(something, eel) & attack(something, green_fields_of(squirrel)) => remove(something, piece_of(octopus))\nrule5() = first_letter_of(name(oscar)) == first_letter_of(name(wolverine)) => show_cards(oscar, eel)\nrule6() = knock_down(jellyfish, fortress_of(cheetah)) => offer_job(cheetah, oscar)\nrule7() = not has(oscar, keys) => not show_cards(oscar, eel)\nrule8() = friends(oscar) < 4 => show_cards(oscar, eel)\nrule9() = has(oscar, card_with(primary_color)) => attack(oscar, green_fields_of(squirrel))\nrule10() = has(hummingbird, card_with(color_in_flag_of(Belgium))) => proceed(hummingbird, spot_right_after(spot_of(oscar)))\nrule11(something) = needs_support(something, salmon) => not owes_money_to(something, gecko)\norder(rule3) > order(rule11) = True\norder(rule5) > order(rule7) = True\norder(rule8) > order(rule7) = True\n\nhas(hummingbird, card_with(black_color)) = True\nhas(hummingbird, trumpet) = True\nknock_down(jellyfish, fortress_of(cheetah)) = True\nhas(oscar, card_with(green_color)) = True\nfriends(oscar, adventurous) = 6\nfriends(oscar, not_adventurous) = 3\nhas(oscar, luxury_aircraft) = True\nhas(oscar, love_seat_sofa) = True\nname(wolverine, Milo) = True\n\nquestion = owes_money_to(oscar, gecko)\n"}, {"idx": 147, "response": "has_well_paid_job(squid) == False\nhas_high_salary(squid) = rule1()\nhas_high_salary(squid) == False\nprepare_armor(squid, hare) = rule13()\nprepare_armor(squid, hare) == True\nprepare_armor(squid, hare) == True\nnot prepare_armor(squid, cheetah) = rule10()\nprepare_armor(squid, cheetah) == False\nprepare_armor(squid, cheetah) == False\nproceed(squid, spot_right_after(spot_of(snail))) = rule9()\nproceed(squid, spot_right_after(spot_of(snail))) == True\nproceed(squid, spot_right_after(spot_of(snail))) == True\nquestion = True", "answer": 1, "code": "rule1() = has_high_salary(salmon) => prepare_armor(salmon, hare)\nrule2() = prepare_armor(something, cheetah) & not enemy(something, jellyfish) => proceed(something, spot_right_after(spot_of(snail)))\nrule3() = not eat(grasshopper, food_of(squid)) => points(squid) == points(zander)\nrule4() = has(pig, card_with(color_in_flag_of_Netherlands)) => burn(warehouse_of(squid))\nrule5() = steal_points(aardvark, 5, squid) & burn(warehouse_of(squid)) => prepare_armor(squid, cheetah)\nrule6() = has(aardvark, musical_instrument) => not steal_points(aardvark, 5, squid)\nrule7() = has(meerkat, card_with(primary_color)) => wink(meerkat, squid)\nrule8() = not offer_job_position(canary, meerkat) => not wink(meerkat, squid)\nrule9() = raise_flag_of_peace(something, pig) => not proceed(something, spot_right_after(spot_of(snail)))\nrule10() = prepare_armor(something, hare) => not prepare_armor(squid, cheetah)\nrule11() = roll_dice(bat, pig) => not burn(warehouse_of(squid))\nrule12() = wink(meerkat, squid) => not enemy(squid, jellyfish)\nrule13() = has(salmon, card_with(primary_color)) => prepare_armor(salmon, hare)\nrule14() = first_letter_of(name(aardvark)) == first_letter_of(name(tilapia)) => steal_points(aardvark, 5, squid)\norder(rule4) > order(rule11) = True\norder(rule5) > order(rule10) = True\norder(rule6) > order(rule14) = True\norder(rule7) > order(rule8) = True\norder(rule9) > order(rule2) = True\n\nname(aardvark, Tango) = True\nroll_dice(bat, pig) = True\nhas(meerkat, card_with(red_color)) = True\nhas(pig, card_with(blue_color)) = True\nhas_well_paid_job(salmon) = True\nhas(salmon, card_with(yellow_color)) = True\nname(tilapia, Tessa) = True\nrespects(turtle, squid) = True\nnot offer_job_position(canary, meerkat) = True\nnot eat(grasshopper, food_of(squid)) = True\n\nquestion = proceed(squid, spot_right_after(spot_of(snail)))\n"}, {"idx": 148, "response": "has(pig, carry_apples_and_oranges) == True\nnot equal_points(pig, rabbit) = rule4()\nequal_points(pig, rabbit) == False\ngot_job(pig, well_paid) == True\nfriends(pig) = 8\nfriends(pig) < 12 == True\nnot equal_points(pig, rabbit) == True\nequal_points(crocodile, penguin) = rule7()\nequal_points(crocodile, penguin) == True\nremove(pig, piece_of(penguin)) = rule5()\nremove(pig, piece_of(penguin)) == True\nremove(pig, piece_of(penguin)) == True\nnot eat_food(penguin, food_of(halibut)) = rule5()\neat_food(penguin, food_of(halibut)) == False\nquestion = False", "answer": -1, "code": "rule1() = has(tilapia, card_with(color_in_flag_of(Japan))) => not equal_points(tilapia, koala)\nrule2(something) = not enemy(something, meerkat) => equal_points(something, koala)\nrule3() = friends(pig) < 12 => not equal_points(pig, rabbit)\nrule4() = has(pig, carry_apples_and_oranges) => not equal_points(pig, rabbit)\nrule5() = equal_points(crocodile, penguin) & remove(pig, piece_of(penguin)) => not eat_food(penguin, food_of(halibut))\nrule6(something) = not equal_points(something, rabbit) => remove(something, piece_of(penguin))\nrule7() = exists(animal) such that equal_points(animal, koala) => equal_points(crocodile, penguin)\nrule8() = raise_flag_of_peace(panda_bear, pig) => not remove(pig, piece_of(penguin))\norder(rule1) > order(rule2) = True\norder(rule8) > order(rule6) = True\n\ngot_job(pig, well_paid) = True\nfriends(pig) = 8\nhas(pig, cappuccino) = True\nhas(pig, card_with(green_color)) = True\nnot enemy(tilapia, meerkat) = True\n\nquestion = eat_food(penguin, food_of(halibut))\n"}, {"idx": 149, "response": "friends(zander) = 2\nfriends(zander) > 7 = False\nnot need_support(zander, phoenix) = rule1()\nneed_support(zander, phoenix) = True\nsing_song(phoenix, victory_song_for(rabbit)) = question\nsing_song(phoenix, victory_song_for(rabbit)) = True\nquestion = True", "answer": 1, "code": "rule1() = friends(zander) > 7 => not need_support(zander, phoenix)\nrule2(something) = points(something) == points(hummingbird) => offer_job_position(something, panther)\nrule3() = friends(puffin) < 4 => not offer_job_position(puffin, panther)\nrule4() = has(puffin, card_with(color_starting_with(\"r\"))) => not offer_job_position(puffin, panther)\nrule5(something) = offer_job_position(something, moose) & not show_all_cards(something, gecko) => not sing_song(something, victory_song_for(rabbit))\nrule6() = needs_support(something, mosquito) => not show_all_cards(phoenix, gecko)\nrule7() = has(zander, card_with(primary_color)) => needs_support(zander, phoenix)\nrule8() = not prepare_armor(puffin, phoenix) => sing_song(phoenix, victory_song_for(rabbit))\nrule9() = first_letter_of(name(zander)) == first_letter_of(name(swordfish)) => needs_support(zander, phoenix)\nrule10() = has(zander, sharp_object) => not needs_support(zander, phoenix)\nrule11() = sing_song(doctorfish, victory_song_for(canary)) => attack(canary, green_fields_of(phoenix))\nrule12(something) = offer_job_position(something, panther) => not sing_song(something, victory_song_for(phoenix))\nrule13() = points(grasshopper) == points(puffin) => sing_song(puffin, victory_song_for(phoenix))\nrule14() = not give(cat, magnifier, canary) => needs_support(canary, mosquito)\nrule15() = friends(canary) < 16 => not needs_support(canary, mosquito)\norder(rule1) > order(rule7) = True\norder(rule1) > order(rule9) = True\norder(rule10) > order(rule7) = True\norder(rule10) > order(rule9) = True\norder(rule13) > order(rule12) = True\norder(rule15) > order(rule14) = True\norder(rule3) > order(rule2) = True\norder(rule4) > order(rule2) = True\norder(rule8) > order(rule5) = True\n\ngive(cat, magnifier, canary) = True\nsing_song(doctorfish, victory_song_for(canary)) = True\nfriends(puffin) = 11\npoints(puffin) == points(hummingbird) = True\nname(swordfish, Meadow) = True\nfriends(zander) = 2\nhas(zander, card_with(blue_color)) = True\nname(zander, Casper) = True\n\nquestion = sing_song(phoenix, victory_song_for(rabbit))\n"}, {"idx": 150, "response": "took_bike(baboon) == True\nnot attack_green_fields(baboon, owner(turtle)) = rule3()\nattack_green_fields(baboon, owner(turtle)) == False\nnot prepare_armor(baboon, ferret) = rule4()\nprepare_armor(baboon, ferret) == False\nowes_money_to(ferret, sea_bass) = question\nquestion = False", "answer": -1, "code": "rule1() = not attack_green_fields(something, owner(turtle)) => not prepare_armor(something, ferret)\nrule2() = first_letter_of(name(baboon)) == first_letter_of(name(lobster)) => attack_green_fields(baboon, owner(turtle))\nrule3() = took_bike(baboon) => not attack_green_fields(baboon, owner(turtle))\nrule4() = not prepare_armor(baboon, ferret) => owes_money_to(ferret, sea_bass)\nrule5() = friends(baboon) > 4 => points(baboon) == points(leopard)\nrule6() = has(baboon, leafy_green_vegetable) => not attack_green_fields(baboon, owner(turtle))\norder(rule3) > order(rule2) = True\norder(rule6) > order(rule2) = True\n\nfriends(baboon) = 5\nhas(baboon, smart_friend) = True\nhas(baboon, card_with(yellow_color)) = True\nhas(baboon, guitar) = True\nname(baboon, Tessa) = True\ntook_bike(baboon) = True\nname(lobster, Beauty) = True\n\nquestion = owes_money_to(ferret, sea_bass)\n"}, {"idx": 151, "response": "prepare_armor(black_bear, cow) = rule3()\nprepare_armor(black_bear, cow) == True\nnot give_magnifier(dog, cow) = rule5()\ngive_magnifier(dog, cow) == False\nnever_attack(cow, green_fields_owned_by(whale)) = rule5()\nnever_attack(cow, green_fields_owned_by(whale)) == True\nquestion = True", "answer": 1, "code": "rule1() = roll_dice_for(something, caterpillar) => not prepare_armor(something, cow)\nrule2() = needs_support(something, sea_bass) => not give_magnifier(dog, cow)\nrule3() = enemy(something, turtle) => prepare_armor(black_bear, cow)\nrule4() = friends(dog) < 13 => not roll_dice(dog, crocodile)\nrule5() = prepare_armor(black_bear, cow) & not give_magnifier(dog, cow) => never_attack(cow, green_fields_owned_by(whale))\nrule6() = first_letter_of(name(dog)) == first_letter_of(name(canary)) => not knows(defensive_plans_of(hare), dog)\nrule7() = color(card(lion)) in colors_of(flag_of(France)) => needs_support(lion, sea_bass)\nrule8() = has(dog, musical_instrument) => not roll_dice(dog, crocodile)\nrule9() = has(drink, buffalo) => actual_enemy(buffalo, turtle)\norder(rule1) > order(rule3) = True\n\nhas(buffalo, beer) = True\nname(canary, Bella) = True\nhas(dog, cell_phone) = True\nfriends(dog) = 7\nname(dog, Buddy) = True\nhas(lion, card_with(red_color)) = True\nenemy(lobster, lion) = True\n\nquestion = attack(cow, green_fields_owned_by(whale))\n"}, {"idx": 152, "response": "has(octopus, card_with(primary_color)) = rule1()\nhas(octopus, card_with(primary_color)) == True\nprepare_armor(octopus, whale) = rule1()\nprepare_armor(octopus, whale) == True\nprepare_armor(octopus, whale) == True\ngive_magnifier(leopard, rabbit) = not give_magnifier(leopard, rabbit) = rule2()\nnot give_magnifier(leopard, rabbit) == True\ngive_magnifier(leopard, rabbit) == False\nquestion = False", "answer": -1, "code": "rule1() = has(octopus, card_with(primary_color)) => prepare_armor(octopus, whale)\nrule2() = exists(animal) eats_food_of(animal, dog) => not give_magnifier(leopard, rabbit)\nrule3() = has(parrot, something_to_sit_on) => points(parrot) == points(ferret)\nrule4() = has(octopus, high_quality_paper) => prepare_armor(octopus, whale)\nrule5() = points(parrot) == points(ferret) => give_magnifying_glass(ferret, leopard)\nrule6() = points(cricket) == points(ferret) => not give_magnifying_glass(ferret, leopard)\nrule7() = give_magnifier(ferret, leopard) & owes_money_to(whale, leopard) => give_magnifying_glass(leopard, rabbit)\nrule8() = prepare_armor(octopus, whale) => owes_money_to(whale, leopard)\nrule9() = has(panther, card_with(color_in_flag_of(Belgium))) => burn(warehouse_of(whale))\n\norder(rule2) > order(rule7) = True\norder(rule5) > order(rule6) = True\n\nhas(octopus, card_with(orange_color)) = True\nhas(octopus, low_income_job) = True\nhas(panther, card_with(indigo_color)) = True\nhas(parrot, couch) = True\n\nquestion = give_magnifier(leopard, rabbit)\n"}, {"idx": 153, "response": "remove(leopard, piece_of(koala)) = rule4(leopard)\nremove(leopard, piece_of(koala)) == True\noffer_job(leopard, bat) = not rule3()\noffer_job(leopard, bat) == False\nquestion = True", "answer": 1, "code": "rule1() = has_high_salary(octopus) => burn(warehouse_of(kudu), octopus)\nrule2() = first_letter_of(name(octopus)) == first_letter_of(name(phoenix)) => burn(warehouse_of(kudu), octopus)\nrule3() = burn(warehouse_of(kudu), something) => not offer_job(leopard, bat)\nrule4(something) = not offer_job(something, bat) => remove(something, piece_of(koala))\n\nhas_high_salary(octopus) = True\nname(octopus, Blossom) = True\nname(phoenix, Casper) = True\nknock_down(swordfish, fortress_of(octopus)) = True\n\nquestion = remove(leopard, piece_of(koala))\n"}, {"idx": 154, "response": "friends(zander) = 9\nfriends(zander) < 18 = True\nlearn_basics_of_resource_management(zander, squirrel) = rule1()\nlearn_basics_of_resource_management(zander, squirrel) == True\nlearn_basics_of_resource_management(zander, squirrel) == True\nproceed(squirrel, spot_right_after(spot_of(caterpillar))) = rule5(squirrel)\nproceed(squirrel, spot_right_after(spot_of(caterpillar))) == True\nproceed(squirrel, spot_right_after(spot_of(caterpillar))) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(zander) < 18 => learn_basics_of_resource_management(zander, squirrel)\nrule2() = knows(defensive_plans_of(black_bear), something) => not eat_food(squirrel, swordfish)\nrule3() = sing_song(something, victory_song_for(lion)) => knows(defense_plan_of(black_bear), something)\nrule4() = fan_of(zander, Chris_Ronaldo) => not learn_elementary_resource_management(zander, squirrel)\nrule5(something) = not show_all_cards(something, wolverine) & not eat_food(something, swordfish) => proceed(something, spot_right_after(spot_of(caterpillar)))\nrule6() = prepare_armor(mosquito, squirrel) => not show_all_cards(squirrel, wolverine)\nrule7() = has(zander, connect_to_internet(device)) => not learn_basics_of_resource_management(zander, squirrel)\nrule8() = has(turtle, high_quality_paper) => show_all_cards(turtle, dog)\nrule9(something) = burn(warehouse_of(aardvark), something) => not knows(defense_plan_of(black_bear), something)\nrule10() = friends(turtle) > 2 => not show_all_cards(turtle, dog)\nrule11() = raise_flag_of_peace(something, octopus) => not proceed(squirrel, spot_right_after(spot_of(caterpillar)))\nrule12() = has(eagle, card_with(color_in(rainbow_colors))) => show_all_cards(eagle, dog)\nrule13() = show_all_cards(turtle, dog) & show_all_cards(eagle, dog) => raise_flag_of_peace(dog, octopus)\nrule14() = first_letter_of(name(mosquito)) == first_letter_of(name(zander)) => prepare_armor(mosquito, squirrel)\norder(rule1) > order(rule4) = True\norder(rule1) > order(rule7) = True\norder(rule10) > order(rule8) = True\norder(rule11) > order(rule5) = True\norder(rule3) > order(rule9) = True\n\nburn(warehouse_of(aardvark), cat) = True\nsing_song(cat, victory_song_for(lion)) = True\nhas(eagle, card_with(red_color)) = True\nname(mosquito, Charlie) = True\npublished(turtle, high_quality_paper) = True\nfriends(zander) = 9\nhas(zander, tablet) = True\nhates(zander, Chris_Ronaldo) = True\nname(zander, Chickpea) = True\n\nquestion = proceed(squirrel, spot_right_after(spot_of(caterpillar)))\n"}, {"idx": 155, "response": "question = unknown", "answer": 0, "code": "rule1() = give_magnifying_glass(something, salmon) => not eat_food(something, gecko)\nrule2() = has(elephant, drink) => needs_support(elephant, buffalo)\nrule3() = has(elephant, card_with(color_in(rainbow_colors))) => needs_support(elephant, buffalo)\nrule4() = not burn(warehouse_of(cricket), buffalo) => offer_job(cricket, starfish)\nrule5() = steal_points(sun_bear, 5, gecko) => not show_all_cards(gecko, cricket)\nrule6(something) = not needs_support(something, lobster) => steal_points(something, 5, gecko)\nrule7(something) = points(something) == points(gecko) => eat_food(buffalo, gecko)\nrule8() = steal_points(octopus, 5, halibut) => eat_food(halibut, buffalo)\nrule9() = attack(moose, green_fields_of(buffalo)) => prepare_armor(buffalo, hummingbird)\nrule10() = owes_money_to(something, cow) => not steal_points(something, 5, gecko)\nrule11() = first_letter_of(name(halibut)) == first_letter_of(name(penguin)) => not eat_food(halibut, buffalo)\nrule12(something) = eat_food(something, gecko) & prepare_armor(something, hummingbird) => burn(warehouse_of(cricket), something)\nrule13() = owes_money_to(black_bear, buffalo) => not prepare_armor(buffalo, hummingbird)\norder(rule10) > order(rule6) = True\norder(rule7) > order(rule1) = True\norder(rule8) > order(rule11) = True\norder(rule9) > order(rule13) = True\n\nneeds_support(buffalo, salmon) = True\nhas(elephant, card_with(yellow_color)) = True\nhas(elephant, knife) = True\nname(halibut, Pablo) = True\nattack(moose, green_fields_of(buffalo)) = True\npoints(parrot) == points(gecko) = True\nname(penguin, Pashmak) = True\nowes_money_to(sun_bear, cow) = True\nnot needs_support(sun_bear, lobster) = True\n\nquestion = offer_job(cricket, starfish)\n"}, {"idx": 156, "response": "has(carp, card_with(blue_color)) == True\nhas(carp, knapsack) == True\ninvented(carp, time_machine) == True\nname(carp, Mojo) == True\noffer_job(cheetah, viperfish) == True\nhas(hare, blade) == True\ncount(friends(hare, kind)) == 7\ncount(friends(hare, not_kind)) == 1\nname(hare, Lily) == True\nname(polar_bear, Mojo) == True\nhas(snail, romaine_lettuce) == True\n\nnot give_magnifying_glass(snail, moose) = rule1()\ngive_magnifying_glass(snail, moose) == False\nnot remove(carp, piece_of(moose)) = rule2()\nremove(carp, piece_of(moose)) == False\nnot actual_enemy(halibut, grizzly_bear) = rule3()\nactual_enemy(halibut, grizzly_bear) == False\nnot knows(defense_plan_of(tilapia), hare) = rule4()\nknows(defense_plan_of(tilapia), hare) == False\nnot steal_points(hare, baboon, 5) = rule14()\nsteal_points(hare, baboon, 5) == False\nnot knows(defense_plan_of(tilapia), hare) = rule15()\nknows(defense_plan_of(tilapia), hare) == False\nnot remove(carp, piece_of(moose)) = rule6()\nremove(carp, piece_of(moose)) == False\nnot attack(hare, green_fields_of(buffalo)) = rule7()\nattack(hare, green_fields_of(buffalo)) == False\nnot points(something) == points(halibut) = rule8(something)\npoints(something) == points(halibut) == True\nnot enemy(halibut, grizzly_bear) = rule9()\nenemy(halibut, grizzly_bear) == False\nremove(carp, piece_of(moose)) = rule10()\nremove(carp, piece_of(moose)) == True\npoints(moose) == points(halibut) = rule11()\npoints(moose) == points(halibut) == True\nremove(carp, piece_of(moose)) = rule12()\nremove(carp, piece_of(moose)) == True\nnot attack(hare, green_fields_of(buffalo)) = rule13()\nattack(hare, green_fields_of(buffalo)) == False\n\nquestion = False", "answer": -1, "code": "rule1() = has(snail, leafy_green_vegetable) => not give_magnifying_glass(snail, moose)\nrule2() = has(carp, leafy_green_vegetable) => not remove(carp, piece_of(moose))\nrule3() = points(moose) == points(halibut) => not actual_enemy(halibut, grizzly_bear)\nrule4() = offer_job(something, viperfish) => not knows(defense_plan_of(tilapia), hare)\nrule5(something) = not steal_points(something, baboon, 5) & not knows(defense_plan_of(tilapia), something) => raise_flag_of_peace(something, halibut)\nrule6() = has(carp, card_with(color_in(rainbow_colors))) => not remove(carp, piece_of(moose))\nrule7() = first_letter_of(name(hare)) == first_letter_of(name(polar_bear)) => not attack(hare, green_fields_of(buffalo))\nrule8(something) = raise_flag_of_peace(something, sea_bass) => not points(something) == points(halibut)\nrule9() = raise_flag_of_peace(hare, halibut) => enemy(halibut, grizzly_bear)\nrule10() = has(carp, time_machine) => remove(carp, piece_of(moose))\nrule11() = not give_magnifying_glass(snail, moose) & not remove(carp, piece_of(moose)) => points(moose) == points(halibut)\nrule12() = first_letter_of(name(carp)) == first_letter_of(name(donkey)) => remove(carp, piece_of(moose))\nrule13() = count(friends(hare)) > 4 => not attack(hare, green_fields_of(buffalo))\nrule14() = has(hare, sharp_object) => not steal_points(hare, baboon, 5)\nrule15() = attack(oscar, green_fields_of(hare)) => knows(defense_plan_of(tilapia), hare)\norder(rule10) > order(rule2) = True\norder(rule10) > order(rule6) = True\norder(rule12) > order(rule2) = True\norder(rule12) > order(rule6) = True\norder(rule15) > order(rule4) = True\norder(rule8) > order(rule11) = True\norder(rule9) > order(rule3) = True\n\nhas(carp, card_with(blue_color)) = True\nhas(carp, knapsack) = True\ninvented(carp, time_machine) = True\nname(carp, Mojo) = True\noffer_job(cheetah, viperfish) = True\nhas(hare, blade) = True\ncount(friends(hare, kind)) = 7\ncount(friends(hare, not_kind)) = 1\nname(hare, Lily) = True\nname(polar_bear, Mojo) = True\nhas(snail, romaine_lettuce) = True\n\nquestion = enemy(halibut, grizzly_bear)\n"}, {"idx": 157, "response": "not owes_money_to(tilapia, cow) = rule3()\nowes_money_to(tilapia, cow) == False\nequal_points(cow, ferret) = question\n", "answer": 0, "code": "rule1() = not give_magnifier(catfish, baboon) => actual_enemy(baboon, hummingbird)\nrule2() = knock_down_fortress(something, grasshopper) => attack_green_fields(baboon, gecko)\nrule3() = not owes_money_to(tilapia, cow) => not equal_points(cow, ferret)\nrule4() = has(kiwi, leafy_green_vegetable) => sing_song(kiwi, victory_song_for(tilapia))\nrule5(something) = rolls_dice(something, crocodile) => not proceed(something, spot_right_after(spot_of(tilapia)))\nrule6() = rolls_dice(tiger, blobfish) => knock_down_fortress(blobfish, grasshopper)\nrule7() = friends(kiwi) < 8 => sing_song(kiwi, victory_song_for(tilapia))\nrule8() = not proceed(panda_bear, spot_right_after(spot_of(tilapia))) & sing_song(kiwi, victory_song_for(tilapia)) => not owes_money_to(tilapia, cow)\nrule9() = attack_green_fields(something, salmon) => not knock_down_fortress(blobfish, grasshopper)\nrule10(something) = actual_enemy(something, hummingbird) & not owes_money_to(something, cat) => not attack_green_fields(something, gecko)\norder(rule10) > order(rule2) = True\norder(rule9) > order(rule6) = True\n\nfriends(kiwi) = 11\nhas(kiwi, kale) = True\nrolls_dice(panda_bear, crocodile) = True\nrolls_dice(tiger, blobfish) = True\nnot give_magnifier(catfish, baboon) = True\n\nquestion = equal_points(cow, ferret)\n"}, {"idx": 158, "response": "question = unknown", "answer": 0, "code": "rule1() = needs_support(bat, crocodile) & not enemy(caterpillar, crocodile) => add_conclusion(\"the crocodile knocks down the fortress of the cockroach\")\nrule2(something) = needs_support(something, eagle) => offer_job_position(something, kangaroo)\nrule3() = not owes_money_to(octopus, rabbit) => not needs_support(rabbit, eagle)\nrule4() = remove(animal, piece_of(squirrel)) => needs_support(rabbit, eagle)\nrule5() = offer_job_position(animal, kangaroo) => sing_song(viperfish, victory_song_for(sea_bass))\nrule6() = knock_down(animal, fortress_of(cockroach)) => not offer_job_position(rabbit, kangaroo)\nrule7() = points(mosquito) == points(viperfish) => not sing_song(viperfish, victory_song_for(sea_bass))\norder(rule2) > order(rule6) = True\norder(rule3) > order(rule4) = True\norder(rule7) > order(rule5) = True\n\nneeds_support(bat, crocodile) = True\nassassinated(crocodile, mayor) = True\nhas(crocodile, cello) = True\nnot enemy(caterpillar, crocodile) = True\nnot remove(donkey, piece_of(squirrel)) = True\n\nquestion = sing_song(viperfish, victory_song_for(sea_bass))\n"}, {"idx": 159, "response": "attacks(catfish, green_fields_of(cockroach)) == True\noffer_job(phoenix, sun_bear) = rule5()\noffer_job(phoenix, sun_bear) == True\noffer_job(phoenix, sun_bear) == True\nsing_song(sun_bear, victory_song_for(penguin)) = rule3()\nsing_song(sun_bear, victory_song_for(penguin)) == True\nsing_song(sun_bear, victory_song_for(penguin)) == True\nrespects(sun_bear, hare) = rule2()\nrespects(sun_bear, hare) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not show_cards(something, cockroach) & not remove(something, piece_of(parrot)) => not sing_song(something, victory_song_for(penguin))\nrule2() = sing_song(something, victory_song_for(penguin)) => respects(something, hare)\nrule3() = offer_job(phoenix, sun_bear) => sing_song(sun_bear, victory_song_for(penguin))\nrule4() = show_cards(something, oscar) => not remove(something, piece_of(parrot))\nrule5() = attack(green_fields_of(cockroach), something) => offer_job(phoenix, sun_bear)\norder(rule1) > order(rule3) = True\n\neats(black_bear, food_of(phoenix)) = True\nattacks(catfish, green_fields_of(cockroach)) = True\nshow_cards(sun_bear, oscar) = True\npoints(koala) != points(phoenix) = True\n\nquestion = respects(sun_bear, hare)\n"}, {"idx": 160, "response": "supports(cricket, Chris_Ronaldo) == True\nfan_of(cricket, Chris_Ronaldo) == True\nnot show_all_cards(cricket, sun_bear) = rule1()\nshow_all_cards(cricket, sun_bear) == False\noffer_job(polar_bear, amberjack) == True\noffer_job(polar_bear, cricket) == True\nknows(defensive_plans_of(panda_bear), polar_bear) = rule6()\nknows(defensive_plans_of(panda_bear), polar_bear) == True\nattack_green_fields(eagle, catfish) = False\nknock_down(eagle, fortress_of(gecko)) = rule7()\nknock_down(eagle, fortress_of(gecko)) == True\nknock_down(eagle, fortress_of(gecko)) == True\nquestion = True", "answer": 1, "code": "rule1() = fan_of(cricket, Chris_Ronaldo) => not show_all_cards(cricket, sun_bear)\nrule2() = knows(defense_plan_of(panda_bear), something) & offer_job(something, cricket) => not knows(defensive_plans_of(eagle), something)\nrule3(something) = not show_all_cards(something, sun_bear) => raise_flag_of_peace(something, eagle)\nrule4(something) = remove(something, piece_of(kangaroo)) => not raise_flag_of_peace(something, eagle)\nrule5() = not knows(defensive_plans_of(eagle), polar_bear) & raise_flag_of_peace(cricket, eagle) => not knock_down(eagle, fortress_of(gecko))\nrule6() = friends(polar_bear) < 6 => knows(defensive_plans_of(panda_bear), polar_bear)\nrule7(something) = attack_green_fields(something, catfish) => knock_down(something, fortress_of(gecko))\nrule8(something) = offer_job(something, amberjack) => offer_job(something, cricket)\norder(rule4) > order(rule3) = True\norder(rule7) > order(rule5) = True\n\nsupports(cricket, Chris_Ronaldo) = True\nname(kiwi, Luna) = True\nhas(polar_bear, card_with(red_color)) = True\nhas(polar_bear, plastic_bag) = True\nfriends(polar_bear) = 4\nname(polar_bear, Lola) = True\noffer_job(polar_bear, amberjack) = True\n\nquestion = knock_down(eagle, fortress_of(gecko))\n"}, {"idx": 161, "response": "question = unknown", "answer": 0, "code": "rule1() = first_letter_of(name(ferret)) == first_letter_of(name(aardvark)) => owes_money_to(ferret, carp)\nrule2() = enemy(carp, hare) => respects(hare, cheetah)\nrule3() = difficulty_finding_food(ferret) => owes_money_to(ferret, carp)\nrule4() = offer_job_position(phoenix, carp) & owes_money_to(ferret, carp) => enemy(carp, hare)\nrule5(something) = proceed(something, spot_right_after(spot_of(cat))) & burn(warehouse_of(eagle), something) => not owes_money_to(something, carp)\nrule6() = friends(phoenix) < 10 => offer_job_position(phoenix, carp)\norder(rule5) > order(rule1) = True\norder(rule5) > order(rule3) = True\n\nname(aardvark, Lucy) = True\nname(ferret, Blossom) = True\nassassinate(ferret, mayor) = True\nsteal_points(ferret, 5, eagle) = True\nfriends(phoenix) = 1\n\nquestion = respects(hare, cheetah)\n"}, {"idx": 162, "response": "name(eel, Bella) == True\nname(hummingbird, Blossom) == True\nhas(penguin, spinach) == False\nnot roll_dice(penguin, salmon) = rule2()\nroll_dice(penguin, salmon) == False\ncount(friends(salmon, playful)) = 6\ncount(friends(salmon, not_playful)) = 4\nname(salmon, Beauty) == True\nname(squirrel, Bella) == True\nfirst_letter_of(name(salmon)) == first_letter_of(name(squirrel)) = rule5()\nfirst_letter_of(name(salmon)) == first_letter_of(name(squirrel)) == True\noffer_job_position(salmon, cheetah) = rule5()\noffer_job_position(salmon, cheetah) == True\noffer_job_position(salmon, cheetah) == True\nremove(salmon, piece_of(carp)) = rule3(salmon)\nremove(salmon, piece_of(carp)) == True\nremove(salmon, piece_of(carp)) == True\nquestion = True", "answer": 1, "code": "rule1() = not roll_dice(penguin, salmon) & knock_down(hummingbird, fortress_of(salmon)) => knock_down(salmon, fortress_of(sea_bass))\nrule2() = has(penguin, leafy_green_vegetable) => not roll_dice(penguin, salmon)\nrule3(something) = knock_down(something, fortress_of(sea_bass)) => remove(something, piece_of(carp))\nrule4() = first_letter_of(name(hummingbird)) == first_letter_of(name(eel)) => knock_down(hummingbird, fortress_of(salmon))\nrule5() = first_letter_of(name(salmon)) == first_letter_of(name(squirrel)) => offer_job_position(salmon, cheetah)\nrule6() = count(friends(salmon)) > 17 => offer_job_position(salmon, cheetah)\n\nname(eel, Bella) = True\nname(hummingbird, Blossom) = True\nhas(penguin, spinach) = True\ncount(friends(salmon, playful)) = 6\ncount(friends(salmon, not_playful)) = 4\nname(salmon, Beauty) = True\nname(squirrel, Bella) = True\n\nquestion = remove(salmon, piece_of(carp))\n"}, {"idx": 163, "response": "name(salmon, Tessa) == True\nname(starfish, Beauty) == True\nfirst_letter_of(name(salmon)) == first_letter_of(name(starfish)) == True\nnot raise_flag_of_peace(salmon, dog) = rule1()\nraise_flag_of_peace(salmon, dog) == False\nhas(salmon, card_with(green_color)) == True\nnot raise_flag_of_peace(salmon, dog) = rule5()\nraise_flag_of_peace(salmon, dog) == False\nwink_at(salmon, whale) = rule7(salmon)\nwink_at(salmon, whale) == True\nwink_at(salmon, whale) == True\nnot knock_down(fortress_of(kiwi), salmon) = rule6(salmon)\nknock_down(fortress_of(kiwi), salmon) == False\nknock_down(fortress_of(kiwi), salmon) == False\nnot owes_money_to(salmon, phoenix) = rule2(salmon)\nowes_money_to(salmon, phoenix) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(salmon)) == first_letter_of(name(starfish)) => not raise_flag_of_peace(salmon, dog)\nrule2(something) = wink_at(something, whale) & not knock_down(fortress_of(kiwi), something) => not owes_money_to(something, phoenix)\nrule3() = has(salmon, sharp_object) => attack_green_fields(salmon, owner_is(aardvark))\nrule4() = has(salmon, carry_apples_and_oranges) => attack_green_fields(salmon, owner_is(aardvark))\nrule5() = has(salmon, card_with(primary_color)) => not raise_flag_of_peace(salmon, dog)\nrule6(something) = attack_green_fields(something, owner_is(aardvark)) => not knock_down(fortress_of(kiwi), something)\nrule7(something) = not raise_flag_of_peace(something, dog) => wink_at(something, whale)\n\nhas(salmon, card_with(green_color)) = True\nhas(salmon, cutter) = True\nhas(salmon, romaine_lettuce) = True\nname(salmon, Tessa) = True\nname(starfish, Beauty) = True\n\nquestion = owes_money_to(salmon, phoenix)\n"}, {"idx": 164, "response": "learns_basics_of_resource_management(dog, parrot) == True\noffer_job(dog, lion) = rule3()\noffer_job(dog, lion) == True\noffer_job(dog, lion) == True\nnot raise_flag_of_peace(snail, puffin) = rule2()\nraise_flag_of_peace(snail, puffin) == False\nowes_money_to(dog, puffin) = rule2()\nowes_money_to(dog, puffin) == True\nowes_money_to(dog, puffin) == True\nknock_down_fortress(puffin, viperfish) = rule2()\nknock_down_fortress(puffin, viperfish) == True\nknock_down_fortress(puffin, viperfish) == True\nquestion = True", "answer": 1, "code": "rule1() = offer_job(something, lion) & not knows(defense_plan_of(cheetah), something) => owes_money_to(something, puffin)\nrule2() = not raise_flag_of_peace(snail, puffin) & owes_money_to(dog, puffin) => knock_down_fortress(puffin, viperfish)\nrule3() = learns_basics_of_resource_management(something, parrot) => offer_job(something, lion)\nrule4() = friends(dog) > 3 => not offer_job(dog, lion)\nrule5() = has(dog, carry_apples_and_oranges) => not knows(defense_plan_of(cheetah), dog)\nrule6(something) = learns_elementary_resource_management(something, black_bear) => not owes_money_to(something, puffin)\nrule7() = has(dog, connect_to_internet(device)) => not knows(defensive_plans_of(cheetah), dog)\nrule8() = show_all_cards_to(hummingbird) => raise_flag_of_peace(snail, puffin)\nrule9() = friends(snail) < 9 => sing_song(snail, victory_song_for(koala))\nrule10() = has(dog, card_with(color) in rainbow_colors) => not offer_job(dog, lion)\nrule11() = has(snail, something_to_sit_on) => sing_song(snail, victory_song_for(koala))\nrule12() = sing_song(something, victory_song_for(koala)) => not raise_flag_of_peace(something, puffin)\norder(rule10) > order(rule3) = True\norder(rule4) > order(rule3) = True\norder(rule6) > order(rule1) = True\norder(rule8) > order(rule12) = True\n\nfriends(dog) = 1\nhas(dog, guitar) = True\nhas(dog, kale) = True\nlearns_basics_of_resource_management(dog, parrot) = True\nfriends(snail) = 4\nhas(snail, violin) = True\n\nquestion = knock_down_fortress(puffin, viperfish)\n"}, {"idx": 165, "response": "remove(doctorfish, piece_of(jellyfish)) = True\noffer_job_position(cheetah, bat) = rule1()\noffer_job_position(cheetah, bat) == True\noffer_job_position(cheetah, bat) == True\nproceed(cheetah, spot_right_after(squirrel)) = rule4()\nproceed(cheetah, spot_right_after(squirrel)) == True\nproceed(cheetah, spot_right_after(squirrel)) == True\noffer_job_position(rabbit, squirrel) = rule5()\noffer_job_position(rabbit, squirrel) == True\nproceed(cheetah, spot_right_after(squirrel)) == True\nquestion = True", "answer": 1, "code": "rule1() = remove(animal, piece_of(jellyfish)) => offer_job_position(cheetah, bat)\nrule2(something) = not steal_points(something, 5, sea_bass) & offer_job_position(something, bat) => not proceed(something, spot_right_after(squirrel))\nrule3() = respects(zander, tiger) => not offer_job_position(tiger, rabbit)\nrule4() = knock_down(animal, fortress_of(moose)) => proceed(cheetah, spot_right_after(squirrel))\nrule5() = offer_job_position(rabbit, squirrel) & proceed(cheetah, spot_right_after(squirrel)) => offer_job_position(squirrel, canary)\nrule6(something) = not enemy(something, crocodile) => knock_down(something, fortress_of(moose))\nrule7() = not offer_job_position(tiger, rabbit) => offer_job_position(rabbit, squirrel)\norder(rule2) > order(rule4) = True\n\nremove(doctorfish, piece_of(jellyfish)) = True\nrespects(zander, tiger) = True\nnot enemy(eel, crocodile) = True\n\nquestion = offer_job_position(squirrel, canary)\n"}, {"idx": 166, "response": "question = False", "answer": -1, "code": "rule1() = learns_basics_of_resource_management(raven, cockroach) & rolls_dice(octopus, cockroach) => add_conclusion(\"the cockroach shows all her cards to the eel\")\nrule2() = has(cockroach, card_with(color_in(rainbow_colors))) => needs_support(cockroach, parrot)\nrule3() = rolls_dice(something, viperfish) => not learns_basics_of_resource_management(black_bear, cheetah)\nrule4() = owns(cockroach, luxury_aircraft) => actual_enemy(cockroach, bat)\nrule5(something) = shows_all_cards(something, eel) & actual_enemy(something, bat) => rolls_dice(something, viperfish)\nrule6() = has(cockroach, sharp_object) => needs_support(cockroach, parrot)\nrule7() = not raise_flag_of_peace(turtle, cockroach) => not shows_all_cards(cockroach, eel)\norder(rule1) > order(rule7) = True\n\nhas(cockroach, card_with(indigo_color)) = True\nhas(cockroach, trumpet) = True\nowns(cockroach, luxury_aircraft) = True\nname(cockroach, Peddi) = True\nname(goldfish, Pablo) = True\nrolls_dice(octopus, cockroach) = True\nlearns_basics_of_resource_management(raven, cockroach) = True\nnot raise_flag_of_peace(turtle, cockroach) = True\n\nquestion = learns_basics_of_resource_management(black_bear, cheetah)\n"}, {"idx": 167, "response": "assassinated(hare, mayor) == True\nkilled(hare, mayor) == True\nrespects(hare, squirrel) = rule5()\nrespects(hare, squirrel) == True\nrespects(hare, squirrel) == True\nenemy(squirrel, snail) = rule11()\nenemy(squirrel, snail) == True\nenemy(squirrel, snail) == True\nquestion = True", "answer": 1, "code": "rule1() = not prepare_armor(grizzly_bear, squirrel) & respects(hare, squirrel) => raise_flag_of_peace(squirrel, cockroach)\nrule2() = raise_flag_of_peace(animal, buffalo) => not raise_flag_of_peace(squirrel, cockroach)\nrule3() = wink(cheetah, leopard) => proceed(leopard, spot_right_after(spot_of(kangaroo)))\nrule4() = show_cards(animal, viperfish) => proceed(leopard, spot_right_after(spot_of(tiger)))\nrule5() = killed(hare, mayor) => respects(hare, squirrel)\nrule6() = friends(hare) < 13 => not respects(hare, squirrel)\nrule7() = has(leopard, card_with(color_starting_with(\"g\"))) => not proceed(leopard, spot_right_after(spot_of(kangaroo)))\nrule8() = not remove(kiwi, piece_of(blobfish)) => show_cards(blobfish, viperfish)\nrule9() = has(hare, leafy_green_vegetable) => not respects(hare, squirrel)\nrule10() = give(magnifier, animal, grasshopper) => not prepare_armor(grizzly_bear, squirrel)\nrule11() = raise_flag_of_peace(animal, cockroach) => enemy(animal, snail)\nrule12(something) = proceed(something, spot_right_after(spot_of(crocodile))) & sing_song(something, victory_song_for(panda_bear)) => prepare_armor(something, squirrel)\norder(rule12) > order(rule10) = True\norder(rule2) > order(rule1) = True\norder(rule5) > order(rule6) = True\norder(rule5) > order(rule9) = True\norder(rule7) > order(rule3) = True\n\nassassinated(blobfish, mayor) = True\nwink(cheetah, leopard) = True\npoints(donkey) == points(grasshopper) = True\nenemy(grizzly_bear, crocodile) = True\nsing_song(grizzly_bear, victory_song_for(panda_bear)) = True\nassassinated(hare, mayor) = True\nhas(hare, beer) = True\nnot remove(kiwi, piece_of(blobfish)) = True\n\nquestion = enemy(squirrel, snail)\n"}, {"idx": 168, "response": "friends(donkey) = 1\ncreated_time_machine(donkey) = True\nnot attack(crocodile, green_fields_of(donkey)) = True\nnot show_cards(donkey, squid) = rule9()\nshow_cards(donkey, squid) = False\nneed_support(hippopotamus, caterpillar) = rule11()\nneed_support(hippopotamus, caterpillar) = True\nquestion = True", "answer": 1, "code": "rule1() = show_cards(something, squid) => not show_cards(cricket, hippopotamus)\nrule2() = eat_food(something, eagle) => roll_dice(lobster, hippopotamus)\nrule3() = friends(donkey) > 3 => show_cards(donkey, squid)\nrule4() = first_letter_of(name(hare)) == first_letter_of(name(rabbit)) => not need_support(hare, cheetah)\nrule5() = not need_support(something, cheetah) & sing_song(something, victory_song_for(rabbit)) => give_magnifying_glass(something, squirrel)\nrule6() = has(hare, musical_instrument) => sing_song(hare, victory_song_for(rabbit))\nrule7() = eat_food(something, viperfish) => eat_food(something, eagle)\nrule8() = friends(hare) < 17 => not need_support(hare, cheetah)\nrule9() = not attack(crocodile, green_fields_of(donkey)) => not show_cards(donkey, squid)\nrule10() = created_time_machine(donkey) => show_cards(donkey, squid)\nrule11() = give_magnifier(something, squirrel) => need_support(hippopotamus, caterpillar)\norder(rule10) > order(rule9) = True\norder(rule3) > order(rule9) = True\n\nfriends(donkey) = 1\ncreated_time_machine(donkey) = True\nhas(hare, flute) = True\nfriends(hare) = 10\nname(hare, Chickpea) = True\neat_food(koala, viperfish) = True\nname(rabbit, Bella) = True\nnot attack(crocodile, green_fields_of(donkey)) = True\n\nquestion = need_support(hippopotamus, caterpillar)\n"}, {"idx": 169, "response": "remove(baboon, piece_of(blobfish)) = True\neat_food(blobfish, food_of(tilapia)) = rule7()\neat_food(blobfish, food_of(tilapia)) == True\ngive_magnifying_glass(tilapia, sheep) = rule1()\ngive_magnifying_glass(tilapia, sheep) == True\ngive_magnifying_glass(tilapia, sheep) == True\nknock_down_fortress(sheep, salmon) = rule4()\nknock_down_fortress(sheep, salmon) == True\nknock_down_fortress(sheep, salmon) == True\nquestion = True", "answer": 1, "code": "rule1() = eat_food(blobfish, food_of(tilapia)) => give_magnifying_glass(tilapia, sheep)\nrule2() = prepare_armor(hare, cheetah) => give_magnifying_glass(cheetah, sheep)\nrule3() = has(hare, something_to_carry_apples_and_oranges) => not prepare_armor(hare, cheetah)\nrule4() = prepare_armor(something, squirrel) & enemy(something, tiger) => knock_down_fortress(something, salmon)\nrule5() = burn(warehouse_of(caterpillar), something) => not give_magnifying_glass(something, sheep)\nrule6() = has(blobfish, something_to_drink) => not eat_food(blobfish, food_of(tilapia))\nrule7() = remove(baboon, piece_of(blobfish)) => eat_food(blobfish, food_of(tilapia))\nrule8() = not steal_points(something, 5, phoenix) => become_enemy(something, tiger)\nrule9() = friends(sheep) > 6 => not steal_points(sheep, 5, phoenix)\nrule10() = knows(defensive_plans_of(octopus), something) => not give_magnifying_glass(tilapia, sheep)\nrule11() = has(hare, card_with(primary_color)) => prepare_armor(hare, cheetah)\nrule12() = has(sheep, connect_to_internet(device)) => not steal_points(sheep, 5, phoenix)\nrule13() = believe(give_magnifying_glass(cheetah, sheep)) & believe(give_magnifying_glass(tilapia, sheep)) => not knock_down_fortress(sheep, salmon)\nrule14() = first_letter_of(name(hare)) == first_letter_of(name(lion)) => prepare_armor(hare, cheetah)\nrule15() = first_letter_of(name(blobfish)) == first_letter_of(name(eagle)) => not eat_food(blobfish, food_of(tilapia))\norder(rule10) > order(rule1) = True\norder(rule15) > order(rule7) = True\norder(rule3) > order(rule11) = True\norder(rule3) > order(rule14) = True\norder(rule4) > order(rule13) = True\norder(rule5) > order(rule2) = True\norder(rule6) > order(rule7) = True\n\nremove(baboon, piece_of(blobfish)) = True\nhas(blobfish, bench) = True\nname(blobfish, Lucy) = True\nhas(hare, card_with(white_color)) = True\nname(hare, Lola) = True\nname(lion, Luna) = True\nfriends(sheep) = 13\nhas(sheep, bench) = True\n\nquestion = knock_down_fortress(sheep, salmon)\n"}, {"idx": 170, "response": "prepare_armor(grasshopper, hippopotamus) = rule1()\nprepare_armor(grasshopper, hippopotamus) == True\nraise_flag_of_peace(hippopotamus, cow) = True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(grasshopper, hippopotamus) => raise_flag_of_peace(hippopotamus, cow)\nrule2(something) = knows(defensive_plans_of(halibut), something) & owes_money_to(something, caterpillar) => not prepare_armor(something, hippopotamus)\nrule3() = has(snail, connect_to_internet(device)) => not show_cards(snail, grasshopper)\nrule4() = has(cat, musical_instrument) => not give_magnifier(cat, grasshopper)\nrule5() = first_letter_of(name(snail)) == first_letter_of(name(sheep)) => not show_all_cards(snail, grasshopper)\nrule6() = has_high_salary(cat) => give_magnifier(cat, grasshopper)\nrule7() = friends(grasshopper) > 1 => knows(defense_plan_of(halibut), grasshopper)\nrule8() = has(cat, drink) => not give_magnifier(cat, grasshopper)\nrule9() = has(snail, connect_to_internet(device)) => show_all_cards(snail, grasshopper)\nrule10() = show_all_cards(snail, grasshopper) & not give_magnifier(cat, grasshopper) => prepare_armor(grasshopper, hippopotamus)\norder(rule2) > order(rule10) = True\norder(rule3) > order(rule9) = True\norder(rule5) > order(rule9) = True\norder(rule6) > order(rule4) = True\norder(rule6) > order(rule8) = True\n\nhas(cat, cutter) = True\nhas(cat, violin) = True\nfriends(grasshopper) = 11\nhas(snail, cell_phone) = True\nhas(snail, knapsack) = True\nname(snail, Luna) = True\n\nquestion = raise_flag_of_peace(hippopotamus, cow)\n"}, {"idx": 171, "response": "not sing_song(carp, victory_song_for(baboon)) = rule2()\nsing_song(carp, victory_song_for(baboon)) == False\nwink(baboon, panda_bear) = question = True", "answer": 1, "code": "rule1() = enemy(something, lion) & not roll_dice(something, elephant) => attack(something, green_fields_owned_by(moose))\nrule2() = not sing_song(carp, victory_song_for(baboon)) => wink(baboon, panda_bear)\nrule3() = attack(something, green_fields_owned_by(moose)) => not sing_song(carp, victory_song_for(baboon))\nrule4() = first_letter_of(name(ferret)) == first_letter_of(name(raven)) => not attack(ferret, green_fields_owned_by(moose))\nrule5(something) = not proceed(something, spot_right_after(spot_of(sun_bear))) => not wink(something, panda_bear)\norder(rule4) > order(rule1) = True\norder(rule5) > order(rule2) = True\n\nenemy(ferret, lion) = True\nname(ferret, Lily) = True\nnot roll_dice(ferret, elephant) = True\n\nquestion = wink(baboon, panda_bear)\n"}, {"idx": 172, "response": "not burn(warehouse_of(oscar), raven) = rule1()\nnot burn(warehouse_of(oscar), raven) == True\nwink(oscar, halibut) = rule4()\nwink(oscar, halibut) == True\nwink(oscar, halibut) == True\nnot know_defensive_plans(halibut, cockroach) = rule2()\nnot know_defensive_plans(halibut, cockroach) == True\nquestion = True", "answer": 1, "code": "rule1() = not burn(warehouse_of(oscar), raven) => learn_basics_of_resource_management(oscar, panther)\nrule2() = points(jellyfish) == points(halibut) & wink(oscar, halibut) => not know_defensive_plans(halibut, cockroach)\nrule3() = needs_support(something, pig) => respects(salmon, jellyfish)\nrule4() = learn_elementary_resource_management(something, panther) => wink(something, halibut)\nrule5() = respects(salmon, jellyfish) => points(jellyfish) == points(halibut)\nrule6() = not needs_support(turtle, jellyfish) => not points(jellyfish) == points(halibut)\norder(rule6) > order(rule5) = True\n\nneeds_support(donkey, pig) = True\ngive(oscar, magnifier, swordfish) = True\nfriends(salmon) = 11\nname(salmon, Lola) = True\nname(squirrel, Lucy) = True\nnot burn(warehouse_of(oscar), raven) = True\n\nquestion = know_defensive_plans(halibut, cockroach)\n"}, {"idx": 173, "response": "respects(leopard, bat) == True\neat_food(leopard, food_of(bat)) = rule4()\neat_food(leopard, food_of(bat)) == True\neat_food(leopard, food_of(bat)) == True\nquestion = True", "answer": 1, "code": "rule1() = enemy_of(something, cheetah) => eat_food(cricket, food_of(salmon))\nrule2(something) = not prepare_armor(something, catfish) => not eat_food(something, food_of(salmon))\nrule3() = roll_dice(something, wolverine) => enemy_of(moose, cheetah)\nrule4() = eat_food(leopard, food_of(bat)) => roll_dice(bat, wolverine)\norder(rule2) > order(rule1) = True\n\nrespects(leopard, bat) = True\n\nquestion = eat_food(cricket, food_of(salmon))\n"}, {"idx": 174, "response": "name(octopus, Casper) == True\nfirst_letter_of(name(octopus)) == 'C'\nname(amberjack, Tango) == True\nfirst_letter_of(name(amberjack)) == 'T'\nfirst_letter_of(name(octopus)) == first_letter_of(name(amberjack)) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(octopus)) == first_letter_of(name(amberjack)) => burn(warehouse_of(cow))\nrule2() = has(panther, connect_to_internet(device)) => steal_points(panther, 5, doctorfish)\nrule3() = first_letter_of(name(mosquito)) == first_letter_of(name(cow)) => roll_dice(mosquito, doctorfish)\nrule4() = eat_food(doctorfish, food_of(wolverine)) => show_all_cards(wolverine, sheep)\nrule5() = points(raven) == points(panther) => not steal_points(panther, 5, doctorfish)\nrule6() = has(octopus, musical_instrument) => burn(warehouse_of(cow))\nrule7() = roll_dice(mosquito, doctorfish) & steal_points(panther, 5, doctorfish) => eat_food(doctorfish, food_of(wolverine))\norder(rule5) > order(rule2) = True\n\nname(amberjack, Tango) = True\nname(cow, Meadow) = True\nname(mosquito, Mojo) = True\npublished_high_quality_paper(mosquito) = True\nhas(octopus, flute) = True\nname(octopus, Casper) = True\nhas(panther, computer) = True\n\nquestion = show_all_cards(wolverine, sheep)\n"}, {"idx": 175, "response": "has(crocodile, card_with(white_color)) == True\nhas(crocodile, connect_to_internet(device)) == False\nnot show_cards(crocodile, rabbit) = rule7()\nshow_cards(crocodile, rabbit) == False\nhas(crocodile, something_to_sit_on) == True\nshow_cards(crocodile, rabbit) = rule1()\nshow_cards(crocodile, rabbit) == True\nshow_cards(crocodile, rabbit) == True\nnot give_magnifying_glass(crocodile, sun_bear) = rule10()\ngive_magnifying_glass(crocodile, sun_bear) == False\nneed_support(sun_bear, hummingbird) = rule8()\nneed_support(sun_bear, hummingbird) == True\nquestion = True", "answer": 1, "code": "rule1() = has(crocodile, something_to_sit_on) => show_cards(crocodile, rabbit)\nrule2() = has(tiger, something_to_sit_on) => steal_points(tiger, 5, kudu)\nrule3() = friends(eel) > 10 => sing_song(eel, victory_song_for(lobster))\nrule4() = learn_basics_of_resource_management(something, kiwi) => show_cards(crocodile, spider)\nrule5() = sing_song(something, victory_song_for(lobster)) => sing_song(kudu, victory_song_for(sun_bear))\nrule6() = has(crocodile, card_with(color_in_flag_of_Japan)) => not show_cards(crocodile, rabbit)\nrule7() = has(crocodile, connect_to_internet(device)) => not show_cards(crocodile, rabbit)\nrule8() = sing_song(kudu, victory_song_for(sun_bear)) & give_magnifying_glass(crocodile, sun_bear) => not need_support(sun_bear, hummingbird)\nrule9() = eat_food(something, food_of(salmon)) => give_magnifying_glass(crocodile, sun_bear)\nrule10() = show_cards(something, spider) & not show_cards(something, rabbit) => not give_magnifying_glass(something, sun_bear)\nrule11() = has_high_salary(eel) => sing_song(eel, victory_song_for(lobster))\nrule12() = has(tiger, card_with(color_starting_with(\"g\"))) => steal_points(tiger, 5, kudu)\nrule13() = sing_song(starfish, victory_song_for(sheep)) => eat_food(sheep, food_of(salmon))\norder(rule1) > order(rule6) = True\norder(rule1) > order(rule7) = True\norder(rule9) > order(rule10) = True\n\nhas(crocodile, card_with(white_color)) = True\nhas(crocodile, club_chair) = True\nfriends(eel) = 14\nhas_low_income_job(eel) = True\nsing_song(starfish, victory_song_for(sheep)) = True\nhas(tiger, banana_strawberry_smoothie) = True\nhas(tiger, card_with(green_color)) = True\nlearn_basics_of_resource_management(whale, kiwi) = True\n\nquestion = need_support(sun_bear, hummingbird)\n"}, {"idx": 176, "response": "not burn(warehouse_of(black_bear), grasshopper) = True\nburn(warehouse_of(black_bear), grasshopper) = False\norder(rule1) > order(rule14) = True\norder(rule1) > order(rule5) = True\norder(rule7) > order(rule12) = True\norder(rule7) > order(rule2) = True\nkilled(black_bear, mayor) = True\nroll_dice(black_bear, cockroach) = rule5()\nroll_dice(black_bear, cockroach) = True\nroll_dice(black_bear, cockroach) = True\ngive_magnifier(black_bear, eel) = rule9()\ngive_magnifier(black_bear, eel) = True\ngive_magnifier(black_bear, eel) = True\nquestion = True", "answer": 1, "code": "rule1() = not burn(warehouse_of(black_bear), grasshopper) => not roll_dice(black_bear, cockroach)\nrule2() = friends(meerkat) > 9 => not give_magnifying_glass(meerkat, spider)\nrule3() = friends(kudu) > 5 => roll_dice(kudu, tilapia)\nrule4() = respect(polar_bear, lobster) => attack(lobster, green_fields_of(black_bear))\nrule5() = killed(black_bear, mayor) => roll_dice(black_bear, cockroach)\nrule6() = has(polar_bear, drink) => respect(polar_bear, lobster)\nrule7() = first_letter_of(name(meerkat)) == first_letter_of(name(cheetah)) => give_magnifier(meerkat, spider)\nrule8() = enemy(meerkat, spider) => eat_food(spider, food_of(black_bear))\nrule9() = belief(attack(lobster, green_fields_of(black_bear))) & belief(eat_food(spider, food_of(black_bear))) => give_magnifier(black_bear, eel)\nrule10() = exists_animal(roll_dice(animal, tilapia)) => sing_song(black_bear, victory_song_for(puffin))\nrule11(something) = roll_dice(something, cockroach) => not sing_song(something, victory_song_for(kudu))\nrule12() = has(meerkat, leafy_green_vegetable) => not give_magnifying_glass(meerkat, spider)\nrule13() = has(kudu, connect_to_internet(device)) => roll_dice(kudu, tilapia)\nrule14() = has(black_bear, carry_apples_and_oranges) => roll_dice(black_bear, cockroach)\norder(rule1) > order(rule14) = True\norder(rule1) > order(rule5) = True\norder(rule7) > order(rule12) = True\norder(rule7) > order(rule2) = True\n\nkilled(black_bear, mayor) = True\nhas(black_bear, trumpet) = True\nname(cheetah, Cinnamon) = True\nfriends(kudu) = 2\nhas(kudu, computer) = True\nhas(meerkat, violin) = True\nname(meerkat, Charlie) = True\ngot_job(polar_bear, well_paid) = True\nhas(polar_bear, beer) = True\nhas(polar_bear, cello) = True\nnot burn(warehouse_of(black_bear), grasshopper) = True\n\nquestion = give_magnifier(black_bear, eel)\n"}, {"idx": 177, "response": "steal_points(koala, 5, meerkat) == True\nnot attack_green_fields(snail, hippopotamus) = rule3()\nattack_green_fields(snail, hippopotamus) == False\nquestion = False", "answer": -1, "code": "rule1(something) = not steal_points(something, 5, parrot) & knows(defensive_plans_of(wolverine), something) => attack_green_fields(something, hippopotamus)\nrule2() = owns(meerkat, luxury_aircraft) => not learn_basics_of_resource_management(meerkat, moose)\nrule3() = steal_points(something, 5, puffin) => not attack_green_fields(snail, hippopotamus)\nrule4() = learn_basics_of_resource_management(something, moose) => not steal_points(snail, 5, parrot)\nrule5() = offer_job_position(dog, meerkat) & steal_points(koala, 5, meerkat) => learn_elementary_resource_management(meerkat, moose)\nrule6(something) = points(something) == points(salmon) => roll_dice(something, snail)\nrule7() = roll_dice(whale, snail) => knows(defense_plan_of(wolverine), snail)\norder(rule2) > order(rule5) = True\norder(rule3) > order(rule1) = True\n\noffer_job_position(dog, meerkat) = True\nsteal_points(koala, 5, meerkat) = True\npoints(whale) == points(salmon) = True\n\nquestion = attack_green_fields(snail, hippopotamus)\n"}, {"idx": 178, "response": "friends(pig) = 11\nfriends(sun_bear, kind) = 1\nfriends(sun_bear, not_kind) = 5\nhas(sun_bear, card_with(indigo_color)) = True\nbecome_enemy(whale, goldfish) = True\n\neats_food(something, food_of(panda_bear)) = rule1()\neats_food(something, food_of(panda_bear)) == False\nsing_song(tiger, victory_song_for(grizzly_bear)) = rule1()\nsing_song(tiger, victory_song_for(grizzly_bear)) == True\nsing_song(tiger, victory_song_for(grizzly_bear)) == True\n\nquestion = True", "answer": 1, "code": "rule1() = eats_food(something, food_of(panda_bear)) => sing_song(tiger, victory_song_for(grizzly_bear))\nrule2() = not knock_down(sun_bear, fortress_of(tiger)) & not eats_food(cockroach, food_of(tiger)) => never_become_enemy(tiger, cat)\nrule3() = friends(sun_bear) > 2 => not knock_down(sun_bear, fortress_of(tiger))\nrule4() = has(pig, drink) => sing_song(pig, victory_song_for(tiger))\nrule5() = steals_points(something, 5, zander) => knock_down(something, fortress_of(tiger))\nrule6() = sing_song(pig, victory_song_for(tiger)) => respects(tiger, eel)\nrule7() = has(sun_bear, card_with(primary_color)) => not knock_down(sun_bear, fortress_of(tiger))\nrule8() = burn(warehouse_of(moose), something) => become_enemy(tiger, cat)\nrule9() = friends(pig) < 9 => sing_song(pig, victory_song_for(tiger))\nrule10(something) = not become_enemy(something, cat) & respects(something, eel) => not sing_song(something, victory_song_for(grizzly_bear))\nrule11() = become_enemy(something, goldfish) => not eats_food(cockroach, food_of(tiger))\norder(rule1) > order(rule10) = True\norder(rule5) > order(rule3) = True\norder(rule5) > order(rule7) = True\norder(rule8) > order(rule2) = True\n\nfriends(pig) = 11\nhas(pig, beer) = True\nfriends(sun_bear, kind) = 1\nfriends(sun_bear, not_kind) = 5\nhas(sun_bear, card_with(indigo_color)) = True\nbecome_enemy(whale, goldfish) = True\n\nquestion = sing_song(tiger, victory_song_for(grizzly_bear))\n"}, {"idx": 179, "response": "question = unknown", "answer": 0, "code": "rule1() = steal_points(crocodile, 5, amberjack) & proceed(grasshopper, spot_right_after(spot_of(amberjack))) => remove(amberjack, piece_of(swordfish))\nrule2() = friends(crocodile) < 9 => steal_points(crocodile, 5, amberjack)\nrule3() = friends(grasshopper) < 4 => proceed(grasshopper, spot_right_after(spot_of(amberjack)))\nrule4() = not wink(gecko, crocodile) => not steal_points(crocodile, 5, amberjack)\nrule5(something) = remove(something, piece_of(swordfish)) => burn(warehouse_of(snail))\nrule6() = first_letter_of(name(crocodile)) == first_letter_of(name(kangaroo)) => steal_points(crocodile, 5, amberjack)\norder(rule2) > order(rule4) = True\norder(rule6) > order(rule4) = True\n\nfriends(crocodile) = 10\nname(crocodile, Milo) = True\nfriends(grasshopper) = 12\nnot steal_points(grasshopper, 5, hippopotamus) = True\nknows(defensive_plans_of(sheep), grasshopper) = True\nname(kangaroo, Meadow) = True\n\nquestion = burn(warehouse_of(snail))\n"}, {"idx": 180, "response": "has(caterpillar, knapsack) == True\nowes_money_to(caterpillar, tilapia) = rule6()\nowes_money_to(caterpillar, tilapia) == False\nrespects(eel, lobster) = rule4()\nrespects(eel, lobster) == True\nnot knock_down(caterpillar, fortress_of(lobster)) = rule7()\nknock_down(caterpillar, fortress_of(lobster)) == False\nsteal_points(lobster, 5, halibut) = rule7()\nsteal_points(lobster, 5, halibut) == True\nquestion = True", "answer": 1, "code": "rule1() = owes_money_to(something, tilapia) => not knock_down(something, fortress_of(lobster))\nrule2() = sing_song(spider, victory_song_for(mosquito)) => sing_song(mosquito, victory_song_for(eel))\nrule3() = has(caterpillar, carry_apples_and_oranges) => owes_money_to(caterpillar, tilapia)\nrule4() = sing_song(mosquito, victory_song_for(eel)) => respects(eel, lobster)\nrule5() = first_letter_of(name(caterpillar)) == first_letter_of(name(salmon)) => owes_money_to(caterpillar, tilapia)\nrule6() = has(caterpillar, sit_on_something) => not owes_money_to(caterpillar, tilapia)\nrule7() = respects(eel, lobster) & not knock_down(caterpillar, fortress_of(lobster)) => steal_points(lobster, 5, halibut)\norder(rule6) > order(rule3) = True\norder(rule6) > order(rule5) = True\n\nhas(caterpillar, knapsack) = True\nname(caterpillar, Beauty) = True\nname(salmon, Paco) = True\nsing_song(spider, victory_song_for(mosquito)) = True\n\nquestion = steal_points(lobster, 5, halibut)\n"}, {"idx": 181, "response": "give_magnifier(animal, parrot) = rule1()\ngive_magnifier(animal, parrot) == True\nburn(warehouse_of(halibut)) = rule1()\nburn(warehouse_of(halibut)) == True\nquestion = True", "answer": 1, "code": "rule1() = give_magnifier(animal, parrot) => burn(warehouse_of(halibut))\nrule2() = show_cards(eagle, sun_bear) => attack(green_fields_of(amberjack), sun_bear)\nrule3() = give_magnifier(elephant, sun_bear) => not offer_job(sun_bear, swordfish)\nrule4() = first_letter_of(name(sun_bear)) == first_letter_of(name(cheetah)) => not attack(green_fields_of(amberjack), sun_bear)\nrule5() = first_letter_of(name(doctorfish)) == first_letter_of(name(catfish)) => enemy(doctorfish, wolverine)\nrule6() = knock_down(fortress_of(parrot), animal) => remove(swordfish, piece_of(swordfish))\nrule7() = not offer_job(sun_bear, swordfish) & not remove(wolverine, piece_of(swordfish)) => not burn(warehouse_of(halibut))\nrule8() = proceed(pig, spot_right_after(spot_of(doctorfish))) => not enemy(doctorfish, wolverine)\nrule9() = proceed(animal, spot_right_after(spot_of(dog))) => give_magnifier(animal, sun_bear)\nrule10() = enemy(doctorfish, wolverine) => not remove(wolverine, piece_of(swordfish))\nrule11() = offer_job_position(animal, viperfish) => wink(sun_bear, eel)\nrule12() = has(sun_bear, carry_apples_and_oranges) => not attack(green_fields_of(amberjack), sun_bear)\norder(rule1) > order(rule7) = True\norder(rule2) > order(rule12) = True\norder(rule2) > order(rule4) = True\norder(rule6) > order(rule10) = True\norder(rule8) > order(rule5) = True\n\nname(catfish, Luna) = True\nname(cheetah, Pablo) = True\nname(doctorfish, Lucy) = True\nproceed(elephant, spot_right_after(spot_of(dog))) = True\noffer_job_position(goldfish, viperfish) = True\nhas(sun_bear, spinach) = True\nname(sun_bear, Pashmak) = True\n\nquestion = burn(warehouse_of(halibut))\n"}, {"idx": 182, "response": "has(cricket, card_with(blue_color)) == True\nremove(cricket, piece_of(sun_bear)) = rule2()\nremove(cricket, piece_of(sun_bear)) == True\nlearn_basics_of_resource_management(polar_bear, sun_bear) == True\nremove(sun_bear, piece_of(puffin)) = rule2()\nremove(sun_bear, piece_of(puffin)) == True\nquestion = True", "answer": 1, "code": "rule1() = knows(defense_plan_of(polar_bear), sea_bass) => learn_elementary_resource_management(polar_bear, sun_bear)\nrule2() = learn_basics_of_resource_management(polar_bear, sun_bear) & remove(cricket, piece_of(sun_bear)) => remove(sun_bear, piece_of(puffin))\nrule3() = raise_flag_of_peace(something, moose) => prepare_armor(sun_bear, crocodile)\nrule4() = owes_money_to(something, parrot) => remove(something, piece_of(sun_bear))\nrule5() = has_difficulty_finding_food(salmon) => raise_flag_of_peace(salmon, moose)\nrule6() = first_letter_of(name(cricket)) == first_letter_of(name(cow)) => sing_song(cricket, victory_song_for(bat))\nrule7() = has(salmon, card_with(color_starting_with(\"n\"))) => raise_flag_of_peace(salmon, moose)\nrule8() = sing_song(something, victory_song_for(squid)) => proceed(sea_bass, spot_right_after(spot_of(polar_bear)))\nrule9(something) = gives_magnifier(something, cheetah) => not proceed(something, spot_right_after(spot_of(polar_bear)))\nrule10() = not knows(defense_plan_of(lobster), oscar) => burn(warehouse_of(tiger), lobster)\nrule11() = prepare_armor(something, grizzly_bear) & prepare_armor(something, crocodile) => not remove(something, piece_of(puffin))\nrule12(something) = gives_magnifying_glass(something, blobfish) => owes_money_to(cricket, parrot)\nrule13() = friends(cricket) < 1 => sing_song(cricket, victory_song_for(bat))\norder(rule2) > order(rule11) = True\norder(rule9) > order(rule8) = True\n\ngives_magnifier(buffalo, blobfish) = True\nname(cow, Charlie) = True\nhas(cricket, card_with(blue_color)) = True\nname(cricket, Chickpea) = True\nfriends(cricket) = 4\ndreams(lobster, luxury_aircraft) = True\nsing_song(lobster, victory_song_for(squid)) = True\nname(lobster, Peddi) = True\nknows(defense_plan_of(lobster), oscar) = True\nhas(salmon, card_with(indigo_color)) = True\nhas_difficulty_finding_food(salmon) = True\nrolls_dice(spider, phoenix) = True\nname(turtle, Pablo) = True\n\nquestion = remove(sun_bear, piece_of(puffin))\n"}, {"idx": 183, "response": "needs_support(aardvark, moose) == True\noffer_job(cow, moose) == True\nnot burn(warehouse_of(halibut), moose) = rule1()\nburn(warehouse_of(halibut), moose) == False\nenemy(moose, leopard) == True\nburn(warehouse_of(halibut), something) = rule6(something)\nburn(warehouse_of(halibut), something) == True\nburn(warehouse_of(halibut), something) == True\nnot steal_points(something, 5, wolverine) = rule7(something)\nsteal_points(something, 5, wolverine) == False\nsteal_points(something, 5, wolverine) == False\npoints(something) == points(buffalo) = rule7(something)\npoints(something) == points(buffalo) == True\npoints(something) == points(buffalo) == True\nlearn_elementary_resource_management(sheep, squirrel) = rule3(something)\nlearn_elementary_resource_management(sheep, squirrel) == True\nlearn_elementary_resource_management(sheep, squirrel) == True\nquestion = True", "answer": 1, "code": "rule1() = needs_support(aardvark, moose) & offer_job(cow, moose) => not burn(warehouse_of(halibut), moose)\nrule2() = has(moose, musical_instrument) => steal_points(moose, 5, wolverine)\nrule3(something) = points(something) == points(buffalo) => learn_elementary_resource_management(sheep, squirrel)\nrule4() = created_time_machine(moose) => not steal_points(moose, 5, wolverine)\nrule5() = has(moose, card_with(color_starting_with(\"b\"))) => steal_points(moose, 5, wolverine)\nrule6(something) = enemy(something, leopard) => burn(warehouse_of(halibut), something)\nrule7(something) = not steal_points(something, 5, wolverine) & burn(warehouse_of(halibut), something) => points(something) == points(buffalo)\norder(rule1) > order(rule6) = True\norder(rule2) > order(rule4) = True\norder(rule5) > order(rule4) = True\n\nneeds_support(aardvark, moose) = True\nenemy(moose, leopard) = True\nhas(moose, knapsack) = True\ninvented_time_machine(moose) = True\n\nquestion = learn_elementary_resource_management(sheep, squirrel)\n"}, {"idx": 184, "response": "not enemy(baboon, lobster) = rule4()\nenemy(baboon, lobster) == False\nquestion = False", "answer": -1, "code": "rule1() = starts_with(color(card(swordfish)), \"i\") => not knows_defensive_plans(swordfish, cat)\nrule2() = not wink(crocodile, swordfish) => attack(swordfish, green_fields_of(tilapia))\nrule3() = has(swordfish, drink) => knows_defensive_plans(swordfish, cat)\nrule4(something) = burn(warehouse_of(cockroach), something) => not enemy(baboon, lobster)\nrule5() = give(starfish, magnifying_glass, hare) & not show_all_cards(caterpillar, hare) => burn(warehouse_of(cockroach), hare)\nrule6() = has(starfish, sit_on) => give(starfish, magnifying_glass, hare)\nrule7() = has(caterpillar, sit_on) => not show_all_cards(caterpillar, hare)\nrule8(something) = eat(something, food_of(penguin)) => not actual_enemy(swordfish, baboon)\nrule9() = friends(swordfish) < 3 => knows_defense_plan(swordfish, cat)\nrule10() = friends(caterpillar) < 12 => not show_all_cards(caterpillar, hare)\nrule11() = starts_with(color(card(caterpillar)), \"y\") => show_all_cards(caterpillar, hare)\nrule12(something) = not knows_defensive_plans(something, cat) & attack(something, green_fields_of(tilapia)) => actual_enemy(something, baboon)\norder(rule10) > order(rule11) = True\norder(rule3) > order(rule1) = True\norder(rule7) > order(rule11) = True\norder(rule8) > order(rule12) = True\norder(rule9) > order(rule1) = True\n\nhas(caterpillar, card_with(yellow_color)) = True\nhas(caterpillar, club_chair) = True\nfriends(caterpillar) = 10\nhas(caterpillar, cello) = True\nhas(starfish, bench) = True\nfriends(swordfish, easy_going) = 4\nfriends(swordfish, not_easy_going) = 1\nhas(swordfish, card_with(indigo_color)) = True\nnot wink(crocodile, swordfish) = True\n\nquestion = enemy(baboon, lobster)\n"}, {"idx": 185, "response": "has(buffalo, card_with(orange_color)) == True\nnot owes_money_to(buffalo, polar_bear) = rule1()\nowes_money_to(buffalo, polar_bear) == False\nhas(viperfish, card_with(blue_color)) == True\nrespects(viperfish, kangaroo) = rule2()\nrespects(viperfish, kangaroo) == True\nrespects(viperfish, kangaroo) == True\nnot raise_flag_of_peace(wolverine, wolverine) = rule3(wolverine)\nraise_flag_of_peace(wolverine, wolverine) == False\nraise_flag_of_peace(wolverine, wolverine) == False\nnot raise_flag_of_peace(wolverine, wolverine) == True\nlearn_elementary_resource_management(polar_bear, wolverine) = rule4()\nlearn_elementary_resource_management(polar_bear, wolverine) == True\nproceed(wolverine, spot_right_after(spot_of(panther))) == True\nquestion = True", "answer": 1, "code": "rule1() = has(buffalo, card_with(primary_color)) => not owes_money_to(buffalo, polar_bear)\nrule2() = has(viperfish, card_with(color_in(rainbow_colors))) => respects(viperfish, kangaroo)\nrule3(something) = not holds_same_number_of_points_as(something, moose) & respects(something, kangaroo) => not raise_flag_of_peace(something, wolverine)\nrule4() = not raise_flag_of_peace(viperfish, wolverine) & learn_elementary_resource_management(polar_bear, wolverine) => proceed(wolverine, spot_right_after(spot_of(panther)))\nrule5() = first_letter_of(name(viperfish)) == first_letter_of(name(canary)) => not holds_same_number_of_points_as(viperfish, moose)\nrule6() = not owes_money_to(buffalo, polar_bear) => learn_basics_of_resource_management(polar_bear, wolverine)\nrule7() = first_letter_of(name(buffalo)) == first_letter_of(name(tilapia)) => not owes_money_to(buffalo, polar_bear)\nrule8() = has(buffalo, sharp_object) => owes_money_to(buffalo, polar_bear)\nrule9() = becomes_enemy_of(something, gecko) => not respects(viperfish, kangaroo)\norder(rule8) > order(rule1) = True\norder(rule8) > order(rule7) = True\norder(rule9) > order(rule2) = True\n\nhas(buffalo, card_with(orange_color)) = True\nhas(buffalo, cutter) = True\nname(buffalo, Cinnamon) = True\nhas(buffalo, guitar) = True\nname(canary, Lily) = True\nname(tilapia, Chickpea) = True\nhas(viperfish, card_with(blue_color)) = True\nname(viperfish, Lola) = True\n\nquestion = proceed(wolverine, spot_right_after(spot_of(panther)))\n"}, {"idx": 186, "response": "has(kudu, card_with(primary_color)) == True\nnot needs_support(kudu, panther) = rule5()\nneeds_support(kudu, panther) == False\ngive_magnifying_glass(kudu, sheep) = rule2()\ngive_magnifying_glass(kudu, sheep) == True\ngive_magnifying_glass(kudu, sheep) == True\nquestion = True", "answer": 1, "code": "rule1() = has(phoenix, card_with(color_starting_with(\"g\"))) => not offer_job(phoenix, kudu)\nrule2() = attack_green_fields(something, aardvark) => give_magnifying_glass(kudu, sheep)\nrule3(something) = not prepare_armor(something, jellyfish) & respects(something, dog) => not give_magnifying_glass(something, sheep)\nrule4(something) = needs_support(something, panther) => respects(something, dog)\nrule5() = has(kudu, card_with(primary_color)) => not needs_support(kudu, panther)\nrule6() = first_letter_of(name(kudu)) == first_letter_of(name(kiwi)) => not needs_support(kudu, panther)\nrule7() = fan_of(kangaroo, Chris_Ronaldo) => sing_song(kangaroo, victory_song_for(whale))\nrule8() = has(kangaroo, card_with(color_in_flag_of(Japan))) => sing_song(kangaroo, victory_song_for(whale))\nrule9() = not offer_job(phoenix, kudu) & not learn_basics_of_resource_management(koala, kudu) => not respects(kudu, dog)\nrule10(something) = sing_song(something, victory_song_for(whale)) => attack_green_fields(something, aardvark)\nrule11() = wink(leopard, kudu) => needs_support(kudu, panther)\nrule12() = eat_food(catfish, food_of(kangaroo)) => not attack_green_fields(kangaroo, aardvark)\norder(rule12) > order(rule10) = True\norder(rule3) > order(rule2) = True\norder(rule5) > order(rule11) = True\norder(rule6) > order(rule11) = True\norder(rule9) > order(rule4) = True\n\nhas(kangaroo, card_with(green_color)) = True\nfan_of(kangaroo, Chris_Ronaldo) = True\nname(kiwi, Tango) = True\nhas(kudu, card_with(white_color)) = True\nwink(leopard, kudu) = True\nhas(phoenix, card_with(green_color)) = True\n\nquestion = give_magnifying_glass(kudu, sheep)\n"}, {"idx": 187, "response": "not burn(warehouse_of(parrot), cockroach) = rule2()\nburn(warehouse_of(parrot), cockroach) == False\nquestion = False", "answer": -1, "code": "rule1() = give_magnifying_glass(something, kudu) => respect(something, panther)\nrule2() = attack_green_fields(halibut, cockroach) => not burn(warehouse_of(parrot), cockroach)\nrule3() = knows(defense_plan_of(bat), something) => not remove(eagle, piece_of(halibut))\nrule4() = not prepare_armor(meerkat, cockroach) => give_magnifier(cockroach, kudu)\nrule5() = has(wolverine, card_with(color_in_flag_of_belgium)) => not attack_green_fields(wolverine, kudu)\nrule6(something) = knock_down(fortress_of(doctorfish), something) & respect(something, panther) => burn(warehouse_of(parrot), something)\nrule7() = voted_for(wolverine, mayor) => not attack_green_fields(wolverine, kudu)\nrule8() = knock_down(fortress_of(wolverine), whale) => attack_green_fields(wolverine, kudu)\nrule9() = not raise_flag_of_peace(black_bear, halibut) => not attack_green_fields(halibut, cockroach)\nrule10() = remove(eagle, piece_of(something)) => attack_green_fields(something, cockroach)\nrule11() = not prepare_armor(blobfish, halibut) & not remove(eagle, piece_of(oscar)) => remove(eagle, piece_of(halibut))\norder(rule3) > order(rule11) = True\norder(rule5) > order(rule8) = True\norder(rule6) > order(rule2) = True\norder(rule7) > order(rule8) = True\norder(rule9) > order(rule10) = True\n\nknock_down(fortress_of(wolverine), whale) = True\nassassinated(wolverine, mayor) = True\nnot prepare_armor(blobfish, halibut) = True\nnot prepare_armor(meerkat, cockroach) = True\nnot remove(eagle, piece_of(oscar)) = True\n\nquestion = burn(warehouse_of(parrot), cockroach)\n"}, {"idx": 188, "response": "prepare_armor(dog, donkey) == True\nknock_down(pig, fortress_of(donkey)) = rule2()\nknock_down(pig, fortress_of(donkey)) == True\nknock_down(pig, fortress_of(donkey)) == True\nnot knock_down(pig, fortress_of(donkey)) = rule5()\nnot knock_down(pig, fortress_of(donkey)) == False\nsteal_points(sheep, 5, buffalo) == True\nroll_dice(buffalo, pig) = rule7()\nroll_dice(buffalo, pig) == True\nroll_dice(buffalo, pig) == True\noffer_job_position(parrot, pig) = rule6()\noffer_job_position(parrot, pig) == True\noffer_job_position(parrot, pig) == True\nsing_song(pig, victory_song_for(panda_bear)) = rule6()\nsing_song(pig, victory_song_for(panda_bear)) == True\nsing_song(pig, victory_song_for(panda_bear)) == True\ngive_magnifier(pig, raven) = rule1()\ngive_magnifier(pig, raven) == True\ngive_magnifier(pig, raven) == True\nsing_song(pig, victory_song_for(panda_bear)) == True\nattack_green_fields(pig, baboon) = rule10(pig)\nattack_green_fields(pig, baboon) == True\nattack_green_fields(pig, baboon) == True\nquestion = True", "answer": 1, "code": "rule1() = knock_down(something, fortress_of(donkey)) => give_magnifier(something, raven)\nrule2() = prepare_armor(something, donkey) => knock_down(pig, fortress_of(donkey))\nrule3(something) = show_cards(something, snail) => not sing_song(something, victory_song_for(panda_bear))\nrule4() = not learn_elementary_resource_management(panther, pig) => not show_cards(pig, snail)\nrule5() = friends(pig) > 9 => not knock_down(pig, fortress_of(donkey))\nrule6() = roll_dice(buffalo, pig) & offer_job_position(parrot, pig) => sing_song(pig, victory_song_for(panda_bear))\nrule7() = steal_points(sheep, 5, buffalo) => roll_dice(buffalo, pig)\nrule8() = first_letter_of(name(parrot)) == first_letter_of(name(grasshopper)) => offer_job_position(parrot, pig)\nrule9() = knows(defensive_plans_of(pig), caterpillar) => show_cards(pig, snail)\nrule10(something) = give_magnifier(something, raven) & sing_song(something, victory_song_for(panda_bear)) => attack_green_fields(something, baboon)\norder(rule2) > order(rule5) = True\norder(rule3) > order(rule6) = True\norder(rule4) > order(rule9) = True\n\nhas(buffalo, love_seat_sofa) = True\nname(buffalo, Beauty) = True\nknows(defensive_plans_of(pig), caterpillar) = True\nname(cricket, Lola) = True\nprepare_armor(dog, donkey) = True\nname(grasshopper, Mojo) = True\nhas(parrot, card_with(violet_color)) = True\nfriends(parrot) = 7\nname(parrot, Max) = True\nsteal_points(sheep, 5, buffalo) = True\nnot learn_elementary_resource_management(panther, pig) = True\n\nquestion = attack_green_fields(pig, baboon)\n"}, {"idx": 189, "response": "has(lobster, card_with(blue_color)) == True\nlearn_basics_of_resource_management(lobster, meerkat) = rule9()\nlearn_basics_of_resource_management(lobster, meerkat) == True\nlearn_basics_of_resource_management(lobster, meerkat) == True\nneeds_support(aardvark, meerkat) = rule1()\nneeds_support(aardvark, meerkat) == False\nfriends(aardvark) = 17\nneeds_support(aardvark, meerkat) == False\nsteals_points(meerkat, 5, cheetah) = rule7()\nsteals_points(meerkat, 5, cheetah) == True\nsteals_points(meerkat, 5, cheetah) == True\nburn(warehouse_of(catfish), meerkat) = rule5()\nburn(warehouse_of(catfish), meerkat) == True\nburn(warehouse_of(catfish), meerkat) == True\nquestion = True", "answer": 1, "code": "rule1() = has(aardvark, leafy_green_vegetable) => not needs_support(aardvark, meerkat)\nrule2() = give(magnifying_glass, grizzly_bear, something) => not needs_support(octopus, grizzly_bear)\nrule3(something) = enemy(something, koala) => needs_support(something, grizzly_bear)\nrule4() = not show_cards(phoenix, lobster) => not learn_basics_of_resource_management(lobster, meerkat)\nrule5(something) = steals_points(something, 5, cheetah) => burn(warehouse_of(catfish), something)\nrule6() = friends(aardvark) > 8 => needs_support(aardvark, meerkat)\nrule7() = learn_basics_of_resource_management(lobster, meerkat) & needs_support(aardvark, meerkat) => steals_points(meerkat, 5, cheetah)\nrule8() = needs_support(something, grizzly_bear) => raise_flag_of_peace(eel, rabbit)\nrule9() = has(lobster, card_with(color_starting_with(\"b\"))) => learn_basics_of_resource_management(lobster, meerkat)\norder(rule1) > order(rule6) = True\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule9) = True\n\nfriends(aardvark) = 17\nhas(lobster, card_with(blue_color)) = True\nenemy(octopus, koala) = True\n\nquestion = burn(warehouse_of(catfish), meerkat)\n"}, {"idx": 190, "response": "name(cat, Bella) == True\nname(gecko, Tarzan) == True\nfirst_letter_of(name(cat)) == first_letter_of(name(gecko)) == True\nnot burn_warehouse(cat, hummingbird) = rule1()\nburn_warehouse(cat, hummingbird) == False\nfriends(cat) = 4\nfriends(cat) < 14 == True\nnot burn_warehouse(cat, hummingbird) = rule2()\nburn_warehouse(cat, hummingbird) == False\nlearn_resource_management(hummingbird, cricket) = rule4(hummingbird)\nlearn_resource_management(hummingbird, cricket) == False\nnot learn_resource_management(hummingbird, cricket) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(cat)) == first_letter_of(name(gecko)) => not burn_warehouse(cat, hummingbird)\nrule2() = friends(cat) < 14 => not burn_warehouse(cat, hummingbird)\nrule3(something) = give_magnifier(something, whale) => remove_piece(cockroach, hummingbird)\nrule4(something) = offer_job(something, penguin) => not learn_resource_management(something, cricket)\nrule5() = not burn_warehouse(cat, hummingbird) => offer_job(hummingbird, penguin)\nrule6() = friends(polar_bear) < 4 => knows_defense_plan(polar_bear, cockroach)\nrule7() = has(polar_bear, something_to_sit_on) => knows_defensive_plans(polar_bear, cockroach)\nrule8() = knows_defense_plan(something, cockroach) => needs_support(sheep, hummingbird)\nrule9(something) = becomes_enemy(something, snail) & attacks_green_fields(something, owner(sun_bear)) => give_magnifying_glass(something, whale)\n\nassassinated(cat, mayor) = True\nfriends(cat) = 4\nname(cat, Bella) = True\nhas(cat, card_with(orange_color)) = True\nname(gecko, Tarzan) = True\nfriends(polar_bear) = 3\nhas(polar_bear, violin) = True\nattacks_green_fields(starfish, owner(sun_bear)) = True\nbecomes_enemy(starfish, snail) = True\n\nquestion = learn_resource_management(hummingbird, cricket)\n"}, {"idx": 191, "response": "difficulty_finding_food(grasshopper) == True\nenemy(grasshopper, koala) = rule5()\nenemy(grasshopper, koala) == True\nenemy(grasshopper, koala) == True\nhas(buffalo, romaine_lettuce) == True\npoints(buffalo) == points(kudu) = rule6()\npoints(buffalo) == points(kudu) == True\npoints(buffalo) == points(kudu) == True\nraise_flag_of_peace(polar_bear, elephant) = rule4()\nraise_flag_of_peace(polar_bear, elephant) == True\nraise_flag_of_peace(polar_bear, elephant) == True\nquestion = True", "answer": 1, "code": "rule1() = burn(warehouse_of(koala), grasshopper) => owes_money_to(koala, polar_bear)\nrule2() = points(belief, buffalo) == points(kudu) & not proceed(goldfish, spot_right_after(spot_of(kudu))) => attack(kudu, green_fields_of(snail))\nrule3() = first_letter_of(name(goldfish)) == first_letter_of(name(blobfish)) => not proceed(goldfish, spot_right_after(spot_of(kudu)))\nrule4() = owes_money_to(koala, polar_bear) => raise_flag_of_peace(polar_bear, elephant)\nrule5() = difficulty_finding_food(grasshopper) => enemy(grasshopper, koala)\nrule6() = has(buffalo, leafy_green_vegetable) => points(buffalo) == points(kudu)\n\nname(blobfish, Luna) = True\nhas(buffalo, romaine_lettuce) = True\nname(goldfish, Lily) = True\nraise_flag_of_peace(goldfish, oscar) = True\nwink(goldfish, hippopotamus) = True\ndifficulty_finding_food(grasshopper) = True\n\nquestion = raise_flag_of_peace(polar_bear, elephant)\n"}, {"idx": 192, "response": "owes_money_to(kiwi, squid) == False\nbelieves(crocodile_needs_support(squid)) == True\nknows_defensive_plans(squid, doctorfish) = rule3()\nknows_defensive_plans(squid, doctorfish) == True\nknows_defensive_plans(squid, doctorfish) == True\nquestion = True", "answer": 1, "code": "rule1() = owes_money_to(someone, sun_bear) => proceed(kiwi, spot_right_after(spot_of(grasshopper)))\nrule2() = has(kiwi, card_with(color_in(rainbow_colors))) => wink(kiwi, starfish)\nrule3() = believes(crocodile_needs_support(squid)) & not owes_money_to(kiwi, squid) => knows_defensive_plans(squid, doctorfish)\nrule4() = has(kiwi, leafy_green_vegetable) => not proceed(kiwi, spot_right_after(spot_of(grasshopper)))\nrule5(something) = show_cards(something, puffin) => needs_support(something, squid)\nrule6() = raise_flag_of_peace(someone, cricket) => remove(spider, piece_of(octopus))\nrule7() = not has(kiwi, keys) => not proceed(kiwi, spot_right_after(spot_of(grasshopper)))\nrule8() = first_letter_of(name(crocodile)) == first_letter_of(name(black_bear)) => show_cards(crocodile, puffin)\nrule9() = wink(someone, raven) => not knows_defensive_plans(squid, doctorfish)\nrule10(something) = sing_song(something, victory_song_for(kudu)) & eat_food(something, elephant) => not show_cards(something, puffin)\nrule11(something) = wink(something, starfish) => not owes_money_to(something, squid)\norder(rule10) > order(rule8) = True\norder(rule4) > order(rule1) = True\norder(rule7) > order(rule1) = True\norder(rule9) > order(rule3) = True\n\nname(black_bear, Lola) = True\nowes_money_to(cat, sun_bear) = True\neat_food(crocodile, elephant) = True\nname(crocodile, Luna) = True\nraise_flag_of_peace(dog, cricket) = True\nhas(kiwi, card_with(violet_color)) = True\nhas(kiwi, cell_phone) = True\n\nquestion = knows_defensive_plans(squid, doctorfish)\n"}, {"idx": 193, "response": "name(panda_bear, Casper) == True\nname(cat, Charlie) == True\nfirst_letter_of(name(panda_bear)) == first_letter_of(name(cat)) == True\nactual_enemy(panda_bear, swordfish) = rule1()\nactual_enemy(panda_bear, swordfish) == True\nactual_enemy(panda_bear, swordfish) == True\nnot need_support(tiger, swordfish) = rule2()\nneed_support(tiger, swordfish) == False\nsteal_points(swordfish, 5, hummingbird) = rule4()\nsteal_points(swordfish, 5, hummingbird) == True\nsteal_points(swordfish, 5, hummingbird) == True\nnot roll_dice(hummingbird, eagle) = rule3()\nroll_dice(hummingbird, eagle) == False\nroll_dice(hummingbird, eagle) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(panda_bear)) == first_letter_of(name(cat)) => actual_enemy(panda_bear, swordfish)\nrule2() = has(tiger, card_with(primary_color)) => not need_support(tiger, swordfish)\nrule3() = steal_points(swordfish, 5, hummingbird) => not roll_dice(hummingbird, eagle)\nrule4() = actual_enemy(panda_bear, swordfish) & not need_support(tiger, swordfish) => steal_points(swordfish, 5, hummingbird)\nrule5() = has(panda_bear, card_with(color_in(flag_of(Netherlands)))) => actual_enemy(panda_bear, swordfish)\nrule6() = respects(sheep, panda_bear) => not actual_enemy(panda_bear, swordfish)\norder(rule6) > order(rule1) = True\norder(rule6) > order(rule5) = True\n\nname(cat, Charlie) = True\nhas(panda_bear, card_with(indigo_color)) = True\nname(panda_bear, Casper) = True\nhas(tiger, card_with(red_color)) = True\nhas(tiger, hot_chocolate) = True\nfriends(tiger) = 4\n\nquestion = roll_dice(hummingbird, eagle)\n"}, {"idx": 194, "response": "prepare_armor(hummingbird, salmon) == True\nnot knock_down_fortress(hummingbird, fortress_of(sea_bass)) = rule1()\nknock_down_fortress(hummingbird, fortress_of(sea_bass)) == False\nwink(hippopotamus, crocodile) = rule3()\nwink(hippopotamus, crocodile) == True\nwink(hippopotamus, crocodile) == True\nquestion = True", "answer": 1, "code": "rule1() = not prepare_armor(something, salmon) => not knock_down_fortress(something, fortress_of(sea_bass))\nrule2() = not has(sea_bass, keys) => prepare_armor(sea_bass, grasshopper)\nrule3() = learn_elementary_resource_management(black_bear, hippopotamus) => wink(hippopotamus, crocodile)\nrule4(something) = needs_support(something, panther) & wink(something, sheep) => steal_points(something, 5, hippopotamus)\nrule5() = first_letter_of(name(sea_bass)) == first_letter_of(name(grizzly_bear)) => needs_support(sea_bass, panther)\nrule6() = knock_down_fortress(animal, fortress_of(sea_bass)) => learn_elementary_resource_management(black_bear, hippopotamus)\nrule7() = has(sea_bass, card_with(color_starting_with(\"i\"))) => needs_support(sea_bass, panther)\nrule8() = respects(hare, hippopotamus) & steal_points(sea_bass, 5, hippopotamus) => not wink(hippopotamus, crocodile)\nrule9() = attack(animal, green_fields_of(cheetah)) => remove(blobfish, piece_of(black_bear))\nrule10() = friends(hummingbird) > 6 => knock_down_fortress(hummingbird, fortress_of(sea_bass))\nrule11() = sing_song(blobfish, victory_song_for(black_bear)) => not learn_elementary_resource_management(black_bear, hippopotamus)\nrule12() = raise_flag_of_peace(animal, baboon) => wink(sea_bass, sheep)\nrule13() = has(hummingbird, card_with(color_in_flag_of_Japan)) => knock_down_fortress(hummingbird, fortress_of(sea_bass))\norder(rule1) > order(rule10) = True\norder(rule1) > order(rule13) = True\norder(rule6) > order(rule11) = True\norder(rule8) > order(rule3) = True\n\nraise_flag_of_peace(dog, baboon) = True\npoints(eel) == points(sea_bass) = True\nname(grizzly_bear, Pablo) = True\nfriends(hummingbird) = 4\nhas(hummingbird, card_with(yellow_color)) = True\nprepare_armor(hummingbird, salmon) = True\nknows(defensive_plans_of(cheetah), parrot) = True\ndreamed(sea_bass, luxury_aircraft) = True\nname(sea_bass, Teddy) = True\nhas(sea_bass, card_with(indigo_color)) = True\nhas(sea_bass, knapsack) = True\nfriends(sea_bass) = 1\n\nquestion = wink(hippopotamus, crocodile)\n"}, {"idx": 195, "response": "has(squid, card_with(violet_color)) == True\nremove(squid, piece_of(cricket)) = rule3()\nremove(squid, piece_of(cricket)) == True\nremove(squid, piece_of(cricket)) == True\nfriends(squid) < 9 = rule5()\nfriends(squid) < 9 == False\nremove(squid, piece_of(cricket)) == True\nfirst_letter_of(name(squid)) == first_letter_of(name(goldfish)) = rule6()\nfirst_letter_of(name(squid)) == first_letter_of(name(goldfish)) == True\nremove(squid, piece_of(cricket)) == True\nroll_dice(salmon, panther) = rule2()\nroll_dice(salmon, panther) == True\noffer_job(baboon, panther) = rule7()\noffer_job(baboon, panther) == True\nroll_dice(salmon, panther) == True\noffer_job(baboon, panther) == True\nraise_flag_of_peace(panther, kudu) = rule8()\nraise_flag_of_peace(panther, kudu) == True\nquestion = True", "answer": 1, "code": "rule1() = show_cards(tiger, eel) => remove(eel, piece_of(caterpillar))\nrule2() = remove(something, piece_of(caterpillar)) => roll_dice(salmon, panther)\nrule3() = has(squid, card_with(color_in(rainbow_colors))) => remove(squid, piece_of(cricket))\nrule4() = friends(cow) > 9 => not roll_dice(cow, baboon)\nrule5() = friends(squid) < 9 => not remove(squid, piece_of(cricket))\nrule6() = first_letter_of(name(squid)) == first_letter_of(name(goldfish)) => not remove(squid, piece_of(cricket))\nrule7() = not roll_dice(cow, baboon) => offer_job(baboon, panther)\nrule8() = roll_dice(salmon, panther) & offer_job(baboon, panther) => raise_flag_of_peace(panther, kudu)\norder(rule3) > order(rule5) = True\norder(rule3) > order(rule6) = True\n\nfriends(cow) = 16\nname(goldfish, Lola) = True\nfriends(squid) = 11\nhas(squid, card_with(violet_color)) = True\nname(squid, Luna) = True\nshow_cards(tiger, eel) = True\n\nquestion = raise_flag_of_peace(panther, kudu)\n"}, {"idx": 196, "response": "struggles_to_find_food(octopus) == True\ngive_magnifier(octopus, squid) = rule3()\ngive_magnifier(octopus, squid) == True\ngive_magnifier(octopus, squid) == True\nnot enemy(turtle, goldfish) = rule6()\nenemy(turtle, goldfish) == False\nenemy(turtle, goldfish) == False\nnot knows(defense_plan_of(goldfish), lion) = rule2()\nknows(defense_plan_of(goldfish), lion) == False\nknows(defense_plan_of(goldfish), lion) == False\nnot attack(goldfish, green_fields_of(parrot)) = rule8()\nattack(goldfish, green_fields_of(parrot)) == False\nattack(goldfish, green_fields_of(parrot)) == False\nquestion = False", "answer": -1, "code": "rule1() = remove(something, piece_of(mosquito)) => knows(defense_plan_of(donkey), turtle)\nrule2() = eats_food(something, food_of(halibut)) => not knows(defensive_plans_of(goldfish), lion)\nrule3() = difficulty_finding_food(octopus) => give_magnifier(octopus, squid)\nrule4(something) = not raise_flag_of_peace(something, baboon) => roll_dice(something, eagle)\nrule5() = not has(ferret, keys) => eats_food(ferret, food_of(halibut))\nrule6() = give_magnifier(something, squid) => not enemy(turtle, goldfish)\nrule7() = owes_money_to(something, kiwi) => not roll_dice(turtle, eagle)\nrule8() = not enemy(turtle, goldfish) & not knows(defense_plan_of(goldfish), lion) => not attack(goldfish, green_fields_of(parrot))\nrule9() = friends(octopus) < 7 => give_magnifying_glass(octopus, squid)\nrule10() = first_letter_of(name(ferret)) == first_letter_of(name(hare)) => eats_food(ferret, food_of(halibut))\norder(rule7) > order(rule4) = True\n\nname(ferret, Lucy) = True\nhas(ferret, keys) = True\nname(hare, Lola) = True\nfriends(octopus, loyal) = 5\nfriends(octopus, non_loyal) = 3\nstruggles_to_find_food(octopus) = True\nremove(snail, piece_of(mosquito)) = True\nnot raise_flag_of_peace(turtle, baboon) = True\n\nquestion = attack(goldfish, green_fields_of(parrot))\n"}, {"idx": 197, "response": "has(rabbit, card_with(green_color) == True\nprepare_armor(rabbit, grasshopper) = rule7()\nprepare_armor(rabbit, grasshopper) == True\nprepare_armor(rabbit, grasshopper) == True\nnot enemy(elephant, bat) == True\npoints(elephant) == points(salmon) = rule2()\npoints(elephant) == points(salmon) == True\npoints(elephant) == points(salmon) == True\nnot sing_song(salmon, victory_song_for(amberjack)) = rule2()\nsing_song(salmon, victory_song_for(amberjack)) == False\nsing_song(salmon, victory_song_for(amberjack)) == False\nroll_dice(amberjack, baboon) = rule1()\nroll_dice(amberjack, baboon) == True\nroll_dice(amberjack, baboon) == True\nquestion = True", "answer": 1, "code": "rule1() = not sing_song(salmon, victory_song_for(amberjack)) => roll_dice(amberjack, baboon)\nrule2() = points(swordfish) == points(salmon) & points(elephant) == points(salmon) => not sing_song(salmon, victory_song_for(amberjack))\nrule3() = has(swordfish, card_with(color_starting_with(\"l\"))) => points(swordfish) == points(salmon)\nrule4() = has(swordfish, something_to_carry(apples, oranges)) => not points(swordfish) == points(salmon)\nrule5() = prepare_armor(something, grasshopper) => sing_song(salmon, victory_song_for(amberjack))\nrule6(something) = not enemy(something, bat) => points(something) == points(salmon)\nrule7() = has(rabbit, card_with(primary_color)) => prepare_armor(rabbit, grasshopper)\nrule8() = has(swordfish, sharp_object) => points(swordfish) == points(salmon)\nrule9() = first_letter_of(name(rabbit)) == first_letter_of(name(tilapia)) => prepare_armor(rabbit, grasshopper)\norder(rule4) > order(rule3) = True\norder(rule4) > order(rule8) = True\norder(rule5) > order(rule2) = True\n\nhas(rabbit, card_with(green_color)) = True\nname(rabbit, Max) = True\nhas(swordfish, card_with(black_color)) = True\nhas(swordfish, cutter) = True\nname(tilapia, Peddi) = True\nnot enemy(elephant, bat) = True\n\nquestion = roll_dice(amberjack, baboon)\n"}, {"idx": 198, "response": "knows(defensive_plans_of(elephant), catfish) = rule1()\nshow_all_cards(elephant, turtle) => knows(defensive_plans_of(elephant), catfish)\nshow_all_cards(elephant, turtle) = True\nknows(defensive_plans_of(elephant), catfish) = True\nquestion = True", "answer": 1, "code": "rule1() = show_all_cards(something, turtle) => knows(defensive_plans_of(elephant), catfish)\nrule2() = proceed(something, spot_right_after(spot_of(hippopotamus))) => eat_food(something, food_of(panther))\nrule3() = roll_dice(buffalo, catfish) => burn(warehouse_of(octopus), catfish)\nrule4() = knows(defensive_plans_of(buffalo), salmon) => roll_dice(buffalo, catfish)\nrule5() = reduce_work_hours(squirrel) => remove(squirrel, piece_of(phoenix))\nrule6() = prepare_armor(aardvark, squirrel) & respects(polar_bear, squirrel) => not remove(squirrel, piece_of(phoenix))\nrule7() = wink(sheep, catfish) => not eat_food(catfish, food_of(panther))\nrule8() = has(grasshopper, carry_apples_and_oranges) => roll_dice(grasshopper, squirrel)\nrule9() = not eat_food(something, food_of(panther)) => offer_job(something, buffalo)\nrule10() = first_letter_of(name(grasshopper)) == first_letter_of(name(jellyfish)) => roll_dice(grasshopper, squirrel)\nrule11() = needs_support(cheetah, grasshopper) => not roll_dice(grasshopper, squirrel)\nrule12() = roll_dice(grasshopper, squirrel) => show_all_cards(squirrel, turtle)\norder(rule11) > order(rule10) = True\norder(rule11) > order(rule8) = True\norder(rule2) > order(rule7) = True\norder(rule5) > order(rule6) = True\n\nprepare_armor(aardvark, squirrel) = True\nhas(grasshopper, knapsack) = True\nname(grasshopper, Tango) = True\nname(jellyfish, Pashmak) = True\nrespects(polar_bear, squirrel) = True\nknows(defensive_plans_of(buffalo), salmon) = True\nwink(sheep, catfish) = True\n\nquestion = knows(defensive_plans_of(elephant), catfish)\n"}, {"idx": 199, "response": "burn(warehouse_of(hare), jellyfish) == True\nwink(kiwi, starfish) = rule1()\nwink(kiwi, starfish) == True\nwink(kiwi, starfish) == True\nattack_green_fields(dog, crocodile) = rule3()\nattack_green_fields(dog, crocodile) == True\nattack_green_fields(dog, crocodile) == True\nraise_flag_of_peace(dog, cat) = rule2()\nraise_flag_of_peace(dog, cat) == True\nraise_flag_of_peace(dog, cat) == True\nsing_song(dog, victory_song_for(parrot)) = rule4()\nsing_song(dog, victory_song_for(parrot)) == True\nsing_song(dog, victory_song_for(parrot)) == True\noffer_job(dog, snail) = rule5(dog)\noffer_job(dog, snail) == False\noffer_job(dog, snail) == False\nquestion = False", "answer": -1, "code": "rule1() = burn(warehouse_of(hare), something) => wink(kiwi, starfish)\nrule2() = not attack_green_fields(something, crocodile) => raise_flag_of_peace(something, cat)\nrule3() = give(gecko, magnifying_glass, dog) & not enemy(catfish, dog) => attack_green_fields(dog, crocodile)\nrule4() = not burn(warehouse_of(puffin), something) => sing_song(something, victory_song_for(parrot))\nrule5(something) = raise_flag_of_peace(something, cat) & sing_song(something, victory_song_for(parrot)) => not offer_job(something, snail)\nrule6() = friends(dog) > 10 => not burn(warehouse_of(puffin), dog)\nrule7() = proceed(something, spot_right_after(spot_of(caterpillar))) => not attack_green_fields(dog, green_fields_of(crocodile))\norder(rule3) > order(rule7) = True\n\nproceed(canary, spot_right_after(spot_of(caterpillar))) = True\nfriends(dog) = 20\ngive(gecko, magnifying_glass, dog) = True\nburn(warehouse_of(hare), jellyfish) = True\npoints(buffalo) != points(kiwi)\n\nquestion = offer_job(dog, snail)\n"}, {"idx": 200, "response": "knows(defense_plan_of(kiwi), hippopotamus) == True\nlearn_elementary_resource_management(cow, spider) = rule1()\nlearn_elementary_resource_management(cow, spider) == True\nenemy(dog, spider) = rule3()\nenemy(dog, spider) == True\nknows(defense_plan_of(puffin), spider) = rule6()\nknows(defense_plan_of(puffin), spider) == True\nknows(defense_plan_of(puffin), spider) == True\nquestion = True", "answer": 1, "code": "rule1() = not give_magnifying_glass(something, bat) => learn_elementary_resource_management(something, spider)\nrule2() = friends(cow) > 3 => not give_magnifier(cow, bat)\nrule3() = owes_money_to(something, baboon) => enemy(dog, spider)\nrule4() = burn(warehouse_of(wolverine), sheep) => actual_enemy(wolverine, cow)\nrule5() = knows(defense_plan_of(kiwi), something) => remove(panda_bear, piece_of(baboon))\nrule6() = learn_elementary_resource_management(cow, spider) & enemy(dog, spider) => knows(defense_plan_of(puffin), spider)\nrule7(something) = remove(something, piece_of(canary)) & give_magnifier(something, cheetah) => not enemy(something, cow)\norder(rule7) > order(rule4) = True\n\nfriends(cow) = 6\nknows(defense_plan_of(kiwi), hippopotamus) = True\nburn(warehouse_of(wolverine), sheep) = True\nremove(wolverine, piece_of(canary)) = True\n\nquestion = knows(defense_plan_of(puffin), spider)\n"}, {"idx": 201, "response": "has(jellyfish, bench) == True\nconnect_to_internet(bench) == True\nhas(jellyfish, connect_to_internet(device)) == True\nremove(jellyfish, piece_of(aardvark)) = rule2()\nremove(jellyfish, piece_of(aardvark)) == True\nshow_cards(oscar, snail) == True\nraise_flag_of_peace(snail, jellyfish) = rule7()\nraise_flag_of_peace(snail, jellyfish) == True\nraise_flag_of_peace(snail, jellyfish) == True\nowes_money_to(jellyfish, moose) = rule1()\nsteal_points(jellyfish, 5, kudu) == True\noffer_job(jellyfish, hummingbird) == True\nquestion = True", "answer": 1, "code": "rule1() = steal_points(something, 5, kudu) & offer_job(something, hummingbird) => owes_money_to(something, moose)\nrule2() = has(jellyfish, connect_to_internet(device)) => remove(jellyfish, piece_of(aardvark))\nrule3() = has(snail, high_quality_paper) => not raise_flag_of_peace(snail, jellyfish)\nrule4() = knock_down(squirrel, fortress_of(jellyfish)) => steal_points(jellyfish, 5, kudu)\nrule5() = not give(starfish, magnifier, squirrel) => knock_down(squirrel, fortress_of(jellyfish))\nrule6(something) = remove(something, piece_of(aardvark)) => offer_job(something, hummingbird)\nrule7() = show_cards(oscar, snail) => raise_flag_of_peace(snail, jellyfish)\norder(rule7) > order(rule3) = True\n\nfriends(jellyfish) = 6\nhas(jellyfish, computer) = True\nhas(jellyfish, bench) = True\nshow_cards(oscar, snail) = True\nhas(snail, guitar) = True\nhas(snail, high_quality_paper) = True\nhas(squirrel, card_with(blue_color)) = True\nnot give(starfish, magnifier, squirrel) = True\n\nquestion = owes_money_to(jellyfish, moose)\n"}, {"idx": 202, "response": "has(lobster, card_with(black_color)) == True\nnot offer_job(lobster, black_bear) = rule12()\noffer_job(lobster, black_bear) == False\nattack_green_fields(lobster, halibut) = rule6()\nattack_green_fields(lobster, halibut) == True\nattack_green_fields(lobster, halibut) == True\nnot offer_job(halibut, buffalo) = rule8()\noffer_job(halibut, buffalo) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(lobster)) == first_letter_of(name(snail)) => not offer_job(lobster, black_bear)\nrule2() = has(amberjack, carry_apples_and_oranges) => not give_magnifying_glass(amberjack, canary)\nrule3() = raise_flag_of_peace(something, octopus) => enemy(kiwi, lobster)\nrule4() = not show_cards(catfish, halibut) => burn(warehouse_of(gecko), halibut)\nrule5() = enemy(kiwi, lobster) => attack_green_fields(lobster, halibut)\nrule6() = attack_green_fields(something, goldfish) => offer_job(lobster, black_bear)\nrule7() = friends(catfish) < 6 => not show_cards(catfish, halibut)\nrule8() = steal_points(amberjack, halibut, 5) & attack_green_fields(lobster, halibut) => not offer_job(halibut, buffalo)\nrule9(something) = sing_song(something, victory_song_for(whale)) & points(something) == points(blobfish) => not steal_points(something, halibut, 5)\nrule10(something) = not give_magnifier(something, canary) => steal_points(something, halibut, 5)\nrule11(something) = burn(warehouse_of(gecko), something) => offer_job(something, buffalo)\nrule12() = has(lobster, card_with(color_starting_with(\"l\"))) => not offer_job(lobster, black_bear)\nrule13() = learn_basics_of_resource_management(dog, amberjack) => points(amberjack) == points(blobfish)\nrule14(something) = offer_job(something, black_bear) => not attack_green_fields(something, halibut)\norder(rule1) > order(rule6) = True\norder(rule12) > order(rule6) = True\norder(rule5) > order(rule14) = True\norder(rule8) > order(rule11) = True\norder(rule9) > order(rule10) = True\n\nhas(amberjack, backpack) = True\nfriends(catfish) = 3\nlearn_basics_of_resource_management(dog, amberjack) = True\nattack_green_fields(kangaroo, goldfish) = True\nhas(lobster, card_with(black_color)) = True\nraise_flag_of_peace(mosquito, octopus) = True\nname(snail, Lucy) = True\n\nquestion = offer_job(halibut, buffalo)\n"}, {"idx": 203, "response": "has(lion, something_to_sit_on) == True\nshow_cards(lion, penguin) = rule1()\nshow_cards(lion, penguin) == True\nshow_cards(lion, penguin) == True\nequal_points(penguin, starfish) = rule12()\nequal_points(penguin, starfish) == False\nsing_song(buffalo, victory_song_for(starfish)) = rule2()\nsing_song(buffalo, victory_song_for(starfish)) == True\nequal_points(penguin, starfish) == False\nknows(defensive_plans_of(eel), starfish) = rule2()\nknows(defensive_plans_of(eel), starfish) == True\nknows(defensive_plans_of(eel), starfish) == True\nquestion = True", "answer": 1, "code": "rule1() = has(lion, something_to_sit_on) => show_cards(lion, penguin)\nrule2() = sing_song(buffalo, victory_song_for(starfish)) & not equal_points(penguin, starfish) => knows(defensive_plans_of(eel), starfish)\nrule3() = killed(pig, mayor) => not give_magnifier(pig, squirrel)\nrule4(something) = owes_money_to(something, panda_bear) & not enemy(something, buffalo) => not knows(defensive_plans_of(eel), something)\nrule5() = has(blobfish, card_with(rainbow_color)) => respects(blobfish, starfish)\nrule6() = respects(blobfish, starfish) => enemy(starfish, buffalo)\nrule7() = has(pig, card_with(rainbow_color)) => give_magnifier(pig, squirrel)\nrule8() = first_letter_of(name(buffalo)) == first_letter_of(name(crocodile)) => not burn_warehouse(buffalo, salmon)\nrule9() = has(pig, leafy_green_vegetable) => not give_magnifier(pig, squirrel)\nrule10() = proceed(something, spot_right_after(spot_of(canary))) => not enemy(starfish, buffalo)\nrule11() = created_time_machine(blobfish) => respects(blobfish, starfish)\nrule12() = show_cards(lion, penguin) => equal_points(penguin, starfish)\nrule13(something) = proceed(something, spot_right_after(spot_of(mosquito))) => not equal_points(something, starfish)\nrule14() = friends(penguin) > 10 => proceed(penguin, spot_right_after(spot_of(mosquito)))\nrule15() = prepare_armor(swordfish, tiger) => not proceed(tiger, spot_right_after(spot_of(canary)))\nrule16(something) = not burn_warehouse(something, salmon) => enemy(starfish, something)\nrule17() = has(tiger, card_with(primary_color)) => proceed(tiger, spot_right_after(spot_of(canary)))\norder(rule10) > order(rule6) = True\norder(rule13) > order(rule12) = True\norder(rule17) > order(rule15) = True\norder(rule3) > order(rule7) = True\norder(rule4) > order(rule2) = True\norder(rule9) > order(rule7) = True\n\ndreamed(blobfish, luxury_aircraft) = True\nhas(blobfish, card_with(black_color)) = True\nname(buffalo, Teddy) = True\nname(crocodile, Tango) = True\nhas(lion, couch) = True\nfriends(penguin) = 17\nhas(pig, card_with(indigo_color)) = True\nhas(pig, hot_chocolate) = True\nprepare_armor(swordfish, tiger) = True\nhas(tiger, card_with(red_color)) = True\n\nquestion = knows(defensive_plans_of(eel), starfish)\n"}, {"idx": 204, "response": "name(hare, Lola) == True\nname(panda_bear, Milo) == True\nfirst_letter_of(name(panda_bear)) == first_letter_of(name(hare)) == True\ngive_magnifier(panda_bear, tilapia) = rule1()\ngive_magnifier(panda_bear, tilapia) == True\ngive_magnifier(panda_bear, tilapia) == True\nproceed_to_spot_right_after(spot_of(kangaroo), something) = rule3(something)\nproceed_to_spot_right_after(spot_of(kangaroo), something) == True\nproceed_to_spot_right_after(spot_of(kangaroo), something) == True\ngive_magnifying_glass(kiwi, squid) = rule2()\ngive_magnifying_glass(kiwi, squid) == True\ngive_magnifying_glass(kiwi, squid) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(panda_bear)) == first_letter_of(name(hare)) => give_magnifier(panda_bear, tilapia)\nrule2() = proceed_to_spot_right_after(spot_of(kangaroo), something) => give_magnifying_glass(kiwi, squid)\nrule3(something) = give_magnifier(something, tilapia) => proceed_to_spot_right_after(spot_of(kangaroo), something)\nrule4() = has(panda_bear, card_with(color)) & color in colors_of_Italy_flag => give_magnifier(panda_bear, tilapia)\n\nname(hare, Lola) = True\nhas(panda_bear, card_with(green_color)) = True\nname(panda_bear, Milo) = True\n\nquestion = give_magnifier(kiwi, squid)\n"}, {"idx": 205, "response": "has(halibut, blade) == True\nnot remove(baboon, piece_of(phoenix)) = rule4()\nremove(baboon, piece_of(phoenix)) == False\nquestion = False", "answer": -1, "code": "rule1() = not roll_dice(phoenix, halibut) & wink(leopard, halibut) => not sing_song(halibut, victory_song_for(catfish))\nrule2() = purchased(halibut, time_machine) => not give(halibut, magnifier, gecko)\nrule3() = has(halibut, drink) => give(halibut, magnifier, gecko)\nrule4() = not remove(baboon, piece_of(phoenix)) => roll_dice(phoenix, halibut)\nrule5() = wink(something, puffin) => eat_food(polar_bear, food_of(oscar))\nrule6() = holds_equal_points(something, panther) => remove(halibut, piece_of(jellyfish))\nrule7() = eat_food(something, food_of(caterpillar)) => sing_song(halibut, victory_song_for(catfish))\nrule8() = eat_food(something, food_of(oscar)) => not need_support(halibut, canary)\nrule9() = has(starfish, card_with(color_starting_with(\"e\"))) => eat_food(starfish, food_of(caterpillar))\nrule10(something) = sing_song(something, victory_song_for(catfish)) & not need_support(something, canary) => not remove(something, piece_of(jellyfish))\nrule11(something) = proceed(something, spot_right_after(spot_of(sun_bear))) => not roll_dice(something, halibut)\nrule12() = first_letter_of(name(starfish)) == first_letter_of(name(squirrel)) => eat_food(starfish, food_of(caterpillar))\norder(rule1) > order(rule7) = True\norder(rule3) > order(rule2) = True\norder(rule4) > order(rule11) = True\norder(rule6) > order(rule10) = True\n\nhas(halibut, beer) = True\nhas(halibut, blade) = True\ninvented(halibut, time_machine) = True\nwink(mosquito, puffin) = True\nproceed(phoenix, spot_right_after(spot_of(sun_bear))) = True\nname(squirrel, Casper) = True\nhas(starfish, card_with(red_color)) = True\nname(starfish, Cinnamon) = True\nnot learn_basics_of_resource_management_from(starfish, tiger) = True\n\nquestion = remove(halibut, piece_of(jellyfish))\n"}, {"idx": 206, "response": "has(hippopotamus, card_with(red_color)) = True\noffer_job_position(hippopotamus, halibut) = rule1()\noffer_job_position(hippopotamus, halibut) == True\nfriends(hippopotamus) = 1\noffer_job_position(hippopotamus, halibut) = rule2()\noffer_job_position(hippopotamus, halibut) == False\nroll_dice(whale, halibut) = False\nlearn_basics_of_resource_management(halibut, carp) = rule3()\nlearn_basics_of_resource_management(halibut, carp) == False\noffer_job_position(hippopotamus, halibut) == True\nnot knows(defensive_plans_of(halibut), rabbit) = rule4()\nknows(defensive_plans_of(halibut), rabbit) == False\nshow_cards(halibut, tiger) = rule4()\nshow_cards(halibut, tiger) == True\nattack_green_fields(halibut, kangaroo) = rule7()\nattack_green_fields(halibut, kangaroo) == True\nquestion = True", "answer": 1, "code": "rule1() = has(hippopotamus, card_with(color_starting_with(\"r\"))) => offer_job_position(hippopotamus, halibut)\nrule2() = friends(hippopotamus) > 10 => offer_job_position(hippopotamus, halibut)\nrule3() = roll_dice(whale, halibut) => learn_basics_of_resource_management(halibut, carp)\nrule4() = offer_job_position(hippopotamus, halibut) & not knows(defensive_plans_of(halibut), rabbit) => show_cards(halibut, tiger)\nrule5(something) = not holds_same_number_of_points_as(something, puffin) => not knows(defense_plan_of(halibut), something)\nrule6(something) = learn_basics_of_resource_management(something, carp) => attack_green_fields(something, hummingbird)\nrule7() = attack_green_fields(something, hummingbird) & show_cards(something, tiger) => attack_green_fields(something, kangaroo)\n\nhas(hippopotamus, card_with(red_color)) = True\nfriends(hippopotamus) = 1\nholds_same_number_of_points_as(rabbit, puffin) = False\nroll_dice(whale, halibut) = False\n\nquestion = attack_green_fields(halibut, kangaroo)\n"}, {"idx": 207, "response": "friends(tiger) = 8\nnot raise_flag_of_peace(tiger, panther) = rule1()\nraise_flag_of_peace(tiger, panther) = False\npoints(panther) == points(starfish) = rule3()\npoints(panther) == points(starfish) == True\nrespects(kangaroo, panther) = True\nnot raise_flag_of_peace(tiger, panther) = False\nremove(panther, piece_of(jellyfish)) = rule2(panther)\nremove(panther, piece_of(jellyfish)) == True\nremove(panther, piece_of(jellyfish)) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(tiger) < 15 => not raise_flag_of_peace(tiger, panther)\nrule2(something) = points(something) == points(starfish) & show_cards(something, sheep) => remove(something, piece_of(jellyfish))\nrule3() = not raise_flag_of_peace(tiger, panther) & respects(kangaroo, panther) => points(panther) == points(starfish)\nrule4() = friends(mosquito) > 3 => eat_food(mosquito, canary)\nrule5(something) = not give_magnifier(something, salmon) => not knows_defensive_plans(something, sheep)\nrule6() = enemy(something, hare) => owes_money_to(canary, sun_bear)\nrule7() = has(baboon, card_with(primary_color)) => enemy(baboon, hare)\nrule8() = points(something) == points(lobster) => not enemy(baboon, hare)\nrule9() = has(mosquito, carrier_of(apples_and_oranges)) => eat_food(mosquito, canary)\nrule10() = attack(green_fields_of(cow), something) => knows_defensive_plans(something, viperfish)\nrule11() = owes_money_to(something, spider) => respects(kangaroo, panther)\nrule12() = not owes_money_to(tiger, panther) => points(panther) != points(starfish)\nrule13() = knows_defense_plan(something, viperfish) => show_cards(panther, sheep)\norder(rule12) > order(rule3) = True\norder(rule8) > order(rule7) = True\n\nhas(baboon, card_with(green_color)) = True\nowes_money_to(crocodile, spider) = True\nattack(green_fields_of(cow), meerkat) = True\nhas(mosquito, cell_phone) = True\nfriends(mosquito) = 13\nfriends(tiger) = 8\nnot give_magnifier(panther, salmon) = True\n\nquestion = remove(panther, piece_of(jellyfish))\n"}, {"idx": 208, "response": "name(black_bear, Beauty) == True\nname(hippopotamus, Buddy) == True\nfirst_letter_of(name(black_bear)) == first_letter_of(name(hippopotamus)) == True\nattack_green_fields(black_bear, hare) = rule4()\nattack_green_fields(black_bear, hare) == True\nattack_green_fields(black_bear, hare) == True\nrespects(gecko, hare) = rule5()\nrespects(gecko, hare) == True\nrespects(gecko, hare) == True\nsing_song(hare, victory_song_for(cat)) = rule3()\nsing_song(hare, victory_song_for(cat)) == True\nsing_song(hare, victory_song_for(cat)) == True\nnot prepare_armor(hare, carp) = rule6(hare)\nprepare_armor(hare, carp) == False\nquestion = False", "answer": -1, "code": "rule1() = not proceed(spider, spot_right_after(hare)) => not sing_song(hare, victory_song_for(cat))\nrule2() = roll_dice_for(something, panda_bear) => wink_at(something, phoenix)\nrule3() = attack_green_fields(black_bear, hare) & respects(gecko, hare) => sing_song(hare, victory_song_for(cat))\nrule4() = first_letter_of(name(black_bear)) == first_letter_of(name(hippopotamus)) => attack_green_fields(black_bear, hare)\nrule5() = friends(gecko) < 19 => respects(gecko, hare)\nrule6(something) = sing_song(something, victory_song_for(cat)) & wink_at(something, phoenix) => not prepare_armor(something, carp)\nrule7() = owes_money_to(something, kangaroo) => roll_dice_for(something, panda_bear)\norder(rule1) > order(rule3) = True\n\nname(black_bear, Beauty) = True\nfriends(gecko) = 9\nlearn_basics_of_resource_management(gecko, wolverine) = True\nowes_money_to(hare, kangaroo) = True\nname(hippopotamus, Buddy) = True\n\nquestion = prepare_armor(hare, carp)\n"}, {"idx": 209, "response": "name(hare, Blossom) == True\nname(panda_bear, Buddy) == True\nfirst_letter_of(name(hare)) == first_letter_of(name(panda_bear)) == True\nburn(warehouse_of(eel), hare) = rule2()\nburn(warehouse_of(eel), hare) == True\nburn(warehouse_of(eel), hare) == True\nrespects(eel, leopard) = rule3()\nrespects(eel, leopard) == True\nneeds_support(octopus, leopard) = rule1()\nneeds_support(octopus, leopard) == True\noffer_job_position(octopus, carp) = True\nquestion = True", "answer": 1, "code": "rule1() = needs_support(something, leopard) => offer_job_position(octopus, carp)\nrule2() = first_letter_of(name(hare)) == first_letter_of(name(panda_bear)) => burn(warehouse_of(eel), hare)\nrule3() = burn(warehouse_of(eel), hare) => respects(eel, leopard)\n\nname(hare, Blossom) = True\nname(panda_bear, Buddy) = True\nnot sing_song(eagle, victory_song_for(hare)) = True\n\nquestion = offer_job_position(octopus, carp)\n"}, {"idx": 210, "response": "learn_basics_of_resource_management(ferret, jellyfish) = True\nattacks(squid, green_fields_of(jellyfish)) = rule8()\nattacks(squid, green_fields_of(jellyfish)) = True\nroll_dice(jellyfish, puffin) = rule6()\nroll_dice(jellyfish, puffin) = True\nquestion = True", "answer": 1, "code": "rule1() = has(ferret, leafy_green_vegetable) => not learn_basics_of_resource_management(ferret, octopus)\nrule2() = respects(something, hummingbird) => show_all_cards(ferret, meerkat)\nrule3() = proceed(doctorfish, spot_right_after(ferret)) => not show_all_cards(ferret, meerkat)\nrule4() = killed(wolverine, mayor) => offer_job(wolverine, squid)\nrule5() = took(ferret, bike_from(store)) => not learn_elementary_resource_management(ferret, octopus)\nrule6() = learn_basics_of_resource_management(ferret, jellyfish) & attacks(squid, green_fields_of(jellyfish)) => roll_dice(jellyfish, puffin)\nrule7() = friends(wolverine) < 9 => offer_job(wolverine, squid)\nrule8() = offer_job(wolverine, squid) => attacks(squid, green_fields_of(jellyfish))\nrule9() = show_all_cards(something, meerkat) & not learn_basics_of_resource_management(something, octopus) => learn_basics_of_resource_management(something, jellyfish)\norder(rule3) > order(rule2) = True\n\npoints(black_bear) == points(wolverine) = True\nrespects(donkey, hummingbird) = True\nhas(ferret, backpack) = True\ntook(ferret, bike_from(store)) = True\nkilled(wolverine, mayor) = True\nfriends(wolverine) == 14 = True\n\nquestion = roll_dice(jellyfish, puffin)\n"}, {"idx": 211, "response": "learn(hare, elementary_resource_management_from(pig)) = rule5()\nlearn(hare, elementary_resource_management_from(pig)) == True\nowes_money_to(pig, rabbit) = rule1()\nowes_money_to(pig, rabbit) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(something, hare) => owes_money_to(pig, rabbit)\nrule2() = reduce_work_hours(starfish) => not learn(starfish, elementary_resource_management_from(hare))\nrule3() = learn(kangaroo, basics_of_resource_management_from(hare)) & learn(starfish, elementary_resource_management_from(hare)) => learn(hare, basics_of_resource_management_from(pig))\nrule4(something) = proceed(something, spot_right_after(wolverine)) => learn(something, basics_of_resource_management_from(hare))\nrule5() = learn(hare, elementary_resource_management_from(pig)) => not owes_money_to(pig, rabbit)\nrule6(something) = remove(something, piece_of(bat)) => learn(something, elementary_resource_management_from(hare))\norder(rule1) > order(rule5) = True\norder(rule2) > order(rule6) = True\n\nproceed(kangaroo, spot_right_after(wolverine)) = True\nremove(starfish, piece_of(bat)) = True\n\nquestion = owes_money_to(pig, rabbit)\n"}, {"idx": 212, "response": "not owes_money_to(halibut, panther) = rule1()\nowes_money_to(halibut, panther) == False\nlearn_elementary_resource_management(panther, goldfish) = True\nquestion = True", "answer": 1, "code": "rule1() = not owes_money_to(halibut, panther) => learn_elementary_resource_management(panther, goldfish)\nrule2() = not knock_down(moose, fortress_of(baboon)) => remove(baboon, piece_of(meerkat))\nrule3(something) = remove(something, piece_of(meerkat)) => not owes_money_to(halibut, panther)\nrule4(something) = not sing_song(something, victory_song_for(lobster)) & enemy(something, whale) => not remove(something, piece_of(meerkat))\nrule5() = first_letter_of(name(rabbit)) == first_letter_of(name(cockroach)) => proceed(rabbit, spot_right_after(halibut))\nrule6() = proceed(rabbit, spot_right_after(halibut)) & show_cards(spider, halibut) => owes_money_to(halibut, panther)\norder(rule4) > order(rule2) = True\norder(rule6) > order(rule3) = True\n\nenemy(baboon, whale) = True\nname(cockroach, Cinnamon) = True\nknock_down(moose, fortress_of(baboon)) = True\nname(rabbit, Casper) = True\n\nquestion = learn_elementary_resource_management(panther, goldfish)\n"}, {"idx": 213, "response": "name(turtle, Casper) == True\nfirst_letter_of(name(turtle)) == first_letter_of(name(panda_bear)) = rule3()\nfirst_letter_of(name(turtle)) == first_letter_of(name(panda_bear)) == True\nburn(warehouse_of(koala), turtle) = rule3()\nburn(warehouse_of(koala), turtle) == True\nburn(warehouse_of(koala), turtle) == True\nsteal_points(koala, salmon, 5) = rule1()\nsteal_points(koala, salmon, 5) == True\nsteal_points(koala, salmon, 5) == True\nnot attack_green_fields(koala, baboon) = rule4(koala)\nnot attack_green_fields(koala, baboon) == True\nnot attack_green_fields(koala, baboon) == True\nroll_dice(koala, lion) = rule6()\nroll_dice(koala, lion) == False\nroll_dice(koala, lion) == False\nquestion = False", "answer": -1, "code": "rule1() = burn(warehouse_of(koala), turtle) => steal_points(koala, salmon, 5)\nrule2() = steal_points(something, salmon, 5) & not attack_green_fields(something, baboon) => roll_dice(something, lion)\nrule3() = first_letter_of(name(turtle)) == first_letter_of(name(panda_bear)) => burn(warehouse_of(koala), turtle)\nrule4(something) = learn(something, elementary_resource_management_from(grizzly_bear)) => not attack_green_fields(something, baboon)\nrule5() = points(sheep) == points(koala) & not enemy(elephant, koala) => learn_basics_of_resource_management(koala, grizzly_bear)\nrule6(something) = points(something) == points(black_bear) => not roll_dice(something, lion)\norder(rule6) > order(rule2) = True\n\nhas(koala, card_with(violet_color)) = True\nname(panda_bear, Chickpea) = True\npoints(sheep) == points(koala) = True\nname(turtle, Casper) = True\nnot enemy(elephant, koala) = True\n\nquestion = roll_dice(koala, lion)\n"}, {"idx": 214, "response": "knows(defensive_plans_of(cat), tilapia) == True\nnot sing_song(oscar, victory_song_for(swordfish)) = rule1()\nsing_song(oscar, victory_song_for(swordfish)) == False\nquestion = False", "answer": -1, "code": "rule1() = offer_job_position(something, canary) => not sing_song(oscar, victory_song_for(swordfish))\nrule2() = remove(something, piece_of(lion)) => not prepare_armor(oscar, canary)\nrule3() = has(black_bear, card_with(primary_color)) => proceed(black_bear, spot_right_after(spot_of(squirrel)))\nrule4() = first_letter_of(name(tilapia)) == first_letter_of(name(caterpillar)) => not remove(tilapia, piece_of(lion))\nrule5(something) = knows(defensive_plans_of(cat), something) => remove(something, piece_of(lion))\nrule6() = not proceed(black_bear, spot_right_after(spot_of(squirrel))) => offer_job_position(squirrel, canary)\nrule7() = owns(luxury_aircraft, tilapia) => not remove(tilapia, piece_of(lion))\nrule8() = show_cards(something, sea_bass) => not proceed(black_bear, spot_right_after(spot_of(squirrel)))\norder(rule3) > order(rule8) = True\norder(rule4) > order(rule5) = True\norder(rule7) > order(rule5) = True\n\nshow_cards(dog, sea_bass) = True\ndream(luxury_aircraft, tilapia) = True\nname(tilapia, Max) = True\nknows(defensive_plans_of(cat), tilapia) = True\n\nquestion = sing_song(oscar, victory_song_for(swordfish))\n"}, {"idx": 215, "response": "name(wolverine, Tarzan) == True\neat_food(wolverine, food_of(black_bear)) = rule4()\neat_food(wolverine, food_of(black_bear)) == False\nnot eat_food(wolverine, food_of(black_bear)) == True\noffer_job(parrot, black_bear) = rule8()\noffer_job(parrot, black_bear) == True\nnot eat_food(wolverine, food_of(black_bear)) == True\ngive(black_bear, magnifying_glass, pig) = rule8()\ngive(black_bear, magnifying_glass, pig) == True\ngive(black_bear, magnifying_glass, pig) == True\nquestion = True", "answer": 1, "code": "rule1() = has(polar_bear, card_with(color_in(rainbow_colors))) => burn(warehouse_of(elephant))\nrule2() = knows(defense_plan_of(crocodile), something) => remove(parrot, piece_of(black_bear))\nrule3() = has(polar_bear, sharp_object) => burn(warehouse_of(elephant))\nrule4() = not has(wolverine, keys) => not eat_food(wolverine, food_of(black_bear))\nrule5() = first_letter_of(name(wolverine)) == first_letter_of(name(lion)) => not eat_food(wolverine, food_of(black_bear))\nrule6(something) = give(something, magnifier, pig) & not learn(something, elementary_resource_management_from(jellyfish)) => eat_food(something, food_of(zander))\nrule7() = burn(warehouse_of(elephant), something) => not learn_basics_of_resource_management(black_bear, jellyfish)\nrule8() = offer_job(parrot, black_bear) & not eat_food(wolverine, food_of(black_bear)) => give(black_bear, magnifying_glass, pig)\nrule9(something) = remove(something, piece_of(buffalo)) => eat_food(something, food_of(black_bear))\norder(rule9) > order(rule4) = True\norder(rule9) > order(rule5) = True\n\nname(lion, Paco) = True\nknows(defensive_plans_of(crocodile), panda_bear) = True\nhas(polar_bear, blade) = True\nhas(polar_bear, card_with(white_color)) = True\nname(wolverine, Tarzan) = True\nnot has(wolverine, keys) = True\n\nquestion = eat_food(black_bear, food_of(zander))\n"}, {"idx": 216, "response": "name(catfish, Tarzan) == True\nname(koala, Tessa) == True\nfirst_letter_of(name(koala)) == first_letter_of(name(catfish)) == True\nknows(defensive_plans_of(leopard), koala) = rule1()\nknows(defensive_plans_of(leopard), koala) == True\nbelief(grizzly_bear_eats_food_of(parrot)) == True\nshow_cards(squid, parrot) == True\nadd_conclusion(\"the parrot knocks down the fortress of the blobfish\") = rule2()\nadd_conclusion(\"the parrot knocks down the fortress of the blobfish\") == True\nshow_cards(squid, parrot) = rule3()\nshow_cards(squid, parrot) == True\nhas(koala, card_with(color_in_flag_of_Japan)) == True\nknows(defense_plan_of(leopard), koala) = rule4()\nknows(defense_plan_of(leopard), koala) == True\noffer_job(grizzly_bear, turtle) = rule6()\noffer_job(grizzly_bear, turtle) == True\neats_food_of(parrot, grizzly_bear) = rule5(grizzly_bear)\neats_food_of(parrot, grizzly_bear) == True\nenemy(kudu, squid) == True\n\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(koala)) == first_letter_of(name(catfish)) => knows(defensive_plans_of(leopard), koala)\nrule2() = belief(grizzly_bear_eats_food_of(parrot)) & show_cards(squid, parrot) => add_conclusion(\"the parrot knocks down the fortress of the blobfish\")\nrule3() = knows(defensive_plans_of(leopard), something) => show_cards(squid, parrot)\nrule4() = has(koala, card_with(color_in_flag_of_Japan)) => knows(defense_plan_of(leopard), koala)\nrule5(something) = offer_job(something, turtle) => eats_food_of(parrot, something)\nrule6() = enemy(something, squid) => offer_job(grizzly_bear, turtle)\n\nname(catfish, Tarzan) = True\nhas(koala, card_with(violet_color)) = True\nname(koala, Tessa) = True\nenemy(kudu, squid) = True\n\nquestion = \"the parrot knocks down the fortress of the blobfish\" in conclusions\n"}, {"idx": 217, "response": "has_high_salary(crocodile) == True\nwink(crocodile, cat) = rule1()\nwink(crocodile, cat) == True\nwink(crocodile, cat) == True\noffer_job_position(baboon, puffin) = rule2()\noffer_job_position(baboon, puffin) == True\noffer_job_position(baboon, puffin) == True\nnot offer_job_position(baboon, puffin) = rule6(baboon)\noffer_job_position(baboon, kudu) == False\nquestion = False", "answer": -1, "code": "rule1() = has_high_salary(crocodile) => wink(crocodile, cat)\nrule2() = burn(warehouse_of(baboon), blobfish) => offer_job_position(baboon, puffin)\nrule3() = not proceed(caterpillar, spot_right_after(spot_of(baboon))) => not offer_job_position(baboon, puffin)\nrule4(something) = proceed(something, spot_right_after(spot_of(buffalo))) => respect(something, baboon)\nrule5() = wink(something, cat) => steal_points(baboon, 5, leopard)\nrule6(something) = not offer_job_position(something, puffin) & steal_points(baboon, 5, leopard) => not offer_job_position(something, kudu)\nrule7() = has(crocodile, sharp_object) => wink(crocodile, cat)\nrule8() = points(koala) == points(caterpillar) => not proceed(caterpillar, spot_right_after(spot_of(baboon)))\norder(rule2) > order(rule3) = True\n\nhas(caterpillar, trumpet) = True\nhas_high_salary(crocodile) = True\nhas(crocodile, plastic_bag) = True\npoints(koala) == points(caterpillar) = True\nfriends(parrot) = 8\nhates(parrot, Chris_Ronaldo) = True\nproceed(parrot, spot_right_after(spot_of(buffalo))) = True\n\nquestion = offer_job_position(baboon, kudu)\n"}, {"idx": 218, "response": "name(zander, Bella) == True\noffer_job_position(zander, tilapia) = rule9()\noffer_job_position(zander, tilapia) == True\noffer_job_position(zander, tilapia) == True\nquestion = True", "answer": 1, "code": "rule1() = proceed(crocodile, spot_right_after(spot_of(tilapia))) => respects(tilapia, octopus)\nrule2() = not proceed(something, spot_right_after(spot_of(canary))) => owes_money_to(something, turtle)\nrule3() = owns(zander, luxury_aircraft) => offer_job_position(zander, cow)\nrule4() = has(tilapia, connect_to_internet(device)) => enemy(tilapia, hare)\nrule5(something) = owes_money_to(something, turtle) & offer_job_position(something, cow) => not offer_job_position(something, tilapia)\nrule6() = enemy(something, hare) => not respects(something, octopus)\nrule7() = has(tilapia, sharp_object) => enemy(tilapia, hare)\nrule8() = points(blobfish) == points(tilapia) & sing_song(black_bear, victory_song_for(tilapia)) => not enemy(tilapia, hare)\nrule9() = not offer_job_position(zander, tilapia) => offer_job_position(tilapia, viperfish)\nrule10() = first_letter_of(name(zander)) == first_letter_of(name(goldfish)) => not owes_money_to(zander, turtle)\nrule11() = has(zander, card_with(primary_color)) => offer_job_position(zander, cow)\norder(rule10) > order(rule2) = True\norder(rule6) > order(rule1) = True\norder(rule8) > order(rule4) = True\norder(rule8) > order(rule7) = True\n\nsing_song(blobfish, victory_song_for(tilapia)) = True\nname(goldfish, Bella) = True\nhas(tilapia, cell_phone) = True\nhas(tilapia, violin) = True\ndreamed(zander, luxury_aircraft) = True\nname(zander, Bella) = True\nhas(zander, card_with(red_color)) = True\nnot proceed(zander, spot_right_after(spot_of(canary))) = True\n\nquestion = offer_job_position(tilapia, viperfish)\n"}, {"idx": 219, "response": "owes_money_to(leopard, cow) = unknown", "answer": 0, "code": "rule1() = learn_basics_of_resource_management(something, cricket) => prepare_armor(jellyfish, cricket)\nrule2(something) = not attack_green_fields(something, blobfish) & prepare_armor(something, cricket) => show_cards(something, polar_bear)\nrule3() = show_cards(something, polar_bear) => owes_money_to(leopard, cow)\nrule4() = has(baboon, leafy_green_vegetable) => points(baboon) == points(jellyfish)\nrule5() = friends(baboon) > 4 => not_equal_points(baboon, jellyfish)\nrule6() = attack_green_fields(swordfish, jellyfish) & owes_money_to(polar_bear, jellyfish) => not attack_green_fields(jellyfish, blobfish)\norder(rule5) > order(rule4) = True\n\nhas(baboon, arugula) = True\nfriends(jellyfish) = 11\nlearn_basics_of_resource_management(pig, cricket) = True\nowes_money_to(polar_bear, jellyfish) = True\nattack_green_fields(swordfish, green_fields_of(jellyfish)) = True\n\nquestion = owes_money_to(leopard, cow)\n"}, {"idx": 220, "response": "has(cricket, something_to_sit_on) == True\nneeds_support(cricket, amberjack) = rule1()\nneeds_support(cricket, amberjack) == True\nhas(grasshopper, card_with(green_color)) == True\nremove(grasshopper, piece_of(lobster)) = rule2()\nremove(grasshopper, piece_of(lobster)) == True\nattacks(turtle, green_fields_of(sea_bass)) == False\nnot show_cards(turtle, jellyfish) = rule3(turtle)\nshow_cards(turtle, jellyfish) == False\nremove(grasshopper, piece_of(lobster)) == True\nlearn(turtle, elementary_resource_management_from(starfish)) = rule4()\nlearn(turtle, elementary_resource_management_from(starfish)) == True\ngive(turtle, magnifier, mosquito) = rule7()\ngive(turtle, magnifier, mosquito) == True\ngive(turtle, magnifier, mosquito) == True\nlearn(turtle, basics_of_resource_management_from(starfish)) == True\nactual_enemy(turtle, gecko) = rule5(turtle)\nactual_enemy(turtle, gecko) == True\nactual_enemy(turtle, gecko) == True\nquestion = True", "answer": 1, "code": "rule1() = has(cricket, something_to_sit_on) => needs_support(cricket, amberjack)\nrule2() = has(grasshopper, card_with(color_starting_with(\"r\"))) => remove(grasshopper, piece_of(lobster))\nrule3(something) = attacks(something, green_fields_of(sea_bass)) => not show_cards(something, jellyfish)\nrule4() = remove(something, piece_of(lobster)) => learn(turtle, elementary_resource_management_from(starfish))\nrule5(something) = give(something, magnifier, mosquito) & learn(something, basics_of_resource_management_from(starfish)) => actual_enemy(something, gecko)\nrule6() = belief(panda_bear, steals_points_from(turtle, 5)) & remove(hippopotamus, piece_of(turtle)) => prepare_armor(turtle, parrot)\nrule7() = prepare_armor(something, parrot) => give(something, magnifier, mosquito)\nrule8() = took(jellyfish, bike_from(store)) => respects(jellyfish, snail)\nrule9() = owns(grasshopper, luxury_aircraft) => remove(grasshopper, piece_of(lobster))\nrule10() = show_cards(something, jellyfish) => not enemy(turtle, gecko)\nrule11() = wink(something, moose) => not respects(jellyfish, snail)\nrule12() = respects(something, snail) => show_cards(eel, jellyfish)\nrule13() = sing_song(koala, victory_song_for(cricket)) => not needs_support(cricket, amberjack)\nrule14() = has(cricket, sharp_object) => needs_support(cricket, amberjack)\norder(rule1) > order(rule13) = True\norder(rule10) > order(rule5) = True\norder(rule11) > order(rule8) = True\norder(rule14) > order(rule13) = True\norder(rule3) > order(rule12) = True\n\nhas(cricket, green_tea) = True\nhas(cricket, love_seat_sofa) = True\nhas(grasshopper, card_with(green_color)) = True\nowns(grasshopper, luxury_aircraft) = True\nremove(hippopotamus, piece_of(turtle)) = True\ntook(jellyfish, bike_from(store)) = True\nsing_song(koala, victory_song_for(cricket)) = True\nbelief(panda_bear, steals_points_from(turtle, 5)) = True\n\nquestion = enemy(turtle, gecko)\n"}, {"idx": 221, "response": "owes_money_to(hare, whale) == True\nrolls_dice(snail, whale) == True\nraise_flag_of_peace(whale, goldfish) = rule3()\nraise_flag_of_peace(whale, goldfish) == True\nraise_flag_of_peace(whale, goldfish) == True\nsteal_points(something, 5, amberjack) = rule1()\nsteal_points(something, 5, amberjack) == True\nsteal_points(something, 5, amberjack) == True\nowes_money_to(tiger, cat) = rule4()\nowes_money_to(tiger, cat) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(something, goldfish) => steal_points(something, 5, amberjack)\nrule2() = not knows(defense_plan_of(whale), penguin) => not steal_points(whale, 5, amberjack)\nrule3() = owes_money_to(hare, whale) & rolls_dice(snail, whale) => raise_flag_of_peace(whale, goldfish)\nrule4() = steal_points(something, 5, amberjack) => owes_money_to(tiger, cat)\norder(rule2) > order(rule1) = True\n\nowes_money_to(hare, whale) = True\noffers_job(snail, whale) = True\n\nquestion = owes_money_to(tiger, cat)\n"}, {"idx": 222, "response": "burn(warehouse_of(moose), something) = rule13()\nburn(warehouse_of(moose), something) == True\nattack(green_fields_of(panda_bear), oscar) = rule13()\nattack(green_fields_of(panda_bear), oscar) == True\nattack(green_fields_of(panda_bear), oscar) == True\nknock_down(fortress_of(hippopotamus)) = rule4()\nknock_down(fortress_of(hippopotamus)) == True\nknock_down(fortress_of(hippopotamus)) == True\nquestion = True", "answer": 1, "code": "rule1() = attack(green_fields_of(panda_bear), something) => eat_food(koala, food_of(starfish))\nrule2() = voted_for(baboon, mayor) => knock_down(fortress_of(aardvark))\nrule3() = knock_down(fortress_of(aardvark), something) => eat_food(koala, food_of(buffalo))\nrule4(something) = eat_food(something, food_of(buffalo)) & eat_food(something, food_of(starfish)) => knock_down(fortress_of(hippopotamus))\nrule5() = friends(baboon) > 6 => knock_down(fortress_of(aardvark))\nrule6() = raise_flag_of_peace(something, spider) => raise_flag_of_peace(something, zander)\nrule7() = points(wolverine) == points(koala) => not eat_food(koala, food_of(starfish))\nrule8() = has(polar_bear, card_with(color_in_flag_of_Netherlands)) => raise_flag_of_peace(polar_bear, spider)\nrule9() = not proceed(viperfish, spot_right_after(spot_of(koala))) & sing_song(sun_bear, victory_song_for(koala)) => not eat_food(koala, food_of(buffalo))\nrule10() = killed(viperfish, mayor) => not proceed(viperfish, spot_right_after(spot_of(koala)))\nrule11() = friends(viperfish) > 16 => not proceed(viperfish, spot_right_after(spot_of(koala)))\nrule12() = sing_song(something, victory_song_for(tilapia)) => not raise_flag_of_peace(polar_bear, zander)\nrule13() = burn(warehouse_of(moose), something) => attack(green_fields_of(panda_bear), oscar)\norder(rule12) > order(rule6) = True\norder(rule7) > order(rule1) = True\norder(rule9) > order(rule3) = True\n\nassassinated(baboon, mayor) = True\nfriends(baboon) = 16\nhas(polar_bear, card_with(red_color)) = True\nburn(warehouse_of(moose), tiger) = True\nassassinated(viperfish, mayor) = True\nfriends(viperfish) = 6\nburn(warehouse_of(dog), oscar) = False\n\nquestion = knock_down(fortress_of(hippopotamus))\n"}, {"idx": 223, "response": "killed(grasshopper, mayor) == True\nnot steal_points(grasshopper, 5, doctorfish) = rule2()\nsteal_points(grasshopper, 5, doctorfish) == False\nneeds_support(grasshopper, starfish) = rule4()\nneeds_support(grasshopper, starfish) == True\nsings_song_of_victory(grasshopper, snail) = question\nsings_song_of_victory(grasshopper, snail) == unknown", "answer": 0, "code": "rule1() = not roll_dice(zander, grasshopper) => steal_points(grasshopper, 5, doctorfish)\nrule2() = killed(grasshopper, mayor) => not steal_points(grasshopper, 5, doctorfish)\nrule3(something) = give_magnifier(something, catfish) & not steal_points(something, 5, doctorfish) => not need_support(something, starfish)\nrule4() = knows(defensive_plans_of(grasshopper), black_bear) => needs_support(grasshopper, starfish)\nrule5() = has(black_bear, something_to_sit_on) => knows(defensive_plans_of(grasshopper), black_bear)\nrule6(something) = sings_song_of_victory(something, rabbit) => not knows(defense_plan_of(grasshopper), something)\nrule7(something) = needs_support(something, starfish) => not sings_song_of_victory(something, snail)\norder(rule1) > order(rule2) = True\norder(rule3) > order(rule4) = True\norder(rule6) > order(rule5) = True\n\nhas(black_bear, couch) = True\nkilled(grasshopper, mayor) = True\n\nquestion = sings_song_of_victory(grasshopper, snail)\n"}, {"idx": 224, "response": "reduce_work_hours(snail) == True\nnot owes_money_to(snail, squid) = rule6()\nowes_money_to(snail, squid) == False\nknock_down(spider, fortress_of(octopus)) = rule1()\nknock_down(spider, fortress_of(octopus)) == True\nknock_down(spider, fortress_of(octopus)) == True\nquestion = True", "answer": 1, "code": "rule1() = learn_elementary_resource_management(something, kiwi) => knock_down(spider, fortress_of(octopus))\nrule2() = needs_support(jellyfish, snail) & sing_song(puffin, victory_song_for(snail)) => owes_money_to(snail, squid)\nrule3() = roll_dice(something, hummingbird) => not learn_elementary_resource_management(snail, kiwi)\nrule4() = has(snail, leafy_green_vegetable) => not owes_money_to(snail, squid)\nrule5() = learn_elementary_resource_management(something, meerkat) => roll_dice(doctorfish, hummingbird)\nrule6() = reduce_work_hours(snail) => not owes_money_to(snail, squid)\nrule7(something) = owes_money_to(something, squid) => learn_basics_of_resource_management(something, kiwi)\norder(rule4) > order(rule2) = True\norder(rule6) > order(rule2) = True\norder(rule7) > order(rule3) = True\n\nhas(doctorfish, card_with(black_color)) = True\nparked_bike(doctorfish, in_front_of(store)) = True\nneeds_support(jellyfish, snail) = True\nlearn_basics_of_resource_management(lion, meerkat) = True\nsing_song(puffin, victory_song_for(snail)) = True\nhas(snail, computer) = True\nreduce_work_hours(snail) = True\n\nquestion = knock_down(spider, fortress_of(octopus))\n"}, {"idx": 225, "response": "has(octopus, card_with(red_color)) == True\nnot enemy(octopus, pig) = rule8()\nenemy(octopus, pig) == False\nfriends(raven) = 7\nlearn_basics_of_resource_management(raven, pig) = rule7()\nlearn_basics_of_resource_management(raven, pig) == True\nlearn_basics_of_resource_management(raven, pig) == True\nnot steal_points(oscar, crocodile, 5) = rule4()\nsteal_points(oscar, crocodile, 5) == False\nquestion = False", "answer": -1, "code": "rule1() = remove(something, piece_of(ferret)) => not steal_points(grizzly_bear, pig, 5)\nrule2() = has(grizzly_bear, card) and color(card) in rainbow_colors => steal_points(grizzly_bear, pig, 5)\nrule3() = attack_green_fields(something, canary) => steal_points(oscar, crocodile, 5)\nrule4() = learn_basics_of_resource_management(parrot, oscar) => not steal_points(oscar, crocodile, 5)\nrule5() = not enemy(octopus, pig) => attack_green_fields(pig, canary)\nrule6() = not raise_flag_of_peace(something, zander) => not learn_basics_of_resource_management(something, pig)\nrule7() = friends(raven) < 17 => learn_basics_of_resource_management(raven, pig)\nrule8() = has(octopus, card_with(primary_color)) => not enemy(octopus, pig)\norder(rule1) > order(rule2) = True\norder(rule4) > order(rule3) = True\norder(rule6) > order(rule7) = True\n\nhas(grizzly_bear, card_with(violet_color)) = True\nhas(octopus, card_with(red_color)) = True\nfriends(raven) = 7\nenergetic(friend_of(raven, 1)) = True\nenergetic(friend_of(raven, 2)) = False\nenergetic(friend_of(raven, 3)) = False\nenergetic(friend_of(raven, 4)) = False\nenergetic(friend_of(raven, 5)) = False\nenergetic(friend_of(raven, 6)) = False\nenergetic(friend_of(raven, 7)) = False\n\nquestion = steal_points(oscar, crocodile, 5)\n"}, {"idx": 226, "response": "has(kudu, card_with(violet_color)) == True\noffer_job_position(kudu, panther) = rule1()\noffer_job_position(kudu, panther) == True\noffer_job_position(kudu, panther) == True\nnot knows_defense_plan(panther, catfish) = rule3()\nknows_defense_plan(panther, catfish) == False\nknows_defense_plan(panther, catfish) == False\nnot raise_flag_of_peace(catfish, cockroach) = rule8()\nraise_flag_of_peace(catfish, cockroach) == False\nraise_flag_of_peace(catfish, cockroach) == False\nquestion = False", "answer": -1, "code": "rule1() = has(kudu, card_with(color_starting_with(\"v\"))) => offer_job_position(kudu, panther)\nrule2() = wink(cricket, lion) => not need_support(lion, catfish)\nrule3() = offer_job_position(kudu, panther) => not knows_defense_plan(panther, catfish)\nrule4(something) = remove(something, piece_of(oscar)) => need_support(something, catfish)\nrule5(something) = prepare_armor(something, gecko) => knows_defense_plan(something, catfish)\nrule6() = has(lion, card_with(primary_color)) => remove(lion, piece_of(oscar))\nrule7() = friends(lion) < 3 => remove(lion, piece_of(oscar))\nrule8() = not knows_defense_plan(panther, catfish) => not raise_flag_of_peace(catfish, cockroach)\nrule9() = need_support(lion, catfish) & remove(grizzly_bear, piece_of(catfish)) => raise_flag_of_peace(catfish, cockroach)\norder(rule2) > order(rule4) = True\norder(rule5) > order(rule3) = True\norder(rule9) > order(rule8) = True\n\nhas(kudu, card_with(violet_color)) = True\nfriends(lion) = 5\nhas(lion, card_with(red_color)) = True\nnot enemy(tilapia, lion) = True\n\nquestion = raise_flag_of_peace(catfish, cockroach)\n"}, {"idx": 227, "response": "friends(ferret) = 14\nraise_flag_of_peace(ferret, lion) = True\nnot remove(lion, piece_of(squid)) = rule1()\nremove(lion, piece_of(squid)) = False\nnot needs_support(squirrel, squid) = rule4()\nneeds_support(squirrel, squid) = False\nsteal_points(squid, 5, mosquito) = rule4()\nsteal_points(squid, 5, mosquito) = True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(ferret, lion) => not remove(lion, piece_of(squid))\nrule2() = has(starfish, musical_instrument) => proceed(starfish, spot_right_after(spot_of(zander)))\nrule3() = friends(squirrel) > 9 => not knows(defense_plan_of(goldfish), squirrel)\nrule4() = not remove(lion, piece_of(squid)) & not needs_support(squirrel, squid) => steal_points(squid, 5, mosquito)\nrule5() = proceed(something, spot_right_after(spot_of(zander))) => burn(warehouse_of(squid), something)\nrule6() = has(squirrel, something_to_sit_on) => not knows(defensive_plans_of(goldfish), squirrel)\nrule7() = has(ferret, card) and color(card) in rainbow_colors => not raise_flag_of_peace(ferret, lion)\nrule8(something) = sing_song(something, victory_song_for(hummingbird)) & not knows(defensive_plans_of(goldfish), something) => not needs_support(something, squid)\nrule9() = prepare_armor(parrot, squirrel) => not sing_song(squirrel, victory_song_for(hummingbird))\nrule10() = raise_flag_of_peace(something, donkey) => raise_flag_of_peace(ferret, lion)\nrule11() = took_bike(starfish, store) => proceed(starfish, spot_right_after(spot_of(zander)))\nrule12() = not knock_down(sheep, fortress) => remove(something, piece_of(squid))\nrule13() = friends(ferret) < 6 => not raise_flag_of_peace(ferret, lion)\norder(rule10) > order(rule13) = True\norder(rule10) > order(rule7) = True\norder(rule12) > order(rule1) = True\n\nfriends(ferret) = 14\nraise_flag_of_peace(hare, donkey) = True\nproceed(lobster, spot_right_after(spot_of(meerkat))) = True\nprepare_armor(parrot, squirrel) = True\nfriends(squirrel) = 12\nhas(squirrel, spinach) = True\nhas(starfish, arugula) = True\ntook_bike(starfish, store) = True\n\nquestion = steal_points(squid, 5, mosquito)\n"}, {"idx": 228, "response": "learn_basics_of_resource_management(gecko, koala) = unknown", "answer": 0, "code": "rule1() = learn_basics_of_resource_management(gecko, koala) & learn_basics_of_resource_management(tilapia, gecko) => not learn_basics_of_resource_management(gecko, koala)\nrule2() = has_high_salary(tilapia) => respects(tilapia, grasshopper)\nrule3() = friends(squirrel) > 3 => proceed(squirrel, spot_right_after(spot_of(puffin)))\nrule4() = steal_points(grasshopper, 5, gecko) => learn_elementary_resource_management(gecko, koala)\nrule5(something) = knock_down(something, fortress_of(snail)) & not offer_job_position(something, meerkat) => not proceed(something, spot_right_after(spot_of(puffin)))\nrule6() = proceed(something, spot_right_after(spot_of(puffin))) => steal_points(grasshopper, 5, gecko)\nrule7() = has_card_with_color_starting_with(tilapia, \"v\") => not respects(tilapia, grasshopper)\nrule8() = first_letter_of(name(tilapia)) == first_letter_of(name(hummingbird)) => respects(tilapia, grasshopper)\nrule9() = steal_points(jellyfish, 5, turtle) => raise_flag_of_peace(turtle, grasshopper)\norder(rule1) > order(rule4) = True\norder(rule5) > order(rule3) = True\norder(rule7) > order(rule2) = True\norder(rule7) > order(rule8) = True\n\nname(hummingbird, Cinnamon) = True\nsteal_points(jellyfish, 5, turtle) = True\nfriends(squirrel) = 13\nnot offer_job_position(squirrel, meerkat) = True\nhas_well_paid_job(tilapia) = True\nname(tilapia, Tango) = True\n\nquestion = learn_basics_of_resource_management(gecko, koala)\n"}, {"idx": 229, "response": "learn_elementary_resource_management(black_bear, leopard) == False\nnot learn_elementary_resource_management(black_bear, leopard) == True\nlearn_elementary_resource_management(leopard, kiwi) = rule2()\nlearn_elementary_resource_management(leopard, kiwi) == True\nlearn_elementary_resource_management(leopard, kiwi) == True\nnot roll_dice(leopard, sun_bear) = rule3()\nroll_dice(leopard, sun_bear) == False\nroll_dice(leopard, sun_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = fan_of(black_bear, Chris_Ronaldo) => not learn_basics_of_resource_management(black_bear, leopard)\nrule2() = offer_job_position(hummingbird, leopard) & not learn_elementary_resource_management(black_bear, leopard) => learn_elementary_resource_management(leopard, kiwi)\nrule3(something) = learn_elementary_resource_management(something, kiwi) => not roll_dice(something, sun_bear)\nrule4(something) = knows(defensive_plans_of(buffalo), something) => needs_support(something, leopard)\nrule5() = proceed(carp, spot_right_after(spot_of(leopard))) => not learn_elementary_resource_management(leopard, kiwi)\nrule6() = points(grizzly_bear) == points(leopard) => not give_magnifying_glass(leopard, hummingbird)\nrule7() = winks_at(something, goldfish) => points(grizzly_bear) == points(leopard)\nrule8(something) = not give_magnifying_glass(something, hummingbird) => roll_dice(something, sun_bear)\nrule9() = has_high_salary(grizzly_bear) => not points(grizzly_bear) == points(leopard)\nrule10(something) = winks_at(something, donkey) & proceed(something, spot_right_after(spot_of(cheetah))) => offer_job_position(something, leopard)\nrule11() = needs_support(panther, leopard) => give_magnifying_glass(leopard, hummingbird)\norder(rule3) > order(rule8) = True\norder(rule5) > order(rule2) = True\norder(rule6) > order(rule11) = True\norder(rule9) > order(rule7) = True\n\nsupports(black_bear, Chris_Ronaldo) = True\nenemy(caterpillar, jellyfish) = True\nproceed(hummingbird, spot_right_after(spot_of(cheetah))) = True\nwinks_at(hummingbird, donkey) = True\nknows(defensive_plans_of(buffalo), panther) = True\nwinks_at(starfish, goldfish) = True\n\nquestion = roll_dice(leopard, sun_bear)\n"}, {"idx": 230, "response": "knows(defensive_plans_of(squirrel), panther) == False\nproceed(panther, spot_right_after(spot_of(phoenix))) == True\nnot knows(defensive_plans_of(panther), panther) = rule1(panther)\nnot knows(defensive_plans_of(panther), panther) == True\nknows(defense_plan_of(panther), whale) == True\nknows(defense_plan_of(panther), black_bear) == True\nknock_down(panther, fortress_of(swordfish)) = rule16()\nknock_down(panther, fortress_of(swordfish)) == True\nknock_down(panther, fortress_of(swordfish)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = knows(defensive_plans_of(squirrel), something) & proceed(something, spot_right_after(spot_of(phoenix))) => not knows(defensive_plans_of(panther), something)\nrule2() = fan_of(penguin, Chris_Ronaldo) => needs_support(penguin, halibut)\nrule3() = needs_support(penguin, halibut) => raise_flag_of_peace(halibut, sun_bear)\nrule4(something) = offer_job_position(something, catfish) => knows(defense_plan_of(panther), something)\nrule5() = has(baboon, card_with(primary_color)) => enemy(baboon, grizzly_bear)\nrule6(something) = steal_points(something, puffin, 5) => not roll_dice(something, octopus)\nrule7() = voted(black_bear, mayor) => not offer_job_position(black_bear, catfish)\nrule8() = has(black_bear, drink) => not offer_job_position(black_bear, catfish)\nrule9() = enemy(something, grizzly_bear) => knows(defensive_plans_of(panther), whale)\nrule10() = has(penguin, something_to_sit_on) => needs_support(penguin, halibut)\nrule11() = first_letter_of(name(zander)) == first_letter_of(name(caterpillar)) => raise_flag_of_peace(zander, polar_bear)\nrule12() = owes_money_to(something, canary) => not raise_flag_of_peace(zander, polar_bear)\nrule13() = has(zander, device_to_connect_to_internet) => raise_flag_of_peace(zander, polar_bear)\nrule14() = has(black_bear, leafy_green_vegetable) => offer_job_position(black_bear, catfish)\nrule15(something) = offer_job_position(something, snail) => proceed(something, spot_right_after(spot_of(phoenix)))\nrule16() = knows(defense_plan_of(panther), whale) & knows(defense_plan_of(panther), black_bear) => knock_down(panther, fortress_of(swordfish))\norder(rule1) > order(rule9) = True\norder(rule12) > order(rule11) = True\norder(rule12) > order(rule13) = True\norder(rule7) > order(rule14) = True\norder(rule8) > order(rule14) = True\n\nhas(baboon, card_with(orange_color)) = True\nassassinate(black_bear, mayor) = True\nsteal_points(black_bear, puffin, 5) = True\nhas(black_bear, romaine_lettuce) = True\nname(caterpillar, Max) = True\nhas(penguin, arugula) = True\nsupports(penguin, Chris_Ronaldo) = True\noffer_job_position(whale, snail) = True\nhas(zander, computer) = True\nname(zander, Bella) = True\n\nquestion = knock_down(panther, fortress_of(swordfish))\n"}, {"idx": 231, "response": "needs_support(squirrel, salmon) == True\nknock_down(fortress_of(puffin), jellyfish) = rule3()\nknock_down(fortress_of(puffin), jellyfish) == True\nknock_down(fortress_of(puffin), jellyfish) == True\nrespects(grizzly_bear, hummingbird) = rule1()\nrespects(grizzly_bear, hummingbird) == True\nrespects(grizzly_bear, hummingbird) == True\noffer_job(spider, tiger) = rule2()\noffer_job(spider, tiger) == True\noffer_job(spider, tiger) == True\nquestion = True", "answer": 1, "code": "rule1() = knock_down(fortress_of(puffin), something) => respects(grizzly_bear, hummingbird)\nrule2() = respects(something, hummingbird) => offer_job(spider, tiger)\nrule3() = needs_support(something, salmon) => knock_down(fortress_of(puffin), jellyfish)\n\nneeds_support(squirrel, salmon) = True\n\nquestion = offer_job(spider, tiger)\n"}, {"idx": 232, "response": "not knock_down(fortress_of(oscar), whale) = rule1()\nknock_down(fortress_of(oscar), whale) == False\nnot show_cards(oscar, octopus) = rule1()\nshow_cards(oscar, octopus) == False\nquestion = False", "answer": -1, "code": "rule1() = not knock_down(fortress_of(oscar), whale) => not show_cards(oscar, octopus)\nrule2() = learns_basics_of_resource_management(something, donkey) => offer_job(whale, swordfish)\nrule3() = first_letter_of(name(whale)) == first_letter_of(name(rabbit)) => not offer_job(whale, swordfish)\nrule4() = created_time_machine(whale) => attack_green_fields(whale, swordfish)\nrule5() = not learns_elementary_resource_management(goldfish, whale) => knock_down(fortress_of(oscar), whale)\nrule6(something) = offer_job(something, swordfish) & attack_green_fields(swordfish, something) => not knock_down(fortress_of(oscar), something)\norder(rule3) > order(rule2) = True\norder(rule5) > order(rule6) = True\n\nlearns_basics_of_resource_management(catfish, donkey) = True\ncreated_time_machine(whale) = True\nname(whale, Blossom) = True\n\nquestion = show_cards(oscar, octopus)\n"}, {"idx": 233, "response": "has(viperfish, card_with(green_color)) == True\ncolor(card_with(green_color)) == green\ncolor(card_with(green_color)) in rainbow_colors == True\nknows(defense_plan_of(moose), viperfish) = rule4()\nknows(defense_plan_of(moose), viperfish) == True\nknows(defense_plan_of(moose), viperfish) == True\nnot eat_food(cricket, penguin) = rule6(cricket)\neat_food(cricket, penguin) == False\nremove(cricket, piece_of(cricket)) = rule5()\nremove(cricket, piece_of(cricket)) == True\noffer_job(cricket, gecko) = True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(something, tilapia) => eat_food(something, penguin)\nrule2() = has(viperfish, drink) => not knows(defense_plan_of(moose), viperfish)\nrule3() = first_letter_of(name(viperfish)) == first_letter_of(name(doctorfish)) => not knows(defense_plan_of(moose), viperfish)\nrule4() = has(viperfish, card) and color(card) in rainbow_colors => knows(defense_plan_of(moose), viperfish)\nrule5() = remove(viperfish, piece_of(cricket)) => offer_job(cricket, gecko)\nrule6(something) = knows(defense_plan_of(moose), something) & not eat_food(something, penguin) => remove(something, piece_of(cricket))\norder(rule2) > order(rule4) = True\norder(rule3) > order(rule4) = True\n\nname(doctorfish, Pablo) = True\nhas(viperfish, card_with(green_color)) = True\nname(viperfish, Meadow) = True\nraise_flag_of_peace(viperfish, tilapia) = True\n\nquestion = offer_job(cricket, gecko)\n"}, {"idx": 234, "response": "eats_food_of(oscar, amberjack) == rule4()\neats_food_of(oscar, amberjack) == True\nprepare_armor(amberjack, black_bear) == True\nnot needs_support(aardvark, black_bear) == rule11()\nneeds_support(aardvark, black_bear) == False\nknows_defensive_plans(black_bear, doctorfish) == True\nquestion = True", "answer": 1, "code": "rule1() = eats_food_of(something, phoenix) => not knows_defensive_plans(black_bear, doctorfish)\nrule2() = has(parrot, card_with(primary_color)) => knock_down(parrot, fortress_of(koala))\nrule3() = knock_down(something, fortress_of(koala)) => not needs_support(aardvark, black_bear)\nrule4() = eats_food_of(oscar, amberjack) => prepare_armor(amberjack, black_bear)\nrule5() = first_letter_of(name(amberjack)) == first_letter_of(name(phoenix)) => steal_points(amberjack, 5, squirrel)\nrule6() = burn(warehouse_of(buffalo), something) => eats_food_of(oscar, amberjack)\nrule7() = friends(amberjack) < 5 => steal_points(amberjack, 5, squirrel)\nrule8() = not has_keys(amberjack) => steal_points(amberjack, 5, eagle)\nrule9() = steal_points(something, 5, squirrel) & steal_points(something, 5, eagle) => not prepare_armor(something, black_bear)\nrule10() = has(parrot, musical_instrument) => knock_down(parrot, fortress_of(koala))\nrule11() = prepare_armor(amberjack, black_bear) & not needs_support(aardvark, black_bear) => knows_defensive_plans(black_bear, doctorfish)\nrule12() = friends(oscar) < 15 => not eats_food_of(oscar, amberjack)\norder(rule1) > order(rule11) = True\norder(rule4) > order(rule9) = True\norder(rule6) > order(rule12) = True\n\nfriends(amberjack) = 3\nhas(amberjack, bald_friend) = True\nhas(amberjack, non_bald_friend1) = True\nhas(amberjack, non_bald_friend2) = True\nname(amberjack, Lily) = True\nhas_keys(amberjack) = False\nburn(warehouse_of(buffalo), caterpillar) = True\nfriends(oscar) = 8\nhas(oscar, kind_friend) = True\nhas(oscar, non_kind_friend1) = True\nhas(oscar, non_kind_friend2) = True\nhas(oscar, non_kind_friend3) = True\nhas(oscar, non_kind_friend4) = True\nhas(oscar, non_kind_friend5) = True\nhas(oscar, non_kind_friend6) = True\nhas(oscar, non_kind_friend7) = True\nhas(oscar, beer) = True\nhas(parrot, card_with(black_color)) = True\nhas(parrot, violin) = True\nname(phoenix, Blossom) = True\n\nquestion = knows_defensive_plans(black_bear, doctorfish)\n"}, {"idx": 235, "response": "has(goldfish, knapsack_with(apples, oranges)) == True\nroll_dice(goldfish, snail) = rule4()\nroll_dice(goldfish, snail) == True\nroll_dice(goldfish, snail) == True\npoints(kudu) == points(snail) = rule2()\npoints(kudu) == points(snail) == True\npoints(kudu) == points(snail) == True\nnot raise_flag_of_peace(snail, kudu) = rule3()\nraise_flag_of_peace(snail, kudu) == False\nraise_flag_of_peace(snail, kudu) == False\nsing_song(snail, victory_song_for(salmon)) = rule9()\nsing_song(snail, victory_song_for(salmon)) == True\nsing_song(snail, victory_song_for(salmon)) == True\nquestion = True", "answer": 1, "code": "rule1() = not sing_song(something, victory_song_for(eel)) & not raise_flag_of_peace(something, kudu) => not sing_song(something, victory_song_for(salmon))\nrule2() = increase_work_hours(kudu) => points(kudu) == points(snail)\nrule3() = roll_dice(goldfish, snail) & points(kudu) == points(snail) => not raise_flag_of_peace(snail, kudu)\nrule4() = has(goldfish, knapsack_with(apples, oranges)) => roll_dice(goldfish, snail)\nrule5(something) = needs_support(something, hare) => steal_points(something, 5, blobfish)\nrule6() = has(kudu, card_with(color_in(rainbow_colors))) => points(kudu) == points(snail)\nrule7() = wink(turtle, snail) => raise_flag_of_peace(snail, kudu)\nrule8(something) = steal_points(something, 5, blobfish) => not sing_song(something, victory_song_for(eel))\nrule9() = owes_money_to(something, phoenix) => sing_song(snail, victory_song_for(salmon))\norder(rule7) > order(rule3) = True\norder(rule9) > order(rule1) = True\n\nhas(goldfish, knapsack) = True\nhas(kudu, card_with(green_color)) = True\nreduce_work_hours(kudu) = True\nneeds_support(snail, hare) = True\n\nquestion = sing_song(snail, victory_song_for(salmon))\n"}, {"idx": 236, "response": "has(halibut, cello) == True\nhas(halibut, musical_instrument) == True\nattack(halibut, green_fields_of(amberjack)) = rule5()\nattack(halibut, green_fields_of(amberjack)) == True\nattack(halibut, green_fields_of(amberjack)) == True\nnot attack(octopus, green_fields_of(polar_bear)) = rule2()\nattack(octopus, green_fields_of(polar_bear)) == False\nattack(octopus, green_fields_of(polar_bear)) == False\nburn(warehouse_of(goldfish)) = rule4()\nburn(warehouse_of(goldfish)) == True\nburn(warehouse_of(goldfish)) == True\nburn(warehouse_of(lobster), polar_bear) = rule7()\nburn(warehouse_of(lobster), polar_bear) == True\nburn(warehouse_of(lobster), polar_bear) == True\nprepare_armor(polar_bear, koala) = rule6()\nprepare_armor(polar_bear, koala) == True\nprepare_armor(polar_bear, koala) == True\nquestion = True", "answer": 1, "code": "rule1() = owes_money_to(something, doctorfish) => give(something, magnifying_glass, octopus)\nrule2() = give(hare, magnifying_glass, octopus) => attack(octopus, green_fields_of(polar_bear))\nrule3(something) = attack(something, green_fields_of(amberjack)) => eat(blobfish, food_of(polar_bear))\nrule4() = has(phoenix, sharp_object) => burn(warehouse_of(goldfish))\nrule5() = has(halibut, musical_instrument) => attack(halibut, green_fields_of(amberjack))\nrule6() = not attack(octopus, green_fields_of(polar_bear)) & burn(warehouse_of(lobster), polar_bear) => prepare_armor(polar_bear, koala)\nrule7() = burn(warehouse_of(goldfish)) => burn(warehouse_of(lobster), polar_bear)\nrule8() = took(phoenix, bike, store) => burn(warehouse_of(goldfish))\n\nhas(halibut, cello) = True\nowes_money_to(hare, doctorfish) = True\nhas(phoenix, cutter) = True\nparked(phoenix, bike, front_of(store)) = True\n\nquestion = prepare_armor(polar_bear, koala)\n"}, {"idx": 237, "response": "not enemy(tiger, cat) = rule3()\nenemy(tiger, cat) == False\nwink(spider, cat) = rule4()\nwink(spider, cat) == True\nwink(spider, cat) == True\nnever_learn_basics_of_resource_management(cat, blobfish) = rule3()\nnever_learn_basics_of_resource_management(cat, blobfish) == True\nattack(green_fields_of(grizzly_bear), something) = rule1()\nattack(green_fields_of(grizzly_bear), something) == True\nattack(green_fields_of(grizzly_bear), something) == True\nlearn_basics_of_resource_management(cat, blobfish) = True\nquestion = True", "answer": 1, "code": "rule1() = attack(green_fields_of(grizzly_bear), something) => learn_basics_of_resource_management(cat, blobfish)\nrule2() = not give_magnifier(koala, cheetah) => learn_elementary_resource_management(cheetah, mosquito)\nrule3() = wink(spider, cat) & not enemy(tiger, cat) => never_learn_basics_of_resource_management(cat, blobfish)\nrule4() = respects(cricket, spider) => wink(spider, cat)\nrule5() = has_high_salary(cheetah) => roll_dice(cheetah, lobster)\nrule6(something) = not owes_money_to(something, squid) => respect(something, spider)\nrule7(something) = roll_dice(something, lobster) & learn_basics_of_resource_management(something, mosquito) => attack(green_fields_of(grizzly_bear), something)\nrule8() = steal_points_from(hippopotamus, something) => not roll_dice(cheetah, lobster)\norder(rule3) > order(rule1) = True\norder(rule8) > order(rule5) = True\n\nhas_high_salary(cheetah) = True\nfriends(cheetah) = 9 mean_friends + 1 friend_named(Tango)\nname(zander, Teddy) = True\nnot owes_money_to(cricket, squid) = True\nnot give_magnifier(koala, cheetah) = True\n\nquestion = learn_basics_of_resource_management(cat, blobfish)\n"}, {"idx": 238, "response": "not raise_flag(buffalo, peace_flag_for(penguin)) = rule1()\nraise_flag(buffalo, peace_flag_for(penguin)) == False\nbelief(parrot_offers_job(parrot, penguin)) = rule1()\nbelief(parrot_offers_job(parrot, penguin)) == True\nnot attack(penguin, green_fields_owned_by(doctorfish)) = rule1()\nattack(penguin, green_fields_owned_by(doctorfish)) == False\nquestion = False", "answer": -1, "code": "rule1() = belief(parrot_offers_job(parrot, penguin)) & not raise_flag(buffalo, peace_flag_for(penguin)) => not attack(penguin, green_fields_owned_by(doctorfish))\nrule2() = not sing_song(black_bear, victory_song_for(crocodile)) => not actual_enemy(crocodile, koala)\nrule3(something) = sing_song(something, victory_song_for(halibut)) => raise_flag(something, peace_flag_for(penguin))\nrule4() = has(parrot, leafy_green_vegetable) => offers_job(parrot, tiger)\nrule5() = has(cow, high_quality_paper) => gives(cow, magnifying_glass, dog)\nrule6(something) = offers_job(something, tiger) & offers_job(something, cheetah) => not offers_job(something, penguin)\nrule7() = first_letter_of(name(parrot)) == first_letter_of(name(viperfish)) => not eat(parrot, food_of(jellyfish))\nrule8() = has(cow, leafy_green_vegetable) => not gives(cow, magnifier, dog)\nrule9() = first_letter_of(name(kudu)) == first_letter_of(name(leopard)) => points(kudu) == points(sheep)\nrule10() = remove(something, piece_of(aardvark)) => not offers_job(parrot, tiger)\nrule11(something) = gives(something, magnifier, dog) => raise_flag(something, peace_flag_for(dog))\nrule12() = attack(cockroach, green_fields_owned_by(crocodile)) => actual_enemy(crocodile, koala)\nrule13() = friends(parrot) > 12 => eat(parrot, food_of(jellyfish))\nrule14() = has(parrot, drink) => not eat(parrot, food_of(jellyfish))\nrule15() = has(cow, card_with(color_in(rainbow_colors))) => not gives(cow, magnifier, dog)\nrule16() = becomes_enemy(something, koala) => not raise_flag(buffalo, peace_flag_for(penguin))\nrule17() = has(parrot, card_with(primary_color)) => eat(parrot, food_of(jellyfish))\nrule18() = sing_song(buffalo, victory_song_for(halibut)) & gives(meerkat, magnifying_glass, buffalo) => True\nrule19(something) = eat(something, food_of(jellyfish)) => offers_job(something, penguin)\norder(rule10) > order(rule4) = True\norder(rule12) > order(rule2) = True\norder(rule14) > order(rule13) = True\norder(rule14) > order(rule17) = True\norder(rule15) > order(rule5) = True\norder(rule16) > order(rule3) = True\norder(rule6) > order(rule19) = True\norder(rule7) > order(rule13) = True\norder(rule7) > order(rule17) = True\norder(rule8) > order(rule5) = True\n\nattack(cockroach, green_fields_owned_by(crocodile)) = True\nhas(cow, cello) = True\npublished(cow, high_quality_paper) = True\nname(kudu, Tango) = True\nname(leopard, Tessa) = True\ngives(meerkat, magnifier, buffalo) = True\nhas(parrot, card_with(green_color)) = True\nhas(parrot, cutter) = True\nhas(parrot, kale) = True\nfriends(parrot) = 10\nname(parrot, Paco) = True\nnot sing_song(black_bear, victory_song_for(crocodile)) = True\n\nquestion = attack(penguin, green_fields_owned_by(doctorfish))\n"}, {"idx": 239, "response": "remove(spider, piece_of(polar_bear)) = True\nrespects(grasshopper, buffalo) = rule1()\nrespects(grasshopper, buffalo) == True\nrespects(grasshopper, buffalo) == True\nowes_money_to(sun_bear, hare) = rule2()\nowes_money_to(sun_bear, hare) == True\nowes_money_to(sun_bear, hare) == True\nlearn_basics_of_resource_management(doctorfish, hare) = rule3()\nlearn_basics_of_resource_management(doctorfish, hare) == True\nlearn_basics_of_resource_management(doctorfish, hare) == True\nattack(viperfish, green_fields_of(doctorfish)) = rule8()\nattack(viperfish, green_fields_of(doctorfish)) == True\nattack(viperfish, green_fields_of(doctorfish)) == True\nlearn_elementary_resource_management(doctorfish, hare) = rule4()\nlearn_elementary_resource_management(doctorfish, hare) == True\nlearn_elementary_resource_management(doctorfish, hare) == True\nnot attack(viperfish, green_fields_of(doctorfish)) = rule5()\nattack(viperfish, green_fields_of(doctorfish)) == False\nattack(viperfish, green_fields_of(doctorfish)) == False\nsteal_points(sea_bass, 5, eagle) = True\nnot attack(eagle, green_fields_of(sun_bear)) = rule6()\nattack(eagle, green_fields_of(sun_bear)) == False\nattack(eagle, green_fields_of(sun_bear)) == False\nnot learn_elementary_resource_management(doctorfish, hare) = rule7()\nlearn_elementary_resource_management(doctorfish, hare) == False\nlearn_elementary_resource_management(doctorfish, hare) == False\nquestion = True", "answer": 1, "code": "rule1() = remove(something, piece_of(polar_bear)) => respects(grasshopper, buffalo)\nrule2() = respects(something, buffalo) => owes_money_to(sun_bear, hare)\nrule3() = learn_basics_of_resource_management(doctorfish, hare) & owes_money_to(sun_bear, hare) => learn_basics_of_resource_management(hare, wolverine)\nrule4() = attack(viperfish, green_fields_of(doctorfish)) => learn_elementary_resource_management(doctorfish, hare)\nrule5() = remove(jellyfish, piece_of(viperfish)) => not attack(viperfish, green_fields_of(doctorfish))\nrule6() = steal_points(sea_bass, 5, eagle) => not attack(eagle, green_fields_of(sun_bear))\nrule7() = remove(something, piece_of(starfish)) => not learn_elementary_resource_management(doctorfish, hare)\nrule8() = raise_flag_of_peace(something, elephant) => attack(viperfish, green_fields_of(doctorfish))\norder(rule7) > order(rule4) = True\norder(rule8) > order(rule5) = True\n\neats(phoenix, food_of(elephant)) = True\nsteal_points(sea_bass, 5, eagle) = True\nremove(spider, piece_of(polar_bear)) = True\nnot respects(eagle, leopard) = True\n\nquestion = learn_basics_of_resource_management(hare, wolverine)\n"}, {"idx": 240, "response": "name(ferret, Cinnamon) == True\nname(halibut, Buddy) == True\nfirst_letter_of(name(ferret)) == first_letter_of(name(halibut)) == True\nenemy(ferret, eagle) = rule3()\nenemy(ferret, eagle) == True\nenemy(ferret, eagle) == True\nnot knock_down(eagle, fortress_of(puffin)) = rule4()\nknock_down(eagle, fortress_of(puffin)) == False\nrolls_dice_for(buffalo, something) = rule8(something)\nrolls_dice_for(buffalo, carp) == True\nrolls_dice_for(buffalo, carp) == True\nnot burn(warehouse_of(puffin), canary) = rule5()\nburn(warehouse_of(puffin), canary) == False\ngive(puffin, magnifying_glass, carp) = rule1()\ngive(puffin, magnifying_glass, carp) == True\ngive(puffin, magnifying_glass, carp) == True\nquestion = True", "answer": 1, "code": "rule1() = not knock_down(eagle, fortress_of(puffin)) & not burn(warehouse_of(puffin), canary) => give(puffin, magnifying_glass, carp)\nrule2() = owns(ferret, luxury_aircraft) => actual_enemy(ferret, eagle)\nrule3() = first_letter_of(name(ferret)) == first_letter_of(name(halibut)) => enemy(ferret, eagle)\nrule4() = enemy(ferret, eagle) => not knock_down(eagle, fortress_of(puffin))\nrule5() = rolls_dice_for(buffalo, something) => not burn(warehouse_of(puffin), canary)\nrule6() = offer_job_position(tilapia, canary) => burn(warehouse_of(puffin), canary)\nrule7() = needs_support(something, kudu) => knock_down(eagle, fortress_of(puffin))\nrule8(something) = knock_down(fortress_of(raven), something) => rolls_dice_for(buffalo, something)\norder(rule6) > order(rule5) = True\norder(rule7) > order(rule4) = True\n\nname(ferret, Cinnamon) = True\nowns(ferret, luxury_aircraft) = True\nname(halibut, Buddy) = True\nknock_down(fortress_of(raven), whale) = True\n\nquestion = give(puffin, magnifying_glass, carp)\n"}, {"idx": 241, "response": "owes_money_to(blobfish, mosquito) == True\noffer_job_position(gecko, mosquito) == True\nnot enemy(mosquito, cricket) = rule5(mosquito)\nnot enemy(mosquito, cricket) == True\nproceed(mosquito, spot_right_after(spot_of(donkey))) = rule1()\nproceed(mosquito, spot_right_after(spot_of(donkey))) == True\nproceed(mosquito, spot_right_after(spot_of(donkey))) == True\nquestion = True", "answer": 1, "code": "rule1() = enemy(something, snail) => proceed(mosquito, spot_right_after(spot_of(donkey)))\nrule2() = first_letter_of(name(doctorfish)) == first_letter_of(name(puffin)) => enemy(doctorfish, snail)\nrule3() = owes_money_to(blobfish, mosquito) & offer_job_position(gecko, mosquito) => knock_down(mosquito, fortress_of(cockroach))\nrule4() = has(mosquito, something_to_sit_on) => roll_dice(mosquito, ferret)\nrule5(something) = proceed(something, spot_right_after(spot_of(donkey))) => not enemy(something, cricket)\n\nowes_money_to(blobfish, mosquito) = True\nname(doctorfish, Meadow) = True\nroll_dice(eel, mosquito) = True\noffer_job_position(gecko, mosquito) = True\nhas(mosquito, bench) = True\nname(puffin, Max) = True\n\nquestion = enemy(mosquito, cricket)\n"}, {"idx": 242, "response": "name(octopus, Peddi) == True\nname(blobfish, Paco) == True\nfirst_letter_of(name(octopus)) == first_letter_of(name(blobfish)) == True\nnot learn_elementary_resource_management(octopus, raven) = rule1()\nlearn_elementary_resource_management(octopus, raven) == False\nproceed(blobfish, spot_right_after(spot_of(eagle))) == True\nlearn_basics_of_resource_management(octopus, raven) = rule2()\nlearn_basics_of_resource_management(octopus, raven) == True\nroll_dice(catfish, koala) == True\nnot need_support(koala, panther) = rule3()\nneed_support(koala, panther) == False\ntook_bike(kudu, store) == True\nowes_money_to(kudu, jellyfish) = rule4()\nowes_money_to(kudu, jellyfish) == True\nowes_money_to(cat, panther) == True\nnot knows(defense_plan_of(panther), leopard) = rule5()\nknows(defense_plan_of(panther), leopard) == False\nshow_cards(panther, halibut) = rule5()\nshow_cards(panther, halibut) == True\nshow_cards(panther, halibut) == True\npoints(panther) == points(pig) = rule6(panther)\npoints(panther) == points(pig) == True\npoints(panther) == points(pig) == True\nowes_money_to(cat, panther) = rule7()\nowes_money_to(cat, panther) == True\nlearn_elementary_resource_management(octopus, raven) = rule8()\nlearn_elementary_resource_management(octopus, raven) == False\nneed_support(koala, panther) = rule8()\nneed_support(koala, panther) == False\nowes_money_to(something, jellyfish) = rule9()\nowes_money_to(something, jellyfish) == unknown\nneed_support(koala, panther) = rule10()\nneed_support(koala, panther) == False\npoints(panther) != points(pig) = rule10()\npoints(panther) != points(pig) == False\nnot attack_green_fields(leopard, green_fields_of(oscar)) = True\nnot knows(defense_plan_of(panther), something) = rule11(something)\nknows(defense_plan_of(panther), something) == False\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(octopus)) == first_letter_of(name(blobfish)) => not learn_elementary_resource_management(octopus, raven)\nrule2() = proceed(something, spot_right_after(spot_of(eagle))) => learn_basics_of_resource_management(octopus, raven)\nrule3() = roll_dice(catfish, koala) => not need_support(koala, panther)\nrule4() = took_bike(kudu, store) => owes_money_to(kudu, jellyfish)\nrule5() = owes_money_to(cat, panther) & not knows(defense_plan_of(panther), leopard) => show_cards(panther, halibut)\nrule6(something) = show_cards(something, halibut) & learn_basics_of_resource_management(something, eel) => points(something) == points(pig)\nrule7() = points(something) == points(sea_bass) => owes_money_to(cat, panther)\nrule8() = learn_elementary_resource_management(something, raven) => need_support(koala, panther)\nrule9() = owes_money_to(something, jellyfish) => learn_basics_of_resource_management(panther, eel)\nrule10() = need_support(koala, panther) => points(panther) != points(pig)\nrule11(something) = not attack_green_fields(something, oscar) => not knows(defense_plan_of(panther), something)\norder(rule1) > order(rule2) = True\norder(rule3) > order(rule8) = True\norder(rule6) > order(rule10) = True\n\nname(blobfish, Paco) = True\nproceed(blobfish, spot_right_after(spot_of(eagle))) = True\npoints(cheetah) == points(sea_bass) = True\nfriends(kudu) = 2\npurchased(kudu, luxury_aircraft) = True\nremove(leopard, piece_of(amberjack)) = True\nname(octopus, Peddi) = True\nnot attack_green_fields(leopard, green_fields_of(oscar)) = True\n\nquestion = points(panther) == points(pig)\n"}, {"idx": 243, "response": "not offer_job_position(whale, snail) = rule5()\noffer_job_position(whale, snail) == False\nquestion = False", "answer": -1, "code": "rule1() = raise_flag_of_peace(ferret, moose) => offer_job_position(moose, whale)\nrule2(something) = not burn(warehouse_of(turtle), something) & not raise_flag_of_peace(something, blobfish) => prepare_armor(something, cheetah)\nrule3() = winks_at(something, hummingbird) => raise_flag_of_peace(ferret, moose)\nrule4(something) = proceed(something, spot_right_after(spot_of(penguin))) => offer_job_position(something, snail)\nrule5() = offer_job_position(moose, whale) & give(caterpillar, magnifier, whale) => not offer_job_position(whale, snail)\nrule6(something) = prepare_armor(something, cheetah) => proceed(something, spot_right_after(spot_of(penguin)))\nrule7(something) = needs_support(something, donkey) => not raise_flag_of_peace(something, moose)\norder(rule5) > order(rule4) = True\norder(rule7) > order(rule3) = True\n\nwinks_at(tiger, hummingbird) = True\nnot burn(warehouse_of(turtle), whale) = True\nnot raise_flag_of_peace(whale, blobfish) = True\n\nquestion = offer_job_position(whale, snail)\n"}, {"idx": 244, "response": "give_magnifying_glass(cow, canary) = question\ngive_magnifying_glass(cow, canary) = True", "answer": 1, "code": "rule1() = attack(caterpillar, green_fields_of(cat)) => not knows_defense_plan(cat, squid)\nrule2() = give_magnifying_glass(something, cockroach) => knows_defense_plan(cat, squid)\nrule3() = owes_money_to(pig, squid) & knows_defense_plan(cat, squid) => learn_elementary_resource_management(squid, viperfish)\nrule4(something) = offer_job(something, turtle) & attack(something, green_fields_of(buffalo)) => owes_money_to(something, squid)\nrule5() = learn_basics_of_resource_management(something, viperfish) => not give_magnifying_glass(cow, canary)\norder(rule1) > order(rule2) = True\n\ngive_magnifier(leopard, cockroach) = True\nattack(pig, green_fields_of(buffalo)) = True\noffer_job(pig, turtle) = True\n\nquestion = give_magnifier(cow, canary)\n"}, {"idx": 245, "response": "has(black_bear, card_with(violet_color)) == True\ncard_with(violet_color) == True\nhas(black_bear, love_seat_sofa) == True\nfriends(black_bear) == 1\nfriends(black_bear) > 4 == False\nroll_dice(black_bear, crocodile) = rule5()\nroll_dice(black_bear, crocodile) == False\nroll_dice(black_bear, crocodile) == False\nnot holds_same_number_of_points(moose, crocodile) = rule9()\nholds_same_number_of_points(moose, crocodile) == False\nshow_cards(lobster, moose) == True\nholds_same_number_of_points(moose, crocodile) == False\nquestion = False", "answer": -1, "code": "rule1() = has(ferret, card_with(color_starting_with(\"v\"))) => learn_basics_of_resource_management(ferret, cricket)\nrule2(something) = not sing_song(something, victory_song_for(cricket)) => raise_flag_of_peace(something, crocodile)\nrule3(something) = owes_money_to(something, leopard) & learns_elementary_resource_management_from(something, sea_bass) => holds_same_number_of_points(something, meerkat)\nrule4() = show_cards(lobster, moose) => holds_same_number_of_points(moose, crocodile)\nrule5() = friends(black_bear) > 4 => roll_dice(black_bear, crocodile)\nrule6() = has(black_bear, card_with(color_in(rainbow_colors))) => roll_dice(black_bear, crocodile)\nrule7() = raise_flag_of_peace(ferret, crocodile) => not holds_same_number_of_points(crocodile, meerkat)\nrule8() = give(koala, magnifying_glass, starfish) => not proceed(starfish, spot_right_after(ferret))\nrule9() = not holds_same_number_of_points(moose, crocodile) & roll_dice(black_bear, crocodile) => learn_basics_of_resource_management(crocodile, sea_bass)\nrule10() = owes_money_to(puffin, crocodile) => owes_money_to(crocodile, leopard)\nrule11() = needs_support(something, octopus) => owes_money_to(puffin, crocodile)\nrule12() = created_time_machine(ferret) => not learn_elementary_resource_management(ferret, cricket)\norder(rule1) > order(rule12) = True\norder(rule7) > order(rule3) = True\n\ngot_job(black_bear, well_paid) = True\nfriends(black_bear) = 1\nhas(black_bear, card_with(violet_color)) = True\nhas(black_bear, love_seat_sofa) = True\ncreated_time_machine(ferret) = True\nneeds_support(halibut, octopus) = True\ngive(koala, magnifying_glass, starfish) = True\nshow_cards(lobster, moose) = True\nhas(starfish, card_with(violet_color)) = True\nhas(starfish, couch) = True\n\nquestion = holds_same_number_of_points(crocodile, meerkat)\n"}, {"idx": 246, "response": "question = unknown", "answer": 0, "code": "rule1() = has_access_to_abundance_of_food(penguin) => show_cards(penguin, wolverine)\nrule2() = has(penguin, connect_to_internet(device)) => show_cards(penguin, wolverine)\nrule3() = holds_same_number_of_points_as(something, turtle) => proceed(pig, spot_right_after(spot_of(blobfish)))\nrule4(something) = not knock_down(something, fortress_of(kudu)) & proceed(something, spot_right_after(spot_of(blobfish))) => knock_down(pig, fortress_of(elephant))\nrule5() = knock_down(something, fortress_of(elephant)) => not give_magnifier(dog, caterpillar)\nrule6() = rolls_dice_for(something, cheetah) => not show_cards(amberjack, dog)\nrule7(something) = show_cards(something, carp) => owes_money_to(something, dog)\nrule8() = first_letter_of(name(wolverine)) == first_letter_of(name(sea_bass)) => show_cards(wolverine, carp)\nrule9() = sing_victory_song(buffalo, pig) => knock_down(pig, fortress_of(kudu))\nrule10(something) = rolls_dice_for(something, hippopotamus) => not show_cards(something, carp)\nrule11() = not show_cards(amberjack, dog) & owes_money_to(wolverine, dog) => give_magnifier(dog, caterpillar)\nrule12() = offer_job_position(something, elephant) => rolls_dice_for(aardvark, cheetah)\nrule13() = needs_support(something, panda_bear) => not knock_down(pig, fortress_of(kudu))\nrule14() = friends(wolverine) < 3 => show_cards(wolverine, carp)\norder(rule10) > order(rule14) = True\norder(rule10) > order(rule8) = True\norder(rule11) > order(rule5) = True\norder(rule9) > order(rule13) = True\n\noffer_job_position(hare, elephant) = True\nhas(penguin, tablet) = True\nstruggles_to_find_food(penguin) = True\nsupports(pig, Chris_Ronaldo) = True\nholds_same_number_of_points_as(rabbit, turtle) = True\nname(sea_bass, Charlie) = True\nneeds_support(spider, panda_bear) = True\nfriends(wolverine, playful) = 1\nfriends(wolverine, not_playful) = 4\nname(wolverine, Chickpea) = True\n\nquestion = give_magnifier(dog, caterpillar)\n"}, {"idx": 247, "response": "not raise_flag_of_peace(hummingbird, eel) = rule7()\nnot raise_flag_of_peace(hummingbird, eel) == True\nnot raise_flag_of_peace(hummingbird, eel) == True\nnot owes_money_to(eel, squid) = rule6()\nnot owes_money_to(eel, squid) == True\nquestion = True", "answer": 1, "code": "rule1() = killed(hummingbird, mayor) => rolls_dice(hummingbird, dog)\nrule2() = belief(cow_knocks_down_fortress(hummingbird)) & not offer_job(lion, hummingbird) => not wink(hummingbird, cow)\nrule3(something) = not wink(something, cow) & rolls_dice(something, dog) => not raise_flag_of_peace(something, eel)\nrule4(something) = not prepare_armor(something, meerkat) => not actual_enemy(something, eel)\nrule5() = has(hummingbird, connect_to_internet(device)) => rolls_dice(hummingbird, dog)\nrule6() = not actual_enemy(catfish, eel) => owes_money_to(eel, squid)\nrule7() = not raise_flag_of_peace(hummingbird, eel) => not owes_money_to(eel, squid)\nrule8() = first_letter_of(name(hummingbird)) == first_letter_of(name(baboon)) => wink(hummingbird, cow)\nrule9() = not respect(zander, catfish) => not prepare_armor(catfish, meerkat)\norder(rule2) > order(rule8) = True\norder(rule7) > order(rule6) = True\n\nname(baboon, Tarzan) = True\ncow_knocks_down_fortress(hummingbird) = True\nkilled(hummingbird, mayor) = True\nhas(hummingbird, love_seat_sofa) = True\nname(hummingbird, Tango) = True\neats(kudu, food_of(kiwi)) = True\nnot offer_job(lion, hummingbird) = True\nnot respect(zander, catfish) = True\n\nquestion = owes_money_to(eel, squid)\n"}, {"idx": 248, "response": "steal_points(halibut, elephant, 5) == True\nroll_dice(cat, salmon) = rule5()\nroll_dice(cat, salmon) == True\nroll_dice(cat, salmon) == True\nshow_cards(cat, gecko) = rule4()\nshow_cards(cat, gecko) == True\nshow_cards(cat, gecko) == True\nowes_money_to(gecko, grasshopper) = True\nquestion = True", "answer": 1, "code": "rule1() = eat_food(something, kangaroo) & prepare_armor(something, grizzly_bear) => not hold_same_number_of_points(something, hippopotamus)\nrule2() = remove(something, piece_of(hippopotamus)) => show_cards(something, gecko)\nrule3() = knock_down(raven, fortress_of(cat)) & roll_dice(wolverine, cat) => hold_equal_number_of_points(cat, hippopotamus)\nrule4() = show_cards(cat, gecko) => owes_money_to(gecko, grasshopper)\nrule5() = steal_points(something, elephant, 5) => roll_dice(cat, salmon)\nrule6() = roll_dice(something, salmon) => not show_cards(something, gecko)\norder(rule2) > order(rule6) = True\norder(rule3) > order(rule1) = True\n\neat_food(cat, kangaroo) = True\nprepare_armor(cat, grizzly_bear) = True\nreduce_work_hours(cat) = True\nsteal_points(halibut, elephant, 5) = True\nknock_down(raven, fortress_of(cat)) = True\nroll_dice(wolverine, cat) = True\n\nquestion = owes_money_to(gecko, grasshopper)\n"}, {"idx": 249, "response": "not respects(grizzly_bear, cat) = rule1()\nrespects(grizzly_bear, cat) = False\nnot need_support(cat, gecko) = rule1()\nneed_support(cat, gecko) = False\nnot knock_down(hummingbird, fortress_of(mosquito)) = True\nnot sing_song(mosquito, victory_song_for(wolverine)) = rule2()\nsing_song(mosquito, victory_song_for(wolverine)) = False\nnot sing_song(mosquito, victory_song_for(wolverine)) = rule3()\nsing_song(mosquito, victory_song_for(wolverine)) = False\nsing_song(something, victory_song_for(halibut)) = rule4(something)\nenemy(something, cat) = rule4(something)\nenemy(something, cat) = False\ngives_magnifying_glass(something, jellyfish) = rule5()\nnot sing_song(something, victory_song_for(halibut)) = rule5()\nsing_song(something, victory_song_for(halibut)) = False\nholds_same_points_as(something, hare) = rule6()\nrespects(something, cat) = rule6()\nrespects(something, cat) = True\nprepare_armor(something, halibut) = rule7()\nnot enemy(mosquito, cat) = rule7()\nenemy(mosquito, cat) = False\nhas(mosquito, card_with(primary_color)) = rule9()\nsing_song(mosquito, victory_song_for(halibut)) = rule9()\nsing_song(mosquito, victory_song_for(halibut)) = True\nneed_support(cat, gecko) = rule8()\nneed_support(cat, gecko) = False\nquestion = False", "answer": -1, "code": "rule1() = not respects(grizzly_bear, cat) => not need_support(cat, gecko)\nrule2() = not knock_down(hummingbird, fortress_of(mosquito)) => sing_song(mosquito, victory_song_for(wolverine))\nrule3() = knows(defense_plan_of(carp), something) => not sing_song(mosquito, victory_song_for(wolverine))\nrule4(something) = sing_song(something, victory_song_for(halibut)) & sing_song(something, victory_song_for(wolverine)) => enemy(something, cat)\nrule5() = gives_magnifying_glass(something, jellyfish) => not sing_song(something, victory_song_for(halibut))\nrule6() = holds_same_points_as(something, hare) => respects(something, cat)\nrule7() = prepare_armor(something, halibut) => not enemy(mosquito, cat)\nrule8() = enemy(mosquito, cat) & respects(lion, cat) => need_support(cat, gecko)\nrule9() = has(mosquito, card_with(primary_color)) => sing_song(mosquito, victory_song_for(halibut))\nrule10() = attacks_green_fields(something, oscar) => holds_same_points_as(something, hare)\norder(rule1) > order(rule8) = True\norder(rule3) > order(rule2) = True\norder(rule5) > order(rule9) = True\norder(rule7) > order(rule4) = True\n\nattacks_green_fields(lion, oscar) = True\nhas(mosquito, card_with(green_color)) = True\nnot burn(warehouse_of(lion), goldfish) = True\nnot knock_down(hummingbird, fortress_of(mosquito)) = True\n\nquestion = need_support(cat, gecko)\n"}, {"idx": 250, "response": "not attack_green_fields(something, halibut) = rule2()\nattack_green_fields(something, halibut) == False\nburn(warehouse_of(octopus)) = rule2()\nburn(warehouse_of(octopus)) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(something, kiwi) => remove(something, piece_of(polar_bear))\nrule2() = not attack_green_fields(something, halibut) => burn(warehouse_of(octopus))\nrule3() = points(salmon) == points(aardvark) => raise_flag_of_peace(aardvark, kiwi)\nrule4() = remove(something, piece_of(polar_bear)) => not burn(warehouse_of(octopus))\norder(rule2) > order(rule4) = True\n\npoints(salmon) == points(aardvark) = True\n\nquestion = burn(warehouse_of(octopus))\n"}, {"idx": 251, "response": "roll_dice(hippopotamus, koala) == True\nowes_money_to(koala, aardvark) = rule4()\nowes_money_to(koala, aardvark) == True\nknows_defense_plan(aardvark, cricket) = rule5(aardvark)\nknows_defense_plan(aardvark, cricket) == True\nquestion = True", "answer": 1, "code": "rule1() = has(panda_bear, card_with(color_starting_with(\"w\"))) => steal_points(panda_bear, 5, aardvark)\nrule2() = owes_money_to(koala, aardvark) & steal_points(panda_bear, 5, aardvark) => add_conclusion(\"the aardvark owes $$$ to the dog\")\nrule3() = has(panda_bear, connect_to_internet(device)) => steal_points(panda_bear, 5, aardvark)\nrule4() = roll_dice(hippopotamus, koala) => owes_money_to(koala, aardvark)\nrule5(something) = owes_money_to(something, dog) => knows_defense_plan(something, cricket)\n\nroll_dice(hippopotamus, koala) = True\nhas(panda_bear, card_with(red_color)) = True\nhas(panda_bear, arugula) = True\n\nquestion = knows_defense_plan(aardvark, cricket)\n"}, {"idx": 252, "response": "give(grizzly_bear, magnifier, squid) == True\nhas(grizzly_bear, card_with(black_color)) == True\nhas(grizzly_bear, tablet) == False\nproceed(grizzly_bear, spot_right_after(spot_of(starfish))) == True\nname(penguin, Casper) == True\nprepare_armor(pig, penguin) == True\nname(tiger, Charlie) == True\noffer_job(hippopotamus, carp) = rule5()\noffer_job(hippopotamus, carp) == True\nquestion = True", "answer": 1, "code": "rule1() = has(grizzly_bear, card) and color(card) in rainbow_colors => eat_food(grizzly_bear, food_of(cricket))\nrule2() = eat_food(something, food_of(cricket)) => proceed(polar_bear, spot_right_after(spot_of(whale)))\nrule3() = prepare_armor(pig, penguin) & prepare_armor(dog, penguin) => offer_job(penguin, polar_bear)\nrule4() = has(grizzly_bear, connect_to_internet(device)) => eat_food(grizzly_bear, food_of(cricket))\nrule5() = proceed(something, spot_right_after(spot_of(whale))) => offer_job(hippopotamus, carp)\nrule6() = proceed(something, spot_right_after(spot_of(starfish))) & give(something, magnifier, squid) => not eat_food(something, food_of(cricket))\nrule7() = first_letter_of(name(penguin)) == first_letter_of(name(tiger)) => not offer_job(penguin, polar_bear)\norder(rule1) > order(rule6) = True\norder(rule3) > order(rule7) = True\norder(rule4) > order(rule6) = True\n\ngive(grizzly_bear, magnifier, squid) = True\nhas(grizzly_bear, card_with(black_color)) = True\nhas(grizzly_bear, tablet) = True\nproceed(grizzly_bear, spot_right_after(spot_of(starfish))) = True\nname(penguin, Casper) = True\nprepare_armor(pig, penguin) = True\nname(tiger, Charlie) = True\n\nquestion = offer_job(hippopotamus, carp)\n"}, {"idx": 253, "response": "has(raven, card_with(violet_color)) == True\ncolor(card_with(violet_color)) == violet\nprepare_armor(raven, grizzly_bear) = rule1()\nprepare_armor(raven, grizzly_bear) == True\nprepare_armor(raven, grizzly_bear) == True\nnot owes_money_to(grizzly_bear, dog) = rule2()\nowes_money_to(grizzly_bear, dog) == False\nprepare_armor(goldfish, dog) = rule5()\nprepare_armor(goldfish, dog) == False\nknock_down(dog, fortress_of(snail)) == False\nnot knock_down(dog, fortress_of(snail)) == True\nnot knock_down(dog, fortress_of(snail)) == True\nnot enemy(dog, grizzly_bear) = rule7(dog)\nenemy(dog, grizzly_bear) == False\nnot enemy(dog, grizzly_bear) == True\nnot offer_job_position(dog, canary) = rule8()\noffer_job_position(dog, canary) == False\nquestion = False", "answer": -1, "code": "rule1() = has(raven, card) and color(card) in rainbow_colors => prepare_armor(raven, grizzly_bear)\nrule2() = prepare_armor(raven, grizzly_bear) => not owes_money_to(grizzly_bear, dog)\nrule3() = first_letter_of(name(baboon)) == first_letter_of(name(doctorfish)) => eats_food(baboon, food_of(oscar))\nrule4() = has(raven, musical_instrument) => prepare_armor(raven, grizzly_bear)\nrule5() = prepare_armor(goldfish, dog) => not knock_down(dog, fortress_of(snail))\nrule6() = has(baboon, card) and color(card) in rainbow_colors => eats_food(baboon, food_of(oscar))\nrule7(something) = eats_food(something, food_of(oscar)) => not enemy(dog, grizzly_bear)\nrule8() = not owes_money_to(grizzly_bear, dog) => not offer_job_position(dog, canary)\nrule9() = not burn(warehouse_of(goldfish), leopard) and not points(lion) == points(goldfish) => not prepare_armor(goldfish, dog)\nrule10(something) = not enemy(something, grizzly_bear) and not knock_down(something, fortress_of(snail)) => offer_job_position(something, canary)\nrule11() = has(goldfish, musical_instrument) => prepare_armor(goldfish, dog)\nrule12() = has(goldfish, high_quality_paper) => prepare_armor(goldfish, dog)\norder(rule8) > order(rule10) = True\norder(rule9) > order(rule11) = True\norder(rule9) > order(rule12) = True\n\nhas(baboon, card_with(white_color)) = True\nname(baboon, Bella) = True\nname(doctorfish, Blossom) = True\nhas(goldfish, tablet) = True\nhas(goldfish, high_quality_paper) = True\nfriends(raven) = 1 bald, 2 not_bald\nhas(raven, basket) = True\nhas(raven, card_with(violet_color)) = True\npoints(lion) != points(goldfish) = True\n\nquestion = offer_job_position(dog, canary)\n"}, {"idx": 254, "response": "not owes_money_to(squirrel, lobster) = rule7()\nnot steal_points(buffalo, 5, lobster) = rule7()\nlearn_elementary_resource_management(lobster, doctorfish) = rule7()\nlearn_basics_of_resource_management(lobster, doctorfish) == True\nlearn_basics_of_resource_management(lobster, doctorfish) == True\nquestion = True", "answer": 1, "code": "rule1() = has(caterpillar, card_with(color_starting_with(\"g\"))) => not learn_elementary_resource_management(caterpillar, whale)\nrule2() = learn_basics_of_resource_management(puffin, squirrel) => not owes_money_to(squirrel, lobster)\nrule3() = learn_basics_of_resource_management(something, whale) => steal_points(buffalo, 5, lobster)\nrule4() = friends(squirrel) < 14 => learn_basics_of_resource_management(squirrel, aardvark)\nrule5(something) = not owes_money_to(something, spider) => learn_elementary_resource_management(something, squirrel)\nrule6() = has(caterpillar, sharp_object) => not learn_elementary_resource_management(caterpillar, whale)\nrule7() = not owes_money_to(squirrel, lobster) & not steal_points(buffalo, 5, lobster) => learn_elementary_resource_management(lobster, doctorfish)\nrule8() = friends(caterpillar) > 6 => learn_elementary_resource_management(caterpillar, whale)\nrule9() = enemy(something, raven) => not prepare_armor(squirrel, meerkat)\nrule10() = first_letter_of(name(caterpillar)) == first_letter_of(name(polar_bear)) => learn_elementary_resource_management(caterpillar, whale)\norder(rule1) > order(rule10) = True\norder(rule1) > order(rule8) = True\norder(rule6) > order(rule10) = True\norder(rule6) > order(rule8) = True\n\nfriends(caterpillar) = 15\nhas(caterpillar, violin) = True\nname(caterpillar, Tango) = True\nenemy(parrot, raven) = True\nname(polar_bear, Cinnamon) = True\nowes_money_to(squid, jellyfish) = True\nfriends(squirrel) = 5\nnot owes_money_to(puffin, spider) = True\n\nquestion = learn_basics_of_resource_management(lobster, doctorfish)\n"}, {"idx": 255, "response": "knock_down(fortress_of(elephant), caterpillar) == True\nrespects(caterpillar, dog) == True\nnot eat_food(raven, spider) = rule4()\neat_food(raven, spider) == False\nrespects(eel, spider) = rule2()\nrespects(eel, spider) == True\nnot eat_food(raven, spider) == False\nshow_cards(spider, buffalo) = rule5()\nshow_cards(spider, buffalo) == True\nquestion = True", "answer": 1, "code": "rule1() = respects(something, dog) & knock_down(fortress_of(elephant), something) => points(something) == points(raven)\nrule2() = rolls_dice(cheetah, eel) => respects(eel, spider)\nrule3() = not knock_down(fortress_of(oscar), something) => not respects(something, spider)\nrule4() = points(caterpillar) == points(raven) => not eat_food(raven, spider)\nrule5() = not eat_food(raven, spider) & respects(eel, spider) => show_cards(spider, buffalo)\nrule6() = first_letter_of(name(cheetah)) == first_letter_of(name(sea_bass)) => rolls_dice(cheetah, eel)\nrule7() = sing_song(squirrel, victory_song_for(raven)) => eat_food(raven, spider)\norder(rule3) > order(rule2) = True\norder(rule7) > order(rule4) = True\n\nknock_down(fortress_of(elephant), caterpillar) = True\nrespects(caterpillar, dog) = True\nname(cheetah, Luna) = True\nname(sea_bass, Lucy) = True\n\nquestion = show_cards(spider, buffalo)\n"}, {"idx": 256, "response": "eats_food_of(caterpillar, zander) == True\nnot burn(warehouse_of(pig), caterpillar) = rule4()\nburn(warehouse_of(pig), caterpillar) == False\nnot wink(swordfish, caterpillar) = rule5()\nwink(swordfish, caterpillar) == False\nremove(caterpillar, piece_of(squid)) = rule5()\nremove(caterpillar, piece_of(squid)) == True\nremove(caterpillar, piece_of(squid)) == True\nquestion = False", "answer": -1, "code": "rule1() = remove(something, piece_of(squid)) => not roll_dice(something, hare)\nrule2() = not burn(warehouse_of(pig), something) & not respects(something, zander) => not remove(something, piece_of(squid))\nrule3() = owes_money_to(black_bear, swordfish) => not wink(swordfish, caterpillar)\nrule4() = eats_food_of(something, zander) => not burn(warehouse_of(pig), something)\nrule5() = not wink(swordfish, caterpillar) => remove(caterpillar, piece_of(squid))\norder(rule2) > order(rule5) = True\n\nowes_money_to(black_bear, swordfish) = True\neats_food_of(caterpillar, zander) = True\n\nquestion = roll_dice(caterpillar, hare)\n"}, {"idx": 257, "response": "not burn(warehouse_of(squirrel)) = rule1()\nburn(warehouse_of(squirrel)) == False\nquestion = show_cards(squirrel, doctorfish)\nquestion = True", "answer": 1, "code": "rule1() = not burn(warehouse_of(squirrel)) => show_cards(squirrel, doctorfish)\nrule2() = has(moose, drink) => not needs_support(moose, swordfish)\nrule3(something) = roll_dice_for(whale, something) => proceed(something, spot_right_after(spot_of(squirrel)))\nrule4(something) = raise_flag_of_peace(something, swordfish) => not burn(warehouse_of(squirrel))\nrule5(something) = needs_support(something, carp) => not steal_points(something, 5, kangaroo)\nrule6(something) = raise_flag_of_peace(something, phoenix) => not roll_dice_for(something, squirrel)\nrule7() = not has(moose, keys) => not needs_support(moose, swordfish)\nrule8() = first_letter_of(name(moose)) == first_letter_of(name(kudu)) => needs_support(moose, swordfish)\nrule9(something) = sing_song(something, victory_song_for(koala)) => steal_points(squirrel, 5, kangaroo)\nrule10() = not proceed(wolverine, spot_right_after(spot_of(squirrel))) & roll_dice_for(rabbit, squirrel) => add_conclusion(\"the squirrel attacks the green fields whose owner is the whale\")\nrule11(something) = not owes_money_to(something, tilapia) => roll_dice_for(something, squirrel)\nrule12(something) = steal_points(something, 5, kangaroo) => prepare_armor(something, sun_bear)\norder(rule5) > order(rule9) = True\norder(rule6) > order(rule11) = True\norder(rule8) > order(rule2) = True\norder(rule8) > order(rule7) = True\n\nname(kudu, Pashmak) = True\nsing_song(lion, victory_song_for(koala)) = True\nhas(moose, piano) = True\nname(moose, Peddi) = True\ngive(wolverine, magnifier, whale) = True\nowes_money_to(rabbit, tilapia) = False\n\nquestion = show_cards(squirrel, doctorfish)\n"}, {"idx": 258, "response": "steal_points(snail, 5, caterpillar) = rule11()\nsteal_points(snail, 5, caterpillar) == True\nknock_down(turtle, fortress_of(panther)) = rule6()\nknock_down(turtle, fortress_of(panther)) == True\nburn(warehouse_of(panther), snail) = rule6()\nburn(warehouse_of(panther), snail) == True\nproceed(panther, spot_right_after(spot_of(donkey))) = rule6()\nproceed(panther, spot_right_after(spot_of(donkey))) == True\nquestion = True", "answer": 1, "code": "rule1() = sing_song(something, victory_song_for(baboon)) => not steal_points(something, 5, caterpillar)\nrule2() = steal_points(something, 5, lobster) => eat_food(something, blobfish)\nrule3() = eat_food(something, blobfish) => respect(something, blobfish)\nrule4() = respects(something, viperfish) => not respect(carp, blobfish)\nrule5() = not attack(ferret, green_fields_owned_by(turtle)) => knock_down(turtle, fortress_of(panther))\nrule6() = knock_down(turtle, fortress_of(panther)) & burn(warehouse_of(panther), snail) => proceed(panther, spot_right_after(spot_of(donkey)))\nrule7() = needs_support(something, hare) & not steal_points(something, 5, caterpillar) => burn(warehouse_of(panther), something)\nrule8() = sing_song(something, victory_song_for(swordfish)) => not knock_down(something, fortress_of(panther))\nrule9() = has(ferret, high_quality_paper) => not attack(ferret, green_fields_owned_by(turtle))\nrule10() = not attack(something, green_fields_owned_by(kudu)) => needs_support(something, hare)\nrule11() = has(snail, card_with(color_in_flag_of_belgium)) => steal_points(snail, 5, caterpillar)\norder(rule11) > order(rule1) = True\norder(rule4) > order(rule3) = True\norder(rule8) > order(rule5) = True\n\nsteal_points(carp, 5, lobster) = True\nhas(ferret, high_quality_paper) = True\nsing_song(snail, victory_song_for(baboon)) = True\nnot attack(snail, green_fields_owned_by(kudu)) = True\n\nquestion = proceed(panther, spot_right_after(spot_of(donkey)))\n"}, {"idx": 259, "response": "name(jellyfish, Cinnamon) == True\nname(phoenix, Tango) == True\nfirst_letter_of(name(jellyfish)) == first_letter_of(name(phoenix)) == True\nnot sing_song(jellyfish, victory_song_for(starfish)) = rule2()\nsing_song(jellyfish, victory_song_for(starfish)) == False\nhas(jellyfish, card_with(indigo_color)) == True\ncolor_starts_with(jellyfish, \"i\") = rule3()\ncolor_starts_with(jellyfish, \"i\") == False\nhas(kangaroo, card_with(white_color)) == True\nburn(warehouse_of(starfish), kangaroo) = rule6()\nburn(warehouse_of(starfish), kangaroo) == True\nburn(warehouse_of(starfish), kangaroo) == True\noffer_job(donkey, squid) = rule8()\noffer_job(donkey, squid) == True\nquestion = True", "answer": 1, "code": "rule1() = steal_points(starfish, 5, donkey) => not offer_job(donkey, squid)\nrule2() = first_letter_of(name(jellyfish)) == first_letter_of(name(phoenix)) => not sing_song(jellyfish, victory_song_for(starfish))\nrule3() = color_starts_with(jellyfish, \"i\") => not sing_song(jellyfish, victory_song_for(starfish))\nrule4() = enemy(something, sun_bear) => not steal_points(starfish, 5, donkey)\nrule5() = burn(warehouse_of(starfish), kangaroo) & not sing_song(jellyfish, victory_song_for(starfish)) => steal_points(starfish, 5, donkey)\nrule6() = has(kangaroo, card_with(primary_color)) => burn(warehouse_of(starfish), kangaroo)\nrule7() = has(kangaroo, sharp_object) => burn(warehouse_of(starfish), kangaroo)\nrule8() = points(phoenix) != points(donkey) => offer_job(donkey, squid)\norder(rule4) > order(rule5) = True\norder(rule8) > order(rule1) = True\n\nhas(jellyfish, card_with(indigo_color)) = True\nfriends(jellyfish) = 4\nname(jellyfish, Cinnamon) = True\nhas(kangaroo, blade) = True\nhas(kangaroo, card_with(white_color)) = True\nname(phoenix, Tango) = True\n\nquestion = offer_job(donkey, squid)\n"}, {"idx": 260, "response": "remove(parrot, piece_of(amberjack)) == True\nnot wink(tilapia, amberjack) == True\nnot give(amberjack, magnifier, cat) = rule1()\ngive(amberjack, magnifier, cat) == False\ngive(amberjack, magnifier, cat) == False\nraise_flag_of_peace(sheep, catfish) == True\ngive(amberjack, magnifying_glass, cat) = rule4()\ngive(amberjack, magnifying_glass, cat) == True\ngive(amberjack, magnifying_glass, cat) == True\nattack(cat, green_fields_of(cricket)) = rule2()\nattack(cat, green_fields_of(cricket)) == True\nattack(cat, green_fields_of(cricket)) == True\nshow_cards(cat, snail) = rule3()\nshow_cards(cat, snail) == True\nshow_cards(cat, snail) == True\npoints(cat) == points(lion) = rule7(cat)\npoints(cat) == points(lion) == True\nquestion = True", "answer": 1, "code": "rule1() = remove(parrot, piece_of(amberjack)) & not wink(tilapia, amberjack) => not give(amberjack, magnifier, cat)\nrule2() = give(amberjack, magnifying_glass, cat) => attack(cat, green_fields_of(cricket))\nrule3(something) = give(something, magnifying_glass, gecko) => show_cards(something, snail)\nrule4() = raise_flag_of_peace(something, catfish) => give(amberjack, magnifying_glass, cat)\nrule5() = steal_points(doctorfish, 5, cat) => not attack(cat, green_fields_of(gecko))\nrule6() = enemy(something, kangaroo) => attack(cat, green_fields_of(gecko))\nrule7(something) = attack(something, green_fields_of(cricket)) & show_cards(something, snail) => points(something) == points(lion)\nrule8(something) = not knows(defensive_plans_of(hummingbird), something) => not attack(something, green_fields_of(cricket))\norder(rule1) > order(rule4) = True\norder(rule5) > order(rule6) = True\norder(rule8) > order(rule2) = True\n\nenemy(hippopotamus, kangaroo) = True\nremove(parrot, piece_of(amberjack)) = True\nraise_flag_of_peace(sheep, catfish) = True\n\nquestion = points(cat) == points(lion)\n"}, {"idx": 261, "response": "knows(defensive_plans_of(sun_bear), pig) == False\noffer_job_position(buffalo, salmon) = rule3()\noffer_job_position(buffalo, salmon) == True\noffer_job_position(buffalo, salmon) == True\ngive_magnifying_glass(buffalo, snail) = rule2()\ngive_magnifying_glass(buffalo, snail) == True\ngive_magnifying_glass(buffalo, snail) == True\nknows(defensive_plans_of(turtle), snail) = question\nknows(defensive_plans_of(turtle), snail) == unknown", "answer": 0, "code": "rule1() = offer_job_position(something, salmon) => give_magnifying_glass(something, snail)\nrule2() = give_magnifying_glass(buffalo, snail) => knows(defensive_plans_of(turtle), snail)\nrule3() = knows(defensive_plans_of(sun_bear), something) => offer_job_position(buffalo, salmon)\nrule4() = needs_support(something, carp) => not knows(defense_plan_of(turtle), snail)\norder(rule4) > order(rule2) = True\n\nknows(defensive_plans_of(sun_bear), pig) = True\n\nquestion = knows(defensive_plans_of(turtle), snail)\n"}, {"idx": 262, "response": "has(whale, card_with(indigo_color)) == True\ncolor(card_with(indigo_color)) == indigo\nhas(whale, card) == True\ncolor(card) in rainbow_colors == True\nnot burn(warehouse_of(sun_bear)) = rule1()\nburn(warehouse_of(sun_bear)) == False\nroll_dice(leopard, oscar) = rule3()\nroll_dice(leopard, oscar) == True\nroll_dice(leopard, oscar) == True\nnot attack(green_fields_of(zander), oscar) = rule11()\nattack(green_fields_of(zander), oscar) == False\nattack(green_fields_of(zander), oscar) == False\nnever_know_defensive_plans(zander, lion) = rule4()\nnever_know_defensive_plans(zander, lion) == True\nquestion = True", "answer": 1, "code": "rule1() = has(whale, card) and color(card) in rainbow_colors => not burn(warehouse_of(sun_bear))\nrule2() = roll_dice(kangaroo, whale) => burn(warehouse_of(sun_bear))\nrule3() = has(leopard, carrying_apples_and_oranges) => roll_dice(leopard, oscar)\nrule4() = not sing_song(whale, victory_song_for(zander)) & not attack(green_fields_of(zander), oscar) => never_know_defensive_plans(zander, lion)\nrule5() = wink(kiwi, oscar) => sing_song(oscar, victory_song_for(mosquito))\nrule6() = has_access_to_abundance_of_food(oscar) => respects(oscar, penguin)\nrule7(something) = not burn(warehouse_of(sun_bear)) => not sing_song(something, victory_song_for(zander))\nrule8() = friends(oscar) < 10 => not respects(oscar, penguin)\nrule9() = has(oscar, sharp_object) => respects(oscar, penguin)\nrule10() = first_letter_of(name(oscar)) == first_letter_of(name(turtle)) => not respects(oscar, penguin)\nrule11() = roll_dice(leopard, oscar) => not attack(green_fields_of(zander), oscar)\norder(rule10) > order(rule6) = True\norder(rule10) > order(rule9) = True\norder(rule2) > order(rule1) = True\norder(rule8) > order(rule6) = True\norder(rule8) > order(rule9) = True\n\nwink(kiwi, oscar) = True\nhas(leopard, plastic_bag) = True\nhas(oscar, knife) = True\nname(oscar, Teddy) = True\nnot sing_song(oscar, victory_song_for(starfish)) = True\nstruggles_to_find_food(oscar) = True\nname(turtle, Milo) = True\nhas(whale, card_with(indigo_color)) = True\n\nquestion = know_defensive_plans(zander, lion)\n"}, {"idx": 263, "response": "has(eel, card_with(blue_color)) == True\nwink(eel, donkey) = rule1()\nwink(eel, donkey) == True\nwink(eel, donkey) == True\nroll_dice(eel, koala) = rule2(eel)\nroll_dice(eel, koala) == True\nroll_dice(eel, koala) == True\nnot roll_dice(eel, koala) == False\nraise_flag_of_peace(koala, eagle) = rule3()\nraise_flag_of_peace(koala, eagle) == False\nraise_flag_of_peace(koala, eagle) == False\nquestion = False", "answer": -1, "code": "rule1() = has(eel, card_with(primary_color)) => wink(eel, donkey)\nrule2(something) = wink(something, donkey) => roll_dice(something, koala)\nrule3() = not roll_dice(eel, koala) => raise_flag_of_peace(koala, eagle)\nrule4() = first_letter_of(name(eel)) == first_letter_of(name(cheetah)) => wink(eel, donkey)\n\nname(cheetah, Chickpea) = True\nhas(eel, card_with(blue_color)) = True\nname(eel, Mojo) = True\n\nquestion = raise_flag_of_peace(koala, eagle)\n"}, {"idx": 264, "response": "has(halibut, card_with(black_color)) == True\ncolor(card_with(black_color)) == black\nrainbow_colors = [red, orange, yellow, green, blue, indigo, violet]\ncolor(card_with(black_color)) in rainbow_colors == False\nnot roll_dice(halibut, cat) = rule1()\nroll_dice(halibut, cat) == False\nlearns_basics_of_resource_management(halibut, viperfish) == False\nnot raise_flag_of_peace(buffalo, octopus) = rule3()\nraise_flag_of_peace(buffalo, octopus) == False\nwink(moose, kangaroo) == False\nnot learn_elementary_resource_management(kangaroo, buffalo) = rule4()\nlearn_elementary_resource_management(kangaroo, buffalo) == False\nnot roll_dice(halibut, cat) = rule5(halibut)\nroll_dice(halibut, cat) == False\nlearns_basics_of_resource_management(halibut, viperfish) == True\nnot raise_flag_of_peace(buffalo, octopus) = rule6()\nraise_flag_of_peace(buffalo, octopus) == False\nattack(something, green_fields_of(amberjack)) == False\nnot equal_points(squirrel, buffalo) = rule7()\nequal_points(squirrel, buffalo) == False\nwink(something, cockroach) == False\nlearn_elementary_resource_management(kangaroo, buffalo) == False\nfriends(halibut) > 8 == True\nnot roll_dice(halibut, cat) = rule9()\nroll_dice(halibut, cat) == False\nquestion = False", "answer": -1, "code": "rule1() = has(halibut, card) and color(card) in rainbow_colors => not roll_dice(halibut, cat)\nrule2(something) = proceed(something, spot_right_after(amberjack)) => attack(something, green_fields_of(amberjack))\nrule3() = learns_basics_of_resource_management(something, viperfish) => not raise_flag_of_peace(buffalo, octopus)\nrule4() = wink(moose, kangaroo) => not learn_elementary_resource_management(kangaroo, buffalo)\nrule5(something) = not roll_dice(something, cat) => learns_basics_of_resource_management(something, viperfish)\nrule6() = learns_elementary_resource_management(kangaroo, buffalo) & not equal_points(squirrel, buffalo) => raise_flag_of_peace(buffalo, octopus)\nrule7() = attack(something, green_fields_of(amberjack)) => not equal_points(squirrel, buffalo)\nrule8() = wink(something, cockroach) => learn_elementary_resource_management(kangaroo, buffalo)\nrule9() = friends(halibut) > 8 => not roll_dice(halibut, cat)\nrule10() = has(penguin, drink) => wink(penguin, cockroach)\norder(rule4) > order(rule8) = True\norder(rule6) > order(rule3) = True\n\nname(goldfish, Lily) = True\nhas(halibut, card_with(black_color)) = True\nfriends(halibut) = 10\nhas(halibut, smart_friend) = True\nhas(halibut, not_smart_friend) = True\nname(halibut, Mojo) = True\nhas(penguin, beer) = True\nname(sheep, Milo) = True\nname(viperfish, Lola) = True\nproceed(viperfish, spot_right_after(amberjack)) = True\n\nquestion = raise_flag_of_peace(buffalo, octopus)\n"}, {"idx": 265, "response": "give_magnifier(kangaroo, kudu) = question", "answer": 0, "code": "rule1() = friends(kangaroo) > 12 => not remove(kangaroo, piece_of(hippopotamus))\nrule2(something) = prepare_armor(something, cheetah) => learn(something, elementary_resource_management_from(hummingbird))\nrule3() = first_letter_of(name(hummingbird)) == first_letter_of(name(tilapia)) => give_magnifier(hummingbird, baboon)\nrule4() = needs_support(something, caterpillar) => remove(kangaroo, piece_of(hippopotamus))\nrule5(something) = prepare_armor(something, phoenix) => not holds_same_number_of_points(something, grasshopper)\nrule6() = knows(defense_plan_of(kangaroo), gecko) & give_magnifier(donkey, kangaroo) => prepare_armor(kangaroo, cheetah)\nrule7(something) = remove(something, piece_of(hippopotamus)) => not offer_job_position(something, viperfish)\nrule8(something) = holds_same_number_of_points(something, grasshopper) & not offer_job_position(something, viperfish) => not give_magnifier(something, kudu)\nrule9() = friends(hummingbird) > 6 => give_magnifying_glass(hummingbird, baboon)\nrule10() = give_magnifying_glass(something, baboon) => holds_same_number_of_points(kangaroo, grasshopper)\nrule11() = knock_down(something, fortress_of(eel)) => offer_job_position(kangaroo, viperfish)\nrule12() = not has(kangaroo, keys) => not remove(kangaroo, piece_of(hippopotamus))\norder(rule1) > order(rule4) = True\norder(rule11) > order(rule7) = True\norder(rule12) > order(rule4) = True\norder(rule5) > order(rule10) = True\n\ngive_magnifier(donkey, kangaroo) = True\nknows(defensive_plans_of(kangaroo), gecko) = True\nfriends(hummingbird) = 2\nhas_friend(hummingbird, energetic) = True\nhas_friend(hummingbird, not_energetic) = True\nname(hummingbird, Meadow) = True\nfriends(kangaroo) = 4\nneeds_support(polar_bear, caterpillar) = True\nname(tilapia, Milo) = True\n\nquestion = give_magnifier(kangaroo, kudu)\n"}, {"idx": 266, "response": "has(goldfish, card_with(yellow_color)) == True\nneeds_support(goldfish, amberjack) = rule2()\nneeds_support(goldfish, amberjack) == True\nknows(defensive_plans_of(swordfish), ferret) = rule7()\nknows(defensive_plans_of(swordfish), ferret) == True\nnot knock_down(bat, fortress_of(swordfish)) = rule7()\nknock_down(bat, fortress_of(swordfish)) == False\nowes_money_to(swordfish, aardvark) = rule7()\nowes_money_to(swordfish, aardvark) == True\nquestion = True", "answer": 1, "code": "rule1() = knows(defensive_plans_of(ferret), spider) => not wink(ferret, kangaroo)\nrule2() = has(goldfish, card_with(primary_color)) => needs_support(goldfish, amberjack)\nrule3(something) = owes_money_to(something, grasshopper) & not wink(something, kangaroo) => knows(defense_plan_of(swordfish), something)\nrule4() = needs_support(something, amberjack) => not knock_down(bat, fortress_of(swordfish))\nrule5() = owns(goldfish, luxury_aircraft) => needs_support(goldfish, amberjack)\nrule6() = color_of(card(ferret)) in colors_of(flag_of(France)) => owes_money_to(ferret, grasshopper)\nrule7() = knows(defensive_plans_of(swordfish), ferret) & not knock_down(bat, fortress_of(swordfish)) => owes_money_to(swordfish, aardvark)\nrule8() = not respects(panther, swordfish) => not owes_money_to(swordfish, aardvark)\nrule9() = offers_job_position(something, cow) => wink(ferret, kangaroo)\norder(rule7) > order(rule8) = True\norder(rule9) > order(rule1) = True\n\nhas(ferret, card_with(blue_color)) = True\nhas(goldfish, card_with(yellow_color)) = True\nlost_keys(goldfish) = True\nknows(defensive_plans_of(ferret), spider) = True\nnot roll_dice(turtle, goldfish) = True\n\nquestion = owes_money_to(swordfish, aardvark)\n"}, {"idx": 267, "response": "not attack(green_fields_of(aardvark), crocodile) = True\nattack(green_fields_of(aardvark), crocodile) == False\nnot learn_elementary_resource_management(crocodile, lion) = rule3()\nlearn_elementary_resource_management(crocodile, lion) == False\nsteal_points(cricket, 5, lion) = rule5()\nsteal_points(cricket, 5, lion) == False\nenemy(lion, spider) = rule5()\nenemy(lion, spider) == False\nenemy(lion, spider) == False\nquestion = False", "answer": -1, "code": "rule1(something) = prepare_armor(something, cat) & not knows(defensive_plans_of(elephant), something) => actual_enemy(something, spider)\nrule2(something) = not attack(green_fields_of(aardvark), something) => learn_elementary_resource_management(something, lion)\nrule3() = reduce_work_hours(crocodile) => not learn_basics_of_resource_management(crocodile, lion)\nrule4() = has(dog, card_with(primary_color)) => knows(defense_plan_of(lion), dog)\nrule5() = steal_points(cricket, 5, lion) => not enemy(lion, spider)\nrule6() = friends(puffin) < 14 => proceed(puffin, spot_right_after(lion))\nrule7() = give_magnifying_glass(animal, pig) => enemy(raven, lion)\nrule8() = friends(dog) > 15 => knows(defensive_plans_of(lion), dog)\nrule9() = knows(defense_plan_of(lion), dog) => not knows(defense_plan_of(elephant), lion)\nrule10() = actual_enemy(raven, lion) & learn_basics_of_resource_management(crocodile, lion) => prepare_armor(lion, cat)\norder(rule3) > order(rule2) = True\norder(rule5) > order(rule1) = True\n\nhas(dog, card_with(red_color)) = True\nfriends(dog) = 10\nfriends(puffin) = 4\ngive_magnifying_glass(tiger, pig) = True\nnot attack(green_fields_of(aardvark), crocodile) = True\n\nquestion = enemy(lion, spider)\n"}, {"idx": 268, "response": "has(meerkat, harmonica) == True\nhas(meerkat, connect_to_internet(device)) = rule1()\nnot enemy(meerkat, hummingbird) == True\nattacks(viperfish, green_fields_of(meerkat)) == True\nknows(defense_plan_of(leopard), meerkat) = rule2()\nnot knows(defense_plan_of(leopard), meerkat) == False\nfirst_letter_of(name(meerkat)) == first_letter_of(name(moose)) == True\nnot knows(defense_plan_of(leopard), meerkat) == False\nenemy(meerkat, hummingbird) == True\nnot roll_dice(meerkat, halibut) = rule5(meerkat)\nnot roll_dice(meerkat, halibut) == True\nnot same_number_of_points(meerkat, hippopotamus) = rule7(meerkat)\nnot same_number_of_points(meerkat, hippopotamus) == True\nquestion = True", "answer": 1, "code": "rule1() = has(meerkat, connect_to_internet(device)) => not enemy(meerkat, hummingbird)\nrule2() = attacks(viperfish, green_fields_of(meerkat)) => knows(defense_plan_of(leopard), meerkat)\nrule3() = has(meerkat, card_with(color)) & color in colors_of(flag_of(Belgium)) => not enemy(meerkat, hummingbird)\nrule4() = first_letter_of(name(meerkat)) == first_letter_of(name(moose)) => not knows(defense_plan_of(leopard), meerkat)\nrule5(something) = enemy(something, hummingbird) & knows(defense_plan_of(leopard), something) => not roll_dice(something, halibut)\nrule6() = show_cards(cockroach, meerkat) & knock_down(ferret, fortress_of(meerkat)) => enemy(meerkat, hummingbird)\nrule7(something) = not roll_dice(something, halibut) => not same_number_of_points(something, hippopotamus)\norder(rule1) > order(rule6) = True\norder(rule3) > order(rule6) = True\norder(rule4) > order(rule2) = True\n\nshow_cards(cockroach, meerkat) = True\nknock_down(ferret, fortress_of(meerkat)) = True\nhas(meerkat, harmonica) = True\nname(moose, Teddy) = True\nattacks(viperfish, green_fields_of(meerkat)) = True\n\nquestion = same_number_of_points(meerkat, hippopotamus)\n"}, {"idx": 269, "response": "has(ferret, connect_to_internet(device)) == True\nburn(warehouse_of(panda_bear)) = rule1()\nburn(warehouse_of(panda_bear)) == True\noffer_job(lobster, ferret) = rule2()\noffer_job(lobster, ferret) == True\nroll_dice(ferret, panda_bear) = rule2()\nroll_dice(ferret, panda_bear) == True\nroll_dice(ferret, panda_bear) == True\nnot raise_flag_of_peace(halibut, lobster) == True\nattack_green_fields(ferret, sea_bass) = rule4(ferret)\nattack_green_fields(ferret, sea_bass) == True\nattack_green_fields(ferret, sea_bass) == True\nquestion = True", "answer": 1, "code": "rule1() = has(ferret, connect_to_internet(device)) => burn(warehouse_of(panda_bear))\nrule2() = offer_job(lobster, ferret) => roll_dice(ferret, panda_bear)\nrule3() = has(starfish, drink) => not knock_down(fortress_of(eel))\nrule4(something) = owes_money_to(something, gecko) => attack_green_fields(something, sea_bass)\nrule5() = not raise_flag_of_peace(halibut, lobster) => offer_job(lobster, ferret)\nrule6() = raise_flag_of_peace(carp, lobster) => not offer_job(lobster, ferret)\nrule7(something) = knock_down(fortress_of(eel), something) => owes_money_to(ferret, gecko)\nrule8(something) = burn(warehouse_of(panda_bear), something) => not roll_dice(something, panda_bear)\nrule9() = has(starfish, carry_apples_and_oranges) => not knock_down(fortress_of(eel))\nrule10(something) = steal_points(something, 5, tilapia) & roll_dice(something, panda_bear) => not attack_green_fields(something, sea_bass)\nrule11() = knock_down(fortress_of(starfish), lion) & enemy(amberjack, starfish) => knock_down(fortress_of(eel), starfish)\norder(rule10) > order(rule4) = True\norder(rule11) > order(rule3) = True\norder(rule11) > order(rule9) = True\norder(rule6) > order(rule5) = True\norder(rule8) > order(rule2) = True\n\nenemy(amberjack, starfish) = True\nhas(ferret, computer) = True\nburn(warehouse_of(starfish), lion) = True\nhas(starfish, cello) = True\nnot raise_flag_of_peace(halibut, lobster) = True\n\nquestion = attack_green_fields(ferret, sea_bass)\n"}, {"idx": 270, "response": "proceed(spider, spot_right_after(spot_of(phoenix))) == True\nburn(warehouse_of(hummingbird), spider) = rule9()\nburn(warehouse_of(hummingbird), spider) == True\nenemy(turtle, hummingbird) = rule9()\nenemy(turtle, hummingbird) == True\nproceed(hummingbird, spot_right_after(spot_of(halibut))) = rule7()\nproceed(hummingbird, spot_right_after(spot_of(halibut))) == False\nroll_dice(swordfish, sea_bass) = rule2()\nroll_dice(swordfish, sea_bass) == True\nquestion = True", "answer": 1, "code": "rule1(something) = points(something) == points(buffalo) & not attack(something, green_fields_of(kiwi)) => proceed(something, spot_right_after(spot_of(viperfish)))\nrule2() = proceed(something, spot_right_after(spot_of(viperfish))) => roll_dice(something, sea_bass)\nrule3() = has(spider, card_with(color_in(rainbow_colors))) => not burn(warehouse_of(hummingbird))\nrule4() = has(swordfish, sharp_object) => not attack(swordfish, green_fields_of(kiwi))\nrule5() = needs_support(something, caterpillar) => enemy(turtle, hummingbird)\nrule6(something) = proceed(something, spot_right_after(spot_of(phoenix))) => burn(warehouse_of(hummingbird))\nrule7() = learns_basics_of_resource_management(something, penguin) => not proceed(hummingbird, spot_right_after(spot_of(halibut)))\nrule8() = has(swordfish, card_with(color_in(rainbow_colors))) => points(swordfish) == points(buffalo)\nrule9() = burn(warehouse_of(hummingbird), spider) & enemy(turtle, hummingbird) => proceed(hummingbird, spot_right_after(spot_of(halibut)))\nrule10() = created_time_machine(turtle) => not enemy(turtle, hummingbird)\norder(rule5) > order(rule10) = True\norder(rule6) > order(rule3) = True\norder(rule7) > order(rule9) = True\n\nname(penguin, Pashmak) = True\nname(polar_bear, Beauty) = True\nhas(spider, card_with(yellow_color)) = True\nname(spider, Cinnamon) = True\nproceed(spider, spot_right_after(spot_of(phoenix))) = True\nneeds_support(starfish, caterpillar) = True\nfriends(swordfish) = 4 easy_going_friends + 2 not_easy_going_friends\nhas(swordfish, card_with(orange_color)) = True\nhas(swordfish, keys) = True\nhas(swordfish, cutter) = True\ninvented_time_machine(turtle) = True\nname(turtle, Luna) = True\n\nquestion = roll_dice(swordfish, sea_bass)\n"}, {"idx": 271, "response": "remove(starfish, piece_of(polar_bear)) = question\nremove(starfish, piece_of(polar_bear)) = True", "answer": 1, "code": "rule1() = has(turtle, leafy_green_vegetable) => not raise_flag_of_peace(turtle, grasshopper)\nrule2() = offer_job_position(something, lion) => not remove(starfish, piece_of(polar_bear))\nrule3() = friends(sun_bear) > 7 => steal_points(sun_bear, 5, phoenix)\nrule4() = remove(something, piece_of(whale)) => not give_magnifying_glass(raven, black_bear)\nrule5() = not sing_song(salmon, victory_song_for(raven)) => give_magnifying_glass(raven, black_bear)\nrule6(something) = raise_flag_of_peace(something, doctorfish) & sing_song(something, victory_song_for(panda_bear)) => not offer_job_position(something, lion)\nrule7(something) = not give_magnifying_glass(something, black_bear) => offer_job_position(something, lion)\nrule8() = has(sun_bear, device_to_connect_to_internet) => not steal_points(sun_bear, 5, phoenix)\nrule9(something) = not steal_points(something, 5, phoenix) => not knock_down(fortress_of(starfish))\nrule10() = not enemy(squid, kudu) => not actual_enemy(kudu, starfish)\nrule11() = raise_flag_of_peace(something, grasshopper) => actual_enemy(kudu, starfish)\nrule12(something) = not proceed(something, spot_right_after(spot_of(cat))) => raise_flag_of_peace(something, doctorfish)\nrule13() = has(turtle, musical_instrument) => not raise_flag_of_peace(turtle, grasshopper)\nrule14() = show_all_cards(koala, turtle) => raise_flag_of_peace(turtle, grasshopper)\norder(rule1) > order(rule14) = True\norder(rule10) > order(rule11) = True\norder(rule13) > order(rule14) = True\norder(rule5) > order(rule4) = True\norder(rule6) > order(rule7) = True\norder(rule8) > order(rule3) = True\n\nremove(cheetah, piece_of(whale)) = True\nshow_all_cards(koala, turtle) = True\nsing_song(raven, victory_song_for(caterpillar)) = True\nnot proceed(raven, spot_right_after(spot_of(cat))) = True\nhas(sun_bear, computer) = True\nfriends(sun_bear) = 14\nhas(turtle, beer) = True\n\nquestion = remove(starfish, piece_of(polar_bear))\n"}, {"idx": 272, "response": "has(aardvark, backpack) == True\nhas(aardvark, card_with(blue_color)) == True\nnot show_cards(aardvark, dog) = rule5()\nshow_cards(aardvark, dog) == False\nprepare_armor(dog, kiwi) = question\nprepare_armor(dog, kiwi) == True\nprepare_armor(dog, kiwi) == True\nquestion = True", "answer": 1, "code": "rule1() = has(aardvark, card_with(primary_color)) => enemy(aardvark, parrot)\nrule2(something) = not attack(green_fields_of(black_bear)) & enemy(something, parrot) => not show_cards(something, dog)\nrule3() = color_starts_with(sea_bass, card, \"l\") => not raise_flag_of_peace(sea_bass, aardvark)\nrule4(something) = not knows(defense_plan_of(leopard), something) => not enemy(something, parrot)\nrule5() = not show_cards(aardvark, dog) => prepare_armor(dog, kiwi)\nrule6(something) = not steals_points_from(something, cat, 5) => not attack(green_fields_of(black_bear))\nrule7() = friends(sea_bass) > 4 => not raise_flag_of_peace(sea_bass, aardvark)\nrule8() = not raise_flag_of_peace(sea_bass, aardvark) & learn_basics_of_resource_management(lion, aardvark) => show_cards(aardvark, dog)\nrule9() = has(aardvark, something_to_carry_apples_and_oranges) => enemy(aardvark, parrot)\norder(rule1) > order(rule4) = True\norder(rule8) > order(rule2) = True\norder(rule9) > order(rule4) = True\n\nhas(aardvark, backpack) = True\nhas(aardvark, card_with(blue_color)) = True\nsteals_points_from(aardvark, cat, 5) = True\nfriends(sea_bass) = 14\nhas(sea_bass, card_with(blue_color)) = True\nknows(defensive_plans_of(leopard), aardvark) = False\n\nquestion = prepare_armor(dog, kiwi)\n"}, {"idx": 273, "response": "dreamed(salmon, luxury_aircraft) == True\nowns(salmon, luxury_aircraft) == True\nnot learn_elementary_resource_management(salmon, squid) = rule1()\nlearn_elementary_resource_management(salmon, squid) == False\nname(salmon, Charlie) == True\nname(sheep, Cinnamon) == True\nfirst_letter_of(name(salmon)) == first_letter_of(name(sheep)) = rule2()\nfirst_letter_of(name(salmon)) == first_letter_of(name(sheep)) == True\nnot learn_basics_of_resource_management(salmon, squid) = rule2()\nlearn_basics_of_resource_management(salmon, squid) == False\nbecomes_actual_enemy(hare, salmon) == True\nnot steal_points(kangaroo, 5, salmon) = rule3()\nsteal_points(kangaroo, 5, salmon) == False\nnot show_cards(salmon, leopard) = rule3()\nshow_cards(salmon, leopard) == False\nhas(salmon, carry_apples_and_oranges) == True\nlearn_elementary_resource_management(salmon, squid) = rule4()\nlearn_elementary_resource_management(salmon, squid) == True\nfriends(salmon) < 5 = rule5()\nfriends(salmon) < 5 == False\nsteal_points(salmon, 5, kudu) = rule5()\nsteal_points(salmon, 5, kudu) == False\nhas(salmon, sharp_object) == True\nshow_cards(salmon, leopard) = rule6()\nshow_cards(salmon, leopard) == True\nraise_flag_of_peace(something, eel) = rule11()\nraise_flag_of_peace(something, eel) == True\nproceed(tiger, spot_right_after(spot_of(panda_bear))) = rule7()\nproceed(tiger, spot_right_after(spot_of(panda_bear))) == True\nquestion = True", "answer": 1, "code": "rule1() = owns(salmon, luxury_aircraft) => not learn_elementary_resource_management(salmon, squid)\nrule2() = first_letter_of(name(salmon)) == first_letter_of(name(sheep)) => not learn_basics_of_resource_management(salmon, squid)\nrule3() = becomes_actual_enemy(hare, salmon) & not steal_points(kangaroo, 5, salmon) => not show_cards(salmon, leopard)\nrule4() = has(salmon, carry_apples_and_oranges) => learn_elementary_resource_management(salmon, squid)\nrule5() = friends(salmon) < 5 => steal_points(salmon, 5, kudu)\nrule6() = has(salmon, sharp_object) => show_cards(salmon, leopard)\nrule7() = raise_flag_of_peace(something, eel) => proceed(tiger, spot_right_after(spot_of(panda_bear)))\nrule8() = has(salmon, carry_apples_and_oranges) => show_cards(salmon, leopard)\nrule9() = not need_support(cheetah, salmon) => not steal_points(salmon, 5, kudu)\nrule10() = has(salmon, card_with(color_in_flag_of_france)) => steal_points(salmon, 5, kudu)\nrule11() = steal_points(something, 5, kudu) => raise_flag_of_peace(something, eel)\norder(rule10) > order(rule9) = True\norder(rule3) > order(rule6) = True\norder(rule3) > order(rule8) = True\norder(rule4) > order(rule1) = True\norder(rule4) > order(rule2) = True\norder(rule5) > order(rule9) = True\n\ndreamed(salmon, luxury_aircraft) = True\nname(salmon, Charlie) = True\nhas(salmon, card_with(blue_color)) = True\nhas(salmon, cutter) = True\nfriends(salmon) = 13\nhas(salmon, romaine_lettuce) = True\nname(sheep, Cinnamon) = True\nnot need_support(cheetah, salmon) = True\nnot steal_points(kangaroo, 5, salmon) = True\n\nquestion = proceed(tiger, spot_right_after(spot_of(panda_bear)))\n"}, {"idx": 274, "response": "roll_dice(lion, tilapia) = True\nnot roll_dice(kudu, tilapia) = True\nnever_proceed(tilapia, spot_right_after(sea_bass)) = rule1()\nnever_proceed(tilapia, spot_right_after(sea_bass)) == True\nquestion = True", "answer": 1, "code": "rule1() = roll_dice(lion, tilapia) & not roll_dice(kudu, tilapia) => never_proceed(tilapia, spot_right_after(sea_bass))\nrule2(something) = not knows(defensive_plans_of(squid), something) & learn_elementary_resource_management(something, panda_bear) => roll_dice(something, tilapia)\nrule3() = has(kudu, something_to_sit_on) => enemy(kudu, wolverine)\nrule4() = first_letter_of(name(kudu)) == first_letter_of(name(wolverine)) => not enemy(kudu, wolverine)\nrule5(something) = wink(something, raven) => learn_elementary_resource_management(something, panda_bear)\nrule6(something) = actual_enemy(something, wolverine) => not roll_dice(something, tilapia)\nrule7(something) = not equal_points(something, ferret) => not knows(defense_plan_of(squid), something)\nrule8(something) = owes_money_to(something, panther) => not show_cards(something, kudu)\nrule9() = remove(something, piece_of(caterpillar)) => not learn_elementary_resource_management(lion, panda_bear)\nrule10() = has(kudu, card_with(color_starting_with(\"i\"))) => enemy(kudu, wolverine)\nrule11() = has(cricket, something_to_carry_apples_and_oranges) => show_cards(cricket, kudu)\norder(rule10) > order(rule4) = True\norder(rule11) > order(rule8) = True\norder(rule3) > order(rule4) = True\norder(rule5) > order(rule9) = True\n\nowes_money_to(cricket, panther) = True\nhas(kudu, card_with(indigo_color)) = True\nname(kudu, Mojo) = True\nhas(kudu, computer) = True\nhas(lion, blade) = True\nstruggles_to_find_food(lion) = True\nwink(lion, raven) = True\nnot equal_points(lion, ferret) = True\nremove(penguin, piece_of(caterpillar)) = True\nname(wolverine, Max) = True\n\nquestion = proceed(tilapia, spot_right_after(sea_bass))\n"}, {"idx": 275, "response": "name(crocodile, Charlie) == True\nfirst_letter_of(name(crocodile)) == 'C'\nfirst_letter_of(name(tilapia)) == 'C'\nfirst_letter_of(name(crocodile)) == first_letter_of(name(tilapia)) == True\nnot attack_green_fields(crocodile, hummingbird) = rule5()\nattack_green_fields(crocodile, hummingbird) == False\nhas(crocodile, sharp_object) == True\nnot attack_green_fields(crocodile, hummingbird) = rule6()\nattack_green_fields(crocodile, hummingbird) == False\nroll_dice(grizzly_bear, halibut) = rule3()\nroll_dice(grizzly_bear, halibut) == True\nknows_defensive_plans(grizzly_bear, elephant) = rule3()\nknows_defensive_plans(grizzly_bear, elephant) == True\nquestion = True", "answer": 1, "code": "rule1() = proceed_to_spot_right_after(spot_of(moose), something) => not owe_money_to(crocodile, lobster)\nrule2(something) = not owe_money_to(something, lobster) & not attack_green_fields(something, hummingbird) => roll_dice(something, halibut)\nrule3() = roll_dice(something, halibut) => knows_defensive_plans(grizzly_bear, elephant)\nrule4() = knock_down_fortress(something, fortress_of(panda_bear)) => attack_green_fields(crocodile, hummingbird)\nrule5() = first_letter_of(name(crocodile)) == first_letter_of(name(tilapia)) => not attack_green_fields(crocodile, hummingbird)\nrule6() = has(crocodile, sharp_object) => not attack_green_fields(crocodile, hummingbird)\norder(rule5) > order(rule4) = True\norder(rule6) > order(rule4) = True\n\nhas(crocodile, beer) = True\nname(crocodile, Charlie) = True\nsing_song(rabbit, victory_song_for(moose)) = True\nname(tilapia, Charlie) = True\n\nquestion = knows_defensive_plans(grizzly_bear, elephant)\n"}, {"idx": 276, "response": "not offer_job(snail, sun_bear) = rule4(snail)\nnot prepare_armor(snail, hippopotamus) = rule4(snail)\nnot prepare_armor(snail, hippopotamus) == True\nlearn_elementary_resource_management(cheetah, snail) = rule9()\nlearn_elementary_resource_management(cheetah, snail) == True\nattack(catfish, green_fields_of(snail)) = rule10()\nattack(catfish, green_fields_of(snail)) == True\nprepare_armor(snail, hippopotamus) = rule10()\nprepare_armor(snail, hippopotamus) == True\nquestion = True", "answer": 1, "code": "rule1() = supports(cheetah, Chris_Ronaldo) => knock_down(cheetah, fortress_of(sun_bear))\nrule2(something) = not knock_down(something, fortress_of(whale)) & respects(something, moose) => attack(something, green_fields_of(snail))\nrule3() = first_letter_of(name(cheetah)) == first_letter_of(name(kangaroo)) => knock_down(cheetah, fortress_of(sun_bear))\nrule4(something) = not offer_job(something, sun_bear) => not prepare_armor(something, hippopotamus)\nrule5() = has(viperfish, leafy_green_vegetable) => knock_down(viperfish, fortress_of(kiwi))\nrule6(something) = not enemy(something, koala) => not knock_down(something, fortress_of(whale))\nrule7() = has(viperfish, card_with(primary_color)) => knock_down(viperfish, fortress_of(kiwi))\nrule8() = first_letter_of(name(catfish)) == first_letter_of(name(leopard)) => respects(catfish, moose)\nrule9() = knock_down(animal, fortress_of(kiwi)) => learn_basics_of_resource_management(cheetah, snail)\nrule10() = learn_elementary_resource_management(cheetah, snail) & attack(catfish, green_fields_of(snail)) => prepare_armor(snail, hippopotamus)\nrule11() = has(catfish, card_with(color_starting_with(\"w\"))) => respects(catfish, moose)\nrule12() = owes_money_to(eagle, goldfish) => steal_points(goldfish, 5, catfish)\nrule13() = has(cheetah, card_with(color_in(rainbow_colors))) => not knock_down(cheetah, fortress_of(sun_bear))\norder(rule1) > order(rule13) = True\norder(rule3) > order(rule13) = True\norder(rule4) > order(rule10) = True\n\nhas(catfish, card_with(white_color)) = True\nname(catfish, Chickpea) = True\nhas(cheetah, friend(bald)) = True\nhas(cheetah, friend(not_bald)) = 9\nhas(cheetah, card_with(black_color)) = True\nname(cheetah, Luna) = True\nsupports(cheetah, Chris_Ronaldo) = True\nowes_money_to(eagle, goldfish) = True\nname(kangaroo, Milo) = True\nname(leopard, Max) = True\nremove(phoenix, piece_of(whale)) = True\nhas(viperfish, card_with(green_color)) = True\nhas(viperfish, guitar) = True\nnot enemy(catfish, koala) = True\n\nquestion = prepare_armor(snail, hippopotamus)\n"}, {"idx": 277, "response": "friends(mosquito) = 6\nattack_green_fields(mosquito, koala) = rule2()\nattack_green_fields(mosquito, koala) == True\nattack_green_fields(mosquito, koala) == True\nnot learn_elementary_resource_management(kangaroo, koala) = rule5()\nlearn_elementary_resource_management(kangaroo, koala) == False\nlearn_elementary_resource_management(kangaroo, koala) == False\nowes_money_to(koala, kudu) = rule7()\nowes_money_to(koala, kudu) == True\nowes_money_to(koala, kudu) == True\nquestion = True", "answer": 1, "code": "rule1() = owes_money_to(something, kudu) => not show_cards(kiwi, zander)\nrule2() = friends(mosquito) < 16 => attack_green_fields(mosquito, koala)\nrule3(something) = not respects(something, kangaroo) => not attack_green_fields(something, koala)\nrule4() = has(mosquito, leafy_green_vegetable) => attack_green_fields(mosquito, koala)\nrule5() = friends(kangaroo) > 10 => not learn_elementary_resource_management(kangaroo, koala)\nrule6() = first_letter_of(name(kangaroo)) == first_letter_of(name(starfish)) => not learn_basics_of_resource_management(kangaroo, koala)\nrule7() = attack_green_fields(mosquito, koala) & not learn_elementary_resource_management(kangaroo, koala) => owes_money_to(koala, kudu)\norder(rule3) > order(rule2) = True\norder(rule3) > order(rule4) = True\n\nfriends(kangaroo) = 20\nname(kangaroo, Tarzan) = True\nshow_cards(kangaroo, cockroach) = True\nhas(mosquito, club_chair) = True\nfriends(mosquito) = 6\nname(starfish, Blossom) = True\n\nquestion = show_cards(kiwi, zander)\n"}, {"idx": 278, "response": "has(spider, musical_instrument) == True\nburn(warehouse_of(buffalo)) = rule1()\nburn(warehouse_of(buffalo)) == True\ncreated_time_machine(buffalo) == True\nattacks(buffalo, green_fields_of(panther)) = rule6()\nattacks(buffalo, green_fields_of(panther)) == True\nattacks(buffalo, green_fields_of(panther)) == True\nroll_dice(buffalo, hippopotamus) = rule2(buffalo)\nroll_dice(buffalo, hippopotamus) == True\nroll_dice(buffalo, hippopotamus) == True\nnot eat_food(buffalo, food_of(bat)) = rule4()\neat_food(buffalo, food_of(bat)) == False\nnot eat_food(buffalo, food_of(bat)) == True\nrespects(buffalo, elephant) = rule3(buffalo)\nrespects(buffalo, elephant) == True\nrespects(buffalo, elephant) == True\nquestion = True", "answer": 1, "code": "rule1() = has(spider, musical_instrument) => burn(warehouse_of(buffalo))\nrule2(something) = attacks(something, green_fields_of(panther)) => roll_dice(something, hippopotamus)\nrule3(something) = not eat_food(something, food_of(bat)) & roll_dice(something, hippopotamus) => respects(something, elephant)\nrule4() = wink(spider, buffalo) => not eat_food(buffalo, food_of(bat))\nrule5() = has(spider, card_with(primary_color)) => burn(warehouse_of(buffalo))\nrule6() = created_time_machine(buffalo) => attacks(buffalo, green_fields_of(panther))\nrule7() = not has(spider, keys) => not burn(warehouse_of(buffalo))\norder(rule1) > order(rule7) = True\norder(rule5) > order(rule7) = True\n\nhas(buffalo, harmonica) = True\nname(buffalo, Peddi) = True\ncreated_time_machine(buffalo) = True\nname(dog, Casper) = True\nhas(spider, card_with(blue_color)) = True\nhas(spider, cutter) = True\nhas(spider, knapsack) = True\nnot has(spider, keys) = True\n\nquestion = respects(buffalo, elephant)\n"}, {"idx": 279, "response": "has(hummingbird, knife) == True\nremove(hummingbird, piece_of(lobster)) = rule1()\nremove(hummingbird, piece_of(lobster)) == False\nwink(penguin, doctorfish) = rule4()\nwink(penguin, doctorfish) == True\nwink(penguin, doctorfish) == True\noffer_job_position(doctorfish, hummingbird) == True\nnot remove(hummingbird, piece_of(lobster)) = rule2()\nremove(hummingbird, piece_of(lobster)) == False\nnot eat_food(hummingbird, food_of(mosquito)) = rule5()\neat_food(hummingbird, food_of(mosquito)) == False\nattack(hummingbird, green_fields_of(snail)) = rule3()\nattack(hummingbird, green_fields_of(snail)) == True\nattack(hummingbird, green_fields_of(snail)) == True\nnot eat_food(hummingbird, food_of(mosquito)) == True\nlearn_basics_of_resource_management(hummingbird, amberjack) = rule5(hummingbird)\nlearn_basics_of_resource_management(hummingbird, amberjack) == True\nlearn_basics_of_resource_management(hummingbird, amberjack) == True\nquestion = True", "answer": 1, "code": "rule1() = points(squid) == points(hummingbird) => remove(hummingbird, piece_of(lobster))\nrule2() = offer_job_position(doctorfish, hummingbird) => not remove(hummingbird, piece_of(lobster))\nrule3() = steals_points(something, jellyfish, 5) => attack(hummingbird, green_fields_of(snail))\nrule4() = wink(penguin, doctorfish) => offer_job_position(doctorfish, hummingbird)\nrule5(something) = not remove(something, piece_of(lobster)) & not eat_food(something, food_of(mosquito)) => learn_basics_of_resource_management(something, amberjack)\nrule6(something) = attack(something, green_fields_of(snail)) => not eat_food(something, food_of(mosquito))\norder(rule1) > order(rule2) = True\n\nsteals_points(grizzly_bear, jellyfish, 5) = True\nhas(hummingbird, card_with(indigo_color)) = True\nhas(hummingbird, knife) = True\nwink(penguin, doctorfish) = True\n\nquestion = learn_basics_of_resource_management(hummingbird, amberjack)\n"}, {"idx": 280, "response": "burn(warehouse_of(blobfish), meerkat) = rule7()\nburn(warehouse_of(blobfish), meerkat) == True\neat_food(lobster, blobfish) = rule6()\neat_food(lobster, blobfish) == True\ngive_magnifier(blobfish, elephant) = rule1()\ngive_magnifier(blobfish, elephant) == True\ngive_magnifying_glass(blobfish, elephant) = False\nnot attack_green_fields(elephant, sheep) = rule2()\nattack_green_fields(elephant, sheep) == True\nquestion = True", "answer": 1, "code": "rule1() = burn(warehouse_of(blobfish), meerkat) & eat_food(lobster, blobfish) => give_magnifier(blobfish, elephant)\nrule2() = give_magnifying_glass(blobfish, elephant) => not attack_green_fields(elephant, sheep)\nrule3(something) = roll_dice_for(something, cow) & show_cards(something, phoenix) => not give_magnifying_glass(something, elephant)\nrule4(something) = owes_money_to(something, koala) => roll_dice_for(something, cow)\nrule5() = fan_of(meerkat, Chris_Ronaldo) => burn(warehouse_of(blobfish), meerkat)\nrule6() = has(lobster, musical_instrument) => eat_food(lobster, blobfish)\nrule7() = has(meerkat, card_with(rainbow_color)) => burn(warehouse_of(blobfish), meerkat)\nrule8(something) = prepare_armor(something, hummingbird) => show_cards(something, phoenix)\nrule9() = needs_support(halibut, blobfish) => not show_cards(blobfish, phoenix)\nrule10() = not has(lobster, keys) => eat_food(lobster, blobfish)\norder(rule1) > order(rule3) = True\norder(rule9) > order(rule8) = True\n\nowes_money_to(blobfish, koala) = True\nprepare_armor(blobfish, hummingbird) = True\nhas(lobster, romaine_lettuce) = True\nnot has(lobster, keys) = True\nhas(meerkat, card_with(red_color)) = True\nhates(meerkat, Chris_Ronaldo) = True\n\nquestion = attack_green_fields(elephant, sheep)\n"}, {"idx": 281, "response": "friends(octopus) = 14\nprepare_armor(octopus, snail) = rule2()\nprepare_armor(octopus, snail) == False\nknock_down_fortress(cheetah, kangaroo) = rule1()\nknock_down_fortress(cheetah, kangaroo) == not raise_flag_of_peace(zander, cheetah)\nknock_down_fortress(cheetah, kangaroo) == not raise_flag_of_peace(zander, cheetah)\nquestion = not raise_flag_of_peace(zander, cheetah)", "answer": 0, "code": "rule1() = raise_flag_of_peace(zander, cheetah) => not knock_down_fortress(cheetah, kangaroo)\nrule2() = friends(octopus) > 7 => not prepare_armor(octopus, snail)\nrule3() = eat_food(snail, food_of(cheetah)) => knock_down_fortress(cheetah, kangaroo)\nrule4() = not steal_points(tiger, 5, octopus) => prepare_armor(octopus, snail)\nrule5() = wink_at(animal, lion) => not give_magnifier(meerkat, snail)\nrule6() = give_magnifying_glass(animal, swordfish) => not eat_food(snail, food_of(cheetah))\nrule7() = not prepare_armor(octopus, snail) & not give_magnifying_glass(meerkat, snail) => eat_food(snail, food_of(cheetah))\norder(rule3) > order(rule1) = True\norder(rule4) > order(rule2) = True\norder(rule7) > order(rule6) = True\n\nfriends(meerkat) = 6\nfriends(octopus) = 14\nwink_at(cat, lion) = False\n\nquestion = knock_down_fortress(cheetah, kangaroo)\n"}, {"idx": 282, "response": "friends(donkey) = 3\nfriends(donkey) < 6 = True\nrespects(donkey, grizzly_bear) = rule1()\nrespects(donkey, grizzly_bear) == True\nnot attack(grasshopper, green_fields_of(donkey)) = True\npoints(crocodile) == points(donkey) = True\noffer_job(donkey, pig) = rule5()\noffer_job(donkey, pig) == True\noffer_job(donkey, pig) == True\ngive_magnifier(donkey, kudu) = rule8(donkey)\ngive_magnifier(donkey, kudu) == True\ngive_magnifier(donkey, kudu) == True\nneed_support(cat, whale) = rule9()\nneed_support(cat, whale) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(donkey) < 6 => respects(donkey, grizzly_bear)\nrule2() = first_letter_of(name(donkey)) == first_letter_of(name(kiwi)) => not respects(donkey, grizzly_bear)\nrule3() = not owes_money_to(lobster, cat) => not burn(warehouse_of(moose), cat)\nrule4() = first_letter_of(name(oscar)) == first_letter_of(name(salmon)) => not knock_down(fortress_of(cat), oscar)\nrule5() = not attack(grasshopper, green_fields_of(donkey)) & points(crocodile) == points(donkey) => offer_job(donkey, pig)\nrule6() = not knock_down(fortress_of(cat), oscar) => burn(warehouse_of(moose), cat)\nrule7(something) = burn(warehouse_of(moose), something) => not need_support(something, whale)\nrule8(something) = offer_job(something, pig) & respects(something, grizzly_bear) => give_magnifier(something, kudu)\nrule9() = give_magnifier(something, kudu) => need_support(cat, whale)\norder(rule2) > order(rule1) = True\norder(rule3) > order(rule6) = True\norder(rule9) > order(rule7) = True\n\nrespects(catfish, donkey) = True\npoints(crocodile) == points(donkey) = True\nfriends(donkey) = 3\nname(kiwi, Pablo) = True\nname(oscar, Lucy) = True\nname(salmon, Luna) = True\nnot attack(grasshopper, green_fields_of(donkey)) = True\n\nquestion = need_support(cat, whale)\n"}, {"idx": 283, "response": "question = unknown", "answer": 0, "code": "rule1() = has(dog, something_to_sit_on) => not steal_points(dog, 5, raven)\nrule2() = sing_song(something, victory_song_for(swordfish)) => steal_points(dog, 5, raven)\nrule3(something) = steal_points(something, 5, raven) & not sing_song(something, victory_song_for(pig)) => needs_support(something, wolverine)\nrule4() = enemy(kudu, dog) & steal_points(lobster, 5, dog) => not sing_song(dog, victory_song_for(pig))\nrule5() = needs_support(something, wolverine) => not prepare_armor(koala, zander)\norder(rule1) > order(rule2) = True\n\nenemy(kudu, dog) = True\nsteal_points(lobster, 5, dog) = True\nsing_song(oscar, victory_song_for(swordfish)) = True\n\nquestion = prepare_armor(koala, zander)\n"}, {"idx": 284, "response": "name(crocodile, Casper) == True\nhas(crocodile, high_quality_paper) == True\npoints(crocodile) == points(koala) == True\nnot roll_dice(crocodile, elephant) = rule4()\nroll_dice(crocodile, elephant) == False\nhas(crocodile, card_with(color_starting_with(\"r\"))) == True\nroll_dice(crocodile, elephant) = rule7()\nroll_dice(crocodile, elephant) == True\nroll_dice(crocodile, elephant) == True\nnot roll_dice(crocodile, sheep) = rule5()\nroll_dice(crocodile, sheep) == False\nquestion = False", "answer": -1, "code": "rule1() = not needs_support(something, jellyfish) => roll_dice(something, sheep)\nrule2() = has(crocodile, high_quality_paper) => points(crocodile) == points(koala)\nrule3() = first_letter_of(name(crocodile)) == first_letter_of(name(amberjack)) => roll_dice(crocodile, elephant)\nrule4() = friends(crocodile) < 8 => not roll_dice(crocodile, elephant)\nrule5() = sing_song(something, victory_song_for(ferret)) => not roll_dice(crocodile, sheep)\nrule6(something) = roll_dice(something, elephant) & points(something) == points(koala) => needs_support(something, jellyfish)\nrule7() = has(crocodile, card_with(color_starting_with(\"r\"))) => roll_dice(crocodile, elephant)\norder(rule4) > order(rule3) = True\norder(rule4) > order(rule7) = True\norder(rule5) > order(rule1) = True\n\nname(amberjack, Lucy) = True\nhas(crocodile, card_with(red_color)) = True\nname(crocodile, Casper) = True\nhas(crocodile, high_quality_paper) = True\n\nquestion = roll_dice(crocodile, sheep)\n"}, {"idx": 285, "response": "prepare_armor(turtle, kangaroo) == False\nproceed(halibut, spot_right_after(spot_of(cow))) = unknown", "answer": 0, "code": "rule1() = prepare_armor(something, kangaroo) => give_magnifier(hare, doctorfish)\nrule2() = not prepare_armor(something, spider) => knows_defensive_plans(something, cricket)\nrule3() = eats_food_of(something, kiwi) => not learn_basics_of_resource_management(sun_bear, caterpillar)\nrule4() = has(mosquito, high_quality_paper) => sing_song(mosquito, victory_song_for(ferret))\nrule5() = give_magnifier(something, doctorfish) => respect(something, halibut)\nrule6() = first_letter_of(name(sun_bear)) == first_letter_of(name(squirrel)) => learn_elementary_resource_management(sun_bear, caterpillar)\nrule7(something) = knows_defensive_plans(something, cricket) & sing_song(something, victory_song_for(ferret)) => need_support(something, halibut)\nrule8() = eats_food_of(something, raven) => not sing_song(mosquito, victory_song_for(ferret))\nrule9() = enemy(something, cricket) => not need_support(mosquito, halibut)\nrule10() = friends(hare) < 12 => not give_magnifier(hare, doctorfish)\nrule11() = points(grasshopper) == points(mosquito) => not knows_defensive_plans(mosquito, cricket)\nrule12() = learn_elementary_resource_management(something, caterpillar) => learn_basics_of_resource_management(panther, koala)\nrule13() = learn_basics_of_resource_management(something, koala) => proceed(halibut, spot_right_after(spot_of(cow)))\norder(rule10) > order(rule1) = True\norder(rule11) > order(rule2) = True\norder(rule6) > order(rule3) = True\norder(rule8) > order(rule4) = True\norder(rule9) > order(rule7) = True\n\neats_food_of(carp, kiwi) = True\nhas(mosquito, high_quality_paper) = True\nnot prepare_armor(mosquito, spider) = True\nname(squirrel, Teddy) = True\nname(sun_bear, Tango) = True\nprepare_armor(turtle, kangaroo) = True\n\nquestion = proceed(halibut, spot_right_after(spot_of(cow)))\n"}, {"idx": 286, "response": "has(swordfish, carry_apples_and_oranges) = rule2()\nhas(swordfish, carry_apples_and_oranges) == True\noffer_job_position(swordfish, catfish) = rule2()\noffer_job_position(swordfish, catfish) == True\noffer_job_position(swordfish, catfish) == True\nnot offer_job_position(swordfish, catfish) = rule8()\noffer_job_position(swordfish, catfish) == False\nhas(catfish, sit_on_something) = rule3()\nhas(catfish, sit_on_something) == True\nactual_enemy(catfish, sea_bass) = rule3()\nactual_enemy(catfish, sea_bass) == True\nactual_enemy(catfish, sea_bass) == True\nenemy(catfish, sea_bass) = rule7()\nenemy(catfish, sea_bass) == True\nenemy(catfish, sea_bass) == True\nnot proceed(catfish, spot_right_after(spot_of(goldfish))) = rule5()\nproceed(catfish, spot_right_after(spot_of(goldfish))) == False\nproceed(catfish, spot_right_after(spot_of(goldfish))) == False\nsame_number_of_points(goldfish, puffin) = question\nsame_number_of_points(goldfish, puffin) = unknown", "answer": 0, "code": "rule1() = offer_job_position(swordfish, catfish) => proceed(catfish, spot_right_after(spot_of(goldfish)))\nrule2() = has(swordfish, carry_apples_and_oranges) => offer_job_position(swordfish, catfish)\nrule3() = has(catfish, sit_on_something) => actual_enemy(catfish, sea_bass)\nrule4(something) = not sing_song(something, victory_song_for(tilapia)) => prepare_armor(something, wolverine)\nrule5(something) = enemy(something, sea_bass) & knows(defense_plan_of(octopus), something) => not proceed(something, spot_right_after(spot_of(goldfish)))\nrule6() = prepare_armor(something, wolverine) => not offer_job_position(meerkat, goldfish)\nrule7() = first_letter_of(name(catfish)) == first_letter_of(name(dog)) => enemy(catfish, sea_bass)\nrule8() = has(swordfish, sit_on_something) => not offer_job_position(swordfish, catfish)\nrule9() = show_all_cards(something, bat) => not prepare_armor(spider, wolverine)\nrule10() = proceed(catfish, spot_right_after(spot_of(goldfish))) & not offer_job_position(meerkat, goldfish) => not same_number_of_points(goldfish, puffin)\norder(rule5) > order(rule1) = True\norder(rule8) > order(rule2) = True\norder(rule9) > order(rule4) = True\n\nhas(catfish, harmonica) = True\nname(catfish, Blossom) = True\nname(dog, Buddy) = True\nhas(swordfish, basket) = True\nnot sing_song(spider, victory_song_for(tilapia)) = True\n\nquestion = same_number_of_points(goldfish, puffin)\n"}, {"idx": 287, "response": "name(moose, Casper) == True\nname(whale, Lily) == True\nfirst_letter_of(name(whale)) == first_letter_of(name(moose)) == True\nremove(whale, piece_of(leopard)) = rule4()\nremove(whale, piece_of(leopard)) == True\noffer_job(squirrel, caterpillar) = rule3(squirrel)\noffer_job(squirrel, caterpillar) == True\nsteal_points(squirrel, 5, amberjack) = rule2()\nsteal_points(squirrel, 5, amberjack) == True\nquestion = True", "answer": 1, "code": "rule1() = killed(mayor, whale) => remove(whale, piece_of(leopard))\nrule2() = offer_job(something, caterpillar) => steal_points(squirrel, 5, amberjack)\nrule3(something) = remove(something, piece_of(leopard)) => offer_job(something, caterpillar)\nrule4() = first_letter_of(name(whale)) == first_letter_of(name(moose)) => remove(whale, piece_of(leopard))\n\nname(moose, Casper) = True\nname(whale, Lily) = True\n\nquestion = steal_points(squirrel, 5, amberjack)\n"}, {"idx": 288, "response": "has(sun_bear, card_with(primary_color)) == True\nlearn(sun_bear, elementary_resource_management_from(octopus)) = rule8()\nlearn(sun_bear, elementary_resource_management_from(octopus)) == True\nlearn(sun_bear, elementary_resource_management_from(octopus)) == True\nnot steals_points(squirrel, phoenix, 5) = rule9()\nsteals_points(squirrel, phoenix, 5) == False\nlearn_basics_of_resource_management(sun_bear, cow) = rule6()\nlearn_basics_of_resource_management(sun_bear, cow) == False\nlearn_basics_of_resource_management(sun_bear, cow) == False\nquestion = False", "answer": -1, "code": "rule1() = needs_support(starfish, sun_bear) => attack_green_fields(sun_bear, owner_is(mosquito))\nrule2() = has(ferret, card_with(color_starting_with(\"g\"))) => roll_dice(ferret, squirrel)\nrule3(something) = learn(something, elementary_resource_management_from(octopus)) & eat_food(something, owner_is(penguin)) => not attack_green_fields(something, owner_is(mosquito))\nrule4(something) = attack_green_fields(something, owner_is(mosquito)) => learn(something, elementary_resource_management_from(cow))\nrule5() = not proceed(tiger, spot_right_after(spot_of(kiwi))) => learn(kiwi, elementary_resource_management_from(squirrel))\nrule6() = steals_points_from(animal, phoenix, 5) => not learn_basics_of_resource_management(sun_bear, cow)\nrule7() = has(starfish, leafy_green_vegetable) => needs_support(starfish, sun_bear)\nrule8() = has(sun_bear, card_with(primary_color)) => learn(sun_bear, elementary_resource_management_from(octopus))\nrule9() = learn_basics_of_resource_management(animal, ferret) => not steals_points(squirrel, phoenix, 5)\nrule10() = roll_dice(ferret, squirrel) & learn(kiwi, elementary_resource_management_from(squirrel)) => steals_points(squirrel, phoenix, 5)\nrule11() = has(starfish, card_with(color_in(rainbow_colors))) => needs_support(starfish, sun_bear)\nrule12() = not sing_song(zander, victory_song_for(sun_bear)) => not eat_food(sun_bear, owner_is(penguin))\nrule13() = respects(animal, sea_bass) => eat_food(sun_bear, owner_is(penguin))\nrule14() = has(sun_bear, musical_instrument) => learn_basics_of_resource_management(sun_bear, octopus)\norder(rule1) > order(rule3) = True\norder(rule12) > order(rule13) = True\norder(rule4) > order(rule6) = True\norder(rule9) > order(rule10) = True\n\nhas(ferret, card_with(green_color)) = True\nrespects(snail, sea_bass) = True\nhas(starfish, card_with(white_color)) = True\nhas(starfish, spinach) = True\nhas(sun_bear, card_with(violet_color)) = True\nhas(sun_bear, guitar) = True\nnot proceed(tiger, spot_right_after(spot_of(kiwi))) = True\n\nquestion = learn_basics_of_resource_management(sun_bear, cow)\n"}, {"idx": 289, "response": "reduce_work_hours(leopard) == True\nwork_hours(leopard) > previous_work_hours(leopard) == True\nnot eat_food(leopard, food_of(penguin)) = rule1()\neat_food(leopard, food_of(penguin)) == False\nnot raise_flag_of_peace(penguin, sheep) = rule2()\nraise_flag_of_peace(penguin, sheep) == False\nenemy(mosquito, penguin) = rule3()\nenemy(mosquito, penguin) == False\nrespects(penguin, kangaroo) == False\nhas(leopard, something_to_sit_on) = rule4()\nhas(leopard, something_to_sit_on) == True\nnot eat_food(leopard, food_of(penguin)) == False\nnot raise_flag_of_peace(penguin, sheep) == False\nrespects(penguin, kangaroo) == False\nnot proceed(penguin, spot_right_after(spot_of(panda_bear))) = rule5(penguin)\nnot proceed(penguin, spot_right_after(spot_of(panda_bear))) == True\nquestion = True", "answer": 1, "code": "rule1() = work_hours(leopard) > previous_work_hours(leopard) => not eat_food(leopard, food_of(penguin))\nrule2() = not eat_food(leopard, food_of(penguin)) => not raise_flag_of_peace(penguin, sheep)\nrule3() = enemy(mosquito, penguin) => respects(penguin, kangaroo)\nrule4() = has(leopard, something_to_sit_on) => not eat_food(leopard, food_of(penguin))\nrule5(something) = not raise_flag_of_peace(something, sheep) & respects(something, kangaroo) => not proceed(something, spot_right_after(spot_of(panda_bear)))\nrule6(something) = not roll_dice(something, dog) => not respects(something, kangaroo)\nrule7(device) = has(mosquito, connect_to_internet(device)) => enemy(mosquito, penguin)\norder(rule6) > order(rule3) = True\n\nhas(leopard, beer) = True\nhas(leopard, love_seat_sofa) = True\nreduce_work_hours(leopard) = True\nhas(mosquito, cell_phone) = True\n\nquestion = proceed(penguin, spot_right_after(spot_of(panda_bear)))\n"}, {"idx": 290, "response": "name(rabbit, Beauty) == True\nname(cow, Lily) == True\nfirst_letter_of(name(rabbit)) == first_letter_of(name(cow)) == True\nremove(rabbit, piece_of(viperfish)) = rule1()\nremove(rabbit, piece_of(viperfish)) == True\nknock_down(viperfish, fortress_of(rabbit)) == True\ngive_magnifier(rabbit, polar_bear) = rule10()\ngive_magnifier(rabbit, polar_bear) == True\ngive_magnifier(rabbit, polar_bear) == True\nrespect(rabbit, cricket) = rule4(rabbit)\nrespect(rabbit, cricket) == True\nrespect(rabbit, cricket) == True\nburn(warehouse_of(caterpillar), rabbit) = rule8(rabbit)\nburn(warehouse_of(caterpillar), rabbit) == True\nburn(warehouse_of(caterpillar), rabbit) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(rabbit)) == first_letter_of(name(cow)) => remove(rabbit, piece_of(viperfish))\nrule2(something) = knows(defensive_plans_of(moose), something) => not burn(warehouse_of(caterpillar), something)\nrule3() = friends(rabbit) < 6 => remove(rabbit, piece_of(viperfish))\nrule4(something) = give_magnifier(something, polar_bear) => respect(something, cricket)\nrule5(something) = sing_song(something, victory_song_for(black_bear)) & remove(something, piece_of(viperfish)) => not respect(something, cricket)\nrule6() = eat_food(oscar, food_of(rabbit)) => sing_song(rabbit, victory_song_for(black_bear))\nrule7() = reduce_work_hours(rabbit) => not sing_song(rabbit, victory_song_for(black_bear))\nrule8(something) = respect(something, cricket) => burn(warehouse_of(caterpillar), something)\nrule9() = not steal_points(elephant, 5, rabbit) => not remove(rabbit, piece_of(viperfish))\nrule10() = knock_down(viperfish, fortress_of(rabbit)) => give_magnifier(rabbit, polar_bear)\nrule11() = has(rabbit, connect_to_internet(device)) => not sing_song(rabbit, victory_song_for(black_bear))\norder(rule1) > order(rule9) = True\norder(rule11) > order(rule6) = True\norder(rule2) > order(rule8) = True\norder(rule3) > order(rule9) = True\norder(rule5) > order(rule4) = True\norder(rule7) > order(rule6) = True\n\nname(cow, Lily) = True\neat_food(oscar, food_of(rabbit)) = True\nhas(rabbit, flute) = True\nfriends(rabbit) = 4\nname(rabbit, Beauty) = True\nknock_down(viperfish, fortress_of(rabbit)) = True\nnot owe_money_to(elephant, rabbit) = True\n\nquestion = burn(warehouse_of(caterpillar), rabbit)\n"}, {"idx": 291, "response": "offer_job(kudu, squirrel) == True\nsteal_points(kudu, 5, carp) == True\nsteal_points(kudu, 5, swordfish) = rule3(kudu)\nsteal_points(kudu, 5, swordfish) == True\nroll_dice_for(oscar, something) = rule2()\nroll_dice_for(oscar, blobfish) == True\nroll_dice_for(oscar, blobfish) == True\nrespects(eagle, starfish) = rule1()\nrespects(eagle, starfish) == True\nquestion = True", "answer": 1, "code": "rule1() = roll_dice_for(oscar, something) => respects(eagle, starfish)\nrule2() = steal_points(something, 5, swordfish) => roll_dice_for(oscar, blobfish)\nrule3(something) = offer_job(something, squirrel) & steal_points(something, 5, carp) => steal_points(something, 5, swordfish)\n\noffer_job(kudu, squirrel) = True\nsteal_points(kudu, 5, carp) = True\n\nquestion = respects(eagle, starfish)\n"}, {"idx": 292, "response": "has(carp, card_with(color_in(rainbow_colors))) == True\nshow_cards(carp, kiwi) = rule1()\nshow_cards(carp, kiwi) == True\nshow_cards(carp, kiwi) == True\nraise_flag_of_peace(meerkat, jellyfish) = rule4()\nraise_flag_of_peace(meerkat, jellyfish) == True\nraise_flag_of_peace(meerkat, jellyfish) == True\nnot sing_song(jellyfish, victory_song_for(grasshopper)) = rule5()\nsing_song(jellyfish, victory_song_for(grasshopper)) == False\nsing_song(jellyfish, victory_song_for(grasshopper)) == False\nquestion = False", "answer": -1, "code": "rule1() = has(carp, card_with(color_in(rainbow_colors))) => show_cards(carp, kiwi)\nrule2() = first_letter_of(name(carp)) == first_letter_of(name(octopus)) => show_cards(carp, kiwi)\nrule3() = burn(warehouse_of(wolverine), something) => sing_song(jellyfish, victory_song_for(grasshopper))\nrule4() = show_cards(something, kiwi) => raise_flag_of_peace(meerkat, jellyfish)\nrule5() = raise_flag_of_peace(meerkat, jellyfish) => not sing_song(jellyfish, victory_song_for(grasshopper))\norder(rule3) > order(rule5) = True\n\nhas(carp, card_with(white_color)) = True\nname(carp, Tango) = True\nname(octopus, Tessa) = True\n\nquestion = sing_song(jellyfish, victory_song_for(grasshopper))\n"}, {"idx": 293, "response": "has(parrot, flute) == True\nhas(parrot, musical_instrument) == True\nproceed(parrot, spot_right_after(spot_of(tiger))) = rule5()\nproceed(parrot, spot_right_after(spot_of(tiger))) == True\nproceed(parrot, spot_right_after(spot_of(tiger))) == True\neat_food(donkey, food_of(rabbit)) = rule7()\neat_food(donkey, food_of(rabbit)) == True\neat_food(donkey, food_of(rabbit)) == True\nquestion = True", "answer": 1, "code": "rule1() = steal_points(something, 5, wolverine) => knock_down(dog, fortress_of(parrot))\nrule2(something) = not offer_job_position(something, leopard) & proceed(something, spot_right_after(spot_of(tiger))) => burn(warehouse_of(ferret), something)\nrule3() = has(parrot, connect_to_internet(device)) => not offer_job_position(parrot, leopard)\nrule4() = has(parrot, card_with(color_starting_with(\"y\"))) => offer_job_position(parrot, leopard)\nrule5() = has(parrot, musical_instrument) => proceed(parrot, spot_right_after(spot_of(tiger)))\nrule6() = first_letter_of(name(hippopotamus)) == first_letter_of(name(penguin)) => steal_points(hippopotamus, 5, parrot)\nrule7(something) = burn(warehouse_of(ferret), something) => eat_food(donkey, food_of(rabbit))\nrule8() = friends(hippopotamus) > 1 => steal_points(hippopotamus, 5, parrot)\nrule9() = wink(elephant, donkey) => respects(donkey, aardvark)\nrule10() = enemy(something, panda_bear) => eat_food(elephant, food_of(donkey))\nrule11(something) = show_cards(something, starfish) => not knock_down(dog, fortress_of(parrot))\nrule12() = has(elephant, drink) => not eat_food(elephant, food_of(donkey))\norder(rule11) > order(rule1) = True\norder(rule12) > order(rule10) = True\norder(rule4) > order(rule3) = True\n\nsteal_points(caterpillar, 5, wolverine) = True\nhas(elephant, beer) = True\nfriends(hippopotamus) = 7\nhas_friend(hippopotamus, lazy_friend) = True\nname(hippopotamus, Charlie) = True\nhas(parrot, card_with(yellow_color)) = True\nhates(parrot, Chris_Ronaldo) = True\nhas(parrot, flute) = True\nhas(parrot, tablet) = True\nname(penguin, Max) = True\nenemy(pig, panda_bear) = True\n\nquestion = eat_food(donkey, food_of(rabbit))\n"}, {"idx": 294, "response": "knows(defensive_plans_of(crocodile), baboon) == True\nneeds_support(crocodile, carp) = rule9()\nneeds_support(crocodile, carp) == True\npoints(carp) == points(cricket) = rule8()\npoints(carp) == points(cricket) == True\nnot offer_job(carp, rabbit) = rule11()\noffer_job(carp, rabbit) == False\nquestion = False", "answer": -1, "code": "rule1() = needs_support(crocodile, carp) & steal_points(goldfish, 5, carp) => burn(warehouse_of(whale), carp)\nrule2() = has(phoenix, leafy_green_vegetable) => raise_flag_of_peace(phoenix, carp)\nrule3(something) = points(something) == points(cricket) & burn(warehouse_of(whale), something) => offer_job(something, rabbit)\nrule4() = friends(goldfish) > 10 => steal_points(goldfish, 5, carp)\nrule5() = first_letter_of(name(phoenix)) == first_letter_of(name(grasshopper)) => not raise_flag_of_peace(phoenix, carp)\nrule6() = friends(phoenix) > 9 => not raise_flag_of_peace(phoenix, carp)\nrule7(something) = enemy(something, kudu) => knows(defensive_plans_of(leopard), something)\nrule8() = needs_support(something, moose) => not points(carp) == points(cricket)\nrule9() = knows(defensive_plans_of(crocodile), baboon) => needs_support(crocodile, carp)\nrule10() = not raise_flag_of_peace(phoenix, carp) => points(carp) == points(cricket)\nrule11() = learn_basics_of_resource_management(halibut, carp) => not offer_job(carp, rabbit)\norder(rule11) > order(rule3) = True\norder(rule5) > order(rule2) = True\norder(rule6) > order(rule2) = True\norder(rule8) > order(rule10) = True\n\nknows(defensive_plans_of(crocodile), baboon) = True\nenemy(gecko, kudu) = True\nhas(gecko, backpack) = True\nhas(gecko, card_with(red_color)) = True\nfriends(goldfish) = 16\nname(grasshopper, Peddi) = True\nhas(phoenix, trumpet) = True\nname(phoenix, Bella) = True\nfriends(phoenix) = 19\nhas(phoenix, kale) = True\n\nquestion = offer_job(carp, rabbit)\n"}, {"idx": 295, "response": "rolls_dice_for(viperfish, parrot) = question", "answer": 0, "code": "rule1() = winks_at(something, squirrel) => knock_down_fortress(something, hippopotamus)\nrule2() = has(kiwi, sharp_object) => attack_green_fields(kiwi, hippopotamus)\nrule3() = killed(swordfish, mayor) => not knock_down_fortress(swordfish, hippopotamus)\nrule4(device) = has(kiwi, connect_to_internet(device)) => not attack_green_fields(kiwi, hippopotamus)\nrule5() = rolls_dice_for(something, penguin) => not need_support(aardvark, hippopotamus)\nrule6() = friends(swordfish) < 1 => not knock_down_fortress(swordfish, hippopotamus)\nrule7(something) = burn(warehouse_of(swordfish), something) => not rolls_dice_for(viperfish, parrot)\nrule8() = not need_support(aardvark, hippopotamus) => burn(warehouse_of(swordfish), hippopotamus)\nrule9() = attack_green_fields(kiwi, hippopotamus) & knock_down_fortress(swordfish, hippopotamus) => not burn(warehouse_of(swordfish), hippopotamus)\nrule10() = has(kiwi, card_with(color_in_flag_of_france)) => attack_green_fields(kiwi, hippopotamus)\norder(rule10) > order(rule4) = True\norder(rule2) > order(rule4) = True\norder(rule3) > order(rule1) = True\norder(rule6) > order(rule1) = True\norder(rule8) > order(rule9) = True\n\nenemy(aardvark, hummingbird) = True\nrolls_dice_for(hummingbird, penguin) = True\nhas(kiwi, card_with(violet_color)) = True\nhas(kiwi, couch) = True\nhas(kiwi, knife) = True\nfriends(kiwi) = 8\nfriends(swordfish) = 9\nwinks_at(swordfish, squirrel) = True\n\nquestion = rolls_dice_for(viperfish, parrot)\n"}, {"idx": 296, "response": "points(spider) == points(hummingbird) = rule3()\npoints(spider) == points(hummingbird) == True\nquestion = True", "answer": 1, "code": "rule1() = knock_down(lion, fortress_of(turtle)) => remove(turtle, piece_of(blobfish))\nrule2() = took_bike(turtle, store) => learn_elementary_resource_management(turtle, mosquito)\nrule3() = remove(something, piece_of(blobfish)) => points(spider) == points(hummingbird)\nrule4(something) = learn_basics_of_resource_management(something, mosquito) => points(something) == points(spider)\nrule5(something) = offer_job(something, cow) => prepare_armor(something, lobster)\nrule6() = prepare_armor(kudu, pig) => roll_dice(pig, dog)\nrule7() = friends(turtle) < 9 => not learn_basics_of_resource_management(turtle, mosquito)\nrule8() = first_letter_of(name(turtle)) == first_letter_of(name(grizzly_bear)) => respects(turtle, meerkat)\nrule9() = has(turtle, carry_apples_and_oranges) => learn_basics_of_resource_management(turtle, mosquito)\nrule10() = owns(lion, luxury_aircraft) => not learn_elementary_resource_management(lion, turtle)\nrule11() = has(turtle, card_with(color_starting_with(\"b\"))) => not learn_basics_of_resource_management(turtle, mosquito)\nrule12() = not owes_money_to(sea_bass, spider) & points(turtle) == points(spider) => not hold_same_number_of_points(spider, hummingbird)\nrule13() = attack(tiger, green_fields_of(lion)) => learn_basics_of_resource_management(lion, turtle)\norder(rule11) > order(rule2) = True\norder(rule11) > order(rule9) = True\norder(rule12) > order(rule3) = True\norder(rule13) > order(rule10) = True\norder(rule7) > order(rule2) = True\norder(rule7) > order(rule9) = True\n\nname(grizzly_bear, Buddy) = True\nprepare_armor(kudu, pig) = True\nowns(lion, luxury_aircraft) = True\nattack(tiger, green_fields_of(lion)) = True\nhas(turtle, green_tea) = True\nfriends(turtle) = 14\nname(turtle, Beauty) = True\noffer_job(turtle, cow) = True\ntook_bike(turtle, store) = True\nnot learn_basics_of_resource_management(carp, turtle) = True\n\nquestion = hold_same_number_of_points(spider, hummingbird)\n"}, {"idx": 297, "response": "color_of(card(ferret)) = white\nname(ferret, Tarzan) = True\nname(kangaroo, Lily) = True\ncolor_of(card(rabbit)) = green\nname(rabbit, Blossom) = True\nname(sheep, Pashmak) = True\n\noffer_job_position(blobfish, cricket) = rule2()\nnot knows(defensive_plans_of(tilapia), pig) = rule2()\nknows(defensive_plans_of(tilapia), pig) == False\noffer_job(blobfish, amberjack) = rule1()\noffer_job(blobfish, amberjack) == True\nquestion = True", "answer": 1, "code": "rule1() = knows(defensive_plans_of(tilapia), something) => offer_job(blobfish, amberjack)\nrule2() = offer_job_position(something, cricket) => not knows(defensive_plans_of(tilapia), pig)\nrule3() = first_letter_of(name(rabbit)) == first_letter_of(name(sheep)) => enemy(rabbit, pig)\nrule4() = color_of(card(ferret)) in colors_of(flag_of(Netherlands)) => proceed(ferret, spot_right_after(spot_of(pig)))\nrule5() = enemy(rabbit, pig) & proceed(ferret, spot_right_after(spot_of(pig))) => knows(defensive_plans_of(tilapia), pig)\nrule6() = color_of(card(rabbit)) starts_with \"g\" => enemy(rabbit, pig)\nrule7() = first_letter_of(name(ferret)) == first_letter_of(name(kangaroo)) => proceed(ferret, spot_right_after(spot_of(pig)))\norder(rule2) > order(rule5) = True\n\ncolor_of(card(ferret)) = white\nname(ferret, Tarzan) = True\nname(kangaroo, Lily) = True\ncolor_of(card(rabbit)) = green\nname(rabbit, Blossom) = True\nname(sheep, Pashmak) = True\n\nquestion = offer_job(blobfish, amberjack)\n"}, {"idx": 298, "response": "friends(aardvark) = 10\nfriends(aardvark) > 8 = True\nshow_cards(aardvark, hare) = rule1()\nshow_cards(aardvark, hare) == True\nknows(defense_plan_of(koala), squirrel) = True\nremove(koala, piece_of(grizzly_bear)) = rule2()\nremove(koala, piece_of(grizzly_bear)) == True\nknock_down(sun_bear, fortress_of(koala)) = True\nnot remove(koala, piece_of(grizzly_bear)) = rule6()\nnot remove(koala, piece_of(grizzly_bear)) == False\nwink(blobfish, whale) = rule3()\nwink(blobfish, whale) == False\nattack(blobfish, green_fields_of(wolverine)) = rule3()\nattack(blobfish, green_fields_of(wolverine)) == False\nshow_all_cards(blobfish, hare) = rule4()\nshow_all_cards(blobfish, hare) == False\nattack(blobfish, green_fields_of(wolverine)) == False\nrespects(blobfish, wolverine) = rule7(blobfish)\nrespects(blobfish, wolverine) == True\nrespects(blobfish, wolverine) == True\nnot owe(blobfish, money, oscar) = rule5()\nnot owe(blobfish, money, oscar) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(aardvark) > 8 => show_cards(aardvark, hare)\nrule2() = knows(defense_plan_of(koala), squirrel) => remove(koala, piece_of(grizzly_bear))\nrule3(something) = wink(something, whale) => attack(something, green_fields_of(wolverine))\nrule4() = show_all_cards(something, hare) => not attack(blobfish, green_fields_of(wolverine))\nrule5(something) = not attack(something, green_fields_of(wolverine)) & respects(something, wolverine) => not owe(something, money, oscar)\nrule6() = knock_down(sun_bear, fortress_of(koala)) => not remove(koala, piece_of(grizzly_bear))\nrule7(something) = remove(something, piece_of(grizzly_bear)) => respects(blobfish, wolverine)\norder(rule2) > order(rule6) = True\norder(rule3) > order(rule4) = True\n\nfriends(aardvark) = 10\nknows(defense_plan_of(koala), squirrel) = True\nknock_down(sun_bear, fortress_of(koala)) = True\n\nquestion = owe(blobfish, money, oscar)\n"}, {"idx": 299, "response": "knock_down(fortress_of(amberjack), phoenix) = rule2(phoenix)\nknock_down(fortress_of(amberjack), phoenix) == True\nknock_down(fortress_of(amberjack), phoenix) == True\nquestion = True", "answer": 1, "code": "rule1(something) = offers_job(something, snail) => burn(warehouse_of(gecko), something)\nrule2(something) = rolls_dice_for(something, starfish) & burn(warehouse_of(gecko), something) => knock_down(fortress_of(amberjack), something)\nrule3(something) = learns_basics_of_resource_management(something, hippopotamus) => knock_down(fortress_of(tiger), something)\nrule4(something) = knock_down(fortress_of(panther), something) => offers_job(phoenix, snail)\nrule5(something) = offers_job(something, tiger) => rolls_dice_for(phoenix, starfish)\n\nknock_down(fortress_of(panther), cheetah) = True\nlearns_basics_of_resource_management(moose, hippopotamus) = True\n\nquestion = knock_down(fortress_of(amberjack), phoenix)\n"}, {"idx": 300, "response": "winks(grizzly_bear, mosquito) == True\nknows(defensive_plans_of(mosquito), wolverine) == True\nraise_flag_of_peace(mosquito, dog) = rule1()\nraise_flag_of_peace(mosquito, dog) == True\nraise_flag_of_peace(mosquito, dog) == True\nrolls_dice(mosquito, hummingbird) = rule3()\nrolls_dice(mosquito, hummingbird) == True\nrolls_dice(mosquito, hummingbird) == True\nshow_cards(hummingbird, donkey) = True\nquestion = True", "answer": 1, "code": "rule1() = knows(defensive_plans_of(mosquito), wolverine) & winks(grizzly_bear, mosquito) => raise_flag_of_peace(mosquito, dog)\nrule2() = has(viperfish, drink) => owes_money_to(viperfish, mosquito)\nrule3() = rolls_dice(mosquito, hummingbird) => show_cards(hummingbird, donkey)\nrule4() = owes_money_to(viperfish, mosquito) => rolls_dice(mosquito, hummingbird)\nrule5(something) = raise_flag_of_peace(something, dog) & rolls_dice(something, cockroach) => not rolls_dice(something, hummingbird)\nrule6() = has(viperfish, musical_instrument) => owes_money_to(viperfish, mosquito)\nrule7() = friends(mosquito) < 10 => rolls_dice(mosquito, cockroach)\nrule8() = has(mosquito, carry_apples_and_oranges) => rolls_dice(mosquito, cockroach)\nrule9() = learn_basics_of_resource_management(parrot, viperfish) => not owes_money_to(viperfish, mosquito)\nrule10() = respects(something, rabbit) => not rolls_dice(mosquito, cockroach)\norder(rule2) > order(rule9) = True\norder(rule4) > order(rule5) = True\norder(rule6) > order(rule9) = True\norder(rule7) > order(rule10) = True\norder(rule8) > order(rule10) = True\n\nrespects(blobfish, rabbit) = True\nwinks(grizzly_bear, mosquito) = True\nhas(mosquito, trumpet) = True\nfriends(mosquito) = 4\nlearn_basics_of_resource_management(parrot, viperfish) = True\nhas(viperfish, blade) = True\nhas(viperfish, violin) = True\nknows(defensive_plans_of(mosquito), wolverine) = True\n\nquestion = show_cards(hummingbird, donkey)\n"}, {"idx": 301, "response": "not burn(warehouse_of(hare)) = rule1()\nburn(warehouse_of(hare)) == False\nburn(warehouse_of(hare)) == False\nburn(warehouse_of(hare), hippopotamus) = rule6()\nburn(warehouse_of(hare), hippopotamus) == False\nburn(warehouse_of(hare), hippopotamus) == False\nnot need_support(hare, cheetah) = question\nneed_support(hare, cheetah) == True\nneed_support(hare, cheetah) == True", "answer": 1, "code": "rule1() = sing_song(something, victory_song_for(lion)) => not burn(warehouse_of(hare))\nrule2(something) = not learn_elementary_resource_management_from(something, tiger) => knock_down(fortress_of(parrot))\nrule3(something) = attack(green_fields_of(cricket), something) => burn(warehouse_of(hare))\nrule4() = has(hippopotamus, leafy_green_vegetable) => attack(green_fields_of(cricket), hippopotamus)\nrule5() = not attack(green_fields_of(blobfish), donkey) & not knock_down(fortress_of(blobfish), eel) => not learn_elementary_resource_management_from(blobfish, tiger)\nrule6() = burn(warehouse_of(hare), hippopotamus) => not need_support(hare, cheetah)\norder(rule1) > order(rule3) = True\n\nattack(green_fields_of(pig), gecko) = True\nhas(hippopotamus, romaine_lettuce) = True\nnot attack(green_fields_of(blobfish), donkey) = True\nnot knock_down(fortress_of(blobfish), eel) = True\n\nquestion = need_support(hare, cheetah)\n"}, {"idx": 302, "response": "friends(sea_bass) = 7\nnot offer_job(sea_bass, panther) = True\nnot owes_money_to(sea_bass, spider) = True\nnot show_all_cards(sea_bass, salmon) = rule10()\nnot show_all_cards(sea_bass, salmon) == True\nnot show_all_cards(sea_bass, salmon) == True\nquestion = False", "answer": -1, "code": "rule1() = learn_basics_of_resource_management(snail, sea_bass) & roll_dice(sheep, sea_bass) => not show_all_cards(sea_bass, dog)\nrule2() = friends(snail) < 4 => proceed(snail, spot_right_after(spot_of(viperfish)))\nrule3() = eat_food(animal, food_of(ferret)) => remove(cheetah, piece_of(sheep))\nrule4() = remove(cheetah, piece_of(sheep)) => roll_dice(sheep, sea_bass)\nrule5() = friends(sea_bass) > 2 => owes_money_to(sea_bass, spider)\nrule6(something) = proceed(something, spot_right_after(spot_of(viperfish))) => learn_elementary_resource_management(something, sea_bass)\nrule7() = first_letter_of(name(snail)) == first_letter_of(name(aardvark)) => proceed(snail, spot_right_after(spot_of(viperfish)))\nrule8() = first_letter_of(name(polar_bear)) == first_letter_of(name(donkey)) => not need_support(polar_bear, sheep)\nrule9(something) = owes_money_to(something, catfish) => eat_food(something, food_of(squirrel))\nrule10(something) = not roll_dice(something, whale) => not show_all_cards(something, salmon)\nrule11(something) = offer_job(something, panther) => not owes_money_to(something, catfish)\nrule12() = has(cheetah, card_with(primary_color)) => not remove(cheetah, piece_of(sheep))\nrule13(something) = eat_food(something, food_of(squirrel)) & show_all_cards(something, salmon) => show_all_cards(something, dog)\nrule14(something) = owes_money_to(something, spider) => show_all_cards(something, salmon)\nrule15() = purchased_time_machine(cheetah) => not remove(cheetah, piece_of(sheep))\nrule16() = not need_support(polar_bear, sheep) => not roll_dice(sheep, sea_bass)\nrule17(something) = raise_flag_of_peace(something, sheep) => not owes_money_to(something, spider)\norder(rule10) > order(rule14) = True\norder(rule12) > order(rule3) = True\norder(rule13) > order(rule1) = True\norder(rule15) > order(rule3) = True\norder(rule16) > order(rule4) = True\norder(rule17) > order(rule5) = True\n\nname(aardvark, Milo) = True\npurchased_time_machine(cheetah) = True\nname(donkey, Teddy) = True\nname(polar_bear, Tessa) = True\neat_food(raven, food_of(ferret)) = True\nfriends(sea_bass) = 7\nnot offer_job(sea_bass, panther) = True\nfriends(snail) = 4 adventurous + 1 not adventurous\nname(snail, Max) = True\n\nquestion = show_all_cards(sea_bass, dog)\n"}, {"idx": 303, "response": "has(eagle, card_with(black_color)) == True\nrespects(eagle, halibut) = rule2()\nrespects(eagle, halibut) == True\nrespects(eagle, halibut) == True\nowns(eagle, luxury_aircraft) == True\nnot respects(eagle, halibut) = rule3()\nrespects(eagle, halibut) == False\nrespects(eagle, halibut) == False\nnot learn_elementary_resource_management(eagle, parrot) = rule6()\nlearn_elementary_resource_management(eagle, parrot) == False\nwinks_at(doctorfish, cheetah) == True\nnot learn_elementary_resource_management(eagle, parrot) == True\nnot learn_basics_of_resource_management(eagle, parrot) = rule6()\nlearn_basics_of_resource_management(eagle, parrot) == False\nnot respects(eagle, halibut) & not learn_basics_of_resource_management(eagle, parrot) = rule4(eagle)\nnot proceed(eagle, spot_right_after(spot_of(panther))) == True\neat_food(eagle, food_of(caterpillar)) = rule1()\neat_food(eagle, food_of(caterpillar)) == True\nquestion = True", "answer": 1, "code": "rule1() = not proceed(something, spot_right_after(spot_of(panther))) => eat_food(something, food_of(caterpillar))\nrule2() = has(eagle, card_with(primary_color)) => respects(eagle, halibut)\nrule3() = owns(eagle, luxury_aircraft) => not respects(eagle, halibut)\nrule4(something) = not respects(something, halibut) & not learn_basics_of_resource_management(something, parrot) => not proceed(something, spot_right_after(spot_of(panther)))\nrule5() = first_letter_of(name(eagle)) == first_letter_of(name(bat)) => respects(eagle, halibut)\nrule6() = winks_at(animal, cheetah) => not learn_elementary_resource_management(eagle, parrot)\norder(rule2) > order(rule3) = True\norder(rule5) > order(rule3) = True\n\nname(bat, Max) = True\nwinks_at(doctorfish, cheetah) = True\nhas(eagle, card_with(black_color)) = True\nowns(eagle, luxury_aircraft) = True\n\nquestion = eat_food(eagle, food_of(caterpillar))\n"}, {"idx": 304, "response": "has(oscar, card_with(orange_color)) == True\nnot roll_dice(oscar, goldfish) = rule11()\nroll_dice(oscar, goldfish) == False\nroll_dice(oscar, goldfish) == False\nquestion = False", "answer": -1, "code": "rule1() = knock_down(fortress_of(parrot), starfish) => offer_job_position(parrot, oscar)\nrule2() = offer_job_position(parrot, oscar) => not steal_points(oscar, 5, kudu)\nrule3() = has(oscar, card_with(color_starting_with(\"o\"))) => not burn(warehouse_of(hippopotamus))\nrule4() = first_letter_of(name(oscar)) == first_letter_of(name(canary)) => knock_down(fortress_of(lion), oscar)\nrule5() = learn_basics_of_resource_management(hummingbird, grizzly_bear) => not learn_basics_of_resource_management(grizzly_bear, oscar)\nrule6() = has(puffin, something_to_sit_on) => enemy(puffin, oscar)\nrule7() = show_cards(mosquito, oscar) & not learn_elementary_resource_management(grizzly_bear, oscar) => never_roll_dice(oscar, carp)\nrule8() = has(oscar, leafy_green_vegetable) => burn(warehouse_of(hippopotamus))\nrule9() = not has(oscar, keys) => knock_down(fortress_of(lion), oscar)\nrule10(something) = roll_dice(something, carp) => not roll_dice(something, doctorfish)\nrule11() = enemy(puffin, oscar) => not roll_dice(oscar, goldfish)\nrule12(something) = knock_down(fortress_of(lion), something) => roll_dice(something, carp)\nrule13() = has(oscar, something_to_carry_apples_and_oranges) => not knock_down(fortress_of(lion), oscar)\nrule14() = has(oscar, something_to_drink) => not burn(warehouse_of(hippopotamus))\norder(rule14) > order(rule8) = True\norder(rule3) > order(rule8) = True\norder(rule4) > order(rule13) = True\norder(rule7) > order(rule12) = True\norder(rule9) > order(rule13) = True\n\nname(canary, Beauty) = True\nlearn_basics_of_resource_management(hummingbird, grizzly_bear) = True\nfriends(oscar) = 13\nhas(oscar, backpack) = True\nhas(oscar, card_with(orange_color)) = True\nhas(oscar, arugula) = True\nname(oscar, Lucy) = True\nhas(oscar, basket) = True\nnot has(oscar, keys) = True\nhas(puffin, bench) = True\nknock_down(fortress_of(parrot), starfish) = True\n\nquestion = roll_dice(oscar, doctorfish)\n"}, {"idx": 305, "response": "has(halibut, card_with(indigo_color)) == True\ncolor(card_of(halibut)) == indigo_color\ncolor(card_of(halibut)) in colors_of(flag_of(Belgium)) == rule2()\nnot sing_song(halibut, victory_song_for(canary)) == rule2()\nsing_song(halibut, victory_song_for(canary)) == False\nsteal_points(canary, 5, cricket) == rule3()\nsteal_points(canary, 5, cricket) == True\nnot respect(cricket, cat) == rule4()\nrespect(cricket, cat) == False\nquestion = False", "answer": -1, "code": "rule1() = starts_with(color(card_of(buffalo)), \"l\") => sing_song(buffalo, victory_song_for(zander))\nrule2() = color(card_of(halibut)) in colors_of(flag_of(Belgium)) => not sing_song(halibut, victory_song_for(canary))\nrule3() = not sing_song(halibut, victory_song_for(canary)) => steal_points(canary, 5, cricket)\nrule4() = respects(something, cheetah) => not respect(cricket, cat)\nrule5() = sing_song(buffalo, victory_song_for(zander)) => give(zander, magnifier, cricket)\nrule6(something) = steal_points(something, 5, penguin) & not burn(warehouse_of(sheep)) => not sing_song(something, victory_song_for(zander))\nrule7() = belief(steal_points(canary, 5, cricket) & give(zander, magnifier, cricket)) => respect(cricket, cat)\nrule8() = created_time_machine(buffalo) => sing_song(buffalo, victory_song_for(zander))\norder(rule1) > order(rule6) = True\norder(rule4) > order(rule7) = True\norder(rule8) > order(rule6) = True\n\nhas(buffalo, card_with(orange_color)) = True\ninvented_time_machine(buffalo) = True\nsteal_points(buffalo, 5, penguin) = True\nsing_song(catfish, victory_song_for(swordfish)) = True\nhas(halibut, card_with(indigo_color)) = True\n\nquestion = respect(cricket, cat)\n"}, {"idx": 306, "response": "name(jellyfish, Pashmak) == True\nname(elephant, Peddi) == True\nfirst_letter_of(name(jellyfish)) == first_letter_of(name(elephant)) == True\nraise_flag_of_peace(jellyfish, hare) = rule1()\nraise_flag_of_peace(jellyfish, hare) == True\nraise_flag_of_peace(jellyfish, hare) == True\noffer_job_position(jellyfish, pig) = rule3()\noffer_job_position(jellyfish, pig) == True\noffer_job_position(jellyfish, pig) == True\neat_food(jellyfish, amberjack) = rule2(jellyfish)\neat_food(jellyfish, amberjack) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(jellyfish)) == first_letter_of(name(elephant)) => raise_flag_of_peace(jellyfish, hare)\nrule2(something) = offer_job_position(something, pig) => eat_food(something, amberjack)\nrule3(something) = raise_flag_of_peace(something, hare) => offer_job_position(something, pig)\nrule4() = friends(jellyfish) < 8 => raise_flag_of_peace(jellyfish, hare)\n\nname(elephant, Peddi) = True\nfriends(jellyfish) = 15\nname(jellyfish, Pashmak) = True\n\nquestion = eat_food(jellyfish, amberjack)\n"}, {"idx": 307, "response": "needs_support(snail, dog) == True\nshow_cards(dog, penguin) = rule2()\nshow_cards(dog, penguin) == True\nshow_cards(dog, penguin) == True\nproceed(lion, spot_right_after(spot_of(eel))) = rule3()\nproceed(lion, spot_right_after(spot_of(eel))) == not eat_food(lion, penguin)\nproceed(lion, spot_right_after(spot_of(eel))) == not eat_food(lion, penguin)\nquestion = not eat_food(lion, penguin)", "answer": 0, "code": "rule1() = show_cards(something, penguin) => eat_food(phoenix, penguin)\nrule2() = needs_support(snail, dog) => show_cards(dog, penguin)\nrule3() = eat_food(something, penguin) => not proceed(lion, spot_right_after(spot_of(eel)))\n\nreduce_work_hours(dog) = True\nneeds_support(snail, dog) = True\n\nquestion = proceed(lion, spot_right_after(spot_of(eel)))\n"}, {"idx": 308, "response": "remove(eel, piece_of(puffin)) == True\nnot proceed(koala, spot_right_after(spot_of(rabbit))) = rule3()\nproceed(koala, spot_right_after(spot_of(rabbit))) == False\nquestion = False", "answer": -1, "code": "rule1() = not burn(warehouse_of(donkey), something) => proceed(something, spot_right_after(spot_of(rabbit)))\nrule2() = knows(defense_plan_of(whale), something) => not burn(warehouse_of(donkey), koala)\nrule3() = remove(something, piece_of(elephant)) => not proceed(koala, spot_right_after(spot_of(rabbit)))\nrule4(something) = owes_money_to(something, puffin) => knows(defensive_plans_of(whale), something)\norder(rule3) > order(rule1) = True\n\nremove(eel, piece_of(puffin)) = True\n\nquestion = proceed(koala, spot_right_after(spot_of(rabbit)))\n"}, {"idx": 309, "response": "knock_down_fortress(lion, zander) = rule1()\nnot give_magnifier(crocodile, lion) = rule2()\nknock_down_fortress(lion, zander) == True\nnot give_magnifier(crocodile, lion) == False\nsing_song(lion, victory_song_for(wolverine)) = rule3()\nsing_song(lion, victory_song_for(wolverine)) == True\nquestion = True", "answer": 1, "code": "rule1() = not give_magnifier(crocodile, lion) => knock_down_fortress(lion, zander)\nrule2() = attack_green_fields(something, moose) => not give_magnifier(crocodile, lion)\nrule3(something) = knock_down_fortress(something, zander) => sing_song(something, victory_song_for(wolverine))\nrule4() = not steal_points(something, 5, tiger) => not knock_down_fortress(something, zander)\norder(rule4) > order(rule1) = True\n\nattack_green_fields(phoenix, moose) = True\nnot steal_points(panda_bear, 5, crocodile) = True\n\nquestion = sing_song(lion, victory_song_for(wolverine))\n"}, {"idx": 310, "response": "recently_read_high_quality_paper(blobfish) == True\nnot knock_down(blobfish, fortress_of(baboon)) = rule14(blobfish)\nknock_down(blobfish, fortress_of(baboon)) == False\nquestion = False", "answer": -1, "code": "rule1() = eat_food(zander, food_of(blobfish)) => sing_song(blobfish, victory_song_for(sun_bear))\nrule2() = published_high_quality_paper(blobfish) => not prepare_armor(blobfish, dog)\nrule3() = holds_same_points_as(something, bat) => eat_food(zander, food_of(blobfish))\nrule4() = has(snail, leafy_green_vegetable) => attack_green_fields(snail, green_fields_of(blobfish))\nrule5() = eat_food(something, food_of(carp)) => sing_song(dog, victory_song_for(blobfish))\nrule6(something) = roll_dice(something, swordfish) => sing_song(something, victory_song_for(sea_bass))\nrule7() = sing_song(dog, victory_song_for(blobfish)) => needs_support(blobfish, zander)\nrule8(something) = sing_song(something, victory_song_for(sea_bass)) => respects(something, kiwi)\nrule9() = not raise_flag_of_peace(oscar, zander) => not eat_food(zander, food_of(blobfish))\nrule10() = not attack_green_fields(snail, green_fields_of(blobfish)) & not wink(meerkat, blobfish) => never_sing_song(blobfish, victory_song_for(sun_bear))\nrule11() = has(blobfish, card_with(rainbow_color)) => prepare_armor(blobfish, dog)\nrule12() = prepare_armor(something, dog) => not needs_support(something, zander)\nrule13() = not knock_down(something, fortress_of(pig)) => not attack_green_fields(something, green_fields_of(blobfish))\nrule14(something) = respects(something, kiwi) => not knock_down(something, fortress_of(baboon))\nrule15() = has(blobfish, drink) => not prepare_armor(blobfish, dog)\norder(rule10) > order(rule1) = True\norder(rule13) > order(rule4) = True\norder(rule15) > order(rule11) = True\norder(rule2) > order(rule11) = True\norder(rule7) > order(rule12) = True\norder(rule9) > order(rule3) = True\n\nhas(blobfish, card_with(yellow_color)) = True\nrecently_read_high_quality_paper(blobfish) = True\nroll_dice(blobfish, swordfish) = True\nholds_same_points_as(polar_bear, bat) = True\neat_food(puffin, food_of(carp)) = True\nfriends(snail) == 1 & not friends(snail) == 8 & has(snail, kale) & not knock_down(snail, fortress_of(pig)) = True\n\nquestion = knock_down(blobfish, fortress_of(baboon))\n"}, {"idx": 311, "response": "remove(bat, piece_of(black_bear)) == True\nproceed(black_bear, spot_right_after(spot_of(moose))) = rule1()\nproceed(black_bear, spot_right_after(spot_of(moose))) == True\nproceed(black_bear, spot_right_after(spot_of(moose))) == True\nsteal_points(catfish, turtle, 5) == True\nnot proceed(moose, spot_right_after(spot_of(puffin))) = rule2()\nproceed(moose, spot_right_after(spot_of(puffin))) == False\nproceed(moose, spot_right_after(spot_of(puffin))) == False\nwinks_at(buffalo, hare) = rule3()\nnot enemy(buffalo, baboon) == rule3()\nenemy(buffalo, baboon) == False\nenemy(buffalo, baboon) == False\nsing_song(buffalo, victory_song_for(starfish)) = rule4()\nenemy(buffalo, cockroach) == rule4()\nenemy(buffalo, cockroach) == True\nroll_dice(grasshopper, hippopotamus) = rule5()\nnot enemy(hippopotamus, cockroach) == rule5()\nenemy(hippopotamus, cockroach) == False\nenemy(hippopotamus, cockroach) == False\nneeds_support(kudu, moose) = rule6()\npoints(moose) == points(squirrel) == True\npoints(moose) == points(squirrel) == True\nnot proceed(moose, spot_right_after(spot_of(puffin))) == True\nremove(moose, piece_of(caterpillar)) = rule7(moose)\nremove(moose, piece_of(caterpillar)) == True\nremove(moose, piece_of(caterpillar)) == True\nwinks_at(moose, oscar) = rule8(moose)\nsteal_points(moose, pig, 5) == rule8(moose)\nsteal_points(moose, pig, 5) == True\nsteal_points(moose, pig, 5) == True\npoints(moose) == points(kangaroo) = rule9(moose)\npoints(moose) == points(kangaroo) == True\npoints(moose) == points(kangaroo) == True\nneeds_support(moose, moose) == rule9(moose)\nneeds_support(moose, moose) == True\nneeds_support(moose, moose) == True\nenemy(moose, baboon) = rule10()\nenemy(moose, baboon) == True\nenemy(moose, baboon) == True\ngive(moose, magnifier, elephant) = rule13(moose)\ngive(moose, magnifier, elephant) == True\ngive(moose, magnifier, elephant) == True\nquestion = True", "answer": 1, "code": "rule1() = remove(bat, piece_of(black_bear)) => proceed(black_bear, spot_right_after(spot_of(moose)))\nrule2() = steal_points(something, turtle, 5) => not proceed(moose, spot_right_after(spot_of(puffin)))\nrule3(something) = winks_at(something, hare) => not enemy(something, baboon)\nrule4(something) = sing_song(something, victory_song_for(starfish)) => enemy(something, cockroach)\nrule5() = roll_dice(grasshopper, hippopotamus) => not enemy(hippopotamus, cockroach)\nrule6() = needs_support(kudu, moose) => points(moose) == points(squirrel)\nrule7(something) = not proceed(something, spot_right_after(spot_of(puffin))) => remove(something, piece_of(caterpillar))\nrule8(something) = winks_at(something, oscar) => steal_points(something, pig, 5)\nrule9(something) = points(something) == points(kangaroo) => needs_support(something, moose)\nrule10() = steal_points(something, pig, 5) => enemy(moose, baboon)\nrule11() = fan_of(tiger, Chris_Ronaldo) => offer_job_position(tiger, moose)\nrule12() = enemy(something, cockroach) => not remove(moose, piece_of(caterpillar))\nrule13(something) = proceed(something, spot_right_after(spot_of(baboon))) & points(something) == points(squirrel) => give(something, magnifier, elephant)\norder(rule3) > order(rule10) = True\norder(rule5) > order(rule4) = True\norder(rule7) > order(rule12) = True\n\nremove(bat, piece_of(black_bear)) = True\nhas(buffalo, knapsack) = True\nwinks_at(buffalo, oscar) = True\nsteal_points(catfish, turtle, 5) = True\nsing_song(hippopotamus, victory_song_for(starfish)) = True\npoints(kudu) == points(kangaroo) = True\nname(kudu, Peddi) = True\nowes_money_to(phoenix, black_bear) = True\nname(tiger, Pablo) = True\nsupports(tiger, Chris_Ronaldo) = True\n\nquestion = give(moose, magnifier, elephant)\n"}, {"idx": 312, "response": "has(spider, card_with(color_starting_with(\"h\"))) == True\nnot give_magnifier(spider, goldfish) = rule1()\ngive_magnifier(spider, goldfish) == False\nknows_defensive_plans(spider, kiwi) = rule3(spider)\nknows_defensive_plans(spider, kiwi) == True\nknows_defensive_plans(spider, kiwi) == True\nquestion = True", "answer": 1, "code": "rule1() = has(spider, card_with(color_starting_with(\"h\"))) => not give_magnifier(spider, goldfish)\nrule2() = has(tiger, sharp_object) => not owes_money_to(tiger, spider)\nrule3(something) = raise_flag_of_peace(something, bat) => knows_defensive_plans(something, kiwi)\nrule4() = belief(canary_rolls_dice_for(spider)) & not owes_money_to(tiger, spider) => raise_flag_of_peace(spider, bat)\nrule5() = first_letter_of(name(spider)) == first_letter_of(name(eel)) => give_magnifier(spider, goldfish)\nrule6(something) = not learn_elementary_resource_management_from(something, ferret) => roll_dice_for(something, spider)\nrule7() = friends(tiger) > 10 => not owes_money_to(tiger, spider)\norder(rule5) > order(rule1) = True\n\nname(eel, Lucy) = True\nhas(spider, card_with(white_color)) = True\nname(spider, Luna) = True\nlost_keys(spider) = True\nfriends(tiger) = 1\nhas(tiger, blade) = True\nlearn_elementary_resource_management_from(canary, ferret) = False\n\nquestion = knows_defensive_plans(spider, kiwi)\n"}, {"idx": 313, "response": "knows(defensive_plans_of(aardvark), carp) == False\nnot equal_points(moose, salmon) = rule4()\nequal_points(moose, salmon) == False\nquestion = False", "answer": -1, "code": "rule1() = offer_job_position(something, buffalo) => not prepare_armor(carp, kiwi)\nrule2(something) = not knows(defensive_plans_of(aardvark), something) => prepare_armor(something, kiwi)\nrule3() = prepare_armor(something, kiwi) => eat_food(donkey, food_of(polar_bear))\nrule4() = eat_food(something, food_of(polar_bear)) => not equal_points(moose, salmon)\norder(rule1) > order(rule2) = True\n\nknows(defensive_plans_of(aardvark), carp) = False\n\nquestion = equal_points(moose, salmon)\n"}, {"idx": 314, "response": "name(snail, Luna) == True\nname(cat, Tarzan) == True\nfirst_letter_of(name(snail)) == first_letter_of(name(cat)) = rule2()\nfirst_letter_of(name(snail)) == first_letter_of(name(cat)) == True\nwink(snail, amberjack) = rule2()\nwink(snail, amberjack) == True\nwink(snail, amberjack) == True\ncreated_time_machine(snail) = rule3()\ncreated_time_machine(snail) == False\nhas(snail, connect_to_internet(device)) = rule4()\nhas(snail, connect_to_internet(device)) == True\nwink(snail, amberjack) == True\nknows_defensive_plans(amberjack, cat) = rule1()\nknows_defensive_plans(amberjack, cat) == True\nowes_money_to(panther, carp) = rule8()\nowes_money_to(panther, carp) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(snail, amberjack) & raise_flag(kudu, peace_flag, amberjack) => knows_defensive_plans(amberjack, cat)\nrule2() = first_letter_of(name(snail)) == first_letter_of(name(cat)) => wink(snail, amberjack)\nrule3() = created_time_machine(snail) => not wink(snail, amberjack)\nrule4() = has(snail, connect_to_internet(device)) => wink(snail, amberjack)\nrule5() = friends(kudu) > 6 => raise_flag(kudu, peace_flag, amberjack)\nrule6(something) = respects(something, raven) & rolls_dice(something, canary) => not raise_flag(something, peace_flag, amberjack)\nrule7() = has(kudu, leafy_green_vegetable) => raise_flag(kudu, peace_flag, amberjack)\nrule8() = knows_defensive_plans(something, cat) => owes_money_to(panther, carp)\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule3) = True\norder(rule6) > order(rule5) = True\norder(rule6) > order(rule7) = True\n\nname(cat, Tarzan) = True\nhas(kudu, cello) = True\nrespects(kudu, raven) = True\nfriends(kudu) = 7\nhas(snail, trumpet) = True\nname(snail, Luna) = True\n\nquestion = owes_money_to(panther, carp)\n"}, {"idx": 315, "response": "has(squid, card_with(red_color)) == True\nwink(squid, phoenix) = rule2()\nwink(squid, phoenix) == True\nwink(squid, phoenix) == True\nnot steal(puffin, 5_points, cat) = rule4()\nsteal(puffin, 5_points, cat) == False\nbelief(squid_rolls_dice_for(cat)) = rule5()\nbelief(squid_rolls_dice_for(cat)) == True\nraise_flag_of_peace(cat, catfish) = rule5()\nraise_flag_of_peace(cat, catfish) == True\nraise_flag_of_peace(cat, catfish) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(something, phoenix) => roll_dice(something, cat)\nrule2() = has(squid, card_with(color_in_flag_of_france)) => wink(squid, phoenix)\nrule3() = has(parrot, card_with(color_in_rainbow_colors)) => points(parrot) == points(lion)\nrule4() = exists(animal) such that points(animal) == points(lion) => not steal(puffin, 5_points, cat)\nrule5() = belief(squid_rolls_dice_for(cat)) & not steal(puffin, 5_points, cat) => raise_flag_of_peace(cat, catfish)\nrule6() = first_letter_of(name(parrot)) == first_letter_of(name(kiwi)) => points(parrot) == points(lion)\n\nname(kiwi, Cinnamon) = True\nhas(parrot, card_with(black_color)) = True\nname(parrot, Charlie) = True\nhas(squid, card_with(red_color)) = True\n\nquestion = raise_flag_of_peace(cat, catfish)\n"}, {"idx": 316, "response": "not learn_basics_of_resource_management(cockroach, swordfish) == True\nnot holds_same_number_of_points(swordfish, tiger) = rule3()\nholds_same_number_of_points(swordfish, tiger) == False\nnot respect(swordfish, cat) = rule2()\nrespect(swordfish, cat) == False\nprepare_armor(cat, panther) = rule5()\nprepare_armor(cat, panther) == True\nprepare_armor(cat, panther) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(gecko) < 7 => raise_flag_of_peace(gecko, sheep)\nrule2() = not respect(swordfish, cat) => not prepare_armor(cat, panther)\nrule3() = not learn_basics_of_resource_management(cockroach, swordfish) => not holds_same_number_of_points(swordfish, tiger)\nrule4() = has_access_to_abundance_of_food(rabbit) => wink(rabbit, baboon)\nrule5() = remove(gecko, piece_of(cat)) & steal_points(koala, 5, cat) => prepare_armor(cat, panther)\nrule6() = has(koala, musical_instrument) => not offer_job_position(koala, baboon)\nrule7() = not needs_support(penguin, koala) => offer_job_position(koala, baboon)\nrule8(something) = not holds_same_number_of_points(something, tiger) => not respect(something, cat)\nrule9(something) = offer_job_position(something, baboon) => steal_points(something, 5, cat)\nrule10() = has(koala, connect_to_internet(device)) => not offer_job_position(koala, baboon)\nrule11() = wink(something, baboon) => not steal_points(koala, 5, cat)\nrule12() = raise_flag_of_peace(something, sheep) => remove(something, piece_of(cat))\nrule13() = has(rabbit, carry_apples_and_oranges(something)) => wink(rabbit, baboon)\nrule14() = raise_flag_of_peace(something, koala) => holds_same_number_of_points(swordfish, tiger)\nrule15() = has(gecko, card_with(color)) and color in rainbow_colors => raise_flag_of_peace(gecko, sheep)\norder(rule10) > order(rule7) = True\norder(rule2) > order(rule5) = True\norder(rule3) > order(rule14) = True\norder(rule6) > order(rule7) = True\norder(rule9) > order(rule11) = True\n\nfriends(gecko) = 13\nhas(gecko, card_with(blue_color)) = True\nraise_flag_of_peace(hare, koala) = True\nhas(koala, cappuccino) = True\nhas(rabbit, plastic_bag) = True\nstruggles_to_find_food(rabbit) = True\nnot learn_basics_of_resource_management(cockroach, swordfish) = True\nnot needs_support(penguin, koala) = True\n\nquestion = prepare_armor(cat, panther)\n"}, {"idx": 317, "response": "not attack(green_fields_of(cheetah), kangaroo) = True\nattack(green_fields_of(cheetah), kangaroo) == False\nnot attack(green_fields_of(viperfish), zander) = True\nattack(green_fields_of(viperfish), zander) == False\neat_food(halibut, food_of(swordfish)) = rule4()\neat_food(halibut, food_of(swordfish)) == True\neat_food(halibut, food_of(swordfish)) == True\nrespects(swordfish, grizzly_bear) = rule3()\nrespects(swordfish, grizzly_bear) == True\nrespects(swordfish, grizzly_bear) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not show_all_cards(something, cheetah) => wink(something, halibut)\nrule2(something) = prepare_armor(something, leopard) & not knock_down(fortress_of(hippopotamus), something) => not eat_food(something, swordfish)\nrule3() = eat_food(halibut, food_of(swordfish)) => respects(swordfish, grizzly_bear)\nrule4() = wink(kangaroo, halibut) => eat_food(halibut, food_of(swordfish))\nrule5(something) = attack(green_fields_of(viperfish), something) => knock_down(fortress_of(hippopotamus), halibut)\norder(rule2) > order(rule4) = True\n\nnot attack(green_fields_of(cheetah), kangaroo) = True\nnot attack(green_fields_of(viperfish), zander) = True\n\nquestion = respects(swordfish, grizzly_bear)\n"}, {"idx": 318, "response": "has(buffalo, kale) == True\nnot give_magnifying_glass(buffalo, hummingbird) = rule6()\ngive_magnifying_glass(buffalo, hummingbird) == False\nreduce_work_hours(buffalo) == True\nremove(buffalo, piece_of(panda_bear)) = rule7()\nremove(buffalo, piece_of(panda_bear)) == True\nremove(buffalo, piece_of(panda_bear)) == True\nattack_green_fields(buffalo, sun_bear) = rule4()\nattack_green_fields(buffalo, sun_bear) == True\nattack_green_fields(buffalo, sun_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = owes_money_to(lobster, buffalo) & not burn(warehouse_of(buffalo), snail) => never_proceed(buffalo, spot_right_after(spot_of(canary)))\nrule2(something) = remove(something, piece_of(panda_bear)) & not give_magnifying_glass(something, hummingbird) => knock_down(fortress_of(catfish), something)\nrule3(something) = knock_down(fortress_of(catfish), something) => not attack_green_fields(something, sun_bear)\nrule4(something) = not proceed(something, spot_right_after(spot_of(canary))) => attack_green_fields(something, sun_bear)\nrule5() = friends(lobster) > 5 => owes_money_to(lobster, buffalo)\nrule6() = has(buffalo, leafy_green_vegetable) => not give_magnifying_glass(buffalo, hummingbird)\nrule7() = reduce_work_hours(buffalo) => remove(buffalo, piece_of(panda_bear))\nrule8(something) = owes_money_to(something, squirrel) => not burn(warehouse_of(buffalo), snail)\norder(rule4) > order(rule3) = True\n\nhas(buffalo, kale) = True\nreduce_work_hours(buffalo) = True\nfriends(lobster) = 14\nowes_money_to(mosquito, squirrel) = True\n\nquestion = attack_green_fields(buffalo, sun_bear)\n"}, {"idx": 319, "response": "has(donkey, card_with(color_in_flag_of_Netherlands)) == True\neat_food(donkey, food_of(gecko)) = rule2()\neat_food(donkey, food_of(gecko)) == True\neat_food(donkey, food_of(gecko)) == True\nenemy(gecko, salmon) = rule4()\nenemy(gecko, salmon) == True\nenemy(gecko, salmon) == True\nnot respect(salmon, koala) = rule5()\nrespect(salmon, koala) == False\nrespect(salmon, koala) == False\nquestion = False", "answer": -1, "code": "rule1() = offer_job_position(something, viperfish) => learn_elementary_resource_management(salmon, eagle)\nrule2() = has(donkey, card_with(color_in_flag_of_Netherlands)) => eat_food(donkey, food_of(gecko))\nrule3() = prepare_armor(cheetah, polar_bear) => not owe_money_to(polar_bear, salmon)\nrule4() = eat_food(donkey, food_of(gecko)) => enemy(gecko, salmon)\nrule5() = enemy(gecko, salmon) => not respect(salmon, koala)\nrule6() = has(caterpillar, drink) => not offer_job_position(caterpillar, viperfish)\nrule7(something) = learn_elementary_resource_management(something, eagle) & knows(defensive_plans_of(squid), something) => respect(something, koala)\nrule8() = has(caterpillar, drink) => not offer_job_position(caterpillar, viperfish)\nrule9() = friends(caterpillar) > 16 => offer_job_position(caterpillar, viperfish)\nrule10() = created_time_machine(caterpillar) => offer_job_position(caterpillar, viperfish)\nrule11() = offer_job_position(something, sheep) => owes_money_to(something, salmon)\nrule12() = took_bike(donkey, store) => eat_food(donkey, food_of(gecko))\nrule13() = roll_dice(cheetah, salmon) & owe_money_to(polar_bear, salmon) => not learn_basics_of_resource_management(salmon, eagle)\norder(rule13) > order(rule1) = True\norder(rule3) > order(rule11) = True\norder(rule6) > order(rule10) = True\norder(rule6) > order(rule9) = True\norder(rule7) > order(rule5) = True\norder(rule8) > order(rule10) = True\norder(rule8) > order(rule9) = True\n\nfriends(caterpillar) = 8\nhas(caterpillar, kale) = True\ncreated_time_machine(caterpillar) = True\nhas(donkey, cappuccino) = True\nhas(donkey, card_with(yellow_color)) = True\nstole_bike(donkey, store) = True\noffer_job_position(polar_bear, sheep) = True\n\nquestion = respect(salmon, koala)\n"}, {"idx": 320, "response": "name(squirrel, Meadow) == True\nname(elephant, Milo) == True\nfirst_letter_of(name(squirrel)) == first_letter_of(name(elephant)) == True\noffer_job(squirrel, cat) = rule1()\noffer_job(squirrel, cat) == True\noffer_job(squirrel, cat) == True\nnot eat_food_of(cat, canary) = rule7()\neat_food_of(cat, canary) == False\nnot actual_enemy(baboon, canary) = rule5()\nactual_enemy(baboon, canary) == False\nneeds_support(canary, cheetah) = rule5()\nneeds_support(canary, cheetah) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(squirrel)) == first_letter_of(name(elephant)) => offer_job(squirrel, cat)\nrule2(something) = not attack(green_fields_of(pig), something) => respects(something, caterpillar)\nrule3(something) = respects(something, caterpillar) & rolls_dice_for(puffin) => actual_enemy(something, canary)\nrule4() = rolls_dice_for(buffalo) => rolls_dice_for(baboon, puffin)\nrule5() = not eat_food_of(cat, canary) & not actual_enemy(baboon, canary) => needs_support(canary, cheetah)\nrule6(something) = attack(green_fields_of(hippopotamus), something) => eat_food_of(something, canary)\nrule7() = offer_job(squirrel, cat) => not eat_food_of(cat, canary)\norder(rule6) > order(rule7) = True\n\nname(elephant, Milo) = True\nknock_down(lobster, fortress_of(kangaroo)) = True\nrolls_dice_for(phoenix, buffalo) = True\nname(squirrel, Meadow) = True\nnot attack(green_fields_of(pig), baboon) = True\n\nquestion = needs_support(canary, cheetah)\n"}, {"idx": 321, "response": "has(mosquito, card_with(red_color)) == True\ncolor(card_with(red_color)) == red\ncolor(card_with(red_color)) in rainbow_colors == True\nremove(mosquito, piece_of(grizzly_bear)) = rule1()\nremove(mosquito, piece_of(grizzly_bear)) == True\nfriends(mosquito) = 13\nfriends(mosquito) < 9 == False\nsing_song(black_bear, victory_song_for(hummingbird)) = rule8(black_bear)\nsing_song(black_bear, victory_song_for(hummingbird)) == True\nsing_song(black_bear, victory_song_for(hummingbird)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(mosquito, card) and color(card) in rainbow_colors => remove(mosquito, piece_of(grizzly_bear))\nrule2(something) = not learn(something, elementary_resource_management_from(spider)) => not remove(something, piece_of(grizzly_bear))\nrule3(something) = proceed(something, spot_right_after(spot_of(panther))) => respects(something, whale)\nrule4() = remove(something, piece_of(grizzly_bear)) => roll_dice(black_bear, spider)\nrule5() = enemy(panda_bear, ferret) => not sing_song(ferret, victory_song_for(black_bear))\nrule6() = not sing_song(ferret, victory_song_for(black_bear)) & respects(turtle, black_bear) => not roll_dice(black_bear, spider)\nrule7() = friends(mosquito) < 9 => remove(mosquito, piece_of(grizzly_bear))\nrule8(something) = roll_dice(something, spider) & not needs_support(something, moose) => sing_song(something, victory_song_for(hummingbird))\nrule9() = respects(something, whale) => not needs_support(black_bear, moose)\norder(rule2) > order(rule1) = True\norder(rule2) > order(rule7) = True\norder(rule6) > order(rule4) = True\n\nfriends(mosquito) = 13\nhas(mosquito, card_with(red_color)) = True\nenemy(panda_bear, ferret) = True\nproceed(snail, spot_right_after(spot_of(panther))) = True\n\nquestion = sing_song(black_bear, victory_song_for(hummingbird))\n"}, {"idx": 322, "response": "friends(grizzly_bear) = 5 + 3 = 8\nproceed(grizzly_bear, spot_right_after(spot_of(bat))) = True\nnot proceed(grizzly_bear, spot_right_after(spot_of(raven))) = rule2()\nproceed(grizzly_bear, spot_right_after(spot_of(raven))) = False\neat_food(whale, food_of(raven)) = rule1()\neat_food(whale, food_of(raven)) = True\nnot raise_flag_of_peace(wolverine, squirrel) = rule5()\nraise_flag_of_peace(wolverine, squirrel) = False\nquestion = False", "answer": -1, "code": "rule1() = friends(whale) > 9 => eat_food(whale, food_of(raven))\nrule2() = friends(grizzly_bear) > 4 => not proceed(grizzly_bear, spot_right_after(spot_of(raven)))\nrule3() = not proceed(grizzly_bear, spot_right_after(spot_of(raven))) & eat_food(whale, food_of(raven)) => sing_song(raven, victory_song_for(pig))\nrule4() = sing_song(caterpillar, victory_song_for(wolverine)) => raise_flag_of_peace(wolverine, squirrel)\nrule5() = sing_song(something, victory_song_for(pig)) => not raise_flag_of_peace(wolverine, squirrel)\nrule6() = has(grizzly_bear, carry_apples_and_oranges) => not proceed(grizzly_bear, spot_right_after(spot_of(raven)))\norder(rule4) > order(rule5) = True\n\nfriends(grizzly_bear) = 5 + 3\nproceed(grizzly_bear, spot_right_after(spot_of(bat))) = True\nrespects(grizzly_bear, sheep) = True\nhas(grizzly_bear, arugula) = True\nfriends(whale) = 11\n\nquestion = raise_flag_of_peace(wolverine, squirrel)\n"}, {"idx": 323, "response": "question = unknown", "answer": 0, "code": "rule1(something) = show_cards(something, phoenix) & roll_dice(something, sun_bear) => points(something) == points(viperfish)\nrule2() = roll_dice(something, caterpillar) => knows(defensive_plans_of(zander), something)\nrule3() = purchased(oscar, time_machine) => raise_flag_of_peace(oscar, raven)\nrule4() = raise_flag_of_peace(oscar, raven) => not roll_dice(raven, caterpillar)\nrule5() = has(raven, sharp_object) => attack_green_fields(raven, snail)\nrule6() = has(oscar, carry_apples_and_oranges) => raise_flag_of_peace(oscar, raven)\nrule7() = attack_green_fields(blobfish, green_fields_of(goldfish)) => attack_green_fields(goldfish, green_fields_of(turtle))\nrule8() = not sing_song(hippopotamus, victory_song_for(raven)) & points(cricket) == points(raven) => not knows(defensive_plans_of(zander), raven)\nrule9() = points(something) == points(viperfish) => not sing_song(something, victory_song_for(raven))\nrule10() = first_letter_of(name(raven)) == first_letter_of(name(octopus)) => attack_green_fields(raven, green_fields_of(snail))\norder(rule8) > order(rule2) = True\n\nattack_green_fields(blobfish, green_fields_of(goldfish)) = True\nroll_dice(hippopotamus, sun_bear) = True\nshow_cards(hippopotamus, phoenix) = True\nname(octopus, Tessa) = True\nhas(oscar, backpack) = True\nstruggles_to_find_food(oscar) = True\nhas(raven, tablet) = True\nname(raven, Tango) = True\n\nquestion = knows(defensive_plans_of(zander), raven)\n"}, {"idx": 324, "response": "name(penguin, Luna) == True\nfirst_letter_of(name(kudu)) == first_letter_of(name(penguin)) == True\nsteal_points(kudu, 5, meerkat) = rule3()\nsteal_points(kudu, 5, meerkat) == True\nsing_song(kudu, victory_song_for(salmon)) = rule5()\nsing_song(kudu, victory_song_for(salmon)) == True\nenemy(kudu, whale) = rule2()\nenemy(kudu, whale) == True\nknows(defensive_plans_of(cockroach), jellyfish) = rule4()\nknows(defensive_plans_of(cockroach), jellyfish) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(kudu) < 3 => steal_points(kudu, 5, meerkat)\nrule2() = steal_points(something, 5, meerkat) & sing_song(something, victory_song_for(salmon)) => enemy(something, whale)\nrule3() = first_letter_of(name(kudu)) == first_letter_of(name(penguin)) => steal_points(kudu, 5, meerkat)\nrule4() = enemy(something, whale) => knows(defensive_plans_of(cockroach), jellyfish)\nrule5() = created_time_machine(kudu) => sing_song(kudu, victory_song_for(salmon))\nrule6(something) = points(something) == points(viperfish) => not knows(defensive_plans_of(cockroach), something)\nrule7() = has(kudu, card_with(color_in_flag_of_belgium)) => sing_song(kudu, victory_song_for(salmon))\norder(rule6) > order(rule4) = True\n\nfriends(kudu) = 7\nname(kudu, Lola) = True\nhas(kudu, card_with(green_color)) = True\ncreated_time_machine(kudu) = True\nname(penguin, Luna) = True\n\nquestion = knows(defensive_plans_of(cockroach), jellyfish)\n"}, {"idx": 325, "response": "friends(tiger) = 10\nfriends(tiger) < 12 = True\npoints(tiger) == points(catfish) = rule8()\npoints(tiger) == points(catfish) == True\nnot learn_elementary_resource_management(catfish, caterpillar) = rule12()\nlearn_elementary_resource_management(catfish, caterpillar) == False\nnot attack_green_fields(caterpillar, kiwi) = rule6()\nattack_green_fields(caterpillar, kiwi) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(sheep) > 14 => attack_green_fields(sheep, baboon)\nrule2(something) = not eat_food(something, turtle) => proceed(something, spot_right_after(spot_of(catfish)))\nrule3() = attack_green_fields(something, panther) => not attack_green_fields(sheep, baboon)\nrule4(something) = eat_food(something, snail) => not learn_elementary_resource_management(something, catfish)\nrule5() = has(sheep, leafy_green_vegetable) => attack_green_fields(sheep, baboon)\nrule6() = not learn_basics_of_resource_management(catfish, caterpillar) => not attack_green_fields(caterpillar, kiwi)\nrule7(something) = roll_dice(something, whale) => not proceed(something, spot_right_after(spot_of(catfish)))\nrule8() = friends(tiger) < 12 => points(tiger) == points(catfish)\nrule9() = not attack_green_fields(sheep, baboon) => knows(defensive_plans_of(aardvark), baboon)\nrule10() = learn_elementary_resource_management(mosquito, catfish) => learn_basics_of_resource_management(catfish, caterpillar)\nrule11(something) = not sing_song(something, victory_song_for(canary)) & not respects(something, tilapia) => learn_basics_of_resource_management(something, catfish)\nrule12() = not proceed(buffalo, spot_right_after(spot_of(catfish))) & points(tiger) == points(catfish) => not learn_elementary_resource_management(catfish, caterpillar)\norder(rule1) > order(rule3) = True\norder(rule12) > order(rule10) = True\norder(rule2) > order(rule7) = True\norder(rule4) > order(rule11) = True\norder(rule5) > order(rule3) = True\n\nroll_dice(buffalo, whale) = True\nattack_green_fields(donkey, panther) = True\nfriends(sheep) = 6\nfriends(tiger) = 10\nrespects(mosquito, tilapia) = False\nsing_song(mosquito, victory_song_for(canary)) = False\n\nquestion = attack_green_fields(caterpillar, kiwi)\n"}, {"idx": 326, "response": "has(bat, card_with(violet_color)) == True\nrespects(bat, amberjack) = rule5()\nrespects(bat, amberjack) == True\nrespects(bat, amberjack) == True\nsing_song(bat, victory_song_for(raven)) = rule14(bat)\nsing_song(bat, victory_song_for(raven)) == True\nsing_song(bat, victory_song_for(raven)) == True\nraise_flag_of_peace(caterpillar, raven) = rule12(caterpillar)\nraise_flag_of_peace(caterpillar, raven) == True\nraise_flag_of_peace(caterpillar, raven) == True\nholds_equal_points(raven, hare) = rule13()\nholds_equal_points(raven, hare) == True\nholds_equal_points(raven, hare) == True\nquestion = True", "answer": 1, "code": "rule1() = roll_dice(pig, _) => not sing_song(bat, victory_song_for(raven))\nrule2() = not has_keys(donkey) => eat_food(donkey, food_of(cockroach))\nrule3() = eat_food(donkey, food_of(cockroach)) => attack_green_fields(cockroach, green_fields_of(raven))\nrule4() = proceed(_, spot_right_after(spot_of(tilapia))) => not needs_support(caterpillar, hummingbird)\nrule5() = has(bat, card_with(primary_color)) => respects(bat, amberjack)\nrule6() = proceed(crocodile, spot_right_after(spot_of(cockroach))) => not attack_green_fields(cockroach, green_fields_of(raven))\nrule7() = has(donkey, card_with(color_in_flag_of_france)) => eat_food(donkey, food_of(cockroach))\nrule8() = first_letter_of(name(bat)) == first_letter_of(name(snail)) => respects(bat, amberjack)\nrule9() = needs_support(_, mosquito) => give_magnifying_glass(crocodile, cockroach)\nrule10() = not attack_green_fields(cockroach, green_fields_of(raven)) => not holds_equal_points(raven, hare)\nrule11() = first_letter_of(name(caterpillar)) == first_letter_of(name(phoenix)) => needs_support(caterpillar, hummingbird)\nrule12(something) = not needs_support(something, hummingbird) => raise_flag_of_peace(something, raven)\nrule13() = sing_song(bat, victory_song_for(raven)) & raise_flag_of_peace(caterpillar, raven) => holds_equal_points(raven, hare)\nrule14(something) = respects(something, amberjack) => sing_song(something, victory_song_for(raven))\nrule15() = friends(caterpillar) > 1 => needs_support(caterpillar, hummingbird)\norder(rule1) > order(rule14) = True\norder(rule13) > order(rule10) = True\norder(rule4) > order(rule11) = True\norder(rule4) > order(rule15) = True\norder(rule6) > order(rule3) = True\n\nhas(bat, card_with(violet_color)) = True\nname(bat, Bella) = True\nname(caterpillar, Lucy) = True\nhas(donkey, card_with(white_color)) = True\nhas_keys(donkey) = True\nproceed(jellyfish, spot_right_after(spot_of(tilapia))) = True\nneeds_support(panda_bear, mosquito) = True\nname(phoenix, Pablo) = True\nname(snail, Tango) = True\n\nquestion = holds_equal_points(raven, hare)\n"}, {"idx": 327, "response": "has(meerkat, card_with(indigo_color)) == True\nshow_cards(meerkat, polar_bear) = rule4()\nshow_cards(meerkat, polar_bear) == True\nshow_cards(meerkat, polar_bear) == True\nnot steal_points(polar_bear, 5, jellyfish) = rule8()\nsteal_points(polar_bear, 5, jellyfish) == False\nsteal_points(polar_bear, 5, jellyfish) == False\nnot steal_points(polar_bear, 5, leopard) = rule11()\nsteal_points(polar_bear, 5, leopard) == False\nsteal_points(polar_bear, 5, leopard) == False\nquestion = False", "answer": -1, "code": "rule1() = prepare_armor(something, sheep) => burn(warehouse_of(polar_bear))\nrule2() = first_letter_of(name(meerkat)) == first_letter_of(name(baboon)) => show_cards(meerkat, polar_bear)\nrule3() = increase_work_hours(elephant) => prepare_armor(elephant, sheep)\nrule4() = has(meerkat, card_with(color_starting_with(\"n\"))) => show_cards(meerkat, polar_bear)\nrule5() = burn(warehouse_of(polar_bear), elephant) & points(starfish) == points(polar_bear) => steal_points(polar_bear, 5, leopard)\nrule6() = not knows(defensive_plans_of(starfish), puffin) => points(starfish) == points(polar_bear)\nrule7() = has(elephant, card_with(color_in(flag_of_Netherlands))) => prepare_armor(elephant, sheep)\nrule8() = show_cards(meerkat, polar_bear) => not steal_points(polar_bear, 5, jellyfish)\nrule9() = first_letter_of(name(puffin)) == first_letter_of(name(buffalo)) => not knows(defense_plan_of(starfish), puffin)\nrule10() = has(puffin, device_to_connect_to_internet) => not knows(defense_plan_of(starfish), puffin)\nrule11() = not steal_points(something, 5, jellyfish) => not steal_points(something, 5, leopard)\norder(rule5) > order(rule11) = True\n\nname(baboon, Pashmak) = True\nname(buffalo, Mojo) = True\nhas(elephant, card_with(white_color)) = True\nreduce_work_hours(elephant) = True\nhas(meerkat, card_with(indigo_color)) = True\nname(meerkat, Pablo) = True\nhas(puffin, banana_strawberry_smoothie) = True\nname(puffin, Max) = True\n\nquestion = steal_points(polar_bear, 5, leopard)\n"}, {"idx": 328, "response": "not prepare_armor(tilapia, zander) = True\nprepare_armor(tilapia, zander) == False\norder(rule6) > order(rule7) = True\nwinks_at(halibut, puffin) = rule6()\nwinks_at(halibut, puffin) == True\nwinks_at(halibut, puffin) == True\nnot prepare_armor(halibut, goldfish) = rule7()\nprepare_armor(halibut, goldfish) == False\nprepare_armor(halibut, goldfish) == False\nquestion = False", "answer": -1, "code": "rule1() = not prepare_armor(tilapia, zander) => remove(zander, piece_of(rabbit))\nrule2(something) = needs_support(something, phoenix) => not knock_down(fortress_of(black_bear))\nrule3() = has(lion, connect_to_internet(device)) => learn_basics_of_resource_management(lion, goldfish)\nrule4() = learn(lion, elementary_resource_management_from(goldfish)) & prepare_armor(halibut, goldfish) => needs_support(goldfish, phoenix)\nrule5(something) = remove(something, piece_of(rabbit)) => enemy(something, goldfish)\nrule6(something) = winks_at(something, puffin) => prepare_armor(something, goldfish)\nrule7(something) = rolls_dice_for(something, aardvark) & respects(something, buffalo) => not prepare_armor(something, goldfish)\nrule8() = needs_support(something, squirrel) => not needs_support(goldfish, phoenix)\norder(rule6) > order(rule7) = True\norder(rule8) > order(rule4) = True\n\nrespects(halibut, buffalo) = True\nrolls_dice_for(halibut, aardvark) = True\nwinks_at(halibut, puffin) = True\nhas(lion, computer) = True\nsing_song(lion, victory_song_for(eagle)) = False\nnot prepare_armor(tilapia, zander) = True\n\nquestion = knock_down(fortress_of(black_bear))\n"}, {"idx": 329, "response": "name(lion, Pashmak) == True\nname(kangaroo, Milo) == True\nfirst_letter_of(name(lion)) == first_letter_of(name(kangaroo)) == True\nneeds_support(lion, buffalo) = rule11()\nneeds_support(lion, buffalo) == True\nnot sing_song(lion, victory_song_for(koala)) = rule8()\nsing_song(lion, victory_song_for(koala)) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(octopus)) == first_letter_of(name(hippopotamus)) => knock_down(fortress_of(hare))\nrule2() = has(octopus, carry_apples_and_oranges) => not knock_down(fortress_of(hare))\nrule3() = raise_flag_of_peace(something, kudu) => proceed(lion, spot_right_after(spot_of(oscar)))\nrule4(something) = proceed(something, spot_right_after(spot_of(oscar))) & needs_support(something, buffalo) => not eat_food_of(something, penguin)\nrule5(something) = not eat_food_of(something, penguin) => sing_song(something, victory_song_for(koala))\nrule6() = knock_down(fortress_of(hare)) => roll_dice(raven, lion)\nrule7() = has(octopus, card_with(color_starting_with(\"n\"))) => knock_down(fortress_of(hare))\nrule8() = not attack(catfish, green_fields_owned_by(lion)) & roll_dice(raven, lion) => not sing_song(lion, victory_song_for(koala))\nrule9(something) = not steal_points(something, 5, meerkat) => eat_food_of(something, penguin)\nrule10() = friends(lion) > 11 => needs_support(lion, buffalo)\nrule11() = first_letter_of(name(lion)) == first_letter_of(name(kangaroo)) => needs_support(lion, buffalo)\norder(rule2) > order(rule1) = True\norder(rule2) > order(rule7) = True\norder(rule5) > order(rule8) = True\norder(rule9) > order(rule4) = True\n\nraise_flag_of_peace(gecko, kudu) = True\nname(hippopotamus, Beauty) = True\nname(kangaroo, Milo) = True\nfriends(lion) = 7\nname(lion, Pashmak) = True\nhas(octopus, card_with(indigo_color)) = True\nname(octopus, Bella) = True\n\nquestion = sing_song(lion, victory_song_for(koala))\n"}, {"idx": 330, "response": "not equal_points(oscar, halibut) = rule1()\nequal_points(oscar, halibut) == False\nnot give(parrot, magnifying_glass, halibut) = rule1()\ngive(parrot, magnifying_glass, halibut) == False\ngive(halibut, magnifier, gecko) = rule1()\ngive(halibut, magnifier, gecko) == True\nquestion = True", "answer": 1, "code": "rule1() = not equal_points(oscar, halibut) & not give(parrot, magnifying_glass, halibut) => give(halibut, magnifier, gecko)\nrule2() = eat_food(something, squirrel) => not actual_enemy(something, cow)\nrule3() = created(oscar, time_machine) => not knows(defense_plan_of(baboon), oscar)\nrule4() = not needs_support(something, buffalo) => not raise_flag_of_peace(something, leopard)\nrule5() = enemy(animal, cow) => not give(parrot, magnifier, halibut)\nrule6() = owes_money_to(cockroach, oscar) => raise_flag_of_peace(oscar, leopard)\nrule7(something) = not knows(defense_plan_of(baboon), something) & not raise_flag_of_peace(something, leopard) => not equal_points(something, halibut)\nrule8() = show_cards(animal, cow) => actual_enemy(animal, cow)\norder(rule2) > order(rule8) = True\norder(rule4) > order(rule6) = True\n\nowes_money_to(cockroach, oscar) = True\nwinks_at(grizzly_bear, oscar) = True\ncreated(oscar, time_machine) = True\nshow_cards(panda_bear, cow) = True\nnot needs_support(oscar, buffalo) = True\n\nquestion = give(halibut, magnifier, gecko)\n"}, {"idx": 331, "response": "give_magnifying_glass(something, cockroach) = rule10()\ngive_magnifying_glass(something, cockroach) == True\nwink(something, carp) = rule10()\nwink(something, carp) == True\nwink(ferret, carp) == True\nnot prepare_armor(ferret, salmon) = rule6()\nprepare_armor(ferret, salmon) == False\nquestion = False", "answer": -1, "code": "rule1() = give_magnifying_glass(something, phoenix) => not give_magnifying_glass(something, ferret)\nrule2() = first_letter_of(name(baboon)) == first_letter_of(name(donkey)) => not sing_song(baboon, victory_song_for(ferret))\nrule3() = color_starts_with(card(squid), \"h\") => not actual_enemy(squid, tilapia)\nrule4() = not give_magnifier(lobster, ferret) & sing_song(baboon, victory_song_for(ferret)) => add_conclusion(\"the ferret is not going to wink at the carp\")\nrule5() = enemy(something, tilapia) => not actual_enemy(jellyfish, ferret)\nrule6() = not actual_enemy(jellyfish, ferret) => not prepare_armor(ferret, salmon)\nrule7() = has_high_salary(squid) => not actual_enemy(squid, tilapia)\nrule8() = eats_food(something, cat) => actual_enemy(squid, tilapia)\nrule9() = owes_money_to(something, oscar) => sing_song(something, victory_song_for(ferret))\nrule10() = give_magnifying_glass(something, cockroach) => wink(something, carp)\norder(rule10) > order(rule4) = True\norder(rule2) > order(rule9) = True\norder(rule3) > order(rule8) = True\norder(rule7) > order(rule8) = True\n\nname(baboon, Lola) = True\nowes_money_to(baboon, oscar) = True\neats_food(catfish, cat) = True\ngive_magnifier(lobster, phoenix) = True\ncard(squid, white_color) = True\n\nquestion = prepare_armor(ferret, salmon)\n"}, {"idx": 332, "response": "learn_basics_of_resource_management(koala, eagle) = rule3()\nlearn_basics_of_resource_management(koala, eagle) == True\noffer_job_position(eagle, octopus) = rule3()\noffer_job_position(eagle, octopus) == True\noffer_job_position(eagle, octopus) == True\nenemy(eagle, bat) = rule1(eagle)\nenemy(eagle, bat) == True\nenemy(eagle, bat) == True\nquestion = True", "answer": 1, "code": "rule1(something) = offer_job_position(something, octopus) => enemy(something, bat)\nrule2() = has(koala, connect_to_internet(device)) => not learn_elementary_resource_management(koala, eagle)\nrule3() = learn_basics_of_resource_management(koala, eagle) => offer_job_position(eagle, octopus)\nrule4() = has(koala, card_with(color_starting_with(\"o\"))) => not learn_elementary_resource_management(koala, eagle)\nrule5() = proceed(sheep, spot_right_after(spot_of(koala))) & attack(leopard, green_fields_of(koala)) => learn_basics_of_resource_management(koala, eagle)\norder(rule2) > order(rule5) = True\norder(rule4) > order(rule5) = True\n\nhas(koala, spinach) = True\nattack(leopard, green_fields_of(koala)) = True\nnot proceed(sheep, spot_right_after(spot_of(koala))) = True\n\nquestion = enemy(eagle, bat)\n"}, {"idx": 333, "response": "name(hummingbird, Luna) == True\nname(puffin, Meadow) == True\nfirst_letter_of(name(puffin)) == first_letter_of(name(hummingbird)) == True\nattack_green_fields(puffin, owner(grizzly_bear)) = rule1()\nattack_green_fields(puffin, owner(grizzly_bear)) == True\nattack_green_fields(puffin, owner(grizzly_bear)) == True\nreduce_work_hours(puffin) == True\nknows_defensive_plans(puffin, cockroach) = rule4()\nknows_defensive_plans(puffin, cockroach) == True\nknows_defensive_plans(puffin, cockroach) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(puffin)) == first_letter_of(name(hummingbird)) => attack_green_fields(puffin, owner(grizzly_bear))\nrule2() = attacks_green_fields(something, owner(grizzly_bear)) => sing_song(something, victory_song_for(zander))\nrule3() = sings_victory_song(something, zander) => knows_defensive_plans(something, cockroach)\nrule4() = reduce_work_hours(puffin) => attack_green_fields(puffin, owner(grizzly_bear))\n\nname(hummingbird, Luna) = True\nname(puffin, Meadow) = True\nreduce_work_hours(puffin) = True\n\nquestion = knows_defensive_plans(puffin, cockroach)\n"}, {"idx": 334, "response": "has(raven, card_with(yellow_color)) == True\ncolor_starts_with(raven, \"y\") == True\npoints(raven) != points(parrot) = rule6()\npoints(raven) != points(parrot) == True\npoints(raven) != points(parrot) == True\nnot show_cards(parrot, grizzly_bear) = rule2()\nshow_cards(parrot, grizzly_bear) == False\nshow_cards(parrot, grizzly_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = show_cards(parrot, grizzly_bear) => not wink(grizzly_bear, swordfish)\nrule2() = points(jellyfish) != points(parrot) => not show_cards(parrot, grizzly_bear)\nrule3() = points(raven) != points(parrot) => show_cards(parrot, grizzly_bear)\nrule4() = created_time_machine(sea_bass) => remove(sea_bass, piece_of(phoenix))\nrule5() = remove(something, piece_of(phoenix)) => roll_dice(carp, octopus)\nrule6() = color_starts_with(raven, \"y\") => points(raven) != points(parrot)\norder(rule2) > order(rule3) = True\n\nhas(raven, card_with(yellow_color)) = True\ninvented_time_machine(sea_bass) = True\n\nquestion = wink(grizzly_bear, swordfish)\n"}, {"idx": 335, "response": "has(tilapia, sharp_object) = rule1()\noffer_job_position(tilapia, cat) == True\noffer_job_position(tilapia, cat) == True\nnot knock_down_fortress(cat, fortress_of(gecko)) = rule3()\nknock_down_fortress(cat, fortress_of(gecko)) == False\nknock_down_fortress(cat, fortress_of(gecko)) == False\nquestion = False", "answer": -1, "code": "rule1() = has(tilapia, sharp_object) => offer_job_position(tilapia, cat)\nrule2() = not has(tilapia, keys) => not offer_job_position(tilapia, cat)\nrule3() = actual_enemy(canary, cat) => not knock_down_fortress(cat, fortress_of(gecko))\nrule4() = took_bike(eel, store) => not burn_warehouse(eel, warehouse_of(cat))\nrule5() = attacks_green_fields(something, owner(ferret)) => knock_down_fortress(something, fortress_of(gecko))\nrule6() = not prepare_armor(hummingbird, puffin) => learn_basics_of_resource_management(puffin, squid)\nrule7() = learns_basics_of_resource_management(something, squid) => burn_warehouse(cat, warehouse_of(ferret))\nrule8() = has(tilapia, card_with(color_starting_with(\"i\"))) => offer_job_position(tilapia, cat)\nrule9() = not burn_warehouse(eel, warehouse_of(cat)) & offer_job_position(tilapia, cat) => not burn_warehouse(cat, warehouse_of(ferret))\nrule10() = has(tilapia, something_to_carry_apples_and_oranges) => not offer_job_position(tilapia, cat)\norder(rule10) > order(rule1) = True\norder(rule10) > order(rule8) = True\norder(rule2) > order(rule1) = True\norder(rule2) > order(rule8) = True\norder(rule3) > order(rule5) = True\norder(rule7) > order(rule9) = True\n\nhas(eel, card_with(green_color)) = True\nname(eel, Cinnamon) = True\nstole_bike(eel, store) = True\nname(rabbit, Teddy) = True\nhas(tilapia, card_with(indigo_color)) = True\nhas(tilapia, harmonica) = True\nholding(tilapia, keys) = True\nnot prepare_armor(hummingbird, puffin) = True\n\nquestion = knock_down_fortress(cat, fortress_of(gecko))\n"}, {"idx": 336, "response": "friends(starfish) = 1 easy_going_friend + 8 not_easy_going_friends\nknows(defensive_plans_of(blobfish), starfish) = rule3()\nknows(defensive_plans_of(blobfish), starfish) == True\nknows(defensive_plans_of(blobfish), starfish) == True\nsing_song(sun_bear, victory_song_for(cow)) = rule4(sun_bear)\nsing_song(sun_bear, victory_song_for(cow)) == True\nsing_song(sun_bear, victory_song_for(cow)) == True\nquestion = True", "answer": 1, "code": "rule1() = knows(defensive_plans_of(blobfish), something) => sing_song(sun_bear, victory_song_for(salmon))\nrule2() = eats_food(mosquito, food_of(sun_bear)) => remove(sun_bear, piece_of(viperfish))\nrule3() = friends(starfish) < 12 => knows(defensive_plans_of(blobfish), starfish)\nrule4(something) = sing_song(something, victory_song_for(salmon)) & not roll_dice(something, tilapia) => sing_song(something, victory_song_for(cow))\nrule5() = remove(something, piece_of(viperfish)) => not roll_dice(something, tilapia)\nrule6() = has(starfish, card_with(color_starting_with(\"b\"))) => not knows(defensive_plans_of(blobfish), starfish)\nrule7() = not steal_points(kiwi, 5, sun_bear) & proceed(amberjack, spot_right_after(spot_of(sun_bear))) => roll_dice(sun_bear, tilapia)\nrule8() = friends(kiwi) > 7 => not steal_points(kiwi, 5, sun_bear)\nrule9() = first_letter_of(name(starfish)) == first_letter_of(name(oscar)) => not knows(defensive_plans_of(blobfish), starfish)\norder(rule6) > order(rule3) = True\norder(rule7) > order(rule5) = True\norder(rule9) > order(rule3) = True\n\nfriends(kiwi) = 9\neats_food(mosquito, food_of(sun_bear)) = True\nname(oscar, Max) = True\nfriends(starfish) = 1 easy_going_friend + 8 not_easy_going_friends\nname(starfish, Lily) = True\n\nquestion = sing_song(sun_bear, victory_song_for(cow))\n"}, {"idx": 337, "response": "not wink(squid, grasshopper) = rule3()\nwink(squid, grasshopper) = False\nquestion = False", "answer": -1, "code": "rule1() = prepare_armor(something, kudu) => not owes_money_to(lobster, black_bear)\nrule2() = eat_food(something, rabbit) => not enemy(cow, squid)\nrule3() = proceed(zander, spot_right_after(spot_of(squid))) => not wink(squid, grasshopper)\nrule4() = first_letter_of(name(hare)) == first_letter_of(name(cat)) => eat_food(hare, rabbit)\nrule5() = roll_dice(octopus, jellyfish) => steal_points(jellyfish, 5, black_bear)\nrule6() = friends(hare) < 12 => not eat_food(hare, rabbit)\nrule7() = not owes_money_to(lobster, black_bear) => not knows(defensive_plans_of(squid), black_bear)\nrule8(something) = not roll_dice(something, moose) => proceed(something, spot_right_after(spot_of(koala)))\nrule9() = needs_support(sun_bear, zander) => raise_flag_of_peace(zander, whale)\nrule10(something) = not wink(something, catfish) & raise_flag_of_peace(something, whale) => not proceed(something, spot_right_after(spot_of(squid)))\nrule11() = burn(warehouse_of(zander), oscar) => not proceed(zander, spot_right_after(spot_of(koala)))\nrule12(something) = burn(warehouse_of(raven), something) => owes_money_to(something, black_bear)\nrule13(something) = proceed(something, spot_right_after(spot_of(koala))) => proceed(something, spot_right_after(spot_of(squid)))\norder(rule10) > order(rule13) = True\norder(rule12) > order(rule1) = True\norder(rule6) > order(rule4) = True\norder(rule8) > order(rule11) = True\n\nname(cat, Chickpea) = True\nprepare_armor(dog, kudu) = True\nname(hare, Cinnamon) = True\nroll_dice(octopus, jellyfish) = True\nburn(warehouse_of(zander), oscar) = True\nneeds_support(sun_bear, zander) = True\nnot roll_dice(zander, moose) = True\n\nquestion = wink(squid, grasshopper)\n"}, {"idx": 338, "response": "name(tiger, Lola) == True\nname(panther, Lola) == False\nfirst_letter_of(name(tiger)) == first_letter_of(name(pig)) == True\nowes_money_to(tiger, wolverine) = rule1()\nowes_money_to(tiger, wolverine) == True\nnot offer_job(tiger, viperfish) = rule2(tiger)\nnot offer_job(tiger, viperfish) == True\nnot owes_money_to(tiger, wolverine) == False\nnot attack(green_fields_of(lion)) = rule2()\nnot attack(green_fields_of(lion)) == False\nsing_song(tiger, victory_song_for(lion)) = rule3(tiger)\nsing_song(tiger, victory_song_for(lion)) == False\nenemy(tiger, panther) = rule3()\nenemy(tiger, panther) == False\nraise_flag_of_peace(tiger, lobster) = rule4()\nraise_flag_of_peace(tiger, lobster) == False\nattack(green_fields_of(lion), tiger) = rule4()\nattack(green_fields_of(lion), tiger) == False\ntook_bike(tiger, store) = rule5()\ntook_bike(tiger, store) == False\nowes_money_to(tiger, wolverine) == True\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(tiger)) == first_letter_of(name(pig)) => owes_money_to(tiger, wolverine)\nrule2(something) = not owes_money_to(something, wolverine) & not offer_job(something, viperfish) => not attack(green_fields_of(lion))\nrule3(something) = sing_song(something, victory_song_for(lion)) => enemy(something, panther)\nrule4() = raise_flag_of_peace(something, lobster) => attack(green_fields_of(lion), tiger)\nrule5() = took_bike(tiger, store) => owes_money_to(tiger, wolverine)\nrule6() = knock_down(fortress_of(crocodile), zander) => raise_flag_of_peace(crocodile, lobster)\norder(rule2) > order(rule4) = True\n\nname(pig, Lola) = True\nname(tiger, Lola) = True\nlost_keys(tiger) = True\nknock_down(fortress_of(crocodile), zander) = True\n\nquestion = enemy(tiger, panther)\n"}, {"idx": 339, "response": "has_high_salary(buffalo) == True\nrespects(buffalo, goldfish) = rule1()\nrespects(buffalo, goldfish) == True\nrespects(buffalo, goldfish) == True\nnot raise_flag_of_peace(buffalo, cockroach) = rule2()\nraise_flag_of_peace(buffalo, cockroach) == False\nraise_flag_of_peace(buffalo, cockroach) == False\nproceed(kudu, spot_right_after(spot_of(cockroach))) = rule3()\nproceed(kudu, spot_right_after(spot_of(cockroach))) == True\nproceed(kudu, spot_right_after(spot_of(cockroach))) == True\nnot roll_dice(cockroach, turtle) = rule3()\nroll_dice(cockroach, turtle) == False\nroll_dice(cockroach, turtle) == False\nquestion = False", "answer": -1, "code": "rule1() = has_high_salary(buffalo) => respects(buffalo, goldfish)\nrule2() = respects(something, goldfish) => not raise_flag_of_peace(something, cockroach)\nrule3() = proceed(kudu, spot_right_after(spot_of(cockroach))) => not roll_dice(cockroach, turtle)\nrule4() = not raise_flag_of_peace(buffalo, cockroach) => roll_dice(cockroach, turtle)\nrule5() = friends(buffalo) < 5 => respects(buffalo, goldfish)\norder(rule3) > order(rule4) = True\n\nhas_high_salary(buffalo) = True\nfriends(buffalo) = 15\n\nquestion = roll_dice(cockroach, turtle)\n"}, {"idx": 340, "response": "belief(octopus, crocodile_eats_food_of(octopus)) == True\nbelief(octopus, hummingbird_eats_food_of(octopus)) == True\nadd_conclusion(\"the octopus prepares armor for the spider\") = rule1()\nadd_conclusion(\"the octopus prepares armor for the spider\") == True\nnot prepare_armor(octopus, spider) = rule2()\nprepare_armor(octopus, spider) == False\nknock_down(spider, fortress_of(mosquito)) = rule2()\nknock_down(spider, fortress_of(mosquito)) == True\nknock_down(spider, fortress_of(mosquito)) == True\nrespects(halibut, octopus) = rule3()\nrespects(halibut, octopus) == True\nrespects(halibut, octopus) == True\nnot prepare_armor(octopus, spider) == False\nproceed(grasshopper, spot_right_after(spot_of(spider))) = rule4()\nproceed(grasshopper, spot_right_after(spot_of(spider))) == True\nproceed(grasshopper, spot_right_after(spot_of(spider))) == True\nshow_cards(spider, raven) = rule4()\nshow_cards(spider, raven) == True\nshow_cards(spider, raven) == True\nknock_down(something, fortress_of(mosquito)) = rule5(something)\nknock_down(spider, fortress_of(mosquito)) == True\nknock_down(spider, fortress_of(mosquito)) == True\nshow_cards(something, raven) = rule5(something)\nshow_cards(spider, raven) == True\nshow_cards(spider, raven) == True\nnot eat_food_of(spider, koala) = rule5(spider)\neat_food_of(spider, koala) == False\nnot proceed(squid, spot_right_after(spot_of(grasshopper))) = rule6()\nproceed(grasshopper, spot_right_after(spot_of(spider))) == True\nproceed(grasshopper, spot_right_after(spot_of(spider))) == True\noffer_job_to(aardvark, something) = rule7()\nnot knock_down(spider, fortress_of(mosquito)) == True\nnot knock_down(spider, fortress_of(mosquito)) == True\nquestion = False", "answer": -1, "code": "rule1() = belief(octopus, hummingbird_eats_food_of(octopus)) & belief(octopus, crocodile_eats_food_of(octopus)) => add_conclusion(\"the octopus prepares armor for the spider\")\nrule2() = not prepare_armor(octopus, spider) => knock_down(spider, fortress_of(mosquito))\nrule3() = respects(halibut, octopus) => not prepare_armor(octopus, spider)\nrule4() = proceed(grasshopper, spot_right_after(spot_of(spider))) => show_cards(spider, raven)\nrule5(something) = knock_down(something, fortress_of(mosquito)) & show_cards(something, raven) => not eat_food_of(something, koala)\nrule6() = not proceed(squid, spot_right_after(spot_of(grasshopper))) => proceed(grasshopper, spot_right_after(spot_of(spider)))\nrule7() = offer_job_to(aardvark, something) => not knock_down(spider, fortress_of(mosquito))\norder(rule1) > order(rule3) = True\norder(rule7) > order(rule2) = True\n\nbelief(octopus, crocodile_eats_food_of(octopus)) = True\nrespects(halibut, octopus) = True\nnot proceed(squid, spot_right_after(spot_of(grasshopper))) = True\n\nquestion = eat_food_of(spider, koala)\n"}, {"idx": 341, "response": "name(carp) = \"Carp\"\nname(bat) = \"Bat\"\nfirst_letter_of(name(carp)) == first_letter_of(name(bat)) = True\nnot sing_song(carp, victory_song_for(grizzly_bear)) = rule1()\nsing_song(carp, victory_song_for(grizzly_bear)) == False\nraise_flag_of_peace(grizzly_bear, cat) = rule3()\nraise_flag_of_peace(grizzly_bear, cat) == True\nowes_money_to(cat, gecko) = rule3()\nowes_money_to(cat, gecko) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(carp)) == first_letter_of(name(bat)) => not sing_song(carp, victory_song_for(grizzly_bear))\nrule2(something) = not raise_flag_of_peace(something, grizzly_bear) => not sing_song(something, victory_song_for(grizzly_bear))\nrule3() = raise_flag_of_peace(grizzly_bear, cat) => owes_money_to(cat, gecko)\nrule4() = needs_support(something, kiwi) => raise_flag_of_peace(grizzly_bear, cat)\nrule5(something) = not needs_support(something, lobster) => sing_song(something, victory_song_for(grizzly_bear))\nrule6() = killed(kudu, mayor) => not respects(kudu, wolverine)\nrule7() = proceed(something, spot_right_after(spot_of(wolverine))) => knows(defense_plan_of(sun_bear), cat)\nrule8() = has(kudu, leafy_green_vegetable) => respects(kudu, wolverine)\nrule9() = remove(black_bear, piece_of(mosquito)) => attack_green_fields(mosquito, owner_is(black_bear))\nrule10() = attack_green_fields(something, owner_is(pig)) => sing_song(sea_bass, victory_song_for(grizzly_bear))\nrule11(something) = burn(warehouse_of(moose), something) => needs_support(something, kiwi)\nrule12() = enemy(something, black_bear) => not attack_green_fields(mosquito, owner_is(black_bear))\nrule13() = friends(kudu) > 12 => not respects(kudu, wolverine)\nrule14() = knock_down(something, fortress_of(black_bear)) => remove(cat, piece_of(snail))\nrule15() = has(carp, card_with(primary_color)) => not sing_song(carp, victory_song_for(grizzly_bear))\norder(rule1) > order(rule5) = True\norder(rule12) > order(rule9) = True\norder(rule13) > order(rule8) = True\norder(rule15) > order(rule5) = True\norder(rule2) > order(rule10) = True\norder(rule6) > order(rule8) = True\n\nwinks(amberjack, moose) = True\nname(bat, Charlie) = True\nremove(black_bear, piece_of(mosquito)) = True\nhas(carp, card_with(orange_color)) = True\nneeds_support(carp, lobster) = True\nenemy(dog, black_bear) = True\nfriends(kudu) = 2\nhas(kudu, spinach) = True\nattack_green_fields(phoenix, owner_is(pig)) = True\nraise_flag_of_peace(sea_bass, grizzly_bear) = True\n\nquestion = owes_money_to(cat, gecko)\n"}, {"idx": 342, "response": "has(amberjack, knapsack) == True\nhas(amberjack, carry_apples_and_oranges) == True\nprepare_armor(amberjack, koala) = rule10()\nprepare_armor(amberjack, koala) == True\nprepare_armor(amberjack, koala) == True\nneeds_support(amberjack, parrot) == True\nshow_cards(parrot, meerkat) = rule9()\nshow_cards(parrot, meerkat) == True\nshow_cards(parrot, meerkat) == True\nquestion = True", "answer": 1, "code": "rule1() = burn(warehouse_of(sun_bear), something) & give(something, magnifying_glass, bat) => not roll_dice(parrot)\nrule2() = offer_job_position(raven, amberjack) => not prepare_armor(amberjack, koala)\nrule3(something) = prepare_armor(something, koala) => needs_support(something, parrot)\nrule4() = has(lobster, drink) => not burn(warehouse_of(sun_bear))\nrule5() = has(canary, carry_apples_and_oranges) => show_cards(canary, lobster)\nrule6() = friends(tilapia) < 8 => actual_enemy(tilapia, lobster)\nrule7() = first_letter_of(name(lobster)) == first_letter_of(name(penguin)) => burn(warehouse_of(sun_bear))\nrule8() = points(blobfish) == points(tilapia) => not enemy(tilapia, lobster)\nrule9() = needs_support(amberjack, parrot) => show_cards(parrot, meerkat)\nrule10() = has(amberjack, carry_apples_and_oranges) => prepare_armor(amberjack, koala)\nrule11() = has(tilapia, card_with(color_starting_with(\"i\"))) => actual_enemy(tilapia, lobster)\nrule12() = actual_enemy(tilapia, lobster) & show_cards(canary, lobster) => roll_dice(lobster, parrot)\norder(rule1) > order(rule12) = True\norder(rule11) > order(rule8) = True\norder(rule2) > order(rule10) = True\norder(rule6) > order(rule8) = True\norder(rule7) > order(rule4) = True\n\nhas(amberjack, knapsack) = True\npoints(blobfish) == points(tilapia) = True\nhas(canary, knapsack) = True\nhas(lobster, hot_chocolate) = True\nname(lobster, Peddi) = True\nname(penguin, Pablo) = True\nhas(tilapia, card_with(violet_color)) = True\nfriends(tilapia) = 2\n\nquestion = show_cards(parrot, meerkat)\n"}, {"idx": 343, "response": "attack(sun_bear, green_fields_of(zander)) == True\nlearn_basics_of_resource_management(sun_bear, sheep) == True\nwink(sun_bear, parrot) = rule2(sun_bear)\nwink(sun_bear, parrot) == True\nwink(sun_bear, parrot) == True\nsteal_points(sun_bear, 5, catfish) = rule1()\nsteal_points(sun_bear, 5, catfish) == True\nsteal_points(sun_bear, 5, catfish) == True\nnot burn(warehouse_of(cat), sun_bear) = rule3()\nburn(warehouse_of(cat), sun_bear) == False\nburn(warehouse_of(cat), sun_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = wink(something, parrot) => steal_points(something, 5, catfish)\nrule2(something) = attack(something, green_fields_of(zander)) & learn_basics_of_resource_management(something, sheep) => wink(something, parrot)\nrule3() = steal_points(something, 5, catfish) => not burn(warehouse_of(cat), something)\n\nattack(sun_bear, green_fields_of(zander)) = True\nhas(sun_bear, trumpet) = True\nlearn_basics_of_resource_management(sun_bear, sheep) = True\nrecently_read(sun_bear, high_quality_paper) = True\n\nquestion = burn(warehouse_of(cat), sun_bear)\n"}, {"idx": 344, "response": "name(sun_bear, Teddy) == True\nfirst_letter_of(name(sun_bear)) == 'T'\nfirst_letter_of(name(moose)) == 'T'\nfirst_letter_of(name(sun_bear)) == first_letter_of(name(moose)) == True\nnot show_cards(sun_bear, kangaroo) = rule10()\nnot show_cards(sun_bear, kangaroo) == True\nnot show_cards(sun_bear, kangaroo) == True\nquestion = False", "answer": -1, "code": "rule1() = has(crocodile, card_with(primary_color)) => proceed(crocodile, spot_right_after(spot_of(sun_bear)))\nrule2() = learn(snail, elementary_resource_management_from(sun_bear)) => not need_support(sun_bear, baboon)\nrule3() = proceed(crocodile, spot_right_after(spot_of(sun_bear))) & sing_song(cow, victory_song_for(sun_bear)) => not wink(sun_bear, phoenix)\nrule4() = first_letter_of(name(crocodile)) == first_letter_of(name(halibut)) => not proceed(crocodile, spot_right_after(spot_of(sun_bear)))\nrule5() = raise_flag_of_peace(something, dog) => wink(sun_bear, phoenix)\nrule6() = friends(crocodile) < 1 => proceed(crocodile, spot_right_after(spot_of(sun_bear)))\nrule7() = has(crocodile, musical_instrument) => not proceed(crocodile, spot_right_after(spot_of(sun_bear)))\nrule8(something) = offer_job(something, jellyfish) & not wink(something, phoenix) => need_support(something, baboon)\nrule9(something) = not show_cards(something, kangaroo) => attack(something, green_fields_of(jellyfish))\nrule10() = first_letter_of(name(sun_bear)) == first_letter_of(name(moose)) => not show_cards(sun_bear, kangaroo)\nrule11() = has(sun_bear, sharp_object) => not show_cards(sun_bear, kangaroo)\nrule12() = give(turtle, magnifier, cow) => sing_song(cow, victory_song_for(sun_bear))\norder(rule1) > order(rule4) = True\norder(rule1) > order(rule7) = True\norder(rule5) > order(rule3) = True\norder(rule6) > order(rule4) = True\norder(rule6) > order(rule7) = True\norder(rule8) > order(rule2) = True\n\nhas(crocodile, card_with(green_color)) = True\nfriends(crocodile, kind) = 5\nfriends(crocodile, not_kind) = 2\nname(crocodile, Tessa) = True\nname(halibut, Lily) = True\nname(moose, Tarzan) = True\nhas(sun_bear, cutter) = True\nname(sun_bear, Teddy) = True\ngive(turtle, magnifier, cow) = True\n\nquestion = need_support(sun_bear, baboon)\n"}, {"idx": 345, "response": "has(jellyfish, card_with(green_color)) == True\ncard_with(green_color) == True\nnot eat_food(jellyfish, food_of(kudu)) = rule11()\neat_food(jellyfish, food_of(kudu)) == False\nraise_flag_of_peace(jellyfish, polar_bear) = rule6()\nraise_flag_of_peace(jellyfish, polar_bear) == False\nlearn_basics_of_resource_management(polar_bear, elephant) = rule13()\nlearn_basics_of_resource_management(polar_bear, elephant) == False\nquestion = False", "answer": -1, "code": "rule1() = has(pig, leafy_green_vegetable) => learn_elementary_resource_management(pig, jellyfish)\nrule2() = has(jellyfish, connect_to_internet(device)) => eat_food(jellyfish, food_of(kudu))\nrule3() = proceed(blobfish, spot_right_after(spot_of(polar_bear))) => respects(polar_bear, kiwi)\nrule4() = first_letter_of(name(jellyfish)) == first_letter_of(name(panda_bear)) => not eat_food(jellyfish, food_of(kudu))\nrule5() = sing_song(some_animal, victory_song_for(canary)) => proceed(blobfish, spot_right_after(spot_of(polar_bear)))\nrule6() = enemy(mosquito, jellyfish) & learn_elementary_resource_management(pig, jellyfish) => raise_flag_of_peace(jellyfish, polar_bear)\nrule7(something) = learn_basics_of_resource_management(something, jellyfish) & respects(something, kiwi) => not learn_elementary_resource_management(something, elephant)\nrule8() = not respects(bat, mosquito) => enemy(mosquito, jellyfish)\nrule9() = not has(blobfish, keys) => not proceed(blobfish, spot_right_after(spot_of(polar_bear)))\nrule10() = has(blobfish, card_with(color)) & color in rainbow_colors => not proceed(blobfish, spot_right_after(spot_of(polar_bear)))\nrule11() = has(jellyfish, drink) => not eat_food(jellyfish, food_of(kudu))\nrule12() = has(jellyfish, card_with(color)) & starts_with(color, \"r\") => eat_food(jellyfish, food_of(kudu))\nrule13() = raise_flag_of_peace(jellyfish, polar_bear) => learn_basics_of_resource_management(polar_bear, elephant)\norder(rule10) > order(rule5) = True\norder(rule11) > order(rule12) = True\norder(rule11) > order(rule2) = True\norder(rule4) > order(rule12) = True\norder(rule4) > order(rule2) = True\norder(rule7) > order(rule13) = True\norder(rule9) > order(rule5) = True\n\nhas(blobfish, keys) = True\nhas(jellyfish, card_with(green_color)) = True\nhas(jellyfish, computer) = True\nname(jellyfish, Lucy) = True\nhas(jellyfish, cutter) = True\nhas(pig, spinach) = True\nsing_song(tilapia, victory_song_for(canary)) = True\nnot respects(bat, mosquito) = True\n\nquestion = learn_basics_of_resource_management(polar_bear, elephant)\n"}, {"idx": 346, "response": "has_high_salary(parrot) == True\nprepare_armor(parrot, doctorfish) = rule1()\nprepare_armor(parrot, doctorfish) == True\nprepare_armor(parrot, doctorfish) == True\nnot attack_green_fields(doctorfish, viperfish) = rule4()\nattack_green_fields(doctorfish, viperfish) == False\nattack_green_fields(doctorfish, viperfish) == False\nquestion = False", "answer": -1, "code": "rule1() = has_high_salary(parrot) => prepare_armor(parrot, doctorfish)\nrule2() = not enemy(puffin, something) => not roll_dice(sheep, meerkat)\nrule3() = not steal_points(something, hummingbird, 5) => raise_flag_of_peace(something, donkey)\nrule4() = prepare_armor(parrot, doctorfish) => not attack_green_fields(doctorfish, viperfish)\nrule5() = winks_at(something, canary) => not attack_green_fields(something, polar_bear)\nrule6() = first_letter_of(name(sheep)) == first_letter_of(name(dog)) => attack_green_fields(sheep, polar_bear)\nrule7() = owes_money_to(kiwi, sheep) => roll_dice(sheep, meerkat)\nrule8(something) = not attack_green_fields(something, polar_bear) & roll_dice(something, meerkat) => not give_magnifying_glass(something, viperfish)\nrule9() = has(sheep, connect_to_internet(device)) => attack_green_fields(sheep, polar_bear)\nrule10() = not give_magnifying_glass(sheep, viperfish) & not attack_green_fields(doctorfish, viperfish) => never_raise_flag_of_peace(viperfish, donkey)\norder(rule2) > order(rule7) = True\norder(rule3) > order(rule10) = True\norder(rule6) > order(rule5) = True\norder(rule9) > order(rule5) = True\n\nowes_money_to(kiwi, sheep) = True\nhas_high_salary(parrot) = True\nhas(sheep, cappuccino) = True\nwinks_at(sheep, canary) = True\nname(sheep, Luna) = True\n\nquestion = raise_flag_of_peace(viperfish, donkey)\n"}, {"idx": 347, "response": "has_difficulty_finding_food(koala) == True\nnot raise_flag_of_peace(koala, sun_bear) = rule2()\nraise_flag_of_peace(koala, sun_bear) == False\ngive_magnifier(sun_bear, sea_bass) = rule5()\ngive_magnifier(sun_bear, sea_bass) == False\ngive_magnifier(sun_bear, sea_bass) == False\nnot eat_food(sun_bear, food_of(wolverine)) = rule6()\neat_food(sun_bear, food_of(wolverine)) == False\neat_food(sun_bear, food_of(wolverine)) == False\nquestion = False", "answer": -1, "code": "rule1() = raise_flag_of_peace(koala, sun_bear) => eat_food(sun_bear, food_of(wolverine))\nrule2() = has_difficulty_finding_food(koala) => not raise_flag_of_peace(koala, sun_bear)\nrule3(something) = eat_food(something, food_of(wolverine)) => remove(something, piece_of(caterpillar))\nrule4() = has(koala, card_with(color_in_flag_of_Netherlands)) => not raise_flag_of_peace(koala, sun_bear)\nrule5(something) = give_magnifier(something, sea_bass) => raise_flag_of_peace(koala, sun_bear)\nrule6() = give_magnifier(doctorfish, sun_bear) => not eat_food(sun_bear, food_of(wolverine))\norder(rule2) > order(rule5) = True\norder(rule4) > order(rule5) = True\norder(rule6) > order(rule1) = True\n\nhas(koala, card_with(yellow_color)) = True\nproceed(sheep, spot_right_after(spot_of(sea_bass))) = True\n\nquestion = remove(sun_bear, piece_of(caterpillar))\n"}, {"idx": 348, "response": "enemy(grizzly_bear, kudu) == True\npoints(kudu) != points(caterpillar) = rule1()\npoints(kudu) != points(caterpillar) == True\nproceed(caterpillar, spot_right_after(spot_of(parrot))) = rule2(caterpillar)\nproceed(caterpillar, spot_right_after(spot_of(parrot))) == True\nproceed(caterpillar, spot_right_after(spot_of(parrot))) == True\noffer_job(caterpillar, tilapia) == False\nnever_offer_job(caterpillar, tilapia) = rule3()\nnever_offer_job(caterpillar, tilapia) == True\nroll_dice(cockroach, caterpillar) == True\npoints(kudu) != points(caterpillar) == True\nroll_dice(cockroach, caterpillar) == True\nrespects(cockroach, cricket) == True\nroll_dice(caterpillar, caterpillar) == True\nquestion = True", "answer": 1, "code": "rule1() = enemy(grizzly_bear, kudu) => points(kudu) != points(caterpillar)\nrule2(something) = proceed(something, spot_right_after(spot_of(polar_bear))) & not offer_job(something, tilapia) => proceed(something, spot_right_after(spot_of(parrot)))\nrule3() = roll_dice(cockroach, caterpillar) & points(kudu) != points(caterpillar) => never_offer_job(caterpillar, tilapia)\nrule4(something) = respects(something, cricket) => roll_dice(something, caterpillar)\nrule5() = attack(ferret, green_fields_of(caterpillar)) => show_cards(caterpillar, bat)\nrule6() = sing_song(black_bear, victory_song_for(caterpillar)) => proceed(caterpillar, spot_right_after(spot_of(polar_bear)))\nrule7() = learn_basics_of_resource_management(sheep, black_bear) => sing_song(black_bear, victory_song_for(caterpillar))\n\nrespects(cockroach, cricket) = True\nattack(ferret, green_fields_of(caterpillar)) = True\nenemy(grizzly_bear, kudu) = True\nenemy(kudu, raven) = True\nlearn_basics_of_resource_management(panther, caterpillar) = True\nlearn_basics_of_resource_management(sheep, black_bear) = True\n\nquestion = proceed(caterpillar, spot_right_after(spot_of(parrot)))\n"}, {"idx": 349, "response": "has(baboon, carry_apples_and_oranges) = rule1()\nhas(baboon, carry_apples_and_oranges) == False\nrespects(baboon, aardvark) = rule1()\nrespects(baboon, aardvark) == False\nattack(green_fields_of(tiger), aardvark) = rule3()\nattack(green_fields_of(tiger), aardvark) == True\neat_food_of(aardvark, black_bear) = question\neat_food_of(aardvark, black_bear) = True\n\nquestion = True", "answer": 1, "code": "rule1() = has(baboon, carry_apples_and_oranges) => respects(baboon, aardvark)\nrule2(something) = attack(green_fields_of(tiger), something) => not eat_food_of(something, black_bear)\nrule3() = eat_food_of(leopard, aardvark) & respects(baboon, aardvark) => attack(green_fields_of(tiger), aardvark)\nrule4() = friends(baboon) > 9 => respects(baboon, aardvark)\nrule5() = roll_dice(aardvark, raven) if roll_dice(polar_bear, aardvark)\nrule6() = has(grasshopper, connect_to_internet(device)) => proceed(grasshopper, spot_right_after(spot_of(kiwi)))\nrule7() = proceed(something, spot_right_after(spot_of(kiwi))) => not roll_dice(aardvark, raven)\nrule8() = friends(grasshopper) < 11 => not proceed(grasshopper, spot_right_after(spot_of(kiwi)))\nrule9() = has(leopard, leafy_green_vegetable) => eat_food_of(leopard, aardvark)\nrule10() = prepare_armor(kangaroo, polar_bear) => not roll_dice(polar_bear, aardvark)\nrule11(something) = roll_dice(something, raven) & wink_at(something, eagle) => eat_food_of(something, black_bear)\nrule12() = sing_song(something, victory_song_for(kiwi)) => roll_dice(polar_bear, aardvark)\nrule13() = not roll_dice(cat, baboon) => not respects(baboon, aardvark)\nrule14() = raise_flag_of_peace(something, squirrel) => not attack(green_fields_of(tiger), aardvark)\norder(rule10) > order(rule12) = True\norder(rule11) > order(rule2) = True\norder(rule13) > order(rule1) = True\norder(rule13) > order(rule4) = True\norder(rule14) > order(rule3) = True\norder(rule5) > order(rule7) = True\norder(rule8) > order(rule6) = True\n\nfriends(baboon) = 15\nhas(baboon, knife) = True\nhas(grasshopper, cell_phone) = True\nhas(leopard, kale) = True\nsing_song(moose, victory_song_for(kiwi)) = True\n\nquestion = eat_food_of(aardvark, black_bear)\n"}, {"idx": 350, "response": "name(cockroach, Milo) = True\npoints(cockroach) == points(cockroach) = True\nnot actual_enemy(cockroach, sea_bass) = rule3(cockroach)\nactual_enemy(cockroach, sea_bass) == False\nrespects(pig, eagle) = False\nnot actual_enemy(eagle, sea_bass) = rule1()\nactual_enemy(eagle, sea_bass) == False\nbelief(prepare_armor(rabbit, polar_bear)) & show_cards(goldfish, polar_bear) = rule2()\nadd_conclusion(polar_bear_needs_support(eagle)) == True\npolar_bear_needs_support(eagle) == True\npoints(eagle) == points(carp) = rule8(eagle)\npoints(eagle) == points(carp) == False\nnot needs_support(eagle, eagle) = rule8(eagle)\nneeds_support(eagle, eagle) == True\nnot polar_bear_needs_support(eagle) = rule7()\npolar_bear_needs_support(eagle) == False\nknock_down_fortress(eagle, hare) = rule7()\nknock_down_fortress(eagle, hare) == True\nquestion = True", "answer": 1, "code": "rule1() = not respects(pig, eagle) => not actual_enemy(eagle, sea_bass)\nrule2() = belief(prepare_armor(rabbit, polar_bear)) & show_cards(goldfish, polar_bear) => add_conclusion(polar_bear_needs_support(eagle))\nrule3(something) = points(something) == points(cockroach) & not actual_enemy(something, sea_bass) => conclude(not knock_down_fortress(something, hare))\nrule4() = has(polar_bear, card_with(primary_color)) => attack(polar_bear, green_fields_of(carp))\nrule5(something) = respects(something, salmon) => not respects(something, eagle)\nrule6() = friends(rabbit) > 2 => prepare_armor(rabbit, polar_bear)\nrule7() = not polar_bear_needs_support(eagle) => knock_down_fortress(eagle, hare)\nrule8(something) = points(something) == points(carp) => not needs_support(something, eagle)\norder(rule2) > order(rule8) = True\norder(rule3) > order(rule7) = True\n\nname(cockroach, Milo) = True\nrespects(pig, salmon) = True\nhas(polar_bear, card_with(red_color)) = True\nname(polar_bear, Meadow) = True\nfriends(rabbit, kind) = 2\nfriends(rabbit, not_kind) = 7\n\nquestion = knock_down_fortress(eagle, hare)\n"}, {"idx": 351, "response": "name(parrot, Polly) = True\nname(sun_bear, Baloo) = True\npoints(parrot) == points(sun_bear) = True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(viperfish)) == first_letter_of(name(kangaroo)) => not show_cards(viperfish, carp)\nrule2() = friends(hare) < 7 => learn_basics_of_resource_management(hare, panther)\nrule3() = owes_money_to(something, pig) => show_cards(viperfish, carp)\nrule4() = give(spider, magnifier, polar_bear) => not attack(polar_bear, green_fields_of(parrot))\nrule5(something) = show_cards(something, jellyfish) => not learn_elementary_resource_management(something, panther)\nrule6() = not needs_support(ferret, polar_bear) & not offer_job(donkey, polar_bear) => attack(polar_bear, green_fields_of(parrot))\nrule7() = has(hare, card_with(color_in_flag_of_france)) => learn_elementary_resource_management(hare, panther)\nrule8(something) = remove(something, piece_of(mosquito)) => points(something) == points(sun_bear)\nrule9(something) = not show_cards(something, carp) => burn(warehouse_of(grizzly_bear))\nrule10() = not attack(polar_bear, green_fields_of(parrot)) => remove(parrot, piece_of(mosquito))\norder(rule2) > order(rule5) = True\norder(rule3) > order(rule1) = True\norder(rule6) > order(rule4) = True\norder(rule7) > order(rule5) = True\n\nfriends(hare) = 10\nhas(hare, card_with(red_color)) = True\nshow_cards(hare, jellyfish) = True\nname(kangaroo, Tarzan) = True\ngive(spider, magnifier, polar_bear) = True\nname(viperfish, Teddy) = True\nnot offer_job(donkey, polar_bear) = True\n\nquestion = points(parrot) == points(sun_bear)\n"}, {"idx": 352, "response": "has(hippopotamus, cell_phone) == True\nconnect_to_internet(cell_phone) == True\nshow_cards(hippopotamus, cheetah) = rule7()\nshow_cards(hippopotamus, cheetah) == True\nshow_cards(hippopotamus, cheetah) == True\nnot remove(hippopotamus, piece_of(raven)) = rule4()\nremove(hippopotamus, piece_of(raven)) == False\ngive(hippopotamus, magnifier, koala) = rule1()\ngive(hippopotamus, magnifier, koala) == False\ngive(hippopotamus, magnifier, koala) == False\nquestion = False", "answer": -1, "code": "rule1() = not remove(something, piece_of(raven)) => not give(something, magnifier, koala)\nrule2() = attack(dog, green_fields_of(hippopotamus)) => remove(hippopotamus, piece_of(raven))\nrule3() = prepare_armor(something, grasshopper) => show_cards(penguin, hippopotamus)\nrule4() = show_cards(penguin, hippopotamus) => not remove(hippopotamus, piece_of(raven))\nrule5() = show_cards(something, cheetah) => not learn(something, elementary_resource_management_from(parrot))\nrule6() = friends(dog) < 13 => attack(dog, green_fields_of(hippopotamus))\nrule7() = has(hippopotamus, connect_to_internet(device)) => show_cards(hippopotamus, cheetah)\nrule8() = sing_song(something, victory_song_for(canary)) => not show_cards(something, cheetah)\nrule9() = has_high_salary(dog) => attack(dog, green_fields_of(hippopotamus))\norder(rule4) > order(rule2) = True\norder(rule8) > order(rule7) = True\n\nfriends(dog) = 8\nhas_low_income_job(dog) = True\nprepare_armor(donkey, grasshopper) = True\nhas(hippopotamus, cell_phone) = True\n\nquestion = give(hippopotamus, magnifier, koala)\n"}, {"idx": 353, "response": "has(blobfish, card_with(white_color)) == True\nshow_cards(blobfish, catfish) = rule2()\nshow_cards(blobfish, catfish) == True\nshow_cards(blobfish, catfish) == True\ngive_magnifier(meerkat, penguin) = rule4()\ngive_magnifier(meerkat, penguin) == True\ngive_magnifier(meerkat, penguin) == True\nnot show_cards(penguin, panda_bear) = rule7()\nshow_cards(penguin, panda_bear) == False\nshow_cards(penguin, panda_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = knows(defense_plan_of(moose), something) => owes_money_to(something, penguin)\nrule2() = has(blobfish, card_with(color_in_flag_of_Italy)) => show_cards(blobfish, catfish)\nrule3() = first_letter_of(name(donkey)) == first_letter_of(name(moose)) => steal_points(donkey, 5, moose)\nrule4() = show_cards(something, catfish) => give_magnifier(meerkat, penguin)\nrule5() = has(donkey, sharp_object) => steal_points(donkey, 5, moose)\nrule6(something) = respects(something, crocodile) => not give_magnifying_glass(something, penguin)\nrule7() = owes_money_to(something, elephant) => not show_cards(penguin, panda_bear)\nrule8() = owes_money_to(donkey, penguin) & give_magnifying_glass(meerkat, penguin) => show_cards(penguin, panda_bear)\norder(rule6) > order(rule4) = True\norder(rule7) > order(rule8) = True\n\nhas(blobfish, card_with(white_color)) = True\nhas(donkey, cutter) = True\nname(donkey, Teddy) = True\nname(moose, Paco) = True\n\nquestion = show_cards(penguin, panda_bear)\n"}, {"idx": 354, "response": "has(moose, cutter) == True\nsharp_object(cutter) == True\nnot attack(moose, green_fields_of(kangaroo)) = rule1()\nattack(moose, green_fields_of(kangaroo)) == False\nlearn_basics_of_resource_management(tilapia, moose) = True\nroll_dice(moose, baboon) = rule2()\nroll_dice(moose, baboon) == True\nroll_dice(moose, baboon) == True\nnot attack(moose, green_fields_of(kangaroo)) == False\nhas(moose, card_with(green_color)) = True\nnot roll_dice(moose, baboon) = rule5()\nroll_dice(moose, baboon) == False\nroll_dice(moose, baboon) == False\nquestion = False", "answer": -1, "code": "rule1() = has(moose, sharp_object) => not attack(moose, green_fields_of(kangaroo))\nrule2() = learn_basics_of_resource_management(tilapia, moose) => roll_dice(moose, baboon)\nrule3() = give_magnifying_glass(something, raven) => eat_food(wolverine, food_of(puffin))\nrule4() = has(moose, connect_to_internet(device)) => not attack(moose, green_fields_of(kangaroo))\nrule5() = has(moose, card_with(primary_color)) => not roll_dice(moose, baboon)\nrule6() = not give_magnifier(something, whale) => not give_magnifying_glass(something, raven)\nrule7() = offer_job_position(something, sun_bear) => not eat_food(something, food_of(puffin))\nrule8() = roll_dice(something, baboon) & not attack(something, green_fields_of(kangaroo)) => give_magnifier(something, raven)\nrule9() = friends(moose) < 4 => not roll_dice(moose, baboon)\norder(rule2) > order(rule5) = True\norder(rule2) > order(rule9) = True\norder(rule6) > order(rule8) = True\norder(rule7) > order(rule3) = True\n\nhas(moose, card_with(green_color)) = True\nhas(moose, cutter) = True\nhas(moose, trumpet) = True\nfriends(moose) = 6\nlearn_basics_of_resource_management(tilapia, moose) = True\n\nquestion = eat_food(wolverine, food_of(puffin))\n"}, {"idx": 355, "response": "not show_cards(ferret, octopus) = rule3()\nshow_cards(ferret, octopus) == False\nquestion = False", "answer": -1, "code": "rule1() = not need_support(grizzly_bear, kudu) => not roll_dice(kudu, kangaroo)\nrule2() = show_cards(pig, kangaroo) => not wink(kangaroo, ferret)\nrule3() = wink(kangaroo, ferret) => not show_cards(ferret, octopus)\nrule4() = roll_dice(kudu, kangaroo) & show_cards(puffin, kangaroo) => wink(kangaroo, ferret)\nrule5() = first_letter_of(name(kudu)) == first_letter_of(name(kiwi)) => roll_dice(kudu, kangaroo)\nrule6() = give_magnifier(some_animal, cockroach) => show_cards(puffin, kangaroo)\norder(rule2) > order(rule4) = True\norder(rule5) > order(rule1) = True\n\ngive_magnifier(grasshopper, cockroach) = True\nname(kiwi, Meadow) = True\nname(kudu, Mojo) = True\nnot need_support(grizzly_bear, kudu) = True\n\nquestion = show_cards(ferret, octopus)\n"}, {"idx": 356, "response": "name(cockroach, Luna) == True\nname(turtle, Lola) == True\ntook_bike_from_store(turtle) == True\noffer_job(turtle, sun_bear) = rule1()\noffer_job(turtle, sun_bear) == False\nshow_all_cards(turtle, cow) = rule2()\nshow_all_cards(turtle, cow) == False\nhas(turtle, something_to_sit_on) = rule3()\nhas(turtle, something_to_sit_on) == True\nrespects(turtle, tiger) == True\ntook_bike_from_store(turtle) = True\nrespects(turtle, tiger) == True\nfirst_letter_of(name(turtle)) == first_letter_of(name(cockroach)) = rule5()\nfirst_letter_of(name(turtle)) == first_letter_of(name(cockroach)) == True\nshow_all_cards(turtle, cow) = rule5()\nshow_all_cards(turtle, cow) == True\nowes_money_to(turtle, squirrel) = rule1()\nowes_money_to(turtle, squirrel) == False\nquestion = False", "answer": -1, "code": "rule1() = offer_job(something, sun_bear) => owes_money_to(something, squirrel)\nrule2() = show_all_cards(something, cow) => not offer_job(something, sun_bear)\nrule3() = has(turtle, something_to_sit_on) => respects(turtle, tiger)\nrule4() = took_bike_from_store(turtle) => respects(turtle, tiger)\nrule5() = first_letter_of(name(turtle)) == first_letter_of(name(cockroach)) => show_all_cards(turtle, cow)\n\nname(cockroach, Luna) = True\nhas(turtle, tablet) = True\nname(turtle, Lola) = True\ntook_bike_from_store(turtle) = True\n\nquestion = owes_money_to(turtle, squirrel)\n"}, {"idx": 357, "response": "friends(jellyfish) = 11\nfriends(jellyfish) < 8 = False\nnot roll_dice(jellyfish, mosquito) = rule1()\nroll_dice(jellyfish, mosquito) = True\nnot eat_food(jellyfish, food_of(kangaroo)) = rule3(jellyfish)\neat_food(jellyfish, food_of(kangaroo)) = False\nknows(defensive_plans_of(wolverine), jellyfish) = rule4(jellyfish)\nknows(defensive_plans_of(wolverine), jellyfish) = True\nquestion = True", "answer": 1, "code": "rule1() = friends(jellyfish) < 8 => not roll_dice(jellyfish, mosquito)\nrule2() = first_letter_of(name(jellyfish)) == first_letter_of(name(lion)) => not roll_dice(jellyfish, mosquito)\nrule3(something) = not roll_dice(something, mosquito) => not eat_food(something, food_of(kangaroo))\nrule4(something) = not eat_food(something, food_of(kangaroo)) => knows(defensive_plans_of(wolverine), something)\n\nfriends(jellyfish) = 11\nname(jellyfish, Max) = True\nname(lion, Milo) = True\n\nquestion = knows(defensive_plans_of(wolverine), jellyfish)\n"}, {"idx": 358, "response": "friends(black_bear, adventurous) = 3\nfriends(black_bear, not_adventurous) = 3\nneeds_support(black_bear, bat) = rule4()\nneeds_support(black_bear, bat) == True\nprepare_armor(squirrel, mosquito) = rule10(squirrel)\nprepare_armor(squirrel, mosquito) == True\nprepare_armor(squirrel, mosquito) == True\nnot needs_support(squirrel, bat) = rule6(squirrel)\nneeds_support(squirrel, bat) == False\nnot owes_money_to(squirrel, buffalo) = rule2()\nowes_money_to(squirrel, buffalo) == False\nquestion = True", "answer": 1, "code": "rule1() = show_cards(salmon, starfish) => burn(warehouse_of(squirrel), starfish)\nrule2() = needs_support(something, bat) => not owes_money_to(squirrel, buffalo)\nrule3() = not roll_dice(lion, squirrel) => owes_money_to(squirrel, buffalo)\nrule4() = friends(black_bear) < 16 => needs_support(black_bear, bat)\nrule5() = points(eel) == points(carp) => not roll_dice(carp, squirrel)\nrule6(something) = offer_job(something, elephant) => not needs_support(something, bat)\nrule7() = not burn(warehouse_of(squirrel), starfish) & roll_dice(carp, squirrel) => not show_all_cards(squirrel, doctorfish)\nrule8() = friends(starfish) > 7 => not burn(warehouse_of(squirrel), starfish)\nrule9() = attack(penguin, green_fields_of(carp)) => roll_dice(carp, squirrel)\nrule10(something) = not owes_money_to(something, buffalo) & not show_all_cards(something, doctorfish) => not prepare_armor(something, mosquito)\norder(rule3) > order(rule2) = True\norder(rule6) > order(rule4) = True\norder(rule8) > order(rule1) = True\norder(rule9) > order(rule5) = True\n\nfriends(black_bear, adventurous) = 3\nfriends(black_bear, not_adventurous) = 3\npoints(eel) == points(carp) = True\nattack(penguin, green_fields_of(carp)) = True\nshow_cards(salmon, starfish) = True\nfriends(starfish) = 15\n\nquestion = prepare_armor(squirrel, mosquito)\n"}, {"idx": 359, "response": "not enemy(kangaroo, snail) = True\nknock_down(snail, fortress_of(lobster)) = rule4()\nknock_down(snail, fortress_of(lobster)) == True\nknock_down(snail, fortress_of(lobster)) == True\nnot offer_job_position(snail, panda_bear) = rule5(snail)\nnot offer_job_position(snail, panda_bear) == True\nnot offer_job_position(snail, panda_bear) == True\neat_food(lion, food_of(panda_bear)) = rule2()\neat_food(lion, food_of(panda_bear)) == True\neat_food(lion, food_of(panda_bear)) == True\nnot offer_job_position(snail, panda_bear) == True\neat_food(panda_bear, food_of(cat)) = rule7()\neat_food(panda_bear, food_of(cat)) == True\neat_food(panda_bear, food_of(cat)) == True\nquestion = True", "answer": 1, "code": "rule1() = remove(animal, piece_of(cockroach)) => wink(goldfish, squirrel)\nrule2() = wink(animal, squirrel) => eat_food(lion, food_of(panda_bear))\nrule3() = learn_basics_of_resource_management(animal, black_bear) => not eat_food(panda_bear, food_of(cat))\nrule4() = not enemy(kangaroo, snail) => knock_down(snail, fortress_of(lobster))\nrule5(animal) = knock_down(animal, fortress_of(lobster)) => not offer_job_position(animal, panda_bear)\nrule6(something) = give_magnifier(something, lobster) & offer_job_position(something, carp) => not knock_down(lobster, fortress_of(lobster))\nrule7() = eat_food(lion, food_of(panda_bear)) & not offer_job_position(snail, panda_bear) => eat_food(panda_bear, food_of(cat))\norder(rule4) > order(rule6) = True\norder(rule7) > order(rule3) = True\n\npoints(eel) == points(cockroach) = True\noffer_job_position(snail, carp) = True\nnot enemy(kangaroo, snail) = True\n\nquestion = eat_food(panda_bear, food_of(cat))\n"}, {"idx": 360, "response": "has(moose, cello) == True\nsteal_points(moose, 5, caterpillar) = rule4(moose)\nsteal_points(moose, 5, caterpillar) == True\nsteal_points(moose, 5, caterpillar) == True\nquestion = True", "answer": 1, "code": "rule1() = has(moose, card_with(primary_color)) => knock_down_fortress(moose, amberjack)\nrule2() = has(moose, sharp_object) => knock_down_fortress(moose, amberjack)\nrule3() = steal_points(something, 5, mosquito) => not knock_down_fortress(moose, amberjack)\nrule4(something) = prepare_armor(something, squirrel) => steal_points(something, 5, caterpillar)\nrule5(something) = knock_down_fortress(something, amberjack) => prepare_armor(something, squirrel)\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule2) = True\n\nhas(moose, card_with(red_color)) = True\nhas(moose, cello) = True\n\nquestion = steal_points(moose, 5, caterpillar)\n"}, {"idx": 361, "response": "has(cricket, couch) == True\nnot actual_enemy(cricket, rabbit) = rule6()\nactual_enemy(cricket, rabbit) == False\nknock_down(cricket, fortress_of(carp)) == True\noffer_job(cricket, moose) = rule12()\noffer_job(cricket, moose) == True\noffer_job(cricket, moose) == True\nsame_number_of_points(cricket, cow) = rule11()\nsame_number_of_points(cricket, cow) == True\nsame_number_of_points(cricket, cow) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(penguin) < 5 => not knock_down(squirrel, fortress)\nrule2(something) = offer_job(something, moose) & not knock_down(something, fortress_of(moose)) => not same_number_of_points(something, cow)\nrule3() = first_letter_of(name(cricket)) == first_letter_of(name(grizzly_bear)) => not enemy(cricket, rabbit)\nrule4() = offer_job(pig, polar_bear) => offer_job(polar_bear, gecko)\nrule5() = has(salmon, musical_instrument) => eats(salmon, food_of(buffalo))\nrule6() = has(cricket, leafy_green_vegetable) => not actual_enemy(cricket, rabbit)\nrule7(something) = not enemy(something, rabbit) => not knock_down(something, fortress_of(moose))\nrule8() = has(penguin, carry_apples_and_oranges) => knock_down(squirrel, fortress)\nrule9() = offer_job(something, gecko) => not remove(raven, piece_of(cricket))\nrule10() = has(salmon, musical_instrument) => eats(salmon, food_of(buffalo))\nrule11() = not eats(panda_bear, food_of(cricket)) & not remove(raven, piece_of(cricket)) => same_number_of_points(cricket, cow)\nrule12() = knock_down(something, fortress_of(squirrel)) => offer_job(cricket, moose)\norder(rule1) > order(rule8) = True\norder(rule11) > order(rule2) = True\n\nhas(cricket, couch) = True\nname(cricket, Lucy) = True\nknock_down(cricket, fortress_of(carp)) = True\nname(grizzly_bear, Lily) = True\nhas(penguin, plastic_bag) = True\noffer_job(pig, polar_bear) = True\nfriends(polar_bear) = 18\nname(polar_bear, Tarzan) = True\nhas(salmon, love_seat_sofa) = True\nhas(salmon, saxophone) = True\nname(zander, Blossom) = True\n\nquestion = same_number_of_points(cricket, cow)\n"}, {"idx": 362, "response": "assassinated(blobfish, mayor) == True\nburn(warehouse_of(carp), blobfish) = rule5()\nburn(warehouse_of(carp), blobfish) == True\noffer_job_position(blobfish, donkey) = rule6()\noffer_job_position(blobfish, donkey) == True\nknock_down(rabbit, fortress_of(donkey)) = rule6()\nknock_down(rabbit, fortress_of(donkey)) == True\nwink(donkey, mosquito) = rule6()\nwink(donkey, mosquito) == True\nquestion = True", "answer": 1, "code": "rule1() = has(blobfish, drink) => raise_flag_of_peace(blobfish, kangaroo)\nrule2(something) = prepares_armor(something, raven) => not raise_flag_of_peace(something, kangaroo)\nrule3() = has(blobfish, musical_instrument) => not burn(warehouse_of(carp), blobfish)\nrule4() = friends(rabbit) < 3 => not offer_job_position(rabbit, crocodile)\nrule5() = killed(blobfish, mayor) => burn(warehouse_of(carp), blobfish)\nrule6() = offer_job_position(blobfish, donkey) & knock_down(rabbit, fortress_of(donkey)) => wink(donkey, mosquito)\nrule7() = first_letter_of(name(rabbit)) == first_letter_of(name(canary)) => not offer_job_position(rabbit, crocodile)\nrule8(something) = offer_job_position(something, crocodile) => knock_down(something, fortress_of(donkey))\nrule9() = has(rabbit, high_quality_paper) => offer_job_position(rabbit, crocodile)\nrule10() = first_letter_of(name(blobfish)) == first_letter_of(name(grasshopper)) => burn(warehouse_of(carp), blobfish)\nrule11(something) = raise_flag_of_peace(something, kangaroo) & burn(warehouse_of(carp), something) => offer_job_position(something, donkey)\nrule12() = has(blobfish, carry_apples_and_oranges) => raise_flag_of_peace(blobfish, kangaroo)\norder(rule1) > order(rule2) = True\norder(rule12) > order(rule2) = True\norder(rule3) > order(rule10) = True\norder(rule3) > order(rule5) = True\norder(rule4) > order(rule9) = True\norder(rule7) > order(rule9) = True\n\nassassinated(blobfish, mayor) = True\nhas(blobfish, knapsack) = True\nname(blobfish, Meadow) = True\nhas(blobfish, romaine_lettuce) = True\nname(canary, Paco) = True\nname(grasshopper, Cinnamon) = True\nname(rabbit, Lola) = True\nreduce_work_hours(rabbit) = True\n\nquestion = wink(donkey, mosquito)\n"}, {"idx": 363, "response": "remove(gecko, piece_of(cockroach)) == True\nknows(defense_plan_of(cockroach), halibut) == True\nburn(warehouse_of(buffalo), lobster) = rule6(lobster)\nburn(warehouse_of(buffalo), lobster) == True\nburn(warehouse_of(buffalo), lobster) == True\nnot eat_food(lobster, donkey) = rule6(lobster)\neat_food(lobster, donkey) == False\neat_food(lobster, donkey) == False\nquestion = False", "answer": -1, "code": "rule1() = eat_food(something, donkey) => wink_at(something, swordfish)\nrule2() = not show_cards(something, salmon) => not need_support(something, lobster)\nrule3() = knows(defense_plan_of(cockroach), halibut) & remove(gecko, piece_of(cockroach)) => burn(warehouse_of(buffalo), cockroach)\nrule4(something) = burn(warehouse_of(tilapia), something) & not enemy(something, carp) => need_support(something, lobster)\nrule5() = need_support(hummingbird, lobster) => eat_food(lobster, donkey)\nrule6(something) = burn(warehouse_of(buffalo), something) => not eat_food(lobster, donkey)\norder(rule2) > order(rule4) = True\norder(rule5) > order(rule6) = True\n\nremove(gecko, piece_of(cockroach)) = True\nknows(defensive_plans_of(cockroach), halibut) = True\nburn(warehouse_of(tilapia), hummingbird) = True\nnot enemy(hummingbird, carp) = True\n\nquestion = wink_at(lobster, swordfish)\n"}, {"idx": 364, "response": "not burn(warehouse_of(donkey), baboon) = True\nrespect(baboon, lion) = rule1(baboon)\nrespect(baboon, lion) == True\nnot roll_dice(grasshopper, cow) = rule2()\nnot roll_dice(grasshopper, cow) == True\nnot wink(cow, cat) = rule2()\nnot wink(cow, cat) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not burn(warehouse_of(donkey), something) => respect(something, lion)\nrule2() = not roll_dice(grasshopper, cow) => not wink(cow, cat)\nrule3() = respects(something, lion) => not roll_dice(grasshopper, cow)\n\nnot burn(warehouse_of(donkey), baboon) = True\n\nquestion = wink(cow, cat)\n"}, {"idx": 365, "response": "has(cat, blade) == True\nsharp_object(blade) == True\nnot wink(cat, tiger) = rule4()\nwink(cat, tiger) == False\nshow_cards(cat, hippopotamus) = True\nwink(cat, tiger) = rule3()\nwink(cat, tiger) == True\nwink(cat, tiger) == True\nlearn_basics_of_resource_management(tiger, cheetah) = rule2()\nlearn_basics_of_resource_management(tiger, cheetah) == True\nlearn_basics_of_resource_management(tiger, cheetah) == True\nwink(tiger, hare) = rule1()\nwink(tiger, hare) == True\nwink(tiger, hare) == True\nlearn_basics_of_resource_management(tiger, cheetah) == True\nneeds_support(tiger, donkey) = rule5()\nneeds_support(tiger, donkey) == True\nquestion = True", "answer": 1, "code": "rule1() = not wink(cat, tiger) => wink(tiger, hare)\nrule2() = prepare_armor(meerkat, tiger) => learn_basics_of_resource_management(tiger, cheetah)\nrule3(something) = show_cards(something, hippopotamus) => wink(something, tiger)\nrule4() = has(cat, sharp_object) => not wink(cat, tiger)\nrule5(something) = wink(something, hare) & learn_basics_of_resource_management(something, cheetah) => needs_support(something, donkey)\nrule6(something) = burn(warehouse_of(moose), something) => points(something) == points(tiger)\nrule7() = enemy(something, koala) => not same_points(meerkat, tiger)\norder(rule4) > order(rule3) = True\norder(rule7) > order(rule6) = True\n\nhas(cat, blade) = True\nshow_cards(cat, hippopotamus) = True\nburn(warehouse_of(moose), meerkat) = True\n\nquestion = needs_support(tiger, donkey)\n"}, {"idx": 366, "response": "learns_resource_management(blobfish, catfish) == True\nholds_same_points(blobfish, oscar) = rule1()\nholds_same_points(blobfish, oscar) == True\noffer_job_position(blobfish, rabbit) = rule2()\noffer_job_position(blobfish, rabbit) == True\noffer_job_position(blobfish, rabbit) == True\nrespects(blobfish, rabbit) = rule9()\nrespects(blobfish, rabbit) == True\nrespects(blobfish, rabbit) == True\nrespects(rabbit, polar_bear) = rule3()\nrespects(rabbit, polar_bear) == True\nrespects(rabbit, polar_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = learns_resource_management(something, catfish) => holds_same_points(something, oscar)\nrule2() = holds_same_points(something, oscar) => offer_job_position(something, rabbit)\nrule3() = respects(blobfish, rabbit) => respects(rabbit, polar_bear)\nrule4() = offer_job_position(blobfish, rabbit) & give_magnifier(phoenix, rabbit) => not respects(rabbit, polar_bear)\nrule5() = not wink(whale, phoenix) => proceed(phoenix, spot_right_after(kangaroo))\nrule6() = has(phoenix, card_with(primary_color)) => burn(warehouse_of(swordfish), phoenix)\nrule7() = first_letter_of(name(phoenix)) == first_letter_of(name(penguin)) => burn(warehouse_of(swordfish), phoenix)\nrule8() = burns(warehouse_of(swordfish), something) => give_magnifying_glass(something, rabbit)\nrule9() = respects(something, raven) => respects(blobfish, rabbit)\nrule10() = not sing_song(pig, victory_song_for(blobfish)) => not holds_same_points(blobfish, oscar)\nrule11() = first_letter_of(name(sea_bass)) == first_letter_of(name(caterpillar)) => respects(sea_bass, raven)\norder(rule10) > order(rule1) = True\norder(rule3) > order(rule4) = True\n\nlearns_resource_management(blobfish, catfish) = True\nname(caterpillar, Milo) = True\nname(penguin, Peddi) = True\nhas(phoenix, card_with(orange_color)) = True\nname(phoenix, Pashmak) = True\nname(sea_bass, Max) = True\nnot wink(whale, phoenix) = True\n\nquestion = respects(rabbit, polar_bear)\n"}, {"idx": 367, "response": "not roll_dice(mosquito, sea_bass) = rule1()\nroll_dice(mosquito, sea_bass) == False\nnot wink_at(ferret, sea_bass) = rule2()\nwink_at(ferret, sea_bass) == False\nnot steal_points(sea_bass, tiger) = rule10()\nsteal_points(sea_bass, tiger) == False\ngive_magnifier(ferret, penguin) = rule4()\ngive_magnifier(ferret, penguin) == True\nwink_at(ferret, sea_bass) = rule15()\nwink_at(ferret, sea_bass) == True\nneeds_support(sea_bass, whale) = rule15()\nneeds_support(sea_bass, whale) == True\npoints(sea_bass) == points(blobfish) = rule17()\npoints(sea_bass) == points(blobfish) == unknown\nquestion = unknown", "answer": 0, "code": "rule1() = not roll_dice(mosquito, sea_bass) => owes_money_to(sea_bass, halibut)\nrule2() = first_letter_of(name(ferret)) == first_letter_of(name(cow)) => not wink_at(ferret, sea_bass)\nrule3() = not steal_points(something, tiger) => roll_dice(something, tilapia)\nrule4() = give_magnifier(something, penguin) => wink_at(something, sea_bass)\nrule5() = has(crocodile, musical_instrument) => burn(warehouse_of(sea_bass))\nrule6() = needs_support(something, starfish) => not sing_song(sea_bass, victory_song_for(meerkat))\nrule7(something) = respects(something, hippopotamus) => points(something) == points(blobfish)\nrule8() = sing_song(something, victory_song_for(meerkat)) => not needs_support(something, whale)\nrule9() = friends(ferret) > 10 => not wink_at(ferret, sea_bass)\nrule10() = friends(sea_bass) < 12 => not steal_points(sea_bass, tiger)\nrule11() = not proceed(squirrel, spot_right_after(spot_of(crocodile))) & not remove(caterpillar, piece_of(crocodile)) => not burn(warehouse_of(sea_bass))\nrule12() = not burn(warehouse_of(sea_bass)) => respects(sea_bass, hippopotamus)\nrule13(device) = has(crocodile, connect_to_internet(device)) => burn(warehouse_of(sea_bass))\nrule14() = prepare_armor(something, kangaroo) => not remove(something, piece_of(phoenix))\nrule15() = wink_at(ferret, sea_bass) => needs_support(sea_bass, whale)\nrule16() = has(sea_bass, sharp_object) => sing_song(sea_bass, victory_song_for(meerkat))\nrule17(something) = needs_support(something, whale) & roll_dice(something, tilapia) => not points(something) == points(blobfish)\norder(rule13) > order(rule11) = True\norder(rule15) > order(rule8) = True\norder(rule17) > order(rule7) = True\norder(rule4) > order(rule2) = True\norder(rule4) > order(rule9) = True\norder(rule5) > order(rule11) = True\norder(rule6) > order(rule16) = True\n\nname(cow, Bella) = True\nhas(crocodile, cappuccino) = True\ngive_magnifier(ferret, penguin) = True\nfriends(ferret) = 18\nname(ferret, Max) = True\nfriends(sea_bass) = 2 loyal, 1 disloyal\nprepare_armor(sea_bass, kangaroo) = True\nhas(sea_bass, blade) = True\nhas(sea_bass, love_seat_sofa) = True\nnot remove(caterpillar, piece_of(crocodile)) = True\nnot roll_dice(mosquito, sea_bass) = True\nnot proceed(squirrel, spot_right_after(spot_of(crocodile))) = True\n\nquestion = points(sea_bass) == points(blobfish)\n"}, {"idx": 368, "response": "not roll_dice(hippopotamus, crocodile) = True\nroll_dice(hippopotamus, crocodile) == False\nquestion = roll_dice(hippopotamus, puffin)\n", "answer": 0, "code": "rule1() = roll_dice(something, carp) => burn(warehouse_of(turtle), something)\nrule2(something) = not burn(warehouse_of(crocodile), something) => roll_dice(something, carp)\nrule3() = burn(warehouse_of(turtle), something) => roll_dice(something, puffin)\nrule4() = owes_money_to(something, leopard) => sing_song(something, victory_song_for(cat))\nrule5() = has(black_bear, leafy_green_vegetable) => knows(defense_plan_of(hippopotamus), black_bear)\nrule6() = attack(polar_bear, green_fields_of(hippopotamus)) => not sing_song(hippopotamus, victory_song_for(cat))\nrule7() = roll_dice(dog, mosquito) => knock_down(fortress_of(hippopotamus), mosquito)\nrule8() = has_difficulty_finding_food(black_bear) => knows(defensive_plans_of(hippopotamus), black_bear)\nrule9() = knock_down(fortress_of(hippopotamus), mosquito) & knows(defense_plan_of(hippopotamus), black_bear) => enemy(hippopotamus, kiwi)\nrule10() = has(black_bear, card) and color(card) in rainbow_colors => not knows(defense_plan_of(hippopotamus), black_bear)\nrule11() = wink(meerkat, hippopotamus) => not enemy(hippopotamus, kiwi)\nrule12() = eat_food_of(something, ferret) => owes_money_to(hippopotamus, leopard)\nrule13() = has(mosquito, card) and color(card) in colors_of(flag_of(Netherlands)) => not knock_down(fortress_of(hippopotamus), mosquito)\nrule14(something) = sing_song(something, victory_song_for(spider)) => not owes_money_to(something, leopard)\norder(rule13) > order(rule7) = True\norder(rule14) > order(rule12) = True\norder(rule5) > order(rule10) = True\norder(rule6) > order(rule4) = True\norder(rule8) > order(rule10) = True\norder(rule9) > order(rule11) = True\n\nhas(black_bear, trumpet) = True\nholding(black_bear, keys) = True\nremove(snail, piece_of(ferret)) = True\nnot roll_dice(dog, mosquito) = True\nnot roll_dice(hippopotamus, crocodile) = True\n\nquestion = roll_dice(hippopotamus, puffin)\n"}, {"idx": 369, "response": "holds_equal_points(mosquito, koala) == True\nnot needs_support(mosquito, rabbit) = rule1(mosquito)\nneeds_support(mosquito, rabbit) == False\ngive(mosquito, magnifier, starfish) = rule3(mosquito)\ngive(mosquito, magnifier, starfish) == True\nburn(warehouse_of(pig)) = rule3()\nburn(warehouse_of(pig)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not needs_support(something, rabbit) => not burn(warehouse_of(pig))\nrule2() = sing_song(cockroach, victory_song_for(wolverine)) => give(wolverine, magnifier, starfish)\nrule3(something) = give(something, magnifier, starfish) => burn(warehouse_of(pig))\nrule4() = holds_equal_points(something, koala) => sing_song(cockroach, victory_song_for(wolverine))\norder(rule1) > order(rule3) = True\n\nholds_equal_points(mosquito, koala) = True\n\nquestion = burn(warehouse_of(pig))\n"}, {"idx": 370, "response": "offer_job(carp, kiwi) = rule1()\noffer_job(carp, kiwi) == True\nnot give_magnifier(kangaroo, kiwi) = rule1()\ngive_magnifier(kangaroo, kiwi) == False\npoints(kiwi) == points(grasshopper) = rule1()\npoints(kiwi) == points(grasshopper) == True\nquestion = True", "answer": 1, "code": "rule1() = offer_job(carp, kiwi) & not give_magnifier(kangaroo, kiwi) => points(kiwi) == points(grasshopper)\nrule2() = first_letter_of(name(swordfish)) == first_letter_of(name(halibut)) => steal_points(swordfish, 5, koala)\nrule3(something) = attack_green_fields(something, hippopotamus) & steal_points(something, 5, starfish) => not offer_job_position(something, caterpillar)\nrule4() = friends(parrot) < 7 => give_magnifying_glass(parrot, viperfish)\nrule5() = took_bike_from_store(whale) => roll_dice(whale, carp)\nrule6() = steal_points(something, 5, koala) => offer_job(carp, kiwi)\nrule7() = offer_job_position(something, caterpillar) => not points(kiwi) == points(grasshopper)\nrule8() = first_letter_of(name(viperfish)) == first_letter_of(name(whale)) => not steal_points(viperfish, 5, starfish)\nrule9() = burn_warehouse(tiger, viperfish) => steal_points(viperfish, 5, starfish)\nrule10() = color_starts_with(card(swordfish), \"b\") => steal_points(swordfish, 5, koala)\nrule11() = give_magnifier(parrot, viperfish) => offer_job(viperfish, caterpillar)\nrule12() = friends(whale) > 12 => roll_dice(whale, carp)\nrule13() = not has_keys(parrot) => give_magnifier(parrot, viperfish)\nrule14() = color_in_flag_of_france(card(viperfish)) => not steal_points(viperfish, 5, starfish)\norder(rule1) > order(rule7) = True\norder(rule14) > order(rule9) = True\norder(rule3) > order(rule11) = True\norder(rule8) > order(rule9) = True\n\nname(halibut, Tango) = True\nfriends(parrot) = 13\nlost_keys(parrot) = True\nhas(swordfish, card_with(black_color)) = True\nhas(swordfish, club_chair) = True\nname(swordfish, Peddi) = True\nfriends(swordfish, energetic) = 2\nfriends(swordfish, not_energetic) = 6\nburn_warehouse(tiger, viperfish) = True\nhas(viperfish, card_with(indigo_color)) = True\nname(viperfish, Meadow) = True\nfriends(whale) = 9\nhas(whale, kale) = True\nstole_bike_from_store(whale) = True\n\nquestion = points(kiwi) == points(grasshopper)\n"}, {"idx": 371, "response": "name(puffin, Beauty) == True\nname(sun_bear, Lucy) == True\nfirst_letter_of(name(puffin)) == first_letter_of(name(sun_bear)) == True\nnot learn_elementary_resource_management(puffin, lion) = rule1()\nlearn_elementary_resource_management(puffin, lion) == False\nnot learn_basics_of_resource_management(puffin, lion) = rule2(puffin)\nlearn_basics_of_resource_management(puffin, lion) == False\nattack_green_fields(puffin, owner(sun_bear)) = rule3(puffin)\nattack_green_fields(puffin, owner(sun_bear)) == True\nproceed(puffin, spot_right_after(spot_of(black_bear))) = question\nproceed(puffin, spot_right_after(spot_of(black_bear))) == unknown", "answer": 0, "code": "rule1() = first_letter_of(name(puffin)) == first_letter_of(name(sun_bear)) => not learn_elementary_resource_management(puffin, lion)\nrule2(something) = not learn_basics_of_resource_management(something, lion) => attack_green_fields(something, owner(sun_bear))\nrule3(something) = attack_green_fields(something, owner(sun_bear)) => proceed(something, spot_right_after(spot_of(black_bear)))\n\nname(puffin, Beauty) = True\nname(sun_bear, Lucy) = True\n\nquestion = proceed(puffin, spot_right_after(spot_of(black_bear)))\n"}, {"idx": 372, "response": "respects(wolverine, turtle) = False\nnot respects(wolverine, turtle) = True\nremove(wolverine, piece_of(buffalo)) = rule2(wolverine)\nremove(wolverine, piece_of(buffalo)) = True\npoints(buffalo) == points(turtle) = rule3()\npoints(buffalo) == points(turtle) = True\nraise_flag_of_peace(buffalo, bat) = rule1(buffalo)\nraise_flag_of_peace(buffalo, bat) = True\nquestion = True", "answer": 1, "code": "rule1(something) = points(something) == points(turtle) => raise_flag_of_peace(something, bat)\nrule2(something) = not respects(something, turtle) => remove(something, piece_of(buffalo))\nrule3() = remove(wolverine, piece_of(buffalo)) => points(buffalo) == points(turtle)\n\nburn(blobfish, warehouse_of(cockroach)) = True\nrespects(wolverine, turtle) = False\n\nquestion = raise_flag_of_peace(buffalo, bat)\n"}, {"idx": 373, "response": "has(kudu, card_with(blue_color)) == True\ngive_magnifying_glass(kudu, carp) = rule4()\ngive_magnifying_glass(kudu, carp) == True\ngive_magnifying_glass(kudu, carp) == True\neats_food_of(viperfish, kudu) = rule5(viperfish)\neats_food_of(viperfish, kudu) == True\neats_food_of(viperfish, kudu) == True\nlearn_basics_of_resource_management(viperfish, tiger) = not rule3()\nlearn_basics_of_resource_management(viperfish, tiger) == False\nlearn_basics_of_resource_management(viperfish, tiger) == False\nquestion = False", "answer": -1, "code": "rule1() = show_all_cards(someone, parrot) => give_magnifying_glass(someone, viperfish)\nrule2() = friends(lion) > 9 => show_all_cards(lion, parrot)\nrule3() = belief(lion_gives_magnifier_to(viperfish)) & kudu_eats_food_of(viperfish) => not learn_basics_of_resource_management(viperfish, tiger)\nrule4() = has(kudu, card_with(color_in_flag_of_Netherlands)) => give_magnifying_glass(kudu, carp)\nrule5(something) = give_magnifying_glass(something, carp) => eats_food_of(something, viperfish)\n\nhas(kudu, card_with(blue_color)) = True\nfriends(lion) = 13\n\nquestion = learn_basics_of_resource_management(viperfish, tiger)\n"}, {"idx": 374, "response": "proceed(canary, spot_right_after(spot_of(cat))) = question", "answer": 0, "code": "rule1() = learns_basics_of_resource_management(something, kudu) => not respects(sheep, whale)\nrule2() = burn(warehouse_of(whale), carp) => not prepare_armor(whale, blobfish)\nrule3() = eat_food(phoenix, whale) => show_cards(whale, tilapia)\nrule4(something) = winks_at(something, amberjack) => eat_food(something, pig)\nrule5() = fan_of(tiger, Chris_Ronaldo) => give(tiger, magnifier, whale)\nrule6() = has(whale, something_to_sit_on) => not eat_food(whale, pig)\nrule7(something) = eat_food(something, pig) => prepare_armor(something, blobfish)\nrule8(something) = show_cards(something, tilapia) & roll_dice(something, gecko) => burn(warehouse_of(canary), something)\nrule9() = burn(warehouse_of(canary), whale) => proceed(canary, spot_right_after(spot_of(cat)))\nrule10() = has_high_salary(whale) => not roll_dice(whale, gecko)\nrule11(something) = not sing_song(something, victory_song_for(jellyfish)) => roll_dice(something, gecko)\norder(rule10) > order(rule11) = True\norder(rule2) > order(rule7) = True\norder(rule6) > order(rule4) = True\n\npoints(cricket) == points(tiger) = True\nlearns_basics_of_resource_management(penguin, kudu) = True\nknows(defensive_plans_of(whale), phoenix) = True\nfan_of(tiger, Chris_Ronaldo) = True\npoints(whale) == points(octopus) = True\nwinks_at(whale, amberjack) = True\nnot sing_song(whale, victory_song_for(jellyfish)) = True\n\nquestion = proceed(canary, spot_right_after(spot_of(cat)))\n"}, {"idx": 375, "response": "not raise_flag_of_peace(black_bear, mosquito) = True\nlearn_elementary_resource_management(viperfish, mosquito) = True\nnot needs_support(mosquito, panther) = rule3()\nneeds_support(mosquito, panther) = False\ngive_magnifier(cockroach, turtle) = True\nknock_down_fortress(turtle, panther) = rule4()\nknock_down_fortress(turtle, panther) = True\nprepare_armor(panther, sea_bass) = rule5()\nprepare_armor(panther, sea_bass) = True\nraise_flag_of_peace(panther, gecko) = rule1()\nraise_flag_of_peace(panther, gecko) = True\nlearn_elementary_resource_management(panther, dog) = question\nlearn_elementary_resource_management(panther, dog) = unknown", "answer": 0, "code": "rule1() = not needs_support(mosquito, panther) => raise_flag_of_peace(panther, gecko)\nrule2() = holds_same_points_as(something, viperfish) => not learn_elementary_resource_management(panther, dog)\nrule3() = not raise_flag_of_peace(black_bear, mosquito) & learn_elementary_resource_management(viperfish, mosquito) => not needs_support(mosquito, panther)\nrule4() = give_magnifier(cockroach, turtle) => knock_down_fortress(turtle, panther)\nrule5() = knock_down_fortress(turtle, panther) => prepare_armor(panther, sea_bass)\nrule6() = raise_flag_of_peace(something, gecko) & prepare_armor(something, sea_bass) => learn_elementary_resource_management(something, dog)\norder(rule2) > order(rule6) = True\n\ngive_magnifier(cockroach, turtle) = True\nsteal_points(mosquito, kudu, 5) = True\nlearn_elementary_resource_management(viperfish, mosquito) = True\nnot raise_flag_of_peace(black_bear, mosquito) = True\n\nquestion = learn_elementary_resource_management(panther, dog)\n"}, {"idx": 376, "response": "steal_points(koala, moose, 5) = question", "answer": 0, "code": "rule1() = respects(something, phoenix) => not steal_points(something, moose, 5)\nrule2() = not equal_points(hummingbird, blobfish) & steal_points(elephant, blobfish, 5) => not owes_money_to(blobfish, koala)\nrule3() = not owes_money_to(blobfish, koala) => respects(koala, phoenix)\nrule4(something) = enemy(something, whale) => owes_money_to(blobfish, koala)\norder(rule4) > order(rule2) = True\n\nsteal_points(elephant, blobfish, 5) = True\nequal_points(hummingbird, blobfish) = False\n\nquestion = steal_points(koala, moose, 5)\n"}, {"idx": 377, "response": "name(blobfish, Mojo) == True\nname(spider, Max) == True\nfirst_letter_of(name(blobfish)) == first_letter_of(name(spider)) == True\nremove(blobfish, piece_of(buffalo)) = rule1()\nremove(blobfish, piece_of(buffalo)) == True\ngive_magnifier(buffalo, kangaroo) = rule4()\ngive_magnifier(buffalo, kangaroo) == True\ngive_magnifier(buffalo, kangaroo) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(blobfish)) == first_letter_of(name(spider)) => remove(blobfish, piece_of(buffalo))\nrule2() = not steal_points(something, pig, 5) => not give_magnifier(something, kangaroo)\nrule3(something) = owes_money_to(something, elephant) => sing_song(something, victory_song_for(canary))\nrule4(something) = burn(warehouse_of(sun_bear), something) & points(something) == points(hare) => give_magnifying_glass(something, kangaroo)\nrule5() = not remove(blobfish, piece_of(buffalo)) & not roll_dice(salmon, buffalo) => points(buffalo) == points(hare)\nrule6() = sing_song(something, victory_song_for(canary)) => burn(warehouse_of(sun_bear), buffalo)\nrule7() = has(blobfish, card_with(color_in_flag_of_belgium)) => remove(blobfish, piece_of(buffalo))\nrule8() = eat_food(viperfish, salmon) => not roll_dice(salmon, buffalo)\norder(rule2) > order(rule4) = True\n\nhas(blobfish, card_with(orange_color)) = True\nname(blobfish, Mojo) = True\nfriends(meerkat) = 11\nowes_money_to(meerkat, elephant) = True\nname(moose, Mojo) = True\nname(salmon, Milo) = True\nname(spider, Max) = True\neat_food(viperfish, salmon) = True\n\nquestion = give_magnifier(buffalo, kangaroo)\n"}, {"idx": 378, "response": "remove(starfish, piece_of(amberjack)) = unknown", "answer": 0, "code": "rule1() = has(grizzly_bear, card_with(primary_color)) => rolls_dice(grizzly_bear, kudu)\nrule2() = has_high_salary(grizzly_bear) => rolls_dice(grizzly_bear, kudu)\nrule3(something) = not burn(warehouse_of(snail), something) => proceed(something, spot_right_after(spot_of(kudu)))\nrule4() = not raise_flag_of_peace(kudu, starfish) => remove(starfish, piece_of(amberjack))\nrule5() = not proceed(puffin, spot_right_after(spot_of(kudu))) & rolls_dice(grizzly_bear, kudu) => not raise_flag_of_peace(kudu, starfish)\nrule6() = give_magnifying_glass(something, panda_bear) => knows(defense_plan_of(kudu), hippopotamus)\nrule7(something) = needs_support(something, carp) & rolls_dice(something, snail) => not proceed(something, spot_right_after(spot_of(kudu)))\nrule8() = rolls_dice(something, panther) => not remove(starfish, piece_of(amberjack))\nrule9() = rolls_dice(cat, hippopotamus) => not knows(defense_plan_of(kudu), hippopotamus)\norder(rule3) > order(rule7) = True\norder(rule6) > order(rule9) = True\norder(rule8) > order(rule4) = True\n\nrolls_dice(cat, hippopotamus) = True\nhas_high_salary(grizzly_bear) = True\nhas(grizzly_bear, card_with(white_color)) = True\ngive_magnifying_glass(moose, panda_bear) = True\nneeds_support(puffin, carp) = True\nrolls_dice(puffin, snail) = True\n\nquestion = remove(starfish, piece_of(amberjack))\n"}, {"idx": 379, "response": "invented_time_machine(squirrel) == True\ncreated_time_machine(squirrel) = rule1()\ncreated_time_machine(squirrel) == True\nroll_dice(squirrel, hummingbird) = rule1()\nroll_dice(squirrel, hummingbird) == True\nroll_dice(squirrel, hummingbird) == True\npoints(carp) == points(cat) = rule3()\npoints(carp) == points(cat) == True\nneed_support(carp, crocodile) = rule10(carp)\nneed_support(carp, crocodile) == False\nquestion = False", "answer": -1, "code": "rule1() = created_time_machine(squirrel) => roll_dice(squirrel, hummingbird)\nrule2() = not give_magnifying_glass(something, catfish) => not roll_dice(something, meerkat)\nrule3() = proceed(raven, spot_right_after(spot_of(carp))) => points(carp) == points(cat)\nrule4() = owns(mosquito, luxury_aircraft) => not wink(mosquito, parrot)\nrule5() = sing_song(something, victory_song_for(pig)) => wink(mosquito, parrot)\nrule6() = raise_flag_of_peace(swordfish, carp) & not burn(warehouse_of(carp), hippopotamus) => never_give_magnifying_glass(carp, catfish)\nrule7() = roll_dice(something, hummingbird) => knock_down(fortress_of(polar_bear), carp)\nrule8() = friends(mosquito) > 10 => not wink(mosquito, parrot)\nrule9() = friends(raven) > 16 => proceed(raven, spot_right_after(spot_of(carp)))\nrule10(something) = points(something) == points(cat) => not need_support(something, crocodile)\nrule11() = not have_keys(raven) => proceed(raven, spot_right_after(spot_of(carp)))\norder(rule4) > order(rule5) = True\norder(rule8) > order(rule5) = True\n\nfriends(carp) = 1\nsing_song(donkey, victory_song_for(pig)) = True\nname(halibut, Chickpea) = True\ndreamed(mosquito, luxury_aircraft) = True\nfriends(raven, bald) = 4\nfriends(raven, not_bald) = 5\nlost_keys(raven) = True\nhas(squirrel, basket) = True\nname(squirrel, Cinnamon) = True\ninvented_time_machine(squirrel) = True\nraise_flag_of_peace(swordfish, carp) = True\nnot burn(warehouse_of(carp), hippopotamus) = True\n\nquestion = need_support(carp, crocodile)\n"}, {"idx": 380, "response": "has(canary, card_with(primary_color)) == True\nraise_flag_of_peace(canary, whale) = rule3()\nraise_flag_of_peace(canary, whale) == True\nraise_flag_of_peace(canary, whale) == True\nshow_cards(whale, gecko) = rule1()\nshow_cards(whale, gecko) == True\nshow_cards(whale, gecko) == True\nenemy(whale, kiwi) = rule5()\nenemy(whale, kiwi) == True\nnot show_cards(whale, gecko) == False\nequal_points(whale, grasshopper) = question\nequal_points(whale, grasshopper) == unknown", "answer": 0, "code": "rule1() = raise_flag_of_peace(canary, whale) => show_cards(whale, gecko)\nrule2() = knock_down(gecko, fortress_of(canary)) => not raise_flag_of_peace(canary, whale)\nrule3() = has(canary, card_with(primary_color)) => raise_flag_of_peace(canary, whale)\nrule4() = has(hummingbird, carry_apples_and_oranges) => not proceed(hummingbird, spot_right_after(spot_of(whale)))\nrule5() = not proceed(hummingbird, spot_right_after(spot_of(whale))) & prepare_armor(sheep, whale) => enemy(whale, kiwi)\nrule6() = has(canary, sharp_object) => raise_flag_of_peace(canary, whale)\nrule7(something) = not enemy(something, raven) => prepare_armor(something, whale)\nrule8() = show_cards(something, gecko) & enemy(something, kiwi) => points(something) == points(grasshopper)\nrule9(something) = not roll_dice(something, penguin) => not equal_points(something, grasshopper)\nrule10() = remove(something, piece_of(mosquito)) => proceed(something, spot_right_after(spot_of(whale)))\nrule11() = not needs_support(goldfish, whale) => not show_cards(whale, gecko)\nrule12() = respects(tiger, whale) => not enemy(whale, kiwi)\norder(rule10) > order(rule4) = True\norder(rule11) > order(rule1) = True\norder(rule12) > order(rule5) = True\norder(rule2) > order(rule3) = True\norder(rule2) > order(rule6) = True\norder(rule9) > order(rule8) = True\n\nhas(canary, basket) = True\nhas(canary, card_with(black_color)) = True\nhas(hummingbird, basket) = True\nnot enemy(sheep, raven) = True\n\nquestion = equal_points(whale, grasshopper)\n"}, {"idx": 381, "response": "name(caterpillar, Tarzan) == True\nname(amberjack, Tango) == True\nfirst_letter_of(name(caterpillar)) == first_letter_of(name(amberjack)) == True\nneeds_support(caterpillar, swordfish) = rule2()\nneeds_support(caterpillar, swordfish) == True\neat_food(swordfish, food_of(cricket)) = rule3()\neat_food(swordfish, food_of(cricket)) == True\nrespects(cricket, kiwi) = rule1()\nrespects(cricket, kiwi) == True\nquestion = True", "answer": 1, "code": "rule1() = eat_food(swordfish, food_of(cricket)) => respects(cricket, kiwi)\nrule2() = first_letter_of(name(caterpillar)) == first_letter_of(name(amberjack)) => needs_support(caterpillar, swordfish)\nrule3() = needs_support(caterpillar, swordfish) => eat_food(swordfish, food_of(cricket))\n\nname(amberjack, Tango) = True\nname(caterpillar, Tarzan) = True\nsing_song(caterpillar, victory_song_for(phoenix)) = True\n\nquestion = respects(cricket, kiwi)\n"}, {"idx": 382, "response": "not respect(kangaroo, hippopotamus) = rule5()\nrespect(kangaroo, hippopotamus) == False\nrespect(kangaroo, hippopotamus) == False\nquestion = False", "answer": -1, "code": "rule1() = not enemy(something, elephant) => raise_flag_of_peace(something, kangaroo)\nrule2() = not show_cards(something, starfish) => eat_food(something, food_of(kangaroo))\nrule3() = enemy(something, swordfish) => raise_flag_of_peace(something, kangaroo)\nrule4() = steal_points(something, 5, hummingbird) => learn(something, elementary_resource_management_from(grasshopper))\nrule5() = not respect(something, hippopotamus) => not respect(something, mosquito)\nrule6() = friends(kangaroo) > 6 => steal_points(kangaroo, 5, hummingbird)\nrule7() = wink(parrot, ferret) => not eat_food(ferret, food_of(kangaroo))\nrule8() = eat_food(ferret, food_of(kangaroo)) & raise_flag_of_peace(wolverine, kangaroo) => not respect(kangaroo, hippopotamus)\nrule9() = respect(panther, kangaroo) => respect(kangaroo, hippopotamus)\nrule10() = raise_flag_of_peace(lobster, kangaroo) => offer_job_position(kangaroo, penguin)\norder(rule7) > order(rule2) = True\norder(rule9) > order(rule8) = True\n\nfriends(kangaroo) = 16\nenemy(lobster, swordfish) = True\nowes_money_to(tilapia, squirrel) = True\nnot show_cards(ferret, starfish) = True\nnot enemy(wolverine, elephant) = True\n\nquestion = respect(kangaroo, mosquito)\n"}, {"idx": 383, "response": "not learn_elementary_resource_management_from(sheep, cheetah) = rule1(sheep)\nnot owes_money_to(sheep, tilapia) = False (unknown)\nwink(sheep, octopus) = rule1(sheep)\nwink(sheep, octopus) = True\nquestion = True", "answer": 1, "code": "rule1(something) = not learn_elementary_resource_management_from(something, cheetah) & not owes_money_to(something, tilapia) => wink(something, octopus)\nrule2() = show_all_cards(animal) => knows(defensive_plans_of(tilapia), sheep)\nrule3() = not raise_flag_of_peace(kiwi, aardvark) => burn(warehouse_of(sheep), aardvark)\nrule4() = knows(defensive_plans_of(canary), donkey) => not enemy(canary, sheep)\nrule5() = needs_support(turtle, sheep) => sing_song(sheep, victory_song_for(squirrel))\nrule6(something) = sing_song(something, victory_song_for(squirrel)) => not knows(defensive_plans_of(tilapia), something)\nrule7() = has(jellyfish, card_with(color_in_flag_of_france)) => not burn(warehouse_of(rabbit), jellyfish)\nrule8(animal) = eats_food_of(animal, hummingbird) => burn(warehouse_of(rabbit), animal)\nrule9() = burn(warehouse_of(rabbit), animal) => not learn_elementary_resource_management_from(sheep, cheetah)\norder(rule2) > order(rule6) = True\norder(rule8) > order(rule7) = True\n\npoints(baboon) == points(canary) = True\nknows(defensive_plans_of(canary), donkey) = True\neats_food_of(jellyfish, hummingbird) = True\nneeds_support(turtle, sheep) = True\nnot raise_flag_of_peace(kiwi, aardvark) = True\n\nquestion = wink(sheep, octopus)\n"}, {"idx": 384, "response": "holding(ferret, keys) == True\nnot has(ferret, keys) = rule2()\nhas(ferret, keys) == False\nhas(ferret, harmonica) == True\nnot hold_same_number_of_points(ferret, oscar) = rule5()\nhold_same_number_of_points(ferret, oscar) == False\nproceed(something, spot_right_after(spot_of(sea_bass))) = rule1()\nproceed(something, spot_right_after(spot_of(sea_bass))) == True\nproceed(something, spot_right_after(spot_of(sea_bass))) == True\ngive_magnifier(caterpillar, amberjack) = rule3()\ngive_magnifier(caterpillar, amberjack) == True\ngive_magnifier(caterpillar, amberjack) == True\nquestion = True", "answer": 1, "code": "rule1() = not hold_same_number_of_points(ferret, oscar) => proceed(oscar, spot_right_after(spot_of(sea_bass)))\nrule2() = not has(ferret, keys) => not hold_same_number_of_points(ferret, oscar)\nrule3() = proceed(something, spot_right_after(spot_of(sea_bass))) => give_magnifier(caterpillar, amberjack)\nrule4() = steal_points(gecko, 5, caterpillar) => not give_magnifier(caterpillar, amberjack)\nrule5() = has(ferret, musical_instrument) => not hold_same_number_of_points(ferret, oscar)\norder(rule4) > order(rule3) = True\n\nhas(ferret, harmonica) = True\nholding(ferret, keys) = True\n\nquestion = give_magnifier(caterpillar, amberjack)\n"}, {"idx": 385, "response": "not respects(baboon, hare) = rule4()\nrespects(baboon, hare) == False\nnot raise_flag_of_peace(hare, hippopotamus) = rule1()\nraise_flag_of_peace(hare, hippopotamus) == False\nquestion = False", "answer": -1, "code": "rule1() = not respects(baboon, hare) => not raise_flag_of_peace(hare, hippopotamus)\nrule2(something) = sing_song(something, victory_song_for(spider)) & not show_all_cards(something, meerkat) => raise_flag_of_peace(something, hippopotamus)\nrule3() = needs_support(something, caterpillar) => sing_song(hare, victory_song_for(spider))\nrule4(something) = not respects(something, lobster) => not respects(something, hare)\nrule5() = knock_down(fortress_of(meerkat), something) => needs_support(pig, caterpillar)\nrule6() = friends(baboon) < 7 => not respects(baboon, lobster)\nrule7(something) = not enemy(something, spider) => not respects(something, hare)\nrule8() = not respects(gecko, hare) & proceed(raven, spot_right_after(spot_of(hare))) => not sing_song(hare, victory_song_for(spider))\nrule9() = first_letter_of(name(baboon)) == first_letter_of(name(kiwi)) => not respects(baboon, lobster)\norder(rule2) > order(rule1) = True\norder(rule8) > order(rule3) = True\n\nhas(baboon, card_with(indigo_color)) = True\nfriends(baboon) = 11\nname(baboon, Bella) = True\nknock_down(fortress_of(meerkat), grasshopper) = True\nname(kiwi, Beauty) = True\nnot enemy(gecko, spider) = True\n\nquestion = raise_flag_of_peace(hare, hippopotamus)\n"}, {"idx": 386, "response": "has(elephant, card_with(violet_color)) == True\ncolor(card_with(violet_color)) == violet\nprepare_armor(elephant, canary) = rule6()\nprepare_armor(elephant, canary) == True\nnot attack_green_fields(cockroach, canary) = rule9()\nattack_green_fields(cockroach, canary) == False\nprepare_armor(canary, panther) = rule10()\nprepare_armor(canary, panther) == True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(something, leopard) => attack_green_fields(cockroach, canary)\nrule2() = has(elephant, drink) => needs_support(elephant, pig)\nrule3() = wink(viperfish, elephant) => not prepare_armor(elephant, canary)\nrule4() = has(kudu, sit_on) => prepare_armor(kudu, leopard)\nrule5() = sing_song(something, victory_song_for(swordfish)) => not needs_support(something, pig)\nrule6() = has(elephant, card) and color(card) in rainbow_colors => needs_support(elephant, pig)\nrule7() = first_letter_of(name(kudu)) == first_letter_of(name(sea_bass)) => prepare_armor(kudu, leopard)\nrule8() = respects(dog, elephant) => not attack_green_fields(elephant, eagle)\nrule9(something) = not attack_green_fields(something, eagle) & needs_support(something, pig) => prepare_armor(something, canary)\nrule10() = prepare_armor(elephant, canary) & not attack_green_fields(cockroach, canary) => prepare_armor(canary, panther)\norder(rule5) > order(rule2) = True\norder(rule5) > order(rule6) = True\norder(rule9) > order(rule3) = True\n\nrespects(dog, elephant) = True\nhas(elephant, card_with(violet_color)) = True\nhas(elephant, piano) = True\nhas(kudu, love_seat_sofa) = True\nname(kudu, Mojo) = True\nname(sea_bass, Casper) = True\nnot offer_job(elephant, dog) = True\n\nquestion = prepare_armor(canary, panther)\n"}, {"idx": 387, "response": "proceed(eel, spot_right_after(spot_of(squid))) == True\nrespects(squid, canary) = rule1()\nrespects(squid, canary) == True\nrespects(squid, canary) == True\nquestion = True", "answer": 1, "code": "rule1() = rolls_dice_for(something, whale) => respects(something, canary)\nrule2() = not show_cards(something, sun_bear) => points(something) == points(squid)\nrule3() = needs_support(something, cat) => rolls_dice_for(something, whale)\nrule4(something) = not owes_money_to(something, goldfish) & knows(defense_plan_of(leopard), something) => offer_job(something, squid)\nrule5() = proceed(eel, spot_right_after(spot_of(squid))) => needs_support(squid, cat)\n\nproceed(eel, spot_right_after(spot_of(squid))) = True\nknows(defense_plan_of(leopard), phoenix) = True\nnot owes_money_to(phoenix, goldfish) = True\nnot show_cards(octopus, sun_bear) = True\n\nquestion = respects(squid, canary)\n"}, {"idx": 388, "response": "not raise_flag_of_peace(octopus, raven) = rule1()\nnot raise_flag_of_peace(octopus, raven) == True\nnot give_magnifying_glass(squid, blobfish) = rule2()\nnot give_magnifying_glass(squid, blobfish) == True\nenemy(tilapia, salmon) = rule3(tilapia)\nenemy(tilapia, salmon) == True\nremove(tilapia, piece_of(doctorfish)) = rule3(tilapia)\nremove(tilapia, piece_of(doctorfish)) == True\nnot raise_flag_of_peace(tilapia, cheetah) = rule3(tilapia)\nnot raise_flag_of_peace(tilapia, cheetah) == True\nroll_dice(squid, tilapia) = rule4()\nroll_dice(aardvark) == True\nroll_dice(squid, tilapia) == True\nnot sing_song(tilapia, victory_song_for(starfish)) = rule5()\nnot sing_song(tilapia, victory_song_for(starfish)) == True\nraise_flag_of_peace(animal, cheetah) = rule7()\nraise_flag_of_peace(octopus, cheetah) == True\nraise_flag_of_peace(octopus, cheetah) == True\nquestion = True", "answer": 1, "code": "rule1() = not raise_flag_of_peace(octopus, raven) => prepare_armor(raven, octopus)\nrule2() = show_all_cards(pig, squid) => not give_magnifying_glass(squid, blobfish)\nrule3(something) = enemy(something, salmon) & remove(something, piece_of(doctorfish)) => not raise_flag_of_peace(something, cheetah)\nrule4() = roll_dice(squid, tilapia) if roll_dice(aardvark)\nrule5() = not sing_song(tilapia, victory_song_for(starfish)) if raise_flag_of_peace(animal, cheetah)\nrule6() = not prepare_armor(raven, octopus) if roll_dice(animal, elephant)\nrule7() = prepare_armor(raven, octopus) => raise_flag_of_peace(octopus, cheetah)\nrule8() = friends(spider) > 6 => prepare_armor(spider, meerkat)\nrule9() = raise_flag_of_peace(oscar, sheep) => owes_money_to(sheep, tilapia)\nrule10() = has(squid, sharp_object) => give_magnifying_glass(squid, blobfish)\nrule11() = give_magnifying_glass(animal, blobfish) => not roll_dice(animal, tilapia)\nrule12() = has(oscar, card_with(primary_color)) => raise_flag_of_peace(oscar, sheep)\nrule13() = raise_flag_of_peace(animal, tiger) => remove(octopus, piece_of(doctorfish))\norder(rule10) > order(rule2) = True\norder(rule3) > order(rule7) = True\norder(rule4) > order(rule11) = True\norder(rule6) > order(rule1) = True\n\nwinks(donkey, oscar) = True\nhas(oscar, card_with(blue_color)) = True\nshow_all_cards(pig, squid) = True\nraise_flag_of_peace(sheep, tiger) = True\nfriends(spider) = 13\nhas(squid, cutter) = True\nnot raise_flag_of_peace(octopus, raven) = True\n\nquestion = sing_song(tilapia, victory_song_for(starfish))\n"}, {"idx": 389, "response": "remove(cat, piece_of(aardvark)) == True\nnot enemy(cat, sun_bear) = rule3()\nenemy(cat, sun_bear) == False\neat_food(doctorfish, food_of(aardvark)) == True\nquestion = True", "answer": 1, "code": "rule1() = enemy(something, sun_bear) => eat_food(salmon, food_of(eel))\nrule2() = owes_money_to(cat, aardvark) & eat_food(doctorfish, food_of(aardvark)) => burn(warehouse_of(catfish), aardvark)\nrule3() = burn(warehouse_of(catfish), aardvark) => enemy(catfish, sun_bear)\n\nremove(cat, piece_of(aardvark)) = True\neat_food(doctorfish, food_of(aardvark)) = True\n\nquestion = eat_food(salmon, food_of(eel))\n"}, {"idx": 390, "response": "friends(polar_bear) = 1 + 4 = 5\nnot knock_down(panther, fortress_of(polar_bear)) = rule5()\nnot knock_down(panther, fortress_of(polar_bear)) == True\nnot knock_down(panther, fortress_of(polar_bear)) == True\nenemy(panther, donkey) = rule1()\nenemy(panther, donkey) == True\nenemy(panther, donkey) == True\nquestion = True", "answer": 1, "code": "rule1() = not knock_down(something, fortress_of(polar_bear)) => enemy(something, donkey)\nrule2() = friends(polar_bear) > 7 => not respect(polar_bear, panther)\nrule3(something) = give(something, magnifying_glass, tilapia) => not wink(something, panther)\nrule4() = has(polar_bear, card) and color(card) in rainbow_colors => not respect(polar_bear, panther)\nrule5() = not respect(polar_bear, panther) & not wink(rabbit, panther) => not knock_down(panther, fortress_of(polar_bear))\nrule6(something) = points(something) == points(pig) => not actual_enemy(panther, donkey)\norder(rule6) > order(rule1) = True\n\nfriends(polar_bear) = 1 + 4\nhas(polar_bear, card_with(red_color)) = True\ngive(rabbit, magnifier, tilapia) = True\n\nquestion = enemy(panther, donkey)\n"}, {"idx": 391, "response": "has(ferret, knapsack) == True\nsomething_to_carry(apples_and_oranges) == knapsack\nraise_flag_of_peace(ferret, dog) = rule1()\nraise_flag_of_peace(ferret, dog) == True\nnot knows(defense_plan_of(cat), lobster) = rule2()\nknows(defense_plan_of(cat), lobster) == False\nnot offer_job_position(doctorfish, tiger) = rule3(doctorfish)\noffer_job_position(doctorfish, tiger) == True\ngive_magnifier(cat, dog) = rule2()\ngive_magnifier(cat, dog) == True\ngive_magnifier(cat, dog) == True\nrespect(doctorfish, dog) = rule4()\nrespect(doctorfish, dog) == True\nrespect(doctorfish, dog) == True\nenemy(dog, goldfish) = rule4()\nenemy(dog, goldfish) == True\nenemy(dog, goldfish) == True\nprepare_armor(goldfish, pig) = rule5()\nprepare_armor(goldfish, pig) == False\nquestion = False", "answer": -1, "code": "rule1() = has(ferret, something_to_carry(apples_and_oranges)) => raise_flag_of_peace(ferret, dog)\nrule2() = not knows(defense_plan_of(cat), lobster) => give_magnifier(cat, dog)\nrule3(something) = not offer_job_position(something, tiger) => respect(something, dog)\nrule4() = give_magnifier(cat, dog) & respect(doctorfish, dog) => enemy(dog, goldfish)\nrule5() = enemy(dog, goldfish) => not prepare_armor(goldfish, pig)\n\nhas(ferret, knapsack) = True\nnot offer_job_position(doctorfish, tiger) = True\nnot knows(defense_plan_of(cat), lobster) = True\n\nquestion = prepare_armor(goldfish, pig)\n"}, {"idx": 392, "response": "name(koala, Peddi) = True\nname(bat, Luna) = True\nfirst_letter_of(name(koala)) == first_letter_of(name(bat)) = True\nattack(koala, green_fields_of(sheep)) = rule1()\nattack(koala, green_fields_of(sheep)) == True\nattack(koala, green_fields_of(sheep)) == True\nneeds_support(tiger, turtle) = rule2()\nneeds_support(tiger, turtle) == True\nneeds_support(tiger, turtle) == True\nattack(black_bear, green_fields_of(kangaroo)) = rule3()\nattack(black_bear, green_fields_of(kangaroo)) == False\nhas(black_bear, card_with(primary_color)) == True\nnot attack(black_bear, green_fields_of(kangaroo)) = rule3()\nnot attack(black_bear, green_fields_of(kangaroo)) == False\nremove(black_bear, piece_of(elephant)) == True\nnot show_cards(black_bear, goldfish) == True\nattack(black_bear, green_fields_of(kangaroo)) = rule4(black_bear)\nattack(black_bear, green_fields_of(kangaroo)) == True\nattack(black_bear, green_fields_of(kangaroo)) == True\npoints(kangaroo) != points(turtle) = rule5()\npoints(kangaroo) != points(turtle) == True\nfriends(koala) < 3 = rule6()\nfriends(koala) < 3 == True\nnot attack(koala, green_fields_of(sheep)) = rule6()\nnot attack(koala, green_fields_of(sheep)) == False\nneeds_support(tiger, turtle) == True\npoints(kangaroo) != points(turtle) == True\nroll_dice(turtle, ferret) = rule7()\nroll_dice(turtle, ferret) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(koala)) == first_letter_of(name(bat)) => attack(koala, green_fields_of(sheep))\nrule2() = attack(some_animal, green_fields_of(sheep)) => needs_support(tiger, turtle)\nrule3() = has(black_bear, card_with(primary_color)) => not attack(black_bear, green_fields_of(kangaroo))\nrule4(something) = remove(something, piece_of(elephant)) & not show_cards(something, goldfish) => attack(something, green_fields_of(kangaroo))\nrule5() = attack(black_bear, green_fields_of(kangaroo)) => points(kangaroo) != points(turtle)\nrule6() = friends(koala) < 3 => not attack(koala, green_fields_of(sheep))\nrule7() = needs_support(tiger, turtle) & points(kangaroo) != points(turtle) => roll_dice(turtle, ferret)\nrule8() = friends(black_bear) > 10 => not attack(black_bear, green_fields_of(kangaroo))\nrule9() = has(koala, time_machine) => not attack(koala, green_fields_of(sheep))\norder(rule3) > order(rule4) = True\norder(rule6) > order(rule1) = True\norder(rule8) > order(rule4) = True\norder(rule9) > order(rule1) = True\n\nname(bat, Luna) = True\nhas(black_bear, card_with(black_color)) = True\nremove(black_bear, piece_of(elephant)) = True\nhas(koala, time_machine) = True\nname(koala, Peddi) = True\nnot show_cards(black_bear, goldfish) = True\n\nquestion = roll_dice(turtle, ferret)\n"}, {"idx": 393, "response": "prepare_armor(octopus, eagle) == True\nknock_down(fortress_of(squirrel), doctorfish) = rule4()\nknock_down(fortress_of(squirrel), doctorfish) == True\nquestion = True", "answer": 1, "code": "rule1() = steals_points(something, 5, hippopotamus) => needs_support(something, kiwi)\nrule2() = not raise_flag_of_peace(something, viperfish) => burn(warehouse_of(eel), something)\nrule3(something) = burn(warehouse_of(eel), something) & needs_support(something, kiwi) => prepare_armor(something, grasshopper)\nrule4() = prepare_armor(something, grasshopper) => knock_down(fortress_of(squirrel), doctorfish)\n\nprepare_armor(octopus, eagle) = True\nsteals_points(whale, 5, hippopotamus) = True\nnot raise_flag_of_peace(whale, viperfish) = True\n\nquestion = knock_down(fortress_of(squirrel), doctorfish)\n"}, {"idx": 394, "response": "has(bat, card_with(green_color)) == True\nremove(bat, piece_of(panther)) = rule3()\nremove(bat, piece_of(panther)) == True\nhas(bat, arugula) == True\ngive_magnifier(bat, parrot) = rule6()\ngive_magnifier(bat, parrot) == True\ngive_magnifier(bat, parrot) == True\nequal_points(bat, wolverine) = rule1(bat)\nequal_points(bat, wolverine) == False\nowes_money_to(sheep, wolverine) = rule2(sheep)\nowes_money_to(sheep, wolverine) == False\nequal_points(bat, wolverine) == False\nowes_money_to(sheep, wolverine) == False\nattack_fields(wolverine, green_fields_owned_by(goldfish)) = rule5()\nattack_fields(wolverine, green_fields_owned_by(goldfish)) == False\nquestion = False", "answer": -1, "code": "rule1(something) = remove(something, piece_of(panther)) & give_magnifier(something, parrot) => equal_points(something, wolverine)\nrule2(something) = equal_points(something, koala) => owes_money_to(something, wolverine)\nrule3() = has(bat, card_with(color_starting_with(\"g\"))) => remove(bat, piece_of(panther))\nrule4() = has(sheep, musical_instrument) => equal_points(sheep, koala)\nrule5() = equal_points(bat, wolverine) & owes_money_to(sheep, wolverine) => not attack_fields(wolverine, green_fields_owned_by(goldfish))\nrule6() = friends(bat) > 5 => give_magnifier(bat, parrot)\nrule7() = has(bat, leafy_green_vegetable) => not give_magnifier(bat, parrot)\nrule8() = friends(sheep) < 1 => equal_points(sheep, koala)\norder(rule6) > order(rule7) = True\n\nfriends(bat, kind) = 5\nfriends(bat, not_kind) = 5\nhas(bat, card_with(green_color)) = True\nhas(bat, arugula) = True\nfriends(sheep, smart) = 3\nfriends(sheep, not_smart) = 1\nhas(sheep, flute) = True\n\nquestion = attack_fields(wolverine, green_fields_owned_by(goldfish))\n"}, {"idx": 395, "response": "raise_flag_of_peace(moose, crocodile) == True\nshow_cards(moose, penguin) == True\nnot sing_song(moose, victory_song_for(doctorfish)) == True\nnot knows(defense_plan_of(doctorfish), moose) = rule1(moose)\nnot knows(defense_plan_of(doctorfish), moose) == True\nshow_cards(moose, penguin) == True\nneeds_support(moose, cow) = rule1(moose)\nneeds_support(moose, cow) == True\nneeds_support(moose, cow) == True\nattack(ferret, green_fields_of(hippopotamus)) = rule2()\nattack(ferret, green_fields_of(hippopotamus)) == True\nattack(ferret, green_fields_of(hippopotamus)) == True\nsteal_points(ferret, 5, raven) = rule3(ferret)\nsteal_points(ferret, 5, raven) == True\nsteal_points(ferret, 5, raven) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not knows(defense_plan_of(doctorfish), something) & show_cards(something, penguin) => needs_support(something, cow)\nrule2() = needs_support(something, cow) => attack(ferret, green_fields_of(hippopotamus))\nrule3(something) = attack(something, green_fields_of(hippopotamus)) => steal_points(something, 5, raven)\n\nraise_flag_of_peace(moose, crocodile) = True\nshow_cards(moose, penguin) = True\nnot sing_song(moose, victory_song_for(doctorfish)) = True\n\nquestion = steal_points(ferret, 5, raven)\n"}, {"idx": 396, "response": "not respects(squirrel, cat) = True\nenemy(squirrel, puffin) = rule1()\nenemy(squirrel, puffin) == True\nenemy(squirrel, puffin) == True\nroll_dice(squirrel, turtle) = rule5(squirrel)\nroll_dice(squirrel, turtle) == True\nroll_dice(squirrel, turtle) == True\nraise_flag_of_peace(squirrel, canary) = rule10()\nraise_flag_of_peace(squirrel, canary) == True\nraise_flag_of_peace(squirrel, canary) == True\nquestion = True", "answer": 1, "code": "rule1() = not respects(something, cat) => enemy(something, puffin)\nrule2() = not show_cards(squid, squirrel) => roll_dice(squirrel, elephant)\nrule3() = has(goldfish, drink) => raise_flag_of_peace(goldfish, squirrel)\nrule4() = first_letter_of(name(squid)) == first_letter_of(name(elephant)) => not show_cards(squid, squirrel)\nrule5(something) = enemy(something, puffin) => roll_dice(something, turtle)\nrule6() = friends(squirrel) < 3 => not enemy(squirrel, puffin)\nrule7() = took_bike(doctorfish) => not steal_points(doctorfish, squirrel, 5)\nrule8(something) = knock_down_fortress(something, donkey) => not raise_flag_of_peace(something, canary)\nrule9() = friends(doctorfish) < 5 => not steal_points(doctorfish, squirrel, 5)\nrule10() = roll_dice(something, elephant) & not roll_dice(something, turtle) => raise_flag_of_peace(something, canary)\nrule11() = has(doctorfish, card_with(color_in(rainbow_colors))) => steal_points(doctorfish, squirrel, 5)\nrule12() = has(goldfish, carry_apples_and_oranges) => raise_flag_of_peace(goldfish, squirrel)\nrule13() = steal_points(doctorfish, squirrel, 5) & raise_flag_of_peace(goldfish, squirrel) => not roll_dice(squirrel, turtle)\norder(rule1) > order(rule6) = True\norder(rule11) > order(rule7) = True\norder(rule11) > order(rule9) = True\norder(rule13) > order(rule5) = True\norder(rule8) > order(rule10) = True\n\nhas(doctorfish, card_with(indigo_color)) = True\nfriends(doctorfish) = 10\ntook_bike(doctorfish) = True\nname(elephant, Lily) = True\nhas(goldfish, beer) = True\nhas(goldfish, hot_chocolate) = True\nneeds_support(jellyfish, cow) = True\nname(squid, Luna) = True\nwinks(squid, tiger) = True\nfriends(squirrel) = 10\nreduce_work_hours(squirrel) = True\nnot respects(squirrel, cat) = True\n\nquestion = raise_flag_of_peace(squirrel, canary)\n"}, {"idx": 397, "response": "has(amberjack, club_chair) == True\nhas(amberjack, spinach) == True\nnot give_magnifier(amberjack, grasshopper) = rule3()\ngive_magnifier(amberjack, grasshopper) == False\nraise_flag_of_peace(goldfish, sheep) == True\ngive_magnifier(goldfish, grasshopper) = rule8()\ngive_magnifier(goldfish, grasshopper) == True\ngive_magnifier(goldfish, grasshopper) == True\nburn(warehouse_of(viperfish)) == True\nraise_flag_of_peace(spider, black_bear) == True\nknows_defense_plan(lion, elephant) = rule6()\nknows_defense_plan(lion, elephant) == True\nknows_defense_plan(lion, elephant) == True\nneeds_support(spider, panda_bear) = rule7(spider)\nneeds_support(spider, panda_bear) == True\nneeds_support(spider, panda_bear) == True\nnot attack(green_fields_of(phoenix)) = rule5(spider)\nattack(green_fields_of(lion, phoenix)) == False\nattack(green_fields_of(lion, phoenix)) == False\nquestion = False", "answer": -1, "code": "rule1() = has(salmon, card_with(color_in(flag_of_italy))) => burn(warehouse_of(hippopotamus))\nrule2() = not attack(green_fields_of(lion)) => wink(lion, panda_bear)\nrule3() = has(amberjack, sharp_object) => not give_magnifier(amberjack, grasshopper)\nrule4() = has(amberjack, leafy_green_vegetable) => not give_magnifier(amberjack, grasshopper)\nrule5(something) = wink(something, panda_bear) & needs_support(something, panda_bear) => not attack(green_fields_of(phoenix))\nrule6() = raise_flag_of_peace(something, black_bear) => knows_defense_plan(lion, elephant)\nrule7(something) = knows_defensive_plans(something, elephant) => needs_support(something, panda_bear)\nrule8() = give_magnifier(goldfish, grasshopper) => burn(warehouse_of(viperfish))\nrule9() = raise_flag_of_peace(something, sheep) => give_magnifier(something, grasshopper)\nrule10() = not respect(doctorfish, wolverine) & not become_enemy(donkey, wolverine) => never_attack(green_fields_of(lion))\n\nhas(amberjack, club_chair) = True\nhas(amberjack, spinach) = True\nraise_flag_of_peace(goldfish, sheep) = True\nhas(salmon, card_with(green_color)) = True\nraise_flag_of_peace(spider, black_bear) = True\nsupports(wolverine, Chris_Ronaldo) = True\nnot respect(doctorfish, wolverine) = True\nnot become_enemy(donkey, wolverine) = True\n\nquestion = attack(green_fields_of(lion, phoenix))\n"}, {"idx": 398, "response": "not respects(cow, panda_bear) = rule1()\nrespects(cow, panda_bear) == False\norder(rule2) > order(rule1) = True\nroll_dice(panda_bear, swordfish) = rule2(panda_bear)\nroll_dice(panda_bear, swordfish) == not roll_dice(panda_bear, swordfish)\nquestion = not roll_dice(panda_bear, swordfish)", "answer": 0, "code": "rule1() = not respects(cow, panda_bear) => roll_dice(panda_bear, swordfish)\nrule2(something) = attacks(something, green_fields_of(spider)) => not roll_dice(something, swordfish)\nrule3(something) = not give(something, magnifying_glass, ferret) => not raise_flag_of_peace(something, lion)\nrule4() = first_letter_of(name(squid)) == first_letter_of(name(salmon)) => burn(warehouse_of(cow), squid)\nrule5(something) = not raise_flag_of_peace(something, kiwi) & roll_dice(something, koala) => points(something) == points(cow)\nrule6() = has(penguin, musical_instrument) => raise_flag_of_peace(penguin, lion)\nrule7() = respects(something, whale) => not burn(warehouse_of(cow), squid)\nrule8() = raise_flag_of_peace(something, lion) => respects(cow, panda_bear)\norder(rule2) > order(rule1) = True\norder(rule6) > order(rule3) = True\norder(rule7) > order(rule4) = True\n\noffer_job(doctorfish, kiwi) = True\nroll_dice(doctorfish, koala) = True\nhas(penguin, violin) = True\nname(salmon, Tango) = True\nname(squid, Tessa) = True\n\nquestion = roll_dice(panda_bear, swordfish)\n"}, {"idx": 399, "response": "remove(doctorfish, piece_of(donkey)) == True\nnot steal_points(doctorfish, 5, tilapia) == True\nsteal_points(doctorfish, 5, tilapia) == False\nprepare_armor(phoenix, black_bear) = rule5()\nprepare_armor(phoenix, black_bear) == True\nprepare_armor(phoenix, black_bear) == True\nremove(black_bear, piece_of(goldfish)) = question\nremove(black_bear, piece_of(goldfish)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not steal_points(something, 5, tilapia) & remove(something, piece_of(donkey)) => owes_money_to(something, phoenix)\nrule2(something) = enemy(something, hippopotamus) => burn(warehouse_of(phoenix), something)\nrule3() = has(buffalo, card_with(color_in_flag_of_Japan)) => not burn(warehouse_of(phoenix), buffalo)\nrule4() = burn(warehouse_of(phoenix), buffalo) & owes_money_to(doctorfish, phoenix) => prepare_armor(phoenix, black_bear)\nrule5() = prepare_armor(phoenix, black_bear) => remove(black_bear, piece_of(goldfish))\norder(rule3) > order(rule2) = True\n\nenemy(buffalo, hippopotamus) = True\nremove(doctorfish, piece_of(donkey)) = True\nnot steal_points(doctorfish, 5, tilapia) = True\n\nquestion = remove(black_bear, piece_of(goldfish))\n"}, {"idx": 400, "response": "friends(aardvark) = 10\nwinks(aardvark, tiger) = rule5()\nwinks(aardvark, tiger) == True\nwinks(aardvark, tiger) == True\nbelief(aardvark_winks_at(tiger)) = True\nnot burn(warehouse_of(tiger), hare) = rule4()\nburn(warehouse_of(tiger), hare) == False\nburn(warehouse_of(tiger), hare) == False\noffer_job(tiger, crocodile) = rule3()\noffer_job(tiger, crocodile) == True\noffer_job(tiger, crocodile) == True\nsame_points(crocodile, spider) = rule1()\nsame_points(crocodile, spider) == False\nsame_points(crocodile, spider) == False\nquestion = False", "answer": -1, "code": "rule1() = offer_job(tiger, crocodile) => not same_points(crocodile, spider)\nrule2() = needs_support(something, cat) => not offer_job(something, crocodile)\nrule3() = belief(aardvark_winks_at(tiger)) & not burn(warehouse_of(tiger), hare) => offer_job(tiger, crocodile)\nrule4() = has(hare, drink) => not burn(warehouse_of(tiger), hare)\nrule5() = friends(aardvark) > 8 => winks(aardvark, tiger)\norder(rule2) > order(rule3) = True\n\nfriends(aardvark) = 10\nhas(hare, beer) = True\n\nquestion = same_points(crocodile, spider)\n"}, {"idx": 401, "response": "knows_defense_plan(whale, sea_bass) = rule2()\nknows_defense_plan(whale, sea_bass) == True\nenemy(sea_bass, kangaroo) = rule3()\nenemy(sea_bass, kangaroo) == not enemy(sea_bass, kangaroo)\nenemy(sea_bass, kangaroo) == not enemy(sea_bass, kangaroo)\nquestion = not enemy(sea_bass, kangaroo)", "answer": 0, "code": "rule1() = holds_equal_points(something, squirrel) => learn_elementary_resource_management(halibut, whale)\nrule2() = knows_defense_plan(whale, sea_bass) => enemy(sea_bass, kangaroo)\nrule3() = knows_defense_plan(carp, sea_bass) => not enemy(sea_bass, kangaroo)\nrule4() = owns(viperfish, luxury_aircraft) => burn(warehouse_of(whale), viperfish)\nrule5() = learn_elementary_resource_management(halibut, whale) & burn(warehouse_of(whale), viperfish) => knows_defense_plan(whale, sea_bass)\nrule6() = first_letter_of(name(viperfish)) == first_letter_of(name(sun_bear)) => burn(warehouse_of(whale), viperfish)\norder(rule2) > order(rule3) = True\n\nknock_down(penguin, fortress_of(squirrel)) = True\nname(sun_bear, Pashmak) = True\nname(viperfish, Meadow) = True\nprepares_armor(viperfish, parrot) = True\nowns(viperfish, luxury_aircraft) = True\n\nquestion = enemy(sea_bass, kangaroo)\n"}, {"idx": 402, "response": "needs_support(ferret, turtle) == True\nwink(turtle, carp) = rule3()\nwink(turtle, carp) == True\nwink(turtle, carp) == True\nadd_conclusion(\"the carp burns the warehouse of the sheep\") = rule1()\nadd_conclusion(\"the carp burns the warehouse of the sheep\") == True\nburn(warehouse_of(sheep), something) = rule2()\nburn(warehouse_of(sheep), something) == True\nburn(warehouse_of(sheep), something) == True\nneeds_support(moose, catfish) = True\nquestion = True", "answer": 1, "code": "rule1() = belief(carp, learns_basics_of_resource_management_from(halibut)) & wink(turtle, carp) => add_conclusion(\"the carp burns the warehouse of the sheep\")\nrule2() = burn(warehouse_of(sheep), something) => needs_support(moose, catfish)\nrule3() = needs_support(ferret, turtle) => wink(turtle, carp)\nrule4() = took_bike(halibut, store) => learns(halibut, elementary_resource_management_from(carp))\n\nneeds_support(ferret, turtle) = True\ntook_bike(halibut, store) = True\n\nquestion = needs_support(moose, catfish)\n"}, {"idx": 403, "response": "not knock_down(fortress_of(swordfish), crocodile) = True\nprepare_armor(swordfish, dog) = rule3()\nprepare_armor(swordfish, dog) == False\nnot prepare_armor(swordfish, dog) == True\nowes_money_to(dog, amberjack) = rule1()\nowes_money_to(dog, amberjack) == True\nsame_number_of_points(lobster, sun_bear) = question\nsame_number_of_points(lobster, sun_bear) == unknown", "answer": 0, "code": "rule1() = not prepare_armor(swordfish, dog) => owes_money_to(dog, amberjack)\nrule2(something) = offer_job(something, ferret) => prepare_armor(something, dog)\nrule3() = not knock_down(fortress_of(swordfish), crocodile) => not prepare_armor(swordfish, dog)\nrule4() = owes_money_to(something, amberjack) => not same_number_of_points(lobster, sun_bear)\norder(rule2) > order(rule3) = True\n\nnot knock_down(fortress_of(swordfish), crocodile) = True\n\nquestion = same_number_of_points(lobster, sun_bear)\n"}, {"idx": 404, "response": "lost_keys(gecko) == True\nnot has(gecko, keys) = rule2()\nhas(gecko, keys) == False\nprepare_armor(gecko, swordfish) = rule2()\nprepare_armor(gecko, swordfish) == True\nprepare_armor(gecko, swordfish) == True\nnot owes_money_to(swordfish, eel) = rule6()\nowes_money_to(swordfish, eel) == False\nprepare_armor(eel, grasshopper) = rule6()\nprepare_armor(eel, grasshopper) == True\nprepare_armor(eel, grasshopper) == True\nquestion = True", "answer": 1, "code": "rule1() = sing_song(animal, victory_song_for(eagle)) => attack(cat, green_fields_of(swordfish))\nrule2() = not has(gecko, keys) => prepare_armor(gecko, swordfish)\nrule3() = has(blobfish, musical_instrument) => not attack(blobfish, green_fields_of(lobster))\nrule4() = created_time_machine(blobfish) => attack(blobfish, green_fields_of(lobster))\nrule5() = has(blobfish, leafy_green_vegetable) => not attack(blobfish, green_fields_of(lobster))\nrule6() = not owes_money_to(swordfish, eel) => prepare_armor(eel, grasshopper)\nrule7() = first_letter_of(name(blobfish)) == first_letter_of(name(lobster)) => attack(blobfish, green_fields_of(lobster))\nrule8() = attack(animal, green_fields_of(lobster)) => not owes_money_to(swordfish, eel)\norder(rule4) > order(rule3) = True\norder(rule4) > order(rule5) = True\norder(rule7) > order(rule3) = True\norder(rule7) > order(rule5) = True\n\nhas(blobfish, harmonica) = True\nhas(blobfish, trumpet) = True\nstruggles_to_find_food(blobfish) = True\nname(blobfish, Beauty) = True\nlost_keys(gecko) = True\nname(lobster, Chickpea) = True\nsing_song(tilapia, victory_song_for(eagle)) = True\n\nquestion = prepare_armor(eel, grasshopper)\n"}, {"idx": 405, "response": "knows_defense_plan(catfish, sheep) = rule1()\nhas(catfish, card_with(color_starting_with(\"b\"))) == True\nknows_defense_plan(catfish, sheep) == True\nattack(green_fields_of(halibut)) = rule2()\nattack(green_fields_of(halibut)) == True\nattack(green_fields_of(halibut)) == True\nnot wink(meerkat, tiger) = rule3()\nwink(meerkat, tiger) == False\nwink(meerkat, tiger) == False\nburn(warehouse_of(rabbit), meerkat) = rule4(meerkat)\nburn(warehouse_of(rabbit), meerkat) == False\nnot remove(meerkat, piece_of(cow)) = rule7(meerkat)\nremove(meerkat, piece_of(cow)) == False\nremove(meerkat, piece_of(cow)) == False\nremove(meerkat, piece_of(baboon)) = rule7(meerkat)\nremove(meerkat, piece_of(baboon)) == True\nremove(meerkat, piece_of(baboon)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(catfish, card_with(color_starting_with(\"b\"))) => knows_defense_plan(catfish, sheep)\nrule2() = attack(green_fields_of(halibut)) => not wink(something, tiger)\nrule3() = knows_defense_plan(something, sheep) => wink(meerkat, tiger)\nrule4(something) = burn(warehouse_of(rabbit), something) => not remove(something, piece_of(cow))\nrule5() = owns(catfish, luxury_aircraft) => knows_defense_plan(catfish, sheep)\nrule6() = needs_support(something, lobster) => not eat_food(caterpillar, food_of(meerkat))\nrule7(something) = wink(something, tiger) & remove(something, piece_of(cow)) => remove(something, piece_of(baboon))\nrule8() = not eat_food(caterpillar, food_of(meerkat)) => remove(meerkat, piece_of(cow))\nrule9() = knows_defense_plan(octopus, caterpillar) & prepare_armor(ferret, caterpillar) => eat_food(caterpillar, food_of(meerkat))\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule8) = True\norder(rule6) > order(rule9) = True\n\ndreamed_of(catfish, luxury_aircraft) = True\nnot steal_points(catfish, 5, buffalo) = True\nhas(catfish, card_with(black_color)) = True\nprepare_armor(ferret, caterpillar) = True\nknows_defense_plan(octopus, caterpillar) = True\nneeds_support(rabbit, lobster) = True\n\nquestion = remove(meerkat, piece_of(baboon))\n"}, {"idx": 406, "response": "not remove(carp, piece_of(catfish)) = rule8()\nremove(carp, piece_of(catfish)) == False\nprepare_armor(carp, hare) = rule8()\nprepare_armor(carp, hare) == True\nquestion = True", "answer": 1, "code": "rule1() = has(salmon, card_with(color_in_flag_of(Belgium))) => not owes_money_to(salmon, hummingbird)\nrule2() = knock_down(fortress_of(panda_bear), something) => not roll_dice(sheep, hummingbird)\nrule3(something) = not learn_basics_of_resource_management(something, koala) => not steal_points(something, 5, crocodile)\nrule4() = friends(salmon) < 9 => not owes_money_to(salmon, hummingbird)\nrule5() = not roll_dice(sheep, hummingbird) & not owes_money_to(salmon, hummingbird) => steal_points(hummingbird, 5, crocodile)\nrule6() = steal_points(something, 5, crocodile) => not prepare_armor(carp, hare)\nrule7() = prepare_armor(something, tiger) & not roll_dice(something, polar_bear) => roll_dice(something, hummingbird)\nrule8() = not remove(something, piece_of(catfish)) => prepare_armor(something, hare)\norder(rule3) > order(rule5) = True\norder(rule7) > order(rule2) = True\norder(rule8) > order(rule6) = True\n\noffer_job(meerkat, phoenix) = True\nfriends(salmon) = 5\nhas(salmon, card_with(violet_color)) = True\nknock_down(fortress_of(panda_bear), spider) = True\nnot roll_dice(sheep, polar_bear) = True\n\nquestion = prepare_armor(carp, hare)\n"}, {"idx": 407, "response": "points(aardvark) == points(baboon) = True\nquestion = True", "answer": 1, "code": "rule1(something) = not knows(defensive_plans_of(panda_bear), something) => proceed(something, spot_right_after(spot_of(baboon)))\nrule2(something) = not sing_song(something, victory_song_for(donkey)) => actual_enemy(something, lion)\nrule3(something) = proceed(something, spot_right_after(spot_of(baboon))) & not actual_enemy(something, lion) => points(something) == points(buffalo)\nrule4() = has(grizzly_bear, musical_instrument) => offer_job_position(grizzly_bear, aardvark)\nrule5() = remove(black_bear, piece_of(aardvark)) & steal_points(whale, 5, aardvark) => knows(defensive_plans_of(panda_bear), aardvark)\nrule6() = not offer_job_position(grizzly_bear, aardvark) => not actual_enemy(aardvark, lion)\nrule7() = not raise_flag_of_peace(polar_bear, hummingbird) => prepare_armor(hummingbird, aardvark)\nrule8(something) = points(something) == points(baboon) => not knows(defensive_plans_of(panda_bear), something)\norder(rule5) > order(rule8) = True\norder(rule6) > order(rule2) = True\n\npoints(aardvark) == points(baboon) = True\nowes_money_to(cheetah, kiwi) = True\nhas(grizzly_bear, saxophone) = True\nsteal_points(whale, 5, aardvark) = True\nnot raise_flag_of_peace(polar_bear, hummingbird) = True\n\nquestion = points(aardvark) == points(buffalo)\n"}, {"idx": 408, "response": "friends(baboon) = 9\nfriends(rabbit) = 6\nname(baboon, Lucy) = True\nname(phoenix, Pashmak) = True\nname(swordfish, Max) = True\nremove(elephant, piece_of(black_bear)) = rule3()\nremove(elephant, piece_of(black_bear)) == True\nquestion = True", "answer": 1, "code": "rule1() = not eat_food(baboon, food_of(squirrel)) & owes_money_to(rabbit, squirrel) => add_conclusion(\"the squirrel shows all her cards to the elephant\")\nrule2() = first_letter_of(name(rabbit)) == first_letter_of(name(phoenix)) => not owes_money_to(rabbit, squirrel)\nrule3() = show_cards(squirrel, elephant) => remove(elephant, piece_of(black_bear))\nrule4() = friends(rabbit) > 5 => owes_money_to(rabbit, squirrel)\nrule5() = friends(baboon) < 19 => not eat_food(baboon, food_of(squirrel))\nrule6() = first_letter_of(name(baboon)) == first_letter_of(name(swordfish)) => not eat_food(baboon, food_of(squirrel))\nrule7() = proceed(hippopotamus, spot_right_after(spot_of(squirrel))) => not show_cards(squirrel, elephant)\norder(rule2) > order(rule4) = True\norder(rule7) > order(rule1) = True\n\nfriends(baboon) = 4 + 5 = 9\nname(baboon, Lucy) = True\nname(phoenix, Pashmak) = True\nfriends(rabbit) = 6\nname(swordfish, Max) = True\n\nquestion = remove(elephant, piece_of(black_bear))\n"}, {"idx": 409, "response": "question = unknown", "answer": 0, "code": "rule1() = enemy(panda_bear, aardvark) => roll_dice(aardvark, eel)\nrule2(something) = remove(something, piece_of(crocodile)) => not roll_dice(something, eel)\nrule3() = roll_dice(aardvark, eel) & respects(sun_bear, eel) => not roll_dice(eel, viperfish)\nrule4() = show_cards(buffalo, eel) => roll_dice(eel, viperfish)\nrule5() = friends(penguin) > 10 => not equal_points(penguin, eel)\nrule6() = has(penguin, card_with(color_in(rainbow_colors))) => not equal_points(penguin, eel)\nrule7(something) = not roll_dice(something, mosquito) & roll_dice(something, viperfish) => not learn(something, elementary_resource_management_from(bat))\nrule8() = not equal_points(penguin, eel) => not roll_dice(eel, mosquito)\nrule9() = first_letter_of(name(buffalo)) == first_letter_of(name(grizzly_bear)) => show_cards(buffalo, eel)\norder(rule2) > order(rule1) = True\norder(rule3) > order(rule4) = True\n\nname(buffalo, Pablo) = True\nname(grizzly_bear, Paco) = True\nenemy(panda_bear, aardvark) = True\nfriends(penguin) = 2\nsupports(penguin, Chris_Ronaldo) = True\nhas(penguin, card_with(blue_color)) = True\n\nquestion = learn(eel, basics_of_resource_management_from(bat))\n"}, {"idx": 410, "response": "attacks_green_fields(lion, gecko) == True\nnot gives_magnifying_glass(lion, swordfish) = rule4()\ngives_magnifying_glass(lion, swordfish) == False\nsings_song(lion, victory_song_for(crocodile)) = rule11()\nsings_song(lion, victory_song_for(crocodile)) == True\nsings_song(lion, victory_song_for(crocodile)) == True\nraises_flag_of_peace(lion, catfish) = rule6()\nraises_flag_of_peace(lion, catfish) == True\nraises_flag_of_peace(lion, catfish) == True\nquestion = True", "answer": 1, "code": "rule1() = eats_food(something, food_of(starfish)) => not actual_enemy(buffalo, puffin)\nrule2() = gives_magnifier(something, goldfish) => not wink(oscar, lion)\nrule3() = first_letter_of(name(turtle)) == first_letter_of(name(caterpillar)) => learn_basics_of_resource_management(turtle, cheetah)\nrule4() = attacks_green_fields(something, gecko) => not gives_magnifying_glass(something, swordfish)\nrule5() = becomes_enemy(something, puffin) => steals_points(lion, 5, cat)\nrule6() = steals_points(something, 5, cat) & sings_song(something, victory_song_for(crocodile)) => raises_flag_of_peace(something, catfish)\nrule7() = respects(swordfish, lion) & not wink(oscar, lion) => never_raise_flag_of_peace(lion, catfish)\nrule8() = eats_food(black_bear, food_of(buffalo)) => actual_enemy(buffalo, puffin)\nrule9() = needs_support(something, goldfish) => gives_magnifier(grizzly_bear, goldfish)\nrule10() = not burn(warehouse_of(polar_bear), something) => wink(something, lion)\nrule11() = not gives_magnifier(something, swordfish) => sings_song(something, victory_song_for(crocodile))\norder(rule1) > order(rule8) = True\norder(rule10) > order(rule2) = True\norder(rule7) > order(rule6) = True\n\nprepares_armor(black_bear, buffalo) = True\nname(caterpillar, Peddi) = True\nattacks_green_fields(lion, gecko) = True\nneeds_support(penguin, goldfish) = True\nname(turtle, Pashmak) = True\n\nquestion = raises_flag_of_peace(lion, catfish)\n"}, {"idx": 411, "response": "has(catfish, kale) == True\nremove(catfish, piece_of(grasshopper)) = rule3()\nremove(catfish, piece_of(grasshopper)) == True\nremove(catfish, piece_of(grasshopper)) == True\nowe_money_to(catfish, sea_bass) = rule4(catfish)\nowe_money_to(catfish, sea_bass) == True\nowe_money_to(tiger, sea_bass) == True\nknows_defensive_plans(sea_bass, gecko) = rule6()\nknows_defensive_plans(sea_bass, gecko) == True\nknows_defensive_plans(sea_bass, gecko) == True\nquestion = True", "answer": 1, "code": "rule1() = proceed(something, spot_right_after(spot_of(carp))) => not owe_money_to(tiger, sea_bass)\nrule2() = friends(tiger) > 3 => proceed(tiger, spot_right_after(spot_of(crocodile)))\nrule3() = has(catfish, leafy_green_vegetable) => remove(catfish, piece_of(grasshopper))\nrule4(something) = remove(something, piece_of(grasshopper)) => owe_money_to(something, sea_bass)\nrule5() = remove(black_bear, piece_of(catfish)) => not remove(catfish, piece_of(grasshopper))\nrule6() = owe_money_to(catfish, sea_bass) & owe_money_to(tiger, sea_bass) => knows_defensive_plans(sea_bass, gecko)\nrule7(something) = proceed(something, spot_right_after(spot_of(crocodile))) => owe_money_to(something, sea_bass)\nrule8() = fan_of(tiger, Chris_Ronaldo) => proceed(tiger, spot_right_after(spot_of(crocodile)))\norder(rule1) > order(rule7) = True\norder(rule5) > order(rule3) = True\n\nhas(catfish, kale) = True\nfriends(tiger) = 11\nhates(tiger, Chris_Ronaldo) = True\n\nquestion = knows_defensive_plans(sea_bass, gecko)\n"}, {"idx": 412, "response": "name(kangaroo, Lucy) == True\nname(parrot, Lily) == True\nfirst_letter_of(name(parrot)) == first_letter_of(name(kangaroo)) == True\nshow_cards(parrot, grasshopper) = rule2()\nshow_cards(parrot, grasshopper) == True\nshow_cards(parrot, grasshopper) == True\nsteal_points(dog, 5, rabbit) = rule1()\nsteal_points(dog, 5, rabbit) == True\nsteal_points(dog, 5, rabbit) == True\nnot learn_basics_of_resource_management(dog, hippopotamus) = rule3(dog)\nlearn_basics_of_resource_management(dog, hippopotamus) == False\nlearn_basics_of_resource_management(dog, hippopotamus) == False\nquestion = False", "answer": -1, "code": "rule1() = show_cards(someone, grasshopper) => steal_points(dog, 5, rabbit)\nrule2() = first_letter_of(name(parrot)) == first_letter_of(name(kangaroo)) => show_cards(parrot, grasshopper)\nrule3(something) = steal_points(something, 5, rabbit) => not learn_basics_of_resource_management(something, hippopotamus)\n\nname(kangaroo, Lucy) = True\nname(parrot, Lily) = True\n\nquestion = learn_basics_of_resource_management(dog, hippopotamus)\n"}, {"idx": 413, "response": "name(rabbit, Roger) = True\nname(dog, Max) = True\nenemy(rabbit, dog) = unknown\nquestion = unknown", "answer": 0, "code": "rule1() = first_letter_of(name(viperfish)) == first_letter_of(name(tiger)) => not enemy(viperfish, rabbit)\nrule2(something) = not owes_money_to(something, cockroach) => not respect(something, rabbit)\nrule3(something) = not raise_flag_of_peace(something, koala) => respect(something, sheep)\nrule4() = first_letter_of(name(crocodile)) == first_letter_of(name(elephant)) => not give_magnifying_glass(crocodile, rabbit)\nrule5(something) = respects(something, sheep) => not enemy(something, dog)\nrule6(something) = burn(warehouse_of(crocodile), something) & sing_song(something, victory_song_for(jellyfish)) => enemy(something, dog)\nrule7() = took(viperfish, bike_from(store)) => not enemy(viperfish, rabbit)\nrule8(something) = respects(something, grasshopper) => steal_points(puffin, 5, rabbit)\nrule9() = knows(defense_plan_of(doctorfish), something) => not raise_flag_of_peace(rabbit, koala)\nrule10() = give_magnifying_glass(crocodile, rabbit) => burn(warehouse_of(crocodile), rabbit)\nrule11() = steal_points(puffin, 5, rabbit) & not enemy(viperfish, rabbit) => sing_song(rabbit, victory_song_for(jellyfish))\nrule12() = friends(crocodile) < 15 => not give_magnifying_glass(crocodile, rabbit)\norder(rule6) > order(rule5) = True\n\nrespects(carp, grasshopper) = True\nfriends(crocodile) = 5\nname(crocodile, Paco) = True\nname(elephant, Charlie) = True\nburn(warehouse_of(polar_bear), penguin) = True\nhas(rabbit, card_with(green_color)) = True\nrespects(raven, doctorfish) = True\nname(tiger, Casper) = True\nname(viperfish, Tango) = True\ntook(viperfish, bike_from(store)) = True\nowes_money_to(penguin, cockroach) = False\n\nquestion = enemy(rabbit, dog)\n"}, {"idx": 414, "response": "has(raven, plastic_bag) == True\nreduce_work_hours(raven) = rule1()\nnot enemy(raven, mosquito) == True\nhas(raven, musical_instrument) = False\nfirst_letter_of(name(raven)) == first_letter_of(name(zander)) = rule3()\nfirst_letter_of(name(raven)) == first_letter_of(name(zander)) == True\nenemy(raven, mosquito) = rule2()\nenemy(raven, mosquito) == True\nenemy(raven, mosquito) == True\noffer_job(raven, black_bear) = rule4(raven)\noffer_job(raven, black_bear) == True\nexists(animal, offer_job(animal, black_bear)) = rule5()\nexists(animal, offer_job(animal, black_bear)) == True\nknows(defensive_plans_of(kangaroo), squirrel) = question\nknows(defensive_plans_of(kangaroo), squirrel) = unknown", "answer": 0, "code": "rule1() = reduce_work_hours(raven) => not enemy(raven, mosquito)\nrule2() = has(raven, musical_instrument) => enemy(raven, mosquito)\nrule3() = first_letter_of(name(raven)) == first_letter_of(name(zander)) => enemy(raven, mosquito)\nrule4(something) = enemy(something, mosquito) => offer_job(something, black_bear)\nrule5() = exists(animal, offer_job(animal, black_bear)) => knows(defensive_plans_of(kangaroo), squirrel)\norder(rule1) > order(rule2) = True\norder(rule1) > order(rule3) = True\n\nhas(raven, plastic_bag) = True\nname(raven, Milo) = True\nname(zander, Mojo) = True\n\nquestion = knows(defensive_plans_of(kangaroo), squirrel)\n"}, {"idx": 415, "response": "has_high_salary(gecko) == True\nnot give_magnifying_glass(gecko, leopard) = rule1()\ngive_magnifying_glass(gecko, leopard) == False\nbelief(snail_gives_magnifier_to(panther)) = True\nleopard_needs_support(leopard, panther) = True\nnot learn_basics_of_resource_management(panther, jellyfish) = rule2()\nlearn_basics_of_resource_management(panther, jellyfish) == False\nhas(gecko, card_with(color_in_flag_of_france)) = True\nnot give_magnifying_glass(gecko, leopard) = rule3()\ngive_magnifying_glass(gecko, leopard) == False\ngive_magnifying_glass(something, wolverine) = rule4()\ngive_magnifying_glass(snail, panther) == True\nfriends(buffalo) = 4\ngive_magnifying_glass(buffalo, wolverine) = rule5()\ngive_magnifying_glass(buffalo, wolverine) == True\nnot give_magnifying_glass(gecko, leopard) = rule6()\nleopard_needs_support(leopard, panther) == True\nquestion = False", "answer": -1, "code": "rule1() = has_high_salary(gecko) => not give_magnifying_glass(gecko, leopard)\nrule2() = belief(snail_gives_magnifier_to(panther)) & leopard_needs_support(leopard, panther) => not learn_basics_of_resource_management(panther, jellyfish)\nrule3() = has(gecko, card_with(color_in_flag_of_france)) => not give_magnifying_glass(gecko, leopard)\nrule4() = give_magnifying_glass(something, wolverine) => give_magnifying_glass(snail, panther)\nrule5() = friends(buffalo) < 10 => give_magnifying_glass(buffalo, wolverine)\nrule6() = not give_magnifying_glass(gecko, leopard) => leopard_needs_support(leopard, panther)\n\nfriends(buffalo) = 1 + 3\nhas_high_salary(gecko) = True\nhas(gecko, card_with(black_color)) = True\n\nquestion = learn_basics_of_resource_management(panther, jellyfish)\n"}, {"idx": 416, "response": "not learn_basics_of_resource_management(cat, canary) = True\nlearn_basics_of_resource_management(cat, canary) == False\nbecome_enemy(moose, kangaroo) = True\nnot become_enemy(moose, hummingbird) = True\nnot needs_support(moose, lobster) = True\nnot steal_points(cow, 5, moose) = True\nshow_cards(moose, squirrel) = rule1()\nshow_cards(moose, squirrel) == True\nshow_cards(moose, squirrel) == True\nquestion = True", "answer": 1, "code": "rule1() = eats_food(something, food_of(sheep)) => show_cards(something, squirrel)\nrule2() = steal_points(cow, 5, moose) => burn(warehouse_of(goldfish), moose)\nrule3() = first_letter_of(name(cat)) == first_letter_of(name(leopard)) => not knows(defense_plan_of(oscar), cat)\nrule4() = knows(defensive_plans_of(oscar), something) => attack_green_fields(moose, sheep)\nrule5() = not respects(something, canary) => knows(defense_plan_of(oscar), something)\nrule6() = friends(cat) < 5 => not knows(defensive_plans_of(oscar), cat)\nrule7() = raise_flag_of_peace(something, sun_bear) => not equal_points(moose, sheep)\nrule8() = burn(warehouse_of(meerkat), something) => equal_points(something, sheep)\nrule9() = has(moose, sharp_object) => not learn_elementary_resource_management(moose, meerkat)\nrule10() = roll_dice(something, kangaroo) => attack_green_fields(something, tiger)\nrule11() = become_enemy(something, lobster) => learn_basics_of_resource_management(something, meerkat)\nrule12() = attack_green_fields(something, sheep) => not show_cards(something, squirrel)\norder(rule11) > order(rule9) = True\norder(rule12) > order(rule1) = True\norder(rule5) > order(rule3) = True\norder(rule5) > order(rule6) = True\norder(rule7) > order(rule8) = True\n\nfriends(cat) = 13\nname(cat, Cinnamon) = True\nnot learn_basics_of_resource_management(cat, canary) = True\nbecome_enemy(moose, kangaroo) = True\nnot become_enemy(moose, hummingbird) = True\nnot needs_support(moose, lobster) = True\nnot steal_points(cow, 5, moose) = True\n\nquestion = show_cards(moose, squirrel)\n"}, {"idx": 417, "response": "needs_support(wolverine, bat) == True\nnot give(cat, magnifier, aardvark) = rule7()\ngive(cat, magnifier, aardvark) == False\nfriends(cat) = 16\nnot give(cat, magnifier, aardvark) == False\nsing_song(dog, victory_song_for(sea_bass)) = rule1()\nsing_song(dog, victory_song_for(sea_bass)) == False\nknock_down_fortress(aardvark, fortress_of(sea_bass)) = rule8()\nknock_down_fortress(aardvark, fortress_of(sea_bass)) == True\nsing_song(dog, victory_song_for(sea_bass)) == False\nowes_money_to(sea_bass, blobfish) = rule9()\nowes_money_to(sea_bass, blobfish) == True\nquestion = True", "answer": 1, "code": "rule1() = needs_support(something, spider) => not sing_song(dog, victory_song_for(sea_bass))\nrule2() = friends(koala) > 9 => not sing_song(koala, victory_song_for(crocodile))\nrule3() = has(koala, card_with(color_in(rainbow_colors))) => sing_song(koala, victory_song_for(crocodile))\nrule4() = first_letter_of(name(koala)) == first_letter_of(name(viperfish)) => sing_song(koala, victory_song_for(crocodile))\nrule5(something) = needs_support(something, tiger) => not eat_food(something, food_of(dog))\nrule6() = friends(cat) > 10 => give(cat, magnifier, aardvark)\nrule7() = needs_support(something, bat) => not give(cat, magnifier, aardvark)\nrule8() = sing_song(something, victory_song_for(crocodile)) => knock_down_fortress(aardvark, fortress_of(sea_bass))\nrule9() = sing_song(dog, victory_song_for(sea_bass)) & knock_down_fortress(aardvark, fortress_of(sea_bass)) => owes_money_to(sea_bass, blobfish)\nrule10() = not eat_food(sheep, food_of(dog)) => sing_song(dog, victory_song_for(sea_bass))\norder(rule1) > order(rule10) = True\norder(rule3) > order(rule2) = True\norder(rule4) > order(rule2) = True\norder(rule6) > order(rule7) = True\n\nfriends(cat) = 16\nhas(koala, card_with(black_color)) = True\nname(koala, Meadow) = True\nfriends(koala) = 13\nneeds_support(sheep, tiger) = True\nname(viperfish, Max) = True\nneeds_support(wolverine, bat) = True\n\nquestion = owes_money_to(sea_bass, blobfish)\n"}, {"idx": 418, "response": "needs_support(kudu, jellyfish) == True\nraise_flag_of_peace(kudu, octopus) == True\nnot eat_food(cat, food_of(halibut)) = rule2()\neat_food(cat, food_of(halibut)) == False\nsame_number_of_points(cat, carp) = rule1()\nsame_number_of_points(cat, carp) == False\nquestion = False", "answer": -1, "code": "rule1() = not eat_food(something, food_of(halibut)) => not same_number_of_points(something, carp)\nrule2() = belief(kudu_needs_support(cat)) & prepare_armor(buffalo, cat) => not eat_food(cat, food_of(halibut))\nrule3() = proceed_to_spot_right_after(something, spot_of(polar_bear)) => prepare_armor(buffalo, cat)\nrule4(something) = raise_flag_of_peace(something, octopus) & needs_support(something, jellyfish) => needs_support(something, cat)\n\nneeds_support(kudu, jellyfish) = True\nraise_flag_of_peace(kudu, octopus) = True\nproceed_to_spot_right_after(mosquito, spot_of(polar_bear)) = True\n\nquestion = same_number_of_points(cat, carp)\n"}, {"idx": 419, "response": "not roll_dice(panda_bear, buffalo) = rule2()\nroll_dice(panda_bear, buffalo) == False\nraise_flag_of_peace(black_bear, buffalo) = rule2()\nraise_flag_of_peace(black_bear, buffalo) == True\nburn(warehouse_of(puffin), buffalo) = rule2()\nburn(warehouse_of(puffin), buffalo) == True\nquestion = True", "answer": 1, "code": "rule1() = sing_song(kangaroo, victory_song_for(black_bear)) => prepare_armor(black_bear, cockroach)\nrule2() = not roll_dice(panda_bear, buffalo) & raise_flag_of_peace(black_bear, buffalo) => burn(warehouse_of(puffin), buffalo)\nrule3() = sing_song(something, victory_song_for(leopard)) => not burn(warehouse_of(puffin), something)\nrule4() = friends(buffalo) < 18 => roll_dice(buffalo, penguin)\nrule5() = roll_dice(something, penguin) => sing_song(something, victory_song_for(leopard))\nrule6() = needs_support(something, crocodile) => not wink_at(something, koala)\nrule7() = learn_basics_of_resource_management(moose, buffalo) => not roll_dice(buffalo, penguin)\nrule8() = attack(green_fields_of(elephant), something) => roll_dice(something, buffalo)\nrule9() = learns_elementary_resource_management(something, lobster) => not roll_dice(something, buffalo)\nrule10() = remove(something, piece_of(halibut)) => attack(green_fields_of(elephant), something)\nrule11() = wink_at(something, koala) & prepare_armor(something, cockroach) => raise_flag_of_peace(something, buffalo)\nrule12() = not sing_song(kiwi, victory_song_for(black_bear)) => wink_at(black_bear, koala)\norder(rule12) > order(rule6) = True\norder(rule2) > order(rule3) = True\norder(rule7) > order(rule4) = True\norder(rule9) > order(rule8) = True\n\nneeds_support(black_bear, crocodile) = True\nfriends(buffalo) = 15\nsing_song(kangaroo, victory_song_for(black_bear)) = True\nlearn_basics_of_resource_management(moose, buffalo) = True\nremove(panda_bear, piece_of(halibut)) = True\nnot sing_song(kiwi, victory_song_for(black_bear)) = True\n\nquestion = burn(warehouse_of(puffin), buffalo)\n"}, {"idx": 420, "response": "rolls_dice_for(caterpillar, aardvark) = rule6()\nrolls_dice_for(caterpillar, aardvark) == True\nproceed(aardvark, spot_right_after(spot_of(dog))) = rule4(aardvark)\nproceed(aardvark, spot_right_after(spot_of(dog))) == True\nproceed(aardvark, spot_right_after(spot_of(dog))) == True\nquestion = True", "answer": 1, "code": "rule1(something) = rolls_dice_for(something, raven) => give_magnifier_to(something, aardvark)\nrule2(something) = knows(defensive_plans_of(starfish), something) => wink_at(something, aardvark)\nrule3() = rolls_dice_for(caterpillar, aardvark) => not sing_song(aardvark, victory_song_for(tilapia))\nrule4(something) = not sing_song(something, victory_song_for(tilapia)) => proceed(something, spot_right_after(spot_of(dog)))\nrule5() = wink_at(viperfish, aardvark) & give_magnifier_to(parrot, aardvark) => sing_song(aardvark, victory_song_for(tilapia))\nrule6() = has(caterpillar, something_to_sit_on) => rolls_dice_for(caterpillar, aardvark)\norder(rule3) > order(rule5) = True\n\nhas(caterpillar, love_seat_sofa) = True\nrolls_dice_for(parrot, raven) = True\nknows(defensive_plans_of(starfish), viperfish) = True\n\nquestion = proceed(aardvark, spot_right_after(spot_of(dog)))\n"}, {"idx": 421, "response": "not knows(defensive_plans_of(wolverine), panda_bear) = rule12()\nknows(defensive_plans_of(wolverine), panda_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = has(mosquito, connect_to_internet(device)) => wink(mosquito, panda_bear)\nrule2(something) = not give_magnifying_glass(something, raven) & not learn_elementary_resource_management_from(something, rabbit) => sing_song(something, victory_song_for(tilapia))\nrule3(something) = remove(something, piece_of(puffin)) => not show_all_cards(something, squid)\nrule4() = has(kudu, connect_to_internet(device)) => proceed(kudu, spot_right_after(spot_of(panda_bear)))\nrule5() = give_magnifying_glass(something, doctorfish) => not sing_song(goldfish, victory_song_for(tilapia))\nrule6() = first_letter_of(name(panda_bear)) == first_letter_of(name(crocodile)) => remove(panda_bear, piece_of(puffin))\nrule7(something) = sing_song(something, victory_song_for(tilapia)) => owes_money_to(something, cricket)\nrule8() = purchased(kudu, time_machine) => proceed(kudu, spot_right_after(spot_of(panda_bear)))\nrule9(something) = show_all_cards(something, squid) => knows(defensive_plans_of(wolverine), something)\nrule10() = not wink(zander, mosquito) => not wink(mosquito, panda_bear)\nrule11() = proceed(kudu, spot_right_after(spot_of(panda_bear))) & not wink(mosquito, panda_bear) => show_all_cards(panda_bear, squid)\nrule12() = owes_money_to(something, cricket) => not knows(defensive_plans_of(wolverine), panda_bear)\norder(rule1) > order(rule10) = True\norder(rule11) > order(rule3) = True\norder(rule12) > order(rule9) = True\norder(rule5) > order(rule2) = True\n\nname(crocodile, Casper) = True\nhas(kudu, computer) = True\ninvented(kudu, time_machine) = True\nhas(panda_bear, card_with(red_color)) = True\nname(panda_bear, Charlie) = True\nnot give_magnifying_glass(goldfish, raven) = True\nnot learn_elementary_resource_management_from(goldfish, rabbit) = True\nnot wink(zander, mosquito) = True\n\nquestion = knows(defensive_plans_of(wolverine), panda_bear)\n"}, {"idx": 422, "response": "not remove(cheetah, piece_of(whale)) = unknown\nquestion = unknown", "answer": 0, "code": "rule1(something) = not raise_flag_of_peace(something, moose) & not eat_food(something, jellyfish) => sing_song(something, victory_song_for(aardvark))\nrule2() = purchased_time_machine(cheetah) => eat_food(cheetah, jellyfish)\nrule3(something) = sing_song(something, victory_song_for(aardvark)) => remove(something, piece_of(whale))\nrule4() = has(cheetah, card_with(color_in_flag_of_belgium)) => eat_food(cheetah, jellyfish)\nrule5() = not burn(warehouse_of(cheetah), hare) => not raise_flag_of_peace(cheetah, moose)\nrule6(something) = not learn(something, elementary_resource_management_from(kiwi)) => eat_food(something, cheetah)\nrule7() = give_magnifier(something, crocodile) => not sing_song(cheetah, victory_song_for(aardvark))\nrule8() = has(koala, something_to_sit_on) => not offer_job(koala, turtle)\nrule9() = eat_food(turtle, cheetah) & eat_food(buffalo, cheetah) => not remove(cheetah, piece_of(whale))\nrule10() = not respect(sea_bass, koala) => offer_job(koala, turtle)\nrule11() = friends(cheetah) < 5 => not eat_food(cheetah, jellyfish)\nrule12() = has(turtle, something_to_carry_apples_and_oranges) => not learn(turtle, elementary_resource_management_from(kiwi))\norder(rule1) > order(rule7) = True\norder(rule10) > order(rule8) = True\norder(rule11) > order(rule2) = True\norder(rule11) > order(rule4) = True\norder(rule3) > order(rule9) = True\n\nfriends(cheetah) = 7\nnot remove(cheetah, piece_of(cockroach)) = True\nhas_low_income_job(cheetah) = True\nattacks(sea_bass, green_fields_of(koala)) = True\nhas(turtle, basket) = True\nnot burn(warehouse_of(cheetah), hare) = True\n\nquestion = remove(cheetah, piece_of(whale))\n"}, {"idx": 423, "response": "offer_job(kudu, dog) = True\noffer_job_position(goldfish, catfish) = rule3()\noffer_job_position(goldfish, catfish) == True\nquestion = True", "answer": 1, "code": "rule1() = offer_job(kudu, dog) => raise_flag_of_peace(dog, polar_bear)\nrule2() = raise_flag_of_peace(something, polar_bear) => roll_dice(cat, hippopotamus)\nrule3() = roll_dice(something, hippopotamus) => offer_job_position(goldfish, catfish)\n\noffer_job(kudu, dog) = True\n\nquestion = offer_job_position(goldfish, catfish)\n"}, {"idx": 424, "response": "has(squid, bench) == True\nhas(squid, something_to_sit_on) == True\nsing_song(squid, victory_song_for(grasshopper)) = rule10()\nsing_song(squid, victory_song_for(grasshopper)) == True\nsing_song(squid, victory_song_for(grasshopper)) == True\nnot knock_down_fortress(squid, baboon) = rule5()\nknock_down_fortress(squid, baboon) == False\nknock_down_fortress(squid, baboon) == False\nquestion = False", "answer": -1, "code": "rule1() = fan_of(panther, Chris_Ronaldo) => knows_defense_plan(panther, panda_bear)\nrule2() = first_letter_of(name(blobfish)) == first_letter_of(name(goldfish)) => sing_song(blobfish, victory_song_for(squid))\nrule3() = sing_song(something, victory_song_for(grasshopper)) => eat_food(something, food_of(buffalo))\nrule4() = sing_song(something, victory_song_for(phoenix)) => owes_money_to(something, hummingbird)\nrule5() = belief(eagle_eats_food_of(squid)) & roll_dice(panther, squid) => not knock_down_fortress(squid, baboon)\nrule6() = owes_money_to(crocodile, eagle) => eats_food(eagle, food_of(squid))\nrule7() = knows_defense_plan(something, panda_bear) => roll_dice(something, squid)\nrule8() = knows_defense_plan(something, grizzly_bear) => owes_money_to(crocodile, eagle)\nrule9() = has(squid, card_with(color_starting_with(\"i\"))) => not sing_song(squid, victory_song_for(grasshopper))\nrule10() = has(squid, something_to_sit_on) => sing_song(squid, victory_song_for(grasshopper))\nrule11() = has(panther, card_with(primary_color)) => knows_defense_plan(panther, panda_bear)\nrule12() = friends(squid) > 3 => wink(squid, kangaroo)\nrule13() = sing_song(blobfish, victory_song_for(squid)) => knows_defense_plan(squid, sea_bass)\norder(rule9) > order(rule10) = True\n\nname(blobfish, Lola) = True\nknows_defense_plan(dog, grizzly_bear) = True\nname(goldfish, Lily) = True\nsing_song(leopard, victory_song_for(phoenix)) = True\nhas(panther, card_with(green_color)) = True\nhates(panther, Chris_Ronaldo) = True\nhas(squid, bench) = True\nfriends(squid) = 13\n\nquestion = knock_down_fortress(squid, baboon)\n"}, {"idx": 425, "response": "rolls_dice(lobster, tilapia) == True\nnot burn(warehouse_of(koala), lobster) = rule7()\nburn(warehouse_of(koala), lobster) == False\nbelief(lobster_attacks_green_fields_of(koala)) = rule2()\nbelief(lobster_attacks_green_fields_of(koala)) == True\nburn(warehouse_of(koala), lobster) == False\nshow_cards(koala, mosquito) = rule2()\nshow_cards(koala, mosquito) == True\nshow_cards(koala, mosquito) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(blobfish) > 17 => rolls_dice(blobfish, meerkat)\nrule2() = belief(lobster_attacks_green_fields_of(koala)) & not burn(warehouse_of(koala), blobfish) => show_cards(koala, mosquito)\nrule3(something) = needs_support(something, puffin) => burn(warehouse_of(koala), something)\nrule4(something) = sing_song(something, victory_song_for(kiwi)) => attack_green_fields_of(koala, something)\nrule5() = has(blobfish, high_quality_paper) => rolls_dice(blobfish, meerkat)\nrule6(something) = sing_song(something, victory_song_for(tilapia)) => sing_song(something, victory_song_for(kiwi))\nrule7(something) = rolls_dice(something, meerkat) => not burn(warehouse_of(koala), something)\norder(rule3) > order(rule7) = True\n\nfriends(blobfish) = 7\nhas(blobfish, high_quality_paper) = True\nrolls_dice(lobster, tilapia) = True\n\nquestion = show_cards(koala, mosquito)\n"}, {"idx": 426, "response": "not raise_flag_of_peace(spider, meerkat) = True\ngive_magnifier(mosquito, panther) = rule1()\ngive_magnifier(mosquito, panther) == True\ngive_magnifier(mosquito, panther) == True\nquestion = True", "answer": 1, "code": "rule1() = knock_down_fortress(something, fortress_of(eagle)) => give_magnifier(mosquito, panther)\nrule2() = knows(defensive_plans_of(snail), something) => knock_down_fortress(oscar, fortress_of(eagle))\nrule3() = knock_down_fortress(lobster, fortress_of(swordfish)) => enemy(swordfish, oscar)\nrule4() = owns(meerkat, luxury_aircraft) => not knows(defense_plan_of(snail), meerkat)\nrule5() = not raise_flag_of_peace(spider, meerkat) => knows(defense_plan_of(snail), meerkat)\nrule6() = first_letter_of(name(swordfish)) == first_letter_of(name(eel)) => not enemy(swordfish, oscar)\nrule7() = has(swordfish, connect_to_internet(device)) => not enemy(swordfish, oscar)\nrule8() = eat_food(cow, rabbit) => not learn_basics_of_resource_management(rabbit, oscar)\norder(rule5) > order(rule4) = True\norder(rule6) > order(rule3) = True\norder(rule7) > order(rule3) = True\n\neat_food(cow, rabbit) = True\nname(donkey, Mojo) = True\nname(eel, Tessa) = True\nknock_down_fortress(lobster, fortress_of(swordfish)) = True\ndreamed_of(meerkat, luxury_aircraft) = True\nfriends(meerkat) = 14\nhas(rabbit, card_with(red_color)) = True\nname(rabbit, Bella) = True\nhas(swordfish, saxophone) = True\nnot raise_flag_of_peace(spider, meerkat) = True\n\nquestion = give_magnifier(mosquito, panther)\n"}, {"idx": 427, "response": "learn_basics_of_resource_management(dog, carp) == True\noffer_job(salmon, carp) == True\nnot offer_job_position(carp, raven) = rule2()\noffer_job_position(carp, raven) == False\nnot eat_food_of(carp, eagle) = rule3()\neat_food_of(carp, eagle) == False\nraise_flag_of_peace(carp, kangaroo) = rule1()\nraise_flag_of_peace(carp, kangaroo) == True\nnot eat_food_of(carp, koala) = rule4()\neat_food_of(carp, koala) == False\nquestion = False", "answer": -1, "code": "rule1() = owes_money_to(something, grizzly_bear) => raise_flag_of_peace(carp, kangaroo)\nrule2() = offer_job(salmon, carp) => not offer_job_position(carp, raven)\nrule3() = not offer_job_position(something, raven) => not eat_food_of(something, eagle)\nrule4() = not eat_food_of(something, eagle) & raise_flag_of_peace(something, kangaroo) => not eat_food_of(something, koala)\nrule5() = not hold_equal_number_of_points(something, viperfish) => not owes_money_to(something, grizzly_bear)\nrule6() = show_cards(something, grizzly_bear) => owes_money_to(catfish, grizzly_bear)\norder(rule6) > order(rule5) = True\n\nlearn_basics_of_resource_management(dog, carp) = True\nneeds_support(rabbit, carp) = True\noffer_job(salmon, carp) = True\nshow_cards(zander, grizzly_bear) = True\nhold_equal_number_of_points(catfish, viperfish) = False\n\nquestion = eat_food_of(carp, koala)\n"}, {"idx": 428, "response": "knock_down(elephant, fortress_of(sheep)) == True\nwink(elephant, cockroach) == True\nnot wink(elephant, cockroach) == False\nremove(elephant, piece_of(phoenix)) = rule4(elephant)\nremove(elephant, piece_of(phoenix)) == True\nremove(elephant, piece_of(phoenix)) == True\neats_food(buffalo, food_of(kiwi)) = rule1()\neats_food(buffalo, food_of(kiwi)) == False\neats_food(cricket, food_of(kiwi)) = rule1()\neats_food(cricket, food_of(kiwi)) == False\npoints(buffalo) == points(cricket) = question\npoints(buffalo) == points(cricket) == False", "answer": -1, "code": "rule1() = eats_food(something, food_of(kiwi)) => points(buffalo) == points(cricket)\nrule2() = friends(lion) < 15 => owes_money_to(lion, elephant)\nrule3() = remove(something, piece_of(phoenix)) => eats_food(something, food_of(kiwi))\nrule4(something) = not wink(something, cockroach) & knock_down(something, fortress_of(sheep)) => remove(something, piece_of(phoenix))\nrule5() = steal_points(raven, 5, eagle) => learn(eagle, elementary_resource_management_from(elephant))\nrule6() = not offer_job(something, cockroach) => not remove(something, piece_of(phoenix))\norder(rule6) > order(rule4) = True\n\nknock_down(elephant, fortress_of(sheep)) = True\nwink(elephant, cockroach) = True\nfriends(lion) = 6\nsteal_points(raven, 5, eagle) = True\n\nquestion = points(buffalo) == points(cricket)\n"}, {"idx": 429, "response": "attack(green_fields_of(squid), goldfish) == False\nnot attack(green_fields_of(squid), goldfish) == True\nrespects(squid, elephant) = rule1()\nrespects(squid, elephant) == True\nrespects(squid, elephant) == True\nquestion = True", "answer": 1, "code": "rule1() = not attack(green_fields_of(squid), goldfish) => respects(squid, elephant)\nrule2() = burn(warehouse_of(panther), starfish) => not raise_flag_of_peace(panther, wolverine)\nrule3() = friends(bat) > 3 => actual_enemy(bat, grizzly_bear)\nrule4() = first_letter_of(name(bat)) == first_letter_of(name(eel)) => not enemy(bat, grizzly_bear)\nrule5(something) = offer_job_position(something, buffalo) => owes_money_to(something, turtle)\nrule6() = has(panther, carry_apples_and_oranges) => raise_flag_of_peace(panther, wolverine)\nrule7() = attack(green_fields_of(baboon), something) => not owes_money_to(goldfish, spider)\nrule8() = owes_money_to(something, spider) => not attack(green_fields_of(squid), something)\nrule9() = not raise_flag_of_peace(something, wolverine) & owes_money_to(something, turtle) => give(something, magnifying_glass, squid)\nrule10(something) = remove(something, piece_of(sea_bass)) => prepare_armor(something, squid)\nrule11() = has(kiwi, carry_apples_and_oranges) => not proceed(kiwi, spot_right_after(spot_of(penguin)))\nrule12() = first_letter_of(name(kiwi)) == first_letter_of(name(cat)) => not proceed(kiwi, spot_right_after(spot_of(penguin)))\nrule13() = friends(goldfish) > 5 => owes_money_to(goldfish, spider)\nrule14() = first_letter_of(name(lobster)) == first_letter_of(name(sun_bear)) => show_cards(lobster, panther)\nrule15() = purchased(bat, time_machine) => enemy(bat, grizzly_bear)\nrule16() = actual_enemy(bat, grizzly_bear) => not prepare_armor(grizzly_bear, squid)\nrule17() = has(kiwi, carry_apples_and_oranges) => proceed(kiwi, spot_right_after(spot_of(penguin)))\norder(rule10) > order(rule16) = True\norder(rule13) > order(rule7) = True\norder(rule17) > order(rule11) = True\norder(rule17) > order(rule12) = True\norder(rule2) > order(rule6) = True\norder(rule4) > order(rule15) = True\norder(rule4) > order(rule3) = True\n\nfriends(bat) = 1 energetic_friend + 6 non_energetic_friends\ninvented(bat, time_machine) = True\nname(cat, Paco) = True\nname(eel, Tessa) = True\nattack(green_fields_of(baboon), ferret) = True\nfriends(goldfish) = 14\nhas(kiwi, banana_strawberry_smoothie) = True\nname(kiwi, Pashmak) = True\nhas(kiwi, knapsack) = True\nname(lobster, Bella) = True\nhas(panther, flute) = True\nhas(panther, violin) = True\noffer_job_position(panther, buffalo) = True\nburn(warehouse_of(panther), starfish) = True\nname(sun_bear, Buddy) = True\n\nquestion = respects(squid, elephant)\n"}, {"idx": 430, "response": "know_defense_plan(cat, zander) = unknown", "answer": 0, "code": "rule1() = proceed(carp, spot_right_after(spot_of(squid))) => not learn_basics_of_resource_management(squid, cat)\nrule2() = created_time_machine(kangaroo) => wink(kangaroo, eagle)\nrule3() = learn_elementary_resource_management(squid, cat) & roll_dice(lion, cat) => not know_defense_plan(cat, zander)\nrule4() = first_letter_of(name(kangaroo)) == first_letter_of(name(panda_bear)) => not wink(kangaroo, eagle)\nrule5() = wink(animal, eagle) => learn_basics_of_resource_management(squid, cat)\nrule6() = has(pig, card_with(primary_color)) => enemy(pig, kudu)\nrule7() = enemy(animal, kudu) => roll_dice(lion, cat)\norder(rule1) > order(rule5) = True\norder(rule2) > order(rule4) = True\n\ncreated_time_machine(kangaroo) = True\nname(kangaroo, Meadow) = True\nname(panda_bear, Max) = True\nhas(pig, card_with(blue_color)) = True\n\nquestion = know_defense_plan(cat, zander)\n"}, {"idx": 431, "response": "has(goldfish, sharp_object) == True\nattack(goldfish, green_fields_of(kiwi)) = rule1()\nattack(goldfish, green_fields_of(kiwi)) == True\nattack(goldfish, green_fields_of(kiwi)) == True\nowes_money_to(crocodile, puffin) == True\nnot give_magnifying_glass(kiwi, puffin) = rule2()\ngive_magnifying_glass(kiwi, puffin) == False\ngive_magnifying_glass(kiwi, puffin) == False\neat_food(puffin, doctorfish) = rule2()\neat_food(puffin, doctorfish) == True\neat_food(puffin, doctorfish) == True\nquestion = True", "answer": 1, "code": "rule1() = has(goldfish, sharp_object) => attack(goldfish, green_fields_of(kiwi))\nrule2() = owes_money_to(crocodile, puffin) & not give_magnifying_glass(kiwi, puffin) => eat_food(puffin, doctorfish)\nrule3() = remove(animal, piece_of(donkey)) => points(crocodile) == points(cat)\nrule4() = has(goldfish, connect_to_internet(device)) => attack(goldfish, green_fields_of(kiwi))\nrule5() = friends(kiwi) > 1 => not roll_dice(kiwi, swordfish)\nrule6() = give_magnifying_glass(animal, sun_bear) => owes_money_to(crocodile, puffin)\nrule7() = remove(animal, piece_of(aardvark)) => give_magnifying_glass(starfish, sun_bear)\nrule8() = roll_dice(something, dog) & respects(something, oscar) => not attack(something, green_fields_of(kiwi))\nrule9() = roll_dice(animal, swordfish) => not give_magnifying_glass(animal, puffin)\nrule10() = learn(animal, elementary_resource_management_from(eagle)) => not eat_food(animal, doctorfish)\nrule11() = not prepare_armor(meerkat, kiwi) => roll_dice(kiwi, swordfish)\norder(rule11) > order(rule5) = True\norder(rule2) > order(rule10) = True\norder(rule8) > order(rule1) = True\norder(rule8) > order(rule4) = True\n\nhates(crocodile, Chris_Ronaldo) = True\nname(crocodile, Lucy) = True\nhas(goldfish, cell_phone) = True\nhas(goldfish, flute) = True\nrespects(goldfish, oscar) = True\nremove(hare, piece_of(aardvark)) = True\nprepare_armor(meerkat, kiwi) = True\nname(squirrel, Mojo) = True\nhas(starfish, card_with(indigo_color)) = True\nfriends(starfish) = 6\nremove(whale, piece_of(donkey)) = True\n\nquestion = eat_food(puffin, doctorfish)\n"}, {"idx": 432, "response": "give(aardvark, magnifying_glass, raven) = True\nwink(eagle, raven) = True\nnot knock_down(raven, fortress_of(squid)) = rule3()\nknock_down(raven, fortress_of(squid)) = False\nowes_money_to(raven, doctorfish) = rule1(raven)\nowes_money_to(raven, doctorfish) = True\nenemy(raven, tilapia) = rule2(raven)\nenemy(raven, tilapia) = True\nquestion = True", "answer": 1, "code": "rule1(something) = not knock_down(something, fortress_of(squid)) => owes_money_to(something, doctorfish)\nrule2(something) = owes_money_to(something, doctorfish) => enemy(something, tilapia)\nrule3() = give(aardvark, magnifying_glass, raven) & wink(eagle, raven) => not knock_down(raven, fortress_of(squid))\n\ngive(aardvark, magnifier, raven) = True\nwink(eagle, raven) = True\nshow_cards(raven, jellyfish) = True\n\nquestion = enemy(raven, tilapia)\n"}, {"idx": 433, "response": "has(caterpillar, knife) == True\nsharp_object(knife) == True\nnot sing_song(grizzly_bear, victory_song_for(ferret)) = rule4(grizzly_bear)\nsing_song(grizzly_bear, victory_song_for(ferret)) == False\nfriends(grizzly_bear) = 15\nnot prepare_armor(grizzly_bear, octopus) = rule3()\nprepare_armor(grizzly_bear, octopus) == False\nname(grizzly_bear, Meadow) == True\nname(tiger, Mojo) == True\nfirst_letter_of(name(grizzly_bear)) == first_letter_of(name(tiger)) == True\nowes_money_to(grizzly_bear, snail) = rule8()\nowes_money_to(grizzly_bear, snail) == True\nquestion = False", "answer": -1, "code": "rule1(something) = not prepare_armor(something, octopus) & not roll_dice(something, sun_bear) => burn(warehouse_of(buffalo), something)\nrule2() = proceed(moose, spot_right_after(grizzly_bear)) & remove(salmon, piece_of(grizzly_bear)) => prepare_armor(grizzly_bear, octopus)\nrule3() = friends(grizzly_bear) > 7 => not prepare_armor(grizzly_bear, octopus)\nrule4(something) = burn(warehouse_of(buffalo), something) => not sing_song(something, victory_song_for(ferret))\nrule5() = attack(green_fields_of(swordfish), something) => not roll_dice(grizzly_bear, sun_bear)\nrule6(something) = owes_money_to(something, snail) => not enemy(something, squid)\nrule7() = has(spider, something_to_sit_on) => give(spider, magnifier, oscar)\nrule8() = first_letter_of(name(grizzly_bear)) == first_letter_of(name(tiger)) => owes_money_to(grizzly_bear, snail)\nrule9() = has(caterpillar, sharp_object) => wink(caterpillar, grizzly_bear)\norder(rule3) > order(rule2) = True\n\nhas(caterpillar, knife) = True\nfriends(grizzly_bear) = 15\nname(grizzly_bear, Meadow) = True\nattack(green_fields_of(swordfish), halibut) = True\nproceed(moose, spot_right_after(grizzly_bear)) = True\nremove(salmon, piece_of(grizzly_bear)) = True\nhas(spider, love_seat_sofa) = True\nname(tiger, Mojo) = True\n\nquestion = sing_song(grizzly_bear, victory_song_for(ferret))\n"}, {"idx": 434, "response": "name(rabbit, Buddy) == True\nname(raven, Lola) == True\nfirst_letter_of(name(rabbit)) == first_letter_of(name(raven)) == True\nproceed(rabbit, spot_right_after(spot_of(penguin))) = rule4()\nproceed(rabbit, spot_right_after(spot_of(penguin))) == True\nproceed(rabbit, spot_right_after(spot_of(penguin))) == True\nprepares_armor(penguin, leopard) = rule2()\nprepares_armor(penguin, leopard) == True\nprepares_armor(penguin, leopard) == True\nwink(penguin, kudu) = rule5()\nwink(penguin, kudu) == True\nwink(penguin, kudu) == True\nquestion = True", "answer": 1, "code": "rule1() = has_difficulty_finding_food(rabbit) => not proceed(rabbit, spot_right_after(spot_of(penguin)))\nrule2() = proceed(rabbit, spot_right_after(spot_of(penguin))) => prepare_armor(penguin, leopard)\nrule3() = not proceed(animal, spot_right_after(spot_of(lobster))) => not wink(penguin, kudu)\nrule4() = first_letter_of(name(rabbit)) == first_letter_of(name(raven)) => proceed(rabbit, spot_right_after(spot_of(penguin)))\nrule5() = prepares_armor(animal, leopard) => wink(animal, kudu)\norder(rule1) > order(rule4) = True\norder(rule3) > order(rule5) = True\n\nname(rabbit, Buddy) = True\nname(raven, Lola) = True\n\nquestion = wink(penguin, kudu)\n"}, {"idx": 435, "response": "remove(hummingbird, piece_of(mosquito)) == True\nholds_equal_points(ferret, pig) = rule12()\nholds_equal_points(ferret, pig) == True\nproceed(hippopotamus, spot_right_after(cheetah)) = rule10()\nproceed(hippopotamus, spot_right_after(cheetah)) == True\nsteal_points(kudu, 5, cheetah) = rule10()\nsteal_points(kudu, 5, cheetah) == True\nsteal_points(kudu, 5, cheetah) == True\nneeds_support(cheetah, moose) = rule10()\nneeds_support(cheetah, moose) == True\nquestion = True", "answer": 1, "code": "rule1() = sing_song(hare, victory_song_for(kudu)) => steal_points(kudu, 5, viperfish)\nrule2() = has(hippopotamus, card) and color(card) in colors_of_flag_of_France => roll_dice(hippopotamus, aardvark)\nrule3() = needs_support(cockroach, kudu) => not prepare_armor(kudu, leopard)\nrule4() = holds_equal_points(something, pig) => respects(cheetah, raven)\nrule5() = not steal_points(something, 5, squirrel) => not proceed(something, spot_right_after(cheetah))\nrule6() = knows(defensive_plans_of(raven), something) & roll_dice(something, aardvark) => proceed(something, spot_right_after(cheetah))\nrule7() = remove(something, piece_of(meerkat)) => not knows(defensive_plans_of(raven), hippopotamus)\nrule8(something) = prepare_armor(something, leopard) => steal_points(something, 5, cheetah)\nrule9() = prepare_armor(something, tiger) => prepare_armor(kudu, leopard)\nrule10() = proceed(hippopotamus, spot_right_after(cheetah)) & steal_points(kudu, 5, cheetah) => needs_support(cheetah, moose)\nrule11() = friends(hippopotamus) > 7 => roll_dice(hippopotamus, aardvark)\nrule12() = remove(something, piece_of(mosquito)) => holds_equal_points(ferret, pig)\nrule13() = friends(kudu) < 15 => not steal_points(kudu, 5, viperfish)\nrule14() = not has(hippopotamus, keys) => knows(defensive_plans_of(raven), hippopotamus)\norder(rule13) > order(rule1) = True\norder(rule3) > order(rule9) = True\norder(rule5) > order(rule6) = True\norder(rule7) > order(rule14) = True\n\nprepare_armor(catfish, tiger) = True\nsing_song(hare, victory_song_for(kudu)) = True\nfriends(hippopotamus) = 4 wise_friends + 1 not_wise_friend\nnot has(hippopotamus, keys) = True\nhas(hippopotamus, card_with(blue_color)) = True\nremove(hummingbird, piece_of(mosquito)) = True\n\nquestion = needs_support(cheetah, moose)\n"}, {"idx": 436, "response": "wink(cricket, donkey) = True\nlearn_basics_of_resource_management(snail, zander) = rule1()\nlearn_basics_of_resource_management(snail, zander) == True\nlearn_basics_of_resource_management(snail, zander) == True\nnot sing_song(zander, victory_song_for(raven)) = rule3()\nsing_song(zander, victory_song_for(raven)) == False\nnot sing_song(zander, victory_song_for(raven)) == True\neat_food(ferret, raven) = rule5()\neat_food(ferret, raven) == True\neat_food(ferret, raven) == True\nnever_raise_peace_flag(raven, elephant) = rule7()\nnever_raise_peace_flag(raven, elephant) == True\nnever_raise_peace_flag(raven, elephant) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(some_animal, donkey) => learn_basics_of_resource_management(snail, zander)\nrule2() = points(cat) != points(ferret) => not eat_food(ferret, raven)\nrule3() = learn_elementary_resource_management(snail, zander) => not sing_song(zander, victory_song_for(raven))\nrule4() = not attack(carp, green_fields_of(tilapia)) => roll_dice(tilapia, rabbit)\nrule5() = roll_dice(some_animal, rabbit) => eat_food(ferret, raven)\nrule6() = not have_keys(tilapia) => not roll_dice(tilapia, rabbit)\nrule7() = eat_food(ferret, raven) & not sing_song(zander, victory_song_for(raven)) => never_raise_peace_flag(raven, elephant)\norder(rule2) > order(rule5) = True\norder(rule6) > order(rule4) = True\n\nwink(cricket, donkey) = True\nnot attack(carp, green_fields_of(tilapia)) = True\n\nquestion = raise_peace_flag(raven, elephant)\n"}, {"idx": 437, "response": "needs_support(starfish, koala) = True\nwink(eel, cricket) = rule5()\nwink(eel, cricket) == True\nsing_song(eel, victory_song_for(amberjack)) = rule2()\nsing_song(eel, victory_song_for(amberjack)) == False\nwink(eel, cricket) == True\nsing_song(eel, victory_song_for(amberjack)) == False\nknock_down(fortress_of(zander), penguin) = rule4(penguin)\nknock_down(fortress_of(zander), penguin) == unknown\nquestion = unknown", "answer": 0, "code": "rule1() = needs_support(something, zander) => wink(penguin, cat)\nrule2() = has(eel, card) and color(card) in rainbow_colors => sing_song(eel, victory_song_for(amberjack))\nrule3() = friends(eel) > 11 => sing_song(eel, victory_song_for(amberjack))\nrule4(something) = wink(something, cricket) & sing_song(something, victory_song_for(amberjack)) => knock_down(fortress_of(zander), something)\nrule5() = needs_support(something, koala) => wink(eel, cricket)\n\nhas(eel, card_with(yellow_color)) = True\nfriends(eel) = 6\nneeds_support(starfish, koala) = True\n\nquestion = wink(penguin, cat)\n"}, {"idx": 438, "response": "not knows(defensive_plans_of(sun_bear), hippopotamus) = rule1()\nnot knows(defensive_plans_of(sun_bear), hippopotamus) == True\ngive_magnifying_glass(sun_bear, buffalo) = rule9()\ngive_magnifying_glass(sun_bear, buffalo) == True\ngive_magnifying_glass(sun_bear, buffalo) == True\nquestion = True", "answer": 1, "code": "rule1() = burn(warehouse_of(phoenix), something) => not knows(defensive_plans_of(sun_bear), hippopotamus)\nrule2() = first_letter_of(name(pig)) == first_letter_of(name(ferret)) => not wink_at(pig, sun_bear)\nrule3() = roll_dice(something, halibut) => burn(warehouse_of(phoenix), squirrel)\nrule4(something) = not needs_support(something, canary) & not enemy(something, kangaroo) => not give_magnifying_glass(something, buffalo)\nrule5() = not knows(defense_plan_of(penguin), something) => not attack_green_fields(something, sun_bear)\nrule6() = learn_basics_of_resource_management(something, moose) => not enemy(sun_bear, kangaroo)\nrule7() = remove(something, piece_of(moose)) => learn_elementary_resource_management(something, moose)\nrule8() = first_letter_of(name(donkey)) == first_letter_of(name(black_bear)) => not learn_elementary_resource_management(donkey, moose)\nrule9() = not knows(defensive_plans_of(sun_bear), hippopotamus) => give_magnifying_glass(sun_bear, buffalo)\nrule10() = killed(octopus, mayor) => attack_green_fields(octopus, sun_bear)\nrule11() = not knock_down(something, fortress_of(halibut)) => knows(defense_plan_of(sun_bear), something)\nrule12() = not offer_job(something, kudu) => not knock_down(something, fortress_of(halibut))\nrule13() = has(donkey, sharp_object) => not learn_basics_of_resource_management(donkey, moose)\nrule14() = friends(pig) < 5 => not wink_at(pig, sun_bear)\norder(rule1) > order(rule11) = True\norder(rule10) > order(rule5) = True\norder(rule13) > order(rule7) = True\norder(rule4) > order(rule9) = True\norder(rule8) > order(rule7) = True\n\nroll_dice(baboon, halibut) = True\nname(black_bear, Casper) = True\nname(donkey, Meadow) = True\nremove(donkey, piece_of(moose)) = True\nname(ferret, Pashmak) = True\nfriends(pig) = 8\nname(pig, Pablo) = True\nnot offer_job(hippopotamus, kudu) = True\nnot knows(defensive_plans_of(penguin), octopus) = True\n\nquestion = give_magnifying_glass(sun_bear, buffalo)\n"}, {"idx": 439, "response": "exists(animal, points(animal) == points(ferret)) = rule3()\nexists(animal, points(animal) == points(ferret)) == True\nrespect(gecko, raven) = not exists(animal, points(animal) == points(ferret))\nrespect(gecko, raven) == not True\nrespect(gecko, raven) == False\nquestion = False", "answer": -1, "code": "rule1() = belief(goldfish, points(goldfish) == points(meerkat)) & offer_job(aardvark, meerkat) => add_conclusion(\"meerkat holds the same number of points as the ferret\")\nrule2() = has(aardvark, connect_to_internet(device)) => offer_job(aardvark, meerkat)\nrule3() = exists(animal, points(animal) == points(ferret)) => not respect(gecko, raven)\nrule4() = has(aardvark, card_with(color) in rainbow_colors) => offer_job(aardvark, meerkat)\nrule5(something) = proceed(something, spot_right_after(spot_of(bat))) => points(something) == points(meerkat)\n\nhas(aardvark, card_with(black_color)) = True\nhas(aardvark, computer) = True\nproceed(goldfish, spot_right_after(spot_of(bat))) = True\n\nquestion = respect(gecko, raven)\n"}, {"idx": 440, "response": "friends(donkey) = 9\nfriends(sea_bass) = 12\nremove(ferret, piece_of(sheep)) = rule2(ferret)\nremove(ferret, piece_of(sheep)) == True\nremove(ferret, piece_of(sheep)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = respects(something, bat) & winks(something, hummingbird) => roll_dice(something, ferret)\nrule2(something) = steal_points(something, koala, 5) => remove(something, piece_of(sheep))\nrule3() = friends(sea_bass) > 10 => eat_food(sea_bass, ferret)\nrule4() = first_letter_of(name(sea_bass)) == first_letter_of(name(buffalo)) => not eat_food(sea_bass, ferret)\nrule5() = friends(donkey) > 2 => not roll_dice(donkey, ferret)\nrule6() = has(donkey, card_with(color_in_flag_of_Italy)) => not roll_dice(donkey, ferret)\nrule7() = not roll_dice(donkey, ferret) & eat_food(sea_bass, ferret) => steal_points(ferret, koala, 5)\nrule8() = killed(sea_bass, mayor) => not eat_food(sea_bass, ferret)\norder(rule1) > order(rule5) = True\norder(rule1) > order(rule6) = True\norder(rule4) > order(rule3) = True\norder(rule8) > order(rule3) = True\n\nname(buffalo, Charlie) = True\nhas(donkey, card_with(orange_color)) = True\nrespects(donkey, bat) = True\nwinks(donkey, hummingbird) = True\nfriends(donkey) = 9\nfriends(sea_bass) = 12\nname(sea_bass, Buddy) = True\n\nquestion = remove(ferret, piece_of(sheep))\n"}, {"idx": 441, "response": "steal_points(cockroach, gecko, 5) == True\nknock_down(fortress_of(snail)) = rule4()\nknock_down(fortress_of(snail)) == False\noffer_job_position(gecko, rabbit) = rule10()\noffer_job_position(gecko, rabbit) == True\noffer_job_position(gecko, rabbit) == True\nknows(defensive_plans_of(rabbit), mosquito) = rule10()\nknows(defensive_plans_of(rabbit), mosquito) == True\nknows(defensive_plans_of(rabbit), mosquito) == True\nneeds_support(rabbit, lobster) = rule10()\nneeds_support(rabbit, lobster) == True\nquestion = True", "answer": 1, "code": "rule1() = has(hippopotamus, sharp_object) => not burn(warehouse_of(mosquito))\nrule2() = offer_job(something, phoenix) => owes_money_to(gecko, dog)\nrule3() = friends(gecko) < 11 => knock_down(fortress_of(snail))\nrule4() = steal_points(cockroach, gecko, 5) => not knock_down(fortress_of(snail))\nrule5() = not remove(carp, piece_of(gecko)) => owes_money_to(gecko, catfish)\nrule6() = friends(hippopotamus) > 7 => burn(warehouse_of(mosquito))\nrule7() = not give(magnifier, meerkat, gecko) => not owes_money_to(gecko, catfish)\nrule8() = has(hippopotamus, something_to_sit_on) => burn(warehouse_of(mosquito))\nrule9(something) = not knock_down(fortress_of(snail)) => offer_job_position(something, rabbit)\nrule10() = offer_job_position(gecko, rabbit) & knows(defensive_plans_of(rabbit), mosquito) => needs_support(rabbit, lobster)\nrule11(something) = proceeds(something, spot_right_after(puffin)) => not knows(defense_plan_of(rabbit), something)\nrule12() = knows(defensive_plans_of(mosquito), something) => not needs_support(rabbit, lobster)\nrule13() = burn(warehouse_of(mosquito)) => knows(defense_plan_of(rabbit), mosquito)\nrule14() = fan_of(gecko, Chris_Ronaldo) => knock_down(fortress_of(snail))\norder(rule1) > order(rule6) = True\norder(rule1) > order(rule8) = True\norder(rule11) > order(rule13) = True\norder(rule12) > order(rule10) = True\norder(rule14) > order(rule4) = True\norder(rule3) > order(rule4) = True\norder(rule7) > order(rule5) = True\n\nsteal_points(cockroach, gecko, 5) = True\nfan_of(gecko, Chris_Ronaldo) = False\noffer_job(goldfish, phoenix) = True\nhas(hippopotamus, couch) = True\nfriends(hippopotamus) = 4 playful_friends + 1 non_playful_friend\nnot remove(carp, piece_of(gecko)) = True\n\nquestion = needs_support(rabbit, lobster)\n"}, {"idx": 442, "response": "friends(tilapia) = 7\nfriends(tilapia) < 12 = rule1()\nremove(tilapia, piece_of(koala)) == False\nname(eagle, Bella) == True\nfirst_letter_of(name(tilapia)) == first_letter_of(name(eagle)) = rule2()\nfirst_letter_of(name(tilapia)) == first_letter_of(name(eagle)) == False\nburn(warehouse_of(raven), blobfish) & sing_song(rabbit, victory_song_for(raven)) = rule3()\nburn(warehouse_of(raven), blobfish) & sing_song(rabbit, victory_song_for(raven)) == True\nburn(warehouse_of(koala), raven) = rule3()\nburn(warehouse_of(koala), raven) == False\nroll_dice(koala, wolverine) = rule4()\nroll_dice(koala, wolverine) == False\nfriends(raven) > 7 = rule5()\nfriends(raven) > 7 == True\nburn(warehouse_of(koala), raven) = rule5()\nburn(warehouse_of(koala), raven) == True\nburn(warehouse_of(koala), raven) = rule7()\nburn(warehouse_of(koala), raven) == True\nquestion = False", "answer": -1, "code": "rule1() = friends(tilapia) < 12 => remove(tilapia, piece_of(koala))\nrule2() = first_letter_of(name(tilapia)) == first_letter_of(name(eagle)) => remove(tilapia, piece_of(koala))\nrule3() = burn(warehouse_of(raven), blobfish) & sing_song(rabbit, victory_song_for(raven)) => not burn(warehouse_of(koala), raven)\nrule4() = burn(warehouse_of(koala), raven) => roll_dice(koala, wolverine)\nrule5() = friends(raven) > 7 => burn(warehouse_of(koala), raven)\nrule6() = roll_dice(koala, wolverine) => not roll_dice(wolverine, canary)\nrule7() = has(raven, something_to_sit_on) => burn(warehouse_of(koala), raven)\norder(rule3) > order(rule5) = True\norder(rule3) > order(rule7) = True\n\nname(eagle, Bella) = True\nsing_song(rabbit, victory_song_for(raven)) = True\nfriends(raven) = 12\nhas(raven, knife) = True\nenemy(tilapia, aardvark) = True\nfriends(tilapia) = 7\nmean_friend(tilapia) = 1\nname(tilapia, Paco) = True\n\nquestion = roll_dice(wolverine, canary)\n"}, {"idx": 443, "response": "has(cat, card_with(red_color)) == True\nred_color in colors_of(flag_of(France)) == True\nhas(cat, card_with(color)) == True\nknows(defense_plan_of(parrot), cat) = rule1()\nknows(defense_plan_of(parrot), cat) == True\nknows(defense_plan_of(parrot), cat) == True\nshow_cards(mosquito, panther) = rule2()\nshow_cards(mosquito, panther) == True\nshow_cards(mosquito, panther) == True\nquestion = True", "answer": 1, "code": "rule1() = has(cat, card_with(color)) & color in colors_of(flag_of(France)) => knows(defense_plan_of(parrot), cat)\nrule2() = enemy(something, baboon) => show_cards(mosquito, panther)\nrule3() = friends(cat) > 10 => knows(defense_plan_of(parrot), cat)\nrule4(something) = respects(something, spider) & learn(something, elementary_resource_management_from(sea_bass)) => not remove(something, piece_of(baboon))\nrule5() = first_letter_of(name(cat)) == first_letter_of(name(cockroach)) => not learn_basics_of_resource_management(cat, sea_bass)\nrule6() = knows(defense_plan_of(parrot), something) => remove(something, piece_of(baboon))\nrule7() = not has(cat, keys) => learn_elementary_resource_management(cat, sea_bass)\norder(rule6) > order(rule4) = True\norder(rule7) > order(rule5) = True\n\nfriends(cat) = 4\nwise_friends(cat) = 2\nnot_wise_friends(cat) = 2\nparked_bike(cat, in_front_of(store)) = True\nhas(cat, card_with(red_color)) = True\nname(cockroach, Bella) = True\n\nquestion = show_cards(mosquito, panther)\n"}, {"idx": 444, "response": "not attack(starfish, green_fields_of(carp)) = True\nknock_down(fortress_of(viperfish), starfish) = rule3(starfish)\nknock_down(fortress_of(viperfish), starfish) == True\nknock_down(fortress_of(viperfish), starfish) == True\nknows(starfish, defense_plan_of(starfish)) = rule6()\nknows(starfish, defense_plan_of(starfish)) == True\nknows(starfish, defense_plan_of(starfish)) == True\neats(starfish, food_of(grasshopper)) = rule2()\neats(starfish, food_of(grasshopper)) == True\neats(starfish, food_of(grasshopper)) == True\nquestion = True", "answer": 1, "code": "rule1() = knock_down(fortress_of(viperfish), something) & learn(something, elementary_resource_management_from(parrot)) => knows(something, defensive_plans_of(black_bear))\nrule2() = knows(something, defensive_plans_of(black_bear)) => eats(something, food_of(grasshopper))\nrule3(something) = not attack(something, green_fields_of(carp)) => knock_down(fortress_of(viperfish), something)\nrule4() = needs_support(raven, gecko) & respects(buffalo, gecko) => not knows(gecko, defensive_plans_of(starfish))\nrule5() = first_letter_of(name(starfish)) == first_letter_of(name(koala)) => learn_basics_of_resource_management(starfish, parrot)\nrule6() = show_all_cards(something, goldfish) => knows(something, defense_plan_of(starfish))\norder(rule6) > order(rule4) = True\n\nrespects(buffalo, gecko) = True\nshow_all_cards(gecko, goldfish) = True\nname(koala, Paco) = True\nneeds_support(raven, gecko) = True\nname(starfish, Peddi) = True\nnot attack(starfish, green_fields_of(carp)) = True\n\nquestion = eats(starfish, food_of(grasshopper))\n"}, {"idx": 445, "response": "name(black_bear, Lola) == True\nname(oscar, Lucy) == True\nfirst_letter_of(name(oscar)) == first_letter_of(name(black_bear)) == True\nknock_down_fortress(oscar, carp) = rule5()\nknock_down_fortress(oscar, carp) == True\nknock_down_fortress(oscar, carp) == True\nsteal_points(baboon, 5, panda_bear) = rule3()\nsteal_points(baboon, 5, panda_bear) == True\nsteal_points(baboon, 5, panda_bear) == True\nnot sing_song(panda_bear, victory_song_for(zander)) = rule1()\nsing_song(panda_bear, victory_song_for(zander)) == False\nsing_song(panda_bear, victory_song_for(zander)) == False\nquestion = False", "answer": -1, "code": "rule1() = steal_points(baboon, 5, panda_bear) => not sing_song(panda_bear, victory_song_for(zander))\nrule2() = fan_of(phoenix, Chris_Ronaldo) => not steal_points(phoenix, 5, baboon)\nrule3() = knock_down_fortress(animal, carp) => steal_points(baboon, 5, panda_bear)\nrule4() = respects(mosquito, phoenix) => steal_points(phoenix, 5, baboon)\nrule5() = first_letter_of(name(oscar)) == first_letter_of(name(black_bear)) => knock_down_fortress(oscar, carp)\nrule6() = has(phoenix, drink) => not steal_points(phoenix, 5, baboon)\nrule7() = not owes_money_to(rabbit, baboon) & not steal_points(phoenix, 5, baboon) => not steal_points(baboon, 5, panda_bear)\nrule8() = has(oscar, sharp_object) => knock_down_fortress(oscar, carp)\norder(rule4) > order(rule2) = True\norder(rule4) > order(rule6) = True\norder(rule7) > order(rule3) = True\n\nname(black_bear, Lola) = True\nhas(oscar, plastic_bag) = True\nname(oscar, Lucy) = True\nhas(phoenix, cutter) = True\nsupports(phoenix, Chris_Ronaldo) = True\n\nquestion = sing_song(panda_bear, victory_song_for(zander))\n"}, {"idx": 446, "response": "respects(hare, sheep) = rule1()\nrespects(hare, sheep) == True\nnot wink(sheep, kangaroo) = rule1()\nwink(sheep, kangaroo) == False\nquestion = False", "answer": -1, "code": "rule1() = respects(hare, sheep) => not wink(sheep, kangaroo)\nrule2(something) = not show_all_cards(something, doctorfish) & not offer_job(something, doctorfish) => proceed(something, spot_right_after(spot_of(kiwi)))\nrule3() = proceed(something, spot_right_after(spot_of(kiwi))) => prepare_armor(polar_bear, sheep)\nrule4() = prepare_armor(polar_bear, sheep) => wink(sheep, kangaroo)\norder(rule1) > order(rule4) = True\n\nfriends(rabbit) = 15\noffer_job(rabbit, doctorfish) = True\nnot show_all_cards(rabbit, doctorfish) = True\nlost(rabbit, keys) = True\n\nquestion = wink(sheep, kangaroo)\n"}, {"idx": 447, "response": "not enemy(cockroach, tilapia) = rule2()\nenemy(cockroach, tilapia) == False\nwink(kangaroo, tilapia) = rule3()\nwink(kangaroo, tilapia) == True\nenemy(cockroach, tilapia) == False\neat_food(tilapia, food_of(parrot)) = rule3()\neat_food(tilapia, food_of(parrot)) == True\neat_food(tilapia, food_of(parrot)) == True\nquestion = True", "answer": 1, "code": "rule1() = offer_job_position(something, carp) => not give_magnifying_glass(kangaroo, sun_bear)\nrule2() = needs_support(something, rabbit) => not enemy(cockroach, tilapia)\nrule3() = wink(kangaroo, tilapia) & not enemy(cockroach, tilapia) => eat_food(tilapia, food_of(parrot))\nrule4() = first_letter_of(name(baboon)) == first_letter_of(name(spider)) => needs_support(baboon, rabbit)\nrule5() = has(baboon, sharp_object) => needs_support(baboon, rabbit)\nrule6(something) = not wink(something, koala) => enemy(something, kudu)\nrule7() = has(kangaroo, card_with(color_in_flag_of_france)) => not eat_food(kangaroo, food_of(donkey))\nrule8() = enemy(sea_bass, kudu) => points(kudu) == points(tilapia)\nrule9() = first_letter_of(name(kangaroo)) == first_letter_of(name(donkey)) => not eat_food(kangaroo, food_of(donkey))\nrule10() = sing_song(something, victory_song_for(crocodile)) => eat_food(kangaroo, food_of(donkey))\nrule11(something) = respects(something, kiwi) => enemy(something, tilapia)\nrule12() = eat_food(something, food_of(donkey)) & not give_magnifying_glass(something, sun_bear) => wink(something, tilapia)\norder(rule10) > order(rule7) = True\norder(rule10) > order(rule9) = True\norder(rule11) > order(rule2) = True\n\nhas(baboon, knife) = True\nname(baboon, Luna) = True\nnot enemy(baboon, starfish) = True\nname(donkey, Pablo) = True\nsing_song(grasshopper, victory_song_for(crocodile)) = True\nhas(kangaroo, card_with(blue_color)) = True\nname(kangaroo, Tarzan) = True\noffer_job_position(meerkat, carp) = True\nname(spider, Beauty) = True\nnot wink(sea_bass, koala) = True\n\nquestion = eat_food(tilapia, food_of(parrot))\n"}, {"idx": 448, "response": "remove(cat, piece_of(lobster)) == True\noffer_job_position(swordfish, lobster) == True\nsteal_points(lobster, 5, phoenix) = rule1()\nsteal_points(lobster, 5, phoenix) == True\nwink_at(phoenix, spider) = rule3()\nwink_at(phoenix, spider) == True\nwink_at(phoenix, spider) == True\nnot enemy(halibut, mosquito) = rule4()\nenemy(halibut, mosquito) == False\nwink_at(mosquito, buffalo) = rule4()\nwink_at(mosquito, buffalo) == True\nwink_at(mosquito, buffalo) == True\nquestion = True", "answer": 1, "code": "rule1() = remove(cat, piece_of(lobster)) & offer_job_position(swordfish, lobster) => steal_points(lobster, 5, phoenix)\nrule2() = wink_at(some_animal, spider) => not wink_at(mosquito, buffalo)\nrule3() = steal_points(lobster, 5, phoenix) => wink_at(phoenix, spider)\nrule4() = not enemy(halibut, mosquito) => wink_at(mosquito, buffalo)\norder(rule4) > order(rule2) = True\n\nremove(cat, piece_of(lobster)) = True\nname(lobster, Milo) = True\nname(starfish, Mojo) = True\noffer_job_position(swordfish, lobster) = True\n\nquestion = wink_at(mosquito, buffalo)\n"}, {"idx": 449, "response": "has(cat, card_with(orange_color)) == True\ncolor(card_with(orange_color)) == orange\ncolor(card_with(orange_color)) in flag_of_france_colors == False\nequal_points(cat, whale) = rule4()\nequal_points(cat, whale) == False\nsteal_points(oscar, 5, sun_bear) = rule3()\nsteal_points(oscar, 5, sun_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = has(cat, sharp_object) => not equal_points(cat, whale)\nrule2() = proceed(squirrel, spot_right_after(spot_of(cricket))) => not sing_song(cricket, victory_song_for(oscar))\nrule3() = raise_flag_of_peace(cricket, oscar) => steal_points(oscar, 5, sun_bear)\nrule4() = has(cat, card) and color(card) in flag_of_france_colors => equal_points(cat, whale)\nrule5() = first_letter_of(name(cat)) == first_letter_of(name(carp)) => not equal_points(cat, whale)\nrule6() = friends(cat) > 8 => equal_points(cat, whale)\nrule7() = equal_points(something, whale) => sing_song(cricket, victory_song_for(oscar))\norder(rule1) > order(rule4) = True\norder(rule1) > order(rule6) = True\norder(rule5) > order(rule4) = True\norder(rule5) > order(rule6) = True\norder(rule7) > order(rule2) = True\n\nname(carp, Milo) = True\nhas(cat, card_with(orange_color)) = True\nfriends(cat) = 12\nname(cat, Cinnamon) = True\n\nquestion = steal_points(oscar, 5, sun_bear)\n"}, {"idx": 450, "response": "has(penguin, card_with(white_color)) == True\ncolor(card_with(white_color)) == white\nknock_down_fortress(penguin, ferret) = rule1()\nknock_down_fortress(penguin, ferret) == True\nknock_down_fortress(penguin, ferret) == True\nkilled(penguin, mayor) == True\nknock_down_fortress(penguin, ferret) = rule3()\nknock_down_fortress(penguin, ferret) == True\nknock_down_fortress(penguin, ferret) == True\nfirst_letter_of(name(penguin)) == first_letter_of(name(amberjack)) = rule4()\nfirst_letter_of(name(penguin)) == first_letter_of(name(amberjack)) == True\nnot knock_down_fortress(penguin, ferret) = rule4()\nknock_down_fortress(penguin, ferret) == False\nrespect(starfish, gecko) = rule6()\nrespect(starfish, gecko) == True\nrespect(starfish, gecko) == True\nsteal_points(gecko, 5, black_bear) = rule5()\nsteal_points(gecko, 5, black_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = has(penguin, card) and color(card) in rainbow_colors => knock_down_fortress(penguin, ferret)\nrule2() = steal_points(canary, 5, starfish) => not respect(starfish, gecko)\nrule3() = killed(penguin, mayor) => knock_down_fortress(penguin, ferret)\nrule4() = first_letter_of(name(penguin)) == first_letter_of(name(amberjack)) => not knock_down_fortress(penguin, ferret)\nrule5() = respect(starfish, gecko) => steal_points(gecko, 5, black_bear)\nrule6(something) = knock_down_fortress(something, ferret) => respect(starfish, gecko)\norder(rule2) > order(rule6) = True\norder(rule4) > order(rule1) = True\norder(rule4) > order(rule3) = True\n\nname(amberjack, Luna) = True\nkilled(penguin, mayor) = True\nhas(penguin, card_with(white_color)) = True\n\nquestion = steal_points(gecko, 5, black_bear)\n"}, {"idx": 451, "response": "proceed(dog, spot_right_after(starfish)) == True\nenemy(starfish, bat) = rule1()\nenemy(starfish, bat) == True\nraise_flag_of_peace(panda_bear, caterpillar) = rule2()\nraise_flag_of_peace(panda_bear, caterpillar) == True\nnot sing_song(donkey, victory_song_for(caterpillar)) == True\nproceed(caterpillar, spot_right_after(spot_of(bat))) = rule2()\nproceed(caterpillar, spot_right_after(spot_of(bat))) == True\nprepare_armor(bat, kudu) = rule6()\nprepare_armor(bat, kudu) == True\nowes_money_to(bat, polar_bear) = question\nnot prepare_armor(bat, kudu) = rule3()\nprepare_armor(bat, kudu) == False\nquestion = False", "answer": -1, "code": "rule1() = proceed(dog, spot_right_after(starfish)) => enemy(starfish, bat)\nrule2() = raise_flag_of_peace(panda_bear, caterpillar) & not sing_song(donkey, victory_song_for(caterpillar)) => proceed(caterpillar, spot_right_after(spot_of(bat)))\nrule3() = owes_money_to(canary, bat) => not prepare_armor(bat, kudu)\nrule4(something) = prepare_armor(something, kudu) & not needs_support(something, lion) => not owes_money_to(something, polar_bear)\nrule5() = enemy(starfish, bat) => not needs_support(bat, lion)\nrule6() = proceed(caterpillar, spot_right_after(spot_of(bat))) => prepare_armor(bat, kudu)\norder(rule3) > order(rule6) = True\n\nproceed(dog, spot_right_after(starfish)) = True\nraise_flag_of_peace(panda_bear, caterpillar) = True\nnot sing_song(donkey, victory_song_for(caterpillar)) = True\n\nquestion = owes_money_to(bat, polar_bear)\n"}, {"idx": 452, "response": "name(koala, Mojo) == True\nname(kudu, Milo) == True\nfirst_letter_of(name(koala)) == first_letter_of(name(kudu)) == True\nsteals_points(koala, 5, crocodile) = rule3()\nsteals_points(koala, 5, crocodile) == True\nsteals_points(koala, 5, crocodile) == True\nnot steals_points(koala, 5, crocodile) == False\nquestion = False", "answer": -1, "code": "rule1() = not burn(warehouse_of(jellyfish)) => offer_job_position(something, lobster)\nrule2() = steals_points(something, 5, crocodile) => not offer_job_position(cheetah, lobster)\nrule3() = first_letter_of(name(koala)) == first_letter_of(name(kudu)) => steals_points(koala, 5, crocodile)\nrule4() = has(koala, card_with(color_starting_with(\"r\"))) => not steals_points(koala, 5, crocodile)\nrule5(something) = not give(something, magnifier, puffin) & respects(something, spider) => not steals_points(something, 5, lobster)\nrule6(something) = not holds_same_number_of_points(something, sheep) => not roll_dice(something, spider)\nrule7() = not roll_dice(eagle, spider) => raise_flag_of_peace(spider, lobster)\nrule8() = not steals_points(kiwi, 5, lobster) => owes_money_to(lobster, mosquito)\nrule9() = not respects(pig, spider) => not raise_flag_of_peace(spider, lobster)\nrule10() = owes_money_to(something, mosquito) => wink_at(something, viperfish)\norder(rule1) > order(rule2) = True\norder(rule4) > order(rule3) = True\norder(rule9) > order(rule7) = True\n\ngive(kiwi, magnifier, puffin) = True\nrespects(kiwi, spider) = True\nname(koala, Mojo) = True\nname(kudu, Milo) = True\nholds_same_number_of_points(eagle, sheep) = False\n\nquestion = wink_at(lobster, viperfish)\n"}, {"idx": 453, "response": "has_low_income_job(donkey) == True\nnot enemy(donkey, sheep) = rule11()\nenemy(donkey, sheep) == False\nprepare_armor(elephant, hare) = rule12()\nprepare_armor(elephant, hare) == True\nprepare_armor(elephant, hare) == True\nquestion = True", "answer": 1, "code": "rule1() = steals_points(something, 5, kudu) => not sing_song(something, victory_song_for(hippopotamus))\nrule2() = has(donkey, carry_apples_and_oranges) => enemy(donkey, sheep)\nrule3() = friends(donkey) > 6 => not enemy(donkey, sheep)\nrule4() = has(cricket, sharp_object) => needs_support(cricket, panda_bear)\nrule5(something) = needs_support(something, panda_bear) => raise_flag_of_peace(raven, elephant)\nrule6() = took_bike(cricket, store) => needs_support(cricket, panda_bear)\nrule7(something) = enemy(something, sheep) => sing_song(tiger, victory_song_for(amberjack))\nrule8() = friends(cricket) > 3 => not needs_support(cricket, panda_bear)\nrule9() = has(raven, card_with(color_in_flag_of_Netherlands)) => sing_song(raven, victory_song_for(hippopotamus))\nrule10() = raise_flag_of_peace(raven, elephant) => not prepare_armor(elephant, hare)\nrule11() = has_high_salary(donkey) => not enemy(donkey, sheep)\nrule12(something) = sing_song(something, victory_song_for(amberjack)) => prepare_armor(elephant, hare)\norder(rule11) > order(rule2) = True\norder(rule12) > order(rule10) = True\norder(rule3) > order(rule2) = True\norder(rule4) > order(rule8) = True\norder(rule6) > order(rule8) = True\norder(rule9) > order(rule1) = True\n\nhas(cricket, knife) = True\nfriends(cricket, adventurous) = 1\nfriends(cricket, not_adventurous) = 4\nparked_bike(cricket, store) = True\nname(cricket, Pashmak) = True\nname(dog, Milo) = True\nhas(donkey, basket) = True\nhas_low_income_job(donkey) = True\nhas(raven, card_with(red_color)) = True\nsteals_points(raven, 5, kudu) = True\n\nquestion = prepare_armor(elephant, hare)\n"}, {"idx": 454, "response": "name(cheetah, Tarzan) == True\nname(panther, Tessa) == True\nfirst_letter_of(name(cheetah)) == first_letter_of(name(panther)) == True\nnot show_all_cards(cheetah, salmon) = rule2()\nshow_all_cards(cheetah, salmon) == False\nrolls_dice(cheetah, black_bear) = rule1()\nrolls_dice(cheetah, black_bear) == True\nrolls_dice(cheetah, black_bear) == True\neats_food(cheetah, wolverine) = rule3(cheetah)\neats_food(cheetah, wolverine) == True\neats_food(cheetah, wolverine) == True\nnot sing_song(gecko, victory_song_for(goldfish)) = rule5()\nsing_song(gecko, victory_song_for(goldfish)) == False\nsing_song(gecko, victory_song_for(goldfish)) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(cheetah) > 5 => rolls_dice(cheetah, black_bear)\nrule2() = first_letter_of(name(cheetah)) == first_letter_of(name(panther)) => not show_all_cards(cheetah, salmon)\nrule3(something) = show_all_cards(something, salmon) & rolls_dice(something, black_bear) => eats_food(something, wolverine)\nrule4() = published_high_quality_paper(cheetah) => show_all_cards(cheetah, salmon)\nrule5() = eats_food(something, wolverine) => not sing_song(gecko, victory_song_for(goldfish))\nrule6() = has(cheetah, card_with(color_in(rainbow_colors))) => show_all_cards(cheetah, salmon)\norder(rule4) > order(rule2) = True\norder(rule6) > order(rule2) = True\n\nfriends(cheetah) = 11\nhas(cheetah, card_with(yellow_color)) = True\nname(cheetah, Tarzan) = True\nrecently_read_high_quality_paper(cheetah) = True\nname(panther, Tessa) = True\n\nquestion = sing_song(gecko, victory_song_for(goldfish))\n"}, {"idx": 455, "response": "took(wolverine, bike_from(store)) = True\nknows_defense_plan(wolverine, kiwi) = rule1()\nknows_defense_plan(wolverine, kiwi) == True\nsteal_points(kiwi, 5, sun_bear) = rule3()\nsteal_points(kiwi, 5, sun_bear) == True\nknock_down(sun_bear, fortress_of(phoenix)) = rule2()\nknock_down(sun_bear, fortress_of(phoenix)) == True\nquestion = True", "answer": 1, "code": "rule1() = took(wolverine, bike_from(store)) => knows_defense_plan(wolverine, kiwi)\nrule2() = steal_points(kiwi, 5, sun_bear) => knock_down(sun_bear, fortress_of(phoenix))\nrule3() = learn_basics_of_resource_management(wolverine, kiwi) => steal_points(kiwi, 5, sun_bear)\n\ntook(wolverine, bike_from(store)) = True\n\nquestion = knock_down(sun_bear, fortress_of(phoenix))\n"}, {"idx": 456, "response": "knock_down(fortress_of(donkey), viperfish) == True\nnot show_cards(crocodile, carp) = rule4()\nshow_cards(crocodile, carp) == False\nenemy(crocodile, polar_bear) = rule5()\nenemy(crocodile, polar_bear) == False\nshow_cards(crocodile, carp) == False\nneed_support(crocodile, panda_bear) = rule5()\nneed_support(crocodile, panda_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = not prepare_armor(parrot, crocodile) => show_cards(crocodile, carp)\nrule2() = not remove(donkey, piece_of(crocodile)) & not remove(pig, piece_of(crocodile)) => actual_enemy(crocodile, polar_bear)\nrule3() = has(pig, card_with(color_in_flag_of_Japan)) => not remove(pig, piece_of(crocodile))\nrule4(something) = knock_down(fortress_of(cheetah), something) => not show_cards(crocodile, carp)\nrule5(something) = enemy(something, polar_bear) & show_cards(something, carp) => need_support(something, panda_bear)\nrule6(something) = learns(something, elementary_resource_management_from(eel)) => not remove(something, piece_of(crocodile))\nrule7() = friends(parrot) < 10 => prepare_armor(parrot, crocodile)\nrule8() = first_letter_of(name(parrot)) == first_letter_of(name(squid)) => not prepare_armor(parrot, crocodile)\norder(rule4) > order(rule1) = True\norder(rule7) > order(rule8) = True\n\nlearns(donkey, basics_of_resource_management_from(eel)) = True\nname(parrot, Milo) = True\nhas(pig, card_with(red_color)) = True\nname(squid, Meadow) = True\nknock_down(fortress_of(donkey), viperfish) = True\n\nquestion = need_support(crocodile, panda_bear)\n"}, {"idx": 457, "response": "not raise_flag_of_peace(pig, black_bear) = True\nraise_flag_of_peace(pig, black_bear) == False\nnot raise_flag_of_peace(pig, wolverine) = rule6()\nraise_flag_of_peace(pig, wolverine) == True\nraise_flag_of_peace(pig, wolverine) == True\nattack_green_fields(pig, green_fields_of(leopard)) = rule3()\nattack_green_fields(pig, green_fields_of(leopard)) == True\nattack_green_fields(pig, green_fields_of(leopard)) == True\nattack_green_fields(pig, green_fields_of(wolverine)) = rule1()\nattack_green_fields(pig, green_fields_of(wolverine)) == True\nattack_green_fields(pig, green_fields_of(wolverine)) == True\nnot knock_down_fortress(pig, fortress_of(koala)) = rule5()\nknock_down_fortress(pig, fortress_of(koala)) == False\nknock_down_fortress(pig, fortress_of(koala)) == False\nquestion = False", "answer": -1, "code": "rule1() = raise_flag_of_peace(something, wolverine) => attack_green_fields(something, green_fields_of(wolverine))\nrule2() = show_cards(something, turtle) => knows(defense_plan_of(pig), amberjack)\nrule3() = owes_money_to(something, moose) => attack_green_fields(pig, green_fields_of(leopard))\nrule4() = not knows(defensive_plans_of(pig), halibut) => not attack_green_fields(pig, green_fields_of(leopard))\nrule5() = attack_green_fields(something, green_fields_of(leopard)) & attack_green_fields(something, green_fields_of(wolverine)) => not knock_down_fortress(something, fortress_of(koala))\nrule6() = not raise_flag_of_peace(something, black_bear) => raise_flag_of_peace(something, wolverine)\nrule7() = raise_flag_of_peace(something, mosquito) => not raise_flag_of_peace(something, wolverine)\nrule8() = steal_points(raven, 5, cricket) & proceed(phoenix, spot_right_after(spot_of(cricket))) => owes_money_to(cricket, moose)\nrule9() = sing_song(something, victory_song_for(canary)) => show_cards(something, turtle)\norder(rule4) > order(rule3) = True\norder(rule7) > order(rule6) = True\n\nsing_song(buffalo, victory_song_for(canary)) = True\nproceed(phoenix, spot_right_after(spot_of(cricket))) = True\nsteal_points(raven, 5, cricket) = True\nnot raise_flag_of_peace(pig, black_bear) = True\n\nquestion = knock_down_fortress(pig, fortress_of(koala))\n"}, {"idx": 458, "response": "not attack(ferret, green_fields_of(hippopotamus)) = rule1()\nattack(ferret, green_fields_of(hippopotamus)) == False\nnot give_magnifying_glass(salmon, ferret) = rule1()\ngive_magnifying_glass(salmon, ferret) == False\nremove(ferret, piece_of(black_bear)) = rule2()\nremove(ferret, piece_of(black_bear)) == False\nfriends(salmon) > 8 = rule3()\nfriends(salmon) == 14\nnot burn(warehouse_of(ferret)) = rule3()\nburn(warehouse_of(ferret)) == False\nnot attack(ferret, green_fields_of(hippopotamus)) = rule4(ferret)\nattack(ferret, green_fields_of(hippopotamus)) == False\ngive_magnifier(ferret, leopard) = rule4(ferret)\ngive_magnifier(ferret, leopard) == True\ngive_magnifier(ferret, leopard) == True\npoints(hippopotamus) != points(ferret) = rule5()\npoints(hippopotamus) == points(ferret) == False\nfirst_letter_of(name(zander)) == first_letter_of(name(baboon)) = rule6()\nfirst_letter_of(name(zander)) == first_letter_of(name(baboon)) == False\nattack(sun_bear, green_fields_of(zander)) = rule7()\nattack(sun_bear, green_fields_of(zander)) == True\ngive_magnifier(zander, ferret) = rule7()\ngive_magnifier(zander, ferret) == True\ngive_magnifier(zander, ferret) == True\nquestion = True", "answer": 1, "code": "rule1() = not attack(ferret, green_fields_of(hippopotamus)) & not give_magnifying_glass(salmon, ferret) => True\nrule2() = remove(something, piece_of(black_bear)) => points(hippopotamus) == points(ferret)\nrule3() = friends(salmon) > 8 => not burn(warehouse_of(ferret))\nrule4(something) = not attack(something, green_fields_of(hippopotamus)) => give_magnifier(something, leopard)\nrule5() = has_high_salary(hippopotamus) => points(hippopotamus) != points(ferret)\nrule6() = first_letter_of(name(zander)) == first_letter_of(name(baboon)) => not give_magnifier(zander, ferret)\nrule7() = attack(sun_bear, green_fields_of(zander)) => give_magnifier(zander, ferret)\norder(rule5) > order(rule2) = True\norder(rule6) > order(rule7) = True\n\nname(baboon, Paco) = True\nassassinated(hippopotamus, mayor) = True\nremove(raven, piece_of(black_bear)) = True\nfriends(salmon) = 14\nattack(sun_bear, green_fields_of(zander)) = True\n\nquestion = give_magnifier(ferret, leopard)\n"}, {"idx": 459, "response": "friends(whale) > 5 = rule1()\nfriends(whale) > 5 == True\nowes_money_to(whale, cheetah) = rule1()\nowes_money_to(whale, cheetah) == True\nknock_down(fortress_of(eagle), whale) = rule7()\nknock_down(fortress_of(eagle), whale) == True\nshow_cards(whale, wolverine) = rule6(whale)\nshow_cards(whale, wolverine) == True\nshow_cards(whale, wolverine) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(whale) > 5 => owes_money_to(whale, cheetah)\nrule2() = first_letter_of(name(whale)) == first_letter_of(name(meerkat)) => owes_money_to(whale, cheetah)\nrule3() = believes(lion, learns_elementary_resource_management_from(whale)) & points(carp) == points(whale) => not knock_down(fortress_of(eagle), whale)\nrule4() = first_letter_of(name(lion)) == first_letter_of(name(caterpillar)) => learns_basics_of_resource_management(lion, whale)\nrule5() = eats_food(animal, food_of(penguin)) => points(carp) == points(whale)\nrule6(something) = knock_down(fortress_of(eagle), something) => show_cards(something, wolverine)\nrule7() = owes_money_to(something, cheetah) => knock_down(fortress_of(eagle), something)\nrule8(something) = prepare_armor(something, koala) & enemy(something, canary) => not learns_elementary_resource_management(something, whale)\nrule9() = has(lion, card_with(color_in(rainbow_colors))) => learns_elementary_resource_management(lion, whale)\norder(rule4) > order(rule8) = True\norder(rule7) > order(rule3) = True\norder(rule9) > order(rule8) = True\n\nname(caterpillar, Blossom) = True\nenemy(lion, canary) = True\nhas(lion, card_with(yellow_color)) = True\nname(lion, Lucy) = True\nprepare_armor(lion, koala) = True\nname(meerkat, Bella) = True\neats_food(rabbit, food_of(penguin)) = True\nfriends(whale) = 15\nname(whale, Lily) = True\n\nquestion = show_cards(whale, wolverine)\n"}, {"idx": 460, "response": "color_starts_with(snail, card) == \"r\" = rule3()\ncolor_starts_with(snail, card) == \"r\" == False\nshow_cards(snail, lion) = rule3()\nshow_cards(snail, lion) == False\nshow_cards(snail, lion) == False\nnot proceed(snail, spot_right_after(spot_of(leopard))) = rule6()\nproceed(snail, spot_right_after(spot_of(leopard))) == False\nproceed(snail, spot_right_after(spot_of(leopard))) == False\nquestion = False", "answer": -1, "code": "rule1() = has(moose, drink) => raise_flag_of_peace(moose, snail)\nrule2(something) = not respects(something, grasshopper) => remove(something, piece_of(snail))\nrule3() = color_starts_with(snail, card) == \"r\" => show_cards(snail, lion)\nrule4(something) = learns_basics_of_resource_management(something, donkey) => raise_flag_of_peace(eagle, spider)\nrule5() = friends(meerkat) < 12 => respects(meerkat, grasshopper)\nrule6() = not roll_dice(grizzly_bear, snail) & remove(meerkat, piece_of(snail)) => not proceed(snail, spot_right_after(spot_of(leopard)))\nrule7() = has(carp, card_with(primary_color)) => not eat_food(carp, food_of(grizzly_bear))\nrule8(something) = show_cards(something, lion) => not knows(defensive_plans_of(spider), something)\nrule9() = purchased(carp, time_machine) => not eat_food(carp, food_of(grizzly_bear))\nrule10(something) = not roll_dice(something, puffin) & offer_job_position(something, squid) => not respects(something, grasshopper)\nrule11() = give(hare, magnifier, meerkat) => not remove(meerkat, piece_of(snail))\nrule12() = friends(carp) < 6 => eat_food(carp, food_of(grizzly_bear))\nrule13() = first_letter_of(name(carp)) == first_letter_of(name(kudu)) => eat_food(carp, food_of(grizzly_bear))\nrule14() = eat_food(carp, food_of(grizzly_bear)) => not roll_dice(grizzly_bear, snail)\nrule15() = first_letter_of(name(snail)) == first_letter_of(name(pig)) => show_cards(snail, lion)\norder(rule11) > order(rule2) = True\norder(rule5) > order(rule10) = True\norder(rule7) > order(rule12) = True\norder(rule7) > order(rule13) = True\norder(rule9) > order(rule12) = True\norder(rule9) > order(rule13) = True\n\nfriends(carp) = 11\ninvented(carp, time_machine) = True\nname(carp, Milo) = True\nwinks(doctorfish, cat) = True\nlearns_basics_of_resource_management(hippopotamus, donkey) = True\nname(kudu, Mojo) = True\noffer_job_position(meerkat, squid) = True\nnot roll_dice(meerkat, puffin) = True\nhas(moose, hot_chocolate) = True\nname(pig, Casper) = True\nhas(snail, card_with(green_color)) = True\nname(snail, Cinnamon) = True\n\nquestion = proceed(snail, spot_right_after(spot_of(leopard)))\n"}, {"idx": 461, "response": "has(swordfish, banana_strawberry_smoothie) == True\nnot raise_flag_of_peace(swordfish, amberjack) = rule1()\nraise_flag_of_peace(swordfish, amberjack) == False\nnot learn_basics_of_resource_management(amberjack, bat) = rule5()\nlearn_basics_of_resource_management(amberjack, bat) == False\nsteal_points(whale, spider, 5) = rule7(whale)\nsteal_points(whale, spider, 5) == True\nnot proceed(kangaroo, spot_right_after(spot_of(amberjack))) = rule3()\nproceed(kangaroo, spot_right_after(spot_of(amberjack))) == False\nlearn_basics_of_resource_management(amberjack, bat) = question\nquestion = False", "answer": -1, "code": "rule1() = not raise_flag_of_peace(swordfish, amberjack) => learn_basics_of_resource_management(amberjack, bat)\nrule2() = not needs_support(panda_bear, swordfish) => not show_cards(swordfish, hare)\nrule3() = steal_points(something, spider, 5) => not proceed(kangaroo, spot_right_after(spot_of(amberjack)))\nrule4() = roll_dice(cheetah, kangaroo) => proceed(kangaroo, spot_right_after(spot_of(amberjack)))\nrule5() = steal_points(eagle, amberjack, 5) & not proceed(kangaroo, spot_right_after(spot_of(amberjack))) => not learn_elementary_resource_management(amberjack, bat)\nrule6() = has(swordfish, drink) => show_cards(swordfish, hare)\nrule7(something) = eats_food(something, food_of(doctorfish)) => steal_points(something, spider, 5)\nrule8(something) = show_cards(something, hare) => raise_flag_of_peace(something, amberjack)\norder(rule2) > order(rule6) = True\norder(rule4) > order(rule3) = True\norder(rule5) > order(rule1) = True\n\nhas(swordfish, banana_strawberry_smoothie) = True\neats_food(whale, food_of(doctorfish)) = True\n\nquestion = learn_basics_of_resource_management(amberjack, bat)\n"}, {"idx": 462, "response": "needs_support(polar_bear, panther) = rule3()\nneeds_support(polar_bear, panther) == True\nattack(polar_bear, green_fields_of(squid)) = rule4()\nattack(polar_bear, green_fields_of(squid)) == True\nattack(polar_bear, green_fields_of(squid)) == True\nrespect(polar_bear, baboon) = rule1(polar_bear)\nrespect(polar_bear, baboon) == True\nrespect(polar_bear, baboon) == True\nquestion = True", "answer": 1, "code": "rule1(something) = attack(something, green_fields_of(squid)) & needs_support(something, panther) => respect(something, baboon)\nrule2() = sing_song(something, victory_song_for(cheetah)) => not needs_support(something, panther)\nrule3() = give_magnifier(something, grasshopper) => needs_support(polar_bear, panther)\nrule4() = owes_money_to(lobster, polar_bear) => attack(polar_bear, green_fields_of(squid))\nrule5() = has(polar_bear, high_quality_paper) => not sing_song(polar_bear, victory_song_for(cheetah))\nrule6() = needs_support(panther, bat) => give_magnifier(bat, grasshopper)\nrule7() = not enemy(parrot, polar_bear) & not remove(cheetah, piece_of(polar_bear)) => sing_song(polar_bear, victory_song_for(cheetah))\nrule8(something) = points(something) == points(leopard) => owes_money_to(lobster, polar_bear)\norder(rule3) > order(rule2) = True\norder(rule5) > order(rule7) = True\n\npoints(grizzly_bear) == points(leopard) = True\nneeds_support(panther, bat) = True\nnot remove(cheetah, piece_of(polar_bear)) = True\nnot enemy(parrot, polar_bear) = True\n\nquestion = respect(polar_bear, baboon)\n"}, {"idx": 463, "response": "raise_flag_of_peace(cricket, pig) == True\nnot raise_flag_of_peace(cricket, raven) = rule6()\nraise_flag_of_peace(cricket, raven) == False\nraise_flag_of_peace(cricket, raven) == False\nquestion = False", "answer": -1, "code": "rule1() = has(grasshopper, card) and color(card) in rainbow_colors => knows_defensive_plans(grasshopper, cricket)\nrule2(something) = steal_points(something, cockroach, 5) & remove(something, piece_of(hippopotamus)) => enemy(something, black_bear)\nrule3() = starts_with(color(card_of(cricket)), \"b\") => not remove(cricket, piece_of(hippopotamus))\nrule4() = knock_down(fortress_of(cheetah), something) => steal_points(cricket, cockroach, 5)\nrule5(something) = raise_flag_of_peace(something, pig) => remove(something, piece_of(hippopotamus))\nrule6(something) = enemy(something, black_bear) => not raise_flag_of_peace(something, raven)\nrule7() = offer_job(something, zander) => needs_support(goldfish, cricket)\nrule8() = has(grasshopper, connect_to_internet(device)) => not knows_defensive_plans(grasshopper, cricket)\nrule9() = friends(grasshopper) > 5 => not knows_defensive_plans(grasshopper, cricket)\nrule10() = purchased(grasshopper, time_machine) => knows_defensive_plans(grasshopper, cricket)\norder(rule3) > order(rule5) = True\norder(rule8) > order(rule1) = True\norder(rule8) > order(rule10) = True\norder(rule9) > order(rule1) = True\norder(rule9) > order(rule10) = True\n\nraise_flag_of_peace(cricket, pig) = True\nknock_down(fortress_of(cheetah), dog) = True\noffer_job(elephant, zander) = True\nhas(goldfish, low_income_job) = True\nfriends(goldfish, loyal) = 3\nfriends(goldfish, not_loyal) = 2\nfriends(grasshopper) = 4\nhas(grasshopper, card_with(blue_color)) = True\ninvented(grasshopper, time_machine) = True\n\nquestion = raise_flag_of_peace(cricket, raven)\n"}, {"idx": 464, "response": "not raise_flag_of_peace(raven, panda_bear) = rule1()\nraise_flag_of_peace(raven, panda_bear) == False\nstole_bike_from_store(raven) == True\nshow_cards(raven, penguin) = rule11()\nshow_cards(raven, penguin) == True\nshow_cards(raven, penguin) == True\nnot raise_flag_of_peace(raven, panda_bear) == False\nburn(warehouse_of(grizzly_bear), raven) = rule8()\nburn(warehouse_of(grizzly_bear), raven) == True\nburn(warehouse_of(grizzly_bear), raven) == True\nquestion = True", "answer": 1, "code": "rule1() = give(pig, magnifying_glass, raven) & sing_song(cheetah, victory_song_for(raven)) => not raise_flag_of_peace(raven, panda_bear)\nrule2(something) = owes_money_to(something, penguin) & not proceed(something, spot_right_after(spot_of(meerkat))) => raise_flag_of_peace(something, panda_bear)\nrule3() = first_letter_of(name(raven)) == first_letter_of(name(puffin)) => show_cards(raven, penguin)\nrule4() = has(raven, musical_instrument) => not show_cards(raven, penguin)\nrule5() = has(raven, card_with(color_in(flag_of(Netherlands)))) => not show_cards(raven, penguin)\nrule6() = knows(defense_plan_of(pig), tiger) => give(pig, magnifier, raven)\nrule7(something) = not prepare_armor(something, sea_bass) => proceed(something, spot_right_after(spot_of(meerkat)))\nrule8(something) = not raise_flag_of_peace(something, panda_bear) => burn(warehouse_of(grizzly_bear), something)\nrule9() = owes_money_to(something, black_bear) => not proceed(raven, spot_right_after(spot_of(meerkat)))\nrule10() = give(something, magnifying_glass, mosquito) => sing_song(cheetah, victory_song_for(raven))\nrule11() = took_bike_from_store(raven) => show_cards(raven, penguin)\norder(rule1) > order(rule2) = True\norder(rule4) > order(rule11) = True\norder(rule4) > order(rule3) = True\norder(rule5) > order(rule11) = True\norder(rule5) > order(rule3) = True\norder(rule9) > order(rule7) = True\n\ngive(aardvark, magnifier, mosquito) = True\nlearns_basics_of_resource_management(leopard, black_bear) = True\nname(puffin, Lily) = True\nhas(raven, beer) = True\nstole_bike_from_store(raven) = True\nname(raven, Pashmak) = True\nlearns_basics_of_resource_management(tiger, pig) = True\nnot burn(warehouse_of(sea_bass), raven) = True\n\nquestion = burn(warehouse_of(grizzly_bear), raven)\n"}, {"idx": 465, "response": "name(parrot, Tango) == True\nname(tiger, Tony) = True\ngive_magnifier(parrot, tiger) = True\nnot remove(parrot, piece_of(pig)) = rule7(parrot)\nremove(parrot, piece_of(pig)) == False\nnot raise_flag_of_peace(parrot, halibut) = rule5(parrot)\nraise_flag_of_peace(parrot, halibut) == False\ngive_magnifier(parrot, tiger) = True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(wolverine)) == first_letter_of(name(zander)) => steal_points(wolverine, 5, parrot)\nrule2() = first_letter_of(name(parrot)) == first_letter_of(name(whale)) => not sing_song(parrot, victory_song_for(lobster))\nrule3() = belief(hummingbird_burns_warehouse_of(parrot)) & belief(cockroach_knocks_down_fortress_of(parrot)) => sing_song(parrot, victory_song_for(lobster))\nrule4(something) = attack(green_fields_of(grizzly_bear)) => give_magnifier(something, tiger)\nrule5(something) = sing_song(something, victory_song_for(lobster)) => not raise_flag_of_peace(something, halibut)\nrule6() = steal_points(wolverine, 5, parrot) => attack(green_fields_of(grizzly_bear))\nrule7(something) = not remove(something, piece_of(pig)) & not raise_flag_of_peace(something, halibut) => not give_magnifier(something, tiger)\norder(rule3) > order(rule2) = True\norder(rule7) > order(rule4) = True\n\nknocks_down_fortress(cockroach, parrot) = True\nburns_warehouse(hummingbird, parrot) = True\nfriends(parrot, mean) = 7\nfriends(parrot, not_mean) = 3\nname(parrot, Tango) = True\nname(whale, Peddi) = True\nname(wolverine, Max) = True\nname(zander, Meadow) = True\n\nquestion = give_magnifier(parrot, tiger)\n"}, {"idx": 466, "response": "knock_down(fortress_of(octopus), dog) = rule7()\nknock_down(fortress_of(octopus), dog) == True\neat(food_of(octopus), eagle) = rule6()\neat(food_of(octopus), eagle) == True\nnot steal_points(octopus, 5, canary) = rule7()\nsteal_points(octopus, 5, canary) == False\nquestion = False", "answer": -1, "code": "rule1() = knock_down(fortress_of(halibut), something) & attack(green_fields_of(rabbit), something) => knock_down(fortress_of(octopus), something)\nrule2() = not raise_flag_of_peace(moose, dog) => knock_down(fortress_of(halibut), dog)\nrule3() = has(oscar, card_with(color_starting_with(\"o\"))) => wink(oscar, cat)\nrule4() = knock_down(fortress_of(kangaroo), something) => attack(green_fields_of(rabbit), dog)\nrule5() = attack(green_fields_of(baboon), something) => not wink(oscar, cat)\nrule6() = give(raven, magnifier, eagle) => not eat(food_of(octopus), eagle)\nrule7() = knock_down(fortress_of(octopus), dog) & eat(food_of(octopus), eagle) => not steal_points(octopus, 5, canary)\nrule8() = wink(something, cat) => eat(food_of(octopus), eagle)\nrule9() = knock_down(fortress_of(puffin), something) => give(raven, magnifying_glass, eagle)\nrule10() = needs_support(something, wolverine) => not knock_down(fortress_of(halibut), something)\norder(rule10) > order(rule2) = True\norder(rule5) > order(rule3) = True\norder(rule8) > order(rule6) = True\n\nknock_down(fortress_of(puffin), black_bear) = True\nhas(oscar, card_with(orange_color)) = True\nknock_down(fortress_of(kangaroo), swordfish) = True\nnot raise_flag_of_peace(moose, dog) = True\n\nquestion = steal_points(octopus, 5, canary)\n"}, {"idx": 467, "response": "not has(kangaroo, keys) = True\noffer_job_position(kangaroo, catfish) = rule2()\noffer_job_position(kangaroo, catfish) == True\nburn(warehouse_of(catfish), jellyfish) = rule3()\nburn(warehouse_of(catfish), jellyfish) == True\nknows_defensive_plans(catfish, hippopotamus) = rule3()\nknows_defensive_plans(catfish, hippopotamus) == True\nrespect(catfish, snail) = rule1()\nrespect(catfish, snail) == True\nknows_defensive_plans(catfish, hippopotamus) == True\nlearn_basics_of_resource_management(catfish, kiwi) = rule5()\nlearn_basics_of_resource_management(catfish, kiwi) == True\nquestion = True", "answer": 1, "code": "rule1() = not sing_song(something, victory_song_for(panda_bear)) => respect(something, snail)\nrule2() = not has(kangaroo, keys) => offer_job_position(kangaroo, catfish)\nrule3() = offer_job_position(kangaroo, catfish) & burn(warehouse_of(catfish), jellyfish) => knows_defensive_plans(catfish, hippopotamus)\nrule4(something) = enemy(something, eel) => burn(warehouse_of(catfish), jellyfish)\nrule5() = knows_defensive_plans(something, hippopotamus) & respect(something, snail) => learn_basics_of_resource_management(something, kiwi)\nrule6() = count(friends(catfish)) > 3 => not sing_song(catfish, victory_song_for(panda_bear))\n\ncount(friends(catfish, adventurous)) = 3\ncount(friends(catfish, not adventurous)) = 2\nhas(jellyfish, card_with(green_color)) = True\nhas(jellyfish, love_seat_sofa) = True\nnot has(kangaroo, keys) = True\nnot enemy(grasshopper, eel) = True\n\nquestion = learn_basics_of_resource_management(catfish, kiwi)\n"}, {"idx": 468, "response": "knows_defense_plan(cat, donkey) == False\nnot knows_defense_plan(animal, donkey) = rule10()\nknows_defense_plan(animal, donkey) == False\neat_food(animal, food_of(tilapia)) = rule10()\neat_food(animal, food_of(tilapia)) == True\neat_food(animal, food_of(tilapia)) == True\nnot offer_job_position(cat, gecko) = rule9()\noffer_job_position(cat, gecko) == False\nknock_down_fortress(wolverine, fortress_of(gecko)) == True\nknows_defensive_plans(gecko, halibut) = rule9()\nknows_defensive_plans(gecko, halibut) == True\nknows_defensive_plans(gecko, halibut) == True\nquestion = True", "answer": 1, "code": "rule1() = not holds_equal_points(animal, cricket) => not knows_defense_plan(animal, goldfish)\nrule2(something) = eat_food(something, food_of(tilapia)) & knows_defense_plan(something, goldfish) => not offer_job_position(something, gecko)\nrule3() = first_letter_of(name(wolverine)) == first_letter_of(name(octopus)) => enemy(wolverine, crocodile)\nrule4() = knock_down_fortress(animal, panda_bear) => eat_food(bat, food_of(wolverine))\nrule5(something) = respects(something, pig) => steal_points(something, 5, gecko)\nrule6() = eat_food(bat, food_of(wolverine)) => knock_down_fortress(wolverine, fortress_of(gecko))\nrule7() = eat_food(animal, food_of(viperfish)) => knows_defense_plan(cat, goldfish)\nrule8() = has(tilapia, sharp_object) => respects(tilapia, pig)\nrule9() = not offer_job_position(cat, gecko) & knock_down_fortress(wolverine, fortress_of(gecko)) => knows_defensive_plans(gecko, halibut)\nrule10() = not knows_defense_plan(animal, donkey) => eat_food(animal, food_of(tilapia))\nrule11() = first_letter_of(name(tilapia)) == first_letter_of(name(parrot)) => respects(tilapia, pig)\norder(rule7) > order(rule1) = True\n\nknock_down_fortress(aardvark, fortress_of(panda_bear)) = True\neat_food(elephant, food_of(viperfish)) = True\nname(octopus, Pashmak) = True\nname(parrot, Paco) = True\nhas(tilapia, cutter) = True\nname(tilapia, Chickpea) = True\nname(wolverine, Paco) = True\nowes_money_to(zander, ferret) = True\nholds_equal_points(cat, cricket) = False\nknows_defense_plan(cat, donkey) = False\n\nquestion = knows_defensive_plans(gecko, halibut)\n"}, {"idx": 469, "response": "has(blobfish, card_with(primary_color)) = rule1()\nhas(blobfish, card_with(primary_color)) == True\nreduce_work_hours(mosquito) = rule2()\nreduce_work_hours(mosquito) == True\nnot steal_points(mosquito, 5, cow) = rule2()\nsteal_points(mosquito, 5, cow) == False\nhas(starfish, leafy_green_vegetable) = rule3()\nhas(starfish, leafy_green_vegetable) == True\nactual_enemy(starfish, mosquito) = rule3()\nactual_enemy(starfish, mosquito) == True\ncreated_time_machine(doctorfish) = rule4()\ncreated_time_machine(doctorfish) == True\nneeds_support(doctorfish, mosquito) = rule4()\nneeds_support(doctorfish, mosquito) == True\nactual_enemy(something, halibut) = rule5()\nactual_enemy(something, halibut) == unknown\nfirst_letter_of(name(whale)) == first_letter_of(name(raven)) = rule6()\nfirst_letter_of(name(whale)) == first_letter_of(name(raven)) == True\nneeds_support(whale, sheep) = rule6()\nneeds_support(whale, sheep) == True\nnot burn(warehouse_of(pig), something) = rule7(something)\nnot burn(warehouse_of(pig), something) == True\nactual_enemy(something, turtle) = rule7(something)\nactual_enemy(something, turtle) == True\nnot show_cards(something, cockroach) = rule7(something)\nnot show_cards(something, cockroach) == True\nneeds_support(something, sheep) = rule8()\nneeds_support(something, sheep) == unknown\nnot burn(warehouse_of(pig), mosquito) = rule8()\nnot burn(warehouse_of(pig), mosquito) == unknown\nfan_of(whale, Chris_Ronaldo) = rule9()\nfan_of(whale, Chris_Ronaldo) == True\nneeds_support(whale, sheep) = rule9()\nneeds_support(whale, sheep) == True\nsteal_points(something, 5, cow) = rule10()\nsteal_points(something, 5, cow) == unknown\nhas(starfish, card_with(color_starting_with(\"n\"))) = rule11()\nhas(starfish, card_with(color_starting_with(\"n\"))) == unknown\nactual_enemy(starfish, mosquito) = rule11()\nactual_enemy(starfish, mosquito) == unknown\nnot equal_points(hummingbird, mosquito) = rule12()\nnot equal_points(hummingbird, mosquito) == True\nsteal_points(mosquito, 5, cow) = rule12()\nsteal_points(mosquito, 5, cow) == True\nquestion = True", "answer": 1, "code": "rule1() = has(blobfish, card_with(primary_color)) => wink(blobfish, mosquito)\nrule2() = reduce_work_hours(mosquito) => not steal_points(mosquito, 5, cow)\nrule3() = has(starfish, leafy_green_vegetable) => actual_enemy(starfish, mosquito)\nrule4() = created_time_machine(doctorfish) => needs_support(doctorfish, mosquito)\nrule5() = actual_enemy(something, halibut) => not wink(blobfish, mosquito)\nrule6() = first_letter_of(name(whale)) == first_letter_of(name(raven)) => needs_support(whale, sheep)\nrule7(something) = not burn(warehouse_of(pig), something) & actual_enemy(something, turtle) => not show_cards(something, cockroach)\nrule8() = needs_support(something, sheep) => not burn(warehouse_of(pig), mosquito)\nrule9() = fan_of(whale, Chris_Ronaldo) => needs_support(whale, sheep)\nrule10() = steal_points(something, 5, cow) => enemy(something, turtle)\nrule11() = has(starfish, card_with(color_starting_with(\"n\"))) => actual_enemy(starfish, mosquito)\nrule12() = not equal_points(hummingbird, mosquito) => steal_points(mosquito, 5, cow)\norder(rule2) > order(rule12) = True\norder(rule5) > order(rule1) = True\n\nhas(blobfish, card_with(green_color)) = True\ncreated_time_machine(doctorfish) = True\nname(raven, Beauty) = True\nhas(starfish, card_with(indigo_color)) = True\nhas(starfish, romaine_lettuce) = True\nname(whale, Luna) = True\nsupports(whale, Chris_Ronaldo) = True\nnot remove(eel, piece_of(starfish)) = True\nnot equal_points(hummingbird, mosquito) = True\n\nquestion = show_cards(mosquito, cockroach)\n"}, {"idx": 470, "response": "not learn_basics_of_resource_management_from(canary, moose) = rule3()\nlearn_basics_of_resource_management_from(canary, moose) == False\nsteal_points(something, 5, elephant) = rule1()\nsteal_points(something, 5, elephant) == True\nprepare_armor(hippopotamus, amberjack) = rule4()\nprepare_armor(hippopotamus, amberjack) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not learn_basics_of_resource_management_from(something, moose) & wink_at(something, turtle) => steal_points(something, 5, elephant)\nrule2() = proceed(something, spot_right_after(spot_of(viperfish))) => wink_at(canary, turtle)\nrule3() = not respects(sheep, canary) & give(doctorfish, magnifying_glass, canary) => not learn_basics_of_resource_management_from(canary, moose)\nrule4() = steal_points(something, 5, elephant) => prepare_armor(hippopotamus, amberjack)\nrule5(something) = not roll_dice(something, octopus) => not wink_at(something, turtle)\norder(rule2) > order(rule5) = True\n\nknock_down(doctorfish, fortress_of(canary)) = True\nproceed(rabbit, spot_right_after(spot_of(viperfish))) = True\nnot roll_dice(canary, octopus) = True\nnot respects(sheep, canary) = True\n\nquestion = prepare_armor(hippopotamus, amberjack)\n"}, {"idx": 471, "response": "has(doctorfish, trumpet) == True\nenemy(doctorfish, aardvark) = rule4()\nenemy(doctorfish, aardvark) == True\nowes_money_to(panda_bear, doctorfish) == True\nwink(sun_bear, doctorfish) == True\nnot enemy(doctorfish, aardvark) = rule7()\nnot enemy(doctorfish, aardvark) == False\nnot need_support(doctorfish, donkey) = rule1(doctorfish)\nnot need_support(doctorfish, donkey) == False\nprepare_armor(doctorfish, polar_bear) = rule5(doctorfish)\nprepare_armor(doctorfish, polar_bear) == True\nprepare_armor(doctorfish, polar_bear) == True\nquestion = True", "answer": 1, "code": "rule1(something) = burn(warehouse_of(puffin), something) & enemy(something, aardvark) => not need_support(something, donkey)\nrule2() = sing_song(something, victory_song_for(crocodile)) => raise_flag_of_peace(gecko, doctorfish)\nrule3() = has(doctorfish, card_with(color_in(flag_of_Netherlands))) => burn(warehouse_of(puffin), doctorfish)\nrule4() = has(doctorfish, musical_instrument) => enemy(doctorfish, aardvark)\nrule5(something) = not need_support(something, donkey) => prepare_armor(something, polar_bear)\nrule6() = first_letter_of(name(doctorfish)) == first_letter_of(name(baboon)) => burn(warehouse_of(puffin), doctorfish)\nrule7() = owes_money_to(panda_bear, doctorfish) & wink(sun_bear, doctorfish) => not enemy(doctorfish, aardvark)\norder(rule4) > order(rule7) = True\n\nname(baboon, Milo) = True\nhas(doctorfish, card_with(orange_color)) = True\nname(doctorfish, Mojo) = True\nhas(doctorfish, trumpet) = True\nsing_song(hummingbird, victory_song_for(crocodile)) = True\nowes_money_to(panda_bear, doctorfish) = True\nraise_flag_of_peace(rabbit, sheep) = True\nwink(sun_bear, doctorfish) = True\n\nquestion = prepare_armor(doctorfish, polar_bear)\n"}, {"idx": 472, "response": "has(eagle, card_with(red_color)) == True\ngive_magnifier(eagle, koala) = rule2()\ngive_magnifier(eagle, koala) == True\ngive_magnifier(eagle, koala) == True\nnot raise_flag_of_peace(eagle, lobster) = rule4()\nraise_flag_of_peace(eagle, lobster) == False\nraise_flag_of_peace(eagle, lobster) == False\nquestion = False", "answer": -1, "code": "rule1() = owes_money_to(something, jellyfish) => not give_magnifying_glass(something, koala)\nrule2() = show_all_cards(something) => give_magnifier(eagle, koala)\nrule3() = friends(halibut) < 11 => show_all_cards(halibut)\nrule4() = give_magnifier(something, koala) => not raise_flag_of_peace(something, lobster)\nrule5() = has(eagle, card_with(color_in_flag_of_france)) => owes_money_to(eagle, jellyfish)\nrule6() = has(halibut, card_with(color_starting_with(\"e\"))) => show_all_cards(halibut)\norder(rule2) > order(rule1) = True\n\nhas(eagle, card_with(red_color)) = True\nfriends(halibut) = 1\nhas(halibut, card_with(red_color)) = True\n\nquestion = raise_flag_of_peace(eagle, lobster)\n"}, {"idx": 473, "response": "needs_support(kangaroo, bat) = True\nnot show_cards(bat, elephant) = rule2()\nshow_cards(bat, elephant) == False\nlearns(bat, basics_of_resource_management_from(kiwi)) == True\nnot show_cards(bat, elephant) = rule3(bat)\nshow_cards(bat, elephant) == False\noffer_job_position(bat, oscar) == True\nproceed(animal, spot_right_after(spot_of(oscar))) = rule1()\nproceed(animal, spot_right_after(spot_of(oscar))) == True\npoints(cow) == points(cheetah) == True\nquestion = True", "answer": 1, "code": "rule1() = proceed(animal, spot_right_after(spot_of(oscar))) => points(cow) == points(cheetah)\nrule2() = needs_support(kangaroo, bat) => not show_cards(bat, elephant)\nrule3(something) = not show_cards(something, elephant) => offer_job_position(something, oscar)\n\nlearns(bat, basics_of_resource_management_from(kiwi)) = True\nneeds_support(kangaroo, bat) = True\n\nquestion = points(cow) == points(cheetah)\n"}, {"idx": 474, "response": "has(swordfish, cello) == True\nnot eat_food(swordfish, food_of(dog)) = rule3()\neat_food(swordfish, food_of(dog)) == False\nfriends(swordfish) = 1\neat_food(swordfish, food_of(dog)) = rule5()\neat_food(swordfish, food_of(dog)) == True\neat_food(swordfish, food_of(dog)) == True\nnot knows_defense_plan(sun_bear, cricket) = rule8()\nknows_defense_plan(sun_bear, cricket) == False\nwink(dog, cricket) = rule1()\nwink(dog, cricket) == True\nwink(dog, cricket) == True\nraise_flag_of_peace(cricket, carp) = rule9()\nraise_flag_of_peace(cricket, carp) == True\nraise_flag_of_peace(cricket, carp) == True\nquestion = True", "answer": 1, "code": "rule1() = eat_food(swordfish, food_of(dog)) => wink(dog, cricket)\nrule2() = first_letter_of(name(swordfish)) == first_letter_of(name(grasshopper)) => eat_food(swordfish, food_of(dog))\nrule3() = has(swordfish, musical_instrument) => not eat_food(swordfish, food_of(dog))\nrule4() = not has(elephant, keys) => roll_dice(elephant, sea_bass)\nrule5() = friends(swordfish) < 1 => eat_food(swordfish, food_of(dog))\nrule6() = attack(snail, green_fields_of(cricket)) => not raise_flag_of_peace(cricket, carp)\nrule7(device) = has(elephant, connect_to_internet(device)) => roll_dice(elephant, sea_bass)\nrule8() = roll_dice(some_animal, sea_bass) => not knows_defense_plan(sun_bear, cricket)\nrule9() = wink(dog, cricket) & not knows_defense_plan(sun_bear, cricket) => raise_flag_of_peace(cricket, carp)\norder(rule2) > order(rule3) = True\norder(rule5) > order(rule3) = True\norder(rule6) > order(rule9) = True\n\nfriends(elephant) = 6\nhas(elephant, arugula) = True\nnot has(elephant, keys) = True\nname(grasshopper, Milo) = True\nfriends(swordfish) = 1\nhas(swordfish, cello) = True\nname(swordfish, Max) = True\n\nquestion = raise_flag_of_peace(cricket, carp)\n"}, {"idx": 475, "response": "has(bat, card_with(blue_color)) == True\nname(bat, Charlie) == True\nhas(bat, computer) == True\nshow_all_cards(squid, tiger) = rule5()\nshow_all_cards(squid, tiger) == True\nshow_all_cards(squid, tiger) == True\nattack(squid, green_fields_of(penguin)) = rule1()\nattack(squid, green_fields_of(penguin)) == True\nattack(squid, green_fields_of(penguin)) == True\nnot knock_down(eel, fortress_of(canary)) = rule3()\nknock_down(eel, fortress_of(canary)) == False\nknock_down(eel, fortress_of(canary)) == False\nquestion = False", "answer": -1, "code": "rule1() = show_all_cards(someone, tiger) => attack(turtle, green_fields_of(penguin))\nrule2() = has(bat, connect_to_internet(device)) => eat_food(bat, food_of(turtle))\nrule3() = attack(someone, green_fields_of(penguin)) => not knock_down(eel, fortress_of(canary))\nrule4() = first_letter_of(name(bat)) == first_letter_of(name(pig)) => eat_food(bat, food_of(turtle))\nrule5() = first_letter_of(name(squid)) == first_letter_of(name(lobster)) => show_all_cards(squid, tiger)\n\nhas(bat, card_with(blue_color)) = True\nname(bat, Charlie) = True\nhas(bat, computer) = True\nprepare_armor(carp, squid) = True\nname(lobster, Max) = True\nname(pig, Luna) = True\nname(squid, Mojo) = True\nroll_dice(viperfish, squid) = True\n\nquestion = knock_down(eel, fortress_of(canary))\n"}, {"idx": 476, "response": "name(goldfish, Charlie) == True\nname(meerkat, Beauty) == True\nsame_number_of_points(lobster, dog) = rule3()\nsame_number_of_points(lobster, dog) == False\nquestion = False", "answer": -1, "code": "rule1() = offer_job_position(something, starfish) => owes_money_to(tilapia, lobster)\nrule2() = prepare_armor(something, zander) => give(something, magnifying_glass, baboon)\nrule3() = give(something, magnifier, baboon) => not same_number_of_points(lobster, dog)\nrule4() = first_letter_of(name(meerkat)) == first_letter_of(name(goldfish)) => prepare_armor(meerkat, zander)\nrule5(something) = not proceed(something, spot_right_after(spot_of(crocodile))) & not same_number_of_points(something, hippopotamus) => not knock_down_fortress(something, crocodile)\nrule6() = knock_down_fortress(grizzly_bear, fortress_of(lobster)) & owes_money_to(tilapia, lobster) => same_number_of_points(lobster, dog)\nrule7() = has(grizzly_bear, musical_instrument) => knock_down_fortress(grizzly_bear, fortress_of(crocodile))\nrule8() = owes_money_to(donkey, meerkat) => not prepare_armor(meerkat, zander)\nrule9() = raise_flag_of_peace(something, starfish) => offer_job_position(eagle, starfish)\nrule10() = eats_food(something, food_of(crocodile)) => knock_down_fortress(something, fortress_of(lobster))\norder(rule4) > order(rule8) = True\norder(rule6) > order(rule3) = True\norder(rule7) > order(rule5) = True\n\nname(goldfish, Charlie) = True\nhas(grizzly_bear, computer) = True\nname(meerkat, Beauty) = True\nnot roll_dice(grizzly_bear, hippopotamus) = True\nnot raise_flag_of_peace(sea_bass, starfish) = True\n\nquestion = same_number_of_points(lobster, dog)\n"}, {"idx": 477, "response": "has(octopus, musical_instrument) == True\nnot knock_down(fortress_of(elephant)) = rule1()\nknock_down(fortress_of(elephant)) == False\nnot prepare_armor(something, meerkat) = rule3()\nprepare_armor(elephant, meerkat) == False\nhas(elephant, something_to_drink) == True\nraise_flag_of_peace(elephant, octopus) = rule4()\nraise_flag_of_peace(elephant, octopus) == True\nknock_down(fortress_of(salmon)) = rule5()\nknock_down(fortress_of(salmon)) == True\nknock_down(fortress_of(salmon)) == True\nattack(green_fields_owned_by(grizzly_bear)) = rule5()\nattack(green_fields_owned_by(grizzly_bear)) == True\nattack(green_fields_owned_by(grizzly_bear)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(octopus, musical_instrument) => not knock_down(fortress_of(elephant))\nrule2() = has(elephant, card_with(color_starting_with(\"g\"))) => not raise_flag_of_peace(elephant, octopus)\nrule3() = not prepare_armor(something, meerkat) => not attack(green_fields_owned_by(grizzly_bear))\nrule4() = has(elephant, something_to_drink) => raise_flag_of_peace(elephant, octopus)\nrule5() = knock_down(fortress_of(salmon)) => attack(green_fields_owned_by(grizzly_bear))\nrule6() = knock_down(fortress_of(octopus, elephant)) => knock_down(fortress_of(elephant, salmon))\nrule7() = first_letter_of(name(elephant)) == first_letter_of(name(cow)) => raise_flag_of_peace(elephant, octopus)\nrule8() = has(octopus, card_with(color_in_flag_of_Japan)) => not knock_down(fortress_of(elephant))\nrule9() = not raise_flag_of_peace(something, squid) => knock_down(fortress_of(elephant))\norder(rule1) > order(rule9) = True\norder(rule2) > order(rule4) = True\norder(rule2) > order(rule7) = True\norder(rule3) > order(rule5) = True\norder(rule8) > order(rule9) = True\n\nname(cow, Peddi) = True\nhas(elephant, trumpet) = True\nname(elephant, Pablo) = True\nhas(octopus, card_with(violet_color)) = True\nnot raise_flag_of_peace(octopus, squid) = True\n\nquestion = attack(green_fields_owned_by(grizzly_bear))\n"}, {"idx": 478, "response": "not knock_down(fortress_of(octopus), cat) = rule2()\nknock_down(fortress_of(octopus), cat) == False\nnot enemy(panther, cat) = rule3()\nenemy(panther, cat) == False\nnot knock_down(fortress_of(grizzly_bear), cat) = rule11(cat)\nknock_down(fortress_of(grizzly_bear), cat) == False\nquestion = False", "answer": -1, "code": "rule1() = belief(baboon_burns_warehouse_of(cat)) & not sing_song(sea_bass, victory_song_for(cat)) => add_conclusion(\"the cat offers a job to the phoenix\")\nrule2() = enemy(panther, cat) => not knock_down(fortress_of(octopus), cat)\nrule3() = first_letter_of(name(panther)) == first_letter_of(name(sun_bear)) => not enemy(panther, cat)\nrule4() = has(squirrel, sharp_object) => knock_down(fortress_of(cat), squirrel)\nrule5() = friends(jellyfish) > 7 => burn(warehouse_of(lion), jellyfish)\nrule6() = not show_all_cards(catfish, sea_bass) => sing_song(sea_bass, victory_song_for(cat))\nrule7() = first_letter_of(name(jellyfish)) == first_letter_of(name(cow)) => burn(warehouse_of(lion), jellyfish)\nrule8() = took_bike_from_store(squirrel) => knock_down(fortress_of(cat), squirrel)\nrule9() = friends(sea_bass) > 12 => not sing_song(sea_bass, victory_song_for(cat))\nrule10() = not attack(grasshopper, green_fields_of(baboon)) => burn(warehouse_of(cat), baboon)\nrule11(something) = not knock_down(fortress_of(octopus), something) & offer_job_position(something, phoenix) => not knock_down(fortress_of(grizzly_bear), something)\nrule12() = has(panther, card_with(primary_color)) => enemy(panther, cat)\nrule13() = has(sea_bass, connect_to_internet(device)) => not sing_song(sea_bass, victory_song_for(cat))\nrule14() = owns(panther, luxury_aircraft) => enemy(panther, cat)\norder(rule12) > order(rule3) = True\norder(rule14) > order(rule3) = True\norder(rule6) > order(rule13) = True\norder(rule6) > order(rule9) = True\n\nname(cow, Pashmak) = True\nfriends(jellyfish) = 1\nname(jellyfish, Peddi) = True\nhas(panther, card_with(violet_color)) = True\nowns(panther, luxury_aircraft) = True\nname(panther, Meadow) = True\nfriends(sea_bass, smart) = 5\nfriends(sea_bass, not_smart) = 2\nhas(sea_bass, cell_phone) = True\nknows(defensive_plans_of(tiger), squirrel) = True\nhas(squirrel, kale) = True\nstole_bike_from_store(squirrel) = True\nname(sun_bear, Max) = True\nnot attack(grasshopper, green_fields_of(baboon)) = True\n\nquestion = knock_down(fortress_of(grizzly_bear), cat)\n"}, {"idx": 479, "response": "has(caterpillar, knapsack) == True\nnot show_cards(caterpillar, salmon) = rule3()\nshow_cards(caterpillar, salmon) == False\nshow_cards(caterpillar, salmon) == False\nneeds_support(black_bear, phoenix) = rule9()\nneeds_support(black_bear, phoenix) == True\nquestion = True", "answer": 1, "code": "rule1() = not learn_basics_of_resource_management(canary, hippopotamus) & points(starfish) == points(hippopotamus) => not wink(hippopotamus, blobfish)\nrule2() = first_letter_of(name(caterpillar)) == first_letter_of(name(goldfish)) => show_cards(caterpillar, salmon)\nrule3() = remove(hummingbird, something) => not show_cards(caterpillar, salmon)\nrule4() = burn(warehouse_of(grizzly_bear), something) => points(lobster) == points(black_bear)\nrule5() = show_cards(something, salmon) => eat_food(hippopotamus, cricket)\nrule6() = has(hippopotamus, connect_to_internet(device)) => owes_money_to(hippopotamus, whale)\nrule7() = first_letter_of(name(turtle)) == first_letter_of(name(sea_bass)) => burn(warehouse_of(grizzly_bear), turtle)\nrule8() = has(caterpillar, something_to_sit_on) => show_cards(caterpillar, salmon)\nrule9() = eat_food(something, cricket) => needs_support(black_bear, phoenix)\norder(rule3) > order(rule2) = True\norder(rule3) > order(rule8) = True\n\nhas(caterpillar, knapsack) = True\nname(caterpillar, Mojo) = True\nname(goldfish, Lily) = True\nhas(hippopotamus, harmonica) = True\nhas(hippopotamus, tablet) = True\nname(sea_bass, Blossom) = True\npoints(starfish) == points(hippopotamus) = True\nname(turtle, Buddy) = True\nnot burn(warehouse_of(hippopotamus), canary) = True\n\nquestion = needs_support(black_bear, phoenix)\n"}, {"idx": 480, "response": "kill(baboon, mayor) == True\nremove(baboon, piece_of(squirrel)) = rule4()\nremove(baboon, piece_of(squirrel)) == True\nremove(baboon, piece_of(squirrel)) == True\nlearn_basics_of_resource_management(caterpillar, tiger) = rule2(caterpillar)\nlearn_basics_of_resource_management(caterpillar, tiger) == True\nlearn_basics_of_resource_management(caterpillar, tiger) == True\noffer_job(caterpillar, hummingbird) = rule3(caterpillar)\noffer_job(caterpillar, hummingbird) == True\noffer_job(caterpillar, hummingbird) == True\nquestion = True", "answer": 1, "code": "rule1(something) = proceed(something, spot_right_after(snail)) => not burn(warehouse_of(donkey))\nrule2(something) = remove(something, piece_of(squirrel)) & not burn(warehouse_of(donkey)) => learn_basics_of_resource_management(something, tiger)\nrule3(something) = learn_basics_of_resource_management(something, tiger) => offer_job(caterpillar, hummingbird)\nrule4() = kill(baboon, mayor) => remove(baboon, piece_of(squirrel))\n\nkill(baboon, mayor) = True\nproceed(baboon, spot_right_after(snail)) = True\nfriends(baboon) = 14\n\nquestion = offer_job(caterpillar, hummingbird)\n"}, {"idx": 481, "response": "respects(blobfish, goldfish) = True\noffer_job_position(panther, donkey) = rule2()\noffer_job_position(panther, donkey) == True\noffer_job_position(panther, donkey) == True\nburn(warehouse_of(cheetah), something) = rule1()\nburn(warehouse_of(cheetah), something) == True\nburn(warehouse_of(cheetah), something) == True\nnot respects(grizzly_bear, kiwi) = rule3()\nrespects(grizzly_bear, kiwi) == False\nrespects(grizzly_bear, kiwi) == False\nquestion = False", "answer": -1, "code": "rule1() = offer_job_position(something, donkey) => burn(warehouse_of(cheetah), something)\nrule2() = respects(something, goldfish) => offer_job_position(panther, donkey)\nrule3() = burn(warehouse_of(cheetah), something) => not respects(grizzly_bear, kiwi)\n\nrespects(blobfish, goldfish) = True\n\nquestion = respects(grizzly_bear, kiwi)\n"}, {"idx": 482, "response": "name(raven, Pablo) == True\nname(aardvark, Milo) == True\nfirst_letter_of(name(raven)) == first_letter_of(name(aardvark)) == True\nnot burn(warehouse_of(cow), raven) = rule3()\nburn(warehouse_of(cow), raven) == False\nquestion = False", "answer": -1, "code": "rule1() = roll_dice(cow, eel) => show_cards(eel, spider)\nrule2() = attacks(animal, green_fields_of(cockroach)) => proceed(animal, spot_right_after(spot_of(viperfish)))\nrule3() = first_letter_of(name(raven)) == first_letter_of(name(aardvark)) => not burn(warehouse_of(cow), raven)\nrule4() = friends(raven) < 12 => not burn(warehouse_of(cow), raven)\nrule5() = not knock_down(fortress_of(koala), raven) & knows(defensive_plans_of(raven), black_bear) => burn(warehouse_of(cow), raven)\nrule6() = proceed(animal, spot_right_after(spot_of(viperfish))) => roll_dice(cow, eel)\norder(rule3) > order(rule5) = True\norder(rule4) > order(rule5) = True\n\nname(aardvark, Milo) = True\nknows(defensive_plans_of(raven), black_bear) = True\nknock_down(fortress_of(cricket), cockroach) = True\nname(raven, Pablo) = True\nnot knock_down(fortress_of(koala), raven) = True\n\nquestion = show_cards(eel, spider)\n"}, {"idx": 483, "response": "prepare_armor(halibut, eagle) = rule3()\nprepare_armor(halibut, eagle) == True\nprepare_armor(eagle, dog) = rule3()\nprepare_armor(eagle, dog) == True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(starfish, halibut) & offer_job_position(snail, halibut) => give_magnifying_glass(halibut, grizzly_bear)\nrule2(something) = give_magnifier(something, grizzly_bear) & knock_down(something, fortress_of(kudu)) => prepare_armor(something, eagle)\nrule3() = prepare_armor(halibut, eagle) => prepare_armor(eagle, dog)\nrule4() = not learn(salmon, elementary_resource_management_from(eagle)) => not prepare_armor(eagle, dog)\nrule5() = has(halibut, card_with(primary_color)) => knock_down(halibut, fortress_of(kudu))\nrule6() = owns(halibut, luxury_aircraft) => knock_down(halibut, fortress_of(kudu))\nrule7(something) = not knows(defensive_plans_of(cow), something) => not knock_down(something, fortress_of(kudu))\norder(rule4) > order(rule3) = True\norder(rule7) > order(rule5) = True\norder(rule7) > order(rule6) = True\n\nhas(halibut, card_with(white_color)) = True\nowns(halibut, luxury_aircraft) = True\noffer_job_position(snail, halibut) = True\nprepare_armor(starfish, halibut) = True\n\nquestion = prepare_armor(eagle, dog)\n"}, {"idx": 484, "response": "not learn_basics_of_resource_management(moose, panda_bear) = True\nnot burn_warehouse(grizzly_bear, panda_bear) = True\nknock_down_fortress(panda_bear, hummingbird) = rule3()\nknock_down_fortress(panda_bear, hummingbird) == True\nknock_down_fortress(panda_bear, hummingbird) == True\nprepare_armor(panda_bear, carp) = rule2()\nprepare_armor(panda_bear, carp) == True\nprepare_armor(panda_bear, carp) == True\nnot attack_green_fields(panda_bear, whale) = rule1()\nattack_green_fields(panda_bear, whale) == False\nattack_green_fields(panda_bear, whale) == False\nquestion = False", "answer": -1, "code": "rule1() = prepare_armor(something, carp) => not attack_green_fields(something, whale)\nrule2() = knock_down_fortress(something, hummingbird) => prepare_armor(something, carp)\nrule3() = not learn_basics_of_resource_management(moose, panda_bear) & not burn_warehouse(grizzly_bear, panda_bear) => knock_down_fortress(panda_bear, hummingbird)\nrule4() = not respect(something, koala) => attack_green_fields(something, whale)\norder(rule4) > order(rule1) = True\n\nname(cow, Cinnamon) = True\nname(panda_bear, Chickpea) = True\nnot burn_warehouse(grizzly_bear, panda_bear) = True\nnot learn_basics_of_resource_management(moose, panda_bear) = True\n\nquestion = attack_green_fields(panda_bear, whale)\n"}, {"idx": 485, "response": "enemy(eagle, phoenix) == True\ngive_magnifying_glass(eagle, sun_bear) == True\nnot sing_song(eagle, victory_song_for(grasshopper)) = rule4(eagle)\nsing_song(eagle, victory_song_for(grasshopper)) == False\nsing_song(eagle, victory_song_for(grasshopper)) == False\nburn(warehouse_of(rabbit), grasshopper) = rule2()\nburn(warehouse_of(rabbit), grasshopper) == True\nburn(warehouse_of(rabbit), grasshopper) == True\nknock_down(fortress_of(elephant), rabbit) = rule3()\nknock_down(fortress_of(elephant), rabbit) == True\nknock_down(fortress_of(elephant), rabbit) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(eagle) < 12 => sing_song(eagle, victory_song_for(grasshopper))\nrule2() = sing_song(eagle, victory_song_for(grasshopper)) => burn(warehouse_of(rabbit), grasshopper)\nrule3() = burn(warehouse_of(rabbit), grasshopper) => knock_down(fortress_of(elephant), rabbit)\nrule4(something) = give_magnifying_glass(something, sun_bear) & enemy(something, phoenix) => not sing_song(something, victory_song_for(grasshopper))\norder(rule1) > order(rule4) = True\n\nenemy(eagle, phoenix) = True\ngive_magnifying_glass(eagle, sun_bear) = True\n\nquestion = knock_down(fortress_of(elephant), rabbit)\n"}, {"idx": 486, "response": "friends(caterpillar) = 7\nfriends(caterpillar) > 5 = True\nneeds_support(caterpillar, oscar) = rule1()\nneeds_support(caterpillar, oscar) == True\nlearn_basics_of_resource_management(elephant, octopus) = question\nlearn_basics_of_resource_management(elephant, octopus) = unknown", "answer": 0, "code": "rule1() = friends(caterpillar) > 5 => needs_support(caterpillar, oscar)\nrule2() = show_cards(black_bear, elephant) => learn_basics_of_resource_management(elephant, octopus)\nrule3() = eat_food(sheep, food_of(black_bear)) => show_cards(black_bear, elephant)\nrule4() = has_access_to_abundance_of_food(sheep) => eat_food(sheep, food_of(black_bear))\nrule5() = respects(carp, elephant) => not learn_basics_of_resource_management(elephant, octopus)\nrule6() = friends(sheep) < 12 => eat_food(sheep, food_of(black_bear))\nrule7() = first_letter_of(name(caterpillar)) == first_letter_of(name(halibut)) => needs_support(caterpillar, oscar)\nrule8() = needs_support(something, oscar) => not show_cards(black_bear, elephant)\nrule9() = has(sheep, sharp_object) => not eat_food(sheep, food_of(black_bear))\norder(rule3) > order(rule8) = True\norder(rule5) > order(rule2) = True\norder(rule9) > order(rule4) = True\norder(rule9) > order(rule6) = True\n\nfriends(caterpillar) = 7\nname(caterpillar, Charlie) = True\nname(halibut, Pashmak) = True\nfriends(sheep) = 3 smart_friends + 2 not_smart_friends\nstruggles_to_find_food(sheep) = True\n\nquestion = learn_basics_of_resource_management(elephant, octopus)\n"}, {"idx": 487, "response": "has(wolverine, knife) == True\nsharp_object(knife) == True\nprepare_armor(wolverine, koala) = rule2()\nprepare_armor(wolverine, koala) == True\nparked_bike(wolverine, store) = True\nprepare_armor(wolverine, koala) = rule3()\nprepare_armor(wolverine, koala) == True\nprepare_armor(wolverine, koala) == True\nnot burn_warehouse(phoenix, turtle) = rule6()\nburn_warehouse(phoenix, turtle) == False\nnot wink(goldfish, aardvark) = rule7()\nwink(aardvark, phoenix) = rule7()\nwink(aardvark, phoenix) == True\nwink(aardvark, phoenix) == True\nnot burn_warehouse(phoenix, turtle) == False\nquestion = False", "answer": -1, "code": "rule1() = offer_job(buffalo, aardvark) => not wink(aardvark, phoenix)\nrule2() = has(wolverine, sharp_object) => prepare_armor(wolverine, koala)\nrule3() = took_bike(wolverine, store) => prepare_armor(wolverine, koala)\nrule4(something) = not knock_down_fortress(something, aardvark) => give_magnifier(something, phoenix)\nrule5() = has(goldfish, card_with(primary_color)) => not wink(goldfish, aardvark)\nrule6() = give_magnifier(wolverine, phoenix) & wink(aardvark, phoenix) => not burn_warehouse(phoenix, turtle)\nrule7() = not wink(goldfish, aardvark) => wink(aardvark, phoenix)\nrule8(something) = knock_down_fortress(something, tilapia) & not steal_points(something, puffin, 5) => offer_job(something, phoenix)\nrule9() = first_letter_of(name(goldfish)) == first_letter_of(name(cricket)) => not wink(goldfish, aardvark)\nrule10() = offer_job(moose, phoenix) => not eat_food(phoenix, hummingbird)\nrule11() = has(moose, card_with(color_in_flag_of_Netherlands)) => not offer_job(moose, phoenix)\nrule12() = not learn(doctorfish, elementary_resource_management_from(wolverine)) => not knock_down_fortress(wolverine, aardvark)\norder(rule1) > order(rule7) = True\norder(rule11) > order(rule8) = True\n\nname(cricket, Milo) = True\nhas(goldfish, card_with(orange_color)) = True\nname(goldfish, Max) = True\nknock_down_fortress(moose, tilapia) = True\nhas(wolverine, knife) = True\nparked_bike(wolverine, store) = True\nnot learn(doctorfish, elementary_resource_management_from(wolverine)) = True\nnot steal_points(moose, puffin, 5) = True\n\nquestion = burn_warehouse(phoenix, turtle)\n"}, {"idx": 488, "response": "has(grasshopper, something_to_sit_on) == True\nknows_defense_plan(grasshopper, hummingbird) = rule1()\nknows_defense_plan(grasshopper, hummingbird) == True\nlearn_basics_of_resource_management(hummingbird, rabbit) = rule6(hummingbird)\nlearn_basics_of_resource_management(hummingbird, rabbit) == True\nlearn_basics_of_resource_management(hummingbird, rabbit) == True\nquestion = True", "answer": 1, "code": "rule1() = has(grasshopper, something_to_sit_on) => knows_defense_plan(grasshopper, hummingbird)\nrule2(something) = remove(something, piece_of(moose)) & not burn(warehouse_of(pig)) => knows_defensive_plans(something, sun_bear)\nrule3() = has(hummingbird, something_to_drink) => remove(hummingbird, piece_of(moose))\nrule4() = friends(hummingbird) < 9 => remove(hummingbird, piece_of(moose))\nrule5() = not show_cards(eel, parrot) => wink(parrot, hummingbird)\nrule6(something) = knows_defensive_plans(something, sun_bear) => learn_basics_of_resource_management(something, rabbit)\nrule7() = knock_down(puffin, fortress_of(hummingbird)) => not burn(warehouse_of(pig))\n\nhas(grasshopper, love_seat_sofa) = True\nlearn_basics_of_resource_management(grizzly_bear, hummingbird) = True\nfriends(hummingbird) = 12\nhas(hummingbird, couch) = True\nknock_down(puffin, fortress_of(hummingbird)) = True\nproceed(starfish, spot_right_after(hummingbird)) = True\nnot show_cards(eel, parrot) = True\n\nquestion = learn_basics_of_resource_management(hummingbird, rabbit)\n"}, {"idx": 489, "response": "steal_points(snail, 5, carp) = True\nnot roll_dice(doctorfish, turtle) = rule1()\nroll_dice(doctorfish, turtle) = False\nknows_defense_plan(meerkat, doctorfish) = True\nnot roll_dice(kudu, doctorfish) = rule2()\nroll_dice(kudu, doctorfish) = False\nadd_conclusion(\"the doctorfish does not roll the dice for the turtle\") = rule2()\nadd_conclusion(\"the doctorfish does not roll the dice for the turtle\") = True\nroll_dice(kudu, turtle) = rule5(kudu)\nroll_dice(kudu, turtle) = True\nwink(canary, bat) = rule3()\nwink(canary, bat) = True\nquestion = True", "answer": 1, "code": "rule1() = steal_points(something, 5, carp) => not roll_dice(kudu, doctorfish)\nrule2() = knows_defense_plan(meerkat, doctorfish) & not roll_dice(kudu, doctorfish) => add_conclusion(\"the doctorfish does not roll the dice for the turtle\")\nrule3() = roll_dice(something, turtle) => wink(canary, bat)\nrule4() = not steal_points(something, 5, rabbit) => not need_support(something, elephant)\nrule5(something) = not need_support(something, elephant) => roll_dice(something, turtle)\norder(rule2) > order(rule5) = True\n\nsteal_points(snail, 5, carp) = True\nnot steal_points(doctorfish, 5, rabbit) = True\n\nquestion = wink(canary, bat)\n"}, {"idx": 490, "response": "not knock_down_fortress(gecko, fortress_of(sheep)) = rule6()\nknock_down_fortress(gecko, fortress_of(sheep)) == False\nquestion = False", "answer": -1, "code": "rule1() = wink(squid, gecko) => sing_song(gecko, victory_song_for(hippopotamus))\nrule2() = not learn_basics_of_resource_management(goldfish, grasshopper) => needs_support(grasshopper, gecko)\nrule3(something) = not needs_support(something, starfish) => burn(warehouse_of(turtle), something)\nrule4() = prepare_armor(oscar, grasshopper) => not needs_support(grasshopper, gecko)\nrule5() = first_letter_of(name(salmon)) == first_letter_of(name(snail)) => not proceed(salmon, spot_right_after(spot_of(squirrel)))\nrule6() = owes_money_to(turtle, gecko) & respects(crocodile, gecko) => not knock_down_fortress(gecko, fortress_of(sheep))\nrule7() = struggles_to_find_food(salmon) => not proceed(salmon, spot_right_after(spot_of(squirrel)))\nrule8() = knows(defense_plan_of(doctorfish), something) => not enemy(gecko, meerkat)\nrule9() = show_all_cards(something, parrot) => knows(defensive_plans_of(doctorfish), cheetah)\nrule10() = steal_points_from(puffin, something) => proceed(salmon, spot_right_after(spot_of(squirrel)))\nrule11() = has(cockroach, drink) => not prepare_armor(cockroach, crocodile)\nrule12() = respects(something, tiger) => not burn(warehouse_of(turtle), pig)\nrule13() = friends(cockroach) < 14 => not prepare_armor(cockroach, crocodile)\nrule14() = burn(warehouse_of(turtle), pig) => owes_money_to(turtle, gecko)\nrule15() = attack(green_fields_of(swordfish), something) => wink(squid, gecko)\nrule16() = not prepare_armor(cockroach, crocodile) => respects(crocodile, gecko)\nrule17() = proceed(something, spot_right_after(spot_of(squirrel))) => not respects(crocodile, gecko)\norder(rule10) > order(rule5) = True\norder(rule10) > order(rule7) = True\norder(rule12) > order(rule3) = True\norder(rule16) > order(rule17) = True\norder(rule4) > order(rule2) = True\n\nproceed(cheetah, spot_right_after(spot_of(kudu))) = True\nhas(cockroach, tablet) = True\nfriends(cockroach) = 5\nknows(defensive_plans_of(hummingbird), cockroach) = True\nsteal_points_from(puffin, kiwi) = True\nattack(green_fields_of(swordfish), octopus) = True\nshow_all_cards(panther, parrot) = True\nname(salmon, Milo) = True\nstruggles_to_find_food(salmon) = True\nname(snail, Teddy) = True\nnot learn_basics_of_resource_management(goldfish, grasshopper) = True\nnot needs_support(pig, starfish) = True\n\nquestion = knock_down_fortress(gecko, fortress_of(sheep))\n"}, {"idx": 491, "response": "name(oscar, Casper) == True\nname(carp, Lucy) == True\nfirst_letter_of(name(oscar)) == first_letter_of(name(carp)) == True\nnot show_cards(oscar, koala) = rule3()\nshow_cards(oscar, koala) == False\nsing_song(koala, victory_song_for(eel)) = rule5()\nsing_song(koala, victory_song_for(eel)) == True\nknows_defense_plan(eel, viperfish) = rule2()\nknows_defense_plan(eel, viperfish) == True\nquestion = True", "answer": 1, "code": "rule1() = show_cards(some_animal, squirrel) => not knows_defense_plan(cat, eel)\nrule2() = not knows_defense_plan(cat, eel) & sing_song(koala, victory_song_for(eel)) => knows_defense_plan(eel, viperfish)\nrule3() = first_letter_of(name(oscar)) == first_letter_of(name(carp)) => not show_cards(oscar, koala)\nrule4() = prepare_armor(bat, eagle) => show_cards(eagle, squirrel)\nrule5() = not show_cards(oscar, koala) => sing_song(koala, victory_song_for(eel))\n\nprepare_armor(bat, eagle) = True\nname(carp, Lucy) = True\nname(oscar, Casper) = True\n\nquestion = knows_defense_plan(eel, viperfish)\n"}, {"idx": 492, "response": "remove(zander, piece_of(hippopotamus)) == True\nroll_dice(zander, cat) = rule7()\nroll_dice(zander, cat) == True\nroll_dice(zander, cat) == True\nnot respect(eel, zander) = rule7()\nrespect(eel, zander) == False\nrespect(eel, zander) == False\nnot roll_dice(zander, cat) == False\nknock_down(fortress_of(cheetah)) = rule5()\nknock_down(fortress_of(cheetah)) == True\nknock_down(fortress_of(cheetah)) == True\neat_food(kudu, food_of(starfish)) = rule5()\neat_food(kudu, food_of(starfish)) == True\neat_food(kudu, food_of(starfish)) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag(something, polar_bear) => knock_down(fortress_of(cat), fortress_of(cheetah))\nrule2() = has(oscar, card_with(color_starting_with(\"e\"))) => raise_flag(oscar, polar_bear)\nrule3(something) = remove(something, piece_of(hippopotamus)) => roll_dice(something, cat)\nrule4(something) = knows(defense_plan_of(sheep), something) => not knock_down(fortress_of(cat))\nrule5() = knock_down(fortress_of(cheetah)) => eat_food(kudu, food_of(starfish))\nrule6() = first_letter_of(name(oscar)) == first_letter_of(name(grasshopper)) => raise_flag(oscar, polar_bear)\nrule7() = not respect(eel, zander) => not roll_dice(zander, cat)\nrule8() = friends(oscar) > 7 => not raise_flag(oscar, polar_bear)\nrule9(device) = has(oscar, connect_to_internet(device)) => not raise_flag(oscar, polar_bear)\norder(rule7) > order(rule3) = True\norder(rule8) > order(rule2) = True\norder(rule8) > order(rule6) = True\norder(rule9) > order(rule2) = True\norder(rule9) > order(rule6) = True\n\nknows(defense_plan_of(sheep), caterpillar) = True\nname(grasshopper, Lily) = True\nhas(oscar, blade) = True\nname(oscar, Lucy) = True\nhas(oscar, card_with(red_color)) = True\nremove(zander, piece_of(hippopotamus)) = True\n\nquestion = eat_food(kudu, food_of(starfish))\n"}, {"idx": 493, "response": "not respects(raven, crocodile) = rule3()\nrespects(raven, crocodile) == False\nneeds_support(hummingbird, crocodile) = rule1()\nneeds_support(hummingbird, crocodile) == True\nnot proceed(crocodile, spot_right_after(amberjack)) = rule3()\nproceed(crocodile, spot_right_after(amberjack)) == False\nquestion = False", "answer": -1, "code": "rule1() = not needs_support(rabbit, hummingbird) => needs_support(hummingbird, crocodile)\nrule2(something) = becomes_enemy(something, starfish) => not respects(something, crocodile)\nrule3() = not respects(raven, crocodile) & needs_support(hummingbird, crocodile) => not proceed(crocodile, spot_right_after(amberjack))\nrule4(something) = not needs_support(something, doctorfish) & becomes_enemy(something, turtle) => becomes_enemy(something, starfish)\nrule5() = not wink(bat, rabbit) => not needs_support(rabbit, hummingbird)\n\nbecomes_enemy(raven, turtle) = True\nnot wink(bat, rabbit) = True\nnot needs_support(raven, doctorfish) = True\n\nquestion = proceed(crocodile, spot_right_after(amberjack))\n"}, {"idx": 494, "response": "killed(grasshopper, mayor) == True\nlearn_basics_of_resource_management(grasshopper, swordfish) = rule2()\nlearn_basics_of_resource_management(grasshopper, swordfish) == True\nlearn_basics_of_resource_management(grasshopper, swordfish) == True\nraise_flag_of_peace(grasshopper, polar_bear) = rule6()\nraise_flag_of_peace(grasshopper, polar_bear) == True\nraise_flag_of_peace(grasshopper, polar_bear) == True\nneeds_support(polar_bear, sea_bass) = rule4()\nneeds_support(polar_bear, sea_bass) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(grasshopper)) == first_letter_of(name(doctorfish)) => learn_basics_of_resource_management(grasshopper, swordfish)\nrule2() = killed(grasshopper, mayor) => learn_basics_of_resource_management(grasshopper, swordfish)\nrule3(something) = learns(something, elementary_resource_management_from(swordfish)) => not raise_flag_of_peace(something, polar_bear)\nrule4() = raise_flag_of_peace(grasshopper, polar_bear) => needs_support(polar_bear, sea_bass)\nrule5() = killed(moose, mayor) => rolls_dice(moose, grasshopper)\nrule6() = not respects(oscar, grasshopper) & rolls_dice(moose, grasshopper) => raise_flag_of_peace(grasshopper, polar_bear)\nrule7() = offers_job_position(something, viperfish) => not respects(oscar, grasshopper)\norder(rule6) > order(rule3) = True\n\nname(doctorfish, Pashmak) = True\nkilled(grasshopper, mayor) = True\nname(grasshopper, Tessa) = True\nkilled(moose, mayor) = True\nnot offers_job_position(cow, viperfish) = True\n\nquestion = needs_support(polar_bear, sea_bass)\n"}, {"idx": 495, "response": "struggles_to_find_food(meerkat) == True\nnot wink_at(meerkat, eagle) = rule6()\nwink_at(meerkat, eagle) == False\nnot wink_at(meerkat, eagle) = rule7()\nwink_at(meerkat, eagle) == False\nfriends(meerkat) > 10 = rule12()\nfriends(meerkat) == 11\nwink_at(meerkat, eagle) == True\nwink_at(meerkat, eagle) == True\nnot knock_down(fortress_of(amberjack), turtle) = rule1()\nknock_down(fortress_of(amberjack), turtle) == False\noffer_job(turtle, bat) = rule3()\noffer_job(turtle, bat) == True\noffer_job(turtle, bat) == True\nneeds_support(turtle, grasshopper) = rule17(turtle)\nneeds_support(turtle, grasshopper) == True\nquestion = True", "answer": 1, "code": "rule1() = burn(warehouse_of(donkey), something) => not knock_down(fortress_of(amberjack), turtle)\nrule2() = not eat_food(eel, food_of(squirrel)) => not eat_food(squirrel, food_of(turtle))\nrule3() = remove(something, piece_of(cheetah)) => offer_job(turtle, bat)\nrule4() = wink_at(something, eagle) => needs_support(lobster, turtle)\nrule5() = not attack_green_fields(something, owner_is(panda_bear)) => not needs_support(something, turtle)\nrule6() = has_access_to_abundance_of_food(meerkat) => not wink_at(meerkat, eagle)\nrule7() = has(meerkat, card) and color(card) in rainbow_colors => not wink_at(meerkat, eagle)\nrule8() = has(swordfish, carry_apples_and_oranges) => not knows(defense_plan_of(turtle), swordfish)\nrule9() = has(meerkat, carry_apples_and_oranges) => wink_at(meerkat, eagle)\nrule10(something) = prepare_armor(something, baboon) => burn(warehouse_of(donkey), something)\nrule11() = attack_green_fields(something, owner_is(spider)) => not offer_job(something, bat)\nrule12() = friends(meerkat) > 10 => wink_at(meerkat, eagle)\nrule13() = prepare_armor(something, octopus) => not burn(warehouse_of(donkey), sheep)\nrule14() = sing_song(rabbit, victory_song_for(eel)) => not eat_food(eel, food_of(squirrel))\nrule15() = has(swordfish, sit_on_something) => not knows(defensive_plans_of(turtle), swordfish)\nrule16() = has(salmon, card) and color(card) in colors_of(Japan_flag) => remove(salmon, piece_of(cheetah))\nrule17(something) = not knock_down(fortress_of(amberjack), something) & offer_job(something, bat) => needs_support(something, grasshopper)\nrule18() = remove(something, piece_of(viperfish)) => not attack_green_fields(lobster, owner_is(panda_bear))\norder(rule10) > order(rule13) = True\norder(rule11) > order(rule3) = True\norder(rule5) > order(rule4) = True\norder(rule6) > order(rule12) = True\norder(rule6) > order(rule9) = True\norder(rule7) > order(rule12) = True\norder(rule7) > order(rule9) = True\n\nremove(black_bear, piece_of(viperfish)) = True\nprepare_armor(crocodile, octopus) = True\nhas(lobster, club_chair) = True\nhas(meerkat, saxophone) = True\nfriends(meerkat) = 11\nstruggles_to_find_food(meerkat) = True\nsing_song(rabbit, victory_song_for(eel)) = True\nhas(salmon, card_with(red_color)) = True\nprepare_armor(sheep, baboon) = True\nhas(swordfish, bench) = True\nhas(swordfish, arugula) = True\n\nquestion = needs_support(turtle, grasshopper)\n"}, {"idx": 496, "response": "knows_defensive_plans(wolverine, octopus) = True\nknows_defensive_plans(wolverine, panther) = False\nquestion = False", "answer": -1, "code": "rule1() = remove(something, piece_of(blobfish)) => not knows_defensive_plans(something, panther)\nrule2() = knows_defense_plan(something, octopus) => not prepare_armor(wolverine, spider)\nrule3() = has(wolverine, drink) => not offer_job_position(wolverine, sun_bear)\nrule4(something) = not prepare_armor(something, spider) & not offer_job_position(something, sun_bear) => remove(something, piece_of(blobfish))\n\nknows_defensive_plans(goldfish, octopus) = True\nhas(wolverine, cappuccino) = True\nnot learn_basics_of_resource_management(wolverine, zander) = True\n\nquestion = knows_defensive_plans(wolverine, panther)\n"}, {"idx": 497, "response": "roll_dice(something, turtle) = rule1()\nroll_dice(sheep, turtle) == True\nnot eat_food(sheep, cricket) = rule1()\neat_food(sheep, cricket) == False\nenemy(something, squirrel) = rule2(something)\nenemy(sheep, squirrel) == False\nnot burn(warehouse_of(phoenix), something) = rule2(something)\nburn(warehouse_of(phoenix), sheep) == False\nsing_song(rabbit, victory_song_for(sheep)) = rule3()\nsing_song(rabbit, victory_song_for(sheep)) == True\nnot needs_support(jellyfish, sheep) = rule3()\nneeds_support(jellyfish, sheep) == False\nlearn(sheep, elementary_resource_management_from(squirrel)) = rule3()\nlearn(sheep, elementary_resource_management_from(squirrel)) == True\nknows(defensive_plans_of(swordfish), something) = rule4()\nknows(defensive_plans_of(swordfish), kudu) == True\ngive_magnifier(kangaroo, sheep) = rule4()\ngive_magnifier(kangaroo, sheep) == True\nnot burn(warehouse_of(phoenix), sheep) = rule5()\nburn(warehouse_of(phoenix), sheep) == False\nlearn(sheep, elementary_resource_management_from(squirrel)) = rule6(something)\nlearn(sheep, elementary_resource_management_from(squirrel)) == True\nenemy(sheep, squirrel) = rule6(something)\nenemy(sheep, squirrel) == True\nquestion = eat_food(sheep, cricket)\nquestion = False", "answer": -1, "code": "rule1() = roll_dice(something, turtle) => not eat_food(sheep, cricket)\nrule2(something) = enemy(something, squirrel) & not burn(warehouse_of(phoenix), something) => eat_food(something, cricket)\nrule3() = sing_song(rabbit, victory_song_for(sheep)) & not needs_support(jellyfish, sheep) => learn(sheep, elementary_resource_management_from(squirrel))\nrule4() = knows(defensive_plans_of(swordfish), something) => give_magnifier(kangaroo, sheep)\nrule5() = give_magnifier(kangaroo, sheep) => not burn(warehouse_of(phoenix), sheep)\nrule6(something) = learn(something, elementary_resource_management_from(squirrel)) => enemy(something, squirrel)\norder(rule1) > order(rule2) = True\n\nknows(defensive_plans_of(swordfish), kudu) = True\noffer_job(rabbit, sheep) = True\nneeds_support(jellyfish, sheep) = False\n\nquestion = eat_food(sheep, cricket)\n"}, {"idx": 498, "response": "prepare_armor(moose, wolverine) = rule1()\nnot burn(warehouse_of(crocodile), something) = True\nprepare_armor(moose, wolverine) = True\nprepare_armor(moose, wolverine) = True\nquestion = True", "answer": 1, "code": "rule1() = not burn(warehouse_of(crocodile), something) & prepare_armor(something, swordfish) => prepare_armor(something, wolverine)\nrule2() = proceed(something, spot_right_after(spot_of(tiger))) => not needs_support(oscar, moose)\nrule3() = knock_down(fortress_of(starfish), something) => not burn(warehouse_of(crocodile), moose)\nrule4() = owes_money_to(something, penguin) => prepare_armor(moose, swordfish)\nrule5() = friends(carp) > 7 => give(carp, magnifying_glass, panther)\nrule6() = give(something, magnifying_glass, panther) => raise_flag_of_peace(buffalo, moose)\nrule7() = first_letter_of(name(leopard)) == first_letter_of(name(zander)) => not steal_points(leopard, 5, oscar)\nrule8() = sing_song(something, victory_song_for(blobfish)) => steal_points(leopard, 5, oscar)\nrule9() = prepare_armor(cricket, sun_bear) => proceed(sun_bear, spot_right_after(spot_of(tiger)))\nrule10() = has(carp, something_to_sit_on) => give(carp, magnifying_glass, panther)\nrule11() = remove(something, piece_of(koala)) => owes_money_to(hummingbird, penguin)\nrule12() = not knock_down(fortress_of(elephant), phoenix) => knock_down(fortress_of(starfish), elephant)\norder(rule8) > order(rule7) = True\n\nfriends(carp) = 17\nhas(carp, basket) = True\nremove(cheetah, piece_of(koala)) = True\nprepare_armor(cricket, sun_bear) = True\ninvented_time_machine(leopard) = True\nname(leopard, Pashmak) = True\nsing_song(sea_bass, victory_song_for(blobfish)) = True\nname(zander, Lucy) = True\nnot knock_down(fortress_of(elephant), phoenix) = True\n\nquestion = prepare_armor(moose, wolverine)\n"}, {"idx": 499, "response": "enemy(kangaroo, turtle) = rule1()\nenemy(kangaroo, turtle) == True\nnot owes_money_to(turtle, eagle) = rule1()\nowes_money_to(turtle, eagle) == False\nquestion = False", "answer": -1, "code": "rule1() = enemy(kangaroo, turtle) => not owes_money_to(turtle, eagle)\nrule2() = first_letter_of(name(kiwi)) == first_letter_of(name(tiger)) => knows_defense_plan(kiwi, kangaroo)\nrule3(something) = attack_green_fields(something, dog) & not enemy(something, hare) => enemy(something, turtle)\nrule4() = burn(warehouse_of(baboon), something) => attack_green_fields(kangaroo, dog)\nrule5() = steal_points(something, 5, whale) => not knows_defense_plan(something, kangaroo)\nrule6() = remove(something, piece_of(black_bear)) => enemy(something, hare)\nrule7() = friends(kangaroo) < 9 => not enemy(kangaroo, hare)\norder(rule2) > order(rule5) = True\norder(rule6) > order(rule7) = True\n\nfriends(kangaroo) = 3\nname(kiwi, Lucy) = True\nsteal_points(kiwi, 5, whale) = True\nname(tiger, Lola) = True\nburn(warehouse_of(baboon), tilapia) = True\n\nquestion = owes_money_to(turtle, eagle)\n"}]