[{"idx": 0, "response": "has(amberjack, card) == True\ncolor(card, orange) == True\nstarts_with(color(card), \"o\") == True\nremove_from_board(amberjack, piece, raven) = rule1()\nremove_from_board(amberjack, piece, raven) == True\nnot give(amberjack, magnifying_glass, wolverine) = rule2()\ngive(amberjack, magnifying_glass, wolverine) == False\nnot give(amberjack, magnifying_glass, wolverine) == True\nremove_from_board(amberjack, piece, raven) == True\nnot give(amberjack, magnifying_glass, wolverine) == True\nremove_from_board(amberjack, piece, carp) = rule3()\nremove_from_board(amberjack, piece, carp) == True\nquestion = True", "answer": 1, "code": "rule1() = has(amberjack, card) and starts_with(color(card), \"o\") => remove_from_board(amberjack, piece, raven)\nrule2() = friends(amberjack) > 10 => not give(amberjack, magnifying_glass, wolverine)\nrule3() = remove_from_board(something, piece, raven) and not give(something, magnifying_glass, wolverine) => remove_from_board(something, piece, carp)\n\nhas(amberjack, card) = True\ncolor(card, orange) = True\nfriends(amberjack) = 15\nhas(amberjack, computer) = True\nhas(amberjack, kale) = True\n\nquestion = remove_from_board(amberjack, piece, carp)\n"}, {"idx": 1, "response": "has(donkey, device_to_connect_to_internet) = False\nhas(donkey, cell_phone) = True\nwink(donkey, carp) = rule1()\nwink(donkey, carp) == True\nfriends(donkey, bald) + friends(donkey, not_bald) < 2 = False\nproceeds_to(donkey, spot_after(pig)) = rule4()\nproceeds_to(donkey, spot_after(pig)) == True\nnot raise_flag_of_peace(donkey, caterpillar) = rule2(donkey)\nnot raise_flag_of_peace(donkey, caterpillar) == True\nquestion = True", "answer": 1, "code": "rule1() = has(donkey, device_to_connect_to_internet) => wink(donkey, carp)\nrule2(something) = proceeds_to(something, spot_after(pig)) => not raise_flag_of_peace(something, caterpillar)\nrule3() = friends(donkey, bald) + friends(donkey, not_bald) < 2 => wink(donkey, carp)\nrule4() = show_cards(animal, all_cards) to spider => proceeds_to(donkey, spot_after(pig))\n\nfriends(donkey, bald) = 2\nfriends(donkey, not_bald) = 6\nhas(donkey, cell_phone) = True\nhas(donkey, harmonica) = True\nshow_cards(kudu, all_cards) to spider = True\n\nquestion = raise_flag_of_peace(donkey, caterpillar)\n"}, {"idx": 2, "response": "difficulty_to_find_food(tiger) == True\ngive(tiger, magnifier, turtle) = rule2()\ngive(tiger, magnifier, turtle) == True\nknock_down(turtle, fortress, black_bear) = rule1()\nknock_down(turtle, fortress, black_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = learn(something, elementary_resource_management_from(oscar)) => knock_down(turtle, fortress, black_bear)\nrule2() = difficulty_to_find_food(tiger) => give(tiger, magnifier, turtle)\nrule3() = has(cheetah, card) and color(card) in rainbow_colors => attack(cheetah, green_fields, oscar)\nrule4() = has(tiger, device_to_connect_to_internet) => give(tiger, magnifier, turtle)\nrule5() = friends(cheetah) < 7 => attack(cheetah, green_fields, oscar)\n\nfriends(cheetah) = 5\nhas(cheetah, card) = True\ncolor(card, white) = True\nwink(grasshopper, koala) = True\nhas(tiger, backpack) = True\ndifficulty_to_find_food(tiger) = True\n\nquestion = knock_down(turtle, fortress, black_bear)\n"}, {"idx": 3, "response": "knows(buffalo, defensive_plans, cat) == False\nnot knows(buffalo, defensive_plans, cat) == True\nnot attack(buffalo, green_fields, leopard) = rule4()\nnot attack(buffalo, green_fields, leopard) == True\nroll_dice(whale, leopard) = rule4()\nroll_dice(whale, leopard) == True\nraise_flag_of_peace(leopard, zander) = rule4()\nraise_flag_of_peace(leopard, zander) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not knows(something, defensive_plans, cat) => not attack(something, green_fields, leopard)\nrule2(something) = eat_food(something, food_of(koala)) => roll_dice(something, leopard)\nrule3(something) = not respect(something, kudu) => not raise_flag_of_peace(something, zander)\nrule4() = not attack(buffalo, green_fields, leopard) & roll_dice(whale, leopard) => raise_flag_of_peace(leopard, zander)\norder(rule3) > order(rule4) = True\n\neat_food(whale, food_of(koala)) = True\nknows(buffalo, defensive_plans, cat) = False\n\nquestion = raise_flag_of_peace(leopard, zander)\n"}, {"idx": 4, "response": "has(canary, cappuccino) == True\nhas(canary, card) and color(card) == red == True\nfriends(canary) = 9\nowes(canary, money, grasshopper) == True\nhas_low_income_job(canary) == True\nshows(parrot, all_cards, canary) == True\nneeds(canary, support, hare) = rule4()\nneeds(canary, support, hare) == True\nproceed(canary, spot_right_after, whale) = not proceed(canary, spot_right_after, whale)\nproceed(canary, spot_right_after, whale) == False\nquestion = False", "answer": -1, "code": "rule1(something) = owes(something, money, grasshopper) => knocks_down(something, fortress, grizzly_bear)\nrule2() = shows(parrot, all_cards, canary) => winks(canary, cheetah)\nrule3(something) = needs(something, support, hare) => not proceed(something, spot_right_after, whale)\nrule4() = friends(canary) < 10 => needs(canary, support, hare)\nrule5() = has_high_salary(canary) => needs(canary, support, hare)\n\nhas(canary, cappuccino) = True\nhas(canary, card) and color(card) == red = True\nfriends(canary) = 9\nowes(canary, money, grasshopper) = True\nhas_low_income_job(canary) = True\nshows(parrot, all_cards, canary) = True\n\nquestion = proceed(canary, spot_right_after, whale)\n"}, {"idx": 5, "response": "knock_down(meerkat, fortress, squid) = False\noffer_job_position(meerkat, spider) = rule2()\noffer_job_position(meerkat, spider) == True\ngive(spider, magnifying_glass, tilapia) = True\nquestion = True", "answer": 1, "code": "rule1(something) = not raise_flag_of_peace(something, squid) => offer_job_position(something, spider)\nrule2() = offer_job_position(meerkat, spider) => give(spider, magnifying_glass, tilapia)\n\nknock_down(meerkat, fortress, squid) = False\n\nquestion = give(spider, magnifying_glass, tilapia)\n"}, {"idx": 6, "response": "has(aardvark, device_to_connect_to_internet) == True\nknows(aardvark, defense_plan, tiger) = rule2()\nknows(aardvark, defense_plan, tiger) == True\nnot remove_piece(crocodile, tiger) = rule3()\nremove_piece(crocodile, tiger) == False\nnot remove_piece(crocodile, tiger) == False\nknows(aardvark, defense_plan, tiger) == True\nremove_piece(crocodile, tiger) == False\nbecome_enemy(tiger, cheetah) = rule5()\nbecome_enemy(tiger, cheetah) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(crocodile) < 9 => remove_piece(crocodile, tiger)\nrule2() = has(aardvark, device_to_connect_to_internet) => knows(aardvark, defense_plan, tiger)\nrule3() = has(crocodile, sharp_object) => not remove_piece(crocodile, tiger)\nrule4() = first_letter_of(name(crocodile)) == first_letter_of(name(koala)) => remove_piece(crocodile, tiger)\nrule5() = knows(aardvark, defense_plan, tiger) & not remove_piece(crocodile, tiger) => become_enemy(tiger, cheetah)\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule3) = True\n\nhas(aardvark, computer) = True\nhas(crocodile, knife) = True\nname(crocodile, Tessa) = True\nname(koala, Casper) = True\n\nquestion = become_enemy(tiger, cheetah)\n"}, {"idx": 7, "response": "raise_flag_of_peace(donkey, lobster) == True\nrolls_dice(hare, cricket) == True\nprepare_armor(lobster, goldfish) = rule1()\nprepare_armor(lobster, goldfish) == True\nraise_flag_of_peace(octopus, goldfish) = rule2()\nraise_flag_of_peace(octopus, goldfish) == True\nprepare_armor(lobster, goldfish) == True\nnot owe(goldfish, money, kudu) = rule3()\nowe(goldfish, money, kudu) == False\nowe(goldfish, money, kudu) == False\nquestion = False", "answer": -1, "code": "rule1() = rolls_dice(something, cricket) => prepare_armor(lobster, goldfish)\nrule2() = has_card_with_color_starting_with(octopus, \"w\") => raise_flag_of_peace(octopus, goldfish)\nrule3() = raise_flag_of_peace(octopus, goldfish) & prepare_armor(lobster, goldfish) => not owe(goldfish, money, kudu)\nrule4() = not has_keys(octopus) => raise_flag_of_peace(octopus, goldfish)\n\nraise_flag_of_peace(donkey, lobster) = True\nrolls_dice(hare, cricket) = True\nhas_card_with_color(octopus, white) = True\nhas_keys(octopus) = True\n\nquestion = owe(goldfish, money, kudu)\n"}, {"idx": 8, "response": "works_more_hours(amberjack) = unknown\nfirst_letter_of(name(amberjack)) == first_letter_of(name(sun_bear)) = True\neat_food(amberjack, food_of(elephant)) = rule2()\neat_food(amberjack, food_of(elephant)) == True\nnot eat_food(amberjack, food_of(elephant)) = False\nsing_victory_song(amberjack, penguin) = rule3()\nsing_victory_song(amberjack, penguin) == False\nnot sing_victory_song(amberjack, penguin) == True\nquestion = True", "answer": 1, "code": "rule1() = works_more_hours(amberjack) => eat_food(amberjack, food_of(elephant))\nrule2() = first_letter_of(name(amberjack)) == first_letter_of(name(sun_bear)) => eat_food(amberjack, food_of(elephant))\nrule3(something) = not eat_food(something, food_of(elephant)) => sing_victory_song(something, penguin)\nrule4() = steal_points(something, 5, cat) => not sing_victory_song(amberjack, penguin)\norder(rule4) > order(rule3) = True\n\nname(amberjack, Buddy) = True\nowns(amberjack, luxury_aircraft) = True\nname(sun_bear, Beauty) = True\n\nquestion = sing_victory_song(amberjack, penguin)\n"}, {"idx": 9, "response": "has(dog, card) == True\ncolor(card, red) == True\ncolor(card) in primary_colors == True\nnot become_enemy(dog, black_bear) = rule1()\nnot become_enemy(dog, black_bear) == True\nplayful_friends(dog) = 5\nnon_playful_friends(dog) = 2\nfriends(dog) > 17 = rule4()\nfriends(dog) > 17 == False\nnot become_enemy(dog, black_bear) == True\nnot prepare_armor(dog, eel) = rule5()\nnot prepare_armor(dog, eel) == True\nnot prepare_armor(dog, eel) == True\nquestion = True", "answer": 1, "code": "rule1() = has(dog, card) and color(card) in primary_colors => not become_enemy(dog, black_bear)\nrule2(something) = knows(something, defense_plan, canary) & rolls_dice(something, polar_bear) => attack(something, green_fields, puffin)\nrule3(something) = attack(something, green_fields, puffin) => prepare_armor(something, eel)\nrule4() = friends(dog) > 17 => not become_enemy(dog, black_bear)\nrule5(something) = not become_enemy(something, black_bear) => not prepare_armor(something, eel)\norder(rule3) > order(rule5) = True\n\nhas(dog, card) = True\ncolor(card, red) = True\nplayful_friends(dog) = 5\nnon_playful_friends(dog) = 2\nknows(dog, defense_plan, canary) = True\nrolls_dice(dog, polar_bear) = True\n\nquestion = prepare_armor(dog, eel)\n"}, {"idx": 10, "response": "has(kiwi, card) == True\ncolor(card, blue) == True\npoints(kiwi) == points(spider) = rule1()\npoints(kiwi) == points(spider) == True\nnot owe(spider, money, sea_bass) = rule2()\nowe(spider, money, sea_bass) == False\nquestion = False", "answer": -1, "code": "rule1() = has(kiwi, card) and color(card) in primary_colors => points(kiwi) == points(spider)\nrule2() = points(kiwi) == points(spider) => not owe(spider, money, sea_bass)\n\nhas(kiwi, card) = True\ncolor(card, blue) = True\n\nquestion = owe(spider, money, sea_bass)\n"}, {"idx": 11, "response": "give(sheep, magnifier, parrot) == True\ngive(something, magnifier, parrot) = rule2()\ngive(turtle, magnifier, parrot) == False\nnot offer_job_position(sheep, turtle) = rule3()\noffer_job_position(sheep, turtle) == False\nnot attack(kiwi, green_fields, turtle) = rule3()\nattack(kiwi, green_fields, turtle) == False\ngive(turtle, magnifier, grasshopper) = rule3()\ngive(turtle, magnifier, grasshopper) == True\nquestion = True", "answer": 1, "code": "rule1() = become_enemy(something, cockroach) => not wink(kiwi, turtle)\nrule2(something) = give(something, magnifier, parrot) => not offer_job_position(something, turtle)\nrule3() = not offer_job_position(sheep, turtle) & not attack(kiwi, green_fields, turtle) => give(turtle, magnifier, grasshopper)\n\ngive(sheep, magnifier, parrot) = True\nbecome_enemy(sun_bear, cockroach) = True\n\nquestion = give(turtle, magnifier, grasshopper)\n"}, {"idx": 12, "response": "took(viperfish, bike, store) == True\nlearns(viperfish, basics_of_resource_management, eel) = rule2()\nlearns(viperfish, basics_of_resource_management, eel) == True\nwink(viperfish, halibut) = rule1()\nwink(viperfish, halibut) == True\nquestion = True", "answer": 1, "code": "rule1(something) = learns(something, elementary_resource_management, eel) => wink(something, halibut)\nrule2() = took(viperfish, bike, store) => learns(viperfish, basics_of_resource_management, eel)\n\ntook(viperfish, bike, store) = True\n\nquestion = wink(viperfish, halibut)\n"}, {"idx": 13, "response": "name(sea_bass, Paco) == True\nname(dog, Pablo) == True\nfirst_letter_of(name(sea_bass)) == first_letter_of(name(dog)) == True\nburn(warehouse, meerkat, sea_bass) = rule2()\nburn(warehouse, meerkat, sea_bass) == True\ngive(meerkat, magnifier, donkey) = rule4()\ngive(meerkat, magnifier, donkey) == True\nquestion = True", "answer": 1, "code": "rule1() = burn(warehouse, meerkat, sea_bass) & not proceed(gecko, spot_right_after(meerkat)) => never_give(meerkat, magnifier, donkey)\nrule2() = first_letter_of(name(sea_bass)) == first_letter_of(name(dog)) => burn(warehouse, meerkat, sea_bass)\nrule3() = owe(hummingbird, money, gecko) => not proceed(gecko, spot_right_after(meerkat))\nrule4() = raise_flag_of_peace(something, leopard) => give(meerkat, magnifier, donkey)\norder(rule4) > order(rule1) = True\n\nwink(bat, gecko) = True\nname(dog, Pablo) = True\nowe(hummingbird, money, gecko) = True\nhas(sea_bass, card) = True\ncolor(card, orange) = True\nname(sea_bass, Paco) = True\ninvented(sea_bass, time_machine) = True\n\nquestion = give(meerkat, magnifier, donkey)\n"}, {"idx": 14, "response": "has(grizzly_bear, musical_instrument) == True\nhas(grizzly_bear, saxophone) == True\nsteal_points(grizzly_bear, 5, oscar) = rule1()\nsteal_points(grizzly_bear, 5, oscar) == True\nknows(turtle, defensive_plans, cockroach) == True\neat_food(meerkat, food_of(cockroach)) == True\nnot eat_food(meerkat, food_of(cockroach)) == False\nwink(cockroach, bat) = rule2()\nwink(cockroach, bat) == True\nowes_money(something, oscar) == False\nrespect(bat, panther) = rule3()\nrespect(bat, panther) == False\nquestion = False", "answer": -1, "code": "rule1() = has(grizzly_bear, musical_instrument) => steal_points(grizzly_bear, 5, oscar)\nrule2() = knows(turtle, defensive_plans, cockroach) & not eat_food(meerkat, food_of(cockroach)) => wink(cockroach, bat)\nrule3() = owes_money(something, oscar) => respect(bat, panther)\n\nhas(cockroach, banana_strawberry_smoothie) = True\nhas(grizzly_bear, saxophone) = True\neat_food(meerkat, food_of(cockroach)) = True\nknows(turtle, defensive_plans, cockroach) = True\n\nquestion = respect(bat, panther)\n"}, {"idx": 15, "response": "proceeds_to_spot_right_after(cricket, cheetah) == True\npoints(cricket) == points(phoenix) = rule2(cricket)\npoints(cricket) == points(phoenix) == False\nknock_down_fortress(sheep, hummingbird) == False\nbecome_enemy(catfish, cricket) == False\nsing_victory_song(kangaroo, cricket) == False\nquestion = False", "answer": -1, "code": "rule1(something) = become_enemy(something, parrot) & points(something) == points(phoenix) => sing_victory_song(something, goldfish)\nrule2(something) = proceeds_to_spot_right_after(something, cheetah) => points(something) == points(phoenix)\nrule3() = knock_down_fortress(something, hummingbird) => become_enemy(cricket, parrot)\n\nproceeds_to_spot_right_after(cricket, cheetah) = True\nknock_down_fortress(sheep, hummingbird) = True\nbecome_enemy(catfish, cricket) = False\nsing_victory_song(kangaroo, cricket) = False\n\nquestion = sing_victory_song(cricket, goldfish)\n"}, {"idx": 16, "response": "wink(donkey, hummingbird) == True\nburn_warehouse(polar_bear, hummingbird) == True\nsteal_points(hummingbird, 5, cheetah) = rule2()\nsteal_points(hummingbird, 5, cheetah) == True\nnot steal_points(cheetah, 5, cat) = rule1()\nsteal_points(cheetah, 5, cat) == False\nquestion = False", "answer": -1, "code": "rule1() = steal_points(hummingbird, 5, cheetah) => not steal_points(cheetah, 5, cat)\nrule2() = wink(donkey, hummingbird) & burn_warehouse(polar_bear, hummingbird) => steal_points(hummingbird, 5, cheetah)\nrule3() = has(hummingbird, high_quality_paper) => not steal_points(hummingbird, 5, cheetah)\norder(rule3) > order(rule2) = True\n\nwink(donkey, hummingbird) = True\nburn_warehouse(polar_bear, hummingbird) = True\n\nquestion = steal_points(cheetah, 5, cat)\n"}, {"idx": 17, "response": "killed(blobfish, mayor) == True\nknocks_down(blobfish, fortress, panda_bear) = rule1()\nknocks_down(blobfish, fortress, panda_bear) == True\nhas(grizzly_bear, card) == True\ncolor(card, indigo) == True\ncolor(card) in rainbow_colors == True\nsings_song_of_victory(grizzly_bear, panda_bear) = rule2()\nsings_song_of_victory(grizzly_bear, panda_bear) == True\nbelief(give(blobfish, magnifying_glass, panda_bear)) == True\nbelief(sings_song_of_victory(grizzly_bear, panda_bear)) == True\nadd_conclusion(\"the panda bear owes $$$ to the elephant\") = rule5()\nadd_conclusion(\"the panda bear owes $$$ to the elephant\") == True\nowe(panda_bear, money, elephant) = unknown\nquestion = unknown", "answer": 0, "code": "rule1() = killed(blobfish, mayor) => knocks_down(blobfish, fortress, panda_bear)\nrule2() = has(grizzly_bear, card) and color(card) in rainbow_colors => sings_song_of_victory(grizzly_bear, panda_bear)\nrule3(something) = respects(something, black_bear) => become_enemy(panda_bear, kudu)\nrule4() = eats(something, food_of(sea_bass)) => not sings_song_of_victory(something, panda_bear)\nrule5() = belief(give(blobfish, magnifying_glass, panda_bear)) & belief(sings_song_of_victory(grizzly_bear, panda_bear)) => add_conclusion(\"the panda bear owes $$$ to the elephant\")\nrule6(something) = steals_points(something, 5, viperfish) & not become_enemy(something, kudu) => conclude(not owe(something, money, elephant))\norder(rule4) > order(rule2) = True\norder(rule5) > order(rule6) = True\n\nkilled(blobfish, mayor) = True\nhas(grizzly_bear, card) = True\ncolor(card, indigo) = True\nburns(oscar, warehouse, black_bear) = True\n\nquestion = owe(panda_bear, money, elephant)\n"}, {"idx": 18, "response": "has(koala, high_quality_paper) == True\nbecome_enemy(koala, cockroach) = rule1()\nbecome_enemy(koala, cockroach) == True\nhas(koala, card) == True\ncolor(card) in colors_of_Belgium_flag == True\nbecome_enemy(koala, cockroach) == True\nbelieve(become_enemy(bat, canary)) == True\nroll_dice(sea_bass, canary) == True\neat_food(canary, food_of(amberjack)) = rule5()\neat_food(canary, food_of(amberjack)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(koala, high_quality_paper) => become_enemy(koala, cockroach)\nrule2() = steal_points(something, 5, cat) => become_enemy(bat, canary)\nrule3(something) = owe(something, $$$, goldfish) => roll_dice(something, canary)\nrule4() = has(koala, card) and color(card) in colors_of_Belgium_flag => become_enemy(koala, cockroach)\nrule5() = believe(become_enemy(bat, canary)) & roll_dice(sea_bass, canary) => eat_food(canary, food_of(amberjack))\n\nsteal_points(ferret, 5, cat) = True\nhas(koala, card) = True\ncolor(card, green) = True\nnot know(koala, defensive_plans, hippopotamus) = True\npublished(koala, high_quality_paper) = True\nowe(sea_bass, $$$, goldfish) = True\n\nquestion = eat_food(canary, food_of(amberjack))\n"}, {"idx": 19, "response": "sings(snail, victory_song, starfish) == True\nknocks_down(starfish, fortress, gecko) = rule1()\nknocks_down(starfish, fortress, gecko) == True\nnot need_support(starfish, black_bear) = rule2(starfish)\nnot need_support(starfish, black_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = sings(snail, victory_song, starfish) => knocks_down(starfish, fortress, gecko)\nrule2(something) = knocks_down(something, fortress, gecko) => not need_support(something, black_bear)\n\nsings(snail, victory_song, starfish) = True\n\nquestion = need_support(starfish, black_bear)\n"}, {"idx": 20, "response": "has(cheetah, card) == True\ncolor(card, black) == True\nstarts_with(color(card), \"b\") == True\nwink(cheetah, zander) = rule1()\nwink(cheetah, zander) == True\nfriends(cheetah) = 3\nnot wink(cheetah, zander) = rule2()\nnot wink(cheetah, zander) == False\nnot wink(cheetah, zander) == False\nfirst_letter_of(name(jellyfish)) == first_letter_of(name(baboon)) = True\nproceed(jellyfish, spot_after(zander)) = rule3()\nproceed(jellyfish, spot_after(zander)) == True\nshow_cards(cheetah, zander) = True\nproceed(jellyfish, spot_after(zander)) == True\neat_food(zander, food_of(swordfish)) = rule5()\neat_food(zander, food_of(swordfish)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(cheetah, card) and starts_with(color(card), \"b\") => wink(cheetah, zander)\nrule2() = friends(cheetah) > 2 => not wink(cheetah, zander)\nrule3() = first_letter_of(name(jellyfish)) == first_letter_of(name(baboon)) => proceed(jellyfish, spot_after(zander))\nrule4() = first_letter_of(name(cheetah)) == first_letter_of(name(hummingbird)) => wink(cheetah, zander)\nrule5() = show_cards(cheetah, zander) & proceed(jellyfish, spot_after(zander)) => eat_food(zander, food_of(swordfish))\norder(rule1) > order(rule2) = True\norder(rule4) > order(rule2) = True\n\nname(baboon, Milo) = True\nhas(cheetah, card) = True\ncolor(card, black) = True\nname(cheetah, Peddi) = True\nname(hummingbird, Lily) = True\nname(jellyfish, Max) = True\n\nquestion = eat_food(zander, food_of(swordfish))\n"}, {"idx": 21, "response": "burns_warehouse(amberjack, buffalo) == True\nattack_green_fields(wolverine, eel) = rule3()\nattack_green_fields(wolverine, eel) == True\nproceed_to_spot(baboon, right_after_spot(eel)) = rule5()\nproceed_to_spot(baboon, right_after_spot(eel)) == True\nattack_green_fields(wolverine, eel) == True\nnot steal_points(eel, 5, grasshopper) = rule4()\nsteal_points(eel, 5, grasshopper) == False\nnot steal_points(eel, 5, grasshopper) == False\nquestion = False", "answer": -1, "code": "rule1() = needs_support(carp, baboon) => not proceed_to_spot(baboon, right_after_spot(eel))\nrule2() = fan_of(wolverine, Chris_Ronaldo) => not attack_green_fields(wolverine, eel)\nrule3() = burns_warehouse(something, buffalo) => attack_green_fields(wolverine, eel)\nrule4() = proceed_to_spot(baboon, right_after_spot(eel)) & attack_green_fields(wolverine, eel) => not steal_points(eel, 5, grasshopper)\nrule5() = first_letter_of(name(baboon)) == first_letter_of(name(turtle)) => proceed_to_spot(baboon, right_after_spot(eel))\nrule6() = friends(baboon) < 5 => proceed_to_spot(baboon, right_after_spot(eel))\nrule7(something) = respects(something, ferret) => not needs_support(something, gecko)\nrule8(something) = not needs_support(something, gecko) => steal_points(something, 5, grasshopper)\norder(rule1) > order(rule5) = True\norder(rule1) > order(rule6) = True\norder(rule3) > order(rule2) = True\norder(rule8) > order(rule4) = True\n\nburns_warehouse(amberjack, buffalo) = True\nfriends(baboon) = 15\nname(baboon, Peddi) = True\nrespects(eel, ferret) = True\nname(turtle, Pashmak) = True\nhas(wolverine, card) = True\ncolor(card, white) = True\nhates(wolverine, Chris_Ronaldo) = True\n\nquestion = steal_points(eel, 5, grasshopper)\n"}, {"idx": 22, "response": "give(squirrel, magnifying_glass, moose) == True\nburn(cheetah, warehouse, swordfish) = rule2()\nburn(cheetah, warehouse, swordfish) == True\nraise_flag_of_peace(zander, swordfish) = rule4()\nraise_flag_of_peace(zander, swordfish) == False\nraise_flag_of_peace(swordfish, gecko) = False\nquestion = False", "answer": -1, "code": "rule1() = not know(whale, defense_plan, swordfish) & burn(cheetah, warehouse, swordfish) => not raise_flag_of_peace(swordfish, gecko)\nrule2() = give(something, magnifying_glass, moose) => burn(cheetah, warehouse, swordfish)\nrule3() = has(whale, something_to_sit_on) => not know(whale, defense_plan, swordfish)\nrule4() = raise_flag_of_peace(zander, swordfish) => raise_flag_of_peace(swordfish, gecko)\nrule5(something) = respects(something, pig) => know(something, defense_plan, swordfish)\norder(rule4) > order(rule1) = True\norder(rule5) > order(rule3) = True\n\ngive(squirrel, magnifying_glass, moose) = True\nhas(whale, love_seat_sofa) = True\n\nquestion = raise_flag_of_peace(swordfish, gecko)\n"}, {"idx": 23, "response": "give(aardvark, magnifying_glass, dog) == True\nknows(aardvark, defensive_plans, dog) == False\nrolls_dice(aardvark, eagle) = rule1()\nrolls_dice(aardvark, eagle) == False\nrolls_dice(aardvark, eagle) == False\nrolls_dice(canary, lobster) = rule3()\nrolls_dice(canary, lobster) == True\nrolls_dice(canary, lobster) == True\nquestion = True", "answer": 1, "code": "rule1(something) = knows(something, defensive_plans, dog) & give(something, magnifying_glass, dog) => rolls_dice(something, eagle)\nrule2(something) = offer_job_position(something, parrot) => not rolls_dice(something, lobster)\nrule3() = rolls_dice(something, eagle) => rolls_dice(canary, lobster)\norder(rule3) > order(rule2) = True\n\ngive(aardvark, magnifying_glass, dog) = True\nknows(aardvark, defensive_plans, dog) = False\n\nquestion = rolls_dice(canary, lobster)\n"}, {"idx": 24, "response": "has(grizzly_bear, drink) == False\nhas(grizzly_bear, musical_instrument) == False\npoints(grizzly_bear) == points(cheetah) = rule1()\npoints(grizzly_bear) == points(cheetah) == False\npoints(grizzly_bear) == points(cheetah) == False\nlearn(grizzly_bear, basics_of_resource_management, jellyfish) = rule2(grizzly_bear)\nlearn(grizzly_bear, basics_of_resource_management, jellyfish) == False\nlearn(grizzly_bear, basics_of_resource_management, jellyfish) == False\nquestion = False", "answer": -1, "code": "rule1() = has(grizzly_bear, drink) => points(grizzly_bear) == points(cheetah)\nrule2(something) = points(something) == points(cheetah) => learn(something, basics_of_resource_management, jellyfish)\nrule3() = has(grizzly_bear, musical_instrument) => points(grizzly_bear) == points(cheetah)\n\nhas(grizzly_bear, cappuccino) = True\nhas(grizzly_bear, couch) = True\n\nquestion = learn(grizzly_bear, basics_of_resource_management, jellyfish)\n"}, {"idx": 25, "response": "has(hummingbird, card) == True\nremove_piece(hummingbird, halibut) = rule4()\nremove_piece(hummingbird, halibut) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(hummingbird)) == first_letter_of(name(cow)) => not proceed_to_spot_right_after(hummingbird, moose)\nrule2() = has(hummingbird, musical_instrument) => respects(hummingbird, cow)\nrule3() = proceed_to_spot_right_after(something, moose) & not respects(something, cow) => not remove_piece(hummingbird, halibut)\nrule4() = respects(something, cricket) => remove_piece(hummingbird, halibut)\nrule5() = purchased(hummingbird, time_machine) => proceed_to_spot_right_after(hummingbird, moose)\nrule6() = friends(hummingbird) > 3 => proceed_to_spot_right_after(hummingbird, moose)\nrule7() = wink_at(something, jellyfish) => not respects(hummingbird, cow)\norder(rule2) > order(rule7) = True\norder(rule4) > order(rule3) = True\norder(rule5) > order(rule1) = True\norder(rule6) > order(rule1) = True\n\nwink_at(buffalo, jellyfish) = True\nname(cow, Casper) = True\nhas(hummingbird, card) = True\ncolor(card, green) = True\nname(hummingbird, Mojo) = True\nfriends(hummingbird) = 7\ninvented(hummingbird, time_machine) = True\n\nquestion = remove_piece(hummingbird, halibut)\n"}, {"idx": 26, "response": "know(eel, defensive_plans, spider) == True\nnot wink(spider, cow) = rule1()\nnot wink(spider, cow) == True\nlearn(donkey, elementary_resource_management, cow) = rule3()\nlearn(donkey, elementary_resource_management, cow) == True\noffer_job_position(cow, hare) = rule4()\noffer_job_position(cow, hare) == True\nquestion = True", "answer": 1, "code": "rule1() = not know(eel, defensive_plans, spider) => not wink(spider, cow)\nrule2() = first_letter_of(name(donkey)) == first_letter_of(name(penguin)) => learn(donkey, basics_of_resource_management, cow)\nrule3() = friends(donkey) < 14 => learn(donkey, elementary_resource_management, cow)\nrule4() = not wink(spider, cow) & learn(donkey, elementary_resource_management, cow) => offer_job_position(cow, hare)\n\nfriends(donkey) = 7\nname(donkey, Mojo) = True\nknow(eel, defensive_plans, spider) = True\nname(penguin, Lola) = True\nrespect(carp, spider) = False\n\nquestion = offer_job_position(cow, hare)\n"}, {"idx": 27, "response": "has(moose, card) == True\ncolor(card, black) == True\ncolor(card) in rainbow_colors == False\nneeds_support(moose, amberjack) = rule2()\nneeds_support(moose, amberjack) == True\ngive(moose, magnifying_glass, polar_bear) = rule1()\ngive(moose, magnifying_glass, polar_bear) == True\nquestion = True", "answer": 1, "code": "rule1(something) = needs_support(something, amberjack) & not sing_victory_song(something, salmon) => give(something, magnifying_glass, polar_bear)\nrule2() = has(moose, card) & color(card) in rainbow_colors => needs_support(moose, amberjack)\nrule3(something) = saw(something, proceed_to_spot_after(panda_bear)) => not sing_victory_song(something, salmon)\nrule4() = first_letter_of(name(moose)) == first_letter_of(name(cockroach)) => needs_support(moose, amberjack)\n\nname(cockroach, Milo) = True\nhas(moose, card) = True\ncolor(card, black) = True\nname(moose, Mojo) = True\nproceed_to_spot_after(moose, panda_bear) = True\n\nquestion = give(moose, magnifying_glass, polar_bear)\n"}, {"idx": 28, "response": "has(black_bear, card) == True\ncolor(card, indigo) == True\nstarts_with(color(card), \"i\") == False\nprepare_armor(black_bear, kudu) = rule2()\nprepare_armor(black_bear, kudu) == True\nshows_all_cards(salmon, black_bear) == True\nproceed(sheep, spot_right_after(black_bear)) == False\nwink(black_bear, penguin) = rule4()\nwink(black_bear, penguin) == True\nsteal_points(black_bear, 5, ferret) = rule5()\nsteal_points(black_bear, 5, ferret) == True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(something, kudu) & wink(something, penguin) => not steal_points(black_bear, 5, ferret)\nrule2() = has(black_bear, card) & starts_with(color(card), \"i\") => prepare_armor(black_bear, kudu)\nrule3() = attacks(something, green_fields, owner(squid)) => not wink(black_bear, penguin)\nrule4() = shows_all_cards(salmon, black_bear) & not proceed(sheep, spot_right_after(black_bear)) => wink(black_bear, penguin)\nrule5() = needs_support(hummingbird, black_bear) => steal_points(black_bear, 5, ferret)\norder(rule3) > order(rule4) = True\norder(rule5) > order(rule1) = True\n\nhas(black_bear, card) = True\ncolor(card, indigo) = True\nshows_all_cards(salmon, black_bear) = True\nproceed(sheep, spot_right_after(black_bear)) = False\n\nquestion = steal_points(black_bear, 5, ferret)\n"}, {"idx": 29, "response": "give(catfish, magnifier, caterpillar) == False\nnot give(something, magnifying_glass, caterpillar) = rule4()\nnot offer_job_position(something, lobster) == True\nnot offer_job_position(catfish, lobster) == True\nbelief(prepare_armor(pig, lobster)) = False\nnot offer_job_position(catfish, lobster) == True\nnot give(lobster, magnifier, eagle) = rule3()\nnot give(lobster, magnifier, eagle) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(something, elephant) => give(lobster, magnifier, eagle)\nrule2(something) = not become_enemy(something, sea_bass) & steal_points(something, hare, 5) => not wink(something, elephant)\nrule3() = belief(prepare_armor(pig, lobster)) & not offer_job_position(catfish, lobster) => not give(lobster, magnifier, eagle)\nrule4(something) = not give(something, magnifying_glass, caterpillar) => not offer_job_position(something, lobster)\nrule5() = friends(oscar) < 5 => wink(oscar, elephant)\norder(rule1) > order(rule3) = True\norder(rule2) > order(rule5) = True\n\neat_food(oscar, food_of(sea_bass)) = True\nfriends(oscar) = 19\ngive(catfish, magnifier, caterpillar) = False\n\nquestion = give(lobster, magnifier, eagle)\n"}, {"idx": 30, "response": "has(grizzly_bear, card) == True\ncolor(card, red) == True\ncolor(card) in colors_of_Belgium_flag == True\nneeds_support(grizzly_bear, oscar) = rule3()\nneeds_support(grizzly_bear, oscar) == True\nsteals(grizzly_bear, 5, points, salmon) = rule2()\nsteals(grizzly_bear, 5, points, salmon) == True\nrolls_dice(grizzly_bear, cockroach) = rule1()\nrolls_dice(grizzly_bear, cockroach) == True\nquestion = True", "answer": 1, "code": "rule1(something) = steals(something, 5, points, salmon) & needs_support(something, oscar) => rolls_dice(something, cockroach)\nrule2() = prepares_armor(something, hummingbird) => steals(grizzly_bear, 5, points, salmon)\nrule3() = has(grizzly_bear, card) & color(card) in colors_of_Belgium_flag => needs_support(grizzly_bear, oscar)\n\nhas(grizzly_bear, card) = True\ncolor(card, red) = True\nprepares_armor(spider, hummingbird) = True\n\nquestion = rolls_dice(grizzly_bear, cockroach)\n"}, {"idx": 31, "response": "sings(carp, victory_song, parrot) == True\nprepare_armor(carp, turtle) == False\neats(carp, food_of(spider)) = rule2(carp)\neats(carp, food_of(spider)) == True\nproceed_to(carp, spot_right_after(grizzly_bear)) = not eats(carp, food_of(spider))\nproceed_to(carp, spot_right_after(grizzly_bear)) == not True\nproceed_to(carp, spot_right_after(grizzly_bear)) == False\nquestion = False", "answer": -1, "code": "rule1(something) = eats(something, food_of(spider)) => not proceed_to(something, spot_right_after(grizzly_bear))\nrule2(something) = sings(something, victory_song, parrot) & not prepare_armor(something, turtle) => eats(something, food_of(spider))\n\nsings(carp, victory_song, parrot) = True\nprepare_armor(carp, turtle) = False\n\nquestion = proceed_to(carp, spot_right_after(grizzly_bear))\n"}, {"idx": 32, "response": "burn_warehouse(squirrel, penguin) == True\nraise_flag_of_peace(tilapia, penguin) == True\nnot knock_down(penguin, fortress, carp) = rule3()\nnot knock_down(penguin, fortress, carp) == True\nnot sing_song_of_victory(koala, penguin) = rule2()\nnot sing_song_of_victory(koala, penguin) == True\nnot proceed_to(penguin, spot_after(lion)) = rule2()\nnot proceed_to(penguin, spot_after(lion)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not knock_down(something, fortress, carp) => proceed_to(something, spot_after(lion))\nrule2() = not sing_song_of_victory(koala, penguin) => not proceed_to(penguin, spot_after(lion))\nrule3() = not burn_warehouse(squirrel, penguin) & raise_flag_of_peace(tilapia, penguin) => not knock_down(penguin, fortress, carp)\norder(rule2) > order(rule1) = True\n\nburn_warehouse(squirrel, penguin) = True\nraise_flag_of_peace(tilapia, penguin) = True\n\nquestion = proceed_to(penguin, spot_after(lion))\n"}, {"idx": 33, "response": "friends(goldfish) = 6\nfriends(goldfish) > 5 = True\nsteal_points(goldfish, 5, tilapia) = rule1()\nsteal_points(goldfish, 5, tilapia) == True\nrespect(leopard, tilapia) = rule2()\nrespect(leopard, tilapia) == True\nsteal_points(goldfish, 5, tilapia) == True\nrespect(leopard, tilapia) == True\nadd_conclusion(\"the tilapia knocks down the fortress of the eagle\") = rule3()\nadd_conclusion(\"the tilapia knocks down the fortress of the eagle\") == True\nquestion = True", "answer": 1, "code": "rule1() = friends(goldfish) > 5 => steal_points(goldfish, 5, tilapia)\nrule2() = knocks_down(spider, fortress(leopard)) => respect(leopard, tilapia)\nrule3() = respect(leopard, tilapia) & steal_points(goldfish, 5, tilapia) => add_conclusion(\"the tilapia knocks down the fortress of the eagle\")\nrule4() = has_high_salary(goldfish) => steal_points(goldfish, 5, tilapia)\n\nhas_high_salary(goldfish) = False\nfriends(goldfish) = 6\nname(goldfish, Max) = True\nname(kudu, Meadow) = True\npublish_paper(leopard, high_quality) = True\nknocks_down(spider, fortress(leopard)) = True\n\nquestion = \"the tilapia knocks down the fortress of the eagle\" in conclusions\n"}, {"idx": 34, "response": "has(cockroach, high_quality_paper) == True\nnot learn(cockroach, basics_of_resource_management, hippopotamus) = rule2()\nnot learn(cockroach, basics_of_resource_management, hippopotamus) == True\nnot learn(cockroach, basics_of_resource_management, hippopotamus) == True\nnot sing_victory_song(hippopotamus, jellyfish) = rule1()\nsing_victory_song(hippopotamus, jellyfish) == False\nsing_victory_song(hippopotamus, jellyfish) == False\nquestion = False", "answer": -1, "code": "rule1() = not learn(cockroach, basics_of_resource_management, hippopotamus) => not sing_victory_song(hippopotamus, jellyfish)\nrule2() = has(cockroach, high_quality_paper) => not learn(cockroach, basics_of_resource_management, hippopotamus)\nrule3() = has(cockroach, sharp_object) => not learn(cockroach, basics_of_resource_management, hippopotamus)\n\nhas(cockroach, cello) = True\npublished(cockroach, high_quality_paper) = True\nnot become_enemy(cockroach, bat) = True\nraise_flag_of_peace(cockroach, panda_bear) = True\n\nquestion = sing_victory_song(hippopotamus, jellyfish)\n"}, {"idx": 35, "response": "invented(leopard, time_machine) == True\npurchased(leopard, time_machine) = rule1()\npurchased(leopard, time_machine) == True\nlearns(leopard, basics_of_resource_management, rabbit) = rule1()\nlearns(leopard, basics_of_resource_management, rabbit) == True\nhas(leopard, card) == True\ncolor(card, green) == True\ncolor(card) in primary_colors == True\nnot learns(leopard, basics_of_resource_management, rabbit) = rule4()\nnot learns(leopard, basics_of_resource_management, rabbit) == False\nnot learns(leopard, basics_of_resource_management, rabbit) == False\nrespect(leopard, lobster) = rule2(leopard)\nrespect(leopard, lobster) == True\nquestion = True", "answer": 1, "code": "rule1() = purchased(leopard, time_machine) => learns(leopard, basics_of_resource_management, rabbit)\nrule2(something) = learns(something, elementary_resource_management, rabbit) => respect(something, lobster)\nrule3() = first_letter_of(name(leopard)) == first_letter_of(name(whale)) => learns(leopard, elementary_resource_management, rabbit)\nrule4() = has(leopard, card) and color(card) in primary_colors => not learns(leopard, basics_of_resource_management, rabbit)\norder(rule4) > order(rule1) = True\norder(rule4) > order(rule3) = True\n\nhas(leopard, card) = True\ncolor(card, green) = True\nname(leopard, Meadow) = True\ninvented(leopard, time_machine) = True\nname(whale, Milo) = True\n\nquestion = respect(leopard, lobster)\n"}, {"idx": 36, "response": "proceeds_to(cheetah, spot_after(lobster)) == True\nnot learn(cheetah, elementary_resource_management_from(buffalo)) == True\nnot raise_flag_of_peace(cheetah, eagle) = rule1()\nnot raise_flag_of_peace(cheetah, eagle) == True\nraise_flag_of_peace(phoenix, black_bear) == False\nnot steal_points(black_bear, 5, eagle) = rule2()\nnot steal_points(black_bear, 5, eagle) == True\nraise_flag_of_peace(cheetah, eagle) == True\nprepare_armor(eagle, donkey) = rule4()\nprepare_armor(eagle, donkey) == True\nquestion = True", "answer": 1, "code": "rule1(something) = proceeds_to(something, spot_after(lobster)) & not learn(something, elementary_resource_management_from(buffalo)) => not raise_flag_of_peace(something, eagle)\nrule2() = not raise_flag_of_peace(phoenix, black_bear) => not steal_points(black_bear, 5, eagle)\nrule3() = roll_dice(polar_bear, cheetah) => raise_flag_of_peace(cheetah, eagle)\nrule4() = raise_flag_of_peace(cheetah, eagle) & not steal_points(black_bear, 5, eagle) => prepare_armor(eagle, donkey)\nrule5() = not become_enemy(cheetah, eagle) => not prepare_armor(eagle, donkey)\norder(rule1) > order(rule3) = True\norder(rule5) > order(rule4) = True\n\nproceeds_to(cheetah, spot_after(lobster)) = True\nroll_dice(polar_bear, cheetah) = True\nraise_flag_of_peace(phoenix, black_bear) = False\n\nquestion = prepare_armor(eagle, donkey)\n"}, {"idx": 37, "response": "has(cricket, card) == True\ncolor(card, blue) == True\ncolor(card) in primary_colors == True\nnot need_support(cricket, goldfish) = rule2()\nneed_support(cricket, goldfish) == False\nnot owe(cricket, money, catfish) = rule1()\nowe(cricket, money, catfish) == False\nnot learn(cricket, basics_of_resource_management, blobfish) = rule4()\nlearn(cricket, basics_of_resource_management, blobfish) == False\nquestion = False", "answer": -1, "code": "rule1() = becomes_enemy(something, octopus) => not owe(cricket, money, catfish)\nrule2() = has(cricket, card) and color(card) in primary_colors => not need_support(cricket, goldfish)\nrule3(something) = not respect(something, doctorfish) => learn(something, elementary_resource_management, blobfish)\nrule4() = not need_support(something, goldfish) and not owe(something, money, catfish) => not learn(something, basics_of_resource_management, blobfish)\norder(rule3) > order(rule4) = True\n\nhas(cricket, card) = True\ncolor(card, blue) = True\nbecomes_enemy(leopard, octopus) = True\n\nquestion = learn(cricket, basics_of_resource_management, blobfish)\n"}, {"idx": 38, "response": "has(kudu, leafy_green_vegetable) == False\nhas(kudu, musical_instrument) == False\nbecome_enemy(kudu, spider) = rule4()\nbecome_enemy(kudu, spider) == False\nbecome_enemy(kudu, spider) == False\nsing_victory_song(spider, panda_bear) = rule3()\nsing_victory_song(spider, panda_bear) == False\nsing_victory_song(spider, panda_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = has(kudu, musical_instrument) => become_enemy(kudu, spider)\nrule2() = friends(kudu) < 6 => become_enemy(kudu, spider)\nrule3() = become_enemy(kudu, spider) => sing_victory_song(spider, panda_bear)\nrule4() = has(kudu, leafy_green_vegetable) => not become_enemy(kudu, spider)\norder(rule4) > order(rule1) = True\norder(rule4) > order(rule2) = True\n\nfriends(kudu) = 16\nhas(kudu, knife) = True\nhas(kudu, spinach) = True\nhas(kudu, guitar) = True\n\nquestion = sing_victory_song(spider, panda_bear)\n"}, {"idx": 39, "response": "has(viperfish, high_quality_paper) == True\nnot sing(viperfish, victory_song, pig) = rule1()\nnot sing(viperfish, victory_song, pig) == True\nlearn(dog, basics_of_resource_management, pig) = rule2()\nlearn(dog, basics_of_resource_management, pig) == True\nnot sing(viperfish, victory_song, pig) == True\nsing(pig, victory_song, tiger) = rule2()\nsing(pig, victory_song, tiger) == True\nquestion = True", "answer": 1, "code": "rule1() = has(viperfish, high_quality_paper) => not sing(viperfish, victory_song, pig)\nrule2() = learn(dog, basics_of_resource_management, pig) & not sing(viperfish, victory_song, pig) => sing(pig, victory_song, tiger)\nrule3() = steals(something, 5, points, cockroach) => sing(viperfish, victory_song, pig)\nrule4(something) = knows(something, defense_plan, sea_bass) & not sing(something, victory_song, panther) => learn(something, basics_of_resource_management, pig)\norder(rule1) > order(rule3) = True\n\nfriends(dog) = 2\nknows(dog, defense_plan, sea_bass) = True\nnot sing(dog, victory_song, panther) = True\nsteals(sheep, 5, points, cockroach) = True\nhas(viperfish, high_quality_paper) = True\n\nquestion = sing(pig, victory_song, tiger)\n"}, {"idx": 40, "response": "has(cow, keys) == False\nnot has(cow, keys) == True\nbecome_enemy(cow, tilapia) = rule1()\nbecome_enemy(cow, tilapia) == True\nprepare_armor(sun_bear, tilapia) = rule6()\nprepare_armor(sun_bear, tilapia) == True\nnot raise_flag_of_peace(tilapia, sea_bass) = rule6()\nraise_flag_of_peace(tilapia, sea_bass) == False\nnot raise_flag_of_peace(tilapia, sea_bass) == True\nquestion = True", "answer": 1, "code": "rule1() = not has(cow, keys) => become_enemy(cow, tilapia)\nrule2() = sings_victory_song(something, parrot) => not prepare_armor(sun_bear, tilapia)\nrule3() = has(cow, something_to_carry_apples_and_oranges) => become_enemy(cow, tilapia)\nrule4() = first_letter_of(name(cow)) == first_letter_of(name(cockroach)) => not become_enemy(cow, tilapia)\nrule5() = has(sun_bear, card) and color(card) in rainbow_colors => prepare_armor(sun_bear, tilapia)\nrule6() = become_enemy(cow, tilapia) & prepare_armor(sun_bear, tilapia) => not raise_flag_of_peace(tilapia, sea_bass)\norder(rule1) > order(rule4) = True\norder(rule2) > order(rule5) = True\norder(rule3) > order(rule4) = True\n\nname(cockroach, Paco) = True\nhas(cow, card) = True\ncolor(card, green) = True\nhas(cow, guitar) = True\nname(cow, Luna) = True\nhas(cow, keys) = False\nhas(sun_bear, card) = True\ncolor(card, red) = True\n\nquestion = raise_flag_of_peace(tilapia, sea_bass)\n"}, {"idx": 41, "response": "offer_job_position(meerkat, elephant) == True\nshow_cards(meerkat, lion) == False\nnot show_cards(meerkat, lion) == True\nowe(meerkat, money, elephant) = rule1()\nowe(meerkat, money, elephant) == True\nlearn(meerkat, basics_of_resource_management, wolverine) = rule1()\nlearn(meerkat, basics_of_resource_management, wolverine) == True\nlearn(meerkat, elementary_resource_management, wolverine) = False\ngive(squid, magnifying_glass, aardvark) = rule2()\ngive(squid, magnifying_glass, aardvark) == False\nquestion = False", "answer": -1, "code": "rule1(something) = not show_cards(something, lion) & owe(something, money, elephant) => learn(something, basics_of_resource_management, wolverine)\nrule2() = learn(something, elementary_resource_management, wolverine) => give(squid, magnifying_glass, aardvark)\n\noffer_job_position(meerkat, elephant) = True\nshow_cards(meerkat, lion) = False\n\nquestion = give(squid, magnifying_glass, aardvark)\n"}, {"idx": 42, "response": "question = unknown", "answer": 0, "code": "rule1(something) = holds(something, points) == holds(turtle, points) => give(something, magnifying_glass, phoenix)\nrule2() = first_letter_of(name(oscar)) == first_letter_of(name(kiwi)) => holds(oscar, points) == holds(turtle, points)\nrule3() = friends(oscar) > 17 => holds(oscar, points) == holds(turtle, points)\n\nname(kiwi, Tessa) = True\nprepare_armor(kiwi, oscar) = True\nlearn(kudu, basics_of_resource_management, oscar) = True\nfriends(oscar) = 10\nname(oscar, Teddy) = True\n\nquestion = give(oscar, magnifying_glass, phoenix)\n"}, {"idx": 43, "response": "steal_points(cat, 5, halibut) == True\nnot need_support(cat, donkey) == True\nowe(cat, money, salmon) = rule2()\nowe(cat, money, salmon) == True\nowe(cat, money, salmon) == True\nnot need_support(cat, squirrel) = rule3()\nnot need_support(cat, squirrel) == False\nnot need_support(cat, squirrel) == False\nquestion = False", "answer": -1, "code": "rule1() = saw_roll_dice(something, wolverine) => need_support(something, squirrel)\nrule2() = steal_points(something, 5, halibut) & not need_support(something, donkey) => owe(something, money, salmon)\nrule3() = owe(something, money, salmon) => not need_support(something, squirrel)\nrule4() = has_high_salary(cat) => not owe(cat, money, salmon)\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule2) = True\n\nsteal_points(cat, 5, halibut) = True\nnot need_support(cat, donkey) = True\n\nquestion = need_support(cat, squirrel)\n"}, {"idx": 44, "response": "has(phoenix, card) == True\ncolor(card, green) == True\ncolor(card) in primary_colors == True\noffer_job_position(phoenix, cricket) = rule1()\noffer_job_position(phoenix, cricket) == False\nbelief(phoenix, offer_job_position, cricket) == False\nnot attack(oscar, green_fields, owner(cricket)) = rule2()\nattack(oscar, green_fields, owner(cricket)) == False\nlearn(cricket, basics_of_resource_management, canary) = rule2()\nlearn(cricket, basics_of_resource_management, canary) == True\nquestion = True", "answer": 1, "code": "rule1() = has(phoenix, card) and color(card) in primary_colors => not offer_job_position(phoenix, cricket)\nrule2() = belief(phoenix, offer_job_position, cricket) and not attack(oscar, green_fields, owner(cricket)) => learn(cricket, basics_of_resource_management, canary)\nrule3() = took(oscar, bike, store) => not attack(oscar, green_fields, owner(cricket))\nrule4() = first_letter_of(name(phoenix)) == first_letter_of(name(doctorfish)) => not offer_job_position(phoenix, cricket)\nrule5() = not roll_dice(something, squid) and not show_cards(something, sun_bear) => attack(something, green_fields, owner(cricket))\nrule6() = first_letter_of(name(oscar)) == first_letter_of(name(eagle)) => not attack(oscar, green_fields, owner(cricket))\norder(rule5) > order(rule3) = True\norder(rule5) > order(rule6) = True\n\nname(doctorfish, Pashmak) = True\nname(eagle, Charlie) = True\nname(oscar, Buddy) = True\noffer_job_position(oscar, sun_bear) = True\ntook(oscar, bike, store) = True\nhas(phoenix, card) = True\ncolor(card, green) = True\nname(phoenix, Max) = True\n\nquestion = learn(cricket, basics_of_resource_management, canary)\n"}, {"idx": 45, "response": "has(halibut, device_to_connect_to_internet) == True\nattack(halibut, green_fields, oscar) = rule1()\nattack(halibut, green_fields, oscar) == True\noffer_job_position(puffin, oscar) == True\nattack(halibut, green_fields, oscar) == True\nadd_conclusion(\"the oscar eats the food of the moose\") = rule2()\nadd_conclusion(\"the oscar eats the food of the moose\") == True\nnot learn(puffin, elementary_resource_management, parrot) == True\noffer_job_position(puffin, oscar) = rule3()\noffer_job_position(puffin, oscar) == True\nnot offer_job_position(puffin, oscar) == False\n\"the oscar eats the food of the moose\" in conclusions = True\nquestion = True", "answer": 1, "code": "rule1() = has(halibut, device_to_connect_to_internet) => attack(halibut, green_fields, oscar)\nrule2() = offer_job_position(puffin, oscar) & attack(halibut, green_fields, oscar) => add_conclusion(\"the oscar eats the food of the moose\")\nrule3(something) = not learn(something, elementary_resource_management, parrot) => offer_job_position(something, oscar)\nrule4() = has(puffin, something_to_carry_apples_and_oranges) => not offer_job_position(puffin, oscar)\norder(rule3) > order(rule4) = True\n\nhas(halibut, computer) = True\nhas(puffin, plastic_bag) = True\nnot learn(puffin, elementary_resource_management, parrot) = True\n\nquestion = \"the oscar eats the food of the moose\" in conclusions\n"}, {"idx": 46, "response": "has(leopard, card) == True\ncolor(card, orange) == True\ncolor(card) in primary_colors == True\npoints(leopard) == points(kangaroo) = rule1()\npoints(leopard) == points(kangaroo) == True\nfriends(leopard) = 4\npoints(leopard) == points(kangaroo) == True\nsing_victory_song(sea_bass, kangaroo) = rule4()\nsing_victory_song(sea_bass, kangaroo) == False\nnot sing_victory_song(kangaroo, viperfish) = rule4()\nnot sing_victory_song(kangaroo, viperfish) == True\nquestion = True", "answer": 1, "code": "rule1() = has(leopard, card) and color(card) in primary_colors => points(leopard) == points(kangaroo)\nrule2() = friends(leopard) > 1 => points(leopard) == points(kangaroo)\nrule3(something) = not attack(something, green_fields(eel)) & offer_job_position(something, starfish) => sing_victory_song(something, viperfish)\nrule4() = points(leopard) == points(kangaroo) & sing_victory_song(sea_bass, kangaroo) => not sing_victory_song(kangaroo, viperfish)\nrule5() = has(sea_bass, card) and color(card) in rainbow_colors => sing_victory_song(sea_bass, kangaroo)\nrule6() = works_more_hours(sea_bass) => sing_victory_song(sea_bass, kangaroo)\nrule7() = owes(something, money, cat) => not attack(kangaroo, green_fields(eel))\norder(rule3) > order(rule4) = True\n\nfriends(leopard) = 4\nhas(leopard, card) = True\ncolor(card, orange) = True\nowes(pig, money, cat) = True\nhas(sea_bass, card) = True\ncolor(card, red) = True\nworks_more_hours(sea_bass) = False\nproceed(puffin, spot, kangaroo) = False\n\nquestion = sing_victory_song(kangaroo, viperfish)\n"}, {"idx": 47, "response": "give(cricket, magnifier, squid) == True\nremove(squid, piece, parrot) = rule6()\nremove(squid, piece, parrot) == True\nremove(squid, piece, parrot) == True\nquestion = True", "answer": 1, "code": "rule1() = give(cricket, magnifier, squid) & give(sea_bass, magnifier, squid) => add_conclusion(\"the squid sings a song of victory for the spider\")\nrule2() = publish(eagle, high_quality_paper) => burn(eagle, warehouse, zander)\nrule3() = has(squid, card) & color(card) in primary_colors => not sing(squid, song_of_victory, spider)\nrule4() = sing(something, song_of_victory, spider) & remove(something, piece, dog) => not remove(something, piece, parrot)\nrule5() = has(eagle, card) & color(card) in primary_colors => burn(eagle, warehouse, zander)\nrule6() = burn(something, warehouse, zander) => remove(squid, piece, parrot)\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule6) = True\n\ngive(cricket, magnifier, squid) = True\nhas(eagle, card) = True\ncolor(card, yellow) = True\nread(eagle, high_quality_paper) = True\npoints(sea_bass) == points(squid) = True\nhas(squid, card) = True\ncolor(card, black) = True\n\nquestion = remove(squid, piece, parrot)\n"}, {"idx": 48, "response": "name(sun_bear, Beauty) == True\nname(pig, Bella) == True\nfirst_letter_of(name(sun_bear)) == first_letter_of(name(pig)) = True\nnot remove_piece(sun_bear, viperfish) = rule1()\nremove_piece(sun_bear, viperfish) == False\nremove_piece(sun_bear, viperfish) == False\nraise_flag_of_peace(viperfish, lobster) = rule2()\nraise_flag_of_peace(viperfish, lobster) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(sun_bear)) == first_letter_of(name(pig)) => not remove_piece(sun_bear, viperfish)\nrule2() = remove_piece(sun_bear, viperfish) => raise_flag_of_peace(viperfish, lobster)\nrule3() = friends(sun_bear) < 5 => remove_piece(sun_bear, viperfish)\norder(rule3) > order(rule1) = True\n\nname(pig, Bella) = True\nfriends(sun_bear) = 3\nname(sun_bear, Beauty) = True\n\nquestion = raise_flag_of_peace(viperfish, lobster)\n"}, {"idx": 49, "response": "playful_friends(goldfish) = 4\nfriends(goldfish) = playful_friends(goldfish) + non_playful_friends(goldfish) = 4 + 1 = 5\nfriends(goldfish) > 3 = True\nneeds_support(goldfish, cheetah) = rule1()\nneeds_support(goldfish, cheetah) == True\nknows(goldfish, defensive_plans, sun_bear) = rule3()\nknows(goldfish, defensive_plans, sun_bear) == True\nneeds_support(goldfish, cheetah) == True\nnot burn_warehouse(goldfish, eel) = rule2()\nburn_warehouse(goldfish, eel) == False\nburn_warehouse(goldfish, eel) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(goldfish) > 3 => needs_support(goldfish, cheetah)\nrule2(something) = knows(something, defensive_plans, sun_bear) & needs_support(something, cheetah) => not burn_warehouse(something, eel)\nrule3() = first_letter_of(name(goldfish)) == first_letter_of(name(panda_bear)) => knows(goldfish, defensive_plans, sun_bear)\nrule4() = has(goldfish, card) and starts_with(color(card), \"e\") => needs_support(goldfish, cheetah)\nrule5() = has(goldfish, internet_device) => knows(goldfish, defensive_plans, sun_bear)\n\nplayful_friends(goldfish) = 4\nnon_playful_friends(goldfish) = 1\nhas(goldfish, card) = True\ncolor(card, yellow) = True\nhas(goldfish, plastic_bag) = True\nname(goldfish, Mojo) = True\nname(panda_bear, Max) = True\n\nquestion = burn_warehouse(goldfish, eel)\n"}, {"idx": 50, "response": "give(carp, magnifying_glass, hummingbird) == True\nnot remove(squid, piece, hummingbird) = rule1()\nnot remove(squid, piece, hummingbird) == True\nadd_conclusion(\"the hummingbird attacks the green fields of the jellyfish\") = rule1()\nadd_conclusion(\"the hummingbird attacks the green fields of the jellyfish\") == True\nattacks(something, green_fields, jellyfish) = rule2()\nattacks(something, green_fields, jellyfish) == True\nattacks(caterpillar, green_fields, baboon) = question\nattacks(caterpillar, green_fields, baboon) == True", "answer": 1, "code": "rule1() = not remove(squid, piece, hummingbird) & give(carp, magnifying_glass, hummingbird) => add_conclusion(\"the hummingbird attacks the green fields of the jellyfish\")\nrule2() = attacks(something, green_fields, jellyfish) => attacks(caterpillar, green_fields, baboon)\n\ngive(carp, magnifying_glass, hummingbird) = True\nnot sing(squid, victory_song, hummingbird) = True\n\nquestion = attacks(caterpillar, green_fields, baboon)\n"}, {"idx": 51, "response": "has(panther, card) == True\ncolor(card, black) == True\ncolor(card) in colors_of_flag(japan) == True\nproceed_to_spot(panther, right_after_spot(squirrel)) = rule2()\nproceed_to_spot(panther, right_after_spot(squirrel)) == True\nremove_piece(cockroach, tilapia) = rule3()\nremove_piece(cockroach, tilapia) == True\nquestion = True", "answer": 1, "code": "rule1() = has(panther, something_to_sit_on) => proceed_to_spot(panther, right_after_spot(squirrel))\nrule2() = has(panther, card) and color(card) in colors_of_flag(japan) => proceed_to_spot(panther, right_after_spot(squirrel))\nrule3() = proceed_to_spot(something, right_after_spot(squirrel)) => remove_piece(cockroach, tilapia)\n\nhas(panther, card) = True\ncolor(card, black) = True\nhas(panther, couch) = True\n\nquestion = remove_piece(cockroach, tilapia)\n"}, {"idx": 52, "response": "burns(amberjack, warehouse, swordfish) == True\nnot knock_down(fortress, canary) = rule1()\nnot knock_down(fortress, canary) == True\nraise_flag_of_peace(mosquito, amberjack) == True\nwink(amberjack, whale) = rule4()\nwink(amberjack, whale) == True\nnot raise_flag_of_peace(amberjack, sea_bass) = rule6()\nnot raise_flag_of_peace(amberjack, sea_bass) == False\nquestion = False", "answer": -1, "code": "rule1(something) = burns(something, warehouse, swordfish) => not knock_down(fortress, canary)\nrule2() = friends(kangaroo) > 6 => not wink(kangaroo, whale)\nrule3() = not has(kangaroo, keys) => not wink(kangaroo, whale)\nrule4(something) = eats(something, food_of(sheep)) => wink(something, whale)\nrule5(something) = not knock_down(fortress, canary) => raise_flag_of_peace(something, sea_bass)\nrule6() = wink(something, whale) => not raise_flag_of_peace(amberjack, sea_bass)\norder(rule2) > order(rule4) = True\norder(rule3) > order(rule4) = True\norder(rule6) > order(rule5) = True\n\nburns(amberjack, warehouse, swordfish) = True\neats(kangaroo, food_of(sheep)) = True\nhas(kangaroo, keys) = True\nraise_flag_of_peace(mosquito, amberjack) = True\nbecome_enemy(turtle, amberjack) = False\n\nquestion = raise_flag_of_peace(amberjack, sea_bass)\n"}, {"idx": 53, "response": "has(leopard, card) and starts_with(color(card), \"b\") = True\nhas(leopard, something_to_carry_apples_and_oranges) = True\nknock_down(leopard, fortress, sun_bear) = rule4()\nknock_down(leopard, fortress, sun_bear) == True\nknock_down(leopard, fortress, sun_bear) == True\nfriends(leopard) = 13\nknock_down(leopard, fortress, sun_bear) = rule5()\nknock_down(leopard, fortress, sun_bear) == True\nknock_down(leopard, fortress, sun_bear) == True\nproceed_to_spot(something, right_after_spot(dog)) = rule3()\nproceed_to_spot(something, right_after_spot(dog)) == True\nproceed_to_spot(something, right_after_spot(dog)) == True\nquestion = True", "answer": 1, "code": "rule1() = owes(something, money, halibut) => not knock_down(leopard, fortress, carp)\nrule2() = has(leopard, card) and starts_with(color(card), \"b\") => not knock_down(leopard, fortress, sun_bear)\nrule3() = not knock_down(something, fortress, carp) and knock_down(something, fortress, sun_bear) => proceed_to_spot(something, right_after_spot(dog))\nrule4() = has(leopard, something_to_carry_apples_and_oranges) => knock_down(leopard, fortress, sun_bear)\nrule5() = friends(leopard) > 10 => knock_down(leopard, fortress, sun_bear)\nrule6() = has(leopard, something_to_drink) => not knock_down(leopard, fortress, sun_bear)\norder(rule2) > order(rule4) = True\norder(rule2) > order(rule5) = True\norder(rule6) > order(rule4) = True\norder(rule6) > order(rule5) = True\n\nfriends(leopard) = 13\nhas(leopard, cello) = True\nnot roll_dice(leopard, sea_bass) = True\nhas(leopard, club_chair) = True\nsing_victory_song(puffin, halibut) = True\n\nquestion = proceed_to_spot(leopard, right_after_spot(dog))\n"}, {"idx": 54, "response": "name(panther, Casper) == True\nname(zander, Chickpea) == True\nfirst_letter_of(name(panther)) == first_letter_of(name(zander)) == True\neat_food(panther, food_of(canary)) = rule2()\neat_food(panther, food_of(canary)) == True\nremove_piece(canary, whale) = rule1()\nremove_piece(canary, whale) == True\nquestion = True", "answer": 1, "code": "rule1() = eat_food(panther, food_of(canary)) => remove_piece(canary, whale)\nrule2() = first_letter_of(name(panther)) == first_letter_of(name(zander)) => eat_food(panther, food_of(canary))\nrule3() = eat_food(squirrel, food_of(panther)) => not eat_food(panther, food_of(canary))\nrule4() = respect(crocodile, squirrel) => attack(squirrel, green_fields, bat)\norder(rule3) > order(rule2) = True\n\nrespect(crocodile, squirrel) = True\nname(panther, Casper) = True\nname(zander, Chickpea) = True\n\nquestion = remove_piece(canary, whale)\n"}, {"idx": 55, "response": "has(polar_bear, card) == True\ncolor(card, yellow) == True\ncolor(card) in colors_of(flag_of_Netherlands) == True\nshow_cards(polar_bear, hummingbird) = rule3()\nshow_cards(polar_bear, hummingbird) == True\nnot owe(sea_bass, money, hummingbird) == True\nnot owe(sea_bass, money, hummingbird) == True\nnot wink(hummingbird, cheetah) = rule5()\nnot wink(hummingbird, cheetah) == False\nnot wink(hummingbird, cheetah) == False\nquestion = False", "answer": -1, "code": "rule1() = has(polar_bear, musical_instrument) => not show_cards(polar_bear, hummingbird)\nrule2() = first_letter_of(name(polar_bear)) == first_letter_of(name(zander)) => not show_cards(polar_bear, hummingbird)\nrule3() = has(polar_bear, card) and color(card) in colors_of(flag_of_Netherlands) => show_cards(polar_bear, hummingbird)\nrule4(something) = sings(something, song_of_victory, penguin) & not steal_points(something, 5, wolverine) => not owe(something, money, hummingbird)\nrule5() = show_cards(polar_bear, hummingbird) & not owe(sea_bass, money, hummingbird) => not wink(hummingbird, cheetah)\nrule6() = not offer_job_position(raven, hummingbird) => wink(hummingbird, cheetah)\nrule7() = not has(polar_bear, keys) => show_cards(polar_bear, hummingbird)\norder(rule1) > order(rule3) = True\norder(rule1) > order(rule7) = True\norder(rule2) > order(rule3) = True\norder(rule2) > order(rule7) = True\norder(rule6) > order(rule5) = True\n\nhas(polar_bear, card) = True\ncolor(card, yellow) = True\nlost(polar_bear, keys) = True\nname(polar_bear, Teddy) = True\nsings(sea_bass, song_of_victory, penguin) = True\nnot steal_points(sea_bass, 5, wolverine) = True\nname(zander, Max) = True\n\nquestion = wink(hummingbird, cheetah)\n"}, {"idx": 56, "response": "remove(cockroach, piece, halibut) == True\nremove(cockroach, piece, oscar) == True\nknows(cockroach, defensive_plans, oscar) = rule1()\nknows(cockroach, defensive_plans, oscar) == True\nnot knows(cockroach, defensive_plans, oscar) == False\npoints(cockroach) == points(cricket) = rule3()\npoints(cockroach) == points(cricket) == True\npoints(cockroach) == points(cricket) == True\nquestion = True", "answer": 1, "code": "rule1() = remove(something, piece, halibut) & remove(something, piece, oscar) => knows(something, defensive_plans, oscar)\nrule2(something) = not learn(something, basics_of_resource_management, kangaroo) => not points(something) == points(cricket)\nrule3(something) = not knows(something, defensive_plans, oscar) => points(something) == points(cricket)\norder(rule2) > order(rule3) = True\n\nremove(cockroach, piece, halibut) = True\nremove(cockroach, piece, oscar) = True\n\nquestion = points(cockroach) == points(cricket)\n"}, {"idx": 57, "response": "remove(wolverine, piece, snail) == True\ngive(wolverine, magnifier, tilapia) == True\nnot knows(wolverine, defensive_plans, penguin) = rule2(wolverine)\nnot knows(wolverine, defensive_plans, penguin) == True\nnot knows(wolverine, defensive_plans, penguin) == True\nproceed(jellyfish, spot_right_after(cow)) = rule3()\nproceed(jellyfish, spot_right_after(cow)) == True\nproceed(jellyfish, spot_right_after(cow)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(wolverine, card) and color(card) in colors_of(flag_of_italy) => knows(wolverine, defensive_plans, penguin)\nrule2(something) = remove(something, piece, snail) & give(something, magnifier, tilapia) => not knows(something, defensive_plans, penguin)\nrule3() = knows(something, defensive_plans, penguin) => proceed(jellyfish, spot_right_after(cow))\nrule4() = needs_support(buffalo, jellyfish) => not proceed(jellyfish, spot_right_after(cow))\norder(rule2) > order(rule1) = True\norder(rule4) > order(rule3) = True\n\nhas(wolverine, card) = True\ncolor(card, white) = True\nremove(wolverine, piece, snail) = True\n\nquestion = proceed(jellyfish, spot_right_after(cow))\n"}, {"idx": 58, "response": "remove(cockroach, piece, parrot) == True\nproceed(parrot, spot_right_after(tiger)) = rule1()\nproceed(parrot, spot_right_after(tiger)) == True\nnot remove(tiger, piece, moose) = rule3()\nremove(tiger, piece, moose) == False\nremove(tiger, piece, moose) == False\nquestion = False", "answer": -1, "code": "rule1() = remove(cockroach, piece, parrot) => proceed(parrot, spot_right_after(tiger))\nrule2() = has(parrot, something_to_sit_on) => not proceed(parrot, spot_right_after(tiger))\nrule3() = proceed(parrot, spot_right_after(tiger)) => not remove(tiger, piece, moose)\nrule4() = has(parrot, musical_instrument) => not proceed(parrot, spot_right_after(tiger))\norder(rule2) > order(rule1) = True\norder(rule4) > order(rule1) = True\n\nremove(cockroach, piece, parrot) = True\nhas(parrot, green_tea) = True\n\nquestion = remove(tiger, piece, moose)\n"}, {"idx": 59, "response": "has(hummingbird, carry_apples_oranges) = False\nattack(hummingbird, green_fields(snail)) = rule1()\nattack(hummingbird, green_fields(snail)) == False\nnot attack(hummingbird, green_fields(snail)) == True\npoints(snail) == points(eel) = rule2()\npoints(snail) == points(eel) == True\nquestion = True", "answer": 1, "code": "rule1() = has(hummingbird, carry_apples_oranges) => attack(hummingbird, green_fields(snail))\nrule2() = not attack(hummingbird, green_fields(snail)) => points(snail) == points(eel)\nrule3() = friends(hummingbird) > 13 => attack(hummingbird, green_fields(snail))\n\nhas(hummingbird, plastic_bag) = True\nenergetic_friends(hummingbird) = 1\nnon_energetic_friends(hummingbird) = 2\n\nquestion = points(snail) == points(eel)\n"}, {"idx": 60, "response": "friends(panther) = 7\nfriends(panther) > 4 = True\neat_food(panther, food_of(dog)) = rule1()\neat_food(panther, food_of(dog)) == True\nknows(dog, defense_plans, jellyfish) = rule2()\nknows(dog, defense_plans, jellyfish) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(panther) > 4 => eat_food(panther, food_of(dog))\nrule2() = eat_food(panther, food_of(dog)) => knows(dog, defense_plans, jellyfish)\n\nfriends(panther) = 7\n\nquestion = knows(dog, defense_plans, jellyfish)\n"}, {"idx": 61, "response": "name(parrot, Lola) == True\nname(doctorfish, Blossom) == True\nfirst_letter_of(name(parrot)) == first_letter_of(name(doctorfish)) = True\nsteal_points(parrot, 5, lobster) = rule1()\nsteal_points(parrot, 5, lobster) == True\nsing_victory_song(parrot, bat) = rule4()\nsing_victory_song(parrot, bat) == True\nsteal_points(parrot, 5, lobster) == True\nnot owe(parrot, money, cat) = rule2()\nowe(parrot, money, cat) == False\nowe(parrot, money, cat) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(parrot)) == first_letter_of(name(doctorfish)) => steal_points(parrot, 5, lobster)\nrule2() = steal_points(something, 5, lobster) & sing_victory_song(something, bat) => not owe(something, money, cat)\nrule3() = created(parrot, time_machine) => steal_points(parrot, 5, lobster)\nrule4() = eat_food(something, food_of(ferret)) => sing_victory_song(parrot, bat)\n\nname(doctorfish, Blossom) = True\neat_food(octopus, food_of(ferret)) = True\ncreated(parrot, time_machine) = True\nname(parrot, Lola) = True\n\nquestion = owe(parrot, money, cat)\n"}, {"idx": 62, "response": "belief(kiwi, rolls_dice, cheetah) = False\nnot belief(kangaroo, rolls_dice, cheetah) = True\nadd_conclusion(cheetah, shows_cards, all, dog) = rule1()\nadd_conclusion(cheetah, shows_cards, all, dog) == True\nsupports(cheetah, Chris_Ronaldo) == True\nnot learn(cheetah, basics_of_resource_management, phoenix) = rule2()\nnot learn(cheetah, basics_of_resource_management, phoenix) == True\nknows(rabbit, defensive_plans, koala) == True\nlearn(cheetah, basics_of_resource_management, phoenix) = rule3()\nlearn(cheetah, basics_of_resource_management, phoenix) == True\nnot prepare_armor(kiwi, eagle) = False\nrolls_dice(kiwi, cheetah) = rule5()\nrolls_dice(kiwi, cheetah) == True\nnot show_cards(kiwi, all, dog) = rule4()\nnot show_cards(kiwi, all, dog) == True\nshows_cards(cheetah, all, dog) = True\nquestion = True", "answer": 1, "code": "rule1() = belief(kiwi, rolls_dice, cheetah) & not belief(kangaroo, rolls_dice, cheetah) => add_conclusion(cheetah, shows_cards, all, dog)\nrule2() = supports(cheetah, Chris_Ronaldo) => not learn(cheetah, basics_of_resource_management, phoenix)\nrule3() = knows(something, defensive_plans, koala) => learn(cheetah, basics_of_resource_management, phoenix)\nrule4() = not learn(something, basics_of_resource_management, phoenix) & rolls_dice(something, spider) => not show_cards(something, all, dog)\nrule5() = not prepare_armor(something, eagle) => rolls_dice(something, cheetah)\nrule6() = has(kangaroo, card) & starts_with(color_of(card), \"r\") => not rolls_dice(kangaroo, cheetah)\norder(rule1) > order(rule4) = True\norder(rule2) > order(rule3) = True\n\nsupports(cheetah, Chris_Ronaldo) = True\nhas(kangaroo, banana_strawberry_smoothie) = True\nhas(kangaroo, card) = True\ncolor_of(card, black) = True\nknows(rabbit, defensive_plans, koala) = True\nprepare_armor(kiwi, eagle) = False\n\nquestion = shows_cards(cheetah, all, dog)\n"}, {"idx": 63, "response": "friends(panda_bear) = playful_friends(panda_bear) + non_playful_friends(panda_bear)\nfriends(panda_bear) = 2 + 4\nfriends(panda_bear) = 6\nfriends(panda_bear) < 14 = True\noffer_job_position(panda_bear, bat) = rule2()\noffer_job_position(panda_bear, bat) == True\nowe(mosquito, money, phoenix) = rule1()\nowe(mosquito, money, phoenix) == True\nquestion = True", "answer": 1, "code": "rule1() = offer_job_position(something, bat) => owe(mosquito, money, phoenix)\nrule2() = friends(panda_bear) < 14 => offer_job_position(panda_bear, bat)\n\nplayful_friends(panda_bear) = 2\nnon_playful_friends(panda_bear) = 4\n\nquestion = owe(mosquito, money, phoenix)\n"}, {"idx": 64, "response": "has(baboon, card) == True\ncolor(card, indigo) == True\nstarts_with(color(card), \"n\") == False\nowns(baboon, luxury_aircraft) == True\nneeds_support(baboon, jellyfish) = rule1()\nneeds_support(baboon, jellyfish) == True\nknow(baboon, defensive_plans, tiger) = rule2(baboon)\nknow(baboon, defensive_plans, tiger) == not know(baboon, defensive_plans, tiger)\nknow(baboon, defensive_plans, tiger) == not know(baboon, defensive_plans, tiger)\nquestion = not know(baboon, defensive_plans, tiger) == not know(baboon, defensive_plans, tiger) == True", "answer": 1, "code": "rule1() = owns(baboon, luxury_aircraft) => needs_support(baboon, jellyfish)\nrule2(something) = needs_support(something, jellyfish) => not know(something, defensive_plans, tiger)\nrule3() = has(baboon, card) and starts_with(color(card), \"n\") => needs_support(baboon, jellyfish)\n\nhas(baboon, card) = True\ncolor(card, indigo) = True\nowns(baboon, luxury_aircraft) = True\n\nquestion = know(baboon, defensive_plans, tiger)\n"}, {"idx": 65, "response": "has(meerkat, card) == True\ncolor(card, yellow) == True\ncolor(card) in rainbow_colors = True\nowe(meerkat, money, cockroach) = rule1()\nowe(meerkat, money, cockroach) == True\nsteal_points(meerkat, 5, cockroach) = False\nlearn(cockroach, basics_of_resource_management, cow) = rule3()\nlearn(cockroach, basics_of_resource_management, cow) == not learn(cockroach, basics_of_resource_management, cow)\nlearn(cockroach, basics_of_resource_management, cow) == not learn(cockroach, basics_of_resource_management, cow)\nquestion = not learn(cockroach, basics_of_resource_management, cow)\n", "answer": 0, "code": "rule1() = has(meerkat, card) and color(card) in rainbow_colors => owe(meerkat, money, cockroach)\nrule2() = steal_points(meerkat, 5, cockroach) => learn(cockroach, basics_of_resource_management, cow)\nrule3() = knows(moose, defense_plan, cockroach) => not learn(cockroach, basics_of_resource_management, cow)\norder(rule3) > order(rule2) = True\n\nhas(meerkat, card) = True\ncolor(card, yellow) = True\n\nquestion = learn(cockroach, basics_of_resource_management, cow)\n"}, {"idx": 66, "response": "has(catfish, card) == True\ncolor(card, red) == True\nhas(catfish, knapsack) == True\ncarries(catfish, apples) == True\ncarries(catfish, oranges) == True\nwink(catfish, elephant) = rule6()\nwink(catfish, elephant) == True\nnot become_enemy(catfish, phoenix) = rule5()\nnot know(catfish, defense_plan, meerkat) = rule5()\nknow(catfish, defense_plan, pig) = rule5()\nknow(catfish, defense_plan, pig) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(catfish) < 5 => not know(catfish, defense_plan, meerkat)\nrule2() = has(catfish, card) and color(card) in primary_colors => not know(catfish, defense_plan, meerkat)\nrule3(something) = knocks_down(something, fortress, halibut) => not become_enemy(something, phoenix)\nrule4(something) = saw(something, wink, elephant) => not know(something, defense_plan, pig)\nrule5(something) = not become_enemy(something, phoenix) and not know(something, defense_plan, meerkat) => know(something, defense_plan, pig)\nrule6() = has(catfish, knapsack) and carries(catfish, apples) and carries(catfish, oranges) => wink(catfish, elephant)\norder(rule5) > order(rule4) = True\n\nhas(catfish, card) = True\ncolor(card, red) = True\nknocks_down(catfish, fortress, halibut) = True\nhas(catfish, knapsack) = True\nfriends(catfish) = 6\n\nquestion = know(catfish, defense_plan, pig)\n"}, {"idx": 67, "response": "owe(aardvark, money, doctorfish) == True\nburn_warehouse(aardvark, panda_bear) == False\nnot burn_warehouse(aardvark, panda_bear) == True\nnot learn(panda_bear, elementary_resource_management, halibut) = rule2()\nnot learn(panda_bear, elementary_resource_management, halibut) == True\nlearn(something, elementary_resource_management, koala) = rule3()\nlearn(something, elementary_resource_management, koala) == True\nlearn(panda_bear, basics_of_resource_management, halibut) = question\nlearn(panda_bear, basics_of_resource_management, halibut) == unknown", "answer": 0, "code": "rule1(something) = eat_food(something, food_of(dog)) & owe(something, money, doctorfish) => burn_warehouse(panda_bear)\nrule2() = not burn_warehouse(aardvark, panda_bear) => not learn(panda_bear, elementary_resource_management, halibut)\nrule3() = learn(something, elementary_resource_management, koala) => not burn_warehouse(aardvark, panda_bear)\norder(rule1) > order(rule3) = True\n\nowe(aardvark, money, doctorfish) = True\nlearn(leopard, basics_of_resource_management, koala) = True\n\nquestion = learn(panda_bear, basics_of_resource_management, halibut)\n"}, {"idx": 68, "response": "name(polar_bear, Teddy) == True\nname(whale, Pashmak) == True\nfirst_letter_of(name(polar_bear)) == first_letter_of(name(whale)) = True\nnot attack(polar_bear, green_fields, zander) = rule1()\nnot attack(polar_bear, green_fields, zander) == False\nnot attack(polar_bear, green_fields, zander) == False\nnot has(polar_bear, keys) = rule2()\nnot has(polar_bear, keys) == True\nnot has(polar_bear, keys) == True\nattack(polar_bear, green_fields, zander) = rule4()\nattack(polar_bear, green_fields, zander) == True\nattack(polar_bear, green_fields, zander) == True\nnot knock_down(starfish, fortress, zander) = rule3()\nnot knock_down(starfish, fortress, zander) == True\nnot knock_down(starfish, fortress, zander) == True\nattack(zander, green_fields, grasshopper) = rule3()\nattack(zander, green_fields, grasshopper) == True\nattack(zander, green_fields, grasshopper) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(polar_bear)) == first_letter_of(name(whale)) => not attack(polar_bear, green_fields, zander)\nrule2() = not has(polar_bear, keys) => not attack(polar_bear, green_fields, zander)\nrule3() = not attack(polar_bear, green_fields, zander) & not knock_down(starfish, fortress, zander) => attack(zander, green_fields, grasshopper)\nrule4() = eat_food(something, food_of(elephant)) => attack(polar_bear, green_fields, zander)\nrule5() = has(starfish, drink) => knock_down(starfish, fortress, zander)\norder(rule1) > order(rule4) = True\norder(rule2) > order(rule4) = True\n\nname(polar_bear, Teddy) = True\nhas(polar_bear, keys) = False\nhas(starfish, banana_strawberry_smoothie) = True\nname(whale, Pashmak) = True\n\nquestion = attack(zander, green_fields, grasshopper)\n"}, {"idx": 69, "response": "burn(sun_bear, warehouse, lobster) == True\ngive(sun_bear, magnifying_glass, doctorfish) == True\ngive(sun_bear, magnifier, kiwi) = rule1()\ngive(sun_bear, magnifier, kiwi) == True\nneed_support(sun_bear, wolverine) = rule2()\nneed_support(sun_bear, wolverine) == True\nquestion = True", "answer": 1, "code": "rule1() = give(something, magnifying_glass, doctorfish) & burn(something, warehouse, lobster) => give(something, magnifier, kiwi)\nrule2() = give(something, magnifier, kiwi) => need_support(something, wolverine)\n\nburn(sun_bear, warehouse, lobster) = True\ngive(sun_bear, magnifying_glass, doctorfish) = True\n\nquestion = need_support(sun_bear, wolverine)\n"}, {"idx": 70, "response": "has(tiger, card) == True\ncolor(card, blue) == True\ncolor(card) in primary_colors = True\nneeds_support(tiger, eagle) = rule1()\nneeds_support(tiger, eagle) == True\nnot has(tiger, keys) = rule2()\nnot has(tiger, keys) == False\nneeds_support(tiger, eagle) == True\nnot remove_piece(tiger, doctorfish) = rule3()\nremove_piece(tiger, doctorfish) == False\nremove_piece(tiger, doctorfish) == False\nquestion = False", "answer": -1, "code": "rule1() = has(tiger, card) and color(card) in primary_colors => needs_support(tiger, eagle)\nrule2() = not has(tiger, keys) => needs_support(tiger, eagle)\nrule3(something) = needs_support(something, eagle) => not remove_piece(something, doctorfish)\n\nhas(tiger, card) = True\ncolor(card, blue) = True\nhas(tiger, keys) = True\n\nquestion = remove_piece(tiger, doctorfish)\n"}, {"idx": 71, "response": "energetic_friends(mosquito) = 6\nnon_energetic_friends(mosquito) = 4\nfriends(mosquito) = 10\nfriends(mosquito) < 4 = False\nnot learn(mosquito, elementary_resource_management, koala) = rule3()\nnot learn(mosquito, elementary_resource_management, koala) == False\nnot learn(mosquito, elementary_resource_management, koala) == False\noffer_job_position(mosquito, donkey) = rule1()\noffer_job_position(mosquito, donkey) == not offer_job_position(mosquito, donkey)\noffer_job_position(mosquito, donkey) == not offer_job_position(mosquito, donkey) == False\nquestion = False", "answer": -1, "code": "rule1() = attack(catfish, green_fields, mosquito) & learn(jellyfish, basics_of_resource_management, mosquito) => not offer_job_position(mosquito, donkey)\nrule2(something) = not learn(something, elementary_resource_management, koala) => offer_job_position(something, donkey)\nrule3() = friends(mosquito) < 4 => not learn(mosquito, elementary_resource_management, koala)\nrule4() = has(jellyfish, something_to_sit_on) => eat_food(jellyfish, food_of(mosquito))\norder(rule1) > order(rule2) = True\n\nhas(jellyfish, flute) = True\nenergetic_friends(mosquito) = 6\nnon_energetic_friends(mosquito) = 4\nproceed(raven, spot_right_after(sea_bass)) = False\n\nquestion = offer_job_position(mosquito, donkey)\n"}, {"idx": 72, "response": "has(octopus, device_to_connect_to_internet) == True\noffer_job_position(octopus, sea_bass) = rule1()\noffer_job_position(octopus, sea_bass) == True\nfriends(octopus) > 4 == True\nnot offer_job_position(octopus, sea_bass) = rule4()\nnot offer_job_position(octopus, sea_bass) == False\nhas(octopus, leafy_green_vegetable) == False\nnot offer_job_position(octopus, sea_bass) = rule5()\nnot offer_job_position(octopus, sea_bass) == False\nkilled(octopus, mayor) == True\noffer_job_position(octopus, amberjack) = rule6()\noffer_job_position(octopus, amberjack) == True\noffer_job_position(octopus, hippopotamus) = rule7()\noffer_job_position(octopus, hippopotamus) == True\noffer_job_position(octopus, hippopotamus) == True\nquestion = True", "answer": 1, "code": "rule1() = has(octopus, device_to_connect_to_internet) => offer_job_position(octopus, sea_bass)\nrule2() = raise_flag_of_peace(something, whale) => roll_dice(elephant, cow)\nrule3(something) = offer_job_position(something, amberjack) & offer_job_position(something, sea_bass) => not offer_job_position(something, hippopotamus)\nrule4() = friends(octopus) > 4 => not offer_job_position(octopus, sea_bass)\nrule5() = has(octopus, leafy_green_vegetable) => not offer_job_position(octopus, sea_bass)\nrule6() = killed(octopus, mayor) => offer_job_position(octopus, amberjack)\nrule7() = roll_dice(something, cow) => offer_job_position(octopus, hippopotamus)\norder(rule4) > order(rule1) = True\norder(rule5) > order(rule1) = True\norder(rule7) > order(rule3) = True\n\nraise_flag_of_peace(carp, whale) = True\nkilled(octopus, mayor) = True\nhas(octopus, computer) = True\nhas(octopus, tablet) = True\n\nquestion = offer_job_position(octopus, hippopotamus)\n"}, {"idx": 73, "response": "name(snail, Beauty) == True\nname(amberjack, Buddy) == True\nfirst_letter_of(name(snail)) == first_letter_of(name(amberjack)) = True\nneeds_support(snail, lobster) = rule1()\nneeds_support(snail, lobster) == True\nfriends(snail) > 4 = rule2()\nfriends(snail) > 4 == True\nnot offer_job_position(snail, buffalo) = rule2()\noffer_job_position(snail, buffalo) == False\nnot offer_job_position(snail, buffalo) == False\nneeds_support(snail, lobster) == True\nnot burn_warehouse(snail, pig) = rule3()\nburn_warehouse(snail, pig) == False\nburn_warehouse(snail, pig) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(snail)) == first_letter_of(name(amberjack)) => needs_support(snail, lobster)\nrule2() = friends(snail) > 4 => not offer_job_position(snail, buffalo)\nrule3() = needs_support(something, lobster) & not offer_job_position(something, buffalo) => not burn_warehouse(pig)\nrule4() = has(snail, card) and color(card) in primary_colors => needs_support(snail, lobster)\n\nname(amberjack, Buddy) = True\nfriends(snail) = 6\nhas(snail, card) = True\ncolor(card, orange) = True\nname(snail, Beauty) = True\n\nquestion = burn_warehouse(snail, pig)\n"}, {"idx": 74, "response": "remove_piece(turtle, kudu) == True\nnot raise_flag_of_peace(kudu, squirrel) = rule5()\nnot raise_flag_of_peace(kudu, squirrel) == True\nnot raise_flag_of_peace(kudu, squirrel) == True\nknow(squirrel, defense_plan, kudu) = rule6()\nknow(squirrel, defense_plan, kudu) == False\nknow(squirrel, defense_plan, kudu) == False\nrespect(kudu, swordfish) = rule4()\nrespect(kudu, swordfish) == not know(squirrel, defense_plan, kudu)\nrespect(kudu, swordfish) == not know(squirrel, defense_plan, kudu) == not False\nrespect(kudu, swordfish) == not know(squirrel, defense_plan, kudu) == True\nrespect(kudu, swordfish) == True\nquestion = True", "answer": 1, "code": "rule1(something) = saw(something, eat, food_of(grizzly_bear)) => not know(something, defense_plan, kudu)\nrule2(something) = offer_job_position(something, parrot) & raise_flag_of_peace(something, squirrel) => respect(something, swordfish)\nrule3() = has(kudu, high_salary) => offer_job_position(kudu, parrot)\nrule4() = know(squirrel, defense_plan, kudu) => not respect(kudu, swordfish)\nrule5() = remove_piece(turtle, kudu) => not raise_flag_of_peace(kudu, squirrel)\nrule6() = steal_points(whale, 5, squirrel) => know(squirrel, defense_plan, kudu)\norder(rule4) > order(rule2) = True\norder(rule6) > order(rule1) = True\n\nfriends(kudu) = 6\ninvented(kudu, time_machine) = True\nremove_piece(turtle, kudu) = True\nsteal_points(whale, 5, squirrel) = False\n\nquestion = respect(kudu, swordfish)\n"}, {"idx": 75, "response": "has(cockroach, backpack) == True\nhas(cockroach, spinach) == False\nhas(cockroach, card) == True\ncolor(card, violet) == True\nnot show_cards(cockroach, all) = rule2()\nnot show_cards(cockroach, all) == True\nnot show_cards(cockroach, all) == True\nrespect(cockroach, canary) = rule4()\nrespect(cockroach, canary) == True\nrespect(cockroach, canary) == True\nburn_warehouse(cockroach, zander) = rule5()\nburn_warehouse(cockroach, zander) == True\nburn_warehouse(cockroach, zander) == True\nquestion = True", "answer": 1, "code": "rule1() = show_cards(kiwi, all) => not respect(cockroach, canary)\nrule2() = has(cockroach, card) and color(card) in flag_colors(Belgium) => not show_cards(cockroach, all)\nrule3() = has(cockroach, backpack) and has(cockroach, apples) and has(cockroach, oranges) => not show_cards(cockroach, all)\nrule4() = has(cockroach, sharp_object) => respect(cockroach, canary)\nrule5() = not show_cards(something, all) & respect(something, canary) => burn_warehouse(something, zander)\nrule6() = has(snail, card) and starts_with(color(card), \"w\") => points(snail) == points(rabbit)\nrule7() = first_letter_of(name(cockroach)) == first_letter_of(name(eagle)) => respect(cockroach, canary)\norder(rule1) > order(rule4) = True\norder(rule1) > order(rule7) = True\n\nhas(cockroach, backpack) = True\nhas(cockroach, spinach) = True\nhas(cockroach, card) = True\ncolor(card, violet) = True\nname(cockroach, Blossom) = True\nname(eagle, Buddy) = True\nhas(snail, card) = True\ncolor(card, white) = True\n\nquestion = burn_warehouse(cockroach, zander)\n"}, {"idx": 76, "response": "has(octopus, card) == True\ncolor(card, violet) == True\ncolor(card) in rainbow_colors == True\nnot steal(octopus, 5, points, bat) = rule2()\nnot steal(octopus, 5, points, bat) == True\nhas(cheetah, device_to_connect_to_internet) == True\nsteal(cheetah, 5, points, bat) = rule3()\nsteal(cheetah, 5, points, bat) == True\nfriends(cheetah) = 14\nsteal(cheetah, 5, points, bat) = rule4()\nsteal(cheetah, 5, points, bat) == True\nadd_conclusion(\"the bat is not going to roll the dice for the leopard\") = rule1()\nadd_conclusion(\"the bat is not going to roll the dice for the leopard\") == True\nquestion = True", "answer": 1, "code": "rule1() = not steal(octopus, 5, points, bat) & steal(cheetah, 5, points, bat) => add_conclusion(\"the bat is not going to roll the dice for the leopard\")\nrule2() = has(octopus, card) and color(card) in rainbow_colors => not steal(octopus, 5, points, bat)\nrule3() = has(cheetah, device_to_connect_to_internet) => steal(cheetah, 5, points, bat)\nrule4() = friends(cheetah) > 8 => steal(cheetah, 5, points, bat)\n\nneeds_support(catfish, oscar) = True\nhas(cheetah, cappuccino) = True\nfriends(cheetah) = 14\nhas(octopus, card) = True\ncolor(card, violet) = True\n\nquestion = \"the bat is not going to roll the dice for the leopard\" in conclusions\n"}, {"idx": 77, "response": "has(dog, violin) == True\nrespects(dog, raven) = rule4()\nrespects(dog, raven) == True\nnot knows(sheep, defense_plan, raven) = rule3()\nnot knows(sheep, defense_plan, raven) == True\nprepare_armor(raven, eagle) = rule3()\nprepare_armor(raven, eagle) == True\nquestion = True", "answer": 1, "code": "rule1() = has(sheep, card) and color(card) in rainbow_colors => knows(sheep, defense_plan, raven)\nrule2() = rolls_dice(something, doctorfish) => not knows(sheep, defense_plan, raven)\nrule3() = respects(dog, raven) & not knows(sheep, defense_plan, raven) => prepare_armor(raven, eagle)\nrule4() = has(dog, musical_instrument) => respects(dog, raven)\norder(rule2) > order(rule1) = True\n\nhas(dog, violin) = True\nrolls_dice(cow, doctorfish) = False\nsteal_points(dog, 5, hippopotamus) = False\n\nquestion = prepare_armor(raven, eagle)\n"}, {"idx": 78, "response": "question = unknown", "answer": 0, "code": "rule1() = steal_points(something, 5, panda_bear) => become_enemy(leopard, sea_bass)\nrule2() = not learn(turtle, elementary_resource_management, leopard) => wink(leopard, spider)\nrule3(something) = become_enemy(something, dog) => steal_points(something, 5, panda_bear)\n\nbecome_enemy(crocodile, dog) = True\nnot learn(turtle, elementary_resource_management, leopard) = True\n\nquestion = become_enemy(leopard, sea_bass)\n"}, {"idx": 79, "response": "become_enemy(sea_bass, viperfish) == True\nraise_flag_of_peace(sea_bass, hare) == True\nburns_warehouse(sea_bass, kudu) = rule2(sea_bass)\nburns_warehouse(sea_bass, kudu) == True\nnot eat(kudu, food_of(cow)) = rule1()\neat(kudu, food_of(cow)) == False\nquestion = False", "answer": -1, "code": "rule1() = burns_warehouse(sea_bass, kudu) => not eat(kudu, food_of(cow))\nrule2(something) = become_enemy(something, viperfish) & raise_flag_of_peace(something, hare) => burns_warehouse(something, kudu)\n\nbecome_enemy(sea_bass, viperfish) = True\nraise_flag_of_peace(sea_bass, hare) = True\n\nquestion = eat(kudu, food_of(cow))\n"}, {"idx": 80, "response": "name(panda_bear, Lily) == True\nname(cat, Peddi) == True\nfirst_letter_of(name(panda_bear)) == first_letter_of(name(cat)) = True\nnot proceed_to_spot(panda_bear, spot_after(koala)) = rule2()\nnot proceed_to_spot(panda_bear, spot_after(koala)) == True\nnot eat_food(starfish, food_of(octopus)) == True\nnot roll_dice(dog, octopus) == True\nadd_conclusion(\"the octopus prepares armor for the polar bear\") = rule3()\nadd_conclusion(\"the octopus prepares armor for the polar bear\") == True\neat_food(koala, food_of(squid)) = rule1()\neat_food(koala, food_of(squid)) == True\nquestion = True", "answer": 1, "code": "rule1() = not proceed_to_spot(panda_bear, spot_after(koala)) => eat_food(koala, food_of(squid))\nrule2() = first_letter_of(name(panda_bear)) == first_letter_of(name(cat)) => not proceed_to_spot(panda_bear, spot_after(koala))\nrule3() = not eat_food(starfish, food_of(octopus)) & not roll_dice(dog, octopus) => add_conclusion(\"the octopus prepares armor for the polar bear\")\n\nname(cat, Peddi) = True\nroll_dice(dog, octopus) = True\nname(panda_bear, Lily) = True\nreduce_work_hours(panda_bear) = True\nnot eat_food(starfish, food_of(octopus)) = True\n\nquestion = eat_food(koala, food_of(squid))\n"}, {"idx": 81, "response": "owns(squid, luxury_aircraft) == True\nneeds_support(squid, bat) = rule1()\nneeds_support(squid, bat) == True\ngive(turtle, magnifying_glass, bat) == True\nneeds_support(squid, bat) == True\nnot sing_song_of_victory(bat, parrot) = rule6()\nsing_song_of_victory(bat, parrot) == False\nsing_song_of_victory(bat, parrot) == False\nquestion = False", "answer": -1, "code": "rule1() = owns(squid, luxury_aircraft) => needs_support(squid, bat)\nrule2() = friends(squid) > 14 => needs_support(squid, bat)\nrule3() = first_letter_of(name(bat)) == first_letter_of(name(jellyfish)) => prepares_armor(bat, starfish)\nrule4() = not show_cards(eel, bat) => raise_flag_of_peace(bat, moose)\nrule5() = has(bat, card) and color(card) in flag_colors(Belgium) => prepares_armor(bat, starfish)\nrule6() = give(turtle, magnifying_glass, bat) & needs_support(squid, bat) => not sing_song_of_victory(bat, parrot)\nrule7(something) = raise_flag_of_peace(something, moose) & prepares_armor(something, starfish) => sing_song_of_victory(something, parrot)\norder(rule6) > order(rule7) = True\n\nhas(bat, card) = True\ncolor(card, white) = True\nstruggles_to_find_food(bat) = True\nname(bat, Bella) = True\nname(jellyfish, Blossom) = True\nbald_friends(squid) = 3\nnon_bald_friends(squid) = 6\nowns(squid, luxury_aircraft) = True\nshow_cards(eel, bat) = False\n\nquestion = sing_song_of_victory(bat, parrot)\n"}, {"idx": 82, "response": "friends(kangaroo) = 17\nfriends(kangaroo) > 10 = True\nshow_all_cards(kangaroo, mosquito) = rule1()\nshow_all_cards(kangaroo, mosquito) == True\nremove_piece(doctorfish, kangaroo) = rule2()\nremove_piece(doctorfish, kangaroo) == True\nnot show_all_cards(kangaroo, mosquito) = rule2()\nnot show_all_cards(kangaroo, mosquito) == False\nnot show_all_cards(kangaroo, mosquito) == False\nremove_piece(kangaroo, panther) = question\nremove_piece(kangaroo, panther) = unknown", "answer": 0, "code": "rule1() = friends(kangaroo) > 10 => show_all_cards(kangaroo, mosquito)\nrule2() = remove_piece(doctorfish, kangaroo) => not show_all_cards(kangaroo, mosquito)\nrule3(something) = show_all_cards(something, mosquito) & wink(something, parrot) => not remove_piece(something, panther)\nrule4() = owe(canary, money, kangaroo) => wink(kangaroo, parrot)\norder(rule2) > order(rule1) = True\n\nowe(canary, money, kangaroo) = True\nburn(hippopotamus, warehouse, goldfish) = True\nfriends(kangaroo) = 17\n\nquestion = remove_piece(kangaroo, panther)\n"}, {"idx": 83, "response": "owes(hippopotamus, money, lobster) == True\neel_rolls_dice_for(elephant) = rule2()\neel_rolls_dice_for(elephant) == True\nnot eel_rolls_dice_for(elephant) = rule4()\nnot eel_rolls_dice_for(elephant) == False\neats_food(octopus, food_of(polar_bear)) = True\nsing_song_of_victory(meerkat, elephant) = rule3()\nsing_song_of_victory(meerkat, elephant) == True\nnot sing_song_of_victory(meerkat, elephant) == False\nadd_conclusion(\"the elephant learns elementary resource management from the swordfish\") = rule1()\nadd_conclusion(\"the elephant learns elementary resource management from the swordfish\") == True\nquestion = True", "answer": 1, "code": "rule1() = belief(eel_rolls_dice_for(elephant)) & not sing_song_of_victory(meerkat, elephant) => add_conclusion(\"the elephant learns elementary resource management from the swordfish\")\nrule2() = owes(something, money, lobster) => eel_rolls_dice_for(elephant)\nrule3() = eats_food(something, food_of(polar_bear)) => sing_song_of_victory(meerkat, elephant)\nrule4() = first_letter_of(name(eel)) == first_letter_of(name(panda_bear)) => not eel_rolls_dice_for(elephant)\norder(rule4) > order(rule2) = True\n\nowes(hippopotamus, money, lobster) = True\neats_food(octopus, food_of(polar_bear)) = True\nname(panda_bear, Lucy) = True\nnot eats_food(canary, food_of(meerkat)) = True\n\nquestion = \"the elephant learns elementary resource management from the swordfish\" in conclusions\n"}, {"idx": 84, "response": "has(moose, tablet) == False\nhas(moose, drink) == False\nfriends(moose) = 14\nattack(moose, green_fields, octopus) = rule2()\nattack(moose, green_fields, octopus) == True\nburn_warehouse(moose, ferret) = rule4()\nburn_warehouse(moose, ferret) == True\nquestion = True", "answer": 1, "code": "rule1() = owes(something, money, amberjack) => not burn_warehouse(moose, ferret)\nrule2() = friends(moose) > 8 => attack(moose, green_fields, octopus)\nrule3() = has(moose, drink) => attack(moose, green_fields, octopus)\nrule4() = attack(something, green_fields, octopus) => burn_warehouse(something, ferret)\norder(rule1) > order(rule4) = True\n\nhas(moose, tablet) = True\nfriends(moose) = 14\n\nquestion = burn_warehouse(moose, ferret)\n"}, {"idx": 85, "response": "name(penguin, Tarzan) == True\nname(rabbit, Max) == True\nfirst_letter_of(name(rabbit)) == first_letter_of(name(penguin)) == True\nattack(rabbit, green_fields, bat) = rule1()\nattack(rabbit, green_fields, bat) == True\neat_food(kiwi, food_of(bat)) = True\nattack(rabbit, green_fields, bat) == True\nsing_victory_song(bat, jellyfish) = rule2()\nsing_victory_song(bat, jellyfish) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(rabbit)) == first_letter_of(name(penguin)) => attack(rabbit, green_fields, bat)\nrule2() = attack(rabbit, green_fields, bat) & eat_food(kiwi, food_of(bat)) => sing_victory_song(bat, jellyfish)\nrule3(something) = burn_warehouse(something, warehouse_of(doctorfish)) & eat_food(something, food_of(tiger)) => not sing_victory_song(something, jellyfish)\nrule4() = has(bat, musical_instrument) => burn_warehouse(bat, warehouse_of(doctorfish))\nrule5() = supports(rabbit, Chris_Ronaldo) => attack(rabbit, green_fields, bat)\nrule6(something) = knock_down(something, fortress_of(buffalo)) => eat_food(something, food_of(tiger))\nrule7() = friends(bat) > 6 => burn_warehouse(bat, warehouse_of(doctorfish))\norder(rule2) > order(rule3) = True\n\nhas(bat, green_tea) = True\nfriends(bat) = 11\nknock_down(bat, fortress_of(buffalo)) = True\nname(penguin, Tarzan) = True\nname(rabbit, Max) = True\nsupports(rabbit, Chris_Ronaldo) = True\n\nquestion = sing_victory_song(bat, jellyfish)\n"}, {"idx": 86, "response": "friends(leopard) = 1\nfriends(leopard) < 2 = True\nnot respect(leopard, donkey) = rule1()\nnot respect(leopard, donkey) == True\nowe(leopard, money, sea_bass) = True\nrespect(leopard, donkey) = rule5()\nrespect(leopard, donkey) == True\nnot owe(leopard, money, oscar) = True\nshow_cards(leopard, puffin) = rule4()\nshow_cards(leopard, puffin) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(leopard) < 2 => not respect(leopard, donkey)\nrule2() = first_letter_of(name(leopard)) == first_letter_of(name(catfish)) => not owe(leopard, money, oscar)\nrule3() = raise_flag_of_peace(something, parrot) => not show_cards(leopard, puffin)\nrule4() = respect(something, donkey) & not owe(something, money, oscar) => show_cards(something, puffin)\nrule5() = owe(something, money, sea_bass) => respect(something, donkey)\nrule6() = has(leopard, sharp_object) => not respect(leopard, donkey)\norder(rule1) > order(rule5) = True\norder(rule4) > order(rule3) = True\norder(rule6) > order(rule5) = True\n\nname(catfish, Luna) = True\nfriends(leopard) = 1\nname(leopard, Lucy) = True\nowe(leopard, money, sea_bass) = True\n\nquestion = show_cards(leopard, puffin)\n"}, {"idx": 87, "response": "needs_support(carp, bat) == True\nrespect(zander, kudu) = rule6()\nrespect(zander, kudu) == False\nnot respect(zander, kudu) == True\nroll_dice(leopard, zander) == True\nnot sing_victory_song(zander, jellyfish) = rule4()\nsing_victory_song(zander, jellyfish) == False\nnot sing_victory_song(zander, jellyfish) == True\nraise_flag_of_peace(zander, blobfish) = rule2()\nraise_flag_of_peace(zander, blobfish) == True\nquestion = True", "answer": 1, "code": "rule1(something) = offer_job_position(something, lobster) => respect(something, zander)\nrule2(something) = sing_victory_song(something, jellyfish) & not respect(something, kudu) => raise_flag_of_peace(something, blobfish)\nrule3() = first_letter_of(name(phoenix)) == first_letter_of(name(panda_bear)) => not know(phoenix, defense_plan, zander)\nrule4() = roll_dice(leopard, zander) => not sing_victory_song(zander, jellyfish)\nrule5() = has(zander, device_to_connect_to_internet) => sing_victory_song(zander, jellyfish)\nrule6() = needs_support(something, bat) => not respect(zander, kudu)\nrule7() = proceed(mosquito, spot_after(leopard)) => not respect(leopard, zander)\norder(rule1) > order(rule7) = True\norder(rule5) > order(rule4) = True\n\nneeds_support(carp, bat) = True\nroll_dice(leopard, zander) = True\nproceed(mosquito, spot_after(leopard)) = True\nname(panda_bear, Lola) = True\nname(phoenix, Lily) = True\nhas(zander, cell_phone) = True\n\nquestion = raise_flag_of_peace(zander, blobfish)\n"}, {"idx": 88, "response": "remove(carp, piece, cow) == True\nknock_down_fortress(swordfish, cow) == True\nnot attack(cow, green_fields, crocodile) = rule4()\nnot attack(cow, green_fields, crocodile) == True\nnot attack(cow, green_fields, crocodile) == True\nnot knock_down_fortress(cow, hare) = rule3(cow)\nnot knock_down_fortress(cow, hare) == True\nnot knock_down_fortress(cow, hare) == True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(halibut, cow) => not raise_flag_of_peace(cow, raven)\nrule2() = friends(cow) > 2 => raise_flag_of_peace(cow, raven)\nrule3(something) = not attack(something, green_fields, crocodile) & raise_flag_of_peace(something, raven) => not knock_down_fortress(cow, hare)\nrule4() = remove(carp, piece, cow) & knock_down_fortress(swordfish, cow) => not attack(cow, green_fields, crocodile)\nrule5() = burn_warehouse(something, oscar) => attack(cow, green_fields, crocodile)\norder(rule1) > order(rule2) = True\norder(rule5) > order(rule4) = True\n\nremove(carp, piece, cow) = True\nfriends(cow) = 4\nknock_down_fortress(swordfish, cow) = True\n\nquestion = knock_down_fortress(cow, hare)\n"}, {"idx": 89, "response": "has(elephant, computer) == False\nhas(elephant, knife) == False\nhas(elephant, sharp_object) == False\nneeds_support(elephant, kudu) = rule2()\nneeds_support(elephant, kudu) == True\nknocks_down_fortress(whale, kudu) = rule3()\nknocks_down_fortress(whale, kudu) == False\nadd_conclusion(kudu, \"the kudu is not going to proceed to the spot that is right after the spot of the penguin\") == False\nhas(whale, card) == True\ncolor(card, yellow) == True\nknocks_down_fortress(whale, kudu) == False\ngive(lion, magnifying_glass, kudu) == False\nproceed_to_spot(kudu, right_after_spot(penguin)) = rule5()\nproceed_to_spot(kudu, right_after_spot(penguin)) == False\nquestion = False", "answer": -1, "code": "rule1() = prepare_armor(kiwi, lion) => become_enemy(lion, kudu)\nrule2() = has(elephant, sharp_object) => needs_support(elephant, kudu)\nrule3() = needs_support(elephant, kudu) & knocks_down_fortress(whale, kudu) => add_conclusion(kudu, \"the kudu is not going to proceed to the spot that is right after the spot of the penguin\")\nrule4() = has(whale, card) and color(card) in primary_colors => knocks_down_fortress(whale, kudu)\nrule5() = give(lion, magnifying_glass, kudu) => proceed_to_spot(kudu, right_after_spot(penguin))\nrule6() = not sing_song_of_victory(jellyfish, elephant) => not needs_support(elephant, kudu)\nrule7() = has(elephant, device_to_connect_to_internet) => needs_support(elephant, kudu)\norder(rule2) > order(rule6) = True\norder(rule5) > order(rule3) = True\norder(rule7) > order(rule6) = True\n\nhas(elephant, computer) = True\nhas(elephant, knife) = True\nshow_all_cards(kiwi, lion) = True\nhas(lion, bench) = True\nhas(lion, card) = True\ncolor(card, green) = True\nhas(whale, card) = True\ncolor(card, yellow) = True\n\nquestion = proceed_to_spot(kudu, right_after_spot(penguin))\n"}, {"idx": 90, "response": "has(rabbit, card) == True\ncolor(card, green) == True\nstarts_with(color(card), \"r\") == False\nshow_cards(rabbit, all, moose) = rule2()\nshow_cards(rabbit, all, moose) == True\nnot show_cards(rabbit, all, moose) == False\noffer_job_position(kudu, moose) = rule3()\noffer_job_position(kudu, moose) == False\nnot offer_job_position(kudu, moose) == True\nadd_conclusion(moose, \"the moose needs support from the goldfish\") = rule3()\nadd_conclusion(moose, \"the moose needs support from the goldfish\") == True\nhas_conclusion(moose, \"the moose needs support from the goldfish\") == True\nquestion = True", "answer": 1, "code": "rule1() = attacks(something, green_fields, owner(cheetah)) & not sing_victory_song(something, eel) => not offer_job_position(something, moose)\nrule2() = has(rabbit, card) & starts_with(color(card), \"r\") => show_cards(rabbit, all, moose)\nrule3() = not offer_job_position(kudu, moose) & show_cards(rabbit, all, moose) => add_conclusion(moose, \"the moose needs support from the goldfish\")\nrule4() = friends(rabbit) < 12 => not show_cards(rabbit, all, moose)\nrule5() = killed(rabbit, mayor) => show_cards(rabbit, all, moose)\norder(rule2) > order(rule4) = True\norder(rule5) > order(rule4) = True\n\nattacks(kudu, green_fields, owner(cheetah)) = True\nhas(kudu, spinach) = True\nnot sing_victory_song(kudu, eel) = True\nholds(kudu, keys) = True\nname(panda_bear, Pablo) = True\nkilled(rabbit, mayor) = True\nname(rabbit, Charlie) = True\nhas(rabbit, card) = True\ncolor(card, green) = True\nfriends(rabbit) = 6\n\nquestion = has_conclusion(moose, \"the moose needs support from the goldfish\")\n"}, {"idx": 91, "response": "has(starfish, flute) == True\nhas(starfish, high_salary) == False\nnot need_support(starfish, grasshopper) = rule1()\nnot need_support(starfish, grasshopper) == True\nknows(rabbit, defense_plan, starfish) == False\nnot offer_job_position(starfish, caterpillar) = rule3()\noffer_job_position(starfish, caterpillar) == False\noffer_job_position(starfish, caterpillar) == False\nquestion = False", "answer": -1, "code": "rule1() = has(starfish, high_salary) => not need_support(starfish, grasshopper)\nrule2() = belief(panda_bear, attacks_green_fields(starfish)) & belief(mosquito, attacks_green_fields(starfish)) => add_conclusion(\"the starfish needs support from the grasshopper\")\nrule3() = knows(rabbit, defense_plan, starfish) => not offer_job_position(starfish, caterpillar)\nrule4() = has(starfish, device_to_connect_to_internet) => not need_support(starfish, grasshopper)\nrule5(something) = show_all_cards(something, hippopotamus) => knows(something, defensive_plans, starfish)\norder(rule1) > order(rule2) = True\norder(rule4) > order(rule2) = True\n\nattacks_green_fields(mosquito, starfish) = True\nattacks_green_fields(panda_bear, starfish) = True\nshow_all_cards(rabbit, hippopotamus) = True\nhas(starfish, flute) = True\nowe(rabbit, money, ferret) = False\n\nquestion = offer_job_position(starfish, caterpillar)\n"}, {"idx": 92, "response": "raise_flag_of_peace(viperfish, spider) = False\nnot eat_food(viperfish, food_of(carp)) = rule1()\nnot eat_food(viperfish, food_of(carp)) == True\nowe(carp, money, panda_bear) = rule1()\nowe(carp, money, panda_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = not eat_food(viperfish, food_of(carp)) => owe(carp, money, panda_bear)\nrule2(something) = raise_flag_of_peace(something, spider) => not eat_food(something, food_of(carp))\n\nraise_flag_of_peace(viperfish, spider) = False\n\nquestion = owe(carp, money, panda_bear)\n"}, {"idx": 93, "response": "give(zander, magnifier, sheep) == True\nneed_support(zander, meerkat) = rule1(zander)\nneed_support(zander, meerkat) == True\nburn_warehouse(zander, jellyfish) = rule2(zander)\nburn_warehouse(zander, jellyfish) == True\nquestion = True", "answer": 1, "code": "rule1(something) = give(something, magnifier, sheep) => need_support(something, meerkat)\nrule2(something) = need_support(something, meerkat) => burn_warehouse(something, jellyfish)\n\ngive(zander, magnifier, sheep) = True\n\nquestion = burn_warehouse(zander, jellyfish)\n"}, {"idx": 94, "response": "created(moose, time_machine) == True\nwink(moose, ferret) = rule1()\nwink(moose, ferret) == True\nwink(moose, ferret) == True\nknows(zander, defensive_plans, goldfish) = rule4()\nknows(zander, defensive_plans, goldfish) == False\nknows(zander, defensive_plans, goldfish) == False\nquestion = False", "answer": -1, "code": "rule1() = created(moose, time_machine) => wink(moose, ferret)\nrule2() = friends(moose) > 6 => wink(moose, ferret)\nrule3() = respects(cockroach, zander) => knows(zander, defensive_plans, goldfish)\nrule4() = wink(something, ferret) => not knows(zander, defensive_plans, goldfish)\norder(rule3) > order(rule4) = True\n\nfriends(moose) = 3\ncreated(moose, time_machine) = True\n\nquestion = knows(zander, defensive_plans, goldfish)\n"}, {"idx": 95, "response": "friends(hippopotamus) = 11\nrespect(hippopotamus, parrot) = rule3()\nrespect(hippopotamus, parrot) == True\nnot respect(hippopotamus, parrot) == False\nrespect(parrot, meerkat) = rule2()\nrespect(parrot, meerkat) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(something, salmon) => not respect(something, parrot)\nrule2() = not respect(hippopotamus, parrot) => respect(parrot, meerkat)\nrule3() = friends(hippopotamus) > 6 => respect(hippopotamus, parrot)\norder(rule1) > order(rule3) = True\n\nfriends(hippopotamus) = 11\n\nquestion = respect(parrot, meerkat)\n"}, {"idx": 96, "response": "proceed(cockroach, spot_after(salmon)) == True\nbecome_enemy(turtle, salmon) == True\ngive(salmon, magnifier, eel) = rule3()\ngive(salmon, magnifier, eel) == True\ngive(something, magnifier, eel) = rule1(salmon)\ngive(salmon, magnifier, eel) == True\nowe(salmon, money, koala) = rule1(salmon)\nowe(salmon, money, koala) == True\nquestion = True", "answer": 1, "code": "rule1(something) = give(something, magnifier, eel) & become_enemy(something, penguin) => owe(something, money, koala)\nrule2() = offer_job_position(something, squid) => not become_enemy(salmon, penguin)\nrule3() = proceed(cockroach, spot_after(salmon)) & become_enemy(turtle, salmon) => give(salmon, magnifier, eel)\nrule4() = created(salmon, time_machine) => become_enemy(salmon, penguin)\norder(rule2) > order(rule4) = True\n\nproceed(cockroach, spot_after(salmon)) = True\ncreated(salmon, time_machine) = True\nbecome_enemy(turtle, salmon) = True\n\nquestion = owe(salmon, money, koala)\n"}, {"idx": 97, "response": "needs_support(elephant, donkey) == True\nknocks_down_fortress(elephant, cat) = rule2()\nknocks_down_fortress(elephant, cat) == True\nbelief(elephant, knocks_down_fortress(cat)) == True\nknows(octopus, defense_plan, cat) == True\nadd_conclusion(\"the cat is not going to wink at the baboon\") = rule1()\nadd_conclusion(\"the cat is not going to wink at the baboon\") == True\nhas(octopus, sharp_object) == True\nknows(octopus, defense_plan, cat) == True\n\"the cat is not going to wink at the baboon\" in conclusions == True\nquestion = True", "answer": 1, "code": "rule1() = belief(elephant, knocks_down_fortress(cat)) & knows(octopus, defense_plan, cat) => add_conclusion(\"the cat is not going to wink at the baboon\")\nrule2(something) = needs_support(something, donkey) => knocks_down_fortress(something, cat)\nrule3() = has(octopus, sharp_object) => knows(octopus, defense_plan, cat)\n\nneeds_support(elephant, donkey) = True\nhas(octopus, cutter) = True\n\nquestion = \"the cat is not going to wink at the baboon\" in conclusions\n"}, {"idx": 98, "response": "has(catfish, bench) == False\nhas(catfish, leafy_green_vegetable) == False\nroll_dice(catfish, tiger) = rule1()\nroll_dice(catfish, tiger) == False\nhas(catfish, internet_device) == True\nnot roll_dice(catfish, tiger) = rule2()\nnot roll_dice(catfish, tiger) == True\nname(meerkat, Buddy) == True\nname(buffalo, Blossom) == True\nfirst_letter_of(name(meerkat)) == first_letter_of(name(buffalo)) == True\nlearn(meerkat, elementary_resource_management, tiger) = rule3()\nlearn(meerkat, elementary_resource_management, tiger) == True\nroll_dice(catfish, tiger) == False\nlearn(meerkat, basics_of_resource_management, tiger) == True\nadd_conclusion(\"the tiger attacks the green fields whose owner is the raven\") = rule4()\nadd_conclusion(\"the tiger attacks the green fields whose owner is the raven\") == True\nraise_flag_of_peace(something, penguin) == False\nnot learn(meerkat, basics_of_resource_management, tiger) = rule5()\nnot learn(meerkat, basics_of_resource_management, tiger) == False\nfriends(catfish) = wise_friends(catfish) + non_wise_friends(catfish) = 5 + 2 = 7\nfriends(catfish) > 15 == False\nnot roll_dice(catfish, tiger) = rule6()\nnot roll_dice(catfish, tiger) == True\nconclusions = [\"the tiger attacks the green fields whose owner is the raven\"]\nquestion = \"the tiger attacks the green fields whose owner is the raven\" in conclusions\nquestion = True", "answer": 1, "code": "rule1() = has(catfish, leafy_green_vegetable) => roll_dice(catfish, tiger)\nrule2() = has(catfish, internet_device) => not roll_dice(catfish, tiger)\nrule3() = first_letter_of(name(meerkat)) == first_letter_of(name(buffalo)) => learn(meerkat, elementary_resource_management, tiger)\nrule4() = roll_dice(catfish, tiger) & learn(meerkat, basics_of_resource_management, tiger) => add_conclusion(\"the tiger attacks the green fields whose owner is the raven\")\nrule5() = raise_flag_of_peace(something, penguin) => not learn(meerkat, basics_of_resource_management, tiger)\nrule6() = friends(catfish) > 15 => not roll_dice(catfish, tiger)\norder(rule2) > order(rule1) = True\norder(rule5) > order(rule3) = True\norder(rule6) > order(rule1) = True\n\nname(buffalo, Blossom) = True\nhas(catfish, bench) = True\nwise_friends(catfish) = 5\nnon_wise_friends(catfish) = 2\nname(meerkat, Buddy) = True\n\nquestion = \"the tiger attacks the green fields whose owner is the raven\" in conclusions\n"}, {"idx": 99, "response": "wink(eel, carp) == True\nraise_flag_of_peace(aardvark, carp) == True\nadd_conclusion(\"the carp eats the food of the tiger\") = rule1()\nadd_conclusion(\"the carp eats the food of the tiger\") == True\neats_food(carp, food_of(tiger)) = False\nlearn(tiger, basics_of_resource_management, squid) = rule2()\nlearn(tiger, basics_of_resource_management, squid) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(eel, carp) & raise_flag_of_peace(aardvark, carp) => add_conclusion(\"the carp eats the food of the tiger\")\nrule2() = eats_food(carp, food_of(tiger)) => learn(tiger, basics_of_resource_management, squid)\n\nraise_flag_of_peace(aardvark, carp) = True\nwink(eel, carp) = True\n\nquestion = learn(tiger, basics_of_resource_management, squid)\n"}, {"idx": 100, "response": "has(cheetah, computer) == True\nhas(cheetah, device_to_connect_to_internet) == False\nnot remove(cheetah, piece_of_bat) = rule1()\nnot remove(cheetah, piece_of_bat) == True\nnot remove(cheetah, piece_of_bat) == True\nfirst_letter_of(name(cheetah)) == first_letter_of(name(goldfish)) = True\nnot remove(cheetah, piece_of_bat) == True\nnot attack(green_fields, owner(tiger)) = rule3(cheetah)\nnot attack(green_fields, owner(tiger)) == True\nnot attack(green_fields, owner(tiger)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(cheetah, device_to_connect_to_internet) => not remove(cheetah, piece_of_bat)\nrule2() = first_letter_of(name(cheetah)) == first_letter_of(name(goldfish)) => not remove(cheetah, piece_of_bat)\nrule3(something) = not remove(something, piece_of_bat) => not attack(green_fields, owner(tiger))\n\nhas(cheetah, computer) = True\nname(cheetah, Luna) = True\nname(goldfish, Buddy) = True\n\nquestion = attack(green_fields, owner(tiger))\n"}, {"idx": 101, "response": "give(buffalo, magnifying_glass, snail) == True\nknock_down(fortress, sheep) == True\ngive(buffalo, magnifier, eel) = rule2()\ngive(buffalo, magnifier, eel) == False\nquestion = False", "answer": -1, "code": "rule1(something) = give(something, magnifying_glass, eel) => give(something, magnifier, canary)\nrule2() = give(something, magnifying_glass, snail) & not knock_down(fortress, sheep) => give(something, magnifier, eel)\n\ngive(buffalo, magnifying_glass, snail) = True\nknock_down(fortress, sheep) = True\n\nquestion = give(buffalo, magnifier, canary)\n"}, {"idx": 102, "response": "burns(jellyfish, warehouse, tilapia) == True\nrespect(gecko, dog) = rule3()\nrespect(gecko, dog) == True\nrespect(gecko, dog) == True\nsteal_points(dog, 5, carp) = rule4()\nsteal_points(dog, 5, carp) == True\nsteal_points(dog, 5, carp) == True\nquestion = True", "answer": 1, "code": "rule1(something) = learns(something, basics_of_resource_management, cow) => not prepare_armor(dog, swordfish)\nrule2(something) = not prepare_armor(something, swordfish) => not steal_points(something, 5, carp)\nrule3(something) = burns(something, warehouse, tilapia) => respect(gecko, dog)\nrule4() = respect(gecko, dog) => steal_points(dog, 5, carp)\norder(rule4) > order(rule2) = True\n\nhas(gecko, card) and color(card, white) = True\nhas(gecko, knife) = True\nburns(jellyfish, warehouse, tilapia) = True\nlearns(sheep, basics_of_resource_management, cow) = True\n\nquestion = steal_points(dog, 5, carp)\n"}, {"idx": 103, "response": "has(kudu, card) == True\ncolor(card) in colors_of_Belgium_flag == True\neats(kudu, food_of(dog)) = rule1()\neats(kudu, food_of(dog)) == True\nnot equal_points(dog, rabbit) = rule2()\nequal_points(dog, rabbit) == False\nquestion = False", "answer": -1, "code": "rule1() = has(kudu, card) and color(card) in colors_of_Belgium_flag => eats(kudu, food_of(dog))\nrule2() = eats(kudu, food_of(dog)) => not equal_points(dog, rabbit)\n\nhas(kudu, card) = True\ncolor(card, yellow) = True\nknows(kudu, defensive_plans, meerkat) = True\nnot proceed(kudu, spot_right_after(ferret)) = True\n\nquestion = equal_points(dog, rabbit)\n"}, {"idx": 104, "response": "has(buffalo, card) == True\ncolor(card, black) == True\nrolls_dice(buffalo, kangaroo) = rule3()\nrolls_dice(buffalo, kangaroo) == True\nsteals_points(buffalo, 5, oscar) = rule1()\nsteals_points(buffalo, 5, oscar) == True\nquestion = True", "answer": 1, "code": "rule1(something) = rolls_dice(something, kangaroo) => steals_points(something, 5, oscar)\nrule2(something) = not owe(something, money, hippopotamus) => not steals_points(something, 5, oscar)\nrule3() = has(buffalo, card) and color(card) in rainbow_colors => rolls_dice(buffalo, kangaroo)\norder(rule2) > order(rule1) = True\n\nhas(buffalo, card) = True\ncolor(card, black) = True\n\nquestion = steals_points(buffalo, 5, oscar)\n"}, {"idx": 105, "response": "give(tiger, magnifying_glass, bat) == True\nrolls_dice(amberjack, aardvark) = rule2()\nrolls_dice(amberjack, aardvark) == True\nknocks_down_fortress(amberjack, donkey) = rule1(amberjack)\nknocks_down_fortress(amberjack, donkey) == True\nquestion = True", "answer": 1, "code": "rule1(something) = rolls_dice(something, aardvark) => knocks_down_fortress(something, donkey)\nrule2() = give(something, magnifying_glass, bat) => rolls_dice(amberjack, aardvark)\n\ngive(tiger, magnifying_glass, bat) = True\n\nquestion = knocks_down_fortress(amberjack, donkey)\n"}, {"idx": 106, "response": "has(kudu, card) and color(card) in flag_of_france_colors = rule1()\nhas(kudu, card) == False\ncolor(card) in flag_of_france_colors == True\nnot prepare_armor(kudu, puffin) == True\n\nhas(kudu, sharp_object) == False\nnot prepare_armor(kudu, puffin) == True\n\nshow_cards(parrot, all_cards) == True\nprepare_armor(kudu, puffin) == True\nnot learn(puffin, basics_of_resource_management, buffalo) = rule3()\nlearn(puffin, basics_of_resource_management, buffalo) == False\n\nhas(kudu, something_to_carry_apples_and_oranges) == False\nprepare_armor(kudu, puffin) == True\n\nfriends(kudu) = 10\nprepare_armor(kudu, puffin) == True\n\neat_food(cheetah, food_of(wolverine)) == True\nshow_cards(parrot, all_cards) == True\n\nlearn(puffin, basics_of_resource_management, buffalo) = False\n\nquestion = False", "answer": -1, "code": "rule1() = has(kudu, card) and color(card) in flag_of_france_colors => not prepare_armor(kudu, puffin)\nrule2() = has(kudu, sharp_object) => not prepare_armor(kudu, puffin)\nrule3() = show_cards(parrot, all_cards) & prepare_armor(kudu, puffin) => not learn(puffin, basics_of_resource_management, buffalo)\nrule4() = has(kudu, something_to_carry_apples_and_oranges) => prepare_armor(kudu, puffin)\nrule5() = friends(kudu) > 14 => prepare_armor(kudu, puffin)\nrule6() = eat_food(something, food_of(wolverine)) => show_cards(parrot, all_cards)\n\norder(rule1) > order(rule4) = True\norder(rule1) > order(rule5) = True\norder(rule2) > order(rule4) = True\norder(rule2) > order(rule5) = True\n\neat_food(cheetah, food_of(wolverine)) = True\nfriends(kudu) = 10\nhas(kudu, basket) = True\nhas(kudu, saxophone) = True\nassassinate(parrot, mayor) = True\n\nquestion = learn(puffin, basics_of_resource_management, buffalo)\n"}, {"idx": 107, "response": "respect(kudu, hummingbird) == False\nlearn(kudu, elementary_resource_management, zander) = rule5()\nlearn(kudu, elementary_resource_management, zander) == True\nnot knock_down(spider, fortress, zander) = rule7()\nnot learn(kudu, elementary_resource_management, zander) == False\nnot knock_down(spider, fortress, zander) == False\nattack(zander, green_fields, meerkat) = rule4()\nattack(zander, green_fields, meerkat) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not respect(something, hummingbird) => not learn(something, basics_of_resource_management, zander)\nrule2() = has(pig, musical_instrument) => not learn(pig, basics_of_resource_management, buffalo)\nrule3() = has(pig, internet_device) => not learn(pig, elementary_resource_management, buffalo)\nrule4() = learn(something, basics_of_resource_management, buffalo) => attack(zander, green_fields, meerkat)\nrule5() = first_letter_of(name(kudu)) == first_letter_of(name(cricket)) => learn(kudu, elementary_resource_management, zander)\nrule6() = become_enemy(octopus, pig) => learn(pig, basics_of_resource_management, buffalo)\nrule7() = not knock_down(spider, fortress, zander) & not learn(kudu, elementary_resource_management, zander) => not attack(zander, green_fields, meerkat)\norder(rule2) > order(rule6) = True\norder(rule3) > order(rule6) = True\norder(rule4) > order(rule7) = True\norder(rule5) > order(rule1) = True\n\nname(cricket, Milo) = True\nowe(octopus, money, pig) = True\nhas(pig, arugula) = True\nrespect(kudu, hummingbird) = False\n\nquestion = attack(zander, green_fields, meerkat)\n"}, {"idx": 108, "response": "remove_piece(ferret, lion) == True\nremove_piece(something, lion) == True\nwink(baboon, squid) = rule2()\nwink(baboon, squid) == True\nwink(baboon, squid) == True\nknock_down(squid, fortress, leopard) = rule1()\nknock_down(squid, fortress, leopard) == True\nknock_down(squid, fortress, leopard) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(baboon, squid) => knock_down(squid, fortress, leopard)\nrule2() = remove_piece(something, lion) => wink(baboon, squid)\n\nremove_piece(ferret, lion) = True\n\nquestion = knock_down(squid, fortress, leopard)\n"}, {"idx": 109, "response": "has(moose, card) == True\ncolor(card, white) == True\nowes(moose, money, meerkat) = rule2()\nowes(moose, money, meerkat) == True\nowes(moose, money, meerkat) == True\nnot steal_points(sea_bass, 5, canary) = rule3()\nnot steal_points(sea_bass, 5, canary) == True\nnot steal_points(sea_bass, 5, canary) == True\nquestion = True", "answer": 1, "code": "rule1(something) = owes(something, money, whale) => steal_points(something, 5, canary)\nrule2() = has(moose, card) and color(card) in colors_of_Italy_flag => owes(moose, money, meerkat)\nrule3() = owes(something, money, meerkat) => not steal_points(sea_bass, 5, canary)\norder(rule1) > order(rule3) = True\n\nhas(moose, card) = True\ncolor(card, white) = True\n\nquestion = steal_points(sea_bass, 5, canary)\n"}, {"idx": 110, "response": "created(bat, time_machine) == True\nneeds_support(bat, octopus) = rule3()\nneeds_support(bat, octopus) == True\nraise_flag_of_peace(sun_bear, octopus) = rule4()\nraise_flag_of_peace(sun_bear, octopus) == True\npoints(octopus) == points(turtle) = rule4()\npoints(octopus) == points(turtle) == True\nquestion = True", "answer": 1, "code": "rule1() = roll_dice(something, panther) & not remove_piece(something, cat) => not raise_flag_of_peace(something, octopus)\nrule2() = knock_down(something, fortress, elephant) => raise_flag_of_peace(something, octopus)\nrule3() = created(bat, time_machine) => needs_support(bat, octopus)\nrule4() = raise_flag_of_peace(sun_bear, octopus) & needs_support(bat, octopus) => points(octopus) == points(turtle)\norder(rule2) > order(rule1) = True\n\ncreated(bat, time_machine) = True\nknows(sun_bear, defensive_plans, elephant) = True\noffer_job_position(sun_bear, cat) = True\n\nquestion = points(octopus) == points(turtle)\n"}, {"idx": 111, "response": "raise_flag_of_peace(bat, dog) == True\nknows(dog, defense_plan, octopus) = rule1()\nknows(dog, defense_plan, octopus) == True\nknows(dog, defense_plan, octopus) == True\nbecome_enemy(octopus, hippopotamus) = rule4()\nbecome_enemy(octopus, hippopotamus) == True\nbecome_enemy(octopus, hippopotamus) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(bat, dog) => knows(dog, defense_plan, octopus)\nrule2() = become_enemy(something, wolverine) => not become_enemy(octopus, hippopotamus)\nrule3(something) = burn_warehouse(something, meerkat) & not prepare_armor(something, leopard) => not knows(something, defense_plan, octopus)\nrule4() = knows(dog, defense_plan, octopus) => become_enemy(octopus, hippopotamus)\norder(rule2) > order(rule4) = True\norder(rule3) > order(rule1) = True\n\nraise_flag_of_peace(bat, dog) = True\nburn_warehouse(dog, meerkat) = True\n\nquestion = become_enemy(octopus, hippopotamus)\n"}, {"idx": 112, "response": "has(cat, card) and color(card, orange) == True\ngive(cat, magnifier, leopard) = rule1()\ngive(cat, magnifier, leopard) == False\npoints(carp) == points(leopard) = rule4()\npoints(carp) == points(leopard) == True\nnot learn(leopard, elementary_resource_management, doctorfish) = rule2()\nlearn(leopard, elementary_resource_management, doctorfish) == False\nnot learn(leopard, elementary_resource_management, doctorfish) == False\nremove(viperfish, piece, leopard) = rule3()\nremove(viperfish, piece, leopard) == False\nlearn(leopard, basics_of_resource_management, doctorfish) == False\nquestion = False", "answer": -1, "code": "rule1() = has(cat, card) and color(card) in rainbow_colors => give(cat, magnifier, leopard)\nrule2() = not give(cat, magnifier, leopard) & points(carp) == points(leopard) => not learn(leopard, elementary_resource_management, doctorfish)\nrule3() = remove(viperfish, piece, leopard) => learn(leopard, basics_of_resource_management, doctorfish)\nrule4() = has(carp, card) and color(card) in primary_colors => points(carp) == points(leopard)\nrule5() = not has(cat, keys) => not give(cat, magnifier, leopard)\norder(rule3) > order(rule2) = True\norder(rule5) > order(rule1) = True\n\nhas(carp, card) and color(card, red) = True\nhas(cat, card) and color(card, orange) = True\nhas(cat, arugula) = True\nnot has(cat, keys) = True\n\nquestion = learn(leopard, basics_of_resource_management, doctorfish)\n"}, {"idx": 113, "response": "has(donkey, card) == True\ncolor(card, black) == True\ncolor(card) in primary_colors == False\nhas(donkey, musical_instrument) == False\nhas(donkey, piano) == True\nhas(donkey, saxophone) == True\npoints(donkey) == points(kangaroo) = rule2()\npoints(donkey) == points(kangaroo) == True\npoints(donkey) == points(kangaroo) == True\nneeds_support(donkey, dog) = rule1()\nneeds_support(donkey, dog) == True\npoints(donkey) == points(kangaroo) == True\nneeds_support(donkey, dog) == True\noffer_job_position(donkey, cricket) = rule3()\noffer_job_position(donkey, cricket) == True\nquestion = True", "answer": 1, "code": "rule1() = has(donkey, musical_instrument) => needs_support(donkey, dog)\nrule2() = has(donkey, card) and color(card) in primary_colors => points(donkey) == points(kangaroo)\nrule3(something) = points(something) == points(kangaroo) and needs_support(something, dog) => offer_job_position(something, cricket)\nrule4() = has(donkey, sharp_object) => points(donkey) == points(kangaroo)\nrule5() = first_letter_of(name(donkey)) == first_letter_of(name(octopus)) => not needs_support(donkey, dog)\nrule6() = remove_piece(leopard, donkey) => not offer_job_position(donkey, cricket)\norder(rule3) > order(rule6) = True\norder(rule5) > order(rule1) = True\n\nhas(donkey, card) = True\ncolor(card, black) = True\nhas(donkey, piano) = True\nname(donkey, Luna) = True\nhas(donkey, saxophone) = True\n\nquestion = offer_job_position(donkey, cricket)\n"}, {"idx": 114, "response": "burns_warehouse(baboon, meerkat) == True\nknows(tilapia, defense_plan, zander) = rule3()\nknows(tilapia, defense_plan, zander) == True\nowe(zander, money, phoenix) = rule2()\nowe(zander, money, phoenix) == False\nowe(zander, money, phoenix) == False\nquestion = False", "answer": -1, "code": "rule1() = burns_warehouse(something, meerkat) => not owe(zander, money, bat)\nrule2() = knows(tilapia, defense_plan, zander) => not owe(zander, money, phoenix)\nrule3() = knocks_down(ferret, fortress, tilapia) & burns_warehouse(snail, warehouse_of(tilapia)) => knows(tilapia, defense_plan, zander)\nrule4() = shows_cards(puffin, all_cards) to zander => owe(zander, money, bat)\nrule5(something) = winks(something, panda_bear) => owe(something, money, cat)\nrule6(something) = owe(something, money, cat) & not owe(something, money, bat) => owe(something, money, phoenix)\norder(rule4) > order(rule1) = True\norder(rule6) > order(rule2) = True\n\nburns_warehouse(baboon, meerkat) = True\nknocks_down(ferret, fortress, tilapia) = True\nburns_warehouse(snail, warehouse_of(tilapia)) = True\nrolls_dice(squirrel, dog) = True\nwinks(zander, panda_bear) = True\n\nquestion = owe(zander, money, phoenix)\n"}, {"idx": 115, "response": "roll_dice(turtle, rabbit) = rule3()\nroll_dice(turtle, rabbit) == True\nroll_dice(turtle, rabbit) == True\nburn_warehouse(squid, turtle) = rule3()\nburn_warehouse(squid, turtle) == True\nburn_warehouse(squid, turtle) == True\nnot roll_dice(turtle, polar_bear) = rule2()\nnot roll_dice(turtle, polar_bear) == True\nnot roll_dice(turtle, polar_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = winks(something, crocodile) & eats_food(something, food_of(octopus)) => prepare_armor(something, turtle)\nrule2() = prepare_armor(eagle, turtle) & burn_warehouse(squid, turtle) => not roll_dice(turtle, polar_bear)\nrule3() = roll_dice(something, rabbit) => burn_warehouse(squid, turtle)\nrule4() = proceeds_to_spot(something, spot_after(spot_of(cow))) => not prepare_armor(something, turtle)\nrule5() = friends(squid) < 13 => not burn_warehouse(squid, turtle)\norder(rule3) > order(rule5) = True\norder(rule4) > order(rule1) = True\n\nroll_dice(dog, rabbit) = True\neats_food(eagle, food_of(octopus)) = True\nwinks(eagle, crocodile) = True\nwise_friends(squid) = 9\nnon_wise_friends(squid) = 1\n\nquestion = roll_dice(turtle, polar_bear)\n"}, {"idx": 116, "response": "burns_warehouse(tilapia, sea_bass) == True\nneeds_support(tilapia, ferret) == True\neat_food(tilapia, food_of(blobfish)) = rule5()\neat_food(tilapia, food_of(blobfish)) == True\nproceed(tilapia, spot_after(blobfish)) = rule2()\nproceed(tilapia, spot_after(blobfish)) == True\nknock_down_fortress(tilapia, wolverine) == True\nquestion = True", "answer": 1, "code": "rule1() = eat_food(something, food_of(panda_bear)) => not eat_food(tilapia, food_of(blobfish))\nrule2(something) = proceed(something, spot_after(blobfish)) => knock_down_fortress(something, wolverine)\nrule3() = has(ferret, card) and color(card) in colors_of(flag_of_Japan) => show_cards(ferret, tilapia)\nrule4() = has(cow, drink) => knows(cow, defensive_plans, tilapia)\nrule5(something) = needs_support(something, ferret) & burns_warehouse(something, sea_bass) => eat_food(something, food_of(blobfish))\norder(rule5) > order(rule1) = True\n\nhas(cow, cappuccino) = True\nhas(ferret, card) and color(card, red) = True\nburns_warehouse(tilapia, sea_bass) = True\nneeds_support(tilapia, ferret) = True\n\nquestion = knock_down_fortress(tilapia, wolverine)\n"}, {"idx": 117, "response": "become_enemy(buffalo, panda_bear) == True\nsupports(panda_bear, Chris_Ronaldo) == True\nfan(panda_bear, Chris_Ronaldo) == True\nlearns(panda_bear, basics_of_resource_management, bat) = rule3()\nlearns(panda_bear, basics_of_resource_management, bat) == True\nsteals(panda_bear, 5, panther) = rule2()\nsteals(panda_bear, 5, panther) == True\nlearns(panda_bear, basics_of_resource_management, bat) == True\nneed_support(panda_bear, elephant) = rule1()\nneed_support(panda_bear, elephant) == True\nquestion = True", "answer": 1, "code": "rule1(something) = steals(something, 5, panther) & learns(something, basics_of_resource_management, bat) => need_support(something, elephant)\nrule2() = proceed(squid, spot_right_after, panda_bear) & not proceed(bat, spot_right_after, panda_bear) => add_conclusion(\"the panda bear steals five of the points of the panther\")\nrule3() = fan(panda_bear, Chris_Ronaldo) => learns(panda_bear, basics_of_resource_management, bat)\n\nbecome_enemy(buffalo, panda_bear) = True\nsupports(panda_bear, Chris_Ronaldo) = True\nproceed(squid, spot_right_after, panda_bear) = True\nnot proceed(bat, spot_right_after, panda_bear) = True\n\nquestion = need_support(panda_bear, elephant)\n"}, {"idx": 118, "response": "show_all_cards(whale, zander) == True\nnot know(zander, defense_plan, kudu) = rule3()\nnot know(zander, defense_plan, kudu) == True\nnot know(zander, defense_plan, kudu) == True\noffer_job_position(zander, kangaroo) = rule4()\noffer_job_position(zander, kangaroo) == True\nnot owe(zander, money, baboon) = rule1()\nowe(zander, money, baboon) == False\nowe(zander, money, baboon) == False\nquestion = False", "answer": -1, "code": "rule1(something) = offer_job_position(something, kangaroo) & not know(something, defense_plan, kudu) => not owe(something, money, baboon)\nrule2(something) = respect(something, wolverine) => not offer_job_position(something, kangaroo)\nrule3() = show_all_cards(whale, zander) => not know(zander, defense_plan, kudu)\nrule4(something) = needs_support(something, spider) => offer_job_position(something, kangaroo)\norder(rule4) > order(rule2) = True\n\nshow_all_cards(whale, zander) = True\nhas(zander, job, low_income) = True\nneeds_support(zander, spider) = True\nrespect(zander, wolverine) = True\nhas(zander, spinach) = True\n\nquestion = owe(zander, money, baboon)\n"}, {"idx": 119, "response": "name(gecko, Pashmak) == True\nname(tiger, Lily) == True\nfirst_letter_of(name(gecko)) == first_letter_of(name(tiger)) == True\nneeds_support(gecko, sun_bear) = rule2()\nneeds_support(gecko, sun_bear) == True\nworks_fewer_hours(eel) == True\nnot steal_points(eel, 5, sun_bear) = rule3()\nnot steal_points(eel, 5, sun_bear) == True\nnot steal_points(eel, 5, sun_bear) == True\noffer_job_position(sun_bear, canary) = rule1()\noffer_job_position(sun_bear, canary) == True\nquestion = True", "answer": 1, "code": "rule1() = needs_support(gecko, sun_bear) & not steal_points(eel, 5, sun_bear) => offer_job_position(sun_bear, canary)\nrule2() = first_letter_of(name(gecko)) == first_letter_of(name(tiger)) => needs_support(gecko, sun_bear)\nrule3() = works_fewer_hours(eel) => not steal_points(eel, 5, sun_bear)\nrule4() = has(eel, card) and color(card) in flag_of_france_colors => not steal_points(eel, 5, sun_bear)\n\nhas(eel, card) = True\ncolor(card, yellow) = True\nworks_fewer_hours(eel) = True\nname(gecko, Pashmak) = True\nname(tiger, Lily) = True\n\nquestion = offer_job_position(sun_bear, canary)\n"}, {"idx": 120, "response": "has(panda_bear, couch) == True\nhas(panda_bear, something_to_sit_on) == True\nnot knock_down(panda_bear, fortress, squid) = rule1()\nnot knock_down(panda_bear, fortress, squid) == True\nnot knock_down(panda_bear, fortress, squid) == True\nnot burn(kangaroo, warehouse, squid) = rule2()\nnot burn(kangaroo, warehouse, squid) == True\nnot burn(kangaroo, warehouse, squid) == True\nknows(squid, defensive_plans, meerkat) = rule2()\nknows(squid, defensive_plans, meerkat) == True\nknows(squid, defensive_plans, meerkat) == True\nquestion = True", "answer": 1, "code": "rule1() = has(panda_bear, something_to_sit_on) => not knock_down(panda_bear, fortress, squid)\nrule2() = not knock_down(panda_bear, fortress, squid) & not burn(kangaroo, warehouse, squid) => knows(squid, defensive_plans, meerkat)\nrule3() = friends(kangaroo) < 11 => not burn(kangaroo, warehouse, squid)\n\nname(blobfish, Lucy) = True\nfriends(kangaroo) = 4\nname(kangaroo, Lola) = True\nreduced_work_hours(kangaroo) = True\nhas(panda_bear, couch) = True\n\nquestion = knows(squid, defensive_plans, meerkat)\n"}, {"idx": 121, "response": "killed(lion, mayor) == True\nroll_dice(lion, hippopotamus) = rule1()\nroll_dice(lion, hippopotamus) == True\nfirst_letter_of(name(lion)) == first_letter_of(name(tilapia)) = rule2()\nfirst_letter_of(name(lion)) == first_letter_of(name(tilapia)) == False\nsing_victory_song(lion, polar_bear) = rule2()\nsing_victory_song(lion, polar_bear) == False\nremove_piece(eel, lion) = rule3()\nremove_piece(eel, lion) == False\nnot sing_victory_song(lion, polar_bear) == True\nsing_victory_song(lion, polar_bear) == False\nnot show_all_cards(lion, canary) = rule4()\nnot show_all_cards(lion, canary) == True\nshow_all_cards(lion, canary) == False\nquestion = False", "answer": -1, "code": "rule1() = killed(lion, mayor) => roll_dice(lion, hippopotamus)\nrule2() = first_letter_of(name(lion)) == first_letter_of(name(tilapia)) => sing_victory_song(lion, polar_bear)\nrule3() = remove_piece(eel, lion) => not sing_victory_song(lion, polar_bear)\nrule4(something) = sing_victory_song(something, polar_bear) & roll_dice(something, hippopotamus) => not show_all_cards(something, canary)\nrule5(something) = needs_support(something, parrot) => show_all_cards(something, canary)\norder(rule3) > order(rule2) = True\norder(rule5) > order(rule4) = True\n\nkilled(lion, mayor) = True\nname(lion, Meadow) = True\nname(tilapia, Mojo) = True\n\nquestion = show_all_cards(lion, canary)\n"}, {"idx": 122, "response": "name(black_bear, Tango) == True\nname(moose, Max) == True\nfirst_letter_of(name(moose)) == first_letter_of(name(black_bear)) == True\nproceed_to_spot_right_after(moose, eel) = rule2()\nproceed_to_spot_right_after(moose, eel) == True\nwink(moose, gecko) = rule6()\nwink(moose, gecko) == True\nwink(moose, gecko) == True\nquestion = True", "answer": 1, "code": "rule1() = attacks(whale, green_fields, moose) => respect(moose, tilapia)\nrule2() = first_letter_of(name(moose)) == first_letter_of(name(black_bear)) => proceed_to_spot_right_after(moose, eel)\nrule3(something) = offer_job_position(something, sea_bass) & not respect(something, tilapia) => not wink(something, gecko)\nrule4() = killed(moose, mayor) => not respect(moose, tilapia)\nrule5() = has(moose, card) and starts_with(color_of(card), \"w\") => proceed_to_spot_right_after(moose, eel)\nrule6(something) = proceed_to_spot_right_after(something, eel) => wink(something, gecko)\norder(rule1) > order(rule4) = True\norder(rule6) > order(rule3) = True\n\nname(black_bear, Tango) = True\nhas(moose, card) = True\ncolor_of(card, red) = True\nname(moose, Max) = True\noffer_job_position(whale, moose) = False\n\nquestion = wink(moose, gecko)\n"}, {"idx": 123, "response": "wink(cheetah, koala) == True\nwink(kiwi, koala) == True\nnot become_enemy(hummingbird, koala) == True\nnot show_cards(koala, cockroach) = rule1()\nnot show_cards(koala, cockroach) == True\nnot show_cards(koala, cockroach) == True\nnot give(koala, magnifying_glass, raven) = rule3()\nnot give(koala, magnifying_glass, raven) == True\nnot give(koala, magnifying_glass, raven) == True\nnot show_cards(koala, cockroach) == True\nnot give(koala, magnifying_glass, raven) == True\nattack(koala, green_fields, owner=viperfish) = rule2(koala)\nattack(koala, green_fields, owner=viperfish) == True\nquestion = True", "answer": 1, "code": "rule1() = not become_enemy(hummingbird, koala) & wink(cheetah, koala) => not show_cards(koala, cockroach)\nrule2(something) = not show_cards(something, cockroach) & not give(something, magnifying_glass, raven) => attack(koala, green_fields, owner=viperfish)\nrule3() = wink(kiwi, koala) => not give(koala, magnifying_glass, raven)\n\nwink(cheetah, koala) = True\nwink(kiwi, koala) = True\nproceed(wolverine, spot_right_after(koala)) = True\nbecome_enemy(hummingbird, koala) = False\n\nquestion = attack(koala, green_fields, owner=viperfish)\n"}, {"idx": 124, "response": "knock_down(moose, fortress, gecko) == False\nnot knock_down(moose, fortress, gecko) == True\nburn_warehouse(hummingbird) = rule1()\nburn_warehouse(hummingbird) == True\nnot know(hummingbird, defense_plan, catfish) = rule2()\nknow(hummingbird, defense_plan, catfish) == False\nquestion = False", "answer": -1, "code": "rule1(something) = not knock_down(something, fortress, gecko) => burn_warehouse(hummingbird)\nrule2() = burn_warehouse(something) => not know(something, defense_plan, catfish)\n\nknock_down(moose, fortress, gecko) = False\n\nquestion = know(moose, defense_plan, catfish)\n"}, {"idx": 125, "response": "has(goldfish, keys) == True\ncreated(goldfish, time_machine) = rule1()\ncreated(goldfish, time_machine) == True\nremove_piece(goldfish, doctorfish) == True\nwink(cow, doctorfish) = rule2()\nwink(cow, doctorfish) == True\nattack(doctorfish, green_fields(cheetah)) = rule2()\nattack(doctorfish, green_fields(cheetah)) == True\nbecome_enemy(doctorfish, kangaroo) = rule4()\nbecome_enemy(doctorfish, kangaroo) == True\nquestion = True", "answer": 1, "code": "rule1() = created(goldfish, time_machine) => remove_piece(goldfish, doctorfish)\nrule2() = wink(cow, doctorfish) => attack(doctorfish, green_fields(cheetah))\nrule3() = not remove_piece(goldfish, doctorfish) & show_cards(elephant, all_cards, doctorfish) => not become_enemy(doctorfish, kangaroo)\nrule4(something) = attack(something, green_fields(cheetah)) & offer_job_position(something, lion) => become_enemy(something, kangaroo)\nrule5() = has(doctorfish, card) & color(card) in rainbow_colors => not offer_job_position(doctorfish, lion)\nrule6() = raise_flag_of_peace(penguin, doctorfish) => offer_job_position(doctorfish, lion)\nrule7() = eat_food(something, food_of(blobfish)) => not remove_piece(goldfish, doctorfish)\norder(rule3) > order(rule4) = True\norder(rule5) > order(rule6) = True\norder(rule7) > order(rule1) = True\n\noffer_job_position(cow, doctorfish) = True\nhas(goldfish, keys) = True\nraise_flag_of_peace(penguin, doctorfish) = True\n\nquestion = become_enemy(doctorfish, kangaroo)\n"}, {"idx": 126, "response": "name(octopus, Peddi) == True\nname(jellyfish, Casper) == True\nfirst_letter_of(name(octopus)) == first_letter_of(name(jellyfish)) == True\nnot respect(octopus, sheep) = rule1()\nnot respect(octopus, sheep) == True\nnot respect(octopus, sheep) == True\neat_food(sheep, food_of(parrot)) = rule2()\neat_food(sheep, food_of(parrot)) == True\neat_food(sheep, food_of(parrot)) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(octopus)) == first_letter_of(name(jellyfish)) => not respect(octopus, sheep)\nrule2() = not respect(octopus, sheep) => eat_food(sheep, food_of(parrot))\nrule3() = has(octopus, card) and color(card) in rainbow_colors => not respect(octopus, sheep)\n\nname(jellyfish, Casper) = True\nhas(octopus, card) = True\ncolor(card, yellow) = True\nname(octopus, Peddi) = True\n\nquestion = eat_food(sheep, food_of(parrot))\n"}, {"idx": 127, "response": "has(puffin, spinach) == True\nhas(puffin, leafy_green_vegetable) == False\nremove_piece(puffin, viperfish) = rule3()\nremove_piece(puffin, viperfish) == False\nhas_high_salary(puffin) == False\nnot remove_piece(puffin, viperfish) = rule4()\nnot remove_piece(puffin, viperfish) == True\nproceed_to_spot(puffin, spot_after(oscar)) == True\nsteal_points(puffin, 5, spider) = rule2(puffin)\nsteal_points(puffin, 5, spider) == True\nlearn(puffin, basics_of_resource_management, aardvark) = rule1(puffin)\nlearn(puffin, basics_of_resource_management, aardvark) == not learn(puffin, basics_of_resource_management, aardvark)\nnot learn(puffin, basics_of_resource_management, aardvark) == True\nquestion = True", "answer": 1, "code": "rule1(something) = remove_piece(something, viperfish) & steal_points(something, 5, spider) => not learn(something, basics_of_resource_management, aardvark)\nrule2(something) = proceed_to_spot(something, spot_after(oscar)) => steal_points(something, 5, spider)\nrule3() = has(puffin, leafy_green_vegetable) => remove_piece(puffin, viperfish)\nrule4() = has_high_salary(puffin) => not remove_piece(puffin, viperfish)\norder(rule4) > order(rule3) = True\n\nhas(puffin, spinach) = True\nproceed_to_spot(puffin, spot_after(oscar)) = True\n\nquestion = learn(puffin, basics_of_resource_management, aardvark)\n"}, {"idx": 128, "response": "respect(carp, kangaroo) = False\nnot respect(carp, kangaroo) = True\nroll_dice(jellyfish, kangaroo) = False\nnot know(cockroach, defensive_plans, kangaroo) = True\nrespect(kangaroo, salmon) = rule3()\nrespect(kangaroo, salmon) == True\nnot respect(kangaroo, salmon) = False\npoints(kangaroo) == points(halibut) = rule4()\npoints(kangaroo) == points(halibut) == True\npoints(kangaroo) == points(halibut) == True\nquestion = True", "answer": 1, "code": "rule1() = not respect(carp, kangaroo) & roll_dice(jellyfish, kangaroo) => add_conclusion(\"the kangaroo is not going to respect the salmon\")\nrule2() = eat_food(something, food_of(sheep)) => remove_piece(parrot, octopus)\nrule3() = not know(cockroach, defensive_plans, kangaroo) => respect(kangaroo, salmon)\nrule4(something) = not respect(something, salmon) => points(something) == points(halibut)\norder(rule3) > order(rule1) = True\n\neat_food(kudu, food_of(sheep)) = True\nrespect(carp, kangaroo) = False\nroll_dice(jellyfish, kangaroo) = False\n\nquestion = points(kangaroo) == points(halibut)\n"}, {"idx": 129, "response": "created(snail, time_machine) == True\nnot raise_flag_of_peace(snail, cat) = rule2()\nnot raise_flag_of_peace(snail, cat) == False\nnot raise_flag_of_peace(snail, cat) == False\nfirst_letter_of(name(snail)) == first_letter_of(name(leopard)) = rule3()\nfirst_letter_of(name(snail)) == first_letter_of(name(leopard)) == True\nfirst_letter_of(name(snail)) == first_letter_of(name(leopard)) == True\nraise_flag_of_peace(snail, cat) == True\nhas(snail, something_to_sit_on) == True\nraise_flag_of_peace(snail, cat) == True\nburn_warehouse(gecko, warehouse_of(parrot)) = rule1()\nburn_warehouse(gecko, warehouse_of(parrot)) == True\nburn_warehouse(gecko, warehouse_of(parrot)) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(something, cat) => burn_warehouse(gecko, warehouse_of(parrot))\nrule2() = created(snail, time_machine) => not raise_flag_of_peace(snail, cat)\nrule3() = first_letter_of(name(snail)) == first_letter_of(name(leopard)) => raise_flag_of_peace(snail, cat)\nrule4() = has(snail, something_to_sit_on) => raise_flag_of_peace(snail, cat)\norder(rule3) > order(rule2) = True\norder(rule4) > order(rule2) = True\n\nname(leopard, Lucy) = True\nhas(snail, romaine_lettuce) = True\ncreated(snail, time_machine) = True\nname(snail, Lola) = True\n\nquestion = burn_warehouse(gecko, warehouse_of(parrot))\n"}, {"idx": 130, "response": "become_enemy(doctorfish, whale) == False\nnot become_enemy(doctorfish, whale) == True\nnot need_support(whale, ferret) = rule1()\nnot need_support(whale, ferret) == True\nname(whale, Milo) == True\nname(panda_bear, Lola) == True\nfirst_letter_of(name(whale)) == first_letter_of(name(panda_bear)) = True\nnot sing_song_of_victory(whale, dog) = rule2()\nnot sing_song_of_victory(whale, dog) == True\ntook(whale, bike, store) == True\nnot sing_song_of_victory(whale, dog) == True\nnot sing_song_of_victory(whale, dog) == True\nlearn(whale, elementary_resource_management_from(kudu)) = rule5()\nlearn(whale, elementary_resource_management_from(kudu)) == False\nlearn(whale, elementary_resource_management_from(kudu)) == False\nquestion = False", "answer": -1, "code": "rule1() = not become_enemy(doctorfish, whale) => not need_support(whale, ferret)\nrule2() = first_letter_of(name(whale)) == first_letter_of(name(panda_bear)) => not sing_song_of_victory(whale, dog)\nrule3() = took(whale, bike, store) => not sing_song_of_victory(whale, dog)\nrule4() = owes(something, money, squid) => need_support(whale, ferret)\nrule5() = need_support(something, ferret) & not sing_song_of_victory(something, dog) => not learn(something, elementary_resource_management_from(kudu))\norder(rule4) > order(rule1) = True\n\nname(panda_bear, Lola) = True\nowes(raven, money, squid) = True\nname(whale, Milo) = True\ntook(whale, bike, store) = True\nbecome_enemy(doctorfish, whale) = False\n\nquestion = learn(whale, elementary_resource_management_from(kudu))\n"}, {"idx": 131, "response": "has(donkey, love_seat_sofa) == True\nhas(donkey, something_to_sit_on) == True\nrespect(donkey, squirrel) = rule1()\nrespect(donkey, squirrel) == True\nfirst_letter_of(name(kangaroo)) == first_letter_of(name(catfish)) = True\nneeds_support(kangaroo, squirrel) = rule2()\nneeds_support(kangaroo, squirrel) == True\nbelief(donkey, owes_money, squirrel) = unknown\nbecome_enemy(squirrel, kiwi) = rule3()\nbecome_enemy(squirrel, kiwi) == unknown\nquestion = unknown", "answer": 0, "code": "rule1() = has(donkey, something_to_sit_on) => respect(donkey, squirrel)\nrule2() = first_letter_of(name(kangaroo)) == first_letter_of(name(catfish)) => needs_support(kangaroo, squirrel)\nrule3() = belief(donkey, owes_money, squirrel) & needs_support(kangaroo, squirrel) => become_enemy(squirrel, kiwi)\n\nname(catfish, Lola) = True\nhas(donkey, love_seat_sofa) = True\nfriends(donkey) = 5\nname(donkey, Meadow) = True\nname(kangaroo, Luna) = True\noffer_job_position(kangaroo, eel) = True\nwink(kangaroo, kudu) = True\nname(koala, Lucy) = True\n\nquestion = become_enemy(squirrel, kiwi)\n"}, {"idx": 132, "response": "lazy_friends(polar_bear) = 7\nnon_lazy_friends(polar_bear) = 3\nfriends(polar_bear) = 10\nhold_same_number_of_points(polar_bear, canary) = rule4()\nhold_same_number_of_points(polar_bear, canary) == False\nhold_same_number_of_points(polar_bear, canary) == False\nsteal_points(polar_bear, 5, rabbit) = rule5()\nsteal_points(polar_bear, 5, rabbit) == True\nsteal_points(polar_bear, 5, rabbit) == True\nquestion = True", "answer": 1, "code": "rule1() = fan(polar_bear, Chris_Ronaldo) => not hold_same_number_of_points(polar_bear, canary)\nrule2() = offer_job_position(something, hippopotamus) => hold_same_number_of_points(polar_bear, canary)\nrule3(something) = not wink(something, cow) => not steal_points(something, 5, rabbit)\nrule4() = friends(polar_bear) > 16 => not hold_same_number_of_points(polar_bear, canary)\nrule5(something) = hold_same_number_of_points(something, canary) => steal_points(something, 5, rabbit)\norder(rule1) > order(rule2) = True\norder(rule3) > order(rule5) = True\norder(rule4) > order(rule2) = True\n\noffer_job_position(mosquito, hippopotamus) = True\nlazy_friends(polar_bear) = 7\nnon_lazy_friends(polar_bear) = 3\n\nquestion = steal_points(polar_bear, 5, rabbit)\n"}, {"idx": 133, "response": "not burn(cat, warehouse(squid)) == True\nneeds_support(cat, swordfish) == True\nwink(cat, buffalo) = rule2(cat)\nwink(cat, buffalo) == True\nwink(cat, buffalo) == True\nknow(parrot, defensive_plans, blobfish) = rule1()\nknow(parrot, defensive_plans, blobfish) == not wink(cat, buffalo)\nknow(parrot, defensive_plans, blobfish) == not True\nknow(parrot, defensive_plans, blobfish) == False\nquestion = False", "answer": -1, "code": "rule1() = wink(something, buffalo) => not know(parrot, defensive_plans, blobfish)\nrule2(something) = not burn(something, warehouse(squid)) & needs_support(something, swordfish) => wink(something, buffalo)\n\nneeds_support(cat, swordfish) = True\nnot burn(cat, warehouse(squid)) = True\n\nquestion = know(parrot, defensive_plans, blobfish)\n"}, {"idx": 134, "response": "knocks_down(pig, fortress_of(kangaroo)) == True\nremove_from_board(pig, piece_of(buffalo)) == False\nrolls_dice_for(pig, carp) = rule3()\nrolls_dice_for(pig, carp) == True\nnot raise_flag_of_peace(doctorfish, carp) = rule2()\nraise_flag_of_peace(doctorfish, carp) == False\nnot raise_flag_of_peace(doctorfish, carp) == False\nbelief(pig, rolls_dice_for(carp)) = rule1()\nbelief(pig, rolls_dice_for(carp)) == True\nadd_conclusion(\"the carp needs the support of the baboon\") = rule1()\nadd_conclusion(\"the carp needs the support of the baboon\") == True\nquestion = True", "answer": 1, "code": "rule1() = belief(pig, rolls_dice_for(carp)) & not raise_flag_of_peace(doctorfish, carp) => add_conclusion(\"the carp needs the support of the baboon\")\nrule2() = proceed_to_spot(bat, spot_after(doctorfish)) => not raise_flag_of_peace(doctorfish, carp)\nrule3() = not remove_from_board(something, piece_of(buffalo)) & knocks_down(something, fortress_of(kangaroo)) => rolls_dice_for(something, carp)\n\nknocks_down(pig, fortress_of(kangaroo)) = True\nremove_from_board(pig, piece_of(buffalo)) = False\nproceed_to_spot(bat, spot_after(doctorfish)) = False\n\nquestion = \"the carp needs the support of the baboon\" in conclusions\n"}, {"idx": 135, "response": "owe(jellyfish, money, leopard) == True\nnot remove(panther, piece, eagle) == False\nnot give(eagle, magnifier, cheetah) = rule1()\nnot give(eagle, magnifier, cheetah) == False\nowe(jellyfish, money, cheetah) = rule2(jellyfish)\nowe(jellyfish, $$$, cheetah) == True\nnot give(eagle, magnifier, cheetah) == False\neat(cheetah, food, cockroach) = rule3()\neat(cheetah, food, cockroach) == True\nquestion = True", "answer": 1, "code": "rule1() = not remove(panther, piece, eagle) => not give(eagle, magnifier, cheetah)\nrule2(something) = owe(something, money, leopard) => owe(something, $$$, cheetah)\nrule3() = not give(eagle, magnifier, cheetah) & owe(jellyfish, money, cheetah) => eat(cheetah, food, cockroach)\n\nowe(jellyfish, money, leopard) = True\nbecome_enemy(eagle, hare) = False\nremove(panther, piece, eagle) = False\nremove(whale, piece, jellyfish) = False\n\nquestion = eat(cheetah, food, cockroach)\n"}, {"idx": 136, "response": "wise_friends(oscar) = 3\nfriends(oscar) = wise_friends(oscar) + unwise_friends(oscar) = 3 + 1 = 4\nhas(oscar, sharp_object) = False\nsupports(oscar, Chris_Ronaldo) = True\nknows(oscar, defensive_plans, gecko) = rule2()\nknows(oscar, defensive_plans, gecko) == True\nnot give(oscar, magnifying_glass, turtle) = rule3()\nnot give(oscar, magnifying_glass, turtle) == True\nknows(oscar, defensive_plans, gecko) == True\nnot eat(oscar, food_of(grizzly_bear)) = rule4(oscar)\nnot eat(oscar, food_of(grizzly_bear)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(oscar, sharp_object) => knows(oscar, defensive_plans, gecko)\nrule2() = supports(oscar, Chris_Ronaldo) => knows(oscar, defensive_plans, gecko)\nrule3() = friends(oscar) > 3 => not give(oscar, magnifying_glass, turtle)\nrule4(something) = knows(something, defensive_plans, gecko) & not give(something, magnifying_glass, turtle) => not eat(something, food_of(grizzly_bear))\n\nwise_friends(oscar) = 3\nunwise_friends(oscar) = 1\nhas(oscar, cappuccino) = True\nsupports(oscar, Chris_Ronaldo) = True\n\nquestion = eat(oscar, food_of(grizzly_bear))\n"}, {"idx": 137, "response": "burn_warehouse(zander, kudu) == False\nburn_warehouse(parrot, mosquito) = rule4()\nburn_warehouse(parrot, mosquito) == True\nquestion = True", "answer": 1, "code": "rule1(something) = knows(something, defense_plan, hummingbird) & sings_victory_song(something, canary) => not burn_warehouse(parrot, mosquito)\nrule2() = burn_warehouse(zander, kudu) => knows(kudu, defense_plan, bat)\nrule3() = becomes_enemy(something, octopus) => knows(parrot, defense_plan, hummingbird)\nrule4() = knows(something, defense_plan, bat) => burn_warehouse(parrot, mosquito)\norder(rule4) > order(rule1) = True\n\nbecomes_enemy(crocodile, octopus) = True\nbecomes_enemy(hippopotamus, kudu) = True\nattacks(phoenix, green_fields, kudu) = True\nburn_warehouse(zander, kudu) = False\n\nquestion = burn_warehouse(parrot, mosquito)\n"}, {"idx": 138, "response": "respects(salmon, tilapia) = True\nrespects(salmon, tilapia) = True\nroll_dice(salmon, cockroach) = rule1()\nroll_dice(salmon, cockroach) == True\nroll_dice(salmon, cockroach) == True\nrespects(zander, dog) = rule2()\nrespects(zander, dog) == True\nrespects(zander, dog) == True\nquestion = True", "answer": 1, "code": "rule1(something) = respects(something, tilapia) => roll_dice(something, cockroach)\nrule2() = roll_dice(something, cockroach) => respects(zander, dog)\nrule3() = steals(blobfish, 5, points, salmon) & points(lion) == points(salmon) => not roll_dice(salmon, cockroach)\norder(rule1) > order(rule3) = True\n\nsteals(blobfish, 5, points, salmon) = True\npoints(lion) == points(salmon) = True\nrespects(salmon, tilapia) = True\n\nquestion = respects(zander, dog)\n"}, {"idx": 139, "response": "owe(cow, money, panther) == False\nnot owe(cow, money, panther) == True\nnot become_enemy(panther, raven) = rule1()\nnot become_enemy(panther, raven) == True\npoints(raven) != points(carp) = rule2()\npoints(raven) != points(carp) == True\npoints(raven) != points(carp) == True\nquestion = True", "answer": 1, "code": "rule1() = not owe(cow, money, panther) => not become_enemy(panther, raven)\nrule2() = become_enemy(panther, raven) => points(raven) != points(carp)\nrule3() = has(panther, card) and color(card) in primary_colors => become_enemy(panther, raven)\nrule4() = friends(panther) < 2 => become_enemy(panther, raven)\norder(rule3) > order(rule1) = True\norder(rule4) > order(rule1) = True\n\nfriends(panther) = 8\nhas(panther, card) = True\ncolor(card, green) = True\nowe(cow, money, panther) = False\n\nquestion = points(raven) == points(carp)\n"}, {"idx": 140, "response": "prepares_armor(doctorfish, pig) == True\nknocks_down(doctorfish, fortress, pig) = rule1()\nknocks_down(doctorfish, fortress, pig) == True\nraise_flag_of_peace(pig, tilapia) = rule1()\nraise_flag_of_peace(pig, tilapia) == True\neats_food(canary, food, cat) == True\nattacks(canary, green_fields, owner(tilapia)) = rule3()\nattacks(canary, green_fields, owner(tilapia)) == True\nraise_flag_of_peace(pig, tilapia) == True\nlearn(tilapia, basics_of_resource_management, tiger) = rule3()\nlearn(tilapia, basics_of_resource_management, tiger) == True\nquestion = True", "answer": 1, "code": "rule1() = knocks_down(doctorfish, fortress, pig) => raise_flag_of_peace(pig, tilapia)\nrule2(something) = eats_food(something, food, cat) => attacks(something, green_fields, owner(tilapia))\nrule3() = raise_flag_of_peace(pig, tilapia) & attacks(canary, green_fields, owner(tilapia)) => learn(tilapia, basics_of_resource_management, tiger)\n\neats_food(canary, food, cat) = True\nprepares_armor(doctorfish, pig) = True\n\nquestion = learn(tilapia, basics_of_resource_management, tiger)\n"}, {"idx": 141, "response": "rolls_dice(lion, blobfish) == True\nnot remove(dog, piece) = rule3(lion)\nnot remove(dog, piece) == True\nnot remove(dog, piece) == True\nsteal_points(mosquito, 5) = rule1(lion)\nsteal_points(mosquito, 5) == True\nsteal_points(mosquito, 5) == True\nquestion = True", "answer": 1, "code": "rule1(something) = become_enemy(something, squid) & not remove(dog, piece) => steal_points(mosquito, 5)\nrule2(something) = learn(something, elementary_resource_management_from(puffin)) => remove(dog, piece)\nrule3(something) = rolls_dice(something, blobfish) => not remove(dog, piece)\nrule4() = not remove(oscar, piece, lion) & not raise_flag_of_peace(spider, lion) => become_enemy(lion, squid)\norder(rule3) > order(rule2) = True\n\nlearn(lion, basics_of_resource_management_from(puffin)) = True\nrolls_dice(lion, blobfish) = True\nnot remove(oscar, piece, lion) = True\nnot raise_flag_of_peace(spider, lion) = True\n\nquestion = steal_points(mosquito, 5)\n"}, {"idx": 142, "response": "has(jellyfish, card) == True\ncolor(card, indigo) == True\ncolor(card) in rainbow_colors == True\nnot sing(jellyfish, song_of_victory, canary) = rule4()\nnot sing(jellyfish, song_of_victory, canary) == True\nnot sing(jellyfish, song_of_victory, canary) == True\nnot offer_job_position(jellyfish, swordfish) = rule3()\nnot offer_job_position(jellyfish, swordfish) == True\nnot offer_job_position(jellyfish, swordfish) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(jellyfish)) == first_letter_of(name(squid)) => not sing(jellyfish, song_of_victory, canary)\nrule2() = has(jellyfish, device_to_connect_to_internet) => not give(jellyfish, magnifying_glass, halibut)\nrule3(something) = not give(something, magnifying_glass, halibut) & not sing(something, song_of_victory, canary) => not offer_job_position(something, swordfish)\nrule4() = has(jellyfish, card) and color(card) in rainbow_colors => not sing(jellyfish, song_of_victory, canary)\n\nhas(jellyfish, card) = True\ncolor(card, indigo) = True\nhas(jellyfish, cell_phone) = True\nname(jellyfish, Pashmak) = True\nname(squid, Lucy) = True\n\nquestion = offer_job_position(jellyfish, swordfish)\n"}, {"idx": 143, "response": "not remove(polar_bear, piece, lobster) == True\nremove(something, piece, lobster) = rule2()\nremove(sun_bear, piece, hummingbird) == False\nnot remove(sun_bear, piece, hummingbird) == True\nknock_down_fortress(sun_bear, sea_bass) = rule1()\nknock_down_fortress(sun_bear, sea_bass) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not remove(something, piece, hummingbird) => knock_down_fortress(something, sea_bass)\nrule2() = remove(something, piece, lobster) => not remove(sun_bear, piece, hummingbird)\n\nnot remove(polar_bear, piece, lobster) = True\n\nquestion = knock_down_fortress(sun_bear, sea_bass)\n"}, {"idx": 144, "response": "not remove(canary, leopard_piece) == True\nlearn(canary, elementary_resource_management, starfish) == True\nprepare_armor(canary, kudu) = rule2(canary)\nprepare_armor(canary, kudu) == True\nshow_cards(canary, all, lobster) = rule1(canary)\nshow_cards(canary, all, lobster) == True\nquestion = True", "answer": 1, "code": "rule1(something) = prepare_armor(something, kudu) => show_cards(something, all, lobster)\nrule2(something) = not remove(something, leopard_piece) & learn(something, elementary_resource_management, starfish) => prepare_armor(something, kudu)\n\nhas(canary, card) = True\ncolor(card, indigo) = True\nnot remove(canary, leopard_piece) = True\nlearn(canary, elementary_resource_management, starfish) = True\n\nquestion = show_cards(canary, all, lobster)\n"}, {"idx": 145, "response": "learn(kangaroo, elementary_resource_management, puffin) == False\nnot learn(kangaroo, elementary_resource_management, puffin) == True\nshow_cards(puffin, all, hippopotamus) = rule1()\nshow_cards(puffin, all, hippopotamus) == True\nnot burn(warehouse, blobfish) = rule4()\nnot burn(warehouse, blobfish) == True\nshow_cards(puffin, all, hippopotamus) == True\nnot show_cards(puffin, all, buffalo) = rule3()\nnot show_cards(puffin, all, buffalo) == True\nquestion = True", "answer": 1, "code": "rule1() = not learn(kangaroo, elementary_resource_management, puffin) => show_cards(puffin, all, hippopotamus)\nrule2() = steals(something, 5_points, cricket) => not show_cards(puffin, all, hippopotamus)\nrule3(something) = not burn(something, warehouse, blobfish) & show_cards(something, all, hippopotamus) => not show_cards(something, all, buffalo)\nrule4() = show_cards(something, all, hippopotamus) => not burn(warehouse, blobfish)\n\norder(rule1) > order(rule2) = True\n\nsteals(kangaroo, 5_points, cricket) = True\nshow_cards(panda_bear, all, hippopotamus) = True\nlearn(kangaroo, elementary_resource_management, puffin) = False\n\nquestion = show_cards(puffin, all, buffalo)\n"}, {"idx": 146, "response": "wise_friends(oscar) = 3\nfriends(oscar) = wise_friends(oscar) + non_wise_friends(oscar) = 3 + 1 = 4\nfriends(oscar) > 12 = False\nfirst_letter_of(name(oscar)) == first_letter_of(name(eel)) = first_letter_of(\"Bella\") == first_letter_of(\"Tessa\") = \"B\" == \"T\" = False\nremove_piece(oscar, octopus) = rule1()\nremove_piece(oscar, octopus) == False\nremove_piece(oscar, octopus) == False\nowe(oscar, money, gecko) = rule3(oscar)\nowe(oscar, money, gecko) == True\nowe(oscar, money, gecko) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(oscar) > 12 => remove_piece(oscar, octopus)\nrule2() = first_letter_of(name(oscar)) == first_letter_of(name(eel)) => remove_piece(oscar, octopus)\nrule3(something) = remove_piece(something, octopus) => owe(something, money, gecko)\nrule4(something) = needs_support(something, salmon) => not owe(something, money, gecko)\norder(rule3) > order(rule4) = True\n\nname(eel, Tessa) = True\nwise_friends(oscar) = 3\nnon_wise_friends(oscar) = 1\nowe(oscar, money, swordfish) = True\nname(oscar, Bella) = True\n\nquestion = owe(oscar, money, gecko)\n"}, {"idx": 147, "response": "has(squid, tablet) == True\nhas(squid, something_to_sit_on) == False\nnot become_enemy(squid, jellyfish) = rule4()\nbecome_enemy(squid, jellyfish) == False\nnot become_enemy(squid, jellyfish) == False\nprepare_armor(squid, cheetah) = rule3()\nprepare_armor(squid, cheetah) == True\nnot prepare_armor(squid, cheetah) == False\nproceed_to_spot(squid, right_after(snail)) = rule1()\nproceed_to_spot(squid, right_after(snail)) == True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(something, cheetah) & not become_enemy(something, jellyfish) => proceed_to_spot(something, right_after(snail))\nrule2() = first_letter_of(name(squid)) == first_letter_of(name(pig)) => prepare_armor(squid, cheetah)\nrule3() = not has(squid, keys) => prepare_armor(squid, cheetah)\nrule4() = has(squid, something_to_sit_on) => not become_enemy(squid, jellyfish)\nrule5() = give(black_bear, magnifying_glass, squid) & not offer_job_position(kiwi, squid) => not prepare_armor(squid, cheetah)\nrule6() = has(squid, musical_instrument) => not become_enemy(squid, jellyfish)\nrule7(something) = raise_flag_of_peace(something, spider) => become_enemy(something, jellyfish)\nrule8() = raise_flag_of_peace(something, pig) => not proceed_to_spot(something, right_after(snail))\norder(rule5) > order(rule2) = True\norder(rule5) > order(rule3) = True\norder(rule7) > order(rule4) = True\norder(rule7) > order(rule6) = True\norder(rule8) > order(rule1) = True\n\nname(pig, Paco) = True\nhas(squid, tablet) = True\nname(squid, Lola) = True\nlost(squid, keys) = True\nhas(squid, trumpet) = True\noffer_job_position(kiwi, squid) = False\n\nquestion = proceed_to_spot(squid, right_after(snail))\n"}, {"idx": 148, "response": "points(eel) == points(hippopotamus) == True\nhas(pig, card) == True\ncolor(card, white) == True\nname(pig, Lola) == True\nhas(pig, device_to_connect_to_internet) == True\nremove_piece(pig, penguin) = rule2()\nremove_piece(pig, penguin) == True\nadd_conclusion(\"the penguin is not going to eat the food that belongs to the halibut\") = rule5()\nadd_conclusion(\"the penguin is not going to eat the food that belongs to the halibut\") == True\nquestion = True", "answer": 1, "code": "rule1(something) = points(something) == points(hippopotamus) => points(crocodile) == points(penguin)\nrule2() = has(pig, device_to_connect_to_internet) => remove_piece(pig, penguin)\nrule3() = first_letter_of(name(pig)) == first_letter_of(name(rabbit)) => not remove_piece(pig, penguin)\nrule4() = has(pig, card) and color(card) in rainbow_colors => remove_piece(pig, penguin)\nrule5() = points(crocodile) == points(penguin) and remove_piece(pig, penguin) => add_conclusion(\"the penguin is not going to eat the food that belongs to the halibut\")\n\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule3) = True\n\npoints(eel) == points(hippopotamus) = True\nhas(pig, card) = True\ncolor(card, white) = True\nname(pig, Lola) = True\nhas(pig, cell_phone) = True\nname(rabbit, Lily) = True\n\nquestion = \"the penguin is not going to eat the food that belongs to the halibut\" in conclusions\n"}, {"idx": 149, "response": "has(phoenix, cello) == True\nhas(phoenix, something_to_sit_on) == False\nshow_all_cards(phoenix, gecko) = rule4()\nshow_all_cards(phoenix, gecko) == False\nshow_all_cards(phoenix, gecko) == False\nfriends(phoenix) > 6 = rule7()\nfriends(phoenix) > 6 == True\nfriends(phoenix) > 6 == True\nnot show_all_cards(phoenix, gecko) == False\nnot has(phoenix, keys) = rule6()\nhas(phoenix, keys) == False\nnot has(phoenix, keys) == True\nsing(phoenix, victory_song, rabbit) = rule1()\nsing(phoenix, victory_song, rabbit) == True\nsing(phoenix, victory_song, rabbit) == True\nquestion = True", "answer": 1, "code": "rule1() = not sing(puffin, song_of_victory, phoenix) => sing(phoenix, victory_song, rabbit)\nrule2(something) = offer_job_position(something, panther) => not sing(something, victory_song, phoenix)\nrule3(something) = offer_job_position(something, moose) & not show_all_cards(something, gecko) => not sing(something, victory_song, rabbit)\nrule4() = has(phoenix, something_to_sit_on) => show_all_cards(phoenix, gecko)\nrule5() = knock_down(squid, fortress, puffin) & not know(crocodile, defensive_plans, puffin) => sing(puffin, song_of_victory, phoenix)\nrule6() = not has(phoenix, keys) => show_all_cards(phoenix, gecko)\nrule7() = friends(phoenix) > 6 => not show_all_cards(phoenix, gecko)\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule7) = True\norder(rule5) > order(rule2) = True\norder(rule6) > order(rule7) = True\n\nhas(phoenix, cello) = True\nlazy_friends(phoenix) = 4\nactive_friends(phoenix) = 6\nroll_dice(squid, puffin) = True\noffer_job_position(puffin, panther) = False\n\nquestion = sing(phoenix, victory_song, rabbit)\n"}, {"idx": 150, "response": "burn_warehouse(baboon, lobster) == True\noffer_job_position(baboon, buffalo) == False\nnot prepare_armor(baboon, ferret) = rule2()\nnot prepare_armor(baboon, ferret) == True\nnot prepare_armor(baboon, ferret) == True\nowe(ferret, money, sea_bass) = rule1()\nowe(ferret, money, sea_bass) == True\nowe(ferret, money, sea_bass) == True\nquestion = True", "answer": 1, "code": "rule1() = not prepare_armor(baboon, ferret) => owe(ferret, money, sea_bass)\nrule2(something) = not offer_job_position(something, buffalo) & burn_warehouse(something, lobster) => not prepare_armor(something, ferret)\nrule3() = first_letter_of(name(baboon)) == first_letter_of(name(cheetah)) => prepare_armor(baboon, ferret)\norder(rule3) > order(rule2) = True\n\nburn_warehouse(baboon, lobster) = True\noffer_job_position(baboon, buffalo) = False\nname(baboon, Pablo) = True\n\nquestion = owe(ferret, money, sea_bass)\n"}, {"idx": 151, "response": "proceeds_to_spot(black_bear, right_after_spot(penguin)) == True\nwinks(black_bear, caterpillar) == True\nprepare_armor(black_bear, cow) = rule6()\nprepare_armor(black_bear, cow) == True\nattack(mosquito, green_fields, owner(black_bear)) == True\nnot prepare_armor(black_bear, cow) == False\nnot give(dog, magnifying_glass, cow) = rule1()\nnot give(dog, magnifying_glass, cow) == False\nadd_conclusion(\"the cow does not attack the green fields of the whale\") = rule1()\nadd_conclusion(\"the cow does not attack the green fields of the whale\") == True\nquestion = True", "answer": 1, "code": "rule1() = belief(black_bear, prepares_armor, cow) & not give(dog, magnifying_glass, cow) => add_conclusion(\"the cow does not attack the green fields of the whale\")\nrule2() = has(dog, drink) => give(dog, magnifying_glass, cow)\nrule3(something) = not roll_dice(something, viperfish) => not give(something, magnifying_glass, cow)\nrule4() = first_letter_of(name(dog)) == first_letter_of(name(sea_bass)) => give(dog, magnifying_glass, cow)\nrule5() = attack(mosquito, green_fields, owner(black_bear)) => not prepare_armor(black_bear, cow)\nrule6(something) = proceeds_to_spot(something, right_after_spot(penguin)) & winks(something, caterpillar) => prepare_armor(something, cow)\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule3) = True\norder(rule6) > order(rule5) = True\n\nproceeds_to_spot(black_bear, right_after_spot(penguin)) = True\nwinks(black_bear, caterpillar) = True\nname(dog, Tango) = True\nattack(mosquito, green_fields, owner(black_bear)) = True\nname(sea_bass, Buddy) = True\nroll_dice(dog, viperfish) = False\n\nquestion = attack(cow, green_fields, owner(whale))\n"}, {"idx": 152, "response": "wise_friends(whale) = 0\nnon_wise_friends(whale) = 1\nfriends(whale) < 14 = True\nowe(whale, money, leopard) = rule1()\nowe(whale, money, leopard) == True\ngive(ferret, magnifying_glass, leopard) & owe(whale, money, leopard) = rule2()\ngive(ferret, magnifying_glass, leopard) & owe(whale, money, leopard) == True\ngive(leopard, magnifier, rabbit) = True\nquestion = True", "answer": 1, "code": "rule1() = friends(whale) < 14 => owe(whale, money, leopard)\nrule2() = give(ferret, magnifying_glass, leopard) & owe(whale, money, leopard) => give(leopard, magnifier, rabbit)\nrule3() = not points(parrot) == points(ferret) => give(ferret, magnifying_glass, leopard)\nrule4() = roll_dice(something, dog) => not give(leopard, magnifier, rabbit)\nrule5() = first_letter_of(name(whale)) == first_letter_of(name(blobfish)) => owe(whale, money, leopard)\norder(rule2) > order(rule4) = True\n\nname(blobfish, Beauty) = True\nfriends(ferret) = 1\npoints(parrot) == points(ferret) = True\nwise_friends(whale) = 1\nnon_wise_friends(whale) = 1\nname(whale, Peddi) = True\n\nquestion = give(leopard, magnifier, rabbit)\n"}, {"idx": 153, "response": "offer_job_position(gecko, leopard) == True\nnot offer_job_position(leopard, bat) = rule2()\nnot offer_job_position(leopard, bat) == True\nremove_piece(leopard, koala) = rule1()\nremove_piece(leopard, koala) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not offer_job_position(something, bat) => remove_piece(leopard, koala)\nrule2() = give(hummingbird, magnifier, leopard) & offer_job_position(gecko, leopard) => not offer_job_position(leopard, bat)\n\noffer_job_position(gecko, leopard) = True\ngive(hummingbird, magnifying_glass, leopard) = True\n\nquestion = remove_piece(leopard, koala)\n"}, {"idx": 154, "response": "has(squirrel, card) == True\ncolor(card) in flag_of_Italy_colors == True\nnot show_cards(squirrel, wolverine) = rule2()\nnot show_cards(squirrel, wolverine) == True\nnot eat_food(squirrel, food_of(swordfish)) = rule4()\nnot eat_food(squirrel, food_of(swordfish)) == True\nproceed(squirrel, spot_right_after(caterpillar)) = rule6()\nproceed(squirrel, spot_right_after(caterpillar)) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(something, octopus) => not proceed(squirrel, spot_right_after(caterpillar))\nrule2() = has(squirrel, card) and color(card) in flag_of_Italy_colors => not show_cards(squirrel, wolverine)\nrule3() = has(squirrel, sharp_object) => not show_cards(squirrel, wolverine)\nrule4() = first_letter_of(name(squirrel)) == first_letter_of(name(doctorfish)) => not eat_food(squirrel, food_of(swordfish))\nrule5() = become_enemy(something, cockroach) => raise_flag_of_peace(dog, octopus)\nrule6(something) = not show_cards(something, wolverine) & not eat_food(something, food_of(swordfish)) => proceed(something, spot_right_after(caterpillar))\norder(rule1) > order(rule6) = True\n\nname(doctorfish, Chickpea) = True\nbecome_enemy(eagle, cockroach) = True\nhas(squirrel, card) = True\ncolor(card, green) = True\nhas(squirrel, love_seat_sofa) = True\nhas(squirrel, saxophone) = True\nname(squirrel, Casper) = True\nowns(squirrel, luxury_aircraft) = True\n\nquestion = proceed(squirrel, spot_right_after(caterpillar))\n"}, {"idx": 155, "response": "color(card, indigo) == True\nstarts_with(color(card, \"n\")) == False\nnot show_all_cards(gecko, cricket) = rule1()\nnot show_all_cards(gecko, cricket) == True\nname(gecko, Lily) == True\nname(lion, Beauty) == True\nfirst_letter_of(name(gecko)) == first_letter_of(name(lion)) = True\nnot show_all_cards(gecko, cricket) == True\nspot_after(parrot, gecko) = True\nnot offer_job_position(gecko, grasshopper) == True\nshow_all_cards(gecko, cricket) = rule3()\nshow_all_cards(gecko, cricket) == True\nrespect(buffalo, cricket) = False\noffer_job_position(cricket, starfish) = rule6()\noffer_job_position(cricket, starfish) == True\nquestion = True", "answer": 1, "code": "rule1() = starts_with(color(card, \"n\")) => not show_all_cards(gecko, cricket)\nrule2() = first_letter_of(name(gecko)) == first_letter_of(name(lion)) => not show_all_cards(gecko, cricket)\nrule3(something) = spot_after(parrot, something) & not offer_job_position(something, grasshopper) => show_all_cards(something, cricket)\nrule4() = eat_food(hummingbird, food_of(buffalo)) & prepare_armor(phoenix, buffalo) => burn_warehouse(buffalo, cricket)\nrule5() = prepare_armor(sea_bass, buffalo) => not burn_warehouse(buffalo, cricket)\nrule6() = respect(buffalo, cricket) => offer_job_position(cricket, starfish)\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule2) = True\norder(rule4) > order(rule5) = True\n\nhas(gecko, card) = True\ncolor(card, indigo) = True\nname(gecko, Lily) = True\nnot offer_job_position(gecko, grasshopper) = True\neat_food(hummingbird, food_of(buffalo)) = True\nname(lion, Beauty) = True\nprepare_armor(phoenix, buffalo) = True\n\nquestion = offer_job_position(cricket, starfish)\n"}, {"idx": 156, "response": "name(hare, Max) == True\nname(tilapia, Meadow) == True\nfirst_letter_of(name(hare)) == first_letter_of(name(tilapia)) == True\nraise_flag_of_peace(hare, halibut) = rule1()\nraise_flag_of_peace(hare, halibut) == True\nraise_flag_of_peace(hare, halibut) == True\nbecome_enemy(halibut, grizzly_bear) = rule4()\nbecome_enemy(halibut, grizzly_bear) == True\nbecome_enemy(halibut, grizzly_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(hare)) == first_letter_of(name(tilapia)) => raise_flag_of_peace(hare, halibut)\nrule2() = has(hare, sharp_object) => raise_flag_of_peace(hare, halibut)\nrule3() = points(moose) == points(halibut) => not become_enemy(halibut, grizzly_bear)\nrule4() = raise_flag_of_peace(hare, halibut) => become_enemy(halibut, grizzly_bear)\nrule5() = has(moose, musical_instrument) => points(moose) == points(halibut)\norder(rule4) > order(rule3) = True\n\nloyal_friends(hare) = 1\ndisloyal_friends(hare) = 1\nhas(hare, green_tea) = True\nname(hare, Max) = True\nhas(moose, violin) = True\nname(tilapia, Meadow) = True\n\nquestion = become_enemy(halibut, grizzly_bear)\n"}, {"idx": 157, "response": "has(tilapia, card) == True\ncolor(card, white) == True\ncolor(card) in flag_of_france_colors = False\nhas(tilapia, device_to_connect_to_internet) = False\nnot owe(tilapia, money, cow) = rule3()\nnot owe(tilapia, money, cow) == True\npoints(cow) == points(ferret) = rule2()\npoints(cow) == points(ferret) == False\nquestion = False", "answer": -1, "code": "rule1() = has(baboon, something_to_sit_on) => attack(baboon, green_fields, owner(gecko))\nrule2() = not owe(tilapia, money, cow) => points(cow) != points(ferret)\nrule3() = has(tilapia, card) and color(card) in flag_of_france_colors => not owe(tilapia, money, cow)\nrule4() = has(tilapia, device_to_connect_to_internet) => not owe(tilapia, money, cow)\n\nhas(baboon, love_seat_sofa) = True\nhas(tilapia, card) = True\ncolor(card, white) = True\nhas(tilapia, cello) = True\n\nquestion = points(cow) == points(ferret)\n"}, {"idx": 158, "response": "has(rabbit, something_to_sit_on) == True\nnot offer_job_position(rabbit, kangaroo) = rule2()\noffer_job_position(rabbit, kangaroo) == False\nhas(rabbit, card) == True\nstarts_with(color(card), \"i\") == False\noffer_job_position(rabbit, kangaroo) == False\nfriends(rabbit) > 3 == True\noffer_job_position(rabbit, kangaroo) = rule1()\noffer_job_position(rabbit, kangaroo) == True\nknows(something, defense_plan, kangaroo) == False\nsing_victory_song(viperfish, sea_bass) = rule3()\nsing_victory_song(viperfish, sea_bass) == False\npoints(mosquito) == points(viperfish) == False\nnot sing_victory_song(viperfish, sea_bass) = rule4()\nnot sing_victory_song(viperfish, sea_bass) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(rabbit) > 3 => offer_job_position(rabbit, kangaroo)\nrule2() = has(rabbit, something_to_sit_on) => not offer_job_position(rabbit, kangaroo)\nrule3() = knows(something, defense_plan, kangaroo) => sing_victory_song(viperfish, sea_bass)\nrule4() = points(mosquito) == points(viperfish) => not sing_victory_song(viperfish, sea_bass)\nrule5() = has(rabbit, card) and starts_with(color(card), \"i\") => offer_job_position(rabbit, kangaroo)\norder(rule2) > order(rule1) = True\norder(rule2) > order(rule5) = True\norder(rule4) > order(rule3) = True\n\nhas(rabbit, card) = True\ncolor(card, violet) = True\nkind_friends(rabbit) = 4\nnon_kind_friends(rabbit) = 4\n\nquestion = sing_victory_song(viperfish, sea_bass)\n"}, {"idx": 159, "response": "has(sun_bear, backpack) == True\nhas(sun_bear, musical_instrument) == True\nsings(sun_bear, victory_song, penguin) = rule1()\nsings(sun_bear, victory_song, penguin) == True\nsings(sun_bear, victory_song, penguin) == True\nrespects(sun_bear, hare) = rule2(sun_bear)\nrespects(sun_bear, hare) == True\nquestion = True", "answer": 1, "code": "rule1() = has(sun_bear, musical_instrument) => sings(sun_bear, victory_song, penguin)\nrule2(something) = sings(something, victory_song, penguin) => respects(something, hare)\nrule3() = has(sun_bear, something_to_carry_apples_and_oranges) => not sings(sun_bear, victory_song, penguin)\norder(rule1) > order(rule3) = True\n\nhas(sun_bear, backpack) = True\nhas(sun_bear, flute) = True\n\nquestion = respects(sun_bear, hare)\n"}, {"idx": 160, "response": "name(cricket, Max) == True\nname(polar_bear, Mojo) == True\nfirst_letter_of(name(polar_bear)) == first_letter_of(name(cricket)) = True\nnot know(polar_bear, defensive_plans, eagle) = rule1()\nnot know(polar_bear, defensive_plans, eagle) == True\nfriends(polar_bear) < 6 = rule7()\nfriends(polar_bear) < 6 == False\nnot know(polar_bear, defensive_plans, eagle) == True\nnot respect(spider, cricket) = rule2()\nnot respect(spider, cricket) == True\nnot raise_flag_of_peace(cricket, eagle) == True\nnot raise_flag_of_peace(cricket, eagle) == True\nadd_conclusion(eagle, \"the eagle is not going to knock down the fortress of the gecko\") = rule3()\nadd_conclusion(eagle, \"the eagle is not going to knock down the fortress of the gecko\") == True\nattack(eagle, green_fields_of(catfish)) = rule4()\nattack(eagle, green_fields_of(catfish)) == False\nknock_down_fortress(eagle, gecko) = False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(polar_bear)) == first_letter_of(name(cricket)) => not know(polar_bear, defensive_plans, eagle)\nrule2() = not respect(spider, cricket) => not raise_flag_of_peace(cricket, eagle)\nrule3() = not know(polar_bear, defensive_plans, eagle) & raise_flag_of_peace(cricket, eagle) => add_conclusion(eagle, \"the eagle is not going to knock down the fortress of the gecko\")\nrule4() = attack(something, green_fields_of(catfish)) => knock_down_fortress(something, gecko)\nrule5() = has(cricket, card) and color(card) in colors_of_italian_flag => raise_flag_of_peace(cricket, eagle)\nrule6() = has(cricket, leafy_green_vegetable) => raise_flag_of_peace(cricket, eagle)\nrule7() = friends(polar_bear) < 6 => not know(polar_bear, defensive_plans, eagle)\norder(rule2) > order(rule5) = True\norder(rule2) > order(rule6) = True\norder(rule4) > order(rule3) = True\n\nhas(cricket, card) = True\ncolor(card, blue) = True\nhas(cricket, kale) = True\nname(cricket, Max) = True\nfriends(polar_bear) = 13\nname(polar_bear, Mojo) = True\n\nquestion = knock_down_fortress(eagle, gecko)\n"}, {"idx": 161, "response": "name(carp, Milo) == True\nname(ferret, Max) == True\nfirst_letter_of(name(carp)) == first_letter_of(name(ferret)) = True\nbecome_enemy(carp, hare) = rule1()\nbecome_enemy(carp, hare) == True\nnot become_enemy(carp, hare) == False\nrespect(hare, cheetah) = rule2()\nrespect(hare, cheetah) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(carp)) == first_letter_of(name(ferret)) => become_enemy(carp, hare)\nrule2() = not become_enemy(carp, hare) => respect(hare, cheetah)\n\nname(carp, Milo) = True\nname(ferret, Max) = True\n\nquestion = respect(hare, cheetah)\n"}, {"idx": 162, "response": "name(salmon, Peddi) == True\nname(penguin, Pablo) == True\nfirst_letter_of(name(salmon)) == first_letter_of(name(penguin)) = True\nknock_down_fortress(salmon, sea_bass) = rule1()\nknock_down_fortress(salmon, sea_bass) == True\nhas(salmon, romaine_lettuce) == True\nhas(salmon, something_to_carry(apples, oranges)) = False\nnot knock_down_fortress(salmon, sea_bass) = rule2()\nknock_down_fortress(salmon, sea_bass) == False\nfriends(salmon) < 3 = rule5()\nfriends(salmon) < 3 == False\nnot knock_down_fortress(salmon, sea_bass) == False\nremove_from_board(salmon, piece_of(carp)) = rule4()\nremove_from_board(salmon, piece_of(carp)) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(salmon)) == first_letter_of(name(penguin)) => knock_down_fortress(salmon, sea_bass)\nrule2() = has(salmon, something_to_carry(apples, oranges)) => not knock_down_fortress(salmon, sea_bass)\nrule3() = has(salmon, drink) => knock_down_fortress(salmon, sea_bass)\nrule4(something) = knock_down_fortress(something, sea_bass) => remove_from_board(something, piece_of(carp))\nrule5() = friends(salmon) < 3 => not knock_down_fortress(salmon, sea_bass)\norder(rule2) > order(rule1) = True\norder(rule2) > order(rule3) = True\norder(rule5) > order(rule1) = True\norder(rule5) > order(rule3) = True\n\nname(penguin, Pablo) = True\nfriends(salmon) = 9\nhas(salmon, romaine_lettuce) = True\nname(salmon, Peddi) = True\n\nquestion = remove_from_board(salmon, piece_of(carp))\n"}, {"idx": 163, "response": "killed(salmon, mayor) == True\nwinks(salmon, whale) = rule2()\nwinks(salmon, whale) == True\nnot knock_down(salmon, fortress, kiwi) = rule1(salmon)\nnot knock_down(salmon, fortress, kiwi) == True\nnot owe(salmon, money, phoenix) = rule1(salmon)\nnot owe(salmon, money, phoenix) == True\nquestion = False", "answer": -1, "code": "rule1(something) = winks(something, whale) & not knock_down(something, fortress, kiwi) => not owe(something, money, phoenix)\nrule2() = killed(salmon, mayor) => winks(salmon, whale)\nrule3() = has(salmon, card) & starts_with(color(card), \"b\") => not knock_down(salmon, fortress, kiwi)\n\nkilled(salmon, mayor) = True\nhas(salmon, card) = True\ncolor(card, black) = True\n\nquestion = owe(salmon, money, phoenix)\n"}, {"idx": 164, "response": "eat_food(moose, food_of(buffalo)) == True\nowe(dog, money, puffin) = rule3()\nowe(dog, money, puffin) == True\nnot become_enemy(snail, puffin) = True\nowe(dog, $$$, puffin) == True\nknock_down_fortress(puffin, viperfish) = rule4()\nknock_down_fortress(puffin, viperfish) == True\nquestion = True", "answer": 1, "code": "rule1() = has_high_salary(dog) => not owe(dog, $$$, puffin)\nrule2() = created(snail, time_machine) => not raise_flag_of_peace(snail, puffin)\nrule3() = eat_food(something, food_of(buffalo)) => owe(dog, money, puffin)\nrule4() = not become_enemy(snail, puffin) & owe(dog, $$$, puffin) => knock_down_fortress(puffin, viperfish)\norder(rule3) > order(rule1) = True\n\neat_food(moose, food_of(buffalo)) = True\ninvent(snail, time_machine) = True\nnot_steal(snail, 5_points, canary) = True\nnot_proceed(snail, spot_right_after(hummingbird)) = True\n\nquestion = knock_down_fortress(puffin, viperfish)\n"}, {"idx": 165, "response": "has(rabbit, arugula) == True\nhas(rabbit, sharp_object) = rule2()\noffer_job_position(rabbit, squirrel) == True\nnot has(rabbit, keys) == True\noffer_job_position(rabbit, squirrel) == True\nproceed_to_spot(cheetah, right_after(squirrel)) = rule3()\nproceed_to_spot(cheetah, right_after(squirrel)) == True\nrespect(sea_bass, cheetah) == True\nproceed_to_spot(cheetah, right_after(squirrel)) == True\noffer_job_position(squirrel, canary) = rule1()\noffer_job_position(squirrel, canary) == True\nquestion = True", "answer": 1, "code": "rule1() = offer_job_position(rabbit, squirrel) & proceed_to_spot(cheetah, right_after(squirrel)) => offer_job_position(squirrel, canary)\nrule2() = has(rabbit, sharp_object) => offer_job_position(rabbit, squirrel)\nrule3() = respect(sea_bass, cheetah) => proceed_to_spot(cheetah, right_after(squirrel))\nrule4() = not has(rabbit, keys) => offer_job_position(rabbit, squirrel)\n\nhas(rabbit, arugula) = True\nhas(rabbit, keys) = False\nrespect(sea_bass, cheetah) = True\n\nquestion = offer_job_position(squirrel, canary)\n"}, {"idx": 166, "response": "has(cockroach, card) == True\ncolor(card, orange) == True\nstarts_with(color(card), \"o\") == True\nrolls_dice(cockroach, viperfish) = rule2()\nrolls_dice(cockroach, viperfish) == True\nsalary(cockroach) == low == True\nrolls_dice(cockroach, viperfish) = rule3()\nrolls_dice(cockroach, viperfish) == True\nlearn(black_bear, elementary_resource_management, cheetah) = rule1()\nlearn(black_bear, elementary_resource_management, cheetah) == not learn(black_bear, elementary_resource_management, cheetah)\nnot learn(black_bear, elementary_resource_management, cheetah) == True\nquestion = True", "answer": 1, "code": "rule1() = rolls_dice(something, viperfish) => not learn(black_bear, elementary_resource_management, cheetah)\nrule2() = has(cockroach, card) and starts_with(color(card), \"o\") => rolls_dice(cockroach, viperfish)\nrule3() = salary(cockroach) == high => rolls_dice(cockroach, viperfish)\n\nhas(cockroach, card) = True\ncolor(card, orange) = True\nsalary(cockroach) == low = True\nrespect(tiger, cockroach) = False\n\nquestion = learn(black_bear, elementary_resource_management, cheetah)\n"}, {"idx": 167, "response": "has(squirrel, musical_instrument) == False\nhas(squirrel, card) == True\ncolor(card, white) == True\nhas(squirrel, violin) == True\nname(squirrel, Chickpea) == True\nfirst_letter_of(name(squirrel)) == first_letter_of(name(grizzly_bear)) == True\nraise_flag_of_peace(squirrel, cockroach) = rule1()\nraise_flag_of_peace(squirrel, cockroach) == True\nneeds(squirrel, support, cockroach) = False\nbecome_enemy(squirrel, snail) = rule3()\nbecome_enemy(squirrel, snail) == False\nquestion = False", "answer": -1, "code": "rule1() = has(squirrel, musical_instrument) => raise_flag_of_peace(squirrel, cockroach)\nrule2() = took(leopard, bike, store) => proceed(leopard, spot_after(tiger))\nrule3(something) = needs(something, support, cockroach) => become_enemy(something, snail)\nrule4() = first_letter_of(name(squirrel)) == first_letter_of(name(grizzly_bear)) => raise_flag_of_peace(squirrel, cockroach)\n\nname(grizzly_bear, Charlie) = True\ntook(leopard, bike, store) = True\nhas(squirrel, card) = True\ncolor(card, white) = True\nhas(squirrel, violin) = True\nname(squirrel, Chickpea) = True\n\nquestion = become_enemy(squirrel, snail)\n"}, {"idx": 168, "response": "wink(cheetah, rabbit) == True\ngive(hare, magnifying_glass, squirrel) = rule2()\ngive(hare, magnifying_glass, squirrel) == True\nsupport(hippopotamus, caterpillar) = rule1()\nsupport(hippopotamus, caterpillar) == True\nquestion = True", "answer": 1, "code": "rule1() = give(something, magnifying_glass, squirrel) => support(hippopotamus, caterpillar)\nrule2() = wink(something, rabbit) => give(hare, magnifying_glass, squirrel)\nrule3(something) = not attack(something, green_fields, owner(koala)) => roll_dice(something, hippopotamus)\nrule4() = learn(something, elementary_resource_management, bat) => not show_all_cards(cricket, hippopotamus)\nrule5() = friends(cricket) < 6 => show_all_cards(cricket, hippopotamus)\nrule6() = first_letter_of(name(cricket)) == first_letter_of(name(swordfish)) => show_all_cards(cricket, hippopotamus)\norder(rule5) > order(rule4) = True\norder(rule6) > order(rule4) = True\n\nwink(cheetah, rabbit) = True\nname(cricket, Beauty) = True\nlearn(sea_bass, basics_of_resource_management, bat) = True\nname(swordfish, Max) = True\nnot attack(lobster, green_fields, owner(koala)) = True\n\nquestion = support(hippopotamus, caterpillar)\n"}, {"idx": 169, "response": "give(cheetah, magnifying_glass, sheep) = rule1()\ngive(cheetah, magnifying_glass, sheep) == True\ngive(tilapia, magnifying_glass, sheep) == True\nnot knock_down(sheep, fortress(salmon)) = rule7()\nknock_down(sheep, fortress(salmon)) == False\nknock_down(sheep, fortress(salmon)) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(cheetah) > 8 => give(cheetah, magnifying_glass, sheep)\nrule2() = eat_food(penguin, food_of(sheep)) => not become_enemy(sheep, tiger)\nrule3(something) = give(something, magnifying_glass, gecko) => become_enemy(something, tiger)\nrule4() = not attack(bat, green_fields(owned_by(tilapia))) => give(tilapia, magnifying_glass, sheep)\nrule5(something) = knock_down(something, fortress(octopus)) => not give(something, magnifying_glass, sheep)\nrule6() = has(cheetah, card) and color(card) in primary_colors => give(cheetah, magnifying_glass, sheep)\nrule7() = give(cheetah, magnifying_glass, sheep) & give(tilapia, magnifying_glass, sheep) => not knock_down(sheep, fortress(salmon))\nrule8(something) = prepare_armor(something, squirrel) & become_enemy(something, tiger) => knock_down(something, fortress(salmon))\norder(rule2) > order(rule3) = True\norder(rule5) > order(rule1) = True\norder(rule5) > order(rule6) = True\norder(rule8) > order(rule7) = True\n\nhas(cheetah, card) = True\ncolor(card, red) = True\nfriends(cheetah) = 1\ngive(phoenix, magnifying_glass, tilapia) = True\ngive(sheep, magnifying_glass, gecko) = True\nnot attack(bat, green_fields(owned_by(tilapia))) = True\n\nquestion = knock_down(sheep, fortress(salmon))\n"}, {"idx": 170, "response": "has(grasshopper, knife) == True\nhas(grasshopper, sharp_object) == True\nprepare_armor(grasshopper, hippopotamus) = rule3()\nprepare_armor(grasshopper, hippopotamus) == True\nremove(grasshopper, piece, hippopotamus) = rule2()\nremove(grasshopper, piece, hippopotamus) == True\nraise_flag_of_peace(hippopotamus, cow) = rule2()\nraise_flag_of_peace(hippopotamus, cow) == True\nquestion = True", "answer": 1, "code": "rule1(something) = attacks(something, green_fields, raven) => not prepare_armor(something, hippopotamus)\nrule2() = remove(grasshopper, piece, hippopotamus) => raise_flag_of_peace(hippopotamus, cow)\nrule3() = has(grasshopper, sharp_object) => prepare_armor(grasshopper, hippopotamus)\norder(rule1) > order(rule3) = True\n\nhas(grasshopper, knife) = True\n\nquestion = raise_flag_of_peace(hippopotamus, cow)\n"}, {"idx": 171, "response": "owe(kangaroo, money, carp) == True\nprepare_armor(raven, carp) == True\nnot sing(carp, victory_song, baboon) = rule3()\nnot sing(carp, victory_song, baboon) == False\nnot sing(carp, victory_song, baboon) == False\nwink(baboon, panda_bear) = rule1()\nwink(baboon, panda_bear) == True\nwink(baboon, panda_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = not sing(carp, victory_song, baboon) => wink(baboon, panda_bear)\nrule2(something) = not proceed(something, spot_right_after(sun_bear)) => not wink(something, panda_bear)\nrule3() = owe(kangaroo, money, carp) & prepare_armor(raven, carp) => not sing(carp, victory_song, baboon)\norder(rule2) > order(rule1) = True\n\nowe(kangaroo, money, carp) = True\nprepare_armor(raven, carp) = True\n\nquestion = wink(baboon, panda_bear)\n"}, {"idx": 172, "response": "has(jellyfish, kale) == True\npoints(jellyfish) == points(halibut) = rule2()\npoints(jellyfish) == points(halibut) == True\nwinks(oscar, halibut) = rule3()\nwinks(oscar, halibut) == True\nnot know(halibut, defense_plans, cockroach) = rule1()\nknow(halibut, defense_plans, cockroach) == False\nknow(halibut, defense_plans, cockroach) == False\nquestion = False", "answer": -1, "code": "rule1() = points(jellyfish) == points(halibut) & winks(oscar, halibut) => not know(halibut, defense_plans, cockroach)\nrule2() = has(jellyfish, leafy_green_vegetable) => points(jellyfish) == points(halibut)\nrule3() = works_more_hours(oscar) => winks(oscar, halibut)\nrule4() = friends(oscar) < 11 => winks(oscar, halibut)\n\nname(catfish, Paco) = True\nhas(jellyfish, kale) = True\nname(jellyfish, Pashmak) = True\nfriends(oscar) = 10\nreduced_work_hours(oscar) = True\n\nquestion = know(halibut, defense_plans, cockroach)\n"}, {"idx": 173, "response": "owes(something, money, cheetah) = rule1()\nowes(something, money, cheetah) == False\nnot prepare_armor(cricket, catfish) = rule2(cricket)\nnot prepare_armor(cricket, catfish) == True\nnot eat_food(cricket, food_of(salmon)) = rule2(cricket)\nnot eat_food(cricket, food_of(salmon)) == True\nquestion = True", "answer": 1, "code": "rule1() = owes(something, money, cheetah) => eat_food(cricket, food_of(salmon))\nrule2(something) = not prepare_armor(something, catfish) => not eat_food(something, food_of(salmon))\nrule3() = not become_enemy(wolverine, moose) & owes(sun_bear, money, moose) => become_enemy(moose, cheetah)\n\norder(rule2) > order(rule1) = True\n\nowes(sun_bear, money, moose) = True\nnot become_enemy(wolverine, moose) = True\n\nquestion = eat_food(cricket, food_of(salmon))\n"}, {"idx": 174, "response": "has(doctorfish, card) == True\ncolor(card, red) == True\ncolor(card) in rainbow_colors == True\neats(doctorfish, food_of(wolverine)) = rule1()\neats(doctorfish, food_of(wolverine)) == True\nshow_all_cards(wolverine, sheep) = rule4()\nshow_all_cards(wolverine, sheep) == True\nquestion = True", "answer": 1, "code": "rule1() = has(doctorfish, card) and color(card) in rainbow_colors => eats(doctorfish, food_of(wolverine))\nrule2() = purchased(doctorfish, time_machine) => eats(doctorfish, food_of(wolverine))\nrule3() = show_all_cards(something) => not eats(doctorfish, food_of(wolverine))\nrule4() = eats(doctorfish, food_of(wolverine)) => show_all_cards(wolverine, sheep)\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule2) = True\n\nhas(doctorfish, card) = True\ncolor(card, red) = True\ninvented(doctorfish, time_machine) = True\n\nquestion = show_all_cards(wolverine, sheep)\n"}, {"idx": 175, "response": "sings(lobster, victory_song, kudu) == True\nsings(kudu, victory_song, sun_bear) = rule2()\nsings(kudu, victory_song, sun_bear) == True\ngive(crocodile, magnifying_glass, sun_bear) = rule1()\ngive(crocodile, magnifying_glass, sun_bear) == True\nnot need_support(sun_bear, hummingbird) = rule1()\nneed_support(sun_bear, hummingbird) == False\nquestion = False", "answer": -1, "code": "rule1() = sings(kudu, victory_song, sun_bear) & give(crocodile, magnifying_glass, sun_bear) => not need_support(sun_bear, hummingbird)\nrule2() = sings(lobster, victory_song, kudu) => sings(kudu, victory_song, sun_bear)\nrule3(something) = not points(something) == points(cat) => give(something, magnifying_glass, sun_bear)\n\nhas(kudu, job, low_income) = True\nhas(kudu, arugula) = True\nsings(lobster, victory_song, kudu) = True\npoints(crocodile) != points(cat) = True\n\nquestion = need_support(sun_bear, hummingbird)\n"}, {"idx": 176, "response": "name(black_bear, Charlie) == True\nname(cheetah, Meadow) == True\nfirst_letter_of(name(black_bear)) == first_letter_of(name(cheetah)) = True\nnot sing(black_bear, victory_song, kudu) = rule1()\nnot sing(black_bear, victory_song, kudu) == True\nhas(black_bear, leafy_green_vegetable) = True\nsing(black_bear, victory_song, kudu) = rule6()\nsing(black_bear, victory_song, kudu) == True\nnot give(meerkat, magnifying_glass, black_bear) = rule7()\nnot give(meerkat, magnifying_glass, black_bear) == True\nsing(black_bear, victory_song, puffin) = rule7()\nsing(black_bear, victory_song, puffin) == True\nadd_conclusion(\"the black bear gives a magnifier to the eel\") = rule4()\nadd_conclusion(\"the black bear gives a magnifier to the eel\") == \"the black bear gives a magnifier to the eel\"\nquestion = \"the black bear gives a magnifier to the eel\"", "answer": 0, "code": "rule1() = first_letter_of(name(black_bear)) == first_letter_of(name(cheetah)) => not sing(black_bear, victory_song, kudu)\nrule2() = has(spider, drink) => eat(spider, food_of(black_bear))\nrule3() = friends(black_bear) > 9 => sing(black_bear, victory_song, kudu)\nrule4() = belief(lobster, attacks, green_fields_of(black_bear)) & prepare_armor(spider, black_bear) => add_conclusion(\"the black bear gives a magnifier to the eel\")\nrule5() = respect(polar_bear, lobster) => attacks(lobster, green_fields_of(black_bear))\nrule6() = has(black_bear, leafy_green_vegetable) => sing(black_bear, victory_song, kudu)\nrule7() = not give(meerkat, magnifying_glass, black_bear) => sing(black_bear, victory_song, puffin)\norder(rule3) > order(rule1) = True\norder(rule6) > order(rule1) = True\n\nname(black_bear, Charlie) = True\nhas(black_bear, violin) = True\nname(cheetah, Meadow) = True\ngive(meerkat, magnifying_glass, black_bear) = True\nrespect(polar_bear, lobster) = True\nhas(spider, job) = True\nhas(spider, beer) = True\nhas(spider, saxophone) = True\n\nquestion = add_conclusion(\"the black bear gives a magnifier to the eel\")\n"}, {"idx": 177, "response": "learn(moose, basics_of_resource_management, mosquito) == True\nnot steal(snail, 5_points, parrot) = rule4()\nnot steal(snail, 5_points, parrot) == True\nnot steal(snail, 5_points, parrot) == True\nnot attack(snail, green_fields, owner(hippopotamus)) = rule2()\nnot attack(snail, green_fields, owner(hippopotamus)) == True\nnot attack(snail, green_fields, owner(hippopotamus)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not steal(something, 5_points, parrot) & knows(something, defense_plan, wolverine) => attack(something, green_fields, owner(hippopotamus))\nrule2() = not steal(something, 5_points, puffin) => not attack(snail, green_fields, owner(hippopotamus))\nrule3(something) = wink(something, squirrel) => knows(something, defense_plan, wolverine)\nrule4() = learn(something, basics_of_resource_management, mosquito) => not steal(snail, 5_points, parrot)\nrule5(something) = knocks_down(something, fortress, owner(zander)) => not knows(something, defense_plan, wolverine)\norder(rule2) > order(rule1) = True\norder(rule5) > order(rule3) = True\n\nlearn(moose, basics_of_resource_management, mosquito) = True\nwink(snail, squirrel) = True\n\nquestion = attack(snail, green_fields, owner(hippopotamus))\n"}, {"idx": 178, "response": "name(tiger, Paco) == True\nname(sea_bass, Milo) == True\nfirst_letter_of(name(tiger)) == first_letter_of(name(sea_bass)) == True\nnot become_enemy(tiger, cat) = rule1()\nnot become_enemy(tiger, cat) == True\neat_food(koala, food_of(tiger)) == False\nsing_victory_song(tiger, grizzly_bear) = rule3()\nsing_victory_song(tiger, grizzly_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(tiger)) == first_letter_of(name(sea_bass)) => not become_enemy(tiger, cat)\nrule2(something) = not become_enemy(something, cat) & respect(something, eel) => not sing_victory_song(something, grizzly_bear)\nrule3() = eat_food(something, food_of(panda_bear)) => sing_victory_song(tiger, grizzly_bear)\nrule4() = has(tiger, card) & color(card) in primary_colors => not become_enemy(tiger, cat)\nrule5() = learn(cockroach, elementary_resource_management_from(tiger)) & not attack(penguin, green_fields, owner=tiger) => respect(tiger, eel)\norder(rule3) > order(rule2) = True\n\nlearn(cockroach, elementary_resource_management_from(tiger)) = True\neat_food(koala, food_of(tiger)) = True\nname(sea_bass, Milo) = True\nhas(tiger, card) = True\ncolor(card, blue) = True\nname(tiger, Paco) = True\nnot attack(penguin, green_fields, owner=tiger) = True\n\nquestion = sing_victory_song(tiger, grizzly_bear)\n"}, {"idx": 179, "response": "question = remove(something, piece, swordfish) => burn(warehouse, snail)\nremove(something, piece, swordfish) = False\nburn(warehouse, snail) = rule1()\nburn(warehouse, snail) == True\nquestion = True", "answer": 1, "code": "rule1() = remove(something, piece, swordfish) => burn(warehouse, snail)\n\nproceed(amberjack, spot_right_after(donkey)) = False\nsteal_points(amberjack, 5, grasshopper) = False\n\nquestion = burn(warehouse, snail)\n"}, {"idx": 180, "response": "killed(eel, mayor) == True\nrespects(eel, lobster) = rule1()\nrespects(eel, lobster) == True\nnot knock_down(caterpillar, fortress, lobster) = rule2()\nnot knock_down(caterpillar, fortress, lobster) == True\nsteal_points(lobster, 5, halibut) = rule3()\nsteal_points(lobster, 5, halibut) == True\nquestion = True", "answer": 1, "code": "rule1() = killed(eel, mayor) => respects(eel, lobster)\nrule2() = become_enemy(squid, caterpillar) => not knock_down(caterpillar, fortress, lobster)\nrule3() = respects(eel, lobster) & not knock_down(caterpillar, fortress, lobster) => steal_points(lobster, 5, halibut)\n\nkilled(eel, mayor) = True\nbecome_enemy(squid, caterpillar) = True\n\nquestion = steal_points(lobster, 5, halibut)\n"}, {"idx": 181, "response": "give(elephant, magnifying_glass, sun_bear) == True\nnot offer_job_position(sun_bear, swordfish) = rule3()\nnot offer_job_position(sun_bear, swordfish) == True\nburn_warehouse(swordfish, warehouse_of(halibut)) = rule4()\nburn_warehouse(swordfish, warehouse_of(halibut)) == True\nquestion = True", "answer": 1, "code": "rule1() = not offer_job_position(sun_bear, swordfish) & not remove_piece(wolverine, swordfish) => never_burn_warehouse(swordfish, halibut)\nrule2(something) = remove_piece(something, viperfish) => not remove_piece(something, swordfish)\nrule3() = give(elephant, magnifying_glass, sun_bear) => not offer_job_position(sun_bear, swordfish)\nrule4() = give(something, magnifying_glass, parrot) => burn_warehouse(swordfish, warehouse_of(halibut))\norder(rule4) > order(rule1) = True\n\ngive(elephant, magnifying_glass, sun_bear) = True\nhas(sun_bear, card) = True\ncolor(card, violet) = True\nremove_piece(wolverine, viperfish) = True\n\nquestion = burn_warehouse(swordfish, warehouse_of(halibut))\n"}, {"idx": 182, "response": "give(sea_bass, magnifying_glass, polar_bear) == True\nproceed(sea_bass, spot_after(polar_bear)) = rule1()\nproceed(sea_bass, spot_after(polar_bear)) == True\nlearn(polar_bear, elementary_resource_management_from(sun_bear)) = rule1()\nlearn(polar_bear, elementary_resource_management_from(sun_bear)) == True\ndream(sun_bear, luxury_aircraft) == True\nowns(sun_bear, luxury_aircraft) == True\nprepare_armor(sun_bear, crocodile) = rule2()\nprepare_armor(sun_bear, crocodile) == True\nfriends(sun_bear) = energetic_friends(sun_bear) + non_energetic_friends(sun_bear)\nfriends(sun_bear) = 3 + 5\nfriends(sun_bear) = 8\nprepare_armor(sun_bear, crocodile) = rule3()\nprepare_armor(sun_bear, crocodile) == True\nremove(cricket, piece, sun_bear) = rule5()\nremove(cricket, piece, sun_bear) == True\nremove(sun_bear, piece, puffin) = rule4()\nremove(sun_bear, piece, puffin) == True\nremove(sun_bear, piece, puffin) == True\nquestion = True", "answer": 1, "code": "rule1() = proceed(sea_bass, spot_after(polar_bear)) => learn(polar_bear, elementary_resource_management_from(sun_bear))\nrule2() = owns(sun_bear, luxury_aircraft) => prepare_armor(sun_bear, crocodile)\nrule3() = friends(sun_bear) > 2 => prepare_armor(sun_bear, crocodile)\nrule4() = learn(polar_bear, elementary_resource_management_from(sun_bear)) & remove(cricket, piece, sun_bear) => remove(sun_bear, piece, puffin)\nrule5() = sings(victory_song, animal, koala) => remove(cricket, piece, sun_bear)\nrule6(something) = prepare_armor(something, grizzly_bear) & prepare_armor(something, crocodile) => not remove(something, piece, puffin)\nrule7(something) = not burn(something, warehouse, squirrel) => not learn(something, elementary_resource_management_from(sun_bear))\norder(rule6) > order(rule4) = True\norder(rule7) > order(rule1) = True\n\nsings(victory_song, kiwi, koala) = True\ngive(sea_bass, magnifying_glass, polar_bear) = True\ndream(sun_bear, luxury_aircraft) = True\nenergetic_friends(sun_bear) = 3\nnon_energetic_friends(sun_bear) = 5\n\nquestion = remove(sun_bear, piece, puffin)\n"}, {"idx": 183, "response": "points(moose) == points(buffalo) = rule2()\npoints(moose) == points(buffalo) == False\nlearn(sheep, elementary_resource_management_from(squirrel)) = rule1(sheep)\nlearn(sheep, elementary_resource_management_from(squirrel)) == False\nquestion = False", "answer": -1, "code": "rule1(something) = points(something) == points(buffalo) => learn(sheep, elementary_resource_management_from(squirrel))\nrule2() = friends(moose) < 7 => points(moose) == points(buffalo)\n\nfriends(moose) = 5\n\nquestion = learn(sheep, elementary_resource_management_from(squirrel))\n"}, {"idx": 184, "response": "name(hare, Paco) == True\nname(starfish, Pashmak) == True\nfirst_letter_of(name(hare)) == first_letter_of(name(starfish)) == False\nburn_warehouse(hare, cockroach) = False\npurchased(swordfish, time_machine) = True\nbecome_enemy(swordfish, baboon) = rule2()\nbecome_enemy(swordfish, baboon) == True\nnot burn_warehouse(something, cockroach) = rule3()\nnot become_enemy(baboon, lobster) = rule3()\nnot become_enemy(baboon, lobster) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(hare)) == first_letter_of(name(starfish)) => burn_warehouse(hare, cockroach)\nrule2() = purchased(swordfish, time_machine) => become_enemy(swordfish, baboon)\nrule3() = not burn_warehouse(something, cockroach) => not become_enemy(baboon, lobster)\nrule4() = has(swordfish, card) and color(card) in rainbow_colors => become_enemy(swordfish, baboon)\n\nname(hare, Paco) = True\nname(starfish, Pashmak) = True\nhas(swordfish, card) = True\ncolor(card, yellow) = True\ninvented(swordfish, time_machine) = True\n\nquestion = become_enemy(baboon, lobster)\n"}, {"idx": 185, "response": "shows_all_cards(donkey, polar_bear) == True\nlearns(polar_bear, basics_of_resource_management, wolverine) = rule3()\nlearns(polar_bear, basics_of_resource_management, wolverine) == True\nraise_flag_of_peace(viperfish, wolverine) = rule2()\nraise_flag_of_peace(viperfish, wolverine) == True\nadd_conclusion(\"the wolverine proceeds to the spot that is right after the spot of the panther\") = rule2()\nadd_conclusion(\"the wolverine proceeds to the spot that is right after the spot of the panther\") == True\nowns(viperfish, luxury_aircraft) == True\nnot raise_flag_of_peace(viperfish, wolverine) = rule4()\nnot raise_flag_of_peace(viperfish, wolverine) == False\nnot raise_flag_of_peace(viperfish, wolverine) == False\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(viperfish)) == first_letter_of(name(kangaroo)) => not raise_flag_of_peace(viperfish, wolverine)\nrule2() = raise_flag_of_peace(viperfish, wolverine) & learns(polar_bear, elementary_resource_management, wolverine) => add_conclusion(\"the wolverine proceeds to the spot that is right after the spot of the panther\")\nrule3() = shows_all_cards(donkey, polar_bear) => learns(polar_bear, basics_of_resource_management, wolverine)\nrule4() = owns(viperfish, luxury_aircraft) => not raise_flag_of_peace(viperfish, wolverine)\n\nshows_all_cards(donkey, polar_bear) = True\nname(kangaroo, Lucy) = True\nowns(viperfish, luxury_aircraft) = True\nname(viperfish, Lola) = True\n\nquestion = \"the wolverine proceeds to the spot that is right after the spot of the panther\" in conclusions\n"}, {"idx": 186, "response": "has(kangaroo, card) == True\ncolor(card, red) == True\ncolor(card) in primary_colors == True\nnot attack(kangaroo, green_fields, aardvark) = rule2()\nnot attack(kangaroo, green_fields, aardvark) == False\nnot attack(kangaroo, green_fields, aardvark) == False\nfriends(kangaroo) < 6 == True\nattack(kangaroo, green_fields, aardvark) = rule5()\nattack(kangaroo, green_fields, aardvark) == True\nattack(kangaroo, green_fields, aardvark) == True\ngive(kudu, magnifying_glass, sheep) = rule4()\ngive(kudu, magnifying_glass, sheep) == True\ngive(kudu, magnifying_glass, sheep) == True\nquestion = True", "answer": 1, "code": "rule1() = fan_of(kangaroo, Chris_Ronaldo) => attack(kangaroo, green_fields, aardvark)\nrule2() = has(kangaroo, card) and color(card) in primary_colors => not attack(kangaroo, green_fields, aardvark)\nrule3() = owns(kudu, luxury_aircraft) => respect(kudu, dog)\nrule4() = attack(something, green_fields, aardvark) => give(kudu, magnifying_glass, sheep)\nrule5() = friends(kangaroo) < 6 => attack(kangaroo, green_fields, aardvark)\nrule6() = first_letter_of(name(kudu)) == first_letter_of(name(pig)) => respect(kudu, dog)\nrule7(something) = not prepare_armor(something, jellyfish) & respect(something, dog) => not give(something, magnifying_glass, sheep)\norder(rule1) > order(rule2) = True\norder(rule5) > order(rule2) = True\norder(rule7) > order(rule4) = True\n\nhas(kangaroo, beer) = True\nfriends(kangaroo) = 15\nsupports(kangaroo, Chris_Ronaldo) = True\nhas(kangaroo, card) = True\ncolor(card, red) = True\ndream(kudu, luxury_aircraft) = True\nhas(kudu, computer) = True\nhas(kudu, romaine_lettuce) = True\nname(kudu, Max) = True\nname(pig, Meadow) = True\n\nquestion = give(kudu, magnifying_glass, sheep)\n"}, {"idx": 187, "response": "has(halibut, trumpet) == True\nnot need_support(black_bear, halibut) = rule1()\nnot need_support(black_bear, halibut) == True\nnot attack(halibut, green_fields, cockroach) = rule1()\nnot attack(halibut, green_fields, cockroach) == True\nnot burn(warehouse, parrot) = rule2()\nnot burn(warehouse, parrot) == True\nburn(warehouse, parrot) == False\nquestion = False", "answer": -1, "code": "rule1() = not need_support(black_bear, halibut) => not attack(halibut, green_fields, cockroach)\nrule2() = attack(halibut, green_fields, cockroach) => not burn(warehouse, parrot)\nrule3(something) = proceed(something, spot_after(gecko)) => not respect(cockroach, panther)\nrule4() = not roll_dice(tilapia, cockroach) & not attack(zander, green_fields, cockroach) => respect(cockroach, panther)\nrule5(something) = knock_down(something, fortress, doctorfish) & respect(something, panther) => burn(warehouse, parrot)\nrule6() = has(halibut, musical_instrument) => attack(halibut, green_fields, cockroach)\norder(rule1) > order(rule6) = True\norder(rule3) > order(rule4) = True\norder(rule5) > order(rule2) = True\n\nhas(halibut, trumpet) = True\nroll_dice(tilapia, cockroach) = False\nattack(zander, green_fields, cockroach) = False\n\nquestion = burn(warehouse, parrot)\n"}, {"idx": 188, "response": "not knock_down(fortress, aardvark) == True\nnot prepare_armor(pig, donkey) == True\ngive(something, magnifier, raven) = rule2()\ngive(something, magnifier, raven) == True\nburn(warehouse, raven) = rule1()\nburn(warehouse, raven) == True\nsing_victory_song(something, panda_bear) = rule1()\nsing_victory_song(something, panda_bear) == True\nattack(green_fields, baboon) = rule1()\nattack(green_fields, baboon) == True\nquestion = True", "answer": 1, "code": "rule1() = burn(warehouse, raven) & sing_victory_song(something, panda_bear) => attack(green_fields, baboon)\nrule2() = not knock_down(fortress, aardvark) => give(something, magnifier, raven)\nrule3() = not prepare_armor(something, donkey) => sing_victory_song(something, panda_bear)\n\nnot knock_down(fortress, aardvark) = True\nnot prepare_armor(pig, donkey) = True\n\nquestion = attack(green_fields, baboon)\n"}, {"idx": 189, "response": "has(meerkat, card) == True\ncolor(card, red) == True\nsteal_points(meerkat, 5, cheetah) = rule2()\nsteal_points(meerkat, 5, cheetah) == True\nburn_warehouse(meerkat, catfish) = rule3()\nburn_warehouse(meerkat, catfish) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not prepare_armor(something, ferret) => raise_flag_of_peace(something, rabbit)\nrule2() = has(meerkat, card) and color(card) in primary_colors => steal_points(meerkat, 5, cheetah)\nrule3(something) = steal_points(something, 5, cheetah) => burn_warehouse(something, catfish)\n\nhas(meerkat, card) = True\ncolor(card, red) = True\nprepare_armor(eel, ferret) = False\n\nquestion = burn_warehouse(meerkat, catfish)\n"}, {"idx": 190, "response": "has(hummingbird, drink) == True\noffer_job_position(hummingbird, penguin) = rule2()\noffer_job_position(hummingbird, penguin) == True\nfan_of(hummingbird, Chris_Ronaldo) == True\noffer_job_position(hummingbird, penguin) == True\nnot attack(bat, green_fields, owner=cockroach) == True\nremove_piece(cockroach, hummingbird) = rule4()\nremove_piece(cockroach, hummingbird) == True\nnot have(sheep, keys) == True\nneed_support(sheep, hummingbird) = rule5()\nneed_support(sheep, hummingbird) == True\nlearn(hummingbird, basics_of_resource_management, cricket) = rule1()\nlearn(hummingbird, basics_of_resource_management, cricket) == not saw(hummingbird, offer_job_position, penguin)\nlearn(hummingbird, basics_of_resource_management, cricket) == not offer_job_position(hummingbird, penguin)\nlearn(hummingbird, basics_of_resource_management, cricket) == not True\nlearn(hummingbird, basics_of_resource_management, cricket) == False\nquestion = False", "answer": -1, "code": "rule1(something) = saw(something, offer_job_position, penguin) => not learn(something, basics_of_resource_management, cricket)\nrule2() = has(hummingbird, drink) => offer_job_position(hummingbird, penguin)\nrule3() = fan_of(hummingbird, Chris_Ronaldo) => offer_job_position(hummingbird, penguin)\nrule4() = not attack(bat, green_fields, owner=cockroach) => remove_piece(cockroach, hummingbird)\nrule5() = not have(sheep, keys) => need_support(sheep, hummingbird)\n\npoints(cow) == points(starfish) = True\nhas(hummingbird, hot_chocolate) = True\nhates(hummingbird, Chris_Ronaldo) = True\nhave(sheep, keys) = False\nattack(bat, green_fields, owner=cockroach) = False\n\nquestion = learn(hummingbird, basics_of_resource_management, cricket)\n"}, {"idx": 191, "response": "respect(leopard, koala) == True\nnot roll_dice(lobster, koala) == True\nowe(koala, money, polar_bear) = rule2()\nowe(koala, money, polar_bear) == True\nraise_flag_of_peace(polar_bear, elephant) = rule1()\nraise_flag_of_peace(polar_bear, elephant) == True\nquestion = True", "answer": 1, "code": "rule1() = owe(koala, money, polar_bear) => raise_flag_of_peace(polar_bear, elephant)\nrule2() = respect(leopard, koala) & not roll_dice(lobster, koala) => owe(koala, money, polar_bear)\nrule3() = first_letter_of(name(kudu)) == first_letter_of(name(viperfish)) => attack(kudu, green_fields, snail)\n\nname(kudu, Lily) = True\nrespect(leopard, koala) = True\nroll_dice(lobster, koala) = True\nname(viperfish, Lola) = True\n\nquestion = raise_flag_of_peace(polar_bear, elephant)\n"}, {"idx": 192, "response": "name(crocodile, Lily) == True\nname(canary, Lucy) == True\nfirst_letter_of(name(crocodile)) == first_letter_of(name(canary)) == True\nneeds_support(crocodile, squid) = rule1()\nneeds_support(crocodile, squid) == True\nnot owe(kiwi, money, squid) = rule3()\nowe(kiwi, money, squid) == False\nnot owe(kiwi, money, squid) == False\nknow(squid, defense_plan, doctorfish) = rule3()\nknow(squid, defense_plan, doctorfish) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(crocodile)) == first_letter_of(name(canary)) => needs_support(crocodile, squid)\nrule2() = winked_at(something, raven) => not know(squid, defense_plan, doctorfish)\nrule3() = needs_support(crocodile, squid) & not owe(kiwi, money, squid) => know(squid, defense_plan, doctorfish)\nrule4() = has_high_salary(kiwi) => not owe(kiwi, money, squid)\norder(rule2) > order(rule3) = True\n\nname(canary, Lucy) = True\nhas(crocodile, flute) = True\nfriends(crocodile) = 12\nname(crocodile, Lily) = True\ngot_job(kiwi, well_paid) = True\n\nquestion = know(squid, defense_plan, doctorfish)\n"}, {"idx": 193, "response": "has(swordfish, cello) == True\nhas(swordfish, musical_instrument) == True\nsteal_points(swordfish, 5, hummingbird) = rule1()\nsteal_points(swordfish, 5, hummingbird) == True\nroll_dice(hummingbird, eagle) = rule2()\nroll_dice(hummingbird, eagle) == not steal_points(swordfish, 5, hummingbird)\nroll_dice(hummingbird, eagle) == not True\nroll_dice(hummingbird, eagle) == False\nquestion = False", "answer": -1, "code": "rule1() = has(swordfish, musical_instrument) => steal_points(swordfish, 5, hummingbird)\nrule2() = steal_points(swordfish, 5, hummingbird) => not roll_dice(hummingbird, eagle)\n\nhas(swordfish, cello) = True\n\nquestion = roll_dice(hummingbird, eagle)\n"}, {"idx": 194, "response": "killed(sea_bass, mayor) == True\nsteal_points(sea_bass, 5, hippopotamus) = rule7()\nsteal_points(sea_bass, 5, hippopotamus) == True\nwink(hippopotamus, crocodile) = rule4()\nwink(hippopotamus, crocodile) == True\nwink(hippopotamus, crocodile) == True\nquestion = True", "answer": 1, "code": "rule1() = not raise_flag_of_peace(blobfish, black_bear) => not learn(black_bear, basics_of_resource_management, hippopotamus)\nrule2() = not roll_dice(hare, hippopotamus) & steal_points(sea_bass, 5, hippopotamus) => not wink(hippopotamus, crocodile)\nrule3() = attack(something, green_fields, ferret) => not steal_points(sea_bass, 5, hippopotamus)\nrule4() = learn(black_bear, elementary_resource_management, hippopotamus) => wink(hippopotamus, crocodile)\nrule5() = not knock_down(swordfish, fortress, black_bear) => learn(black_bear, elementary_resource_management, hippopotamus)\nrule6() = first_letter_of(name(sea_bass)) == first_letter_of(name(starfish)) => steal_points(sea_bass, 5, hippopotamus)\nrule7() = killed(sea_bass, mayor) => steal_points(sea_bass, 5, hippopotamus)\norder(rule1) > order(rule5) = True\norder(rule3) > order(rule6) = True\norder(rule3) > order(rule7) = True\norder(rule4) > order(rule2) = True\n\npoints(blobfish) == points(black_bear) = True\nkilled(sea_bass, mayor) = True\nname(sea_bass, Tango) = True\nname(starfish, Tessa) = True\nneed_support(swordfish, black_bear) = False\n\nquestion = wink(hippopotamus, crocodile)\n"}, {"idx": 195, "response": "published(baboon, high_quality_paper) == True\nhas(baboon, high_quality_paper) == True\noffer_job_position(baboon, panther) = rule1()\noffer_job_position(baboon, panther) == True\nbelief(salmon_rolls_dice_for(panther)) & offer_job_position(baboon, panther) => raise_flag_of_peace(panther, kudu) = rule3()\nraise_flag_of_peace(panther, kudu) == True\nraise_flag_of_peace(panther, kudu) == True\nquestion = True", "answer": 1, "code": "rule1() = has(baboon, high_quality_paper) => offer_job_position(baboon, panther)\nrule2() = has(baboon, leafy_green_vegetable) => offer_job_position(baboon, panther)\nrule3() = belief(salmon_rolls_dice_for(panther)) & offer_job_position(baboon, panther) => raise_flag_of_peace(panther, kudu)\nrule4() = remove(caterpillar, piece, salmon) => rolls_dice(salmon, panther)\n\nhas(baboon, computer) = True\npublished(baboon, high_quality_paper) = True\nremove(caterpillar, piece, salmon) = True\n\nquestion = raise_flag_of_peace(panther, kudu)\n"}, {"idx": 196, "response": "owe(eagle, money, lion) == True\nnot knows(lion, defensive_plans, goldfish) = rule3()\nnot knows(lion, defensive_plans, goldfish) == True\nnot knows(lion, defensive_plans, goldfish) == True\nnot attack(goldfish, green_fields, parrot) = rule2()\nnot attack(goldfish, green_fields, parrot) == True\nnot attack(goldfish, green_fields, parrot) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(lion) > 1 => knows(lion, defensive_plans, goldfish)\nrule2() = not become_enemy(turtle, goldfish) & not knows(lion, defensive_plans, goldfish) => not attack(goldfish, green_fields, parrot)\nrule3() = owe(eagle, money, lion) => not knows(lion, defensive_plans, goldfish)\nrule4(something) = eat_food(something, food_of(donkey)) => become_enemy(something, goldfish)\nrule5() = give(squid, magnifier, turtle) => not become_enemy(turtle, goldfish)\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule5) = True\n\nowe(eagle, money, lion) = True\ngive(squid, magnifier, turtle) = True\n\nquestion = attack(goldfish, green_fields, parrot)\n"}, {"idx": 197, "response": "name(salmon, Meadow) == True\nname(elephant, Lola) == True\nfirst_letter_of(name(salmon)) == first_letter_of(name(elephant)) = True\nnot sing_victory_song(salmon, amberjack) = rule3()\nsing_victory_song(salmon, amberjack) == False\nnot sing_victory_song(salmon, amberjack) == False\nroll_dice(amberjack, baboon) = rule1()\nroll_dice(amberjack, baboon) == True\nquestion = True", "answer": 1, "code": "rule1() = not sing_victory_song(salmon, amberjack) => roll_dice(amberjack, baboon)\nrule2() = raise_flag_of_peace(something, grasshopper) => sing_victory_song(salmon, amberjack)\nrule3() = first_letter_of(name(salmon)) == first_letter_of(name(elephant)) => not sing_victory_song(salmon, amberjack)\norder(rule3) > order(rule2) = True\n\nname(elephant, Lola) = True\nproceeds_to_spot(rabbit, right_after(grasshopper)) = True\nname(salmon, Meadow) = True\n\nquestion = roll_dice(amberjack, baboon)\n"}, {"idx": 198, "response": "has(squirrel, card) == True\ncolor(card, white) == True\ncolor(card) in flag_colors(Netherlands) == True\nshow_cards(squirrel, all, turtle) = rule1()\nshow_cards(squirrel, all, turtle) == True\nvoted(squirrel, mayor) = True\nshow_cards(squirrel, all, turtle) == True\nknows(catfish, defensive_plans, elephant) = rule2()\nknows(catfish, defensive_plans, elephant) == True\nquestion = True", "answer": 1, "code": "rule1() = has(squirrel, card) and color(card) in flag_colors(Netherlands) => show_cards(squirrel, all, turtle)\nrule2() = show_cards(something, all, turtle) => knows(catfish, defensive_plans, elephant)\nrule3() = needs_support(grizzly_bear, catfish) => not burn_warehouse(catfish, octopus)\nrule4() = prepare_armor(hummingbird, catfish) & respect(polar_bear, catfish) => offer_job_position(catfish, buffalo)\nrule5() = first_letter_of(name(catfish)) == first_letter_of(name(goldfish)) => burn_warehouse(catfish, octopus)\nrule6() = voted(squirrel, mayor) => show_cards(squirrel, all, turtle)\nrule7() = has(catfish, musical_instrument) => not offer_job_position(catfish, buffalo)\nrule8() = has(catfish, something_to_carry_apples_and_oranges) => burn_warehouse(catfish, octopus)\norder(rule3) > order(rule5) = True\norder(rule3) > order(rule8) = True\norder(rule7) > order(rule4) = True\n\nhas(catfish, knapsack) = True\nname(catfish, Tango) = True\nname(goldfish, Pashmak) = True\nprepare_armor(hummingbird, catfish) = True\nrespect(polar_bear, catfish) = True\nassassinated(squirrel, mayor) = True\nhas(squirrel, card) = True\ncolor(card, white) = True\nnot roll_dice(squirrel, phoenix) = True\n\nquestion = knows(catfish, defensive_plans, elephant)\n"}, {"idx": 199, "response": "has(dog, card) == True\ncolor(card, red) == True\ncolor(card) in flag_colors(japan) == True\nhas(dog, musical_instrument) == True\nraise_flag_of_peace(dog, cat) = rule3()\nraise_flag_of_peace(dog, cat) == True\nsing_song_of_victory(dog, parrot) = rule4()\nsing_song_of_victory(dog, parrot) == True\nraise_flag_of_peace(dog, cat) == True\nsing_song_of_victory(dog, parrot) == True\noffer_job_position(dog, snail) = rule5()\noffer_job_position(dog, snail) == False\nquestion = False", "answer": -1, "code": "rule1(something) = knocks_down(something, fortress_of(carp)) => not raise_flag_of_peace(something, cat)\nrule2() = friends(dog) > 20 => raise_flag_of_peace(dog, cat)\nrule3() = has(dog, musical_instrument) => raise_flag_of_peace(dog, cat)\nrule4() = has(dog, card) and color(card) in flag_colors(japan) => sing_song_of_victory(dog, parrot)\nrule5(something) = raise_flag_of_peace(something, cat) & sing_song_of_victory(something, parrot) => not offer_job_position(something, snail)\norder(rule1) > order(rule2) = True\norder(rule1) > order(rule3) = True\n\nhas(dog, card) = True\ncolor(card, red) = True\nhas(dog, violin) = True\nfriends(dog) = 10\n\nquestion = offer_job_position(dog, snail)\n"}, {"idx": 200, "response": "name(viperfish, Max) == True\nfirst_letter_of(name(cow)) == first_letter_of(name(viperfish)) = True\nnot learn(cow, elementary_resource_management, spider) = rule1()\nnot learn(cow, elementary_resource_management, spider) == True\nbecome_enemy(dog, spider) = rule3()\nbecome_enemy(dog, spider) == True\nnot learn(cow, elementary_resource_management, spider) == True\nknow(spider, defensive_plans, puffin) = rule5()\nknow(spider, defensive_plans, puffin) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(cow)) == first_letter_of(name(viperfish)) => not learn(cow, elementary_resource_management, spider)\nrule2() = raise_flag_of_peace(something, eel) & steal_points(something, 5, amberjack) => learn(something, elementary_resource_management, spider)\nrule3() = friends(dog) < 7 => become_enemy(dog, spider)\nrule4() = took(dog, bike, store) => become_enemy(dog, spider)\nrule5() = not learn(cow, elementary_resource_management, spider) & become_enemy(dog, spider) => know(spider, defensive_plans, puffin)\norder(rule1) > order(rule2) = True\n\nraise_flag_of_peace(cow, eel) = True\nsteal_points(cow, 5, amberjack) = True\nfriends(dog) = 16\ntook(dog, bike, store) = True\nname(viperfish, Max) = True\n\nquestion = know(spider, defensive_plans, puffin)\n"}, {"idx": 201, "response": "has(jellyfish, card) == True\ncolor(card, red) == True\ncolor(card) in flag_of_france_colors = True\nsteal_points(jellyfish, 5, kudu) = rule4()\nsteal_points(jellyfish, 5, kudu) == True\noffer_job_position(jellyfish, hummingbird) = rule2()\noffer_job_position(jellyfish, hummingbird) == True\nowe(jellyfish, money, moose) = rule1()\nowe(jellyfish, money, moose) == True\nquestion = True", "answer": 1, "code": "rule1() = steal_points(something, 5, kudu) & offer_job_position(something, hummingbird) => owe(something, money, moose)\nrule2() = not burn(starfish, warehouse, jellyfish) => offer_job_position(jellyfish, hummingbird)\nrule3() = first_letter_of(name(jellyfish)) == first_letter_of(name(cricket)) => not offer_job_position(jellyfish, hummingbird)\nrule4() = has(jellyfish, card) and color(card) in flag_of_france_colors => steal_points(jellyfish, 5, kudu)\nrule5() = has(jellyfish, musical_instrument) => not offer_job_position(jellyfish, hummingbird)\norder(rule3) > order(rule2) = True\norder(rule5) > order(rule2) = True\n\nhas(jellyfish, cappuccino) = True\nname(jellyfish, Lucy) = True\nhas(jellyfish, card) = True\ncolor(card, red) = True\nburn(starfish, warehouse, jellyfish) = False\n\nquestion = owe(jellyfish, money, moose)\n"}, {"idx": 202, "response": "has(halibut, card) and color(card, white) == True\nhas(halibut, card) and color(card, colors_of(flag_of_Netherlands)) == True\nburns_warehouse(halibut, gecko) = rule5()\nburns_warehouse(halibut, gecko) == True\noffer_job_position(halibut, buffalo) = rule1()\noffer_job_position(halibut, buffalo) == True\nquestion = True", "answer": 1, "code": "rule1(something) = burns_warehouse(something, gecko) => offer_job_position(something, buffalo)\nrule2() = friends(lobster) > 5 => attacks(lobster, green_fields, halibut)\nrule3() = has(amberjack, card) and color(card) in primary_colors => steal_points(amberjack, 5, halibut)\nrule4() = has(amberjack, leafy_green_vegetable) => steal_points(amberjack, 5, halibut)\nrule5() = has(halibut, card) and color(card) in colors_of(flag_of_Netherlands) => burns_warehouse(halibut, gecko)\nrule6() = steal_points(amberjack, 5, halibut) & attacks(lobster, green_fields, halibut) => not offer_job_position(halibut, buffalo)\nrule7() = friends(amberjack) > 18 => not steal_points(amberjack, 5, halibut)\nrule8() = first_letter_of(name(halibut)) == first_letter_of(name(koala)) => burns_warehouse(halibut, gecko)\nrule9() = has(amberjack, high_salary) => not steal_points(amberjack, 5, halibut)\norder(rule6) > order(rule1) = True\norder(rule7) > order(rule3) = True\norder(rule7) > order(rule4) = True\norder(rule9) > order(rule3) = True\norder(rule9) > order(rule4) = True\n\nhas(amberjack, card) and color(card, yellow) = True\nhas(amberjack, spinach) = True\nfriends(amberjack) = 10\nhas(halibut, card) and color(card, white) = True\nshow_all_cards(halibut, canary) = False\nname(halibut, Lily) = True\nraise_flag_of_peace(halibut, doctorfish) = True\nname(koala, Tango) = True\nbald_friends(lobster) = 3\nnon_bald_friends(lobster) = 3\n\nquestion = offer_job_position(halibut, buffalo)\n"}, {"idx": 203, "response": "took(buffalo, bike, store) == True\ntook(buffalo, bike, store) == True\nnot become_enemy(buffalo, starfish) = rule1()\nnot become_enemy(buffalo, starfish) == True\nknows(starfish, defensive_plans, eel) = rule7()\nknows(starfish, defensive_plans, eel) == True\nknows(starfish, defensive_plans, eel) == True\nquestion = True", "answer": 1, "code": "rule1() = took(buffalo, bike, store) => not become_enemy(buffalo, starfish)\nrule2() = starts_with(color(card, \"l\")) => not equal_points(penguin, starfish)\nrule3() = friends(buffalo) < 1 => become_enemy(buffalo, starfish)\nrule4() = has(penguin, drink) => equal_points(penguin, starfish)\nrule5(something) = respects(something, doctorfish) => not become_enemy(something, buffalo)\nrule6() = friends(penguin) < 15 => not equal_points(penguin, starfish)\nrule7() = become_enemy(buffalo, starfish) & not equal_points(penguin, starfish) => knows(starfish, defensive_plans, eel)\nrule8(something) = owe(something, money, panda_bear) & not become_enemy(something, buffalo) => not knows(something, defense_plan, eel)\nrule9() = first_letter_of(name(buffalo)) == first_letter_of(name(dog)) => become_enemy(buffalo, starfish)\norder(rule1) > order(rule3) = True\norder(rule1) > order(rule9) = True\norder(rule2) > order(rule4) = True\norder(rule6) > order(rule4) = True\norder(rule8) > order(rule7) = True\n\nfriends(buffalo) = 2\nhas_friend(buffalo, easy_going) = True\nhas_friend(buffalo, not_easy_going) = True\nname(buffalo, Milo) = True\ntook(buffalo, bike, store) = True\nname(dog, Mojo) = True\nhas(penguin, card) = True\ncolor(card, blue) = True\nfriends(penguin) = 6\nhas(starfish, tablet) = True\nrespects(starfish, doctorfish) = True\n\nquestion = knows(starfish, defensive_plans, eel)\n"}, {"idx": 204, "response": "give(moose, magnifier, panda_bear) == True\nproceed(panda_bear, spot_right_after(kangaroo)) = rule1()\nproceed(panda_bear, spot_right_after(kangaroo)) == True\ngive(kiwi, magnifier, squid) = rule2()\ngive(kiwi, magnifier, squid) == True\nquestion = True", "answer": 1, "code": "rule1() = give(moose, magnifier, panda_bear) => proceed(panda_bear, spot_right_after(kangaroo))\nrule2() = proceed(something, spot_right_after(kangaroo)) => give(kiwi, magnifier, squid)\n\ngive(moose, magnifier, panda_bear) = True\n\nquestion = give(kiwi, magnifier, squid)\n"}, {"idx": 205, "response": "name(halibut, Cinnamon) == True\nname(eagle, Casper) == True\nfirst_letter_of(name(halibut)) == first_letter_of(name(eagle)) == True\nnot need_support(halibut, canary) = rule5()\nnot need_support(halibut, canary) == True\nnot need_support(halibut, canary) == True\nremove_piece(halibut, jellyfish) = rule4()\nremove_piece(halibut, jellyfish) == True\nremove_piece(halibut, jellyfish) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not roll_dice(something, donkey) => not sing_song_of_victory(something, catfish)\nrule2() = has(halibut, card) and starts_with(color_of(card), \"e\") => not need_support(halibut, canary)\nrule3() = not show_all_cards(canary, halibut) & not knock_down(phoenix, fortress_of(halibut)) => sing_song_of_victory(halibut, catfish)\nrule4() = exists(something) such that points(something) == points(panther) => remove_piece(halibut, jellyfish)\nrule5() = first_letter_of(name(halibut)) == first_letter_of(name(eagle)) => not need_support(halibut, canary)\nrule6() = sing_song_of_victory(something, catfish) & not need_support(something, canary) => not remove_piece(something, jellyfish)\nrule7() = learn(kudu, elementary_resource_management_from(halibut)) => need_support(halibut, canary)\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule6) = True\norder(rule7) > order(rule2) = True\norder(rule7) > order(rule5) = True\n\nname(eagle, Casper) = True\nhas(halibut, card) = True\ncolor_of(card, red) = True\nname(halibut, Cinnamon) = True\nshow_all_cards(canary, halibut) = False\nknock_down(phoenix, fortress_of(halibut)) = False\n\nquestion = remove_piece(halibut, jellyfish)\n"}, {"idx": 206, "response": "name(halibut, Paco) == True\nname(ferret, Beauty) == True\nfirst_letter_of(name(halibut)) == first_letter_of(name(ferret)) = True\nshow_all_cards(halibut, tiger) = rule1()\nshow_all_cards(halibut, tiger) == True\nfriends(halibut) = 13\nattack_green_fields(halibut, owner(kangaroo)) = rule4()\nattack_green_fields(halibut, owner(kangaroo)) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(halibut)) == first_letter_of(name(ferret)) => show_all_cards(halibut, tiger)\nrule2() = friends(halibut) > 12 => attack_green_fields(halibut, owner(hummingbird))\nrule3() = has(halibut, card) and color(card) in colors_of_flag(Belgium) => show_all_cards(halibut, tiger)\nrule4() = become_enemy(something, hummingbird) & show_all_cards(something, tiger) => attack_green_fields(something, owner(kangaroo))\nrule5() = has_difficulty(halibut, find_food) => attack_green_fields(halibut, owner(hummingbird))\n\nname(ferret, Beauty) = True\nhas(halibut, card) = True\ncolor(card, black) = True\nname(halibut, Paco) = True\nstruggles_to_find_food(halibut) = True\nfriends(halibut) = 13\n\nquestion = attack_green_fields(halibut, owner(kangaroo))\n"}, {"idx": 207, "response": "proceed_to_spot(crocodile) == spot_right_after(puffin) == True\nremove_piece(panther, jellyfish) = rule8()\nremove_piece(panther, jellyfish) == True\nshow_cards(panther, all, sheep) = rule8()\nshow_cards(panther, all, sheep) == True\nhas(panther, card) == True\ncolor(card, black) == True\nhas(panther, drink) == True\nshow_cards(panther, all, sheep) == True\nhold_equal_points(panther, starfish) = rule8()\nhold_equal_points(panther, starfish) == True\nremove_piece(panther, jellyfish) == True\nquestion = True", "answer": 1, "code": "rule1() = not prepare_armor(tiger, panther) => not hold_equal_points(panther, starfish)\nrule2() = first_letter_of(name(panther)) == first_letter_of(name(moose)) => hold_equal_points(panther, starfish)\nrule3() = proceed_to_spot(animal) == spot_right_after(puffin) => owe(canary, money, sun_bear)\nrule4() = has_high_salary(panther) => hold_equal_points(panther, starfish)\nrule5() = friends(canary) > 10 => not owe(canary, money, sun_bear)\nrule6() = has(panther, card) and color(card) in rainbow_colors => show_cards(panther, all, sheep)\nrule7() = has(panther, drink) => show_cards(panther, all, sheep)\nrule8() = hold_equal_points(something, starfish) & show_cards(something, all, sheep) => remove_piece(something, jellyfish)\norder(rule1) > order(rule2) = True\norder(rule1) > order(rule4) = True\norder(rule5) > order(rule3) = True\n\nproceed_to_spot(crocodile) == spot_right_after(puffin) = True\nname(moose, Tango) = True\ngot_well_paid_job(panther) = True\nhas(panther, card) = True\ncolor(card, black) = True\nhas(panther, hot_chocolate) = True\nname(panther, Max) = True\n\nquestion = remove_piece(panther, jellyfish)\n"}, {"idx": 208, "response": "has_high_salary(hare) == True\nsing_victory_song(hare, cat) = rule2()\nsing_victory_song(hare, cat) == True\nprepare_armor(hare, carp) = rule6()\nprepare_armor(hare, carp) == not prepare_armor(hare, carp) == not prepare_armor(something, carp) == not prepare_armor(hare, carp) == True\nquestion = True", "answer": 1, "code": "rule1() = has(hare, something_to_carry_apples_and_oranges) => not sing_victory_song(hare, cat)\nrule2() = has_high_salary(hare) => sing_victory_song(hare, cat)\nrule3() = has(hare, card) and starts_with(color_of(card), \"l\") => sing_victory_song(hare, cat)\nrule4() = first_letter_of(name(hare)) == first_letter_of(name(lobster)) => wink(hare, phoenix)\nrule5() = has(hare, something_to_drink) => wink(hare, phoenix)\nrule6() = sing_victory_song(something, cat) & wink(something, phoenix) => not prepare_armor(something, carp)\norder(rule1) > order(rule2) = True\norder(rule1) > order(rule3) = True\n\nhas_high_salary(hare) = True\nhas(hare, card) = True\ncolor_of(card, black) = True\nhas(hare, cello) = True\nname(hare, Meadow) = True\nname(lobster, Max) = True\n\nquestion = prepare_armor(hare, carp)\n"}, {"idx": 209, "response": "has_difficulty(eel, find_food) == True\nrespect(eel, leopard) = rule1()\nrespect(eel, leopard) == True\nhas(eel, cutter) == True\nhas(eel, something_to_carry(apples, oranges)) == False\nrespect(eel, leopard) == True\nstruggles_to_find_food(eel) == True\nbecome_enemy(eel, leopard) = True\noffer_job_position(octopus, carp) = rule3()\noffer_job_position(octopus, carp) == True\nquestion = True", "answer": 1, "code": "rule1() = has_difficulty(eel, find_food) => respect(eel, leopard)\nrule2() = has(eel, something_to_carry(apples, oranges)) => respect(eel, leopard)\nrule3(something) = become_enemy(something, leopard) => offer_job_position(octopus, carp)\n\nhas(eel, cutter) = True\nstruggles_to_find_food(eel) = True\n\nquestion = offer_job_position(octopus, carp)\n"}, {"idx": 210, "response": "shows(tilapia, all_cards, meerkat) == True\nowes(kiwi, money, meerkat) == True\nadd_conclusion(\"the meerkat respects the swordfish\") = rule1()\nadd_conclusion(\"the meerkat respects the swordfish\") == True\nrespects(something, swordfish) = True\nlearn(viperfish, basics_of_resource_management, mosquito) = rule2()\nlearn(viperfish, basics_of_resource_management, mosquito) == True\nquestion = True", "answer": 1, "code": "rule1() = shows(tilapia, all_cards, meerkat) & owes(kiwi, money, meerkat) => add_conclusion(\"the meerkat respects the swordfish\")\nrule2() = respects(something, swordfish) => learn(viperfish, basics_of_resource_management, mosquito)\n\nowes(kiwi, money, meerkat) = True\nshows(tilapia, all_cards, meerkat) = True\n\nquestion = learn(viperfish, basics_of_resource_management, mosquito)\n"}, {"idx": 211, "response": "has(hare, card) == True\ncolor(card, blue) == True\ncolor(card) in primary_colors == True\nlearn(hare, basics_of_resource_management, pig) = rule1()\nlearn(hare, basics_of_resource_management, pig) == True\nraise_flag_of_peace(something, hare) = rule2()\nraise_flag_of_peace(something, hare) == False\nowe(pig, money, rabbit) = rule2()\nowe(pig, money, rabbit) == False\nlearn(hare, elementary_resource_management, pig) = rule3()\nlearn(hare, elementary_resource_management, pig) == False\nnot owe(pig, money, rabbit) = rule3()\nnot owe(pig, money, rabbit) == True\npublished(hare, high_quality_paper) = True\nlearn(hare, basics_of_resource_management, pig) == True\nquestion = False", "answer": -1, "code": "rule1() = has(hare, card) and color(card) in primary_colors => learn(hare, basics_of_resource_management, pig)\nrule2() = raise_flag_of_peace(something, hare) => owe(pig, money, rabbit)\nrule3() = learn(hare, elementary_resource_management, pig) => not owe(pig, money, rabbit)\nrule4() = published(hare, high_quality_paper) => learn(hare, basics_of_resource_management, pig)\norder(rule2) > order(rule3) = True\n\nhas(hare, card) = True\ncolor(card, blue) = True\nrecently_read(hare, high_quality_paper) = True\n\nquestion = owe(pig, money, rabbit)\n"}, {"idx": 212, "response": "prepare_armor(buffalo, halibut) = True\nrespect(penguin, halibut) = True\nnot respect(penguin, halibut) = False\nprepare_armor(buffalo, halibut) & not respect(penguin, halibut) = True\nadd_conclusion(\"the halibut does not owe $$$ to the panther\") = rule1()\nadd_conclusion(\"the halibut does not owe $$$ to the panther\") == True\nnot owe(halibut, money, panther) = True\nlearn(panther, basics_of_resource_management, goldfish) = rule2()\nlearn(panther, basics_of_resource_management, goldfish) == True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(buffalo, halibut) & not respect(penguin, halibut) => add_conclusion(\"the halibut does not owe $$$ to the panther\")\nrule2() = not owe(halibut, money, panther) => learn(panther, basics_of_resource_management, goldfish)\n\nprepare_armor(buffalo, halibut) = True\nprepare_armor(dog, hare) = True\nrespect(penguin, halibut) = True\n\nquestion = learn(panther, basics_of_resource_management, goldfish)\n"}, {"idx": 213, "response": "friends(koala) = 1\nroll_dice(koala, lion) = rule4()\nroll_dice(koala, lion) == not roll_dice(koala, lion)\nroll_dice(koala, lion) == not roll_dice(koala, lion)\nquestion = not roll_dice(koala, lion)\n", "answer": 0, "code": "rule1() = friends(koala) < 6 => not attack(koala, green_fields, baboon)\nrule2() = has(koala, carry_apples_and_oranges) => not attack(koala, green_fields, owner(baboon))\nrule3() = owe(penguin, money, koala) & become_enemy(panda_bear, koala) => steal_points(koala, 5, salmon)\nrule4(something) = points(something) == points(black_bear) => not roll_dice(something, lion)\nrule5(something) = steal_points(something, 5, salmon) & not attack(something, green_fields, baboon) => roll_dice(something, lion)\norder(rule4) > order(rule5) = True\n\nfriends(koala) = 1\nhas(koala, cell_phone) = True\nbecome_enemy(panda_bear, koala) = True\nowe(penguin, money, koala) = True\n\nquestion = roll_dice(koala, lion)\n"}, {"idx": 214, "response": "attacks(squirrel, green_fields, owner(ferret)) == True\nnot respect(squirrel, leopard) == True\noffer_job_position(squirrel, canary) = rule2()\noffer_job_position(squirrel, canary) == True\nnot sing_victory_song(oscar, swordfish) = rule1()\nsing_victory_song(oscar, swordfish) == False\nquestion = False", "answer": -1, "code": "rule1() = offer_job_position(something, canary) => not sing_victory_song(oscar, swordfish)\nrule2(something) = not respect(something, leopard) & attacks(something, green_fields, owner(ferret)) => offer_job_position(something, canary)\nrule3() = show_all_cards(something, halibut) => not prepare_armor(oscar, canary)\n\nshow_all_cards(dog, halibut) = True\nattacks(squirrel, green_fields, owner(ferret)) = True\nnot respect(squirrel, leopard) = True\n\nquestion = sing_victory_song(oscar, swordfish)\n"}, {"idx": 215, "response": "knows(crocodile, defensive_plans, panther) == True\ngive(crocodile, magnifier, pig) = rule2(crocodile)\ngive(crocodile, magnifier, pig) == True\nlearn(crocodile, basics_of_resource_management, jellyfish) = rule2(crocodile)\nlearn(crocodile, basics_of_resource_management, jellyfish) == True\neat(crocodile, food_of(zander)) = rule2(crocodile)\neat(crocodile, food_of(zander)) == True\nquestion = True", "answer": 1, "code": "rule1() = knows(something, defensive_plans, panther) => not learn(black_bear, basics_of_resource_management, jellyfish)\nrule2(something) = give(something, magnifier, pig) & learn(something, basics_of_resource_management, jellyfish) => eat(something, food_of(zander))\nrule3() = remove(parrot, piece, black_bear) & not eat(wolverine, food_of(black_bear)) => give(black_bear, magnifier, pig)\n\nknows(crocodile, defensive_plans, panther) = True\nremove(parrot, piece, black_bear) = True\nnot eat(wolverine, food_of(black_bear)) = True\n\nquestion = eat(black_bear, food_of(zander))\n"}, {"idx": 216, "response": "offer_job_position(grizzly_bear, turtle) == True\neat_food(grizzly_bear, food_of(parrot)) = rule1()\neat_food(grizzly_bear, food_of(parrot)) == True\nshow_all_cards(squid, parrot) = rule3()\nshow_all_cards(squid, parrot) == True\nknock_down_fortress(parrot, fortress_of(blobfish)) = rule2()\nknock_down_fortress(parrot, fortress_of(blobfish)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = offer_job_position(something, turtle) => eat_food(something, food_of(parrot))\nrule2() = eat_food(grizzly_bear, food_of(parrot)) & show_all_cards(squid, parrot) => knock_down_fortress(parrot, fortress_of(blobfish))\nrule3() = become_enemy(something, raven) => show_all_cards(squid, parrot)\n\nbecome_enemy(cockroach, raven) = True\noffer_job_position(grizzly_bear, turtle) = True\n\nquestion = knock_down_fortress(parrot, fortress_of(blobfish))\n"}, {"idx": 217, "response": "has(baboon, card) == True\ncolor(card, red) == True\ncolor(card) in primary_colors == True\nsteal_points(baboon, 5, leopard) = rule1()\nsteal_points(baboon, 5, leopard) == True\nhas(baboon, saxophone) == True\noffer_job_position(baboon, puffin) = rule2()\noffer_job_position(baboon, puffin) == False\nnot offer_job_position(something, puffin) & steal_points(something, 5, leopard) => not offer_job_position(something, kudu) = rule3()\nnot offer_job_position(baboon, puffin) == True\nsteal_points(baboon, 5, leopard) == True\nnot offer_job_position(baboon, kudu) == True\nbelief(polar_bear, winks_at, baboon) == True\nroll_dice(catfish, baboon) == False\noffer_job_position(baboon, puffin) = rule4()\noffer_job_position(baboon, puffin) == True\norder(rule4) > order(rule2) == True\noffer_job_position(baboon, puffin) == True\nquestion = True", "answer": 1, "code": "rule1() = has(baboon, card) and color(card) in primary_colors => steal_points(baboon, 5, leopard)\nrule2() = has(baboon, musical_instrument) => not offer_job_position(baboon, puffin)\nrule3() = not offer_job_position(something, puffin) & steal_points(something, 5, leopard) => not offer_job_position(something, kudu)\nrule4() = belief(polar_bear, winks_at, baboon) & not roll_dice(catfish, baboon) => offer_job_position(baboon, puffin)\norder(rule4) > order(rule2) = True\n\nhas(baboon, card) = True\ncolor(card, red) = True\nhas(baboon, saxophone) = True\nbelief(polar_bear, winks_at, baboon) = True\n\nquestion = offer_job_position(baboon, kudu)\n"}, {"idx": 218, "response": "owe(zander, money, cow) == True\nnot owe(zander, money, cow) == False\nnot offer_job_position(zander, grizzly_bear) == False\nnot offer_job_position(zander, tilapia) = rule1()\nnot offer_job_position(zander, tilapia) == True\nhas(tilapia, card) == True\ncolor(card) in colors_of_flag(Japan) == True\nnot respect(tilapia, octopus) = rule2()\nnot respect(tilapia, octopus) == True\nnot respect(tilapia, octopus) == True\nnot offer_job_position(zander, tilapia) == True\noffer_job_position(tilapia, viperfish) = rule3()\noffer_job_position(tilapia, viperfish) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not owe(something, money, cow) & not offer_job_position(something, grizzly_bear) => not offer_job_position(something, tilapia)\nrule2() = has(tilapia, card) & color(card) in colors_of_flag(Japan) => not respect(tilapia, octopus)\nrule3() = not offer_job_position(zander, tilapia) => offer_job_position(tilapia, viperfish)\nrule4() = first_letter_of(name(tilapia)) == first_letter_of(name(penguin)) => not respect(tilapia, octopus)\n\nname(penguin, Lily) = True\nsteal(snail, 5, points, tilapia) = True\nhas(tilapia, card) = True\ncolor(card, green) = True\nname(tilapia, Casper) = True\nowe(zander, money, cow) = True\noffer_job_position(zander, grizzly_bear) = False\n\nquestion = offer_job_position(tilapia, viperfish)\n"}, {"idx": 219, "response": "has(jellyfish, high_quality_paper) == True\nshow_cards(jellyfish, polar_bear) = rule2()\nshow_cards(jellyfish, polar_bear) == True\nowe(leopard, money, cow) = rule1()\nowe(leopard, money, cow) == True\nquestion = True", "answer": 1, "code": "rule1() = show_cards(something, polar_bear) => owe(leopard, money, cow)\nrule2() = has(jellyfish, high_quality_paper) => show_cards(jellyfish, polar_bear)\n\nname(canary, Luna) = True\nname(jellyfish, Lola) = True\nhas(jellyfish, high_quality_paper) = True\n\nquestion = owe(leopard, money, cow)\n"}, {"idx": 220, "response": "has(turtle, card) == True\ncolor(card(turtle)) in primary_colors == True\nnot give(turtle, magnifying_glass, mosquito) = rule2()\nnot give(turtle, magnifying_glass, mosquito) == True\nknows(wolverine, defensive_plans, koala) == True\ngive(turtle, magnifying_glass, mosquito) = rule3()\ngive(turtle, magnifying_glass, mosquito) == True\nshow_cards(something, all, jellyfish) = rule4()\nshow_cards(something, all, jellyfish) == False\nnot become_enemy(turtle, gecko) = rule4()\nbecome_enemy(turtle, gecko) == False\nbecome_enemy(turtle, gecko) == False\nquestion = False", "answer": -1, "code": "rule1() = has(eel, drink) => not show_cards(eel, all, jellyfish)\nrule2() = has(turtle, card) and color(card) in primary_colors => not give(turtle, magnifying_glass, mosquito)\nrule3() = knows(something, defensive_plans, koala) => give(turtle, magnifying_glass, mosquito)\nrule4() = show_cards(something, all, jellyfish) => not become_enemy(turtle, gecko)\nrule5() = give(something, magnifying_glass, mosquito) & learn(something, basics_of_resource_management, starfish) => become_enemy(something, gecko)\nrule6() = prepare_armor(something, buffalo) => learn(something, elementary_resource_management, starfish)\nrule7() = respects(something, raven) => show_cards(eel, all, jellyfish)\norder(rule3) > order(rule2) = True\norder(rule4) > order(rule5) = True\norder(rule7) > order(rule1) = True\n\nhas(eel, beer) = True\nrespects(snail, raven) = True\ngot_job(turtle, well_paid) = True\nhas(turtle, card) = True\ncolor(card(turtle), violet) = True\nprepare_armor(turtle, buffalo) = True\nknows(wolverine, defensive_plans, koala) = True\n\nquestion = become_enemy(turtle, gecko)\n"}, {"idx": 221, "response": "has(whale, drink) == True\nnot steal_points(whale, 5, amberjack) = rule2()\nsteal_points(something, 5, amberjack) = rule1()\nsteal_points(whale, 5, amberjack) == False\nsteal_points(whale, 5, amberjack) == False\nowe(tiger, money, cat) = rule3()\nowe(tiger, money, cat) == False\nowe(tiger, money, cat) == False\nquestion = False", "answer": -1, "code": "rule1() = raise_flag_of_peace(something, goldfish) => steal_points(something, 5, amberjack)\nrule2() = has(whale, drink) => not steal_points(whale, 5, amberjack)\nrule3() = steal_points(something, 5, amberjack) => owe(tiger, money, cat)\norder(rule2) > order(rule1) = True\n\nraise_flag_of_peace(whale, goldfish) = False\n\nquestion = owe(tiger, money, cat)\n"}, {"idx": 222, "response": "mean_friends(koala) = 6\nfriends(koala) = non_mean_friends(koala) + mean_friends(koala) = 2 + 6 = 8\nfriends(koala) < 6 = False\neat_food(koala, food_of(starfish)) = rule1()\neat_food(koala, food_of(starfish)) == False\nkilled(koala, mayor) = True\neat_food(koala, food_of(starfish)) = rule6()\neat_food(koala, food_of(starfish)) == True\neat_food(koala, food_of(buffalo)) = rule2()\neat_food(koala, food_of(buffalo)) == True\nknock_down(koala, fortress_of(hippopotamus)) = rule4()\nknock_down(koala, fortress_of(hippopotamus)) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(koala) < 6 => eat_food(koala, food_of(starfish))\nrule2() = not knock_down(snail, fortress_of(koala)) => eat_food(koala, food_of(buffalo))\nrule3(something) = owe(something, money, cheetah) => not eat_food(something, food_of(buffalo))\nrule4(something) = eat_food(something, food_of(buffalo)) & eat_food(something, food_of(starfish)) => knock_down(something, fortress_of(hippopotamus))\nrule5() = sings_song_of_victory(something, squid) => raise_flag_of_peace(polar_bear, zander)\nrule6() = killed(koala, mayor) => eat_food(koala, food_of(starfish))\norder(rule3) > order(rule2) = True\n\nsings_song_of_victory(cat, squid) = True\nkilled(koala, mayor) = True\nmean_friends(koala) = 6\nnon_mean_friends(koala) = 2\nrespects(polar_bear, catfish) = True\nknock_down(snail, fortress_of(koala)) = False\n\nquestion = knock_down(koala, fortress_of(hippopotamus))\n"}, {"idx": 223, "response": "knows(black_bear, defense_plans, grasshopper) == True\nneed_support(grasshopper, starfish) = rule3()\nneed_support(grasshopper, starfish) == True\nneeds_support(grasshopper, starfish) = rule2()\nneeds_support(grasshopper, starfish) == True\nnot sing_victory_song(grasshopper, snail) = rule2()\nsing_victory_song(grasshopper, snail) == False\nsing_victory_song(grasshopper, snail) == False\nquestion = False", "answer": -1, "code": "rule1() = has(grasshopper, device_to_connect_to_internet) => not need_support(grasshopper, starfish)\nrule2(something) = needs_support(something, starfish) => not sing_victory_song(something, snail)\nrule3() = knows(black_bear, defense_plans, grasshopper) => need_support(grasshopper, starfish)\nrule4() = has(grasshopper, something_to_sit_on) => not need_support(grasshopper, starfish)\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule3) = True\n\nknows(black_bear, defense_plans, grasshopper) = True\nhas(grasshopper, flute) = True\n\nquestion = sing_victory_song(grasshopper, snail)\n"}, {"idx": 224, "response": "name(snail, Meadow) == True\ngive(squid, magnifier, snail) == False\nknows(phoenix, defensive_plans, snail) == True\nlearns(snail, basics_of_resource_management, kiwi) = rule3()\nlearns(snail, basics_of_resource_management, kiwi) == True\nknock_down(spider, fortress, octopus) = rule1()\nknock_down(spider, fortress, octopus) == True\nquestion = True", "answer": 1, "code": "rule1(something) = learns(something, basics_of_resource_management, kiwi) => knock_down(spider, fortress, octopus)\nrule2() = first_letter_of(name(snail)) == first_letter_of(name(hummingbird)) => not learns(snail, basics_of_resource_management, kiwi)\nrule3() = give(squid, magnifier, snail) & knows(phoenix, defensive_plans, snail) => learns(snail, basics_of_resource_management, kiwi)\nrule4() = has(snail, sharp_object) => not learns(snail, elementary_resource_management, kiwi)\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule3) = True\n\nknows(phoenix, defensive_plans, snail) = True\nhas(snail, bench) = True\nname(snail, Meadow) = True\ngive(squid, magnifier, snail) = False\n\nquestion = knock_down(spider, fortress, octopus)\n"}, {"idx": 225, "response": "has(pig, leafy_green_vegetable) == False\nattack(pig, green_fields, owner(canary)) = rule3()\nattack(pig, green_fields, owner(canary)) == False\nfriends(pig) < 8 == True\nattack(pig, green_fields, owner(canary)) == False\nlearn(parrot, elementary_resource_management, oscar) = rule2()\nlearn(parrot, elementary_resource_management, oscar) == True\nnot steal(oscar, 5, points, crocodile) == True\nsteal(pig, bike, store) == False\nquestion = True", "answer": 1, "code": "rule1() = attack(something, green_fields, owner(canary)) => steal(oscar, 5, points, crocodile)\nrule2() = learn(parrot, elementary_resource_management, oscar) => not steal(oscar, 5, points, crocodile)\nrule3() = has(pig, leafy_green_vegetable) => attack(pig, green_fields, owner(canary))\nrule4() = friends(pig) < 8 => attack(pig, green_fields, owner(canary))\norder(rule2) > order(rule1) = True\n\nname(catfish, Paco) = True\nhas(pig, violin) = True\nfriends(pig) = 6\nname(pig, Beauty) = True\nsteal(pig, bike, store) = True\n\nquestion = steal(oscar, 5, points, crocodile)\n"}, {"idx": 226, "response": "not knock_down(panther, fortress, puffin) == True\nnot know(panther, defense_plan, catfish) == True\noffer_job_position(kudu, grizzly_bear) == True\nnot know(panther, defense_plan, catfish) == True\nneeds_support(lion, catfish) == True\nremove(grizzly_bear, piece, catfish) == True\nraise_flag_of_peace(catfish, cockroach) = rule3()\nraise_flag_of_peace(catfish, cockroach) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not knock_down(something, fortress, puffin) & not know(something, defense_plan, crocodile) => knows(something, defense_plan, catfish)\nrule2() = not know(panther, defense_plan, catfish) => not raise_flag_of_peace(catfish, cockroach)\nrule3() = needs_support(lion, catfish) & remove(grizzly_bear, piece, catfish) => raise_flag_of_peace(catfish, cockroach)\nrule4() = offer_job_position(something, grizzly_bear) => not know(panther, defense_plan, catfish)\nrule5(something) = show_all_cards(something, cheetah) => not needs_support(something, catfish)\nrule6() = prepare_armor(grasshopper, lion) => needs_support(lion, catfish)\norder(rule1) > order(rule4) = True\norder(rule3) > order(rule2) = True\norder(rule5) > order(rule6) = True\n\nprepare_armor(grasshopper, lion) = True\noffer_job_position(kudu, grizzly_bear) = True\nnot knock_down(panther, fortress, puffin) = True\n\nquestion = raise_flag_of_peace(catfish, cockroach)\n"}, {"idx": 227, "response": "name(lion, Pashmak) == True\nname(crocodile, Paco) == True\nfirst_letter_of(name(lion)) == first_letter_of(name(crocodile)) = True\nremove_piece(lion, squid) = rule1()\nremove_piece(lion, squid) == True\nworks_more_hours(starfish) == False\nnot burn_warehouse(starfish, squid) = rule2()\nburn_warehouse(starfish, squid) == False\nraise_flag_of_peace(cow, squirrel) == True\nnot remove_piece(lion, squid) = rule3()\nremove_piece(lion, squid) == False\nnot need_support(squirrel, squid) = rule4()\nneed_support(squirrel, squid) == False\nnot need_support(squirrel, squid) == False\nsteal_points(squid, 5, mosquito) = rule6()\nsteal_points(squid, 5, mosquito) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(lion)) == first_letter_of(name(crocodile)) => remove_piece(lion, squid)\nrule2() = works_more_hours(starfish) => not burn_warehouse(starfish, squid)\nrule3() = raise_flag_of_peace(something, squirrel) => not remove_piece(lion, squid)\nrule4(something) = raise_flag_of_peace(something, starfish) => not need_support(something, squid)\nrule5() = first_letter_of(name(starfish)) == first_letter_of(name(viperfish)) => burn_warehouse(starfish, squid)\nrule6() = not remove_piece(lion, squid) & not need_support(squirrel, squid) => steal_points(squid, 5, mosquito)\nrule7() = has_card(starfish) & primary_color(card(starfish)) => not burn_warehouse(starfish, squid)\norder(rule2) > order(rule5) = True\norder(rule3) > order(rule1) = True\norder(rule7) > order(rule5) = True\n\nraise_flag_of_peace(cow, squirrel) = True\nname(crocodile, Paco) = True\nfriends(lion) = 10\nname(lion, Pashmak) = True\nname(starfish, Tango) = True\nworks_more_hours(starfish) = False\nname(viperfish, Tarzan) = True\nraise_flag_of_peace(squirrel, starfish) = False\n\nquestion = steal_points(squid, 5, mosquito)\n"}, {"idx": 228, "response": "proceeds_to(grasshopper, spot_right_after(puffin)) == True\nsteals_points(grasshopper, 5, gecko) = rule1()\nsteals_points(grasshopper, 5, gecko) == True\nlearn(gecko, basics_of_resource_management, koala) = rule2()\nlearn(gecko, basics_of_resource_management, koala) == True\nquestion = True", "answer": 1, "code": "rule1(something) = proceeds_to(something, spot_right_after(puffin)) => steals_points(something, 5, gecko)\nrule2() = steals_points(grasshopper, 5, gecko) => learn(gecko, basics_of_resource_management, koala)\nrule3() = learn(tilapia, elementary_resource_management, gecko) => not learn(gecko, elementary_resource_management, koala)\norder(rule3) > order(rule2) = True\n\nproceeds_to(grasshopper, spot_right_after(puffin)) = True\nstruggles_to_find_food(grasshopper) = True\n\nquestion = learn(gecko, basics_of_resource_management, koala)\n"}, {"idx": 229, "response": "eats(black_bear, food_of(leopard)) == True\nlearns(leopard, basics_of_resource_management, kiwi) = rule3()\nlearns(leopard, basics_of_resource_management, kiwi) == True\nroll_dice(leopard, sun_bear) = rule1()\nroll_dice(leopard, sun_bear) == not roll_dice(leopard, sun_bear)\nroll_dice(leopard, sun_bear) == not roll_dice(leopard, sun_bear)\nquestion = not roll_dice(leopard, sun_bear)", "answer": 0, "code": "rule1(something) = learns(something, basics_of_resource_management, kiwi) => not roll_dice(something, sun_bear)\nrule2(something) = not give(something, magnifying_glass, hummingbird) => roll_dice(something, sun_bear)\nrule3() = eats(black_bear, food_of(leopard)) => learns(leopard, basics_of_resource_management, kiwi)\nrule4(something) = removes(something, piece_of(donkey)) & shows_all_cards(something, cheetah) => not give(something, magnifying_glass, hummingbird)\norder(rule1) > order(rule2) = True\n\neats(black_bear, food_of(leopard)) = True\nhas(leopard, card) and color(card, orange) = True\nremoves(leopard, piece_of(donkey)) = True\nshows_all_cards(leopard, cheetah) = True\n\nquestion = roll_dice(leopard, sun_bear)\n"}, {"idx": 230, "response": "has(black_bear, cutter) == True\nhas(black_bear, leafy_green_vegetable) == False\nknow(black_bear, defensive_plans, panther) = rule3()\nknow(black_bear, defensive_plans, panther) == False\nknow(whale, defensive_plans, panther) = rule1()\nknow(whale, defensive_plans, panther) == False\nconclude(panther, knocks_down_fortress, swordfish) = rule2()\nconclude(panther, knocks_down_fortress, swordfish) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(whale) > 8 => not know(whale, defensive_plans, panther)\nrule2() = know(whale, defensive_plans, panther) & not know(black_bear, defensive_plans, panther) => conclude(panther, knocks_down_fortress, swordfish)\nrule3() = has(black_bear, leafy_green_vegetable) => not know(black_bear, defensive_plans, panther)\nrule4() = conclude(something, knocks_down_fortress, grizzly_bear) & respects(something, spider) => know(something, defensive_plans, panther)\nrule5() = has(black_bear, internet_device) => not know(black_bear, defensive_plans, panther)\nrule6() = has(halibut, card) and color(card) in rainbow_colors => raise_flag_of_peace(halibut, sun_bear)\nrule7() = needs_support(something, snail) => know(black_bear, defensive_plans, panther)\norder(rule1) > order(rule4) = True\norder(rule3) > order(rule7) = True\norder(rule5) > order(rule7) = True\n\nhas(black_bear, cutter) = True\nneeds_support(dog, snail) = True\nhas(halibut, card) = True\ncolor(card, yellow) = True\nknocks_down_fortress(whale, grizzly_bear) = True\nrespects(whale, spider) = True\nnot roll_dice(halibut, zander) = True\n\nquestion = conclude(panther, knocks_down_fortress, swordfish)\n"}, {"idx": 231, "response": "attack(grizzly_bear, green_fields, puffin) == True\ngive(grizzly_bear, magnifier, koala) == True\nrespect(grizzly_bear, hummingbird) = rule2()\nrespect(grizzly_bear, hummingbird) == True\nrespect(grizzly_bear, hummingbird) == True\noffer_job(spider, tiger) = rule1()\noffer_job(spider, tiger) == True\nquestion = True", "answer": 1, "code": "rule1() = respect(something, hummingbird) => offer_job(spider, tiger)\nrule2() = attack(something, green_fields, puffin) & give(something, magnifier, koala) => respect(something, hummingbird)\n\nattack(grizzly_bear, green_fields, puffin) = True\ngive(grizzly_bear, magnifier, koala) = True\n\nquestion = offer_job(spider, tiger)\n"}, {"idx": 232, "response": "took_bike(whale) == True\nknock_down_fortress(whale, oscar) = rule1()\nknock_down_fortress(whale, oscar) == not knock_down_fortress(whale, oscar)\nknock_down_fortress(whale, oscar) == not knock_down_fortress(whale, oscar) == True\nnot show_all_cards(oscar, octopus) = rule2()\nshow_all_cards(oscar, octopus) == not show_all_cards(oscar, octopus)\nshow_all_cards(oscar, octopus) == not show_all_cards(oscar, octopus) == True\nfriends(whale) < 6 = rule3()\nfriends(whale) < 6 == False\nknock_down_fortress(whale, oscar) == False\nfirst_letter_of(name(whale)) == first_letter_of(name(tiger)) = rule4()\nfirst_letter_of(name(whale)) == first_letter_of(name(tiger)) == False\nknock_down_fortress(whale, oscar) == False\ncolor_starts_with(whale, \"e\") = rule5()\ncolor_starts_with(whale, \"e\") == False\nknock_down_fortress(whale, oscar) == False\nquestion = False", "answer": -1, "code": "rule1() = took_bike(whale) => not knock_down_fortress(whale, oscar)\nrule2() = not knock_down_fortress(whale, oscar) => not show_all_cards(oscar, octopus)\nrule3() = friends(whale) < 6 => knock_down_fortress(whale, oscar)\nrule4() = first_letter_of(name(whale)) == first_letter_of(name(tiger)) => knock_down_fortress(whale, oscar)\nrule5() = color_starts_with(whale, \"e\") => not knock_down_fortress(whale, oscar)\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule5) = True\norder(rule4) > order(rule1) = True\norder(rule4) > order(rule5) = True\n\nhas(whale, card) = True\ncolor(card, yellow) = True\nname(whale, Luna) = True\nfriends(whale) = 10\ntook_bike(whale) = True\n\nquestion = show_all_cards(oscar, octopus)\n"}, {"idx": 233, "response": "name(viperfish, Cinnamon) == True\nname(cheetah, Meadow) == True\nfirst_letter_of(name(viperfish)) == first_letter_of(name(cheetah)) = True\nremove_piece(viperfish, cricket) = rule1()\nremove_piece(viperfish, cricket) == True\nnot remove_piece(viperfish, cricket) == False\noffer_job_position(cricket, gecko) = rule2()\noffer_job_position(cricket, gecko) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(viperfish)) == first_letter_of(name(cheetah)) => remove_piece(viperfish, cricket)\nrule2() = not remove_piece(viperfish, cricket) => offer_job_position(cricket, gecko)\nrule3() = friends(viperfish) < 11 => remove_piece(viperfish, cricket)\n\nname(cheetah, Meadow) = True\nfriends(viperfish) = 1\nname(viperfish, Cinnamon) = True\n\nquestion = offer_job_position(cricket, gecko)\n"}, {"idx": 234, "response": "eats_food(oscar, food_of(amberjack)) == True\nprepare_armor(amberjack, black_bear) = rule1()\nprepare_armor(amberjack, black_bear) == True\nnot needs_support(aardvark, black_bear) = rule6()\nneeds_support(aardvark, black_bear) == False\nnot needs_support(aardvark, black_bear) == True\nknow(black_bear, defense_plan, doctorfish) = rule6()\nknow(black_bear, defense_plan, doctorfish) == True\nknow(black_bear, defense_plan, doctorfish) == True\nquestion = True", "answer": 1, "code": "rule1() = eats_food(oscar, food_of(amberjack)) => prepare_armor(amberjack, black_bear)\nrule2() = eats_food(something, food_of(phoenix)) => not know(black_bear, defense_plan, doctorfish)\nrule3() = friends(aardvark) < 15 => needs_support(aardvark, black_bear)\nrule4() = steals_points(something, squirrel, 5) & steals_points(something, eagle, 5) => not prepare_armor(something, black_bear)\nrule5() = burns_warehouse(something, warehouse_of(sheep)) => not needs_support(aardvark, black_bear)\nrule6() = prepare_armor(amberjack, black_bear) & not needs_support(aardvark, black_bear) => know(black_bear, defense_plan, doctorfish)\norder(rule1) > order(rule4) = True\norder(rule2) > order(rule6) = True\norder(rule5) > order(rule3) = True\n\nkind_friends(aardvark) = 1\nunkind_friends(aardvark) = 7\nhas(aardvark, beer) = True\nsteals_points(amberjack, eagle, 5) = True\nsteals_points(amberjack, squirrel, 5) = True\nburns_warehouse(gecko, warehouse_of(sheep)) = True\neats_food(oscar, food_of(amberjack)) = True\n\nquestion = know(black_bear, defense_plan, doctorfish)\n"}, {"idx": 235, "response": "reduced_work_hours(snail) == True\nworks_more_hours(snail) = not reduced_work_hours(snail)\nworks_more_hours(snail) == False\nnot raise_flag_of_peace(snail, kudu) = rule1()\nnot raise_flag_of_peace(snail, kudu) == True\nnot raise_flag_of_peace(snail, kudu) == True\nnot sing_song_of_victory(snail, eel) = rule5()\nnot sing_song_of_victory(snail, eel) == True\nnot sing_song_of_victory(snail, eel) == True\nnot sing_song_of_victory(snail, salmon) = rule2(snail)\nnot sing_song_of_victory(snail, salmon) == True\nnot sing_song_of_victory(snail, salmon) == True\nquestion = True", "answer": 1, "code": "rule1() = works_more_hours(snail) => not raise_flag_of_peace(snail, kudu)\nrule2(something) = not sing_song_of_victory(something, eel) & not raise_flag_of_peace(something, kudu) => not sing_song_of_victory(something, salmon)\nrule3() = owes(something, money, phoenix) => sing_song_of_victory(snail, salmon)\nrule4() = first_letter_of(name(snail)) == first_letter_of(name(black_bear)) => not raise_flag_of_peace(snail, kudu)\nrule5() = has(snail, leafy_green_vegetable) => not sing_song_of_victory(snail, eel)\norder(rule3) > order(rule2) = True\n\nname(black_bear, Luna) = True\nhas(snail, arugula) = True\nreduced_work_hours(snail) = True\nname(snail, Lily) = True\n\nquestion = sing_song_of_victory(snail, salmon)\n"}, {"idx": 236, "response": "has(octopus, card) == True\ncolor(card, yellow) == True\nstarts_with(color(card), \"y\") == True\nattack(octopus, green_fields, polar_bear) = rule2()\nattack(octopus, green_fields, polar_bear) == True\nfriends(lobster) = 5\nworks_more_hours(lobster) = True\nburn(lobster, warehouse, polar_bear) = rule5()\nburn(lobster, warehouse, polar_bear) == True\nnot attack(octopus, green_fields, polar_bear) == False\nburn(lobster, warehouse, polar_bear) == True\nprepare_armor(polar_bear, koala) = rule6()\nprepare_armor(polar_bear, koala) == True\nquestion = True", "answer": 1, "code": "rule1() = has(octopus, sharp_object) => attack(octopus, green_fields, polar_bear)\nrule2() = has(octopus, card) and starts_with(color(card), \"y\") => attack(octopus, green_fields, polar_bear)\nrule3() = friends(lobster) > 2 => burn(lobster, warehouse, polar_bear)\nrule4() = offer_job_position(something, swordfish) => eat(blobfish, food, polar_bear)\nrule5() = works_more_hours(lobster) => burn(lobster, warehouse, polar_bear)\nrule6() = not attack(octopus, green_fields, polar_bear) & burn(lobster, warehouse, polar_bear) => prepare_armor(polar_bear, koala)\n\npoints(kiwi) == points(swordfish) = True\nassassinate(lobster, mayor) = True\nfriends(lobster) = 5\nhas(octopus, backpack) = True\nhas(octopus, card) = True\ncolor(card, yellow) = True\n\nquestion = prepare_armor(polar_bear, koala)\n"}, {"idx": 237, "response": "learn(cheetah, basics_of_resource_management, mosquito) == True\nlearn(cat, basics_of_resource_management, blobfish) = rule2()\nlearn(cat, basics_of_resource_management, blobfish) == True\nquestion = True", "answer": 1, "code": "rule1() = steal_points(something, caterpillar, 5) => not wink(spider, cat)\nrule2() = attack(something, green_fields, owner(grizzly_bear)) => learn(cat, basics_of_resource_management, blobfish)\nrule3() = has_high_salary(spider) => wink(spider, cat)\nrule4() = wink(spider, cat) & not become_enemy(tiger, cat) => not learn(cat, elementary_resource_management, blobfish)\nrule5() = roll_dice(something, lobster) & learn(something, elementary_resource_management, mosquito) => attack(something, green_fields, owner(grizzly_bear))\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule2) = True\n\nlearn(cheetah, basics_of_resource_management, mosquito) = True\nroll_dice(cheetah, lobster) = True\nhas_high_salary(spider) = True\n\nquestion = learn(cat, basics_of_resource_management, blobfish)\n"}, {"idx": 238, "response": "has(cow, card) == True\ncolor(card) in colors_of_italian_flag == True\nraise_flag_of_peace(cow, dog) = rule2()\nraise_flag_of_peace(cow, dog) == True\nattack(penguin, green_fields_of(doctorfish)) = rule6()\nattack(penguin, green_fields_of(doctorfish)) == not raise_flag_of_peace(buffalo, penguin)\nnot raise_flag_of_peace(buffalo, penguin) = rule3()\nnot raise_flag_of_peace(buffalo, penguin) == False\nattack(penguin, green_fields_of(doctorfish)) == False\nquestion = False", "answer": -1, "code": "rule1() = not learn(ferret, basics_of_resource_management, buffalo) => raise_flag_of_peace(buffalo, penguin)\nrule2() = has(cow, card) and color(card) in colors_of_italian_flag => raise_flag_of_peace(cow, dog)\nrule3() = raise_flag_of_peace(something, oscar) => not raise_flag_of_peace(buffalo, penguin)\nrule4() = has(cow, sharp_object) => raise_flag_of_peace(cow, dog)\nrule5() = works_fewer_hours(parrot) => offer_job(parrot, penguin)\nrule6() = offer_job(parrot, penguin) & not raise_flag_of_peace(buffalo, penguin) => not attack(penguin, green_fields_of(doctorfish))\norder(rule3) > order(rule1) = True\n\nhas(cow, card) = True\ncolor(card, white) = True\nhas(cow, trumpet) = True\nname(parrot, Meadow) = True\nworks_fewer_hours(parrot) = True\nraise_flag_of_peace(polar_bear, oscar) = True\nname(tiger, Mojo) = True\nlearn(ferret, basics_of_resource_management, buffalo) = False\n\nquestion = attack(penguin, green_fields_of(doctorfish))\n"}, {"idx": 239, "response": "eat_food(eel, food_of(elephant)) == True\nowe(sun_bear, $$$, hare) = rule5()\nowe(sun_bear, $$$, hare) == True\nlearn(doctorfish, basics_of_resource_management, hare) = rule3()\nlearn(doctorfish, basics_of_resource_management, hare) == False\nlearn(doctorfish, basics_of_resource_management, hare) == False\nowe(sun_bear, $$$, hare) == True\nlearn(hare, basics_of_resource_management, wolverine) = rule4()\nlearn(hare, basics_of_resource_management, wolverine) == True\nlearn(hare, basics_of_resource_management, wolverine) == True\nquestion = True", "answer": 1, "code": "rule1() = remove(something, piece, starfish) => not learn(doctorfish, elementary_resource_management, hare)\nrule2() = remove(jellyfish, piece, sun_bear) => not owe(sun_bear, $$$, hare)\nrule3() = attack(viperfish, green_fields, doctorfish) => learn(doctorfish, basics_of_resource_management, hare)\nrule4() = learn(doctorfish, basics_of_resource_management, hare) & owe(sun_bear, $$$, hare) => learn(hare, basics_of_resource_management, wolverine)\nrule5() = eat_food(something, food_of(elephant)) => owe(sun_bear, $$$, hare)\norder(rule1) > order(rule3) = True\norder(rule2) > order(rule5) = True\n\neat_food(eel, food_of(elephant)) = True\nattack(viperfish, green_fields, doctorfish) = False\n\nquestion = learn(hare, basics_of_resource_management, wolverine)\n"}, {"idx": 240, "response": "friends(canary) = 14\nfriends(canary) > 10 = True\nnot burn(canary, warehouse, puffin) = rule5()\nnot burn(canary, warehouse, puffin) == True\nhas(eagle, hot_chocolate) = True\nhas(eagle, drink) = True\nnot knock_down(eagle, fortress, puffin) = rule3()\nnot knock_down(eagle, fortress, puffin) == True\nnot knock_down(eagle, fortress, puffin) == True\nnot burn(canary, warehouse, puffin) == True\nadd_conclusion(puffin_gives_magnifier_to(carp)) = rule2()\nadd_conclusion(puffin_gives_magnifier_to(carp)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = owe(something, $$$, sun_bear) => knock_down(something, fortress, puffin)\nrule2() = not knock_down(eagle, fortress, puffin) & not burn(canary, warehouse, puffin) => add_conclusion(puffin_gives_magnifier_to(carp))\nrule3() = has(eagle, drink) => not knock_down(eagle, fortress, puffin)\nrule4() = eat_food(tilapia, food_of(canary)) => burn(canary, warehouse, puffin)\nrule5() = friends(canary) > 10 => not burn(canary, warehouse, puffin)\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule5) = True\n\nfriends(canary) = 14\nhas(eagle, hot_chocolate) = True\n\nquestion = add_conclusion(puffin_gives_magnifier_to(carp))\n"}, {"idx": 241, "response": "knocks_down(oscar, fortress, mosquito) == True\nbelief(roll_dice, cockroach, mosquito) == True\nadd_conclusion(\"the mosquito is not going to proceed to the spot right after the donkey\") = rule1()\nadd_conclusion(\"the mosquito is not going to proceed to the spot right after the donkey\") == True\nproceeds_to(mosquito, spot_right_after(donkey)) = rule2()\nproceeds_to(mosquito, spot_right_after(donkey)) == True\nnot becomes_enemy(something, cricket) = rule3()\nnot becomes_enemy(mosquito, cricket) == True\nquestion = True", "answer": 1, "code": "rule1() = belief(roll_dice, cockroach, mosquito) & knocks_down(oscar, fortress, mosquito) => add_conclusion(\"the mosquito is not going to proceed to the spot right after the donkey\")\nrule2() = becomes_enemy(something, snail) => proceeds_to(mosquito, spot_right_after(donkey))\nrule3() = proceeds_to(something, spot_right_after(donkey)) => not becomes_enemy(something, cricket)\norder(rule1) > order(rule2) = True\n\nbecomes_enemy(doctorfish, snail) = True\nknocks_down(oscar, fortress, mosquito) = True\n\nquestion = becomes_enemy(mosquito, cricket)\n"}, {"idx": 242, "response": "parked(koala, bike, front_of(store)) == True\nkilled(koala, mayor) == False\nneeds_support(koala, panther) = rule3()\nneeds_support(koala, panther) == False\nhas(panther, drink) == True\nlearn(panther, elementary_resource_management, eel) = rule2()\nlearn(panther, elementary_resource_management, eel) == True\nhas(panther, card) == True\nstarts_with(color(card), \"b\") == True\nshow_cards(panther, halibut) = rule5()\nshow_cards(panther, halibut) == True\nshow_cards(panther, halibut) == True\nlearn(something, basics_of_resource_management, eel) = rule4()\nlearn(something, basics_of_resource_management, eel) == True\npoints(something) == points(pig) = rule4()\npoints(something) == points(pig) == True\npoints(panther) == points(pig) == True\nquestion = True", "answer": 1, "code": "rule1() = needs_support(koala, panther) => points(panther) != points(pig)\nrule2() = has(panther, drink) => learn(panther, elementary_resource_management, eel)\nrule3() = killed(koala, mayor) => needs_support(koala, panther)\nrule4(something) = show_cards(something, halibut) & learn(something, basics_of_resource_management, eel) => points(something) == points(pig)\nrule5() = has(panther, card) and starts_with(color(card), \"b\") => show_cards(panther, halibut)\norder(rule4) > order(rule1) = True\n\nparked(koala, bike, front_of(store)) = True\nhas(panther, cappuccino) = True\nhas(panther, card) = True\ncolor(card, indigo) = True\n\nquestion = points(panther) == points(pig)\n"}, {"idx": 243, "response": "supports(moose, Chris_Ronaldo) == True\noffer_job_position(moose, whale) = rule4()\noffer_job_position(moose, whale) == True\ngive(caterpillar, magnifying_glass, whale) = True\noffer_job_position(whale, snail) = not offer_job_position(whale, snail) = rule3()\nnot offer_job_position(whale, snail) == False\noffer_job_position(whale, snail) == False\nquestion = False", "answer": -1, "code": "rule1(something) = proceeds_to_right_after(something, spot_of(penguin)) => offer_job_position(something, snail)\nrule2() = friends(whale) > 2 => proceeds_to_right_after(whale, spot_of(penguin))\nrule3() = offer_job_position(moose, whale) & give(caterpillar, magnifying_glass, whale) => not offer_job_position(whale, snail)\nrule4() = supports(moose, Chris_Ronaldo) => offer_job_position(moose, whale)\norder(rule3) > order(rule1) = True\n\nhas(moose, couch) = True\nhas(moose, knife) = True\nsupports(moose, Chris_Ronaldo) = True\nfriends(whale) = 6\n\nquestion = offer_job_position(whale, snail)\n"}, {"idx": 244, "response": "has(squid, high_salary) == True\nlearn(squid, basics_of_resource_management, viperfish) = rule1()\nlearn(squid, basics_of_resource_management, viperfish) == True\nlearn(something, elementary_resource_management, viperfish) = rule2()\nlearn(something, elementary_resource_management, viperfish) == unknown\ngive(cow, magnifying_glass, canary) = unknown\nquestion = unknown", "answer": 0, "code": "rule1() = has(squid, high_salary) => learn(squid, basics_of_resource_management, viperfish)\nrule2() = learn(something, elementary_resource_management, viperfish) => not give(cow, magnifying_glass, canary)\n\nhas(squid, high_salary) = True\n\nquestion = give(cow, magnifying_glass, canary)\n"}, {"idx": 245, "response": "becomes_enemy(black_bear, ferret) == True\nprepares_armor(blobfish, phoenix) == False\nowes(cockroach, money, ferret) == False\nname(crocodile, Pablo) == True\nname(puffin, Pashmak) == True\nfirst_letter_of(name(crocodile)) == first_letter_of(name(puffin)) == False\nowes(crocodile, money, leopard) = rule3()\nowes(crocodile, money, leopard) == False\nrespects(something, phoenix) = False\nlearns(crocodile, basics_of_resource_management_from(sea_bass)) == False\nraise_flag_of_peace(ferret, crocodile) = rule5()\nraise_flag_of_peace(ferret, crocodile) == False\npoints(crocodile) == points(meerkat) = rule1()\npoints(crocodile) == points(meerkat) == False\nquestion = False", "answer": -1, "code": "rule1(something) = owes(something, money, leopard) & learns(something, elementary_resource_management_from(sea_bass)) => points(something) == points(meerkat)\nrule2() = raise_flag_of_peace(ferret, crocodile) => not points(crocodile) == points(meerkat)\nrule3() = first_letter_of(name(crocodile)) == first_letter_of(name(puffin)) => owes(crocodile, money, leopard)\nrule4() = respects(something, phoenix) => learns(crocodile, basics_of_resource_management_from(sea_bass))\nrule5() = prepares_armor(cockroach, ferret) & becomes_enemy(black_bear, ferret) => raise_flag_of_peace(ferret, crocodile)\norder(rule1) > order(rule2) = True\n\nbecomes_enemy(black_bear, ferret) = True\nprepares_armor(blobfish, phoenix) = True\nowes(cockroach, money, ferret) = True\nname(crocodile, Pablo) = True\nname(puffin, Pashmak) = True\n\nquestion = points(crocodile) == points(meerkat)\n"}, {"idx": 246, "response": "rolls_dice(amberjack, kudu) == True\nnot show_all_cards(amberjack, dog) == True\nowes(wolverine, $$$, dog) == True\ngive(dog, magnifying_glass, caterpillar) = rule4()\ngive(dog, magnifying_glass, caterpillar) == True\ngive(dog, magnifying_glass, caterpillar) == True\nquestion = True", "answer": 1, "code": "rule1(something) = rolls_dice(something, kudu) => not show_all_cards(something, dog)\nrule2() = has(pig, something_to_sit_on) => knocks_down(pig, fortress, elephant)\nrule3() = created(wolverine, time_machine) => owes(wolverine, $$$, dog)\nrule4() = not show_all_cards(amberjack, dog) & owes(wolverine, $$$, dog) => give(dog, magnifying_glass, caterpillar)\nrule5(something) = knocks_down(something, fortress, elephant) => not give(dog, magnifying_glass, caterpillar)\norder(rule4) > order(rule5) = True\n\nrolls_dice(amberjack, kudu) = True\nburns(penguin, warehouse, pig) = True\nhas(pig, love_seat_sofa) = True\ncreated(wolverine, time_machine) = True\n\nquestion = give(dog, magnifying_glass, caterpillar)\n"}, {"idx": 247, "response": "name(catfish, Tango) == True\nname(whale, Tarzan) == True\nfirst_letter_of(name(catfish)) == first_letter_of(name(whale)) == True\nbecome_enemy(catfish, eel) = rule1()\nbecome_enemy(catfish, eel) == True\nknocks_down(hare, fortress, catfish) == True\noffer_job_position(tiger, catfish) == False\nnot offer_job_position(tiger, catfish) == True\nnot become_enemy(catfish, eel) == True\nowe(eel, money, squid) = rule5()\nowe(eel, money, squid) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(catfish)) == first_letter_of(name(whale)) => become_enemy(catfish, eel)\nrule2(something) = not wink(something, cow) & roll_dice(something, dog) => not raise_flag_of_peace(something, eel)\nrule3() = not raise_flag_of_peace(hummingbird, eel) => not owe(eel, money, squid)\nrule4() = knocks_down(hare, fortress, catfish) & not offer_job_position(tiger, catfish) => not become_enemy(catfish, eel)\nrule5() = not become_enemy(catfish, eel) => owe(eel, money, squid)\norder(rule3) > order(rule5) = True\norder(rule4) > order(rule1) = True\n\nname(catfish, Tango) = True\nknocks_down(hare, fortress, catfish) = True\nroll_dice(hummingbird, dog) = True\nwink(hummingbird, cow) = False\nname(whale, Tarzan) = True\noffer_job_position(tiger, catfish) = False\n\nquestion = owe(eel, money, squid)\n"}, {"idx": 248, "response": "assassinated(cat, mayor) == True\nwink(raven, cat) == False\nlearn(wolverine, elementary_resource_management_from(cat)) == False\nnot show_all_cards(cat, gecko) = rule1()\nnot show_all_cards(cat, gecko) == True\nshow_all_cards(cat, gecko) = rule3()\nshow_all_cards(cat, gecko) == True\nowe(gecko, money, grasshopper) = rule2()\nowe(gecko, money, grasshopper) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(raven, cat) & learn(wolverine, elementary_resource_management_from(cat)) => not show_all_cards(cat, gecko)\nrule2() = show_all_cards(cat, gecko) => owe(gecko, money, grasshopper)\nrule3() = created(cat, time_machine) => show_all_cards(cat, gecko)\nrule4() = friends(cat) > 7 => show_all_cards(cat, gecko)\norder(rule1) > order(rule3) = True\norder(rule1) > order(rule4) = True\n\nassassinated(cat, mayor) = True\nlazy_friends(cat) = 1\nnon_lazy_friends(cat) = 1\nbecome_enemy(raven, cat) = False\n\nquestion = owe(gecko, money, grasshopper)\n"}, {"idx": 249, "response": "question = unknown", "answer": 0, "code": "rule1() = believes(mosquito, becomes_enemy, cat) & respects(lion, cat) => add_conclusion(\"the cat needs the support of the gecko\")\nrule2() = not respects(grizzly_bear, cat) => not need_support(cat, gecko)\nrule3() = has(lion, card) & starts_with(color(card), \"w\") => respects(lion, cat)\nrule4() = friends(mosquito) > 5 => becomes_enemy(mosquito, cat)\nrule5() = owns(mosquito, luxury_aircraft) => not becomes_enemy(mosquito, cat)\norder(rule2) > order(rule1) = True\norder(rule5) > order(rule4) = True\n\nbecomes_enemy(lion, jellyfish) = True\nhas(lion, card) = True\ncolor(card, white) = True\nowes(lion, money, black_bear) = True\nfriends(mosquito) = 14\n\nquestion = need_support(cat, gecko)\n"}, {"idx": 250, "response": "question = unknown", "answer": 0, "code": "rule1(something) = not attack(something, green_fields, halibut) => burn_warehouse(octopus)\nrule2() = remove_from_board(something, piece, polar_bear) => not burn_warehouse(octopus)\nrule3() = raise_flag_of_peace(something, cockroach) => remove_from_board(aardvark, piece, polar_bear)\norder(rule1) > order(rule2) = True\n\nraise_flag_of_peace(snail, cockroach) = True\n\nquestion = burn_warehouse(catfish, octopus)\n"}, {"idx": 251, "response": "has(aardvark, romaine_lettuce) == True\nhas(aardvark, something_to_carry_apples_and_oranges) == False\nowes(aardvark, $$$, dog) = rule1()\nowes(aardvark, $$$, dog) == False\nowes(aardvark, $$$, dog) == False\nknows(aardvark, defensive_plans, cricket) = rule2(aardvark)\nknows(aardvark, defensive_plans, cricket) == False\nknows(aardvark, defensive_plans, cricket) == False\nquestion = False", "answer": -1, "code": "rule1() = has(aardvark, something_to_carry_apples_and_oranges) => owes(aardvark, $$$, dog)\nrule2(something) = owes(something, $$$, dog) => knows(something, defensive_plans, cricket)\n\nhas(aardvark, romaine_lettuce) = True\n\nquestion = knows(aardvark, defensive_plans, cricket)\n"}, {"idx": 252, "response": "eats_food(polar_bear, food_of(cricket)) == True\nproceed_to_spot(polar_bear, spot_right_after(whale)) = rule1()\nproceed_to_spot(polar_bear, spot_right_after(whale)) == True\noffer_job_position(hippopotamus, carp) = rule3()\noffer_job_position(hippopotamus, carp) == True\nquestion = True", "answer": 1, "code": "rule1(something) = eats_food(something, food_of(cricket)) => proceed_to_spot(something, spot_right_after(whale))\nrule2() = attacks(something, green_fields_of(baboon)) & give(something, magnifying_glass, ferret) => not proceed_to_spot(something, spot_right_after(whale))\nrule3() = proceed_to_spot(something, spot_right_after(whale)) => offer_job_position(hippopotamus, carp)\norder(rule2) > order(rule1) = True\n\nattacks(polar_bear, green_fields_of(baboon)) = True\neats_food(polar_bear, food_of(cricket)) = True\n\nquestion = offer_job_position(hippopotamus, carp)\n"}, {"idx": 253, "response": "has(dog, something_to_sit_on) == False\nknock_down(dog, fortress, snail) = rule1()\nknock_down(dog, fortress, snail) == not knock_down(dog, fortress, snail)\nknock_down(dog, fortress, snail) == not knock_down(dog, fortress, snail)\nnot owe(grizzly_bear, money, dog) == True\nnot offer_job_position(dog, canary) = rule2()\nnot offer_job_position(dog, canary) == not offer_job_position(dog, canary)\nnot offer_job_position(dog, canary) == not offer_job_position(dog, canary)\nnot offer_job_position(tilapia, dog) == False\nburn_warehouse(puffin, dog) == False\nknock_down(dog, fortress, snail) = rule3()\nknock_down(dog, fortress, snail) == knock_down(dog, fortress, snail)\nknock_down(dog, fortress, snail) == knock_down(dog, fortress, snail)\nfirst_letter_of(name(dog)) == first_letter_of(name(eel)) == False\nnot knock_down(dog, fortress, snail) == True\nnot knock_down(dog, fortress, snail) == True\nnot show_all_cards(caterpillar, dog) == False\nnot become_enemy(dog, grizzly_bear) = rule5()\nnot become_enemy(dog, grizzly_bear) == not become_enemy(dog, grizzly_bear)\nnot become_enemy(dog, grizzly_bear) == not become_enemy(dog, grizzly_bear)\noffer_job_position(something, canary) = rule6()\noffer_job_position(something, canary) == offer_job_position(something, canary)\noffer_job_position(something, canary) == offer_job_position(something, canary)\nhas(grizzly_bear, leafy_green_vegetable) == False\nnot owe(grizzly_bear, money, dog) = rule7()\nnot owe(grizzly_bear, money, dog) == not owe(grizzly_bear, money, dog)\nnot owe(grizzly_bear, money, dog) == not owe(grizzly_bear, money, dog)\nquestion = not offer_job_position(dog, canary)\n", "answer": 0, "code": "rule1() = has(dog, something_to_sit_on) => not knock_down(dog, fortress, snail)\nrule2() = not owe(grizzly_bear, money, dog) => not offer_job_position(dog, canary)\nrule3() = not offer_job_position(tilapia, dog) & burn_warehouse(puffin, dog) => knock_down(dog, fortress, snail)\nrule4() = first_letter_of(name(dog)) == first_letter_of(name(eel)) => not knock_down(dog, fortress, snail)\nrule5() = not show_all_cards(caterpillar, dog) => not become_enemy(dog, grizzly_bear)\nrule6(something) = not become_enemy(something, grizzly_bear) & not knock_down(something, fortress, snail) => offer_job_position(something, canary)\nrule7() = has(grizzly_bear, leafy_green_vegetable) => not owe(grizzly_bear, money, dog)\norder(rule2) > order(rule6) = True\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule4) = True\n\nhas(dog, beer) = True\nname(dog, Charlie) = True\nname(eel, Casper) = True\nhas(grizzly_bear, spinach) = True\nshow_all_cards(caterpillar, dog) = False\noffer_job_position(tilapia, dog) = False\n\nquestion = offer_job_position(dog, canary)\n"}, {"idx": 254, "response": "work_hours(squirrel) < previous_work_hours(squirrel) = True\nnot owe(squirrel, money, lobster) = rule1()\nnot owe(squirrel, money, lobster) == True\nsteal_points(buffalo, 5, lobster) = rule3()\nsteal_points(buffalo, 5, lobster) == True\nlearn(lobster, elementary_resource_management_from(doctorfish)) = rule2()\nlearn(lobster, elementary_resource_management_from(doctorfish)) == True\nquestion = True", "answer": 1, "code": "rule1() = work_hours(squirrel) < previous_work_hours(squirrel) => not owe(squirrel, money, lobster)\nrule2() = not owe(squirrel, money, lobster) & steal_points(buffalo, 5, lobster) => learn(lobster, elementary_resource_management_from(doctorfish))\nrule3() = kill(buffalo, mayor) => steal_points(buffalo, 5, lobster)\nrule4() = has(squirrel, card) and color(card) in rainbow_colors => owe(squirrel, money, lobster)\nrule5() = first_letter_of(name(squirrel)) == first_letter_of(name(canary)) => not owe(squirrel, money, lobster)\nrule6() = friends(buffalo) > 16 => steal_points(buffalo, 5, lobster)\norder(rule1) > order(rule4) = True\norder(rule5) > order(rule4) = True\n\neasy_going_friends(buffalo) = 1\nnon_easy_going_friends(buffalo) = 8\nstruggles_to_find_food(buffalo) = True\nname(canary, Peddi) = True\nhas(squirrel, card) = True\ncolor(card, orange) = True\nname(squirrel, Charlie) = True\nwork_hours(squirrel) < previous_work_hours(squirrel) = True\n\nquestion = learn(lobster, elementary_resource_management_from(doctorfish))\n"}, {"idx": 255, "response": "name(bat, Meadow) == True\nname(eel, Milo) == True\nfirst_letter_of(name(eel)) == first_letter_of(name(bat)) == True\nrespect(eel, spider) = rule1()\nrespect(eel, spider) == True\nnot eat_food(raven, food_of(spider)) == True\nrespect(eel, spider) == True\nadd_conclusion(spider, show_cards(all), buffalo) = rule2()\nadd_conclusion(spider, show_cards(all), buffalo) == True\nshow_cards(spider, all, buffalo) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(eel)) == first_letter_of(name(bat)) => respect(eel, spider)\nrule2() = not eat_food(raven, food_of(spider)) & respect(eel, spider) => add_conclusion(spider, show_cards(all), buffalo)\nrule3() = holds_equal_points(something, squirrel) => not eat_food(raven, food_of(spider))\n\nname(bat, Meadow) = True\nname(eel, Milo) = True\nwise_friends(raven) = 1\nnon_wise_friends(raven) = 3\nholds_equal_points(salmon, squirrel) = True\n\nquestion = show_cards(spider, all, buffalo)\n"}, {"idx": 256, "response": "color(card(caterpillar), yellow) == True\nfriends(caterpillar) == 5\nremove_piece(caterpillar, squid) = rule1()\nremove_piece(caterpillar, squid) == False\nremove_piece(caterpillar, squid) = rule2()\nremove_piece(caterpillar, squid) == False\nburn_warehouse(black_bear, warehouse(caterpillar)) = rule3()\nburn_warehouse(black_bear, warehouse(caterpillar)) == False\nnot remove_piece(caterpillar, squid) == True\nremove_piece(caterpillar, squid) == False\nnot roll_dice(caterpillar, hare) = rule4()\nroll_dice(caterpillar, hare) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(caterpillar) < 4 => remove_piece(caterpillar, squid)\nrule2() = starts_with(color(card(caterpillar)), \"y\") => remove_piece(caterpillar, squid)\nrule3() = burn_warehouse(black_bear, warehouse(caterpillar)) => not remove_piece(caterpillar, squid)\nrule4(something) = remove_piece(something, squid) => not roll_dice(something, hare)\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule2) = True\n\ncolor(card(caterpillar), yellow) = True\nfriends(caterpillar) = 5\n\nquestion = roll_dice(caterpillar, hare)\n"}, {"idx": 257, "response": "has(squirrel, musical_instrument) == False\nnot attack(squirrel, green_fields, owner(whale)) = rule1()\nnot attack(squirrel, green_fields, owner(whale)) == True\nsings(caterpillar, victory_song, squirrel) == True\nneeds_support(puffin, squirrel) == True\nprepare_armor(squirrel, sun_bear) = rule2()\nprepare_armor(squirrel, sun_bear) == True\nname(squirrel, Tango) == True\nname(octopus, Tango) == True\nfirst_letter_of(name(squirrel)) == first_letter_of(name(octopus)) == True\nnot attack(squirrel, green_fields, owner(whale)) = rule3()\nnot attack(squirrel, green_fields, owner(whale)) == True\nnot burn(warehouse, possession(squirrel)) = rule4()\nnot burn(warehouse, possession(squirrel)) == True\nsaw_wink(squirrel, sheep) = False\nnot prepare_armor(squirrel, sun_bear) = rule5()\nnot prepare_armor(squirrel, sun_bear) == True\nhas(squirrel, internet_device) == True\nattack(squirrel, green_fields, owner(whale)) = rule6()\nattack(squirrel, green_fields, owner(whale)) == True\nnot burn(warehouse, possession(squirrel)) = rule7()\nnot burn(warehouse, possession(squirrel)) == True\nsalary(squirrel) == high = False\nattack(squirrel, green_fields, owner(whale)) = rule8()\nattack(squirrel, green_fields, owner(whale)) == True\nshow_all_cards(squirrel, doctorfish) = rule7()\nshow_all_cards(squirrel, doctorfish) == True\nquestion = True", "answer": 1, "code": "rule1() = has(squirrel, musical_instrument) => not attack(squirrel, green_fields, owner(whale))\nrule2() = sings(caterpillar, victory_song, squirrel) & needs_support(puffin, squirrel) => prepare_armor(squirrel, sun_bear)\nrule3() = first_letter_of(name(squirrel)) == first_letter_of(name(octopus)) => not attack(squirrel, green_fields, owner(whale))\nrule4() = first_letter_of(name(moose)) == first_letter_of(name(polar_bear)) => not burn(warehouse, possession(squirrel))\nrule5(something) = saw_wink(something, sheep) => not prepare_armor(something, sun_bear)\nrule6() = has(squirrel, internet_device) => attack(squirrel, green_fields, owner(whale))\nrule7() = not burn(warehouse, possession(squirrel)) => show_all_cards(squirrel, doctorfish)\nrule8() = salary(squirrel) == high => attack(squirrel, green_fields, owner(whale))\norder(rule5) > order(rule2) = True\norder(rule6) > order(rule1) = True\norder(rule6) > order(rule3) = True\norder(rule8) > order(rule1) = True\norder(rule8) > order(rule3) = True\n\nsings(caterpillar, victory_song, squirrel) = True\nname(moose, Lola) = True\nname(octopus, Tango) = True\nname(polar_bear, Pablo) = True\nneeds_support(puffin, squirrel) = True\nhas(squirrel, cappuccino) = True\nsalary(squirrel) == low_income = True\nhas(squirrel, tablet) = True\n\nquestion = show_all_cards(squirrel, doctorfish)\n"}, {"idx": 258, "response": "friends(turtle) = 1\nfriends(turtle) > 6 = False\nknock_down(turtle, fortress, panther) = False\nhas(turtle, card) = True\ncolor(card, red) = True\ncolor(card) in primary_colors = True\nknock_down(turtle, fortress, panther) = False\nwinks(kiwi, canary) = False\nknock_down(kiwi, fortress, rabbit) = False\nnot knock_down(kiwi, fortress, panther) = True\neat_food(viperfish, food_of(puffin)) = True\nburn(snail, warehouse, panther) = rule4()\nburn(snail, warehouse, panther) = True\nknock_down(turtle, fortress, panther) = False\nburn(snail, warehouse, panther) = True\nproceed(panther, spot_right_after(donkey)) = False\nquestion = False", "answer": -1, "code": "rule1() = friends(turtle) > 6 => knock_down(turtle, fortress, panther)\nrule2() = has(turtle, card) and color(card) in primary_colors => knock_down(turtle, fortress, panther)\nrule3(something) = winks(something, canary) and knock_down(something, fortress, rabbit) => not knock_down(something, fortress, panther)\nrule4() = eat_food(something, food_of(puffin)) => burn(snail, warehouse, panther)\nrule5() = winks(something, starfish) => respect(carp, blobfish)\nrule6() = knock_down(turtle, fortress, panther) and burn(snail, warehouse, panther) => proceed(panther, spot_right_after(donkey))\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule2) = True\n\nwinks(kiwi, starfish) = True\nfriends(turtle) = 1\nhas(turtle, card) = True\ncolor(card, red) = True\nknock_down(turtle, fortress, rabbit) = True\neat_food(viperfish, food_of(puffin)) = True\n\nquestion = proceed(panther, spot_right_after(donkey))\n"}, {"idx": 259, "response": "roll_dice(phoenix, starfish) == True\npoints(phoenix) != points(donkey) = rule1()\npoints(phoenix) != points(donkey) == True\noffer_job_position(donkey, squid) == True\nloyal_friends(starfish) = 8\nfriends(starfish) = loyal_friends(starfish) + disloyal_friends(starfish)\nfriends(starfish) = 8 + 2 = 10\nfriends(starfish) > 6 == True\nsteal_points(starfish, 5, donkey) = rule2()\nsteal_points(starfish, 5, donkey) == True\nnot offer_job_position(donkey, squid) = rule3()\nnot offer_job_position(donkey, squid) == False\noffer_job_position(donkey, squid) == True\nquestion = True", "answer": 1, "code": "rule1() = points(phoenix) != points(donkey) => offer_job_position(donkey, squid)\nrule2() = friends(starfish) > 6 => steal_points(starfish, 5, donkey)\nrule3() = steal_points(starfish, 5, donkey) => not offer_job_position(donkey, squid)\norder(rule1) > order(rule3) = True\n\nroll_dice(phoenix, starfish) = True\nloyal_friends(starfish) = 8\ndisloyal_friends(starfish) = 2\n\nquestion = offer_job_position(donkey, squid)\n"}, {"idx": 260, "response": "give(amberjack, magnifier, cat) == True\nattack(cat, green_fields, cricket) = rule1()\nattack(cat, green_fields, cricket) == True\nshow_cards(cat, all_cards, snail) = False\npoints(cat) == points(lion) = rule2(cat)\npoints(cat) == points(lion) == False\nquestion = False", "answer": -1, "code": "rule1() = give(amberjack, magnifier, cat) => attack(cat, green_fields, cricket)\nrule2(something) = attack(something, green_fields, cricket) & show_cards(something, all_cards, snail) => points(something) == points(lion)\nrule3() = work_hours(cat) > previous_work_hours(cat) => not attack(cat, green_fields, cricket)\nrule4(something) = give(something, magnifying_glass, ferret) => show_cards(something, all_cards, snail)\norder(rule1) > order(rule3) = True\n\ngive(amberjack, magnifier, cat) = True\nfriends(cat) = 12\nwork_hours(cat) < previous_work_hours(cat) = True\ngive(cat, magnifying_glass, ferret) = False\n\nquestion = points(cat) == points(lion)\n"}, {"idx": 261, "response": "name(buffalo, Tango) == True\nname(leopard, Teddy) == True\nfirst_letter_of(name(buffalo)) == first_letter_of(name(leopard)) == True\ngive(buffalo, magnifying_glass, snail) = rule3()\ngive(buffalo, magnifying_glass, snail) == True\nknows(snail, defensive_plans, turtle) = rule1()\nknows(snail, defensive_plans, turtle) == True\nquestion = True", "answer": 1, "code": "rule1() = give(buffalo, magnifier, snail) => knows(snail, defensive_plans, turtle)\nrule2() = needs_support(something, carp) => not knows(snail, defensive_plans, turtle)\nrule3() = first_letter_of(name(buffalo)) == first_letter_of(name(leopard)) => give(buffalo, magnifying_glass, snail)\norder(rule2) > order(rule1) = True\n\nname(buffalo, Tango) = True\nname(leopard, Teddy) = True\n\nquestion = knows(snail, defensive_plans, turtle)\n"}, {"idx": 262, "response": "burn(whale, warehouse(ferret)) == False\nnot burn(whale, warehouse(ferret)) == True\nnot sing(victory_song, whale, zander) = rule2()\nnot sing(victory_song, whale, zander) == True\nnot attack(oscar, green_fields(zander)) = rule2()\nnot attack(oscar, green_fields(zander)) == True\nnot know(zander, defense_plan, lion) = rule2()\nnot know(zander, defense_plan, lion) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not burn(something, warehouse(ferret)) => not sing(victory_song, something, zander)\nrule2() = not sing(victory_song, whale, zander) & not attack(oscar, green_fields(zander)) => not know(zander, defense_plan, lion)\nrule3(something) = owe(something, money, aardvark) & sing(victory_song, something, octopus) => not attack(something, green_fields(zander))\n\nowe(oscar, money, aardvark) = True\nsing(victory_song, oscar, octopus) = True\nburn(whale, warehouse(ferret)) = False\n\nquestion = know(zander, defense_plan, lion)\n"}, {"idx": 263, "response": "name(eel, Lola) == True\nname(sheep, Lucy) == True\nfirst_letter_of(name(eel)) == first_letter_of(name(sheep)) == True\nroll_dice(eel, koala) = rule1()\nroll_dice(eel, koala) == True\neat_food(eel, food_of(koala)) = rule2()\neat_food(eel, food_of(koala)) == True\nraise_flag_of_peace(koala, eagle) = True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(eel)) == first_letter_of(name(sheep)) => roll_dice(eel, koala)\nrule2() = eat_food(eel, food_of(koala)) => raise_flag_of_peace(koala, eagle)\n\nname(eel, Lola) = True\nname(sheep, Lucy) = True\n\nquestion = raise_flag_of_peace(koala, eagle)\n"}, {"idx": 264, "response": "winks(moose, kangaroo) == True\nlearns(kangaroo, elementary_resource_management, buffalo) = rule2()\nlearns(kangaroo, elementary_resource_management, buffalo) == True\nlearns(kangaroo, basics_of_resource_management, buffalo) = rule3()\nlearns(kangaroo, basics_of_resource_management, buffalo) == True\npoints(squirrel) != points(buffalo) == True\nraise_flag_of_peace(buffalo, octopus) = rule3()\nraise_flag_of_peace(buffalo, octopus) == True\nquestion = True", "answer": 1, "code": "rule1(something) = learns(something, basics_of_resource_management, viperfish) => not raise_flag_of_peace(buffalo, octopus)\nrule2() = winks(moose, kangaroo) => learns(kangaroo, elementary_resource_management, buffalo)\nrule3() = learns(kangaroo, basics_of_resource_management, buffalo) & points(squirrel) != points(buffalo) => raise_flag_of_peace(buffalo, octopus)\nrule4(something) = not proceed_to(something, spot_right_after(amberjack)) => points(something) != points(buffalo)\nrule5() = first_letter_of(name(halibut)) == first_letter_of(name(grizzly_bear)) => learns(halibut, basics_of_resource_management, viperfish)\nrule6() = has(halibut, card) and color(card) in rainbow_colors => learns(halibut, elementary_resource_management, viperfish)\norder(rule3) > order(rule1) = True\n\nname(grizzly_bear, Tarzan) = True\nhas(halibut, card) = True\ncolor(card, blue) = True\nname(halibut, Chickpea) = True\nbecome_enemy(halibut, cat) = False\nwinks(moose, kangaroo) = True\nwinks(parrot, kangaroo) = True\nlearns(squirrel, basics_of_resource_management, amberjack) = True\nproceed_to(squirrel, spot_right_after(amberjack)) = False\n\nquestion = raise_flag_of_peace(buffalo, octopus)\n"}, {"idx": 265, "response": "give(hummingbird, magnifying_glass, baboon) == True\ngive(kangaroo, magnifying_glass, kudu) = question\ngive(kangaroo, magnifying_glass, baboon) == False\npoints(kangaroo) == points(grasshopper) = rule3()\npoints(kangaroo) == points(grasshopper) == True\npoints(kangaroo) == points(grasshopper) == True\nquestion = False", "answer": -1, "code": "rule1() = has(kangaroo, high_salary) => not learn(kangaroo, elementary_resource_management, hummingbird)\nrule2(something) = points(something) == points(grasshopper) & not offer_job_position(something, viperfish) => not give(something, magnifying_glass, kudu)\nrule3() = give(something, magnifying_glass, baboon) => points(kangaroo) == points(grasshopper)\nrule4() = has(kangaroo, card) and color(card) in flag_of_france_colors => not offer_job_position(kangaroo, viperfish)\nrule5() = not burn(warehouse, sheep, kangaroo) & not steal(points, whale, 5, kangaroo) => learn(kangaroo, basics_of_resource_management, hummingbird)\nrule6() = has(kangaroo, device_to_connect_to_internet) => not offer_job_position(kangaroo, viperfish)\norder(rule1) > order(rule5) = True\n\nname(cow, Casper) = True\ngive(hummingbird, magnifying_glass, baboon) = True\nhas(kangaroo, card) = True\ncolor(card, indigo) = True\nfriends(kangaroo) = 14\nknocks_down(kangaroo, fortress, catfish) = True\nhas(kangaroo, cell_phone) = True\nname(kangaroo, Bella) = True\nburn(warehouse, sheep, kangaroo) = False\nsteal(points, whale, 5, kangaroo) = False\n\nquestion = give(kangaroo, magnifying_glass, kudu)\n"}, {"idx": 266, "response": "has(bat, beer) == True\nhas(bat, drink) == True\nknock_down_fortress(bat, swordfish) = rule4()\nknock_down_fortress(bat, swordfish) == True\nknows(ferret, defensive_plans, swordfish) = rule6()\nknows(ferret, defensive_plans, swordfish) == True\nnot knock_down_fortress(bat, swordfish) == False\nadd_conclusion(\"the swordfish owes $$$ to the aardvark\") = rule2()\nadd_conclusion(\"the swordfish owes $$$ to the aardvark\") == True\nowe(swordfish, money, aardvark) = rule3()\nowe(swordfish, money, aardvark) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(bat) < 16 => not knock_down_fortress(bat, swordfish)\nrule2() = knows(ferret, defensive_plans, swordfish) & not knock_down_fortress(bat, swordfish) => add_conclusion(\"the swordfish owes $$$ to the aardvark\")\nrule3() = respects(panther, swordfish) => not owe(swordfish, money, aardvark)\nrule4() = has(bat, drink) => knock_down_fortress(bat, swordfish)\nrule5() = first_letter_of(name(bat)) == first_letter_of(name(wolverine)) => knock_down_fortress(bat, swordfish)\nrule6() = has(ferret, device_to_connect_to_internet) => knows(ferret, defensive_plans, swordfish)\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule1) = True\norder(rule5) > order(rule1) = True\n\neasy_going_friends(bat) = 1\nnon_easy_going_friends(bat) = 3\nhas(bat, beer) = True\nhas(ferret, computer) = True\nname(wolverine, Lucy) = True\n\nquestion = owe(swordfish, money, aardvark)\n"}, {"idx": 267, "response": "give(crocodile, magnifying_glass, caterpillar) == True\nprepare_armor(lion, cat) = rule4()\nprepare_armor(lion, cat) == True\nprepare_armor(lion, cat) == True\nnot know(lion, defense_plan, elephant) = rule2()\nnot know(lion, defense_plan, elephant) == True\nnot know(lion, defense_plan, elephant) == True\nnot become_enemy(lion, spider) = rule3()\nnot become_enemy(lion, spider) == True\nnot become_enemy(lion, spider) == True\nquestion = True", "answer": 1, "code": "rule1(something) = prepare_armor(something, cat) & not know(something, defense_plan, elephant) => become_enemy(something, spider)\nrule2() = attack(something, green_fields, owner(donkey)) => not know(lion, defense_plan, elephant)\nrule3() = steal(cricket, 5, points(lion)) => not become_enemy(lion, spider)\nrule4() = give(something, magnifying_glass, caterpillar) => prepare_armor(lion, cat)\norder(rule3) > order(rule1) = True\n\ngive(crocodile, magnifying_glass, caterpillar) = True\nattack(oscar, green_fields, owner(donkey)) = True\n\nquestion = become_enemy(lion, spider)\n"}, {"idx": 268, "response": "has(meerkat, card) == True\ncolor(card, red) == True\ncolor(card) in primary_colors = True\nnot roll_dice(meerkat, halibut) = rule1()\nnot roll_dice(meerkat, halibut) == True\nnot roll_dice(meerkat, halibut) == True\nnot hold_same_number_of_points(meerkat, hippopotamus) = rule3(meerkat)\nnot hold_same_number_of_points(meerkat, hippopotamus) == True\nnot hold_same_number_of_points(meerkat, hippopotamus) == True\nquestion = True", "answer": 1, "code": "rule1() = has(meerkat, card) and color(card) in primary_colors => not roll_dice(meerkat, halibut)\nrule2() = first_letter_of(name(meerkat)) == first_letter_of(name(leopard)) => not roll_dice(meerkat, halibut)\nrule3(something) = not roll_dice(something, halibut) => not hold_same_number_of_points(something, hippopotamus)\n\nname(leopard, Lily) = True\nhas(meerkat, card) = True\ncolor(card, red) = True\nname(meerkat, Peddi) = True\n\nquestion = hold_same_number_of_points(meerkat, hippopotamus)\n"}, {"idx": 269, "response": "took(ferret, bike, store) == True\nroll_dice(ferret, panda_bear) = rule5()\nroll_dice(ferret, panda_bear) == True\nfriends(ferret) < 5 = rule2()\nfriends(ferret) = 6\nfriends(ferret) < 5 == False\nroll_dice(ferret, panda_bear) == True\nattack(ferret, green_fields, owner(sea_bass)) = rule4()\nattack(ferret, green_fields, owner(sea_bass)) == True\nquestion = True", "answer": 1, "code": "rule1() = not steal(something, 5_points, tilapia) & roll_dice(something, panda_bear) => not attack(something, green_fields, owner(sea_bass))\nrule2() = friends(ferret) < 5 => roll_dice(ferret, panda_bear)\nrule3() = knock_down(pig, fortress, ferret) => owe(ferret, $$$, gecko)\nrule4() = owe(something, $$$, gecko) => attack(something, green_fields, owner(sea_bass))\nrule5() = took(ferret, bike, store) => roll_dice(ferret, panda_bear)\norder(rule4) > order(rule1) = True\n\nlazy_friends(ferret) = 6\nnon_lazy_friends(ferret) = 2\ntook(ferret, bike, store) = True\nknock_down(pig, fortress, ferret) = False\n\nquestion = attack(ferret, green_fields, owner(sea_bass))\n"}, {"idx": 270, "response": "burns(mosquito, warehouse, hummingbird) == True\nproceed(hummingbird, spot_right_after(halibut)) = rule1()\nproceed(hummingbird, spot_right_after(halibut)) == True\nattacks(swordfish, green_fields, squirrel) == True\nnot equal_points(swordfish, kiwi) == True\nproceed(swordfish, spot_right_after(viperfish)) = rule2(swordfish)\nproceed(swordfish, spot_right_after(viperfish)) == True\nroll_dice(swordfish, sea_bass) = rule3(swordfish)\nroll_dice(swordfish, sea_bass) == True\nquestion = True", "answer": 1, "code": "rule1() = burns(mosquito, warehouse, hummingbird) => proceed(hummingbird, spot_right_after(halibut))\nrule2(something) = not equal_points(something, kiwi) & attacks(something, green_fields, squirrel) => proceed(something, spot_right_after(viperfish))\nrule3(something) = proceed(something, spot_right_after(viperfish)) => roll_dice(something, sea_bass)\n\nburns(mosquito, warehouse, hummingbird) = True\nattacks(swordfish, green_fields, squirrel) = True\nequal_points(swordfish, kiwi) = False\n\nquestion = roll_dice(swordfish, sea_bass)\n"}, {"idx": 271, "response": "proceeds_to(raven, spot_after(doctorfish)) == True\nraise_flag_of_peace(raven, panda_bear) == True\nnot offer_job_position(raven, lion) = rule1()\nnot offer_job_position(raven, lion) == True\nremove_piece(starfish, polar_bear) = rule4()\nnot remove_piece(starfish, polar_bear) == True\nnot remove_piece(starfish, polar_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = proceeds_to(something, spot_after(doctorfish)) & raise_flag_of_peace(something, panda_bear) => not offer_job_position(something, lion)\nrule2() = not eat_food(tilapia, food_of(sun_bear)) => knock_down_fortress(sun_bear, starfish)\nrule3() = first_letter_of(name(raven)) == first_letter_of(name(black_bear)) => offer_job_position(raven, lion)\nrule4() = offer_job_position(something, lion) => not remove_piece(starfish, polar_bear)\nrule5(something) = not need_support(something, cat) => become_enemy(something, starfish)\nrule6() = burn_warehouse(something, goldfish) => not knock_down_fortress(sun_bear, starfish)\nrule7() = voted_for(raven, mayor) => offer_job_position(raven, lion)\norder(rule1) > order(rule3) = True\norder(rule1) > order(rule7) = True\norder(rule2) > order(rule6) = True\n\nname(black_bear, Max) = True\nburn_warehouse(grizzly_bear, goldfish) = True\noffer_job_position(kudu, carp) = True\nnot need_support(kudu, cat) = True\nname(raven, Meadow) = True\nassassinate(raven, mayor) = True\nproceeds_to(raven, spot_after(doctorfish)) = True\n\nquestion = remove_piece(starfish, polar_bear)\n"}, {"idx": 272, "response": "has(aardvark, card) == True\ncolor(card, white) == True\ncolor(card) in primary_colors == True\nnot show_cards(aardvark, dog) = rule3()\nnot show_cards(aardvark, dog) == True\nnot learn(aardvark, basics_of_resource_management, dog) = rule2()\nnot learn(aardvark, basics_of_resource_management, dog) == True\nprepare_armor(dog, kiwi) = rule2()\nprepare_armor(dog, kiwi) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(aardvark) < 5 => not show_cards(aardvark, dog)\nrule2() = not learn(aardvark, basics_of_resource_management, dog) => prepare_armor(dog, kiwi)\nrule3() = has(aardvark, card) and color(card) in primary_colors => not show_cards(aardvark, dog)\n\nhas(aardvark, card) = True\ncolor(card, white) = True\nfriends(aardvark) = 1\nknows(cat, defensive_plans, aardvark) = False\nknows(leopard, defensive_plans, aardvark) = False\n\nquestion = prepare_armor(dog, kiwi)\n"}, {"idx": 273, "response": "created(salmon, time_machine) == True\nraise_flag_of_peace(salmon, eel) = rule3()\nraise_flag_of_peace(salmon, eel) == True\nproceed(tiger, spot_right_after(panda_bear)) = rule1()\nproceed(tiger, spot_right_after(panda_bear)) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(something, eel) => proceed(tiger, spot_right_after(panda_bear))\nrule2() = respect(something, grizzly_bear) => not raise_flag_of_peace(salmon, eel)\nrule3() = created(salmon, time_machine) => raise_flag_of_peace(salmon, eel)\norder(rule3) > order(rule2) = True\n\nrespect(leopard, grizzly_bear) = True\ncreated(salmon, time_machine) = True\n\nquestion = proceed(tiger, spot_right_after(panda_bear))\n"}, {"idx": 274, "response": "has(kudu, blade) == True\nnot roll_dice(kudu, tilapia) = rule2()\nnot roll_dice(kudu, tilapia) == True\nroll_dice(lion, tilapia) if roll_dice(something, parrot) = rule3()\nroll_dice(panda_bear, parrot) == True\nroll_dice(lion, tilapia) == True\nnot proceed(tilapia, spot_right_after(sea_bass)) = rule1()\nnot proceed(tilapia, spot_right_after(sea_bass)) == True\nquestion = True", "answer": 1, "code": "rule1() = roll_dice(lion, tilapia) & not roll_dice(kudu, tilapia) => not proceed(tilapia, spot_right_after(sea_bass))\nrule2() = has(kudu, sharp_object) => not roll_dice(kudu, tilapia)\nrule3() = roll_dice(lion, tilapia) if roll_dice(something, parrot)\n\nhas(kudu, blade) = True\nroll_dice(panda_bear, parrot) = True\n\nquestion = proceed(tilapia, spot_right_after(sea_bass))\n"}, {"idx": 275, "response": "not attack(crocodile, green_fields, hummingbird) == True\nnot owe(crocodile, money, lobster) == True\nroll_dice(crocodile, halibut) = rule2(crocodile)\nroll_dice(crocodile, halibut) == True\nwink(grizzly_bear, halibut) = rule1()\nwink(grizzly_bear, halibut) == True\nknows(grizzly_bear, defensive_plans, elephant) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(something, halibut) => knows(grizzly_bear, defensive_plans, elephant)\nrule2(something) = not owe(something, money, lobster) & not attack(something, green_fields, hummingbird) => roll_dice(something, halibut)\n\nnot attack(crocodile, green_fields, hummingbird) = True\nnot owe(crocodile, money, lobster) = True\n\nquestion = knows(grizzly_bear, defensive_plans, elephant)\n"}, {"idx": 276, "response": "has(cheetah, high_salary) == True\nlearn(cheetah, basics_of_resource_management, snail) = rule1()\nlearn(cheetah, basics_of_resource_management, snail) == True\nattack(catfish, green_fields, owner(snail)) = rule4()\nattack(catfish, green_fields, owner(snail)) == True\nbelief(learn(cheetah, basics_of_resource_management, snail)) == True\nattack(catfish, green_fields, owner(snail)) == True\nprepare_armor(snail, hippopotamus) = rule3()\nprepare_armor(snail, hippopotamus) == True\nquestion = True", "answer": 1, "code": "rule1() = has(cheetah, high_salary) => learn(cheetah, basics_of_resource_management, snail)\nrule2() = has(catfish, internet_device) => not attack(catfish, green_fields, owner(snail))\nrule3() = belief(learn(cheetah, basics_of_resource_management, snail)) & attack(catfish, green_fields, owner(snail)) => prepare_armor(snail, hippopotamus)\nrule4() = not become_enemy(something, rabbit) => attack(something, green_fields, owner(snail))\nrule5() = not offer_job_position(something, sun_bear) => not prepare_armor(something, hippopotamus)\nrule6() = owes(something, money, sun_bear) => not learn(cheetah, elementary_resource_management, snail)\norder(rule2) > order(rule4) = True\norder(rule5) > order(rule3) = True\norder(rule6) > order(rule1) = True\n\nhas(cheetah, high_salary) = True\nnot become_enemy(catfish, rabbit) = True\n\nquestion = prepare_armor(snail, hippopotamus)\n"}, {"idx": 277, "response": "has(koala, carry_apples_oranges) = True\nowes(koala, money, kudu) = rule2()\nowes(koala, money, kudu) == True\nquestion = unknown", "answer": 0, "code": "rule1() = owes(something, money, kudu) => not show_all_cards(kiwi, zander)\nrule2() = has(koala, carry_apples_oranges) => owes(koala, money, kudu)\nrule3() = friends(koala) < 16 => owes(koala, money, kudu)\n\nhas(koala, violin) = True\nloyal_friends(koala) = 3\ndisloyal_friends(koala) = 3\n\nquestion = show_all_cards(kiwi, zander)\n"}, {"idx": 278, "response": "dream(buffalo, luxury_aircraft) == True\nowns(buffalo, luxury_aircraft) = rule1()\nowns(buffalo, luxury_aircraft) == True\nname(buffalo, Lily) == True\nname(blobfish, Lucy) == True\nfirst_letter_of(name(buffalo)) == first_letter_of(name(blobfish)) = True\nnot eat(buffalo, food_of(bat)) = rule2()\neat(buffalo, food_of(bat)) == False\nnot eat(buffalo, food_of(bat)) == True\nroll_dice(buffalo, hippopotamus) = rule5()\nroll_dice(buffalo, hippopotamus) == True\nrespect(buffalo, elephant) = rule4()\nrespect(buffalo, elephant) == True\nquestion = True", "answer": 1, "code": "rule1() = owns(buffalo, luxury_aircraft) => not eat(buffalo, food_of(bat))\nrule2() = first_letter_of(name(buffalo)) == first_letter_of(name(blobfish)) => not eat(buffalo, food_of(bat))\nrule3(something) = eat(something, food_of(grizzly_bear)) => not roll_dice(something, hippopotamus)\nrule4(something) = not eat(something, food_of(bat)) & roll_dice(something, hippopotamus) => respect(something, elephant)\nrule5() = become_enemy(tilapia, buffalo) & not wink(panther, buffalo) => roll_dice(buffalo, hippopotamus)\norder(rule3) > order(rule5) = True\n\nname(blobfish, Lucy) = True\ndream(buffalo, luxury_aircraft) = True\nname(buffalo, Lily) = True\nbecome_enemy(tilapia, buffalo) = True\nowe(panther, money, buffalo) = False\n\nquestion = respect(buffalo, elephant)\n"}, {"idx": 279, "response": "has(hummingbird, keys) == True\nnot has(hummingbird, keys) == False\nnot eat_food(hummingbird, food_of(mosquito)) = rule1()\nnot eat_food(hummingbird, food_of(mosquito)) == False\nfirst_letter_of(name(hummingbird)) == first_letter_of(name(goldfish)) == True\nnot eat_food(hummingbird, food_of(mosquito)) = rule2()\nnot eat_food(hummingbird, food_of(mosquito)) == False\nhas(hummingbird, card) == True\ncolor(card) in rainbow_colors == True\nnot remove_from_board(hummingbird, piece_of(lobster)) = rule3()\nnot remove_from_board(hummingbird, piece_of(lobster)) == False\nnot eat_food(hummingbird, food_of(mosquito)) == False\nlearn(hummingbird, basics_of_resource_management_from(amberjack)) = rule4()\nlearn(hummingbird, basics_of_resource_management_from(amberjack)) == True\nquestion = True", "answer": 1, "code": "rule1() = not has(hummingbird, keys) => not eat_food(hummingbird, food_of(mosquito))\nrule2() = first_letter_of(name(hummingbird)) == first_letter_of(name(goldfish)) => not eat_food(hummingbird, food_of(mosquito))\nrule3() = has(hummingbird, card) and color(card) in rainbow_colors => not remove_from_board(hummingbird, piece_of(lobster))\nrule4(something) = not remove_from_board(something, piece_of(lobster)) & not eat_food(something, food_of(mosquito)) => learn(something, basics_of_resource_management_from(amberjack))\nrule5() = give(black_bear, magnifier, hummingbird) => remove_from_board(hummingbird, piece_of(lobster))\norder(rule5) > order(rule3) = True\n\nname(goldfish, Cinnamon) = True\nhas(hummingbird, card) = True\ncolor(card, violet) = True\nname(hummingbird, Charlie) = True\nhas(hummingbird, keys) = True\n\nquestion = learn(hummingbird, basics_of_resource_management_from(amberjack))\n"}, {"idx": 280, "response": "friends(blobfish) = 18\nname(blobfish, Pashmak) = True\nfirst_letter_of(name(blobfish)) == first_letter_of(name(viperfish)) = True\ngive(blobfish, magnifier, elephant) = rule2()\ngive(blobfish, magnifier, elephant) == True\ngive(blobfish, magnifier, elephant) == True\nnot attack(elephant, green_fields(sheep)) = rule3()\nnot attack(elephant, green_fields(sheep)) == True\nnot attack(elephant, green_fields(sheep)) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(blobfish) > 8 => give(blobfish, magnifier, elephant)\nrule2() = first_letter_of(name(blobfish)) == first_letter_of(name(viperfish)) => give(blobfish, magnifier, elephant)\nrule3() = give(blobfish, magnifier, elephant) => not attack(elephant, green_fields(sheep))\nrule4() = give(hippopotamus, magnifying_glass, blobfish) => not give(blobfish, magnifier, elephant)\norder(rule1) > order(rule4) = True\norder(rule2) > order(rule4) = True\n\nfriends(blobfish) = 18\nname(blobfish, Pashmak) = True\ngive(hippopotamus, magnifying_glass, blobfish) = True\nname(viperfish, Luna) = True\n\nquestion = attack(elephant, green_fields(sheep))\n"}, {"idx": 281, "response": "has(snail, hot_chocolate) == True\nhas(snail, drink) == True\nnot eat_food(snail, food_of(cheetah)) = rule3()\nnot eat_food(snail, food_of(cheetah)) == False\nnot eat_food(snail, food_of(cheetah)) == False\ntook(snail, bike, store) == True\neat_food(snail, food_of(cheetah)) = rule2()\neat_food(snail, food_of(cheetah)) == True\neat_food(snail, food_of(cheetah)) == True\nknock_down_fortress(cheetah, kangaroo) = rule1()\nknock_down_fortress(cheetah, kangaroo) == False\nknock_down_fortress(cheetah, kangaroo) == False\nquestion = False", "answer": -1, "code": "rule1() = not eat_food(snail, food_of(cheetah)) => knock_down_fortress(cheetah, kangaroo)\nrule2() = took(snail, bike, store) => eat_food(snail, food_of(cheetah))\nrule3() = has(snail, drink) => not eat_food(snail, food_of(cheetah))\nrule4() = raise_flag_of_peace(zander, cheetah) => not knock_down_fortress(cheetah, kangaroo)\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule1) = True\n\nhas(snail, hot_chocolate) = True\ntook(snail, bike, store) = True\nadventurous_friends(snail) = 8\nnon_adventurous_friends(snail) = 1\n\nquestion = knock_down_fortress(cheetah, kangaroo)\n"}, {"idx": 282, "response": "has(cat, card) and color(card) == violet = True\nhas(cat, internet_device) = True\nburn(cat, warehouse, moose) = rule5()\nburn(cat, warehouse, moose) == True\nnot need_support(cat, whale) = rule6()\nneed_support(cat, whale) == False\nneed_support(cat, whale) == False\nquestion = False", "answer": -1, "code": "rule1() = give(something, magnifier, kudu) => need_support(cat, whale)\nrule2() = has(donkey, card) and color(card) in flag_colors(Netherlands) => give(donkey, magnifier, kudu)\nrule3() = has(cat, internet_device) => not burn(cat, warehouse, moose)\nrule4() = has(donkey, time_machine) => give(donkey, magnifying_glass, kudu)\nrule5() = friends(cat) > 2 => burn(cat, warehouse, moose)\nrule6() = burn(something, warehouse, moose) => not need_support(something, whale)\norder(rule1) > order(rule6) = True\norder(rule5) > order(rule3) = True\n\nhas(cat, card) and color(card) == violet = True\nhas(cat, kale) = True\nkind_friends(cat) = 3\nnot_kind_friends(cat) = 7\nhas(donkey, card) and color(card) == red = True\ninvented(donkey, time_machine) = True\n\nquestion = need_support(cat, whale)\n"}, {"idx": 283, "response": "color(card(dog), white) == True\nstarts_with(color(card(dog)), \"w\") == True\nneeds_support(dog, wolverine) = rule1()\nneeds_support(dog, wolverine) == True\nexists(animal) such that needs_support(animal, wolverine) == True\nnot prepare_armor(koala, zander) = rule2()\nprepare_armor(koala, zander) == False\nquestion = False", "answer": -1, "code": "rule1() = starts_with(color(card(dog)), \"w\") => needs_support(dog, wolverine)\nrule2() = exists(animal) such that needs_support(animal, wolverine) => not prepare_armor(koala, zander)\n\ncolor(card(dog), white) = True\n\nquestion = prepare_armor(koala, zander)\n"}, {"idx": 284, "response": "has(crocodile, card) == True\ncolor(card, white) == True\nneeds_support(crocodile, jellyfish) = rule3()\nneeds_support(crocodile, jellyfish) == True\nroll_dice(crocodile, sheep) = rule1()\nroll_dice(crocodile, sheep) == True\nquestion = True", "answer": 1, "code": "rule1(something) = needs_support(something, jellyfish) => roll_dice(something, sheep)\nrule2() = sings_victory_song(something, ferret) => not roll_dice(crocodile, sheep)\nrule3() = has(crocodile, card) and color(card) in primary_colors => needs_support(crocodile, jellyfish)\norder(rule1) > order(rule2) = True\n\nhas(crocodile, card) = True\ncolor(card, white) = True\n\nquestion = roll_dice(crocodile, sheep)\n"}, {"idx": 285, "response": "has(hare, drink) == False\nhas(hare, beer) == True\nrespect(hare, halibut) = rule1()\nrespect(hare, halibut) == True\nlearn(panther, elementary_resource_management, caterpillar) = rule2()\nlearn(panther, elementary_resource_management, caterpillar) == False\nlearn(panther, elementary_resource_management, koala) = rule2()\nlearn(panther, elementary_resource_management, koala) == True\nname(mosquito, Tango) == True\nname(doctorfish, Teddy) == True\nfirst_letter_of(name(mosquito)) == first_letter_of(name(doctorfish)) = True\nneeds_support(mosquito, halibut) = rule3()\nneeds_support(mosquito, halibut) == True\nhas(mosquito, card) and starts_with(color(card), \"b\") = rule4()\nhas(mosquito, card) == False\nstarts_with(color(card), \"b\") == False\nnot needs_support(mosquito, halibut) == True\nproceed(halibut, spot_after(cow)) = rule5()\nproceed(halibut, spot_after(cow)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(hare, drink) => respect(hare, halibut)\nrule2(something) = learn(something, elementary_resource_management, caterpillar) => learn(something, elementary_resource_management, koala)\nrule3() = first_letter_of(name(mosquito)) == first_letter_of(name(doctorfish)) => needs_support(mosquito, halibut)\nrule4() = has(mosquito, card) and starts_with(color(card), \"b\") => not needs_support(mosquito, halibut)\nrule5() = learn(something, elementary_resource_management, koala) => proceed(halibut, spot_after(cow))\norder(rule4) > order(rule3) = True\n\nname(doctorfish, Teddy) = True\nburns(hare, warehouse_of(puffin)) = True\nhas(hare, beer) = True\nname(mosquito, Tango) = True\nlearn(panther, basics_of_resource_management, caterpillar) = True\n\nquestion = proceed(halibut, spot_after(cow))\n"}, {"idx": 286, "response": "offer_job_position(swordfish, catfish) == True\nproceed(catfish, spot_after(goldfish)) = rule4()\nproceed(catfish, spot_after(goldfish)) == True\nproceed(catfish, spot_after(goldfish)) == True\nhold(goldfish, same_points, puffin) = rule1()\nnever_hold(goldfish, same_points, puffin) == True\nhold(goldfish, same_points, puffin) == False\nquestion = False", "answer": -1, "code": "rule1() = proceed(catfish, spot_after(goldfish)) & not offer_job_position(meerkat, goldfish) => never_hold(goldfish, same_points, puffin)\nrule2() = has_high_salary(catfish) => not proceed(catfish, spot_after(goldfish))\nrule3() = has_primary_color_card(catfish) => not proceed(catfish, spot_after(goldfish))\nrule4() = offer_job_position(swordfish, catfish) => proceed(catfish, spot_after(goldfish))\nrule5() = killed(mayor, meerkat) => not offer_job_position(meerkat, goldfish)\norder(rule2) > order(rule4) = True\norder(rule3) > order(rule4) = True\n\nname(cat, Buddy) = True\nhas(catfish, card) = True\ncolor(card, indigo) = True\nname(meerkat, Blossom) = True\nkilled(mayor, meerkat) = True\noffer_job_position(swordfish, catfish) = True\n\nquestion = hold(goldfish, same_points, puffin)\n"}, {"idx": 287, "response": "has(whale, hot_chocolate) == True\nhas(whale, something_to_sit_on) == False\noffer_job_position(whale, caterpillar) = rule1()\noffer_job_position(whale, caterpillar) == False\noffer_job_position(something, caterpillar) = False\nsteal_points(squirrel, 5, amberjack) = False\nquestion = False", "answer": -1, "code": "rule1() = has(whale, something_to_sit_on) => offer_job_position(whale, caterpillar)\nrule2() = offer_job_position(something, caterpillar) => steal_points(squirrel, 5, amberjack)\n\nhas(whale, hot_chocolate) = True\n\nquestion = steal_points(squirrel, 5, amberjack)\n"}, {"idx": 288, "response": "has(sun_bear, card) == True\ncolor(card, black) in colors_of_flag(France) == False\nnot attack(sun_bear, green_fields, mosquito) = rule1()\nnot attack(sun_bear, green_fields, mosquito) == True\nlearn(sun_bear, elementary_resource_management, cow) = rule4()\nlearn(sun_bear, elementary_resource_management, cow) == True\nquestion = True", "answer": 1, "code": "rule1() = has(sun_bear, card) and color(card) in colors_of_flag(France) => not attack(sun_bear, green_fields, mosquito)\nrule2() = steal_points(something, 5, phoenix) => not learn(sun_bear, elementary_resource_management, cow)\nrule3(something) = prepare_armor(something, kiwi) & show_cards(something, all, eel) => attack(something, green_fields, owner(mosquito))\nrule4() = attack(something, green_fields, owner(mosquito)) => learn(something, elementary_resource_management, cow)\nrule5() = has(squirrel, something_to_sit_on) => not steal_points(squirrel, 5, phoenix)\nrule6() = friends(squirrel) > 1 => steal_points(squirrel, 5, phoenix)\nrule7() = first_letter_of(name(squirrel)) == first_letter_of(name(meerkat)) => not steal_points(squirrel, 5, phoenix)\norder(rule3) > order(rule1) = True\norder(rule4) > order(rule2) = True\norder(rule5) > order(rule6) = True\norder(rule7) > order(rule6) = True\n\nname(gecko, Cinnamon) = True\nname(meerkat, Blossom) = True\nfriends(squirrel) = 4\nname(squirrel, Luna) = True\nhas(sun_bear, card) = True\ncolor(card, black) = True\nprepare_armor(sun_bear, kiwi) = True\nshow_cards(sun_bear, all, eel) = True\nname(sun_bear, Charlie) = True\n\nquestion = learn(sun_bear, elementary_resource_management, cow)\n"}, {"idx": 289, "response": "bald_friends(gecko) = 2\nnon_bald_friends(gecko) = 2\nfriends(gecko) = 4\nwink(gecko, elephant) = rule4()\nwink(gecko, elephant) == True\nproceed(gecko, spot_right_after(salmon)) = False\nnot proceed(gecko, spot_right_after(salmon)) = rule3()\nlearn(gecko, basics_of_resource_management_from(grizzly_bear)) = rule3()\nlearn(gecko, basics_of_resource_management_from(grizzly_bear)) == True\noffer_job_position(gecko, halibut) = not offer_job_position(gecko, halibut) = rule1()\nnot offer_job_position(gecko, halibut) == True\nquestion = True", "answer": 1, "code": "rule1(something) = wink(something, elephant) & learn(something, elementary_resource_management_from(grizzly_bear)) => not offer_job_position(something, halibut)\nrule2() = belief(sea_bass, knocks_down_fortress, octopus) & need_support(raven, octopus) => add_conclusion(octopus, show_cards(all), koala)\nrule3(something) = not proceed(something, spot_right_after(salmon)) => learn(something, basics_of_resource_management_from(grizzly_bear))\nrule4() = friends(gecko) < 9 => wink(gecko, elephant)\n\nbald_friends(gecko) = 2\nnon_bald_friends(gecko) = 2\nproceed(gecko, spot_right_after(salmon)) = False\nneed_support(raven, octopus) = True\nbelief(sea_bass, knocks_down_fortress, octopus) = True\n\nquestion = offer_job_position(gecko, halibut)\n"}, {"idx": 290, "response": "give(rabbit, magnifier, polar_bear) == True\nrespect(rabbit, cricket) = rule2(rabbit)\nrespect(rabbit, cricket) == True\nburn(warehouse, caterpillar) = rule4(rabbit)\nburn(warehouse, caterpillar) == True\nburn(warehouse, caterpillar) == True\nquestion = True", "answer": 1, "code": "rule1(something) = knows(something, defense_plan, moose) => not burn(warehouse, caterpillar)\nrule2(something) = give(something, magnifier, polar_bear) => respect(something, cricket)\nrule3(something) = sing_victory_song(something, black_bear) & remove_piece(something, viperfish) => not respect(something, cricket)\nrule4(something) = respect(something, cricket) => burn(warehouse, caterpillar)\norder(rule1) > order(rule4) = True\norder(rule3) > order(rule2) = True\n\ngive(rabbit, magnifier, polar_bear) = True\nremove_piece(rabbit, viperfish) = True\nsing_victory_song(rabbit, black_bear) = True\n\nquestion = burn(warehouse, caterpillar)\n"}, {"idx": 291, "response": "learns(panther, basics_of_resource_management, blobfish) == True\nequal_points(swordfish, blobfish) == False\nrolls_dice(blobfish, oscar) = rule1()\nrolls_dice(blobfish, oscar) == True\nrespect(eagle, starfish) = rule1()\nrespect(eagle, starfish) == True\nquestion = True", "answer": 1, "code": "rule1() = rolls_dice(something, oscar) => respect(eagle, starfish)\nrule2() = not equal_points(swordfish, blobfish) & learns(panther, elementary_resource_management, blobfish) => add_conclusion(\"the blobfish rolls the dice for the oscar\")\n\nlearns(panther, basics_of_resource_management, blobfish) = True\nequal_points(swordfish, blobfish) = False\n\nquestion = respect(eagle, starfish)\n"}, {"idx": 292, "response": "show_cards(carp, all, kiwi) == True\nburn_warehouse(carp, wolverine) = rule1()\nburn_warehouse(carp, wolverine) == True\nsing_victory_song(jellyfish, grasshopper) = rule1()\nsing_victory_song(jellyfish, grasshopper) == True\nquestion = True", "answer": 1, "code": "rule1() = burn_warehouse(something, wolverine) => sing_victory_song(jellyfish, grasshopper)\nrule2() = raise_flag_of_peace(meerkat, jellyfish) => not sing_victory_song(jellyfish, grasshopper)\nrule3() = show_cards(something, all, kiwi) => raise_flag_of_peace(meerkat, jellyfish)\norder(rule1) > order(rule2) = True\n\nshow_cards(carp, all, kiwi) = True\n\nquestion = sing_victory_song(jellyfish, grasshopper)\n"}, {"idx": 293, "response": "has(donkey, card) == True\ncolor(card) in flag_of_Japan_colors == True\nnot respect(donkey, aardvark) = rule3()\nnot respect(donkey, aardvark) == True\nnot respect(donkey, aardvark) == True\neat_food(donkey, food_of(rabbit)) = rule2()\neat_food(donkey, food_of(rabbit)) == True\neat_food(donkey, food_of(rabbit)) == True\nquestion = True", "answer": 1, "code": "rule1() = belief(salmon_needs_support, donkey) & not give(squirrel, magnifier, donkey) => add_conclusion(\"the donkey respects the aardvark\")\nrule2() = remove_piece(something, ferret) => eat_food(donkey, food_of(rabbit))\nrule3() = has(donkey, card) & color(card) in flag_of_Japan_colors => not respect(donkey, aardvark)\nrule4() = friends(donkey) < 8 => not respect(donkey, aardvark)\nrule5() = first_letter_of(name(parrot)) == first_letter_of(name(leopard)) => burn_warehouse(parrot, ferret)\norder(rule3) > order(rule1) = True\norder(rule4) > order(rule1) = True\n\nhas(donkey, card) = True\ncolor(card, white) = True\nname(leopard, Paco) = True\nhas(parrot, bench) = True\nname(parrot, Pablo) = True\nlost_keys(parrot) = True\neat_food(squirrel, food_of(donkey)) = True\nneed_support(salmon, donkey) = False\n\nquestion = eat_food(donkey, food_of(rabbit))\n"}, {"idx": 294, "response": "has(carp, green_tea) == True\nhas(carp, drink) == True\nburns_warehouse(carp, whale) = rule7()\nburns_warehouse(carp, whale) == True\nholds_equal_points(carp, tilapia) = rule5()\nholds_equal_points(carp, tilapia) == False\nburns_warehouse(carp, whale) == True\noffer_job_position(carp, rabbit) = rule2()\noffer_job_position(carp, rabbit) == True\nquestion = True", "answer": 1, "code": "rule1() = needs(something, support, moose) => not hold_equal_points(carp, cricket)\nrule2(something) = hold_equal_points(something, cricket) & burns_warehouse(something, whale) => offer_job_position(something, rabbit)\nrule3() = first_letter_of(name(carp)) == first_letter_of(name(squirrel)) => hold_equal_points(carp, cricket)\nrule4() = fan_of(carp, Chris_Ronaldo) => hold_equal_points(carp, cricket)\nrule5() = holds_equal_points(something, tilapia) => not burns_warehouse(carp, whale)\nrule6() = learns(halibut, basics_of_resource_management, carp) => not offer_job_position(carp, rabbit)\nrule7() = has(carp, drink) => burns_warehouse(carp, whale)\norder(rule1) > order(rule3) = True\norder(rule1) > order(rule4) = True\norder(rule5) > order(rule7) = True\norder(rule6) > order(rule2) = True\n\nhas(carp, green_tea) = True\nhates(carp, Chris_Ronaldo) = True\nname(carp, Tango) = True\nname(squirrel, Teddy) = True\n\nquestion = offer_job_position(carp, rabbit)\n"}, {"idx": 295, "response": "friends(hippopotamus) = 10\nburn_warehouse(hippopotamus, swordfish) = rule1()\nburn_warehouse(hippopotamus, swordfish) == False\nnot burn_warehouse(hippopotamus, swordfish) == True\nnot sing_song_of_victory(hummingbird, hippopotamus) = rule2()\nnot sing_song_of_victory(hummingbird, hippopotamus) == True\nnot burn_warehouse(hippopotamus, swordfish) == True\nnot roll_dice(viperfish, parrot) = rule3()\nnot roll_dice(viperfish, parrot) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(hippopotamus) < 16 => burn_warehouse(hippopotamus, swordfish)\nrule2() = not sing_song_of_victory(hummingbird, hippopotamus) => not burn_warehouse(hippopotamus, swordfish)\nrule3() = burn_warehouse(something, swordfish) => not roll_dice(viperfish, parrot)\norder(rule2) > order(rule1) = True\n\nfriends(hippopotamus) = 10\n\nquestion = roll_dice(viperfish, parrot)\n"}, {"idx": 296, "response": "friends(turtle) = 11\nhas(turtle, cello) = True\nholds_equal_points(turtle, tiger) = True\nprepares_armor(turtle, canary) = True\npurchased(turtle, time_machine) = True\nnot remove_piece(turtle, blobfish) = rule3()\nremove_piece(turtle, blobfish) == False\nnot remove_piece(turtle, blobfish) == False\nholds_equal_points(turtle, spider) = rule4()\nholds_equal_points(turtle, spider) == True\nholds_equal_points(turtle, spider) == True\nnot holds_equal_points(spider, hummingbird) = rule6()\nnot holds_equal_points(spider, hummingbird) == True\nnot holds_equal_points(spider, hummingbird) == True\nquestion = True", "answer": 1, "code": "rule1() = has(turtle, leafy_green_vegetable) => remove_piece(turtle, blobfish)\nrule2() = friends(turtle) < 9 => remove_piece(turtle, blobfish)\nrule3() = purchased(turtle, time_machine) => not remove_piece(turtle, blobfish)\nrule4(something) = prepares_armor(something, canary) & holds_equal_points(something, tiger) => holds_equal_points(something, spider)\nrule5() = has(turtle, internet_device) => not remove_piece(turtle, blobfish)\nrule6() = not owe(sea_bass, money, spider) & holds_equal_points(turtle, spider) => not holds_equal_points(spider, hummingbird)\nrule7() = remove_piece(something, blobfish) => holds_equal_points(spider, hummingbird)\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule2) = True\norder(rule5) > order(rule1) = True\norder(rule5) > order(rule2) = True\norder(rule6) > order(rule7) = True\n\nfriends(turtle) = 11\nhas(turtle, cello) = True\nholds_equal_points(turtle, tiger) = True\nprepares_armor(turtle, canary) = True\npurchased(turtle, time_machine) = True\nholds_equal_points(kangaroo, ferret) = False\n\nquestion = holds_equal_points(spider, hummingbird)\n"}, {"idx": 297, "response": "has(pig, card) == True\ncolor(card, orange) == True\ncolor(card) in rainbow_colors == True\nknows(pig, defensive_plans, tilapia) = rule2()\nknows(pig, defensive_plans, tilapia) == True\nfriends(pig) = 7\nfriends(pig) > 10 == False\nknows(something, defensive_plans, tilapia) = rule3()\nknows(something, defensive_plans, tilapia) == False\noffer_job_position(blobfish, amberjack) = rule1()\noffer_job_position(blobfish, amberjack) == True\nquestion = True", "answer": 1, "code": "rule1() = knows(something, defensive_plans, tilapia) => offer_job_position(blobfish, amberjack)\nrule2() = has(pig, card) and color(card) in rainbow_colors => knows(pig, defensive_plans, tilapia)\nrule3() = friends(pig) > 10 => knows(pig, defensive_plans, tilapia)\n\nhas(pig, card) = True\ncolor(card, orange) = True\nfriends(pig) = 7\nhas(pig, arugula) = True\n\nquestion = offer_job_position(blobfish, amberjack)\n"}, {"idx": 298, "response": "respect(kiwi, blobfish) == True\nrespect(blobfish, wolverine) = rule3()\nrespect(blobfish, wolverine) == True\nnot attack(green_fields, owner(wolverine)) = rule2(blobfish)\nnot attack(green_fields, owner(wolverine)) == True\nnot attack(blobfish, green_fields, wolverine) == True\nnot owe(blobfish, money, oscar) = rule1(blobfish)\nnot owe(blobfish, money, oscar) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not attack(something, green_fields, wolverine) & respect(something, wolverine) => not owe(something, money, oscar)\nrule2(something) = saw(something, show_all_cards, whale) => not attack(green_fields, owner(wolverine))\nrule3() = respect(blobfish, wolverine) & respect(kiwi, blobfish)\n\nsaw(blobfish, show_all_cards, whale) = True\nwink(buffalo, grasshopper) = True\nrespect(kiwi, blobfish) = True\n\nquestion = owe(blobfish, money, oscar)\n"}, {"idx": 299, "response": "has(phoenix, drink) == True\nburns_warehouse(phoenix, gecko) = rule3()\nburns_warehouse(phoenix, gecko) == True\nknocks_down_fortress(phoenix, aardvark) = True\nknocks_down_fortress(phoenix, amberjack) = False\nquestion = False", "answer": -1, "code": "rule1(something) = rolls_dice(something, starfish) & burns_warehouse(something, gecko) => knocks_down_fortress(something, amberjack)\nrule2(something) = removes_piece(something, hippopotamus) => not burns_warehouse(something, gecko)\nrule3() = has(phoenix, drink) => burns_warehouse(phoenix, gecko)\nrule4(something) = knocks_down_fortress(something, aardvark) => rolls_dice(something, starfish)\norder(rule2) > order(rule3) = True\n\nhas(phoenix, arugula) = True\nknocks_down_fortress(phoenix, aardvark) = True\n\nquestion = knocks_down_fortress(phoenix, amberjack)\n"}, {"idx": 300, "response": "has(mosquito, card) == True\ncolor(card, red) == True\ncolor(card) in rainbow_colors == True\nroll_dice(mosquito, hummingbird) = rule1()\nroll_dice(mosquito, hummingbird) == True\nshow_cards(hummingbird, all, donkey) = rule3()\nshow_cards(hummingbird, all, donkey) == True\nquestion = True", "answer": 1, "code": "rule1() = has(mosquito, card) and color(card) in rainbow_colors => roll_dice(mosquito, hummingbird)\nrule2() = friends(mosquito) < 5 => roll_dice(mosquito, hummingbird)\nrule3() = roll_dice(mosquito, hummingbird) => show_cards(hummingbird, all, donkey)\nrule4(something) = show_cards(something, all, elephant) and not prepare_armor(something, grizzly_bear) => not roll_dice(something, hummingbird)\norder(rule4) > order(rule1) = True\norder(rule4) > order(rule2) = True\n\nhas(mosquito, card) = True\ncolor(card, red) = True\nenergetic_friends(mosquito) = 4\nnon_energetic_friends(mosquito) = 5\nprepare_armor(mosquito, grizzly_bear) = False\n\nquestion = show_cards(hummingbird, all, donkey)\n"}, {"idx": 301, "response": "friends(blobfish) = 1\nfriends(blobfish) < 4 = True\nknock_down(blobfish, fortress, parrot) = rule1()\nknock_down(blobfish, fortress, parrot) == True\nowns(hippopotamus, luxury_aircraft) = True\nburn(hippopotamus, warehouse, hare) = rule2()\nburn(hippopotamus, warehouse, hare) == True\nburn(hippopotamus, warehouse, hare) == True\nnot need_support(hare, cheetah) = rule4()\nnot need_support(hare, cheetah) == True\nneed_support(hare, cheetah) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(blobfish) < 4 => knock_down(blobfish, fortress, parrot)\nrule2() = owns(hippopotamus, luxury_aircraft) => burn(hippopotamus, warehouse, hare)\nrule3() = friends(hippopotamus) > 8 => burn(hippopotamus, warehouse, hare)\nrule4() = burn(hippopotamus, warehouse, hare) => not need_support(hare, cheetah)\n\nfriends(blobfish) = 1\nattacks(gecko, green_fields, pig) = True\nowns(hippopotamus, luxury_aircraft) = True\nfriends(hippopotamus) = 17\n\nquestion = need_support(hare, cheetah)\n"}, {"idx": 302, "response": "has(sheep, card) and starts_with(color(card), \"r\") = rule1()\nhas(sheep, card) == False\nstarts_with(color(card), \"r\") == False\nnot has(sheep, keys) = rule2()\nhas(sheep, keys) == False\nnot has(sheep, keys) == True\nnot rolls_dice(sheep, sea_bass) = rule2()\nrolls_dice(sheep, sea_bass) == False\nnot rolls_dice(sheep, sea_bass) == True\nnot learn(snail, basics_of_resource_management, sea_bass) & not rolls_dice(sheep, sea_bass) = rule5()\nlearn(snail, basics_of_resource_management, sea_bass) == False\nrolls_dice(sheep, sea_bass) == False\nnot learn(snail, basics_of_resource_management, sea_bass) & not rolls_dice(sheep, sea_bass) == True\nnot show_cards(sea_bass, all, dog) = rule5()\nshow_cards(sea_bass, all, dog) == False\nnot show_cards(sea_bass, all, dog) == True\nquestion = True", "answer": 1, "code": "rule1() = has(sheep, card) and starts_with(color(card), \"r\") => rolls_dice(sheep, sea_bass)\nrule2() = not has(sheep, keys) => not rolls_dice(sheep, sea_bass)\nrule3(something) = not prepare_armor(something, rabbit) => show_cards(something, all, salmon)\nrule4() = has(sheep, something_to_sit_on) => rolls_dice(sheep, sea_bass)\nrule5() = not learn(snail, basics_of_resource_management, sea_bass) & not rolls_dice(sheep, sea_bass) => not show_cards(sea_bass, all, dog)\nrule6(something) = eats_food(something, food_of(squirrel)) & show_cards(something, all, salmon) => show_cards(something, all, dog)\nrule7() = first_letter_of(name(sea_bass)) == first_letter_of(name(polar_bear)) => eats_food(sea_bass, food_of(squirrel))\nrule8() = took(snail, bike, store) => learn(snail, elementary_resource_management, sea_bass)\nrule9(something) = not owe(something, money, jellyfish) => not learn(something, basics_of_resource_management, sea_bass)\nrule10() = friends(sheep) < 4 => not rolls_dice(sheep, sea_bass)\norder(rule10) > order(rule1) = True\norder(rule10) > order(rule4) = True\norder(rule2) > order(rule1) = True\norder(rule2) > order(rule4) = True\norder(rule5) > order(rule6) = True\norder(rule9) > order(rule8) = True\n\nname(polar_bear, Casper) = True\nname(sea_bass, Lola) = True\nrespect(sea_bass, rabbit) = False\nfriends(sheep) = 8\nhas(sheep, kale) = True\nhas(sheep, keys) = False\ntook(snail, bike, store) = True\n\nquestion = show_cards(sea_bass, all, dog)\n"}, {"idx": 303, "response": "has(eagle, card) == True\ncolor(card) in rainbow_colors == True\nnot proceed(eagle, spot_right_after(panther)) = rule2()\nnot proceed(eagle, spot_right_after(panther)) == True\nnot proceed(eagle, spot_right_after(panther)) == True\neat_food(eagle, food_of(caterpillar)) = rule1()\neat_food(eagle, food_of(caterpillar)) == True\neat_food(eagle, food_of(caterpillar)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not proceed(something, spot_right_after(panther)) => eat_food(something, food_of(caterpillar))\nrule2() = has(eagle, card) and color(card) in rainbow_colors => not proceed(eagle, spot_right_after(panther))\n\nhas(eagle, card) = True\ncolor(card, green) = True\n\nquestion = eat_food(eagle, food_of(caterpillar))\n"}, {"idx": 304, "response": "has(oscar, drink) == False\nroll_dice(oscar, goldfish) = rule1()\nroll_dice(oscar, goldfish) == False\nfirst_letter_of(name(oscar)) == first_letter_of(name(aardvark)) = True\nroll_dice(oscar, carp) = rule2()\nroll_dice(oscar, carp) == True\nhas(oscar, card) == True\ncolor(card) in primary_colors = True\nroll_dice(oscar, carp) = rule3()\nroll_dice(oscar, carp) == True\nnot burn(ferret, warehouse, oscar) == True\nnot steal_points(oscar, 5, kudu) = rule4()\nnot steal_points(oscar, 5, kudu) == True\ncreated(oscar, time_machine) = False\nnot roll_dice(oscar, carp) = rule5()\nnot roll_dice(oscar, carp) == False\nroll_dice(oscar, carp) == True\nroll_dice(oscar, carp) == True\nroll_dice(oscar, carp) == True\nroll_dice(oscar, doctorfish) = rule7()\nroll_dice(oscar, doctorfish) == False\nquestion = False", "answer": -1, "code": "rule1() = has(oscar, drink) => not roll_dice(oscar, goldfish)\nrule2() = first_letter_of(name(oscar)) == first_letter_of(name(aardvark)) => roll_dice(oscar, carp)\nrule3() = has(oscar, card) and color(card) in primary_colors => roll_dice(oscar, carp)\nrule4() = not burn(ferret, warehouse, oscar) => not steal_points(oscar, 5, kudu)\nrule5() = created(oscar, time_machine) => not roll_dice(oscar, carp)\nrule6(something) = learn(something, basics_of_resource_management, elephant) => roll_dice(something, goldfish)\nrule7(something) = roll_dice(something, carp) => not roll_dice(something, doctorfish)\nrule8() = friends(oscar) < 9 => steal_points(oscar, 5, kudu)\norder(rule5) > order(rule2) = True\norder(rule5) > order(rule3) = True\norder(rule6) > order(rule1) = True\norder(rule8) > order(rule4) = True\n\nname(aardvark, Buddy) = True\nhas(oscar, card) = True\ncolor(card, blue) = True\nhas(oscar, hot_chocolate) = True\nname(oscar, Tessa) = True\nburn(ferret, warehouse, oscar) = False\n\nquestion = roll_dice(oscar, doctorfish)\n"}, {"idx": 305, "response": "playful_friends(canary) = 2\nnon_playful_friends(canary) = 3\nfriends(canary) = 5\nname(canary, Pashmak) = True\nname(pig, Paco) = True\nfirst_letter_of(name(canary)) == first_letter_of(name(pig)) = True\nsteal(canary, 5, points, cricket) = rule3()\nsteal(canary, 5, points, cricket) == True\ngive(zander, magnifier, cricket) = True\nrespect(cricket, cat) = rule2()\nrespect(cricket, cat) == True\nrespect(cricket, cat) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(zander) < 8 => not give(zander, magnifier, cricket)\nrule2() = steal(canary, 5, points, cricket) & give(zander, magnifier, cricket) => respect(cricket, cat)\nrule3() = first_letter_of(name(canary)) == first_letter_of(name(pig)) => steal(canary, 5, points, cricket)\nrule4() = friends(canary) < 7 => steal(canary, 5, points, cricket)\nrule5(something) = respect(something, cheetah) => not respect(cricket, cat)\nrule6(something) = not wink(something, oscar) => give(something, magnifying_glass, cricket)\norder(rule1) > order(rule6) = True\norder(rule5) > order(rule2) = True\n\nplayful_friends(canary) = 2\nnon_playful_friends(canary) = 3\nname(canary, Pashmak) = True\nname(pig, Paco) = True\nknock_down(zander, fortress, oscar) = False\n\nquestion = respect(cricket, cat)\n"}, {"idx": 306, "response": "question = unknown", "answer": 0, "code": "rule1(something) = offer_job_position(something, pig) => eat_food(something, food_of(amberjack))\nrule2(something) = not know(something, defensive_plans, lion) & not become_enemy(something, squid) => offer_job_position(something, pig)\n\nnot become_enemy(jellyfish, squid) = True\nnot know(jellyfish, defensive_plans, lion) = True\n\nquestion = eat_food(jellyfish, food_of(amberjack))\n"}, {"idx": 307, "response": "show_all_cards(dog, penguin) == True\neat_food(phoenix, food_of(penguin)) = rule2()\neat_food(phoenix, food_of(penguin)) == True\nproceed(lion, spot_right_after(eel)) = not eat_food(something, food_of(penguin))\nproceed(lion, spot_right_after(eel)) == not True\nproceed(lion, spot_right_after(eel)) == False\nquestion = False", "answer": -1, "code": "rule1() = eat_food(something, food_of(penguin)) => not proceed(lion, spot_right_after(eel))\nrule2() = show_all_cards(something, penguin) => eat_food(phoenix, food_of(penguin))\n\nshow_all_cards(dog, penguin) = True\n\nquestion = proceed(lion, spot_right_after(eel))\n"}, {"idx": 308, "response": "knocks_down_fortress(koala, halibut) == True\nlearns_basics_of_resource_management(koala, dog) == True\nnot burn_warehouse(koala, donkey) = rule2(koala)\nnot burn_warehouse(koala, donkey) == True\nnot burn_warehouse(koala, donkey) == True\nproceed_to_spot(koala, spot_after(rabbit)) = rule1(koala)\nproceed_to_spot(koala, spot_after(rabbit)) == True\nproceed_to_spot(koala, spot_after(rabbit)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not burn_warehouse(something, donkey) => proceed_to_spot(something, spot_after(rabbit))\nrule2(something) = knocks_down_fortress(something, halibut) & learns_basics_of_resource_management(something, dog) => not burn_warehouse(something, donkey)\nrule3() = remove_piece(something, elephant) => not proceed_to_spot(koala, spot_after(rabbit))\norder(rule3) > order(rule1) = True\n\nknocks_down_fortress(koala, halibut) = True\nremove_piece(koala, dog) = True\n\nquestion = proceed_to_spot(koala, spot_after(rabbit))\n"}, {"idx": 309, "response": "has(lion, keys) == False\nknocks_down(lion, fortress, zander) = rule2()\nknocks_down(lion, fortress, zander) == True\nname(lion, Lucy) == True\nname(leopard, Tessa) == True\nfirst_letter_of(name(lion)) == first_letter_of(name(leopard)) = True\nknocks_down(lion, fortress, zander) == True\nsings_victory_song(lion, wolverine) = rule1()\nsings_victory_song(lion, wolverine) == True\nquestion = True", "answer": 1, "code": "rule1(something) = knocks_down(something, fortress, zander) => sings_victory_song(something, wolverine)\nrule2() = not has(lion, keys) => knocks_down(lion, fortress, zander)\nrule3() = first_letter_of(name(lion)) == first_letter_of(name(leopard)) => knocks_down(lion, fortress, zander)\n\nname(leopard, Tessa) = True\nhas(lion, cell_phone) = True\nhas(lion, keys) = False\nname(lion, Lucy) = True\n\nquestion = sings_victory_song(lion, wolverine)\n"}, {"idx": 310, "response": "has(blobfish, something_to_carry_apples_and_oranges) == False\nneed_support(blobfish, zander) = rule4()\nneed_support(blobfish, zander) == False\nneed_support(blobfish, zander) == False\nrespects(blobfish, kiwi) = rule1()\nrespects(blobfish, kiwi) == True\nnot knock_down(blobfish, fortress, baboon) = rule5()\nknock_down(blobfish, fortress, baboon) == False\nknock_down(blobfish, fortress, baboon) == False\nquestion = False", "answer": -1, "code": "rule1(something) = sings(something, victory_song, sea_bass) => respects(something, kiwi)\nrule2() = has(blobfish, card) and color(card) in rainbow_colors => not need_support(blobfish, zander)\nrule3() = fan_of(blobfish, Chris_Ronaldo) => need_support(blobfish, zander)\nrule4() = has(blobfish, something_to_carry_apples_and_oranges) => not need_support(blobfish, zander)\nrule5(something) = respects(something, kiwi) => not knock_down(something, fortress, baboon)\nrule6() = first_letter_of(name(blobfish)) == first_letter_of(name(puffin)) => need_support(blobfish, zander)\nrule7(something) = rolls_dice(something, salmon) => sings(something, victory_song, sun_bear)\norder(rule2) > order(rule3) = True\norder(rule2) > order(rule6) = True\norder(rule4) > order(rule3) = True\norder(rule4) > order(rule6) = True\n\nhas(blobfish, violin) = True\nhates(blobfish, Chris_Ronaldo) = True\nrolls_dice(blobfish, salmon) = True\nname(blobfish, Meadow) = True\nsings(blobfish, victory_song, sea_bass) = True\nname(puffin, Max) = True\n\nquestion = knock_down(blobfish, fortress, baboon)\n"}, {"idx": 311, "response": "show_cards(moose, all_cards, swordfish) == True\npoints(moose) == points(squirrel) = rule1()\npoints(moose) == points(squirrel) == True\ngive(moose, magnifying_glass, elephant) = rule5()\ngive(moose, magnifying_glass, elephant) == True\nquestion = True", "answer": 1, "code": "rule1(something) = show_cards(something, all_cards, swordfish) => points(something) == points(squirrel)\nrule2() = give(something, magnifying_glass, cow) => become_enemy(moose, baboon)\nrule3() = first_letter_of(name(moose)) == first_letter_of(name(kudu)) => remove_piece(moose, caterpillar)\nrule4() = has(moose, drink) => not remove_piece(moose, caterpillar)\nrule5(something) = become_enemy(something, baboon) & points(something) == points(squirrel) => give(something, magnifying_glass, elephant)\nrule6() = not has(moose, keys) => remove_piece(moose, caterpillar)\nrule7() = has(moose, card) and starts_with(color(card), \"w\") => not become_enemy(moose, baboon)\norder(rule4) > order(rule3) = True\norder(rule4) > order(rule6) = True\norder(rule7) > order(rule2) = True\n\nname(kudu, Lucy) = True\nhas(moose, blade) = True\nholds(moose, keys) = True\nshow_cards(moose, all_cards, swordfish) = True\nname(moose, Lola) = True\nsteal(pig, 5_points, cow) = True\n\nquestion = give(moose, magnifying_glass, elephant)\n"}, {"idx": 312, "response": "name(spider, Meadow) == True\nname(tiger, Mojo) == True\nfirst_letter_of(name(spider)) == first_letter_of(name(tiger)) == True\nraise_flag_of_peace(spider, bat) = rule1()\nraise_flag_of_peace(spider, bat) == True\nhas(spider, card) == True\ncolor(card, red) == True\ncolor(card) in primary_colors == True\nnot raise_flag_of_peace(spider, bat) = rule2()\nnot raise_flag_of_peace(spider, bat) == False\naccess_to_food(spider) == abundance == False\nraise_flag_of_peace(spider, bat) = rule3()\nraise_flag_of_peace(spider, bat) == False\nknow(spider, defense_plans, kiwi) = rule4()\nknow(spider, defense_plans, kiwi) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(spider)) == first_letter_of(name(tiger)) => raise_flag_of_peace(spider, bat)\nrule2() = has(spider, card) and color(card) in primary_colors => not raise_flag_of_peace(spider, bat)\nrule3() = access_to_food(spider) == abundance => raise_flag_of_peace(spider, bat)\nrule4(something) = raise_flag_of_peace(something, bat) => know(something, defense_plans, kiwi)\norder(rule1) > order(rule2) = True\norder(rule3) > order(rule2) = True\n\nhas(spider, card) = True\ncolor(card, red) = True\nstruggles_to_find_food(spider) = True\nname(spider, Meadow) = True\nname(tiger, Mojo) = True\n\nquestion = know(spider, defense_plans, kiwi)\n"}, {"idx": 313, "response": "prepare_armor(carp, kiwi) == True\nprepare_armor(something, kiwi) == True\neat_food(donkey, food_of(polar_bear)) = rule2()\neat_food(donkey, food_of(polar_bear)) == True\neat_food(something, food_of(polar_bear)) = rule2()\neat_food(something, food_of(polar_bear)) == True\npoints(moose) != points(salmon) = rule1()\npoints(moose) != points(salmon) == True\npoints(moose) == points(salmon) == False\nquestion = False", "answer": -1, "code": "rule1() = eat_food(something, food_of(polar_bear)) => points(moose) != points(salmon)\nrule2() = prepare_armor(something, kiwi) => eat_food(donkey, food_of(polar_bear))\n\nprepare_armor(carp, kiwi) = True\n\nquestion = points(moose) == points(salmon)\n"}, {"idx": 314, "response": "owns(amberjack, luxury_aircraft) == True\nknows(amberjack, defensive_plans, cat) = rule2()\nknows(amberjack, defensive_plans, cat) == True\nattacks(panther, green_fields, cat) = rule1()\nattacks(panther, green_fields, cat) == True\nowe(panther, money, carp) = True\nquestion = True", "answer": 1, "code": "rule1() = attacks(something, green_fields, cat) => owe(panther, money, carp)\nrule2() = owns(amberjack, luxury_aircraft) => knows(amberjack, defensive_plans, cat)\n\nowns(amberjack, luxury_aircraft) = True\n\nquestion = owe(panther, money, carp)\n"}, {"idx": 315, "response": "friends(squid) = 16\nroll_dice(squid, cat) = rule1()\nroll_dice(squid, cat) == True\nnot steal_points(puffin, 5, cat) = rule2()\nnot steal_points(puffin, 5, cat) == True\nraise_flag_of_peace(cat, catfish) = rule2()\nraise_flag_of_peace(cat, catfish) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(squid) > 10 => roll_dice(squid, cat)\nrule2() = roll_dice(squid, cat) & not steal_points(puffin, 5, cat) => raise_flag_of_peace(cat, catfish)\nrule3() = first_letter_of(name(puffin)) == first_letter_of(name(lion)) => not steal_points(puffin, 5, cat)\n\nname(lion, Meadow) = True\nname(puffin, Mojo) = True\nfriends(squid) = 16\n\nquestion = raise_flag_of_peace(cat, catfish)\n"}, {"idx": 316, "response": "not learn(grasshopper, elementary_resource_management, gecko) == True\nremove_piece(gecko, cat) = rule3()\nremove_piece(gecko, cat) == True\nsteal_points(koala, 5, cat) = rule6()\nsteal_points(koala, 5, cat) == True\nprepare_armor(cat, panther) = rule6()\nprepare_armor(cat, panther) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_for(ferret) => not remove_piece(gecko, cat)\nrule2(something) = not raise_flag_for(cheetah) => steal_points(something, 5, cat)\nrule3() = not learn(grasshopper, elementary_resource_management, gecko) => remove_piece(gecko, cat)\nrule4() = not respect(swordfish, cat) => not prepare_armor(cat, panther)\nrule5(something) = points(something) != points(tiger) => not respect(something, cat)\nrule6() = remove_piece(gecko, cat) & steal_points(koala, 5, cat) => prepare_armor(cat, panther)\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule6) = True\n\nnot learn(grasshopper, elementary_resource_management, gecko) = True\nnot raise_flag_for(koala, cheetah) = True\npoints(swordfish) != points(tiger) = True\n\nquestion = prepare_armor(cat, panther)\n"}, {"idx": 317, "response": "wink(amberjack, halibut) == False\neat_food(halibut, food_of(swordfish)) = rule1()\neat_food(halibut, food_of(swordfish)) == False\nrespect(swordfish, grizzly_bear) = rule2()\nrespect(swordfish, grizzly_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(amberjack, halibut) => eat_food(halibut, food_of(swordfish))\nrule2() = eat_food(halibut, food_of(swordfish)) => respect(swordfish, grizzly_bear)\nrule3(something) = show_cards(something, all_cards) to hippopotamus => not eat_food(something, food_of(swordfish))\norder(rule3) > order(rule1) = True\n\nwink(amberjack, halibut) = False\n\nquestion = respect(swordfish, grizzly_bear)\n"}, {"idx": 318, "response": "friends(buffalo) = 8\nfriends(buffalo) < 18 = True\nknock_down(buffalo, fortress, catfish) = rule1()\nknock_down(buffalo, fortress, catfish) == True\nnot attack(something, green_fields, owner(sun_bear)) = rule4()\nattack(buffalo, green_fields, owner(sun_bear)) == False\nattack(buffalo, green_fields, owner(sun_bear)) == False\nnot proceed(buffalo, spot_right_after, canary) = rule5()\nnot proceed(buffalo, spot_right_after, canary) == False\nattack(something, green_fields, owner(sun_bear)) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(buffalo) < 18 => knock_down(buffalo, fortress, catfish)\nrule2() = not owe(snail, money, buffalo) & burn(donkey, warehouse, buffalo) => not proceed(buffalo, spot_right_after, canary)\nrule3() = has(buffalo, card) & starts_with(color(card), \"r\") => not knock_down(buffalo, fortress, catfish)\nrule4() = knock_down(something, fortress, catfish) => not attack(something, green_fields, owner(sun_bear))\nrule5() = not proceed(something, spot_right_after, canary) => attack(something, green_fields, owner(sun_bear))\norder(rule1) > order(rule3) = True\norder(rule5) > order(rule4) = True\n\nfriends(buffalo) = 8\nhas(buffalo, card) = True\ncolor(card, red) = True\nburn(donkey, warehouse, buffalo) = True\nowe(snail, money, buffalo) = False\n\nquestion = attack(buffalo, green_fields, owner(sun_bear))\n"}, {"idx": 319, "response": "has(gecko, device_to_connect_to_internet) == True\nbecome_enemy(gecko, salmon) = rule2()\nbecome_enemy(gecko, salmon) == True\nnot respect(salmon, koala) = rule3()\nnot respect(salmon, koala) == False\nrespect(salmon, koala) == False\nfirst_letter_of(name(salmon)) == first_letter_of(name(wolverine)) = True\nnot learns(salmon, basics_of_resource_management, eagle) = rule4()\nnot learns(salmon, basics_of_resource_management, eagle) == False\nlearns(salmon, basics_of_resource_management, eagle) == False\nowns(salmon, luxury_aircraft) == True\nlearns(salmon, basics_of_resource_management, eagle) = rule5()\nlearns(salmon, basics_of_resource_management, eagle) == True\nquestion = False", "answer": -1, "code": "rule1(something) = learns(something, elementary_resource_management, eagle) & knows(something, defensive_plans, squid) => respect(something, koala)\nrule2() = has(gecko, device_to_connect_to_internet) => become_enemy(gecko, salmon)\nrule3() = become_enemy(gecko, salmon) => not respect(salmon, koala)\nrule4() = first_letter_of(name(salmon)) == first_letter_of(name(wolverine)) => not learns(salmon, basics_of_resource_management, eagle)\nrule5() = owns(salmon, luxury_aircraft) => learns(salmon, basics_of_resource_management, eagle)\nrule6() = has(salmon, card) and color(card) in primary_colors => learns(salmon, elementary_resource_management, eagle)\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule5) = True\norder(rule4) > order(rule6) = True\n\nhas(gecko, tablet) = True\nhas(salmon, card) = True\ncolor(card, yellow) = True\nowns(salmon, luxury_aircraft) = True\nname(wolverine, Meadow) = True\n\nquestion = respect(salmon, koala)\n"}, {"idx": 320, "response": "steal_points(baboon, 5, octopus) == False\nrespects(baboon, octopus) == True\nnot steal_points(baboon, 5, octopus) == True\nbecome_enemy(baboon, canary) = rule1()\nbecome_enemy(baboon, canary) == True\nfriends(baboon) < 14 == True\nnot become_enemy(baboon, canary) == True\nnot eat_food(cat, food_of(canary)) == True\nnot become_enemy(baboon, canary) == True\nadd_conclusion(canary, \"the canary needs the support of the cheetah\") = rule3()\nadd_conclusion(canary, \"the canary needs the support of the cheetah\") == True\nquestion = True", "answer": 1, "code": "rule1(something) = not steal_points(something, 5, octopus) & respects(something, octopus) => become_enemy(something, canary)\nrule2() = friends(baboon) < 14 => not become_enemy(baboon, canary)\nrule3() = not eat_food(cat, food_of(canary)) & not become_enemy(baboon, canary) => add_conclusion(canary, \"the canary needs the support of the cheetah\")\nrule4() = has(cat, musical_instrument) => eat_food(cat, food_of(canary))\nrule5() = offer_job_position(squirrel, cat) => not eat_food(cat, food_of(canary))\norder(rule1) > order(rule2) = True\norder(rule4) > order(rule5) = True\n\nfriends(baboon) = 6\nrespects(baboon, octopus) = True\noffer_job_position(squirrel, cat) = True\nsteal_points(baboon, 5, octopus) = False\n\nquestion = \"the canary needs the support of the cheetah\" in conclusions(canary)\n"}, {"idx": 321, "response": "has(black_bear, kale) == True\nhas(black_bear, leafy_green_vegetable) == True\nnot need_support(black_bear, moose) = rule2()\nnot need_support(black_bear, moose) == True\nname(black_bear, Casper) == True\nname(ferret, ???) = unknown\nfirst_letter_of(name(black_bear)) == first_letter_of(name(ferret)) = unknown\nnot rolls_dice(black_bear, spider) = rule3()\nnot rolls_dice(black_bear, spider) == True\nknocks_down(grizzly_bear, fortress, black_bear) == True\nlearns(wolverine, basics_of_resource_management, black_bear) == True\nrolls_dice(black_bear, spider) = rule4()\nrolls_dice(black_bear, spider) == True\nsing_victory_song(black_bear, hummingbird) = rule1()\nsing_victory_song(black_bear, hummingbird) == True\nquestion = True", "answer": 1, "code": "rule1(something) = rolls_dice(something, spider) & not need_support(something, moose) => sing_victory_song(something, hummingbird)\nrule2() = has(black_bear, leafy_green_vegetable) => not need_support(black_bear, moose)\nrule3() = first_letter_of(name(black_bear)) == first_letter_of(name(ferret)) => not rolls_dice(black_bear, spider)\nrule4() = knocks_down(grizzly_bear, fortress, black_bear) & learns(wolverine, basics_of_resource_management, black_bear) => rolls_dice(black_bear, spider)\nrule5() = owns(black_bear, luxury_aircraft) => not rolls_dice(black_bear, spider)\norder(rule3) > order(rule4) = True\norder(rule5) > order(rule4) = True\n\ndream(black_bear, luxury_aircraft) = True\nhas(black_bear, kale) = True\nname(black_bear, Casper) = True\nknocks_down(grizzly_bear, fortress, black_bear) = True\nlearns(wolverine, basics_of_resource_management, black_bear) = True\n\nquestion = sing_victory_song(black_bear, hummingbird)\n"}, {"idx": 322, "response": "has(raven, knife) == True\nsings_victory_song(raven, pig) = rule3()\nsings_victory_song(raven, pig) == True\nsings_victory_song(caterpillar, wolverine) = rule2()\nsings_victory_song(caterpillar, wolverine) == True\nraise_flag_of_peace(wolverine, squirrel) == True\nquestion = True", "answer": 1, "code": "rule1() = sings_victory_song(something, pig) => not raise_flag_of_peace(wolverine, squirrel)\nrule2() = sings_victory_song(caterpillar, wolverine) => raise_flag_of_peace(wolverine, squirrel)\nrule3() = has(raven, sharp_object) => sings_victory_song(raven, pig)\norder(rule2) > order(rule1) = True\n\nhas(raven, knife) = True\n\nquestion = raise_flag_of_peace(wolverine, squirrel)\n"}, {"idx": 323, "response": "has(raven, beer) == True\nhas(raven, internet_device) == False\nnot roll_dice(raven, caterpillar) = rule2()\nroll_dice(raven, caterpillar) == False\nnot roll_dice(raven, caterpillar) == False\nnot sing_song_of_victory(hippopotamus, raven) = rule3()\nsing_song_of_victory(hippopotamus, raven) == False\nnot sing_song_of_victory(hippopotamus, raven) == False\npoints(cricket) == points(raven) = rule5()\npoints(cricket) == points(raven) == True\npoints(cricket) == points(raven) == True\nnot knows(raven, defense_plan, zander) = rule5()\nknows(raven, defense_plan, zander) == False\nnot knows(raven, defense_plan, zander) == False\nquestion = False", "answer": -1, "code": "rule1(something) = not roll_dice(something, caterpillar) => knows(something, defense_plan, zander)\nrule2() = has(raven, internet_device) => not roll_dice(raven, caterpillar)\nrule3() = become_enemy(baboon, hippopotamus) => not sing_song_of_victory(hippopotamus, raven)\nrule4() = needs_support(carp, raven) => roll_dice(raven, caterpillar)\nrule5() = not sing_song_of_victory(hippopotamus, raven) & points(cricket) == points(raven) => not knows(raven, defense_plan, zander)\norder(rule4) > order(rule2) = True\norder(rule5) > order(rule1) = True\n\nbecome_enemy(baboon, hippopotamus) = True\nhas(raven, beer) = True\n\nquestion = knows(raven, defense_plan, zander)\n"}, {"idx": 324, "response": "sing_victory_song(kudu, salmon) == True\nsteal_points(kudu, 5, meerkat) == True\nbecome_enemy(kudu, whale) = rule2()\nbecome_enemy(kudu, whale) == True\nknows(jellyfish, defensive_plans, cockroach) = rule1()\nknows(jellyfish, defensive_plans, cockroach) == True\nquestion = True", "answer": 1, "code": "rule1() = become_enemy(something, whale) => knows(jellyfish, defensive_plans, cockroach)\nrule2() = steal_points(something, 5, meerkat) & sing_victory_song(something, salmon) => become_enemy(something, whale)\nrule3(something) = points(something) == points(viperfish) => not knows(something, defensive_plans, cockroach)\norder(rule3) > order(rule1) = True\n\nsing_victory_song(kudu, salmon) = True\nsteal_points(kudu, 5, meerkat) = True\n\nquestion = knows(jellyfish, defensive_plans, cockroach)\n"}, {"idx": 325, "response": "has(catfish, card) == True\nprimary_color(card) == True\nlearn(catfish, basics_of_resource_management, caterpillar) = rule2()\nlearn(catfish, basics_of_resource_management, caterpillar) == True\nnot learn(catfish, elementary_resource_management, caterpillar) == True\nnot attack(caterpillar, green_fields, owner(kiwi)) = rule5()\nnot attack(caterpillar, green_fields, owner(kiwi)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not proceed(something, spot_right_after(tiger)) & not equal_points(something, polar_bear) => not learn(something, elementary_resource_management, caterpillar)\nrule2() = has(catfish, card) & primary_color(card) => learn(catfish, basics_of_resource_management, caterpillar)\nrule3(something) = raise_flag(something, peace, dog) => not know(something, defensive_plans, aardvark)\nrule4() = attack(something, green_fields, owner(grasshopper)) => know(baboon, defensive_plans, aardvark)\nrule5() = not learn(catfish, elementary_resource_management, caterpillar) => not attack(caterpillar, green_fields, owner(kiwi))\norder(rule1) > order(rule2) = True\norder(rule3) > order(rule4) = True\n\nfriends(catfish) = 9\nhas(catfish, card) = True\ncolor(card, green) = True\nnot proceed(catfish, spot_right_after(tiger)) = True\nattack(sun_bear, green_fields, owner(grasshopper)) = True\nequal_points(catfish, polar_bear) = False\n\nquestion = attack(caterpillar, green_fields, owner(kiwi))\n"}, {"idx": 326, "response": "has(cockroach, drink) == True\nattacks(cockroach, green_fields, raven) = rule3()\nattacks(cockroach, green_fields, raven) == True\nequal_points(raven, hare) = rule1()\nequal_points(raven, hare) == not attacks(cockroach, green_fields, raven)\nequal_points(raven, hare) == not attacks(cockroach, green_fields, raven) == False\nquestion = False", "answer": -1, "code": "rule1() = attacks(cockroach, green_fields, raven) => not equal_points(raven, hare)\nrule2(something) = not proceed_to(something, spot_right_after(eel)) => raise_flag_of_peace(something, raven)\nrule3() = has(cockroach, drink) => attacks(cockroach, green_fields, raven)\nrule4() = friends(cockroach) > 1 => attacks(cockroach, green_fields, raven)\nrule5() = respects(canary, bat) => sings_song_of_victory(bat, raven)\nrule6() = raise_flag_of_peace(something, tilapia) => not attacks(cockroach, green_fields, raven)\nrule7() = sings_song_of_victory(bat, raven) & raise_flag_of_peace(caterpillar, raven) => equal_points(raven, hare)\norder(rule1) > order(rule7) = True\norder(rule6) > order(rule3) = True\norder(rule6) > order(rule4) = True\n\nroll_dice(bat, turtle) = True\nhas(cockroach, tablet) = True\nrespects(canary, bat) = False\nproceed_to(caterpillar, spot_right_after(eel)) = False\nraise_flag_of_peace(jellyfish, tilapia) = False\n\nquestion = equal_points(raven, hare)\n"}, {"idx": 327, "response": "name(starfish, Lola) == True\nname(cockroach, Lily) == True\nfirst_letter_of(name(starfish)) == first_letter_of(name(cockroach)) = True\npoints(starfish) == points(polar_bear) = rule1()\npoints(starfish) == points(polar_bear) == True\nhas(polar_bear, card) and color(card, white) == True\nnot steal(polar_bear, 5_points, jellyfish) = rule4()\nnot steal(polar_bear, 5_points, jellyfish) == True\nnot steal(polar_bear, 5_points, jellyfish) == True\nnot steal(something, 5_points, leopard) = rule5()\nnot steal(something, 5_points, leopard) == True\nnot steal(something, 5_points, leopard) == True\nsteal(polar_bear, 5_points, leopard) = rule7()\nsteal(polar_bear, 5_points, leopard) == True\nsteal(polar_bear, 5_points, leopard) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(starfish)) == first_letter_of(name(cockroach)) => points(starfish) == points(polar_bear)\nrule2() = not has(polar_bear, keys) => not steal(polar_bear, 5_points, jellyfish)\nrule3() = has(elephant, high_quality_paper) => burn_warehouse(elephant, polar_bear)\nrule4() = has(polar_bear, card) and color(card) in flag_colors(Belgium) => not steal(polar_bear, 5_points, jellyfish)\nrule5() = not steal(something, 5_points, jellyfish) => not steal(something, 5_points, leopard)\nrule6() = has(starfish, card) and color(card) in rainbow_colors => not points(starfish) == points(polar_bear)\nrule7() = burn_warehouse(elephant, polar_bear) & points(starfish) == points(polar_bear) => steal(polar_bear, 5_points, leopard)\nrule8() = first_letter_of(name(elephant)) == first_letter_of(name(kangaroo)) => burn_warehouse(elephant, polar_bear)\nrule9() = has_difficulty(starfish, find_food) => not points(starfish) == points(polar_bear)\norder(rule6) > order(rule1) = True\norder(rule7) > order(rule5) = True\norder(rule9) > order(rule1) = True\n\nname(cockroach, Lily) = True\nname(elephant, Casper) = True\nhas(elephant, high_quality_paper) = True\nname(kangaroo, Milo) = True\nhas(polar_bear, card) and color(card, white) = True\nnot has(polar_bear, keys) = True\nhas(starfish, card) and color(card, white) = True\nname(starfish, Lola) = True\n\nquestion = steal(polar_bear, 5_points, leopard)\n"}, {"idx": 328, "response": "assassinated(zander, mayor) == True\nvoted_for(zander, mayor) == True\nbecome_enemy(zander, goldfish) = rule5()\nbecome_enemy(zander, goldfish) == False\nbecome_enemy(zander, goldfish) == False\nknock_down(fortress, black_bear) = rule2()\nknock_down(fortress, black_bear) == not needs_support(goldfish, phoenix)\nknock_down(fortress, black_bear) == not needs_support(goldfish, phoenix)\nquestion = not needs_support(goldfish, phoenix)\nquestion = True", "answer": 1, "code": "rule1() = friends(zander) < 10 => not become_enemy(zander, goldfish)\nrule2(something) = needs_support(something, phoenix) => not knock_down(fortress, black_bear)\nrule3() = not proceed(viperfish, spot_after(goldfish)) & show_cards(panda_bear, goldfish) => not needs_support(goldfish, phoenix)\nrule4(something) = not sing_song_of_victory(something, eagle) => become_enemy(something, goldfish)\nrule5() = voted_for(zander, mayor) => not become_enemy(zander, goldfish)\nrule6() = has_high_salary(goldfish) => needs_support(goldfish, phoenix)\nrule7() = has(goldfish, something_to_sit_on) => needs_support(goldfish, phoenix)\norder(rule1) > order(rule4) = True\norder(rule3) > order(rule6) = True\norder(rule3) > order(rule7) = True\norder(rule5) > order(rule4) = True\n\nhas(goldfish, couch) = True\nhas_low_income_job(goldfish) = True\nshow_cards(panda_bear, goldfish) = True\nassassinated(zander, mayor) = True\nsing_song_of_victory(zander, eagle) = False\n\nquestion = knock_down(fortress, black_bear)\n"}, {"idx": 329, "response": "eat_food(buffalo, food_of(lion)) == True\nattack(buffalo, green_fields, lion) = rule2()\nattack(buffalo, green_fields, lion) == True\nnot eat_food(lion, food_of(penguin)) == True\nnot raise_flag_of_peace(lion, meerkat) = rule4()\nnot raise_flag_of_peace(lion, meerkat) == True\neat_food(lion, food_of(penguin)) == False\nnot eat_food(lion, food_of(penguin)) == True\nsing_song_of_victory(lion, koala) = rule3()\nsing_song_of_victory(lion, koala) == True\nquestion = True", "answer": 1, "code": "rule1() = not attack(catfish, green_fields, lion) & roll_dice(raven, lion) => not sing_song_of_victory(lion, koala)\nrule2() = attack(buffalo, green_fields, lion) => not eat_food(lion, food_of(penguin))\nrule3(something) = not eat_food(something, food_of(penguin)) => sing_song_of_victory(something, koala)\nrule4(something) = not raise_flag_of_peace(something, meerkat) => eat_food(something, food_of(penguin))\nrule5() = knock_down_fortress(something, cockroach) => roll_dice(raven, lion)\norder(rule3) > order(rule1) = True\norder(rule4) > order(rule2) = True\n\neat_food(buffalo, food_of(lion)) = True\nburn_warehouse(moose, cockroach) = False\n\nquestion = sing_song_of_victory(lion, koala)\n"}, {"idx": 330, "response": "has(parrot, card) == True\ncolor(card, indigo) == True\ncolor(card) in rainbow_colors == True\nnot give(parrot, magnifying_glass, halibut) = rule2()\ngive(parrot, magnifying_glass, halibut) == False\nnot give(parrot, magnifying_glass, halibut) == False\nfriends(oscar) < 6 == True\nsame_number_of_points(oscar, halibut) = rule4()\nsame_number_of_points(oscar, halibut) == False\nnot same_number_of_points(oscar, halibut) == False\nquestion = False", "answer": -1, "code": "rule1() = not same_number_of_points(oscar, halibut) & not give(parrot, magnifier, halibut) => add_conclusion(\"the halibut gives a magnifier to the gecko\")\nrule2() = has(parrot, card) and color(card) in rainbow_colors => not give(parrot, magnifying_glass, halibut)\nrule3(something) = not wink(something, carp) & not show_all_cards(something, meerkat) => give(something, magnifier, halibut)\nrule4() = friends(oscar) < 6 => not same_number_of_points(oscar, halibut)\norder(rule3) > order(rule2) = True\n\nlazy_friends(oscar) = 1\nactive_friends(oscar) = 3\nhas(parrot, card) = True\ncolor(card, indigo) = True\nshow_all_cards(parrot, meerkat) = False\n\nquestion = add_conclusion(\"the halibut gives a magnifier to the gecko\")\n"}, {"idx": 331, "response": "become_enemy(tilapia, moose) == True\nnot become_enemy(jellyfish, ferret) = rule1()\nnot become_enemy(jellyfish, ferret) == True\nnot become_enemy(jellyfish, ferret) == True\nnot prepare_armor(ferret, salmon) = rule2()\nnot prepare_armor(ferret, salmon) == True\nnot prepare_armor(ferret, salmon) == True\nquestion = True", "answer": 1, "code": "rule1() = become_enemy(something, moose) => not become_enemy(jellyfish, ferret)\nrule2() = not become_enemy(jellyfish, ferret) => not prepare_armor(ferret, salmon)\nrule3() = eat_food(something, food_of(cat)) => not wink(ferret, carp)\n\neat_food(oscar, food_of(cat)) = True\nbecome_enemy(tilapia, moose) = True\n\nquestion = prepare_armor(ferret, salmon)\n"}, {"idx": 332, "response": "has(eagle, card) == True\ncolor(card, yellow) == True\ncolor(card) in colors_of_Belgium_flag == True\noffer_job_position(eagle, octopus) = rule2()\noffer_job_position(eagle, octopus) == True\nnot offer_job_position(eagle, octopus) == False\nbecome_enemy(eagle, bat) = rule1()\nbecome_enemy(eagle, bat) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not offer_job_position(something, octopus) => become_enemy(something, bat)\nrule2() = has(eagle, card) and color(card) in colors_of_Belgium_flag => offer_job_position(eagle, octopus)\n\nhas(eagle, card) = True\ncolor(card, yellow) = True\n\nquestion = become_enemy(eagle, bat)\n"}, {"idx": 333, "response": "attacks(puffin, green_fields, owner(snail)) == True\nsings_victory_song(puffin, zander) = rule1(puffin)\nsings_victory_song(puffin, zander) == True\nknows(puffin, defense_plan, cockroach) = rule2(puffin)\nknows(puffin, defense_plan, cockroach) == True\nquestion = True", "answer": 1, "code": "rule1(something) = attacks(something, green_fields, owner(snail)) => sings_victory_song(something, zander)\nrule2(something) = sings_victory_song(something, zander) => knows(something, defense_plan, cockroach)\n\nattacks(puffin, green_fields, owner(snail)) = True\n\nquestion = knows(puffin, defense_plan, cockroach)\n"}, {"idx": 334, "response": "has(parrot, something_to_sit_on) == True\nshow_cards(parrot, all) = rule3()\nshow_cards(parrot, all) == True\nshow_cards(parrot, all) == True\nwink(grizzly_bear, swordfish) = not show_cards(parrot, all)\nwink(grizzly_bear, swordfish) == not True\nwink(grizzly_bear, swordfish) == False\nquestion = False", "answer": -1, "code": "rule1() = show_cards(parrot, all) => not wink(grizzly_bear, swordfish)\nrule2() = knock_down_fortress(something, baboon) & roll_dice(something, pig) => not show_cards(something, all)\nrule3() = has(parrot, something_to_sit_on) => show_cards(parrot, all)\nrule4() = has(parrot, card) and color(card) in flag_of_italy_colors => show_cards(parrot, all)\nrule5() = difficulty_finding_food(carp) => roll_dice(carp, octopus)\norder(rule2) > order(rule3) = True\norder(rule2) > order(rule4) = True\n\ndifficulty_finding_food(carp) = True\nhas(parrot, card) and color(card, red) = True\nhas(parrot, cell_phone) = True\nknock_down_fortress(parrot, baboon) = True\n\nquestion = wink(grizzly_bear, swordfish)\n"}, {"idx": 335, "response": "name(rabbit, Bella) == True\nfirst_letter_of(name(cat)) == first_letter_of(name(rabbit)) = True\nnot burns(cat, warehouse, ferret) = rule2()\nnot burns(cat, warehouse, ferret) == False\nnot burns(cat, warehouse, ferret) == False\nlearns(something, elementary_resource_management, meerkat) = rule3()\nlearns(something, elementary_resource_management, meerkat) == True\nburns(cat, warehouse, ferret) == True\nnot become_enemy(canary, cat) = rule4()\nnot become_enemy(canary, cat) == True\nnot knocks_down(cat, fortress, gecko) == True\nknocks_down(cat, fortress, gecko) == False\nquestion = False", "answer": -1, "code": "rule1(something) = burns(something, warehouse, ferret) => knocks_down(something, fortress, gecko)\nrule2() = first_letter_of(name(cat)) == first_letter_of(name(rabbit)) => not burns(cat, warehouse, ferret)\nrule3() = learns(something, elementary_resource_management, meerkat) => burns(cat, warehouse, ferret)\nrule4() = not become_enemy(canary, cat) => not knocks_down(cat, fortress, gecko)\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule1) = True\n\nname(rabbit, Bella) = True\npoints(squid) == points(meerkat) = True\n\nquestion = knocks_down(cat, fortress, gecko)\n"}, {"idx": 336, "response": "know(leopard, defense_plans, sun_bear) == False\nnot know(leopard, defense_plans, sun_bear) == True\nsings(sun_bear, victory_song, salmon) = rule3()\nsings(sun_bear, victory_song, salmon) == True\nsings(sun_bear, victory_song, cow) = rule1(sun_bear)\nsings(sun_bear, victory_song, cow) == True\nquestion = True", "answer": 1, "code": "rule1(something) = sings(something, victory_song, salmon) & not roll_dice(something, tilapia) => sings(something, victory_song, cow)\nrule2(something) = not learn(something, elementary_resource_management, doctorfish) => not roll_dice(something, tilapia)\nrule3() = not know(leopard, defense_plans, sun_bear) => sings(sun_bear, victory_song, salmon)\n\nfriends(sun_bear) = 14\nknow(leopard, defense_plans, sun_bear) = False\nlearn(sun_bear, elementary_resource_management, doctorfish) = False\n\nquestion = sings(sun_bear, victory_song, cow)\n"}, {"idx": 337, "response": "remove_piece(rabbit, lobster) == True\nnot know(black_bear, defensive_plans, squid) = rule1()\nnot know(black_bear, defensive_plans, squid) == True\nhas(black_bear, banana_strawberry_smoothie) == True\nknow(black_bear, defensive_plans, squid) = rule2()\nknow(black_bear, defensive_plans, squid) == True\nnot proceed_to_spot(zander, right_after_spot(squid)) = rule3()\nnot proceed_to_spot(zander, right_after_spot(squid)) == True\nfirst_letter_of(name(zander)) == first_letter_of(name(koala)) = True\nproceed_to_spot(zander, right_after_spot(squid)) = rule5()\nproceed_to_spot(zander, right_after_spot(squid)) == True\nnot wink(squid, grasshopper) = rule6()\nwink(squid, grasshopper) == False\nquestion = False", "answer": -1, "code": "rule1() = remove_piece(something, lobster) => not know(black_bear, defensive_plans, squid)\nrule2() = has(black_bear, drink) => know(black_bear, defensive_plans, squid)\nrule3() = has(zander, leafy_green_vegetable) => not proceed_to_spot(zander, right_after_spot(squid))\nrule4() = not points(moose) == points(cow) => not become_enemy(cow, squid)\nrule5() = first_letter_of(name(zander)) == first_letter_of(name(koala)) => proceed_to_spot(zander, right_after_spot(squid))\nrule6() = proceed_to_spot(zander, right_after_spot(squid)) => not wink(squid, grasshopper)\norder(rule1) > order(rule2) = True\norder(rule3) > order(rule5) = True\n\nhas(black_bear, banana_strawberry_smoothie) = True\nname(koala, Blossom) = True\nremove_piece(rabbit, lobster) = True\nname(zander, Beauty) = True\npoints(moose) == points(cow) = False\n\nquestion = wink(squid, grasshopper)\n"}, {"idx": 338, "response": "has(tiger, card) == True\ncolor(card, white) == True\ncolor(card) in colors_of(flag_of_Japan) == True\nnot attacks(tiger, green_fields, owner(lion)) = rule2()\nattacks(tiger, green_fields, owner(lion)) == False\nnot remove(tiger, piece, lobster) == False\neat_food(tiger, food_of(koala)) == True\nattacks(tiger, green_fields, owner(lion)) = rule3()\nattacks(tiger, green_fields, owner(lion)) == True\nbecome_enemy(tiger, panther) = rule1()\nbecome_enemy(tiger, panther) == True\nquestion = True", "answer": 1, "code": "rule1(something) = attacks(something, green_fields, owner(lion)) => become_enemy(something, panther)\nrule2() = has(tiger, card) and color(card) in colors_of(flag_of_Japan) => not attacks(tiger, green_fields, owner(lion))\nrule3(something) = not remove(something, piece, lobster) & eat_food(something, food_of(koala)) => attacks(something, green_fields, owner(lion))\norder(rule2) > order(rule3) = True\n\neat_food(tiger, food_of(koala)) = True\nhas(tiger, card) = True\ncolor(card, white) = True\nremove(tiger, piece, lobster) = False\n\nquestion = become_enemy(tiger, panther)\n"}, {"idx": 339, "response": "has_high_salary(buffalo) == True\nnot raise_flag_of_peace(buffalo, cockroach) = rule3()\nnot raise_flag_of_peace(buffalo, cockroach) == False\nnot raise_flag_of_peace(buffalo, cockroach) == False\nroll_dice(cockroach, turtle) = rule2()\nroll_dice(cockroach, turtle) == True\nroll_dice(cockroach, turtle) == True\nquestion = True", "answer": 1, "code": "rule1() = proceed(kudu, spot_after(spot_of(cockroach))) => not roll_dice(cockroach, turtle)\nrule2() = not raise_flag_of_peace(buffalo, cockroach) => roll_dice(cockroach, turtle)\nrule3() = has_high_salary(buffalo) => not raise_flag_of_peace(buffalo, cockroach)\norder(rule1) > order(rule2) = True\n\nhas_high_salary(buffalo) = True\n\nquestion = roll_dice(cockroach, turtle)\n"}, {"idx": 340, "response": "has(spider, card) == True\nhas(spider, device_to_connect_to_internet) = False\nknock_down_fortress(spider, mosquito) = rule1()\nknock_down_fortress(spider, mosquito) == True\nnot raise_flag_of_peace(cricket, spider) = rule2()\nnot raise_flag_of_peace(cricket, spider) == True\nnot show_all_cards(spider, raven) = rule2()\nnot show_all_cards(spider, raven) == True\nhas(spider, card) and starts_with(color(card), \"e\") = rule3()\nhas(spider, card) and starts_with(color(card), \"e\") == False\nfriends(spider) > 8 = rule4()\nfriends(spider) > 8 == True\nshow_all_cards(spider, raven) = rule4()\nshow_all_cards(spider, raven) == True\nknock_down_fortress(spider, mosquito) and show_all_cards(spider, raven) = rule5()\nknock_down_fortress(spider, mosquito) and show_all_cards(spider, raven) == True\nnot eat_food(spider, koala) = rule5()\neat_food(spider, koala) == False\nquestion = False", "answer": -1, "code": "rule1() = has(spider, device_to_connect_to_internet) => knock_down_fortress(spider, mosquito)\nrule2() = not raise_flag_of_peace(cricket, spider) => not show_all_cards(spider, raven)\nrule3() = has(spider, card) and starts_with(color(card), \"e\") => knock_down_fortress(spider, mosquito)\nrule4() = friends(spider) > 8 => show_all_cards(spider, raven)\nrule5() = knock_down_fortress(something, mosquito) & show_all_cards(something, raven) => not eat_food(something, koala)\norder(rule2) > order(rule4) = True\n\nhas(spider, card) = True\ncolor(card, red) = True\nhas(spider, tablet) = True\nfriends(spider) = 17\nroll_dice(aardvark, spider) = False\nraise_flag_of_peace(raven, spider) = False\n\nquestion = eat_food(spider, koala)\n"}, {"idx": 341, "response": "color(card(cat), yellow) == True\nstarts_with(color(card(cat)), \"y\") == True\nknows(cat, defensive_plans, sun_bear) = rule5()\nknows(cat, defensive_plans, sun_bear) == True\nraise_flag_of_peace(grizzly_bear, cat) = rule1()\nraise_flag_of_peace(grizzly_bear, cat) == True\nowe(cat, money, gecko) = rule3()\nowe(cat, money, gecko) == True\nquestion = True", "answer": 1, "code": "rule1() = starts_with(color(card(grizzly_bear)), \"l\") => raise_flag_of_peace(grizzly_bear, cat)\nrule2() = took_bike(grizzly_bear) => raise_flag_of_peace(grizzly_bear, cat)\nrule3() = raise_flag_of_peace(grizzly_bear, cat) => owe(cat, money, gecko)\nrule4() = first_letter_of(name(grizzly_bear)) == first_letter_of(name(sea_bass)) => not raise_flag_of_peace(grizzly_bear, cat)\nrule5() = starts_with(color(card(cat)), \"y\") => knows(cat, defensive_plans, sun_bear)\nrule6() = attacks(something, green_fields(owned_by(cockroach))) => remove_piece(cat, snail)\norder(rule1) > order(rule4) = True\norder(rule2) > order(rule4) = True\n\ncolor(card(cat), yellow) = True\ncolor(card(grizzly_bear), black) = True\nhates(grizzly_bear, Chris_Ronaldo) = True\nattacks(koala, green_fields(owned_by(cockroach))) = True\nname(sea_bass, Mojo) = True\n\nquestion = owe(cat, money, gecko)\n"}, {"idx": 342, "response": "dream(amberjack, luxury_aircraft) == True\nowns(amberjack, luxury_aircraft) == True\nneeds_support(amberjack, parrot) = rule5()\nneeds_support(amberjack, parrot) == True\nshow_cards(parrot, meerkat) = rule1()\nshow_cards(parrot, meerkat) == True\nquestion = True", "answer": 1, "code": "rule1() = needs_support(amberjack, parrot) => show_cards(parrot, meerkat)\nrule2() = first_letter_of(name(amberjack)) == first_letter_of(name(koala)) => needs_support(amberjack, parrot)\nrule3() = has(lobster, internet_device) => roll_dice(lobster, parrot)\nrule4() = eat_food(kiwi, food_of(lobster)) => not roll_dice(lobster, parrot)\nrule5() = owns(amberjack, luxury_aircraft) => needs_support(amberjack, parrot)\norder(rule4) > order(rule3) = True\n\ndream(amberjack, luxury_aircraft) = True\nname(amberjack, Chickpea) = True\nname(koala, Charlie) = True\nhas(lobster, tablet) = True\n\nquestion = show_cards(parrot, meerkat)\n"}, {"idx": 343, "response": "wink(sun_bear, amberjack) = False\nnot wink(sun_bear, amberjack) = True\nsteal_points(sun_bear, 5, catfish) = rule1(sun_bear)\nsteal_points(sun_bear, 5, catfish) == True\nnot burn_warehouse(sun_bear, cat) = rule2(sun_bear)\nburn_warehouse(sun_bear, cat) == False\nquestion = False", "answer": -1, "code": "rule1(something) = not wink(something, amberjack) => steal_points(something, 5, catfish)\nrule2(something) = steal_points(something, 5, catfish) => not burn_warehouse(something, cat)\n\nwink(sun_bear, amberjack) = False\n\nquestion = burn_warehouse(sun_bear, cat)\n"}, {"idx": 344, "response": "has(sun_bear, drink) == True\nattack(sun_bear, green_fields(jellyfish)) = rule4()\nattack(sun_bear, green_fields(jellyfish)) == True\nnot wink(sun_bear, phoenix) = rule1()\nwink(sun_bear, phoenix) == False\nnot wink(sun_bear, phoenix) == True\nattack(sun_bear, green_fields(jellyfish)) == True\nneed_support(sun_bear, baboon) = rule3()\nneed_support(sun_bear, baboon) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(sun_bear)) == first_letter_of(name(eel)) => not wink(sun_bear, phoenix)\nrule2() = knock_down(snail, fortress(sun_bear)) => not need_support(sun_bear, baboon)\nrule3() = attack(something, green_fields(jellyfish)) & not wink(something, phoenix) => need_support(something, baboon)\nrule4() = has(sun_bear, drink) => attack(sun_bear, green_fields(jellyfish))\nrule5() = has(sun_bear, card) & color(card) in primary_colors => not wink(sun_bear, phoenix)\nrule6() = has_high_salary(sun_bear) => attack(sun_bear, green_fields(jellyfish))\norder(rule2) > order(rule3) = True\n\nname(eel, Max) = True\nhas(sun_bear, card) = True\ncolor(card, blue) = True\nname(sun_bear, Buddy) = True\nparked_bike(sun_bear, front_of(store)) = True\nhas(sun_bear, knapsack) = True\n\nquestion = need_support(sun_bear, baboon)\n"}, {"idx": 345, "response": "raise_flag_of_peace(eagle, polar_bear) == True\nknows(hummingbird, defensive_plans, polar_bear) == True\nrespect(polar_bear, kiwi) = rule1()\nrespect(polar_bear, kiwi) == True\nraise_flag_of_peace(jellyfish, polar_bear) = rule2()\nraise_flag_of_peace(jellyfish, polar_bear) == True\nlearns(polar_bear, elementary_resource_management, elephant) = rule6()\nlearns(polar_bear, elementary_resource_management, elephant) == True\nlearns(polar_bear, elementary_resource_management, elephant) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(eagle, polar_bear) & knows(hummingbird, defensive_plans, polar_bear) => respect(polar_bear, kiwi)\nrule2() = first_letter_of(name(jellyfish)) == first_letter_of(name(salmon)) => raise_flag_of_peace(jellyfish, polar_bear)\nrule3(something) = learns(something, elementary_resource_management, jellyfish) & respect(something, kiwi) => not learns(something, elementary_resource_management, elephant)\nrule4(something) = proceeds_to(something, spot_after(phoenix)) => not raise_flag_of_peace(something, polar_bear)\nrule5() = friends(jellyfish) > 10 => raise_flag_of_peace(jellyfish, polar_bear)\nrule6() = raise_flag_of_peace(jellyfish, polar_bear) => learns(polar_bear, elementary_resource_management, elephant)\norder(rule3) > order(rule6) = True\norder(rule4) > order(rule2) = True\norder(rule4) > order(rule5) = True\n\nraise_flag_of_peace(eagle, polar_bear) = True\nknows(hummingbird, defensive_plans, polar_bear) = True\nfriends(jellyfish) = 11\nname(jellyfish, Bella) = True\nname(salmon, Paco) = True\n\nquestion = learns(polar_bear, elementary_resource_management, elephant)\n"}, {"idx": 346, "response": "not sing(sheep, song_of_victory, meerkat) == True\nnot give(sheep, magnifier, viperfish) == True\nnot attack(doctorfish, green_fields, viperfish) = rule2()\nnot attack(doctorfish, green_fields, viperfish) == True\nfriends(doctorfish) < 11 = rule3()\nfriends(doctorfish) < 11 == True\nfriends(doctorfish) == 8\nnot attack(doctorfish, green_fields, viperfish) == True\nnot attack(doctorfish, green_fields, viperfish) == True\nraise_flag_of_peace(viperfish, donkey) = rule2()\nraise_flag_of_peace(viperfish, donkey) == True\nquestion = True", "answer": 1, "code": "rule1() = not steal(something, 5, hummingbird) => raise_flag_of_peace(something, donkey)\nrule2() = not give(sheep, magnifier, viperfish) & not attack(doctorfish, green_fields, viperfish) => not raise_flag_of_peace(viperfish, donkey)\nrule3() = friends(doctorfish) < 11 => not attack(doctorfish, green_fields, viperfish)\nrule4() = has(doctorfish, drink) => not attack(doctorfish, green_fields, viperfish)\nrule5() = not sing(something, song_of_victory, meerkat) => not give(something, magnifier, viperfish)\norder(rule1) > order(rule2) = True\n\nfriends(doctorfish) = 8\nhas(doctorfish, arugula) = True\nnot sing(sheep, song_of_victory, meerkat) = True\n\nquestion = raise_flag_of_peace(viperfish, donkey)\n"}, {"idx": 347, "response": "has(sun_bear, carry_apples_oranges) == True\neats_food(sun_bear, food_of(wolverine)) = rule2()\neats_food(sun_bear, food_of(wolverine)) == True\nremove_piece(caterpillar) = rule1()\nremove_piece(caterpillar) == True\nquestion = True", "answer": 1, "code": "rule1(something) = eats_food(something, food_of(wolverine)) => remove_piece(caterpillar)\nrule2() = has(sun_bear, carry_apples_oranges) => eats_food(sun_bear, food_of(wolverine))\nrule3() = has(sun_bear, leafy_green_vegetable) => not eats_food(sun_bear, food_of(wolverine))\norder(rule2) > order(rule3) = True\n\nhas(sun_bear, banana_strawberry_smoothie) = True\n\nquestion = remove_piece(caterpillar)\n"}, {"idx": 348, "response": "friends(caterpillar) = 3\nhas(caterpillar, internet_device) = False\nhas(caterpillar, knife) = True\nname(caterpillar, Casper) = True\nname(donkey, Cinnamon) = True\nrespect(ferret, caterpillar) = True\nremove_piece(cockroach, caterpillar) = False\noffer_job_position(caterpillar, tilapia) = rule4()\noffer_job_position(caterpillar, tilapia) == False\nnot offer_job_position(caterpillar, tilapia) == True\nproceed(caterpillar, spot_after(polar_bear)) = rule3()\nproceed(caterpillar, spot_after(polar_bear)) == True\nproceed(caterpillar, spot_after(polar_bear)) == True\nproceed(caterpillar, spot_after(parrot)) = rule1()\nproceed(caterpillar, spot_after(parrot)) == True\nproceed(caterpillar, spot_after(parrot)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = proceed(something, spot_after(polar_bear)) & not offer_job_position(something, tilapia) => proceed(something, spot_after(parrot))\nrule2() = has(caterpillar, internet_device) => proceed(caterpillar, spot_after(polar_bear))\nrule3() = friends(caterpillar) > 2 => proceed(caterpillar, spot_after(polar_bear))\nrule4() = respect(ferret, caterpillar) & not remove_piece(cockroach, caterpillar) => not offer_job_position(caterpillar, tilapia)\n\nfriends(caterpillar) = 3\nhas(caterpillar, knife) = True\nname(caterpillar, Casper) = True\nname(donkey, Cinnamon) = True\nrespect(ferret, caterpillar) = True\nremove_piece(cockroach, caterpillar) = False\n\nquestion = proceed(caterpillar, spot_after(parrot))\n"}, {"idx": 349, "response": "has(aardvark, basket) == False\nhas(aardvark, musical_instrument) == False\neat_food(aardvark, food_of(black_bear)) = rule4()\neat_food(aardvark, food_of(black_bear)) == False\neat_food(aardvark, food_of(black_bear)) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(aardvark) > 6 => not attack(aardvark, green_fields, owner(tiger))\nrule2() = eat_food(leopard, food_of(aardvark)) & respect(baboon, aardvark) => attack(aardvark, green_fields, owner(tiger))\nrule3() = attack(something, green_fields, owner(lion)) => roll_dice(aardvark, raven)\nrule4() = attack(something, green_fields, owner(tiger)) => not eat_food(something, food_of(black_bear))\nrule5() = has(aardvark, musical_instrument) => not attack(aardvark, green_fields, owner(tiger))\nrule6() = work_hours(aardvark) > previous_work_hours(aardvark) => not roll_dice(aardvark, raven)\nrule7() = first_letter_of(name(aardvark)) == first_letter_of(name(snail)) => not roll_dice(aardvark, raven)\nrule8() = roll_dice(something, raven) & wink(something, eagle) => eat_food(something, food_of(black_bear))\norder(rule1) > order(rule2) = True\norder(rule5) > order(rule2) = True\norder(rule6) > order(rule3) = True\norder(rule7) > order(rule3) = True\norder(rule8) > order(rule4) = True\n\nhas(aardvark, basket) = True\nname(aardvark, Paco) = True\nreduced_work_hours(aardvark) = True\nrespect(baboon, aardvark) = True\neat_food(leopard, food_of(aardvark)) = True\nattack(turtle, green_fields, owner(lion)) = True\n\nquestion = eat_food(aardvark, food_of(black_bear))\n"}, {"idx": 350, "response": "struggle_to_find_food(polar_bear) == True\nhas(polar_bear, card) == False\ncolor(card) in primary_colors == False\nneed_support(polar_bear, eagle) = rule5()\nneed_support(polar_bear, eagle) == True\nnot knock_down_fortress(eagle, hare) = rule1()\nknock_down_fortress(eagle, hare) == False\nknock_down_fortress(eagle, hare) == False\nquestion = False", "answer": -1, "code": "rule1() = not need_support(polar_bear, eagle) => knock_down_fortress(eagle, hare)\nrule2(something) = not eat_food(something, food_of(cockroach)) & become_enemy(something, sea_bass) => not knock_down_fortress(something, hare)\nrule3() = has(polar_bear, card) & color(card) in primary_colors => need_support(polar_bear, eagle)\nrule4(something) = attack(something, green_fields) & owner(green_fields) == carp => not need_support(something, eagle)\nrule5() = has_access(polar_bear, abundance_of_food) => need_support(polar_bear, eagle)\nrule6() = roll_dice(whale, eagle) & roll_dice(pig, eagle) => not become_enemy(eagle, sea_bass)\norder(rule1) > order(rule2) = True\norder(rule4) > order(rule3) = True\norder(rule4) > order(rule5) = True\n\nremove(pig, piece, eagle) = True\nroll_dice(pig, eagle) = True\nrespect(polar_bear, carp) = True\nstruggle_to_find_food(polar_bear) = True\nroll_dice(whale, eagle) = False\n\nquestion = knock_down_fortress(eagle, hare)\n"}, {"idx": 351, "response": "has(parrot, card) == True\ncolor(card, red) == True\ncolor(card) in colors_of(flag_of_Netherlands) == True\nremove_from_board(parrot, piece, mosquito) = rule1()\nremove_from_board(parrot, piece, mosquito) == True\npoints(parrot) == points(sun_bear) = rule2(parrot)\npoints(parrot) == points(sun_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = has(parrot, card) and color(card) in colors_of(flag_of_Netherlands) => remove_from_board(parrot, piece, mosquito)\nrule2(something) = remove_from_board(something, piece, mosquito) => points(something) == points(sun_bear)\nrule3() = wink(polar_bear, viperfish) & roll_dice(kiwi, viperfish) => add_to_conclusions(\"the viperfish burns the warehouse of the grizzly bear\")\nrule4() = first_letter_of(name(parrot)) == first_letter_of(name(jellyfish)) => remove_from_board(parrot, piece, mosquito)\n\nname(jellyfish, Pablo) = True\nroll_dice(kiwi, viperfish) = True\nhas(parrot, card) = True\ncolor(card, red) = True\nname(parrot, Mojo) = True\nwink(polar_bear, viperfish) = True\n\nquestion = points(parrot) == points(sun_bear)\n"}, {"idx": 352, "response": "has(hippopotamus, sharp_object) == False\nhas(hippopotamus, musical_instrument) == False\nremove_one_piece(hippopotamus, raven) = rule3()\nremove_one_piece(hippopotamus, raven) == False\nremove_one_piece(hippopotamus, raven) == False\nnot give(hippopotamus, magnifying_glass, koala) = rule6()\ngive(hippopotamus, magnifying_glass, koala) == False\ngive(hippopotamus, magnifying_glass, koala) == False\nquestion = False", "answer": -1, "code": "rule1() = wink(something, grasshopper) => remove_one_piece(hippopotamus, raven)\nrule2() = has(hippopotamus, internet_device) => learns(hippopotamus, elementary_resource_management, parrot)\nrule3() = has(hippopotamus, musical_instrument) => not remove_one_piece(hippopotamus, raven)\nrule4() = has(hippopotamus, sharp_object) => learns(hippopotamus, basics_of_resource_management, parrot)\nrule5() = friends(hippopotamus) < 7 => not remove_one_piece(hippopotamus, raven)\nrule6() = not remove_one_piece(something, raven) => not give(something, magnifying_glass, koala)\nrule7() = prepares_armor(sea_bass, hippopotamus) & not knows(caterpillar, defensive_plans, hippopotamus) => not learns(hippopotamus, basics_of_resource_management, parrot)\norder(rule1) > order(rule3) = True\norder(rule1) > order(rule5) = True\norder(rule2) > order(rule7) = True\norder(rule4) > order(rule7) = True\n\nfriends(hippopotamus) = 1\nhas(hippopotamus, love_seat_sofa) = True\nhas(hippopotamus, basket) = True\nprepares_armor(sea_bass, hippopotamus) = True\nknows(caterpillar, defensive_plans, hippopotamus) = False\n\nquestion = give(hippopotamus, magnifying_glass, koala)\n"}, {"idx": 353, "response": "has(donkey, card) == True\ncolor(card, indigo) == True\ncolor(card) in rainbow_colors == True\nowes(donkey, money, penguin) = rule1()\nowes(donkey, money, penguin) == True\nnot give(meerkat, magnifier, penguin) = rule6()\ngive(meerkat, magnifier, penguin) == False\nnot give(meerkat, magnifier, penguin) == False\nshow_all_cards(penguin, panda_bear) = rule6()\nshow_all_cards(penguin, panda_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = has(donkey, card) and color(card) in rainbow_colors => owes(donkey, money, penguin)\nrule2() = has(meerkat, something_to_sit_on) => give(meerkat, magnifier, penguin)\nrule3(something) = owes(something, money, elephant) => not show_all_cards(penguin, panda_bear)\nrule4() = has_access(donkey, abundance_of_food) => owes(donkey, money, penguin)\nrule5() = friends(meerkat) > 1 => give(meerkat, magnifying_glass, penguin)\nrule6() = owes(donkey, money, penguin) & not give(meerkat, magnifier, penguin) => show_all_cards(penguin, panda_bear)\nrule7(something) = points(something) == points(gecko) => not give(meerkat, magnifying_glass, penguin)\norder(rule6) > order(rule3) = True\norder(rule7) > order(rule2) = True\norder(rule7) > order(rule5) = True\n\nhas(donkey, card) = True\ncolor(card, indigo) = True\nstruggles_to_find_food(donkey) = True\nenergetic_friends(meerkat) = 4\nnon_energetic_friends(meerkat) = 5\nhas(meerkat, arugula) = True\n\nquestion = show_all_cards(penguin, panda_bear)\n"}, {"idx": 354, "response": "has(moose, card) == True\ncolor(card, green) == True\nname(moose, Meadow) == True\nname(parrot, Bella) == True\nfirst_letter_of(name(moose)) == first_letter_of(name(parrot)) = True\nnot give(moose, magnifier, raven) = rule1()\ngive(moose, magnifying_glass, raven) == False\nnot give(moose, magnifying_glass, raven) == False\nkilled(moose, mayor) = False\nnot give(moose, magnifying_glass, raven) == False\nnot give(moose, magnifying_glass, raven) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(moose)) == first_letter_of(name(parrot)) => not give(moose, magnifier, raven)\nrule2() = killed(moose, mayor) => not give(moose, magnifying_glass, raven)\nrule3() = give(something, magnifier, raven) => eat(wolverine, food_of(puffin))\nrule4() = has(moose, card) and color(card) in primary_colors => give(moose, magnifying_glass, raven)\nrule5(something) = offer_job_position(something, sun_bear) => not eat(something, food_of(puffin))\norder(rule1) > order(rule4) = True\norder(rule2) > order(rule4) = True\norder(rule5) > order(rule3) = True\n\nhas(moose, card) = True\ncolor(card, green) = True\nname(moose, Meadow) = True\nname(parrot, Bella) = True\n\nquestion = eat(wolverine, food_of(puffin))\n"}, {"idx": 355, "response": "color(kangaroo_card, violet) == True\ncolor_starts_with(kangaroo, \"v\") = rule1()\ncolor_starts_with(kangaroo, \"v\") == True\nwink(kangaroo, ferret) = rule1()\nwink(kangaroo, ferret) == True\nnot show_cards(ferret, octopus) = rule3()\nnot show_cards(ferret, octopus) == True\nshow_cards(ferret, octopus) == False\nquestion = False", "answer": -1, "code": "rule1() = color_starts_with(kangaroo, \"v\") => wink(kangaroo, ferret)\nrule2() = owes(something, money, catfish) => not wink(kangaroo, ferret)\nrule3() = wink(kangaroo, ferret) => not show_cards(ferret, octopus)\norder(rule2) > order(rule1) = True\n\ncolor(kangaroo_card, violet) = True\n\nquestion = show_cards(ferret, octopus)\n"}, {"idx": 356, "response": "playful_friends(turtle) = 3\nnon_playful_friends(turtle) = 7\nsteal_points(turtle, 5, pig) = True\nroll_dice(turtle, moose) = False\nnot offer_job_position(turtle, sun_bear) = rule1()\nnot offer_job_position(turtle, sun_bear) == True\nnot offer_job_position(turtle, sun_bear) == True\nowe(turtle, money, squirrel) = rule3()\nowe(turtle, money, squirrel) == True\nowe(turtle, money, squirrel) == True\nquestion = True", "answer": 1, "code": "rule1() = roll_dice(something, moose) & steal_points(something, 5, pig) => not offer_job_position(something, sun_bear)\nrule2() = first_letter_of(name(turtle)) == first_letter_of(name(eagle)) => offer_job_position(turtle, sun_bear)\nrule3(something) = not offer_job_position(something, sun_bear) => owe(something, money, squirrel)\norder(rule2) > order(rule1) = True\n\nname(eagle, Max) = True\nplayful_friends(turtle) = 3\nnon_playful_friends(turtle) = 7\nsteal_points(turtle, 5, pig) = True\nname(turtle, Blossom) = True\nroll_dice(turtle, moose) = False\n\nquestion = owe(turtle, money, squirrel)\n"}, {"idx": 357, "response": "has(jellyfish, guitar) == True\nnot eat_food(jellyfish, food_of(kangaroo)) = rule3()\nnot eat_food(jellyfish, food_of(kangaroo)) == True\nknows(jellyfish, defense_plans, wolverine) = rule1()\nknows(jellyfish, defense_plans, wolverine) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not eat_food(something, food_of(kangaroo)) => knows(something, defense_plans, wolverine)\nrule2() = friends(jellyfish) < 6 => not eat_food(jellyfish, food_of(kangaroo))\nrule3() = has(jellyfish, musical_instrument) => not eat_food(jellyfish, food_of(kangaroo))\n\nhas(jellyfish, guitar) = True\nfriends(jellyfish) = 9\n\nquestion = knows(jellyfish, defense_plans, wolverine)\n"}, {"idx": 358, "response": "has(squirrel, card) == True\ncolor(card, red) == True\ncolor(card) in rainbow_colors == True\nowe(squirrel, money, buffalo) = rule1()\nowe(squirrel, money, buffalo) == True\nhas(squirrel, something_to_sit_on) == True\nnot show_cards(squirrel, doctorfish) = rule2()\nnot show_cards(squirrel, doctorfish) == True\nnot show_cards(squirrel, doctorfish) == True\nfriends(squirrel) = 2\nfriends(squirrel) > 11 == False\nnot show_cards(squirrel, doctorfish) == True\nneeds_support(something, bat) == True\nnot owe(squirrel, money, buffalo) == True\nnot show_cards(something, doctorfish) == True\nnot prepare_armor(something, mosquito) = rule3(something)\nnot prepare_armor(something, mosquito) == True\nnot prepare_armor(something, mosquito) == True\nquestion = not prepare_armor(squirrel, mosquito)\nquestion = True", "answer": 1, "code": "rule1() = has(squirrel, card) and color(card) in rainbow_colors => owe(squirrel, money, buffalo)\nrule2() = has(squirrel, something_to_sit_on) => not show_cards(squirrel, doctorfish)\nrule3(something) = not owe(something, money, buffalo) and not show_cards(something, doctorfish) => not prepare_armor(something, mosquito)\nrule4() = friends(squirrel) > 11 => not show_cards(squirrel, doctorfish)\nrule5() = needs_support(something, bat) => not owe(squirrel, money, buffalo)\norder(rule5) > order(rule1) = True\n\nneeds_support(black_bear, bat) = True\nhas(squirrel, bench) = True\nfriends(squirrel) = 2\nhas(squirrel, card) = True\ncolor(card, red) = True\ngive(starfish, magnifying_glass, rabbit) = True\n\nquestion = prepare_armor(squirrel, mosquito)\n"}, {"idx": 359, "response": "has(snail, kale) == True\nhas(snail, leafy_green_vegetable) == True\noffer_job_position(snail, panda_bear) = rule5()\noffer_job_position(snail, panda_bear) == True\neat_food(panda_bear, food_of(cat)) = rule2()\neat_food(panda_bear, food_of(cat)) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(snail)) == first_letter_of(name(cricket)) => not offer_job_position(snail, panda_bear)\nrule2() = eat_food(lion, food_of(panda_bear)) & not offer_job_position(snail, panda_bear) => eat_food(panda_bear, food_of(cat))\nrule3() = show_cards(something, all_cards) to black_bear => not eat_food(panda_bear, food_of(cat))\nrule4() = wink(something, raven) => eat_food(something, food_of(panda_bear))\nrule5() = has(snail, leafy_green_vegetable) => offer_job_position(snail, panda_bear)\nrule6() = has(snail, something_to_sit_on) => offer_job_position(snail, panda_bear)\norder(rule1) > order(rule5) = True\norder(rule1) > order(rule6) = True\norder(rule3) > order(rule2) = True\n\nname(cricket, Pashmak) = True\nwink(lion, raven) = True\nhas(snail, green_tea) = True\nhas(snail, kale) = True\nname(snail, Max) = True\n\nquestion = eat_food(panda_bear, food_of(cat))\n"}, {"idx": 360, "response": "knocks_down(octopus, fortress, moose) == True\nprepare_armor(moose, squirrel) = rule1()\nprepare_armor(moose, squirrel) == True\nsteal_points(moose, caterpillar, 5) = rule2(moose)\nsteal_points(moose, caterpillar, 5) == True\nquestion = True", "answer": 1, "code": "rule1() = knocks_down(octopus, fortress, moose) => prepare_armor(moose, squirrel)\nrule2(something) = prepare_armor(something, squirrel) => steal_points(something, caterpillar, 5)\n\nknocks_down(octopus, fortress, moose) = True\n\nquestion = steal_points(moose, caterpillar, 5)\n"}, {"idx": 361, "response": "name(cricket, Peddi) == True\nname(elephant, Lola) == True\nfirst_letter_of(name(cricket)) == first_letter_of(name(elephant)) == True\nnot knock_down(cricket, fortress, moose) = rule1()\nknock_down(cricket, fortress, moose) == False\nnot knock_down(cricket, fortress, moose) == False\noffer_job_position(cricket, moose) = rule7()\noffer_job_position(cricket, moose) == True\nhold_equal_number_of_points(cricket, cow) = rule5()\nhold_equal_number_of_points(cricket, cow) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(cricket)) == first_letter_of(name(elephant)) => not knock_down(cricket, fortress, moose)\nrule2() = first_letter_of(name(raven)) == first_letter_of(name(grizzly_bear)) => not remove_from_board(raven, piece, cricket)\nrule3() = has(raven, leafy_green_vegetable) => not remove_from_board(raven, piece, cricket)\nrule4(something) = offer_job_position(something, moose) & not knock_down(something, fortress, moose) => not hold_equal_number_of_points(something, cow)\nrule5() = not eat_food(panda_bear, food_of(cricket)) & not remove_from_board(raven, piece, cricket) => hold_equal_number_of_points(cricket, cow)\nrule6() = has(cricket, card) and color(card) in rainbow_colors => not knock_down(cricket, fortress, moose)\nrule7() = fan_of(cricket, Chris_Ronaldo) => offer_job_position(cricket, moose)\norder(rule5) > order(rule4) = True\n\nhas(cricket, card) = True\ncolor(card, violet) = True\nname(cricket, Peddi) = True\nsupports(cricket, Chris_Ronaldo) = True\nname(elephant, Lola) = True\nname(grizzly_bear, Cinnamon) = True\nhas(raven, knife) = True\nname(raven, Casper) = True\n\nquestion = hold_equal_number_of_points(cricket, cow)\n"}, {"idx": 362, "response": "name(blobfish, Pashmak) == True\nname(carp, Pablo) == True\nname(hare, Bella) == True\nname(rabbit, Blossom) == True\nfirst_letter_of(name(rabbit)) == first_letter_of(name(hare)) = True\nknock_down(rabbit, fortress, donkey) = rule1()\nknock_down(rabbit, fortress, donkey) == True\nhas_access(blobfish, abundance_of_food) = False\noffer_job_position(blobfish, donkey) = rule2()\noffer_job_position(blobfish, donkey) == False\nfirst_letter_of(name(blobfish)) == first_letter_of(name(carp)) = False\noffer_job_position(blobfish, donkey) = rule3()\noffer_job_position(blobfish, donkey) == False\nbelief(offer_job_position(blobfish, donkey)) = False\nlearn(rabbit, elementary_resource_management_from(donkey)) = False\nadd_conclusion(\"the donkey winks at the mosquito\") = False\ndream(blobfish, luxury_aircraft) == True\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(rabbit)) == first_letter_of(name(hare)) => knock_down(rabbit, fortress, donkey)\nrule2() = has_access(blobfish, abundance_of_food) => offer_job_position(blobfish, donkey)\nrule3() = first_letter_of(name(blobfish)) == first_letter_of(name(carp)) => offer_job_position(blobfish, donkey)\nrule4() = belief(offer_job_position(blobfish, donkey)) & learn(rabbit, elementary_resource_management_from(donkey)) => add_conclusion(\"the donkey winks at the mosquito\")\n\ndream(blobfish, luxury_aircraft) = True\nname(blobfish, Pashmak) = True\nname(carp, Pablo) = True\nname(hare, Bella) = True\nname(rabbit, Blossom) = True\n\nquestion = \"the donkey winks at the mosquito\" in conclusions\n"}, {"idx": 363, "response": "offer_job_position(oscar, lobster) == True\nburn_warehouse(koala, lobster) == True\neat_food(lobster, food_of(donkey)) = rule1()\neat_food(lobster, food_of(donkey)) == True\neat_food(lobster, food_of(donkey)) == True\nwink(lobster, swordfish) = rule2(lobster)\nwink(lobster, swordfish) == True\nwink(lobster, swordfish) == True\nquestion = True", "answer": 1, "code": "rule1() = offer_job_position(oscar, lobster) & burn_warehouse(koala, lobster) => eat_food(lobster, food_of(donkey))\nrule2(something) = eat_food(something, food_of(donkey)) => wink(something, swordfish)\nrule3() = has(lobster, card) & color(card) in colors_of_Belgium_flag => not eat_food(lobster, food_of(donkey))\norder(rule1) > order(rule3) = True\n\nburn_warehouse(koala, lobster) = True\nhas(lobster, card) = True\ncolor(card, orange) = True\nowns(lobster, luxury_aircraft) = True\noffer_job_position(oscar, lobster) = True\n\nquestion = wink(lobster, swordfish)\n"}, {"idx": 364, "response": "raise_flag_of_peace(grasshopper, cheetah) == True\nneed_support(grasshopper, lion) == False\nnot need_support(grasshopper, lion) == True\nnot raise_flag_of_peace(grasshopper, cheetah) == False\nnot roll_dice(grasshopper, cow) = rule2(grasshopper)\nnot roll_dice(grasshopper, cow) == False\nnot roll_dice(grasshopper, cow) == False\nnot wink(cow, cat) = rule1()\nnot wink(cow, cat) == False\nnot wink(cow, cat) == False\nquestion = False", "answer": -1, "code": "rule1() = not roll_dice(grasshopper, cow) => not wink(cow, cat)\nrule2(something) = not need_support(something, lion) & raise_flag_of_peace(something, cheetah) => not roll_dice(something, cow)\n\nraise_flag_of_peace(grasshopper, cheetah) = True\nneed_support(grasshopper, lion) = False\n\nquestion = wink(cow, cat)\n"}, {"idx": 365, "response": "assassinate(tiger, mayor) == True\nvoted(tiger, mayor) = rule1()\nvoted(tiger, mayor) == True\nlearn(tiger, elementary_resource_management, cheetah) = rule1()\nlearn(tiger, elementary_resource_management, cheetah) == True\nknows(tiger, defense_plan, hare) = False\nhas(tiger, sharp_object) = True\nlearn(tiger, elementary_resource_management, cheetah) == True\nneed_support(tiger, donkey) = rule4()\nneed_support(tiger, donkey) == True\nquestion = True", "answer": 1, "code": "rule1() = voted(tiger, mayor) => learn(tiger, elementary_resource_management, cheetah)\nrule2() = wink(tiger, hare) if wink(something, lion)\nrule3() = has(tiger, sharp_object) => learn(tiger, elementary_resource_management, cheetah)\nrule4(something) = knows(something, defense_plan, hare) & learn(something, elementary_resource_management, cheetah) => need_support(something, donkey)\nrule5() = attack(crocodile, green_fields, tiger) => not learn(tiger, elementary_resource_management, cheetah)\norder(rule5) > order(rule1) = True\norder(rule5) > order(rule3) = True\n\nwink(cat, lion) = True\nassassinate(tiger, mayor) = True\nhas(tiger, blade) = True\n\nquestion = need_support(tiger, donkey)\n"}, {"idx": 366, "response": "has(phoenix, blade) == True\nhas(phoenix, cutter) == True\ngive(phoenix, magnifying_glass, rabbit) = rule1()\ngive(phoenix, magnifying_glass, rabbit) == True\nrespect(raven, blobfish) == True\nrespect(blobfish, rabbit) = rule6()\nrespect(blobfish, rabbit) == True\nrespect(rabbit, polar_bear) = rule8()\nrespect(rabbit, polar_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = has(phoenix, device_to_connect_to_internet) => give(phoenix, magnifying_glass, rabbit)\nrule2() = has(phoenix, leafy_green_vegetable) => not give(phoenix, magnifying_glass, rabbit)\nrule3() = not has(phoenix, keys) => not give(phoenix, magnifying_glass, rabbit)\nrule4() = first_letter_of(name(blobfish)) == first_letter_of(name(octopus)) => offer_job(blobfish, rabbit)\nrule5() = belief(offer_job(blobfish, rabbit)) & belief(give(phoenix, magnifying_glass, rabbit)) => add_conclusion(\"the rabbit is not going to respect the polar bear\")\nrule6() = respect(raven, blobfish) => respect(blobfish, rabbit)\nrule7() = first_letter_of(name(phoenix)) == first_letter_of(name(puffin)) => give(phoenix, magnifier, rabbit)\nrule8() = respect(blobfish, rabbit) => respect(rabbit, polar_bear)\norder(rule2) > order(rule1) = True\norder(rule2) > order(rule7) = True\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule7) = True\norder(rule8) > order(rule5) = True\n\npoints(blobfish) == points(spider) = True\nname(blobfish, Max) = True\nname(octopus, Milo) = True\nhas(phoenix, blade) = True\nhas(phoenix, cutter) = True\nname(phoenix, Cinnamon) = True\nname(puffin, Chickpea) = True\nrespect(raven, blobfish) = True\n\nquestion = respect(rabbit, polar_bear)\n"}, {"idx": 367, "response": "difficulty_to_find_food(sea_bass) == True\nrespect(sea_bass, hippopotamus) = rule1()\nrespect(sea_bass, hippopotamus) == True\npoints(sea_bass) == points(blobfish) = rule3()\npoints(sea_bass) == points(blobfish) == True\npoints(sea_bass) == points(blobfish) == True\nquestion = True", "answer": 1, "code": "rule1() = difficulty_to_find_food(sea_bass) => respect(sea_bass, hippopotamus)\nrule2() = knows(eagle, defensive_plans, sea_bass) => roll_dice(sea_bass, tilapia)\nrule3(something) = respect(something, hippopotamus) => points(something) == points(blobfish)\nrule4() = has(sea_bass, leafy_green_vegetable) => not need_support(sea_bass, whale)\nrule5() = need_support(something, whale) & roll_dice(something, tilapia) => not points(something) == points(blobfish)\nrule6() = wink(ferret, sea_bass) => need_support(sea_bass, whale)\norder(rule4) > order(rule6) = True\norder(rule5) > order(rule3) = True\n\nknows(eagle, defensive_plans, sea_bass) = True\nwink(ferret, sea_bass) = True\npoints(sea_bass) == points(penguin) = True\ndifficulty_to_find_food(sea_bass) = True\n\nquestion = points(sea_bass) == points(blobfish)\n"}, {"idx": 368, "response": "roll_dice(hippopotamus, carp) == True\nnot roll_dice(hippopotamus, carp) == False\nburn_warehouse(hippopotamus, turtle) = rule1()\nburn_warehouse(hippopotamus, turtle) == True\nburn_warehouse(hippopotamus, turtle) == True\nroll_dice(hippopotamus, puffin) = rule2()\nroll_dice(hippopotamus, puffin) == True\nroll_dice(hippopotamus, puffin) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not roll_dice(something, carp) => burn_warehouse(something, turtle)\nrule2(something) = burn_warehouse(something, turtle) => roll_dice(something, puffin)\nrule3() = friends(hippopotamus) < 13 => become_enemy(hippopotamus, kiwi)\nrule4(something) = not roll_dice(something, elephant) => sing_victory_song(something, cat)\n\nwise_friends(hippopotamus) = 5\nnon_wise_friends(hippopotamus) = 4\nroll_dice(hippopotamus, carp) = True\nnot roll_dice(hippopotamus, elephant) = True\nroll_dice(penguin, lobster) = True\n\nquestion = roll_dice(hippopotamus, puffin)\n"}, {"idx": 369, "response": "wink(ferret, wolverine) == True\nneeds_support(mosquito, wolverine) == True\ngive(wolverine, magnifying_glass, starfish) = rule1()\ngive(wolverine, magnifying_glass, starfish) == True\nburn(lobster, warehouse, pig) = rule2()\nburn(lobster, warehouse, pig) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(ferret, wolverine) & needs_support(mosquito, wolverine) => give(wolverine, magnifying_glass, starfish)\nrule2() = give(something, magnifying_glass, starfish) => burn(lobster, warehouse, pig)\nrule3(something) = not needs_support(something, rabbit) => not burn(something, warehouse, pig)\norder(rule3) > order(rule2) = True\n\nwink(ferret, wolverine) = True\nneeds_support(mosquito, wolverine) = True\n\nquestion = burn(lobster, warehouse, pig)\n"}, {"idx": 370, "response": "has(carp, card) == True\nstarts_with(color(card), \"b\") == True\noffer_job_position(carp, kiwi) = rule4()\noffer_job_position(carp, kiwi) == True\nnot give(kangaroo, magnifying_glass, kiwi) == True\nequal_points(kiwi, grasshopper) = rule6()\nequal_points(kiwi, grasshopper) == True\nequal_points(kiwi, grasshopper) == True\nquestion = True", "answer": 1, "code": "rule1(something) = proceeds_to_right_after(something, spot(hippopotamus)) & knows(something, defensive_plans, starfish) => not offer_job_position(something, caterpillar)\nrule2() = has(carp, carry(apples)) & has(carp, carry(oranges)) => offer_job_position(carp, kiwi)\nrule3() = first_letter_of(name(viperfish)) == first_letter_of(name(parrot)) => offer_job_position(viperfish, caterpillar)\nrule4() = has(carp, card) & starts_with(color(card), \"b\") => offer_job_position(carp, kiwi)\nrule5() = offer_job_position(something, caterpillar) => not equal_points(kiwi, grasshopper)\nrule6() = offer_job_position(carp, kiwi) & not give(kangaroo, magnifying_glass, kiwi) => equal_points(kiwi, grasshopper)\norder(rule1) > order(rule3) = True\norder(rule6) > order(rule5) = True\n\nhas(carp, card) = True\ncolor(card, blue) = True\nhas(carp, tablet) = True\nname(parrot, Teddy) = True\nname(viperfish, Tarzan) = True\nknows(viperfish, defensive_plans, starfish) = True\n\nquestion = equal_points(kiwi, grasshopper)\n"}, {"idx": 371, "response": "has(puffin, cello) == True\nhas(puffin, sharp_object) == False\nfirst_letter_of(name(puffin)) == first_letter_of(name(phoenix)) == True\nattacks(puffin, green_fields, sun_bear) = rule2()\nattacks(puffin, green_fields, sun_bear) == True\nattacks(puffin, green_fields, sun_bear) == True\nproceeds_to(puffin, spot_right_after(black_bear)) = rule3()\nproceeds_to(puffin, spot_right_after(black_bear)) == True\nproceeds_to(puffin, spot_right_after(black_bear)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(puffin, sharp_object) => attacks(puffin, green_fields, sun_bear)\nrule2() = first_letter_of(name(puffin)) == first_letter_of(name(phoenix)) => attacks(puffin, green_fields, sun_bear)\nrule3() = attacks(something, green_fields, sun_bear) => proceeds_to(something, spot_right_after(black_bear))\n\nname(phoenix, Tarzan) = True\nhas(puffin, cello) = True\nname(puffin, Cinnamon) = True\n\nquestion = proceeds_to(puffin, spot_right_after(black_bear))\n"}, {"idx": 372, "response": "remove(wolverine, piece, buffalo) == True\npoints(buffalo) == points(turtle) = rule1()\npoints(buffalo) == points(turtle) == True\nraise_flag_of_peace(buffalo, bat) = rule2(buffalo)\nraise_flag_of_peace(buffalo, bat) == True\nquestion = True", "answer": 1, "code": "rule1() = remove(wolverine, piece, buffalo) => points(buffalo) == points(turtle)\nrule2(something) = points(something) == points(turtle) => raise_flag_of_peace(something, bat)\n\nremove(wolverine, piece, buffalo) = True\n\nquestion = raise_flag_of_peace(buffalo, bat)\n"}, {"idx": 373, "response": "kill(lion, mayor) == True\ngive(lion, magnifier, viperfish) = rule2()\ngive(lion, magnifier, viperfish) == True\nlearn(viperfish, elementary_resource_management_from(tiger)) = rule1()\nlearn(viperfish, elementary_resource_management_from(tiger)) == not learn(viperfish, elementary_resource_management_from(tiger))\nnot learn(viperfish, elementary_resource_management_from(tiger)) == not learn(viperfish, elementary_resource_management_from(tiger))\nquestion = not learn(viperfish, elementary_resource_management_from(tiger))\n", "answer": 0, "code": "rule1() = give(lion, magnifier, viperfish) & eat(kudu, food_of(viperfish)) => not learn(viperfish, elementary_resource_management_from(tiger))\nrule2() = kill(lion, mayor) => give(lion, magnifier, viperfish)\nrule3(something) = eat(something, food_of(dog)) => eat(something, food_of(viperfish))\n\neat(kudu, food_of(dog)) = True\nkill(lion, mayor) = True\n\nquestion = learn(viperfish, elementary_resource_management_from(tiger))\n"}, {"idx": 374, "response": "give(grizzly_bear, magnifier, whale) == True\nburn_warehouse(whale, canary) = rule2()\nburn_warehouse(whale, canary) == True\nproceed_to_spot(canary, right_after, cat) = rule5()\nproceed_to_spot(canary, right_after, cat) == True\nquestion = True", "answer": 1, "code": "rule1() = respects(eel, whale) & give(grizzly_bear, magnifier, whale) => not prepare_armor(whale, blobfish)\nrule2() = steal_points(something, 5, gecko) => burn_warehouse(whale, canary)\nrule3(something) = knock_down_fortress(something, caterpillar) & not need_support(something, sheep) => not burn_warehouse(something, canary)\nrule4() = has(whale, leafy_green_vegetable) => prepare_armor(whale, blobfish)\nrule5() = burn_warehouse(whale, canary) => proceed_to_spot(canary, right_after, cat)\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule1) = True\n\nrespects(eel, whale) = True\ngive(grizzly_bear, magnifier, whale) = True\nneed_support(tilapia, gecko) = True\nhas(whale, kale) = True\nknock_down_fortress(whale, caterpillar) = True\nnot need_support(whale, sheep) = True\n\nquestion = proceed_to_spot(canary, right_after, cat)\n"}, {"idx": 375, "response": "has(panther, guitar) == True\nhas(panther, musical_instrument) == True\nprepare_armor(panther, sea_bass) = rule1()\nprepare_armor(panther, sea_bass) == True\nraise_flag_of_peace(panther, gecko) = rule4()\nraise_flag_of_peace(panther, gecko) == False\nhas(panther, musical_instrument) == True\nnot prepare_armor(panther, sea_bass) = rule5()\nprepare_armor(panther, sea_bass) == False\nhas(panther, tablet) == True\nraise_flag_of_peace(panther, gecko) = rule6()\nraise_flag_of_peace(panther, gecko) == True\nprepare_armor(panther, sea_bass) = rule7()\nprepare_armor(panther, sea_bass) == True\nlearn(panther, elementary_resource_management_from(dog)) = rule2()\nlearn(panther, elementary_resource_management_from(dog)) == False\npoints(panther) == points(viperfish) = rule3()\npoints(panther) == points(viperfish) == False\nnot learn(panther, basics_of_resource_management_from(dog)) == True\nquestion = True", "answer": 1, "code": "rule1() = has(panther, musical_instrument) => prepare_armor(panther, sea_bass)\nrule2(something) = raise_flag_of_peace(something, gecko) & prepare_armor(something, sea_bass) => learn(something, elementary_resource_management_from(dog))\nrule3(something) = points(something) == points(viperfish) => not learn(panther, basics_of_resource_management_from(dog))\nrule4() = friends(panther) < 8 => raise_flag_of_peace(panther, gecko)\nrule5() = has(panther, musical_instrument) => not prepare_armor(panther, sea_bass)\nrule6() = has(panther, internet_device) => raise_flag_of_peace(panther, gecko)\nrule7() = has(panther, internet_device) => prepare_armor(panther, sea_bass)\norder(rule1) > order(rule5) = True\norder(rule3) > order(rule2) = True\norder(rule7) > order(rule5) = True\n\nfriends(panther) = 3\nhas(panther, guitar) = True\nhas(panther, cello) = True\nhas(panther, tablet) = True\nhas(panther, romaine_lettuce) = True\n\nquestion = learn(panther, basics_of_resource_management_from(dog))\n"}, {"idx": 376, "response": "assassinated(koala, mayor) == True\nvoted(koala, mayor) = rule1()\nvoted(koala, mayor) == True\nrespects(koala, phoenix) = rule1()\nrespects(koala, phoenix) == True\nrespects(koala, phoenix) == True\nnot steal(five_points, moose) = rule2(koala)\nnot steal(five_points, moose) == True\nnot steal(five_points, moose) == True\nquestion = True", "answer": 1, "code": "rule1() = voted(koala, mayor) => respects(koala, phoenix)\nrule2(something) = respects(something, phoenix) => not steal(five_points, moose)\nrule3() = has(koala, card) and color(card) in flag_of_france_colors => respects(koala, phoenix)\n\nassassinated(koala, mayor) = True\nhas(koala, card) = True\ncolor(card, blue) = True\n\nquestion = steal(five_points, moose)\n"}, {"idx": 377, "response": "prepare_armor(canary, buffalo) == True\nnot show_all_cards(snail, buffalo) == True\nadd_conclusion(\"the buffalo burns the warehouse of the sun bear\") = rule2()\nadd_conclusion(\"the buffalo burns the warehouse of the sun bear\") == True\nburns_warehouse(buffalo, sun_bear) = add_conclusion(\"the buffalo burns the warehouse of the sun bear\")\nburns_warehouse(buffalo, sun_bear) == True\npoints(buffalo) == points(hare) = rule1()\npoints(buffalo) == points(hare) == True\ngive(buffalo, magnifier, kangaroo) = rule3()\ngive(buffalo, magnifier, kangaroo) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(buffalo) > 4 => points(buffalo) == points(hare)\nrule2() = prepare_armor(canary, buffalo) & not show_all_cards(snail, buffalo) => add_conclusion(\"the buffalo burns the warehouse of the sun bear\")\nrule3() = burns_warehouse(something, sun_bear) & points(something) != points(hare) => give(something, magnifier, kangaroo)\nrule4() = show_all_cards(something, pig) => not give(something, magnifying_glass, kangaroo)\norder(rule4) > order(rule3) = True\n\nhas(buffalo, card) and color(card, white) = True\nfriends(buffalo) = 11\nname(buffalo, Tarzan) = True\nprepare_armor(canary, buffalo) = True\nname(hare, Tessa) = True\nnot show_all_cards(snail, buffalo) = True\n\nquestion = give(buffalo, magnifier, kangaroo)\n"}, {"idx": 378, "response": "has(kudu, card) == True\ncolor(card, green) == True\ncolor(card) in primary_colors == True\nnot raise_flag_of_peace(kudu, starfish) = rule2()\nnot raise_flag_of_peace(kudu, starfish) == True\nremove_from_board(starfish, piece, amberjack) = rule4()\nremove_from_board(starfish, piece, amberjack) == True\nquestion = True", "answer": 1, "code": "rule1() = rolls_dice(something, panther) => not remove_from_board(starfish, piece, amberjack)\nrule2() = has(kudu, card) and color(card) in primary_colors => not raise_flag_of_peace(kudu, starfish)\nrule3() = has(kudu, high_quality_paper) => raise_flag_of_peace(kudu, starfish)\nrule4() = not raise_flag_of_peace(kudu, starfish) => remove_from_board(starfish, piece, amberjack)\norder(rule1) > order(rule4) = True\norder(rule2) > order(rule3) = True\n\nhas(kudu, card) = True\ncolor(card, green) = True\nhas(kudu, high_quality_paper) = True\n\nquestion = remove_from_board(starfish, piece, amberjack)\n"}, {"idx": 379, "response": "I apologize, but I made a mistake in my previous response. Let me correct it.\n\nhas(halibut, beer) == True\nhas(halibut, something_to_drink) == True\noffer_job_position(halibut, eagle) = rule1()\noffer_job_position(halibut, eagle) == True\nname(grasshopper, Paco) == True\nname(cat, Peddi) == True\nfirst_letter_of(name(grasshopper)) == first_letter_of(name(cat)) = True\nnot raise_flag_of_peace(grasshopper, eagle) = rule6()\nraise_flag_of_peace(grasshopper, eagle) == False\nnot raise_flag_of_peace(grasshopper, eagle) == True\noffer_job_position(halibut, eagle) == True\nnot prepare_armor(eagle, leopard) = rule3()\nprepare_armor(eagle, leopard) == False\nprepare_armor(eagle, leopard) == False\nquestion = prepare_armor(eagle, leopard) == False", "answer": -1, "code": "\n"}, {"idx": 380, "response": "has_card(whale, green) == True\nhas_card(whale, color(rainbow_colors)) == True\nshow_cards(whale, all_cards, gecko) = rule2()\nshow_cards(whale, all_cards, gecko) == True\nlearn(whale, elementary_resource_management_from(kiwi)) == True\nshow_cards(whale, all_cards, gecko) == True\nlearn(whale, elementary_resource_management_from(kiwi)) == True\nhold_equal_points(whale, grasshopper) = rule3()\nhold_equal_points(whale, grasshopper) == True\nhold_equal_points(whale, grasshopper) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not roll_dice(something, penguin) => not hold_equal_points(something, grasshopper)\nrule2() = has_card(whale, color(rainbow_colors)) => show_cards(whale, all_cards, gecko)\nrule3(something) = show_cards(something, all_cards, gecko) & learn(something, elementary_resource_management_from(kiwi)) => hold_equal_points(something, grasshopper)\nrule4() = has(whale, sharp_object) => become_enemy(whale, kiwi)\norder(rule3) > order(rule1) = True\n\nprepare_armor(tiger, whale) = True\nhas_card(whale, green) = True\nhas(whale, knife) = True\nfriends(whale) = 15\nhold_keys(whale) = True\nattack(eel, green_fields(whale)) = False\n\nquestion = hold_equal_points(whale, grasshopper)\n"}, {"idx": 381, "response": "has(swordfish, blade) == True\neat_food(swordfish, food_of(cricket)) = rule2()\neat_food(swordfish, food_of(cricket)) == True\nrespect(cricket, kiwi) = rule1()\nrespect(cricket, kiwi) == True\nquestion = True", "answer": 1, "code": "rule1() = eat_food(swordfish, food_of(cricket)) => respect(cricket, kiwi)\nrule2() = has(swordfish, sharp_object) => eat_food(swordfish, food_of(cricket))\n\nhas(swordfish, blade) = True\n\nquestion = respect(cricket, kiwi)\n"}, {"idx": 382, "response": "friends(kangaroo) = 14\nfriends(kangaroo) > 7 = True\nnot respect(kangaroo, hippopotamus) = rule1()\nnot respect(kangaroo, hippopotamus) == True\nnot respect(kangaroo, hippopotamus) == True\nnot respect(something, mosquito) = rule3(kangaroo)\nnot respect(something, mosquito) == True\nnot respect(something, mosquito) == True\nrespect(kangaroo, hippopotamus) = rule5()\nrespect(kangaroo, hippopotamus) == False\nrespect(kangaroo, hippopotamus) == False\nrespect(kangaroo, mosquito) = False\nquestion = False", "answer": -1, "code": "rule1() = friends(kangaroo) > 7 => not respect(kangaroo, hippopotamus)\nrule2() = first_letter_of(name(kangaroo)) == first_letter_of(name(turtle)) => learn(kangaroo, elementary_resource_management, grasshopper)\nrule3(something) = not respect(something, hippopotamus) => not respect(something, mosquito)\nrule4() = works_fewer_hours(kangaroo) => offer_job_position(kangaroo, penguin)\nrule5() = remove_piece(something, crocodile) => respect(kangaroo, hippopotamus)\nrule6() = has(kangaroo, something_to_carry_apples_and_oranges) => not learn(kangaroo, elementary_resource_management, grasshopper)\norder(rule2) > order(rule6) = True\norder(rule5) > order(rule1) = True\n\nhas(kangaroo, cell_phone) = True\nfriends(kangaroo) = 14\nhas(kangaroo, cutter) = True\nname(kangaroo, Milo) = True\nworks_fewer_hours(kangaroo) = True\nname(turtle, Max) = True\n\nquestion = respect(kangaroo, mosquito)\n"}, {"idx": 383, "response": "has(sheep, card) and starts_with(color(card), \"b\") = rule1()\nhas(sheep, card) == False\nstarts_with(color(card), \"b\") == False\nlearns(sheep, basics_of_resource_management_from(cheetah)) == False\nnot learns(something, basics_of_resource_management_from(cheetah)) and not knows(something, defense_plan, tilapia) = rule2()\nnot learns(something, basics_of_resource_management_from(cheetah)) == True\nnot knows(something, defense_plan, tilapia) == True\nwink(something, octopus) = rule2(something)\nwink(something, octopus) == True\nwink(aardvark, sheep) == True\nwink(canary, sheep) == False\nnot learns(sheep, basics_of_resource_management_from(cheetah)) = rule3()\nnot learns(sheep, basics_of_resource_management_from(cheetah)) == True\nhas(sheep, something_to_sit_on) = rule4()\nhas(sheep, something_to_sit_on) == True\nnot knows(sheep, defense_plan, tilapia) == True\nquestion = True", "answer": 1, "code": "rule1() = has(sheep, card) and starts_with(color(card), \"b\") => learns(sheep, basics_of_resource_management_from(cheetah))\nrule2(something) = not learns(something, basics_of_resource_management_from(cheetah)) and not knows(something, defense_plan, tilapia) => wink(something, octopus)\nrule3() = wink(aardvark, sheep) and wink(canary, sheep) => not learns(sheep, basics_of_resource_management_from(cheetah))\nrule4() = has(sheep, something_to_sit_on) => not knows(sheep, defense_plan, tilapia)\norder(rule3) > order(rule1) = True\n\nwink(aardvark, sheep) = True\nhas(sheep, club_chair) = True\nwink(canary, sheep) = False\n\nquestion = wink(sheep, octopus)\n"}, {"idx": 384, "response": "same_number_of_points(ferret, oscar) == False\nproceed_to_spot(oscar, spot_after(sea_bass)) = rule3()\nproceed_to_spot(oscar, spot_after(sea_bass)) == True\nsteal(gecko, 5_points, caterpillar) = rule2()\nsteal(gecko, 5_points, caterpillar) == True\nnot give(caterpillar, magnifying_glass, amberjack) = rule2()\nnot give(caterpillar, magnifying_glass, amberjack) == False\ngive(caterpillar, magnifier, amberjack) = rule1()\ngive(caterpillar, magnifier, amberjack) == True\nquestion = True", "answer": 1, "code": "rule1() = proceed_to_spot(something, spot_after(sea_bass)) => give(caterpillar, magnifier, amberjack)\nrule2() = steal(gecko, 5_points, caterpillar) => not give(caterpillar, magnifying_glass, amberjack)\nrule3() = not same_number_of_points(ferret, oscar) => proceed_to_spot(oscar, spot_after(sea_bass))\norder(rule2) > order(rule1) = True\n\nsame_number_of_points(ferret, oscar) = False\n\nquestion = give(caterpillar, magnifier, amberjack)\n"}, {"idx": 385, "response": "name(hare, Bella) == True\nname(gecko, Teddy) == True\nfirst_letter_of(name(hare)) == first_letter_of(name(gecko)) = True\nsing_victory_song(hare, spider) = rule1()\nsing_victory_song(hare, spider) == True\ndifficulty_to_find_food(hare) = True\nsing_victory_song(hare, spider) == True\nnot show_cards(hare, meerkat) = True\nraise_flag_of_peace(hare, hippopotamus) = rule3()\nraise_flag_of_peace(hare, hippopotamus) == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(hare)) == first_letter_of(name(gecko)) => sing_victory_song(hare, spider)\nrule2() = not respect(baboon, hare) => not raise_flag_of_peace(hare, hippopotamus)\nrule3() = sing_victory_song(something, spider) & not show_cards(something, meerkat) => raise_flag_of_peace(something, hippopotamus)\nrule4() = first_letter_of(name(baboon)) == first_letter_of(name(elephant)) => not respect(baboon, hare)\nrule5() = difficulty_to_find_food(hare) => sing_victory_song(hare, spider)\norder(rule3) > order(rule2) = True\n\nname(baboon, Lucy) = True\nname(elephant, Lola) = True\nname(gecko, Teddy) = True\nname(hare, Bella) = True\ndifficulty_to_find_food(hare) = True\n\nquestion = raise_flag_of_peace(hare, hippopotamus)\n"}, {"idx": 386, "response": "friends(elephant) = 1\nfriends(elephant) < 4 = True\nprepare_armor(elephant, canary) = rule1()\nprepare_armor(elephant, canary) == True\ndifficulty_finding_food(elephant) = True\nnot prepare_armor(elephant, canary) = rule3()\nnot prepare_armor(elephant, canary) == False\nnot prepare_armor(elephant, canary) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(elephant) < 4 => prepare_armor(elephant, canary)\nrule2() = belief(elephant_burns_warehouse(canary)) & belief(cockroach_attacks_green_fields(canary)) => add_conclusion(\"the canary prepares armor for the panther\")\nrule3() = difficulty_finding_food(elephant) => not prepare_armor(elephant, canary)\nrule4(something) = not sing_victory_song(something, dog) => attack_green_fields(something, canary)\norder(rule1) > order(rule3) = True\n\nfriends(elephant) = 1\ndifficulty_finding_food(elephant) = True\nsing_victory_song(cockroach, dog) = False\n\nquestion = prepare_armor(canary, panther)\n"}, {"idx": 387, "response": "has(squid, card) == True\ncolor(card, white) == True\nhas(squid, card) and color(card) in flag_of_italy_colors = True\nroll_dice(squid, whale) = rule3()\nroll_dice(squid, whale) == True\nfriends(squid) > 14 = False\nnot roll_dice(squid, whale) = rule2()\nnot roll_dice(squid, whale) == False\nrespect(squid, canary) = rule1()\nrespect(squid, canary) == True\nquestion = True", "answer": 1, "code": "rule1(something) = saw(something, roll_dice, whale) => respect(something, canary)\nrule2() = friends(squid) > 14 => not roll_dice(squid, whale)\nrule3() = has(squid, card) and color(card) in flag_of_italy_colors => roll_dice(squid, whale)\nrule4() = has(squid, internet_device) => not roll_dice(squid, whale)\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule3) = True\n\nbald_friends(squid) = 5\nnon_bald_friends(squid) = 3\nhas(squid, card) = True\ncolor(card, white) = True\n\nquestion = respect(squid, canary)\n"}, {"idx": 388, "response": "has(octopus, card) == True\ncolor(card, green) == True\ncolor(card) in primary_colors == True\nraise_flag_of_peace(octopus, cheetah) = rule1()\nraise_flag_of_peace(octopus, cheetah) == True\nraise_flag_of_peace(octopus, cheetah) == True\nnot sing_song_of_victory(tilapia, starfish) = rule4()\nsing_song_of_victory(tilapia, starfish) == False\nnot sing_song_of_victory(tilapia, starfish) == False\nquestion = False", "answer": -1, "code": "rule1() = has(octopus, card) and color(card) in primary_colors => raise_flag_of_peace(octopus, cheetah)\nrule2() = has(octopus, leafy_green_vegetable) => raise_flag_of_peace(octopus, cheetah)\nrule3() = burns_warehouse(something, salmon) & proceeds_to_right(something, spot_of(doctorfish)) => not raise_flag_of_peace(something, cheetah)\nrule4() = raise_flag_of_peace(something, cheetah) => not sing_song_of_victory(tilapia, starfish)\nrule5() = roll_dice(something, panther) => roll_dice(squid, tilapia)\nrule6() = raise_flag_of_peace(something, halibut) => owe_money(sheep, tilapia)\nrule7() = not raise_flag_of_peace(eel, squid) => not roll_dice(squid, tilapia)\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule2) = True\norder(rule5) > order(rule7) = True\n\nburns_warehouse(octopus, salmon) = True\nhas(octopus, card) = True\ncolor(card, green) = True\nhas(octopus, cello) = True\nraise_flag_of_peace(polar_bear, halibut) = True\nraise_flag_of_peace(eel, squid) = False\n\nquestion = sing_song_of_victory(tilapia, starfish)\n"}, {"idx": 389, "response": "question = unknown", "answer": 0, "code": "rule1() = become_enemy(something, sun_bear) => eat_food(salmon, food_of(eel))\nrule2() = first_letter_of(name(catfish)) == first_letter_of(name(aardvark)) => become_enemy(catfish, sun_bear)\n\nname(aardvark, Tessa) = True\nname(catfish, Pashmak) = True\n\nquestion = eat_food(salmon, food_of(eel))\n"}, {"idx": 390, "response": "has(panther, card) == True\ncolor(card, green) == True\ncolor(card) in primary_colors == True\nnot knock_down(panther, fortress, polar_bear) = rule2()\nnot knock_down(panther, fortress, polar_bear) == True\nnot knock_down(panther, fortress, polar_bear) == True\nnot become_enemy(panther, donkey) = rule3()\npoints(panther) == points(pig) == True\nnot become_enemy(panther, donkey) == False\nnot become_enemy(panther, donkey) == False\nquestion = False", "answer": -1, "code": "rule1(something) = not knock_down(something, fortress, polar_bear) => become_enemy(something, donkey)\nrule2() = has(panther, card) and color(card) in primary_colors => not knock_down(panther, fortress, polar_bear)\nrule3() = points(something) == points(pig) => not become_enemy(panther, donkey)\norder(rule3) > order(rule1) = True\n\nhas(panther, card) = True\ncolor(card, green) = True\n\nquestion = become_enemy(panther, donkey)\n"}, {"idx": 391, "response": "name(dog, Chickpea) == True\nname(doctorfish, Max) == True\nfirst_letter_of(name(dog)) == first_letter_of(name(doctorfish)) = True\nbecome_enemy(dog, goldfish) = rule1()\nbecome_enemy(dog, goldfish) == True\nprepare_armor(goldfish, pig) = not become_enemy(dog, goldfish)\nprepare_armor(goldfish, pig) == False\nprepare_armor(goldfish, pig) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(dog)) == first_letter_of(name(doctorfish)) => become_enemy(dog, goldfish)\nrule2() = created(dog, time_machine) => become_enemy(dog, goldfish)\nrule3() = become_enemy(dog, goldfish) => not prepare_armor(goldfish, pig)\n\nname(doctorfish, Max) = True\ncreated(dog, time_machine) = True\nname(dog, Chickpea) = True\ngive(ferret, magnifying_glass, dog) = True\n\nquestion = prepare_armor(goldfish, pig)\n"}, {"idx": 392, "response": "attacks(sheep, green_fields, owner(baboon)) == True\nneeds_support(tiger, turtle) = rule1()\nneeds_support(tiger, turtle) == True\nbelieves(tiger, needs_support(turtle)) = True\npoints(kangaroo) != points(turtle) == True\nadd_conclusion(\"the turtle rolls the dice for the ferret\") = rule2()\nadd_conclusion(\"the turtle rolls the dice for the ferret\") == True\nnot knock_down(eagle, fortress(kangaroo)) = rule3()\nnot knock_down(eagle, fortress(kangaroo)) == True\npoints(kangaroo) != points(turtle) == True\nquestion = True", "answer": 1, "code": "rule1() = attacks(something, green_fields, owner(baboon)) => needs_support(tiger, turtle)\nrule2() = believes(tiger, needs_support(turtle)) & points(kangaroo) != points(turtle) => add_conclusion(\"the turtle rolls the dice for the ferret\")\nrule3() = not knock_down(eagle, fortress(kangaroo)) => points(kangaroo) != points(turtle)\n\nknows(kangaroo, defensive_plans, catfish) = True\nattacks(sheep, green_fields, owner(baboon)) = True\nnot give(eagle, magnifying_glass, kangaroo) = True\n\nquestion = \"the turtle rolls the dice for the ferret\" in conclusions\n"}, {"idx": 393, "response": "raise_flag_of_peace(kiwi, whale) == True\nprepare_armor(whale, grasshopper) = rule2()\nprepare_armor(whale, grasshopper) == True\nprepare_armor(something, grasshopper) = rule1()\nprepare_armor(something, grasshopper) == True\nknock_down(doctorfish, fortress, squirrel) = rule1()\nknock_down(doctorfish, fortress, squirrel) == True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(something, grasshopper) => knock_down(doctorfish, fortress, squirrel)\nrule2() = raise_flag_of_peace(kiwi, whale) => prepare_armor(whale, grasshopper)\n\nraise_flag_of_peace(kiwi, whale) = True\n\nquestion = knock_down(doctorfish, fortress, squirrel)\n"}, {"idx": 394, "response": "color(card(sheep), green) == True\nowes(sheep, $$$, wolverine) = rule1()\nowes(sheep, $$$, wolverine) == True\npoints(bat) == points(wolverine) = rule3()\npoints(bat) == points(wolverine) == True\npoints(bat) == points(wolverine) == True\nnot attack(green_fields(owner(goldfish))) = unknown\nquestion = unknown", "answer": 0, "code": "rule1() = starts_with(color(card(sheep)), \"g\") => owes(sheep, $$$, wolverine)\nrule2() = remove_from_board(something, piece(panther)) & give(something, magnifier, parrot) => points(something) == points(wolverine)\nrule3() = points(bat) == points(wolverine) & owes(sheep, $$$, wolverine) => not attack(green_fields(owner(goldfish)))\n\ngive(bat, magnifier, parrot) = True\nremove_from_board(bat, piece(panther)) = True\ncolor(card(sheep), green) = True\n\nquestion = attack(green_fields(owner(goldfish)))\n"}, {"idx": 395, "response": "needs_support(moose, cow) == True\nattack(ferret, green_fields, owner(hippopotamus)) = rule2()\nattack(ferret, green_fields, owner(hippopotamus)) == True\nsteal_points(ferret, 5, raven) = rule1(ferret)\nsteal_points(ferret, 5, raven) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not attack(something, green_fields, owner(hippopotamus)) => steal_points(something, 5, raven)\nrule2() = needs_support(something, cow) => attack(ferret, green_fields, owner(hippopotamus))\n\nneeds_support(moose, cow) = True\n\nquestion = steal_points(ferret, 5, raven)\n"}, {"idx": 396, "response": "name(squirrel, Luna) == True\nname(panther, Lily) == True\nfirst_letter_of(name(squirrel)) == first_letter_of(name(panther)) == True\nnot roll_dice(squirrel, turtle) = rule3()\nnot roll_dice(squirrel, turtle) == False\nnot roll_dice(squirrel, turtle) == False\nroll_dice(squirrel, elephant) = rule2()\nroll_dice(squirrel, elephant) == True\nnot show_all_cards(squid, squirrel) == False\nroll_dice(something, elephant) & not roll_dice(something, turtle) = rule4()\nroll_dice(something, elephant) & not roll_dice(something, turtle) == True\nraise_flag_of_peace(something, canary) = rule4()\nraise_flag_of_peace(something, canary) == True\nraise_flag_of_peace(something, canary) == True\nquestion = raise_flag_of_peace(squirrel, canary) == True", "answer": 1, "code": "rule1() = knocks_down(something, fortress(donkey)) => not raise_flag_of_peace(something, canary)\nrule2() = not show_all_cards(squid, squirrel) => roll_dice(squirrel, elephant)\nrule3() = first_letter_of(name(squirrel)) == first_letter_of(name(panther)) => not roll_dice(squirrel, turtle)\nrule4() = roll_dice(something, elephant) & not roll_dice(something, turtle) => raise_flag_of_peace(something, canary)\norder(rule1) > order(rule4) = True\n\nname(panther, Lily) = True\nname(squirrel, Luna) = True\nwink(squirrel, tiger) = True\nshow_all_cards(squid, squirrel) = False\n\nquestion = raise_flag_of_peace(squirrel, canary)\n"}, {"idx": 397, "response": "attacks(squirrel, green_fields, owner(buffalo)) == True\nattacks(something, green_fields, owner(buffalo)) == True\nwinks(lion, panda_bear) = rule5()\nwinks(lion, panda_bear) == True\nneeds_support(lion, panda_bear) = rule2()\nneeds_support(lion, panda_bear) == True\nneeds_support(lion, panda_bear) == True\nnot attack(green_fields, owner(phoenix)) = rule1()\nattack(green_fields, owner(phoenix)) == False\nattack(green_fields, owner(phoenix)) == False\nquestion = False", "answer": -1, "code": "rule1(something) = winks(something, panda_bear) & needs_support(something, panda_bear) => not attack(green_fields, owner(phoenix))\nrule2() = has(lion, leafy_green_vegetable) => needs_support(lion, panda_bear)\nrule3() = has(lion, card) & color(card) in colors_of(flag_of_Netherlands) => needs_support(lion, panda_bear)\nrule4(something) = respects(something, elephant) => burn_warehouse(something, viperfish)\nrule5() = attacks(something, green_fields, owner(buffalo)) => winks(lion, panda_bear)\nrule6() = friends(lion) < 5 => not needs_support(lion, panda_bear)\norder(rule2) > order(rule6) = True\norder(rule3) > order(rule6) = True\n\nrespects(grasshopper, elephant) = True\nfriends(lion) = 3\nhas(lion, card) = True\ncolor(card, blue) = True\nparked_bike(lion, front_of(store)) = True\nhas(lion, cutter) = True\nattacks(squirrel, green_fields, owner(buffalo)) = True\n\nquestion = attack(green_fields, owner(phoenix))\n"}, {"idx": 398, "response": "raise_flag_of_peace(cow, penguin) == True\nnot raise_flag_of_peace(cow, penguin) == False\nrespect(cow, panda_bear) = rule2(cow)\nrespect(cow, panda_bear) == True\nroll_dice(panda_bear, swordfish) = rule1()\nroll_dice(panda_bear, swordfish) == True\nquestion = True", "answer": 1, "code": "rule1() = respect(cow, panda_bear) => roll_dice(panda_bear, swordfish)\nrule2(something) = not raise_flag_of_peace(something, penguin) => respect(something, panda_bear)\nrule3(something) = proceed_to_spot_right_after(something, spider) => not roll_dice(something, swordfish)\norder(rule3) > order(rule1) = True\n\nraise_flag_of_peace(cow, penguin) = True\nprepare_armor(leopard, cow) = True\n\nquestion = roll_dice(panda_bear, swordfish)\n"}, {"idx": 399, "response": "burn_warehouse(phoenix, doctorfish) == True\nnot owe(phoenix, money, salmon) == True\nprepare_armor(phoenix, black_bear) = rule2()\nprepare_armor(phoenix, black_bear) == True\nremove_piece(black_bear, goldfish) = rule1()\nremove_piece(black_bear, goldfish) == True\nquestion = True", "answer": 1, "code": "rule1() = prepare_armor(phoenix, black_bear) => remove_piece(black_bear, goldfish)\nrule2() = burn_warehouse(something, doctorfish) & not owe(something, money, salmon) => prepare_armor(something, black_bear)\n\nburn_warehouse(phoenix, doctorfish) = True\nnot owe(phoenix, money, salmon) = True\n\nquestion = remove_piece(black_bear, goldfish)\n"}, {"idx": 400, "response": "has(tiger, card) == True\nstarts_with(color(card), \"l\") == False\nnot offer_job_position(tiger, crocodile) = rule4()\nnot offer_job_position(tiger, crocodile) == True\nname(tiger, Tango) == True\nname(aardvark, Tessa) == True\nfirst_letter_of(name(tiger)) == first_letter_of(name(aardvark)) = True\noffer_job_position(tiger, crocodile) = rule5()\noffer_job_position(tiger, crocodile) == True\npoints(crocodile) != points(spider) = rule3()\npoints(crocodile) != points(spider) == True\npoints(crocodile) == points(spider) == False\nquestion = False", "answer": -1, "code": "rule1() = has(tiger, carry_apples_and_oranges) => offer_job_position(tiger, crocodile)\nrule2() = has(tiger, sharp_object) => not offer_job_position(tiger, crocodile)\nrule3() = offer_job_position(tiger, crocodile) => points(crocodile) != points(spider)\nrule4() = has(tiger, card) and starts_with(color(card), \"l\") => not offer_job_position(tiger, crocodile)\nrule5() = first_letter_of(name(tiger)) == first_letter_of(name(aardvark)) => offer_job_position(tiger, crocodile)\norder(rule2) > order(rule1) = True\norder(rule2) > order(rule5) = True\norder(rule4) > order(rule1) = True\norder(rule4) > order(rule5) = True\n\nname(aardvark, Tessa) = True\nhas(tiger, card) = True\ncolor(card, blue) = True\nhas(tiger, computer) = True\nname(tiger, Tango) = True\n\nquestion = points(crocodile) == points(spider)\n"}, {"idx": 401, "response": "has(whale, plastic_bag) == True\nknows(whale, defensive_plans, sea_bass) = rule2()\nknows(whale, defensive_plans, sea_bass) == True\nknows(carp, defensive_plans, sea_bass) = rule1()\nknows(carp, defensive_plans, sea_bass) == True\nbecome_enemy(sea_bass, kangaroo) = rule3()\nbecome_enemy(sea_bass, kangaroo) == True\nquestion = True", "answer": 1, "code": "rule1() = knows(carp, defensive_plans, sea_bass) => not become_enemy(sea_bass, kangaroo)\nrule2() = has(whale, something_to_sit_on) => knows(whale, defensive_plans, sea_bass)\nrule3() = knows(whale, defensive_plans, sea_bass) => become_enemy(sea_bass, kangaroo)\norder(rule1) > order(rule3) = True\n\nhas(whale, plastic_bag) = True\n\nquestion = become_enemy(sea_bass, kangaroo)\n"}, {"idx": 402, "response": "belief(carp, learns(halibut, elementary_resource_management_from(carp))) == True\nwink(turtle, carp) == True\nadd_conclusion(\"the carp burns the warehouse that is in possession of the sheep\") = rule1()\nadd_conclusion(\"the carp burns the warehouse that is in possession of the sheep\") == True\nburns(something, warehouse(sheep)) = unknown\nneeds_support(moose, catfish) = rule2()\nneeds_support(moose, catfish) == True\nquestion = True", "answer": 1, "code": "rule1() = belief(carp, learns(halibut, elementary_resource_management_from(carp))) & wink(turtle, carp) => add_conclusion(\"the carp burns the warehouse that is in possession of the sheep\")\nrule2() = burns(something, warehouse(sheep)) => needs_support(moose, catfish)\n\nbelief(carp, learns(halibut, elementary_resource_management_from(carp))) = True\nwink(turtle, carp) = True\n\nquestion = needs_support(moose, catfish)\n"}, {"idx": 403, "response": "has(dog, card) == True\nstarts_with(color(card), \"n\") == False\nhas(dog, device_to_connect_to_internet) == False\nowes(dog, money, amberjack) = rule3()\nowes(dog, money, amberjack) == False\nowes(dog, money, amberjack) == False\npoints(lobster) != points(sun_bear) = rule1()\npoints(lobster) != points(sun_bear) == True\npoints(lobster) != points(sun_bear) == True\nquestion = False", "answer": -1, "code": "rule1() = owes(something, money, amberjack) => points(lobster) != points(sun_bear)\nrule2() = has(dog, card) and starts_with(color(card), \"n\") => owes(dog, money, amberjack)\nrule3() = has(dog, device_to_connect_to_internet) => owes(dog, money, amberjack)\n\nhas(dog, card) = True\ncolor(card, indigo) = True\nhas(dog, tablet) = True\n\nquestion = points(lobster) == points(sun_bear)\n"}, {"idx": 404, "response": "raise_flag_of_peace(starfish, swordfish) == True\noffer_job_position(cockroach, swordfish) == False\nnot owe(swordfish, $$$, eel) = rule1()\nnot owe(swordfish, $$$, eel) == True\nprepare_armor(eel, grasshopper) = rule2()\nprepare_armor(eel, grasshopper) == True\nquestion = True", "answer": 1, "code": "rule1() = raise_flag_of_peace(starfish, swordfish) & offer_job_position(cockroach, swordfish) => not owe(swordfish, $$$, eel)\nrule2() = not owe(swordfish, $$$, eel) => prepare_armor(eel, grasshopper)\n\npoints(mosquito) == points(swordfish) = True\nraise_flag_of_peace(starfish, swordfish) = True\noffer_job_position(cockroach, swordfish) = False\n\nquestion = prepare_armor(eel, grasshopper)\n"}, {"idx": 405, "response": "knows(sheep, defensive_plans, parrot) == True\nwink(meerkat, tiger) = rule1()\nwink(meerkat, tiger) == True\nremove(meerkat, piece, cow) = rule4()\nremove(meerkat, piece, cow) == True\nremove(meerkat, piece, baboon) = rule4()\nremove(meerkat, piece, baboon) == True\nquestion = True", "answer": 1, "code": "rule1() = knows(something, defensive_plans, parrot) => wink(meerkat, tiger)\nrule2() = has(meerkat, card) and starts_with(color(card), \"b\") => not remove(meerkat, piece, cow)\nrule3() = friends(meerkat) < 13 => not wink(meerkat, tiger)\nrule4() = wink(something, tiger) & remove(something, piece, cow) => remove(something, piece, baboon)\nrule5() = steal(rabbit, 5, points, meerkat) => remove(meerkat, piece, cow)\norder(rule2) > order(rule5) = True\norder(rule3) > order(rule1) = True\n\nsteal(rabbit, 5, points, meerkat) = True\nknows(sheep, defensive_plans, parrot) = True\n\nquestion = remove(meerkat, piece, baboon)\n"}, {"idx": 406, "response": "question = unknown", "answer": 0, "code": "rule1(something) = not learn(something, basics_of_resource_management, koala) => not steal_points(something, 5, crocodile)\nrule2() = steal_points(something, 5, crocodile) => not prepare_armor(carp, hare)\nrule3(something) = not remove_piece(something, catfish) => prepare_armor(something, hare)\nrule4() = not roll_dice(sheep, hummingbird) & not owe(salmon, money, hummingbird) => steal_points(hummingbird, 5, crocodile)\norder(rule1) > order(rule4) = True\norder(rule3) > order(rule2) = True\n\nowe(salmon, money, hummingbird) = False\nroll_dice(sheep, hummingbird) = False\n\nquestion = prepare_armor(carp, hare)\n"}, {"idx": 407, "response": "has(aardvark, saxophone) == True\nproceed_to_spot(aardvark, right_after_spot(baboon)) = rule4()\nproceed_to_spot(aardvark, right_after_spot(baboon)) == True\nnot become_enemy(aardvark, lion) = rule2()\nnot become_enemy(aardvark, lion) == True\nnot become_enemy(aardvark, lion) == True\npoints(aardvark) == points(buffalo) = rule5()\npoints(aardvark) == points(buffalo) == True\npoints(aardvark) == points(buffalo) == True\nquestion = True", "answer": 1, "code": "rule1(something) = sings_victory_song(something, donkey) => become_enemy(something, lion)\nrule2(something) = offer_job_position(something, turtle) => not become_enemy(something, lion)\nrule3() = owes_money(something, dog) => not proceed_to_spot(aardvark, right_after_spot(baboon))\nrule4() = has(aardvark, musical_instrument) => proceed_to_spot(aardvark, right_after_spot(baboon))\nrule5(something) = not become_enemy(something, lion) & proceed_to_spot(something, right_after_spot(baboon)) => points(something) == points(buffalo)\norder(rule1) > order(rule2) = True\norder(rule3) > order(rule4) = True\n\nhas(aardvark, saxophone) = True\nknock_down(aardvark, fortress, turtle) = True\n\nquestion = points(aardvark) == points(buffalo)\n"}, {"idx": 408, "response": "has(squirrel, musical_instrument) == False\nhas(squirrel, leafy_green_vegetable) == False\nhas(squirrel, sharp_object) == True\nnot show_all_cards(squirrel, elephant) = rule3()\nshow_all_cards(squirrel, elephant) == False\nremove_piece(elephant, black_bear) = rule4()\nremove_piece(elephant, black_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = has(squirrel, musical_instrument) => show_all_cards(squirrel, elephant)\nrule2() = has(squirrel, leafy_green_vegetable) => show_all_cards(squirrel, elephant)\nrule3() = has(squirrel, sharp_object) => not show_all_cards(squirrel, elephant)\nrule4() = show_all_cards(squirrel, elephant) => remove_piece(elephant, black_bear)\norder(rule1) > order(rule3) = True\norder(rule2) > order(rule3) = True\n\nhas(squirrel, backpack) = True\nhas(squirrel, basket) = True\nhas(squirrel, blade) = True\nhas(squirrel, spinach) = True\n\nquestion = remove_piece(elephant, black_bear)\n"}, {"idx": 409, "response": "has(eel, blade) == True\nhas(eel, sharp_object) == True\nnot roll_dice(eel, mosquito) = rule1()\nnot roll_dice(eel, mosquito) == True\nnot roll_dice(eel, mosquito) == True\nroll_dice(eel, viperfish) = rule3()\nroll_dice(eel, viperfish) == True\nroll_dice(eel, viperfish) == True\nnot learn_basics_of_resource_management(eel, bat) = rule2(eel)\nnot roll_dice(eel, mosquito) == True\nroll_dice(eel, viperfish) == True\nnot learn_basics_of_resource_management(eel, bat) == True\nquestion = True", "answer": 1, "code": "rule1() = has(eel, sharp_object) => not roll_dice(eel, mosquito)\nrule2(something) = not roll_dice(something, mosquito) & roll_dice(something, viperfish) => not learn_basics_of_resource_management(something, bat)\nrule3() = has(eel, card) and color(card) in rainbow_colors => roll_dice(eel, viperfish)\nrule4() = friends(eel) > 10 => roll_dice(eel, viperfish)\nrule5() = published(eel, high_quality_paper) => not roll_dice(eel, mosquito)\n\nadventurous_friends(eel) = 1\nnon_adventurous_friends(eel) = 1\nhas(eel, blade) = True\nhas(eel, card) = True\ncolor(card, red) = True\nhas(eel, piano) = True\nrecently_read(eel, high_quality_paper) = True\n\nquestion = learn_basics_of_resource_management(eel, bat)\n"}, {"idx": 410, "response": "friends(lion) = 12\nfriends(lion) > 9 = True\nsteal_points(lion, 5, cat) = rule1()\nsteal_points(lion, 5, cat) == True\nsing_victory_song(lion, crocodile) = rule5()\nsing_victory_song(lion, crocodile) == True\nraise_flag_of_peace(lion, catfish) = rule3()\nraise_flag_of_peace(lion, catfish) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(lion) > 9 => steal_points(lion, 5, cat)\nrule2() = points(buffalo) == points(oscar) => not wink(oscar, lion)\nrule3(something) = steal_points(something, 5, cat) & sing_victory_song(something, crocodile) => raise_flag_of_peace(something, catfish)\nrule4() = has(lion, card) and color(card) in flag_of_Japan_colors => steal_points(lion, 5, cat)\nrule5(something) = offer_job_position(something, oscar) => sing_victory_song(something, crocodile)\nrule6() = respect(swordfish, lion) & not prepare_armor(oscar, lion) => not raise_flag_of_peace(lion, catfish)\norder(rule3) > order(rule6) = True\n\npoints(buffalo) == points(oscar) = True\nfriends(lion) = 12\nhas(lion, card) = True\ncolor(card, black) = True\nnot offer_job_position(lion, oscar) = True\nnot roll_dice(oscar, squirrel) = True\n\nquestion = raise_flag_of_peace(lion, catfish)\n"}, {"idx": 411, "response": "has(catfish, romaine_lettuce) == True\nhas(catfish, leafy_green_vegetable) == True\nowes(catfish, money, sea_bass) = rule1()\nowes(catfish, money, sea_bass) == True\nfriends(tiger) = 9\nowes(tiger, money, sea_bass) = rule2()\nowes(tiger, money, sea_bass) == True\nowes(catfish, money, sea_bass) == True\nowes(tiger, money, sea_bass) == True\nknows(sea_bass, defensive_plans, gecko) = rule3()\nknows(sea_bass, defensive_plans, gecko) == True\nquestion = True", "answer": 1, "code": "rule1() = has(catfish, leafy_green_vegetable) => owes(catfish, money, sea_bass)\nrule2() = friends(tiger) < 10 => owes(tiger, money, sea_bass)\nrule3() = owes(catfish, money, sea_bass) & owes(tiger, money, sea_bass) => knows(sea_bass, defensive_plans, gecko)\nrule4() = attacks(something, green_fields, owner(whale)) => not owes(tiger, money, sea_bass)\nrule5() = first_letter_of(name(tiger)) == first_letter_of(name(hummingbird)) => owes(tiger, money, sea_bass)\norder(rule4) > order(rule2) = True\norder(rule4) > order(rule5) = True\n\nhas(catfish, romaine_lettuce) = True\nname(hummingbird, Milo) = True\nfriends(tiger) = 9\nname(tiger, Paco) = True\n\nquestion = knows(sea_bass, defensive_plans, gecko)\n"}, {"idx": 412, "response": "show_all_cards(parrot, grasshopper) == True\nsteal_points(dog, 5, rabbit) = rule2()\nsteal_points(dog, 5, rabbit) == True\nlearn(dog, elementary_resource_management, hippopotamus) = not steal_points(dog, 5, rabbit)\nlearn(dog, elementary_resource_management, hippopotamus) == not True\nlearn(dog, elementary_resource_management, hippopotamus) == False\nquestion = False", "answer": -1, "code": "rule1(something) = steal_points(something, 5, rabbit) => not learn(something, elementary_resource_management, hippopotamus)\nrule2() = show_all_cards(something, grasshopper) => steal_points(dog, 5, rabbit)\n\nshow_all_cards(parrot, grasshopper) = True\n\nquestion = learn(dog, elementary_resource_management, hippopotamus)\n"}, {"idx": 413, "response": "has(rabbit, musical_instrument) == False\nhas(rabbit, beer) == True\nnot burn_warehouse(rabbit, warehouse_of(snail)) == True\nhas(rabbit, blade) == True\nadventurous_friends(rabbit) = 1\nnon_adventurous_friends(rabbit) = 5\nname(rabbit, Charlie) == True\nstole(rabbit, bike, store) == True\neat_food(raven, food_of(rabbit)) == True\nname(tilapia, Peddi) == True\nfirst_letter_of(name(rabbit)) == first_letter_of(name(tilapia)) == True\nburn_warehouse(rabbit, warehouse_of(crocodile)) = rule1()\nburn_warehouse(rabbit, warehouse_of(crocodile)) == True\nsing_song_of_victory(rabbit, jellyfish) = rule2()\nsing_song_of_victory(rabbit, jellyfish) == True\nburn_warehouse(rabbit, warehouse_of(crocodile)) == True\nsing_song_of_victory(rabbit, jellyfish) == True\nbecome_enemy(rabbit, dog) = rule6()\nbecome_enemy(rabbit, dog) == True\nquestion = True", "answer": 1, "code": "rule1() = has(rabbit, musical_instrument) => burn_warehouse(rabbit, warehouse_of(crocodile))\nrule2() = fan_of(rabbit, Chris_Ronaldo) => sing_song_of_victory(rabbit, jellyfish)\nrule3() = first_letter_of(name(rabbit)) == first_letter_of(name(tilapia)) => burn_warehouse(rabbit, warehouse_of(crocodile))\nrule4(something) = prepare_armor(something, sheep) => not become_enemy(something, dog)\nrule5(something) = not burn_warehouse(something, warehouse_of(snail)) => respect(something, sheep)\nrule6() = burn_warehouse(something, warehouse_of(crocodile)) & sing_song_of_victory(something, jellyfish) => become_enemy(something, dog)\norder(rule6) > order(rule4) = True\n\nhas(rabbit, beer) = True\nnot burn_warehouse(rabbit, warehouse_of(snail)) = True\nhas(rabbit, blade) = True\nadventurous_friends(rabbit) = 1\nnon_adventurous_friends(rabbit) = 5\nname(rabbit, Charlie) = True\nstole(rabbit, bike, store) = True\neat_food(raven, food_of(rabbit)) = True\nname(tilapia, Peddi) = True\n\nquestion = become_enemy(rabbit, dog)\n"}, {"idx": 414, "response": "created(raven, time_machine) == True\noffer_job_position(raven, black_bear) = rule2()\noffer_job_position(raven, black_bear) == True\nknows(squirrel, defensive_plans, kangaroo) = rule1()\nknows(squirrel, defensive_plans, kangaroo) == True\nquestion = True", "answer": 1, "code": "rule1() = offer_job_position(something, black_bear) => knows(squirrel, defensive_plans, kangaroo)\nrule2() = created(raven, time_machine) => offer_job_position(raven, black_bear)\n\ncreated(raven, time_machine) = True\n\nquestion = knows(squirrel, defensive_plans, kangaroo)\n"}, {"idx": 415, "response": "has(leopard, blade) == True\nhas(leopard, sharp_object) == True\nneeds_support(leopard, panther) = rule1()\nneeds_support(leopard, panther) == True\nrespects(snail, lobster) == True\nrespects(raven, leopard) == True\nnot needs_support(leopard, panther) = rule3()\nnot needs_support(leopard, panther) == False\nnot needs_support(leopard, panther) == False\n\"the panther is not going to learn the basics of resource management from the jellyfish\" not in conclusions = True\nquestion = True", "answer": 1, "code": "rule1() = has(leopard, sharp_object) => needs_support(leopard, panther)\nrule2() = has(leopard, card) and starts_with(color(card), \"l\") => needs_support(leopard, panther)\nrule3() = respects(raven, leopard) => not needs_support(leopard, panther)\nrule4() = give(snail, magnifying_glass, panther) & needs_support(leopard, panther) => add_conclusion(\"the panther is not going to learn the basics of resource management from the jellyfish\")\nrule5() = remove(something, piece, wolverine) & respects(something, lobster) => give(something, magnifying_glass, panther)\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule2) = True\n\nhas(leopard, blade) = True\nhas(leopard, card) = True\ncolor(card, black) = True\nremove(snail, piece, wolverine) = True\nrespects(snail, lobster) = True\n\nquestion = \"the panther is going to learn the basics of resource management from the jellyfish\" not in conclusions\n"}, {"idx": 416, "response": "steal(moose, 5, points, aardvark) == True\nattack(moose, green_fields, sheep) = rule1()\nattack(moose, green_fields, sheep) == True\npoints(moose) == points(sheep) = rule2()\npoints(moose) == points(sheep) == False\npoints(moose) == points(sheep) == False\nshow_cards(moose, all, squirrel) = rule2()\nshow_cards(moose, all, squirrel) == True\nquestion = True", "answer": 1, "code": "rule1() = remove(something, piece, crocodile) & steal(something, 5, points, aardvark) => attack(something, green_fields, sheep)\nrule2(something) = points(something) == points(sheep) => show_cards(something, all, squirrel)\nrule3() = burn(snail, warehouse, moose) & not burn(catfish, warehouse, moose) => points(moose) == points(sheep)\nrule4(something) = attack(something, green_fields, owner(sheep)) => not show_cards(something, all, squirrel)\nrule5() = first_letter_of(name(moose)) == first_letter_of(name(parrot)) => points(moose) != points(sheep)\nrule6() = has(moose, carry, apples) & has(moose, carry, oranges) => points(moose) != points(sheep)\nrule7(something) = not prepare_armor(something, zander) => not attack(something, green_fields, owner(sheep))\norder(rule1) > order(rule7) = True\norder(rule2) > order(rule4) = True\norder(rule5) > order(rule3) = True\norder(rule6) > order(rule3) = True\n\nname(moose, Lola) = True\nsteal(moose, 5, points, aardvark) = True\nprepare_armor(moose, zander) = False\nname(parrot, Meadow) = True\nknows(snail, defensive_plans, moose) = True\nburn(catfish, warehouse, moose) = False\nremove(moose, piece, crocodile) = False\n\nquestion = show_cards(moose, all, squirrel)\n"}, {"idx": 417, "response": "proceeds_to_spot_right_after(dog, panda_bear) == True\nnot sing_victory_song(dog, penguin) == True\nsing_victory_song(dog, sea_bass) = rule1()\nsing_victory_song(dog, sea_bass) == True\nknocks_down_fortress(aardvark, sea_bass) = rule3()\nknocks_down_fortress(aardvark, sea_bass) == True\nowe(sea_bass, money, blobfish) = rule2()\nowe(sea_bass, money, blobfish) == True\nquestion = True", "answer": 1, "code": "rule1(something) = proceeds_to_spot_right_after(something, panda_bear) & not sing_victory_song(something, penguin) => sing_victory_song(something, sea_bass)\nrule2() = sing_victory_song(dog, sea_bass) & knocks_down_fortress(aardvark, sea_bass) => owe(sea_bass, money, blobfish)\nrule3() = offer_job_position(cat, aardvark) => knocks_down_fortress(aardvark, sea_bass)\n\noffer_job_position(cat, aardvark) = True\nproceeds_to_spot_right_after(dog, panda_bear) = True\nnot sing_victory_song(dog, penguin) = True\nshow_all_cards(kiwi, tiger) = True\n\nquestion = owe(sea_bass, money, blobfish)\n"}, {"idx": 418, "response": "prepare_armor(amberjack, cat) == True\nneeds_support(buffalo, cat) == True\nnot eat_food(cat, food_of(halibut)) = rule2()\nnot eat_food(cat, food_of(halibut)) == True\nnot eat_food(cat, food_of(halibut)) == True\nhold_same_points(cat, carp) = rule1()\nhold_same_points(cat, carp) == False\nhold_same_points(cat, carp) == False\nquestion = False", "answer": -1, "code": "rule1(something) = not eat_food(something, food_of(halibut)) => not hold_same_points(something, carp)\nrule2() = needs_support(buffalo, cat) & prepare_armor(amberjack, cat) => not eat_food(cat, food_of(halibut))\n\nprepare_armor(amberjack, cat) = True\nneeds_support(buffalo, cat) = True\n\nquestion = hold_same_points(cat, carp)\n"}, {"idx": 419, "response": "rolls_dice(black_bear, doctorfish) == True\nraise_flag_of_peace(black_bear, buffalo) == True\nburn_warehouse(buffalo, puffin) = rule4()\nburn_warehouse(buffalo, puffin) == True\nquestion = True", "answer": 1, "code": "rule1(something) = rolls_dice(something, doctorfish) => raise_flag_of_peace(something, buffalo)\nrule2(something) = not sing_victory_song(something, leopard) => not burn_warehouse(something, puffin)\nrule3(something) = become_enemy(something, koala) & attacks(something, green_fields, owner(cricket)) => sing_victory_song(something, leopard)\nrule4() = rolls_dice(panda_bear, buffalo) & raise_flag_of_peace(black_bear, buffalo) => burn_warehouse(buffalo, puffin)\nrule5(something) = attacks(something, green_fields, owner(elephant)) => rolls_dice(something, buffalo)\nrule6() = has(panda_bear, carry(apples)) & has(panda_bear, carry(oranges)) => not rolls_dice(panda_bear, buffalo)\norder(rule4) > order(rule2) = True\norder(rule5) > order(rule6) = True\n\nrolls_dice(black_bear, doctorfish) = True\nattacks(buffalo, green_fields, owner(cricket)) = True\nbecome_enemy(buffalo, koala) = True\nattacks(panda_bear, green_fields, owner(elephant)) = False\n\nquestion = burn_warehouse(buffalo, puffin)\n"}, {"idx": 420, "response": "has(aardvark, club_chair) == True\nhas(aardvark, something_to_sit_on) == True\nnot sing_song_of_victory(aardvark, tilapia) = rule1()\nnot sing_song_of_victory(aardvark, tilapia) == True\nnot sing_song_of_victory(aardvark, tilapia) == True\nproceed_to_spot_right_after(aardvark, dog) = rule2(aardvark)\nproceed_to_spot_right_after(aardvark, dog) == True\nproceed_to_spot_right_after(aardvark, dog) == True\nquestion = True", "answer": 1, "code": "rule1() = has(aardvark, something_to_sit_on) => not sing_song_of_victory(aardvark, tilapia)\nrule2(something) = not sing_song_of_victory(something, tilapia) => proceed_to_spot_right_after(dog)\n\nfriends(aardvark) = 12\nhas(aardvark, club_chair) = True\nstole(aardvark, bike, store) = True\n\nquestion = proceed_to_spot_right_after(aardvark, dog)\n"}, {"idx": 421, "response": "question = unknown", "answer": 0, "code": "rule1() = owes(something, money, cricket) => not know(panda_bear, defensive_plans, wolverine)\nrule2() = sings(mosquito, victory_song, goldfish) => owes(goldfish, money, cricket)\nrule3(something) = not know(something, defensive_plans, whale) & needs_support(something, salmon) => not show_cards(something, all, squid)\nrule4(something) = show_cards(something, all, squid) => know(something, defensive_plans, wolverine)\nrule5() = works_fewer_hours(panda_bear) => show_cards(panda_bear, all, squid)\norder(rule1) > order(rule4) = True\norder(rule3) > order(rule5) = True\n\nsings(mosquito, victory_song, goldfish) = True\nneeds_support(panda_bear, salmon) = True\nworks_fewer_hours(panda_bear) = True\n\nquestion = know(panda_bear, defensive_plans, wolverine)\n"}, {"idx": 422, "response": "name(grizzly_bear, Beauty) == True\nfirst_letter_of(name(turtle)) == first_letter_of(name(grizzly_bear)) == True\nnot eat(turtle, food_of(cheetah)) = rule2()\nnot eat(turtle, food_of(cheetah)) == False\nnot eat(turtle, food_of(cheetah)) == False\neat(buffalo, food_of(cheetah)) = False\nnot remove_from_board(cheetah, piece_of_whale) = rule3()\nnot remove_from_board(cheetah, piece_of_whale) == False\nnot remove_from_board(cheetah, piece_of_whale) == False\nquestion = False", "answer": -1, "code": "rule1(something) = not sing(something, song_of_victory, aardvark) => remove_from_board(something, piece_of_whale)\nrule2() = first_letter_of(name(turtle)) == first_letter_of(name(grizzly_bear)) => not eat(turtle, food_of(cheetah))\nrule3() = not eat(turtle, food_of(cheetah)) & eat(buffalo, food_of(cheetah)) => not remove_from_board(cheetah, piece_of_whale)\nrule4() = friends(cheetah) < 12 => sing(cheetah, song_of_victory, aardvark)\nrule5() = friends(turtle) < 4 => eat(turtle, food_of(cheetah))\nrule6() = not has(turtle, keys) => not eat(turtle, food_of(cheetah))\norder(rule2) > order(rule5) = True\norder(rule3) > order(rule1) = True\norder(rule6) > order(rule5) = True\n\nmean_friends(cheetah) = 1\nnon_mean_friends(cheetah) = 1\nlearn(cheetah, basics_of_resource_management, oscar) = False\nraise_flag_of_peace(cheetah, moose) = False\nname(grizzly_bear, Beauty) = True\neasy_going_friends(turtle) = 2\nnon_easy_going_friends(turtle) = 1\nhas(turtle, keys) = True\n\nquestion = remove_from_board(cheetah, piece_of_whale)\n"}, {"idx": 423, "response": "raise_flag_of_peace(dog, polar_bear) == True\nraise_flag_of_peace(something, polar_bear) = rule2()\nraise_flag_of_peace(something, polar_bear) == True\nroll_dice(cat, hippopotamus) = rule2()\nroll_dice(cat, hippopotamus) == True\noffer_job_position(goldfish, catfish) = rule1()\noffer_job_position(goldfish, catfish) == True\nquestion = True", "answer": 1, "code": "rule1() = roll_dice(something, hippopotamus) => offer_job_position(goldfish, catfish)\nrule2() = raise_flag_of_peace(something, polar_bear) => roll_dice(cat, hippopotamus)\n\nraise_flag_of_peace(dog, polar_bear) = True\n\nquestion = offer_job_position(goldfish, catfish)\n"}, {"idx": 424, "response": "took(squid, bike, store) == True\nknows(squid, defensive_plans, sea_bass) = rule1()\nknows(squid, defensive_plans, sea_bass) == True\nknock_down(squid, fortress_of(baboon)) = rule5()\nknock_down(squid, fortress_of(baboon)) == not (eat_food(eagle, food_of(squid)) & roll_dice(panther, squid))\nknock_down(squid, fortress_of(baboon)) == not (eat_food(eagle, food_of(squid)) & roll_dice(panther, squid))\neat_food(eagle, food_of(squid)) = rule2()\neat_food(eagle, food_of(squid)) == False\nroll_dice(panther, squid) = rule6()\nroll_dice(panther, squid) == False\nknock_down(squid, fortress_of(baboon)) == not (False & False)\nknock_down(squid, fortress_of(baboon)) == not (False)\nknock_down(squid, fortress_of(baboon)) == True\nquestion = True", "answer": 1, "code": "rule1() = took(squid, bike, store) => knows(squid, defensive_plans, sea_bass)\nrule2() = friends(eagle) < 9 => eat_food(eagle, food_of(squid))\nrule3() = has(eagle, abundance_of_food) => eat_food(eagle, food_of(squid))\nrule4(something) = steal_points(something, 5, doctorfish) => not knows(something, defensive_plans, sea_bass)\nrule5() = eat_food(eagle, food_of(squid)) & roll_dice(panther, squid) => not knock_down(squid, fortress_of(baboon))\nrule6() = first_letter_of(name(panther)) == first_letter_of(name(cricket)) => roll_dice(panther, squid)\nrule7() = has(squid, card) and starts_with(color(card), \"y\") => eat_food(squid, food_of(buffalo))\norder(rule4) > order(rule1) = True\n\nname(cricket, Lily) = True\nbald_friends(eagle) = 1\nnon_bald_friends(eagle) = 2\nstruggles_to_find_food(eagle) = True\nname(panther, Lola) = True\nroll_dice(panther, aardvark) = False\nhas(squid, card) = True\ncolor(card, yellow) = True\ntook(squid, bike, store) = True\n\nquestion = knock_down(squid, fortress_of(baboon))\n"}, {"idx": 425, "response": "name(blobfish, Milo) == True\nname(viperfish, Mojo) == True\nfirst_letter_of(name(blobfish)) == first_letter_of(name(viperfish)) = True\nnot burn(blobfish, warehouse, koala) = rule1()\nburn(blobfish, warehouse, koala) == False\nnot burn(blobfish, warehouse, koala) == True\nhas(lobster, high_quality_paper) == True\nattack(lobster, green_fields, koala) = rule2()\nattack(lobster, green_fields, koala) == True\nknock_down(lobster, fortress, koala) = unknown\nnot burn(blobfish, warehouse, koala) == True\nshow_cards(koala, all_cards, mosquito) = rule3()\nshow_cards(koala, all_cards, mosquito) == unknown\nquestion = unknown", "answer": 0, "code": "rule1() = first_letter_of(name(blobfish)) == first_letter_of(name(viperfish)) => not burn(blobfish, warehouse, koala)\nrule2() = has(lobster, high_quality_paper) => attack(lobster, green_fields, koala)\nrule3() = knock_down(lobster, fortress, koala) & not burn(blobfish, warehouse, koala) => show_cards(koala, all_cards, mosquito)\n\nname(blobfish, Milo) = True\nhas(lobster, high_quality_paper) = True\nname(viperfish, Mojo) = True\n\nquestion = show_cards(koala, all_cards, mosquito)\n"}, {"idx": 426, "response": "friends(oscar) = 1\nfriends(oscar) > 11 = False\nnot knock_down(oscar, fortress, eagle) = rule1()\nnot knock_down(oscar, fortress, eagle) == True\nknock_down(something, fortress, eagle) = rule2()\ngive(mosquito, magnifying_glass, panther) = rule2()\ngive(mosquito, magnifying_glass, panther) == True\nquestion = True", "answer": 1, "code": "rule1() = friends(oscar) > 11 => not knock_down(oscar, fortress, eagle)\nrule2() = knock_down(something, fortress, eagle) => give(mosquito, magnifying_glass, panther)\nrule3() = not respect(snail, oscar) & not knock_down(hummingbird, fortress, oscar) => knock_down(oscar, fortress, eagle)\nrule4() = first_letter_of(name(oscar)) == first_letter_of(name(snail)) => not knock_down(oscar, fortress, eagle)\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule3) = True\n\nfriends(oscar) = 1\nname(snail, Lola) = True\nknock_down(hummingbird, fortress, oscar) = False\nrespect(snail, oscar) = False\n\nquestion = give(mosquito, magnifying_glass, panther)\n"}, {"idx": 427, "response": "offer_job_position(goldfish, hummingbird) == True\noffer_job_position(rabbit, carp) == True\nraise_flag_of_peace(carp, kangaroo) = rule3()\nraise_flag_of_peace(carp, kangaroo) == True\nnot eat_food(carp, food_of(eagle)) = rule2(carp)\nnot eat_food(carp, food_of(eagle)) == False\nraise_flag_of_peace(carp, kangaroo) == True\nnot eat_food(carp, food_of(koala)) = rule4(carp)\nnot eat_food(carp, food_of(koala)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = points(something) == points(gecko) => not raise_flag_of_peace(carp, kangaroo)\nrule2(something) = offer_job_position(something, hummingbird) => not eat_food(carp, food_of(eagle))\nrule3() = offer_job_position(rabbit, carp) => raise_flag_of_peace(carp, kangaroo)\nrule4(something) = not eat_food(something, food_of(eagle)) & raise_flag_of_peace(something, kangaroo) => not eat_food(something, food_of(koala))\norder(rule1) > order(rule3) = True\n\noffer_job_position(goldfish, hummingbird) = True\noffer_job_position(rabbit, carp) = True\n\nquestion = eat_food(carp, food_of(koala))\n"}, {"idx": 428, "response": "remove(blobfish, piece, elephant) == True\neat(elephant, food, kiwi) = rule1()\neat(elephant, food, kiwi) == True\nshow_all_cards(something, kiwi) = True\npoints(buffalo) == points(cricket) = rule2()\npoints(buffalo) == points(cricket) == True\nquestion = True", "answer": 1, "code": "rule1() = remove(blobfish, piece, elephant) => eat(elephant, food, kiwi)\nrule2() = show_all_cards(something, kiwi) => points(buffalo) == points(cricket)\n\nremove(blobfish, piece, elephant) = True\nhas(elephant, card) = True\ncolor(card, red) = True\nholding(elephant, keys) = True\n\nquestion = points(buffalo) == points(cricket)\n"}, {"idx": 429, "response": "name(catfish, Paco) == True\nname(goldfish, Tarzan) == True\nname(wolverine, Teddy) == True\nname(panther, Pashmak) == True\nfriends(grizzly_bear) < 10 = True\nfriends(grizzly_bear) = 7\nprepare_armor(grizzly_bear, squid) = rule1()\nprepare_armor(grizzly_bear, squid) == False\nprepare_armor(grizzly_bear, squid) == False\nhas(panther, card) == True\ncolor(card, indigo) == True\nnot give(panther, magnifying_glass, squid) = rule3()\ngive(panther, magnifying_glass, squid) == False\nnot give(panther, magnifying_glass, squid) == False\nhas(goldfish, card) == True\ncolor(card, orange) == True\nstarts_with(color(card), \"r\") = False\nnot attack(goldfish, green_fields, squid) = rule6()\nattack(goldfish, green_fields, squid) == True\nnot attack(goldfish, green_fields, squid) == False\nrespect(squid, elephant) = unknown\nquestion = unknown", "answer": 0, "code": "rule1() = friends(grizzly_bear) < 10 => prepare_armor(grizzly_bear, squid)\nrule2() = first_letter_of(name(goldfish)) == first_letter_of(name(wolverine)) => not attack(goldfish, green_fields, squid)\nrule3() = first_letter_of(name(panther)) == first_letter_of(name(catfish)) => not give(panther, magnifying_glass, squid)\nrule4() = has(panther, card) and color(card) in colors_of_italian_flag => give(panther, magnifying_glass, squid)\nrule5(something) = learn(something, basics_of_resource_management_from(amberjack)) & prepare_armor(something, bat) => not prepare_armor(something, squid)\nrule6() = has(goldfish, card) and starts_with(color(card), \"r\") => not attack(goldfish, green_fields, squid)\nrule7() = friends(panther) < 11 => give(panther, magnifying_glass, squid)\nrule8() = owns(goldfish, luxury_aircraft) => attack(goldfish, green_fields, squid)\nrule9() = not attack(goldfish, green_fields, squid) => respect(squid, elephant)\norder(rule4) > order(rule3) = True\norder(rule5) > order(rule1) = True\norder(rule7) > order(rule3) = True\norder(rule8) > order(rule2) = True\norder(rule8) > order(rule6) = True\n\nname(catfish, Paco) = True\nhas(goldfish, card) = True\ncolor(card, orange) = True\nname(goldfish, Tarzan) = True\nfriends(grizzly_bear) = 7\nlearn(grizzly_bear, basics_of_resource_management_from(amberjack)) = True\nprepare_armor(grizzly_bear, bat) = True\nhas(panther, card) = True\ncolor(card, indigo) = True\nbald_friends(panther) = 2\nnon_bald_friends(panther) = 5\nname(panther, Pashmak) = True\nname(wolverine, Teddy) = True\n\nquestion = respect(squid, elephant)\n"}, {"idx": 430, "response": "has(lion, card) == True\ncolor(card, indigo) == True\ncolor(card) in primary_colors == False\nroll_dice(lion, cat) = rule1()\nroll_dice(lion, cat) == True\nwink(eagle, squid) == True\nlearn(squid, elementary_resource_management, cat) = rule3()\nlearn(squid, elementary_resource_management, cat) == True\ndifficulty_finding_food(squid) = rule4()\ndifficulty_finding_food(squid) == False\nlearn(squid, basics_of_resource_management, cat) == True\nknow(cat, defensive_plans, zander) = rule5()\nknow(cat, defensive_plans, zander) == False\nquestion = False", "answer": -1, "code": "rule1() = has(lion, card) and color(card) in primary_colors => roll_dice(lion, cat)\nrule2() = owns(lion, luxury_aircraft) => roll_dice(lion, cat)\nrule3() = wink(eagle, squid) => learn(squid, elementary_resource_management, cat)\nrule4() = difficulty_finding_food(squid) => not learn(squid, elementary_resource_management, cat)\nrule5() = learn(squid, basics_of_resource_management, cat) & roll_dice(lion, cat) => not know(cat, defensive_plans, zander)\norder(rule4) > order(rule3) = True\n\nwink(eagle, squid) = True\nhas(lion, card) = True\ncolor(card, indigo) = True\nowns(lion, luxury_aircraft) = True\n\nquestion = know(cat, defensive_plans, zander)\n"}, {"idx": 431, "response": "not roll_dice(kiwi, whale) == True\nnot roll_dice(something, whale) == True\ngive(something, magnifying_glass, puffin) = rule1()\ngive(something, magnifying_glass, puffin) == True\nnot give(kiwi, magnifying_glass, puffin) == True\nhas_access(kiwi, abundance_of_food) = True\nnot give(kiwi, magnifying_glass, puffin) == True\nowe(something, money, puffin) = rule3()\nowe(something, money, puffin) == False\nowe(something, money, puffin) == False\nnot owe(crocodile, money, puffin) = rule4()\nnot owe(crocodile, money, puffin) == True\nnot owe(crocodile, money, puffin) == True\nnot give(kiwi, magnifying_glass, puffin) == True\neat(puffin, food_of(doctorfish)) = rule5()\neat(puffin, food_of(doctorfish)) == False\neat(puffin, food_of(doctorfish)) == False\nquestion = False", "answer": -1, "code": "rule1(something) = not roll_dice(something, whale) => give(something, magnifying_glass, puffin)\nrule2() = has_access(kiwi, abundance_of_food) => not give(kiwi, magnifying_glass, puffin)\nrule3(something) = give(something, magnifying_glass, squirrel) => owe(something, money, puffin)\nrule4() = has(crocodile, device_to_connect_to_internet) => not owe(crocodile, money, puffin)\nrule5() = owe(crocodile, money, puffin) & not give(kiwi, magnifying_glass, puffin) => eat(puffin, food_of(doctorfish))\nrule6() = friends(kiwi) > 6 => not give(kiwi, magnifying_glass, puffin)\nrule7() = purchased(crocodile, time_machine) => not owe(crocodile, money, puffin)\nrule8(something) = learn(something, elementary_resource_management_from(eagle)) => not eat(something, food_of(doctorfish))\norder(rule2) > order(rule1) = True\norder(rule3) > order(rule4) = True\norder(rule3) > order(rule7) = True\norder(rule6) > order(rule1) = True\norder(rule8) > order(rule5) = True\n\nhas(crocodile, computer) = True\ninvented(crocodile, time_machine) = True\nnot give(crocodile, magnifying_glass, squirrel) = True\nfriends(kiwi) = 7\nstruggles_to_find_food(kiwi) = True\nnot roll_dice(kiwi, whale) = True\n\nquestion = eat(puffin, food_of(doctorfish))\n"}, {"idx": 432, "response": "color(card, orange) == True\nstarts_with(color(card, \"r\")) == False\nowe(raven, money, doctorfish) = rule1()\nowe(raven, money, doctorfish) == False\nowe(raven, money, doctorfish) == False\nfriends(raven) = 8\nowe(raven, money, doctorfish) = rule3()\nowe(raven, money, doctorfish) == True\nbecome_enemy(raven, tilapia) = rule2()\nbecome_enemy(raven, tilapia) == True\nquestion = True", "answer": 1, "code": "rule1() = starts_with(color(card, \"r\")) => owe(raven, money, doctorfish)\nrule2(something) = owe(something, money, doctorfish) => become_enemy(something, tilapia)\nrule3() = friends(raven) > 1 => owe(raven, money, doctorfish)\n\ncolor(card, orange) = True\nfriends(raven) = 8\n\nquestion = become_enemy(raven, tilapia)\n"}, {"idx": 433, "response": "has(grizzly_bear, sharp_object) == False\nburn_warehouse(grizzly_bear, buffalo) = rule1()\nburn_warehouse(grizzly_bear, buffalo) == False\nnot burn_warehouse(grizzly_bear, buffalo) == True\nnot prepare_armor(grizzly_bear, octopus) == True\nnot roll_dice(grizzly_bear, sun_bear) == True\nburn_warehouse(grizzly_bear, buffalo) = rule4()\nburn_warehouse(grizzly_bear, buffalo) == True\nnot sing_song_of_victory(grizzly_bear, ferret) = rule5()\nsing_song_of_victory(grizzly_bear, ferret) == False\nnot sing_song_of_victory(grizzly_bear, ferret) == True\nquestion = True", "answer": 1, "code": "rule1() = has(grizzly_bear, sharp_object) => not burn_warehouse(grizzly_bear, buffalo)\nrule2() = first_letter_of(name(grizzly_bear)) == first_letter_of(name(dog)) => not become_enemy(grizzly_bear, squid)\nrule3() = took(grizzly_bear, bike, store) => become_enemy(grizzly_bear, squid)\nrule4(something) = not prepare_armor(something, octopus) & not roll_dice(something, sun_bear) => burn_warehouse(something, buffalo)\nrule5(something) = burn_warehouse(something, buffalo) => not sing_song_of_victory(something, ferret)\norder(rule3) > order(rule2) = True\norder(rule4) > order(rule1) = True\n\nname(dog, Blossom) = True\nname(grizzly_bear, Beauty) = True\nhas(grizzly_bear, cell_phone) = True\nhas(grizzly_bear, couch) = True\nnot prepare_armor(grizzly_bear, octopus) = True\nnot roll_dice(grizzly_bear, sun_bear) = True\n\nquestion = sing_song_of_victory(grizzly_bear, ferret)\n"}, {"idx": 434, "response": "question = unknown", "answer": 0, "code": "rule1(something) = learns(something, elementary_resource_management, leopard) => wink(something, kudu)\nrule2() = proceeds_to_spot(something, spot_after(lobster)) => not wink(penguin, kudu)\nrule3(something) = learns(something, basics_of_resource_management, sun_bear) & needs_support(something, cow) => prepare_armor(something, leopard)\norder(rule2) > order(rule1) = True\n\nlearns(penguin, basics_of_resource_management, sun_bear) = True\nneeds_support(penguin, cow) = True\n\nquestion = wink(penguin, kudu)\n"}, {"idx": 435, "response": "proceeds_to(aardvark, spot_right_after(spot(squid))) == True\nproceeds_to(hippopotamus, spot_right_after(spot(cheetah))) = rule1()\nproceeds_to(hippopotamus, spot_right_after(spot(cheetah))) == True\nbelief(hippopotamus_proceeds_to_spot_right_after_cheetah) == True\nsteal_points(kudu, 5, cheetah) == True\nadd_conclusion(\"the cheetah needs the support of the moose\") = rule2()\nadd_conclusion(\"the cheetah needs the support of the moose\") == True\nsings_song_of_victory(cheetah, wolverine) == True\nrespects(cheetah, raven) = rule3()\nrespects(cheetah, raven) == True\nhas(kudu, card) == True\nstarts_with(color_of(card), \"b\") == True\nsteal_points(kudu, 5, cheetah) == True\nquestion = True", "answer": 1, "code": "rule1() = proceeds_to(something, spot_right_after(spot(squid))) => proceeds_to(hippopotamus, spot_right_after(spot(cheetah)))\nrule2() = belief(hippopotamus_proceeds_to_spot_right_after_cheetah) & steal_points(kudu, 5, cheetah) => add_conclusion(\"the cheetah needs the support of the moose\")\nrule3(something) = sings_song_of_victory(something, wolverine) => respects(something, raven)\nrule4() = has(kudu, card) & starts_with(color_of(card), \"b\") => steal_points(kudu, 5, cheetah)\n\nproceeds_to(aardvark, spot_right_after(spot(squid))) = True\nsings_song_of_victory(cheetah, wolverine) = True\nhas(hippopotamus, club_chair) = True\nname(hippopotamus, Tessa) = True\nhas(kudu, card) = True\ncolor_of(card, blue) = True\nname(squirrel, Luna) = True\n\nquestion = \"the cheetah needs the support of the moose\" in conclusions\n"}, {"idx": 436, "response": "question = unknown", "answer": 0, "code": "rule1() = belief(ferret, eats_food(raven)) & not sing_victory_song(zander, raven) => add_conclusion(\"the raven does not raise a peace flag for the elephant\")\nrule2() = roll_dice(rabbit, ferret) => eats_food(ferret, food_of(raven))\nrule3() = attacks(something, green_fields(turtle)) => not sing_victory_song(zander, raven)\nrule4() = has(ferret, internet_device) => not eats_food(ferret, food_of(raven))\norder(rule4) > order(rule2) = True\n\nattacks(goldfish, green_fields(turtle)) = True\nroll_dice(rabbit, ferret) = True\n\nquestion = raises_peace_flag(raven, elephant)\n"}, {"idx": 437, "response": "sings_victory_song(hippopotamus, eel) == True\nnot wink(amberjack, eel) == True\nknock_down_fortress(eel, zander, unavoidably) = rule1()\nknock_down_fortress(eel, zander, unavoidably) == True\nknock_down_fortress(eel, zander) = True\nwink(penguin, cat) = rule2()\nwink(penguin, cat) == True\nquestion = True", "answer": 1, "code": "rule1() = not need_support(amberjack, eel) & sings_victory_song(hippopotamus, eel) => knock_down_fortress(eel, zander, unavoidably)\nrule2() = knock_down_fortress(something, zander) => wink(penguin, cat)\n\nsings_victory_song(hippopotamus, eel) = True\nnot wink(amberjack, eel) = True\n\nquestion = wink(penguin, cat)\n"}, {"idx": 438, "response": "enemy_of(panther, sheep) = True\nenemy_of(sun_bear, kangaroo) = rule1()\nenemy_of(sun_bear, kangaroo) == False\nnot enemy_of(sun_bear, kangaroo) == True\nnot knows(hippopotamus, defensive_plans, sun_bear) = rule4()\nnot knows(hippopotamus, defensive_plans, sun_bear) == True\ngive(sun_bear, magnifier, buffalo) = rule4()\ngive(sun_bear, magnifier, buffalo) == True\nquestion = True", "answer": 1, "code": "rule1() = enemy_of(something, sheep) => not enemy_of(sun_bear, kangaroo)\nrule2() = not has(hippopotamus, keys) => knows(hippopotamus, defensive_plans, sun_bear)\nrule3(something) = not needs_support(something, canary) & not enemy_of(something, kangaroo) => not give(something, magnifier, buffalo)\nrule4() = not knows(hippopotamus, defensive_plans, sun_bear) => give(sun_bear, magnifier, buffalo)\nrule5() = has(sun_bear, card) and color(card) in flag_of_belgium_colors => enemy_of(sun_bear, kangaroo)\nrule6() = burns_warehouse(something, phoenix) => not knows(hippopotamus, defensive_plans, sun_bear)\norder(rule3) > order(rule4) = True\norder(rule5) > order(rule1) = True\norder(rule6) > order(rule2) = True\n\nhas(hippopotamus, keys) = False\nenemy_of(panther, sheep) = True\nburns_warehouse(squirrel, phoenix) = True\n\nquestion = give(sun_bear, magnifier, buffalo)\n"}, {"idx": 439, "response": "offer_job_position(aardvark, meerkat) == True\nbelief(goldfish, points(meerkat) == points(goldfish)) == True\npoints(goldfish) == points(meerkat) == True\npoints(something) == points(ferret) = rule1()\npoints(something) == points(ferret) == True\nnot respect(gecko, raven) = rule1()\nrespect(gecko, raven) == False\nrespect(gecko, raven) == False\nquestion = False", "answer": -1, "code": "rule1(something) = points(something) == points(ferret) => not respect(gecko, raven)\nrule2() = belief(goldfish, points(meerkat) == points(goldfish)) & offer_job_position(aardvark, meerkat) => add_conclusion(\"the meerkat holds an equal number of points as the ferret\")\n\noffer_job_position(aardvark, meerkat) = True\npoints(goldfish) == points(meerkat) = True\n\nquestion = respect(gecko, raven)\n"}, {"idx": 440, "response": "friends(ferret) = 9\nsteal(ferret, 5, points, koala) = rule2()\nsteal(ferret, 5, points, koala) == True\nnot steal(ferret, 5, points, koala) == False\nremove_from_board(ferret, piece, sheep) = rule1()\nremove_from_board(ferret, piece, sheep) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not steal(something, 5, points, koala) => remove_from_board(something, piece, sheep)\nrule2() = friends(ferret) > 5 => steal(ferret, 5, points, koala)\n\nfriends(ferret) = 9\n\nquestion = remove_from_board(ferret, piece, sheep)\n"}, {"idx": 441, "response": "has(mosquito, card) == True\nstarts_with(color(card), \"l\") == False\nknows(mosquito, defensive_plans, rabbit) = rule2()\nknows(mosquito, defensive_plans, rabbit) == False\nfriends(mosquito) = 14\nknows(mosquito, defensive_plans, rabbit) = rule4()\nknows(mosquito, defensive_plans, rabbit) == True\noffer_job_position(gecko, rabbit) = True\nknows(mosquito, defensive_plans, rabbit) == True\nneeds_support(rabbit, lobster) = rule3()\nneeds_support(rabbit, lobster) == True\nquestion = True", "answer": 1, "code": "rule1() = owns(mosquito, luxury_aircraft) => not knows(mosquito, defensive_plans, rabbit)\nrule2() = has(mosquito, card) and starts_with(color(card), \"l\") => knows(mosquito, defensive_plans, rabbit)\nrule3() = offer_job_position(gecko, rabbit) & knows(mosquito, defensive_plans, rabbit) => needs_support(rabbit, lobster)\nrule4() = friends(mosquito) > 9 => knows(mosquito, defensive_plans, rabbit)\nrule5() = has_high_salary(gecko) => not offer_job_position(gecko, rabbit)\nrule6() = not knock_down_fortress(something, snail) => offer_job_position(something, rabbit)\nrule7() = knows(something, defensive_plans, mosquito) => not needs_support(rabbit, lobster)\norder(rule1) > order(rule2) = True\norder(rule1) > order(rule4) = True\norder(rule5) > order(rule6) = True\norder(rule7) > order(rule3) = True\n\nhas(mosquito, card) = True\ncolor(card, black) = True\nfriends(mosquito) = 14\nknock_down_fortress(gecko, snail) = False\n\nquestion = needs_support(rabbit, lobster)\n"}, {"idx": 442, "response": "burns(salmon, warehouse, tilapia) == True\nroll_dice(koala, wolverine) = rule1()\nroll_dice(koala, wolverine) == True\nnot roll_dice(wolverine, canary) = rule3()\nnot roll_dice(wolverine, canary) == False\nroll_dice(wolverine, canary) == False\nquestion = False", "answer": -1, "code": "rule1() = burns(warehouse, tilapia) => roll_dice(koala, wolverine)\nrule2() = not has(koala, keys) => not roll_dice(koala, wolverine)\nrule3() = roll_dice(koala, wolverine) => not roll_dice(wolverine, canary)\nrule4() = friends(koala) > 8 => not roll_dice(koala, wolverine)\norder(rule2) > order(rule1) = True\norder(rule4) > order(rule1) = True\n\nhas(koala, keys) = True\nburns(salmon, warehouse, tilapia) = True\n\nquestion = roll_dice(wolverine, canary)\n"}, {"idx": 443, "response": "has(cat, violin) == True\nhas(cat, musical_instrument) == True\nremove_piece(cat, baboon) = rule1()\nremove_piece(cat, baboon) == True\ngive(something, magnifier, baboon) = unknown\nshow_cards(mosquito, panther) = unknown\nquestion = unknown", "answer": 0, "code": "rule1() = has(cat, musical_instrument) => remove_piece(cat, baboon)\nrule2() = owes(kangaroo, money, cat) => not remove_piece(cat, baboon)\nrule3() = has(cat, carrier_for(apples_and_oranges)) => remove_piece(cat, baboon)\nrule4() = give(something, magnifier, baboon) => show_cards(mosquito, panther)\norder(rule1) > order(rule2) = True\norder(rule3) > order(rule2) = True\n\nhas(cat, cappuccino) = True\nhas(cat, violin) = True\n\nquestion = show_cards(mosquito, panther)\n"}, {"idx": 444, "response": "reduced_work_hours(starfish) == True\nworks_hours(starfish) < previous_work_hours(starfish) == True\nknows(starfish, defensive_plans, black_bear) = rule1()\nknows(starfish, defensive_plans, black_bear) == True\nwise_friends(starfish) = 1\nfriends(starfish) > 11 == False\nknows(starfish, defensive_plans, black_bear) == True\neats_food(starfish, food_of(grasshopper)) = rule3()\neats_food(starfish, food_of(grasshopper)) == True\nquestion = True", "answer": 1, "code": "rule1() = works_hours(starfish) < previous_work_hours(starfish) => knows(starfish, defensive_plans, black_bear)\nrule2() = friends(starfish) > 11 => knows(starfish, defensive_plans, black_bear)\nrule3(something) = knows(something, defensive_plans, black_bear) => eats_food(something, food_of(grasshopper))\n\nhas(starfish, banana_strawberry_smoothie) = True\nreduced_work_hours(starfish) = True\nwise_friends(starfish) = 1\nnon_wise_friends(starfish) = 3\n\nquestion = eats_food(starfish, food_of(grasshopper))\n"}, {"idx": 445, "response": "knocks_down(carp, fortress, baboon) = True\nsteals(baboon, 5, points, panda_bear) = rule2()\nsteals(baboon, 5, points, panda_bear) == True\nsing_victory_song(panda_bear, zander) = rule1()\nsing_victory_song(panda_bear, zander) == not sing_victory_song(panda_bear, zander)\nnot sing_victory_song(panda_bear, zander) == not sing_victory_song(panda_bear, zander)\nquestion = not sing_victory_song(panda_bear, zander)\n", "answer": 0, "code": "rule1() = steals(baboon, 5, points, panda_bear) => not sing_victory_song(panda_bear, zander)\nrule2() = knocks_down(carp, fortress, baboon) => steals(baboon, 5, points, panda_bear)\n\nowe(baboon, money, elephant) = True\nsteals(baboon, 5, points, bat) = True\nknocks_down(carp, fortress, baboon) = True\n\nquestion = sing_victory_song(panda_bear, zander)\n"}, {"idx": 446, "response": "eats_food(polar_bear, kiwi) == True\nneeds_support(polar_bear, rabbit) = rule1()\nneeds_support(polar_bear, rabbit) == True\nprepare_armor(sheep) = rule1()\nprepare_armor(sheep) == True\nprepare_armor(polar_bear, sheep) = rule2()\nprepare_armor(polar_bear, sheep) == True\nwink(sheep, kangaroo) = rule2()\nwink(sheep, kangaroo) == True\nquestion = True", "answer": 1, "code": "rule1(something) = needs_support(something, rabbit) & eats_food(something, kiwi) => prepare_armor(sheep)\nrule2() = prepare_armor(polar_bear, sheep) => wink(sheep, kangaroo)\nrule3() = respect(hare, sheep) => not wink(sheep, kangaroo)\norder(rule3) > order(rule2) = True\n\neats_food(polar_bear, kiwi) = True\nknows(polar_bear, defensive_plans, rabbit) = True\n\nquestion = wink(sheep, kangaroo)\n"}, {"idx": 447, "response": "enemy_of(cockroach, tiger) == True\nnot same_number_of_points(cockroach, lobster) == True\nactual_enemy_of(cockroach, tilapia) = rule1()\nactual_enemy_of(cockroach, tilapia) == True\nwink_at(kangaroo, tilapia) = rule6()\nwink_at(kangaroo, tilapia) == True\nnot enemy_of(cockroach, tilapia) == True\neat_food(tilapia, food_of(parrot)) = rule6()\neat_food(tilapia, food_of(parrot)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = enemy_of(something, tiger) & not same_number_of_points(something, lobster) => actual_enemy_of(something, tilapia)\nrule2() = friends(kudu) > 3 => not same_number_of_points(kudu, tilapia)\nrule3() = fan_of(kudu, Chris_Ronaldo) => not same_number_of_points(kudu, tilapia)\nrule4(something) = sings_victory_song(something, sun_bear) => wink_at(something, tilapia)\nrule5() = shows_all_cards(someone, carp) => same_number_of_points(kudu, tilapia)\nrule6() = wink_at(kangaroo, tilapia) & not enemy_of(cockroach, tilapia) => eat_food(tilapia, food_of(parrot))\nrule7() = has(cockroach, card) & color(card) in colors_of(flag_of_France) => not actual_enemy_of(cockroach, tilapia)\norder(rule2) > order(rule5) = True\norder(rule3) > order(rule5) = True\norder(rule7) > order(rule1) = True\n\nenemy_of(cockroach, tiger) = True\nhas(cockroach, card) = True\ncolor(card, blue) = True\nnot same_number_of_points(cockroach, lobster) = True\nsings_victory_song(kangaroo, sun_bear) = True\nfan_of(kudu, Chris_Ronaldo) = False\nshows_all_cards(meerkat, carp) = True\n\nquestion = eat_food(tilapia, food_of(parrot))\n"}, {"idx": 448, "response": "friends(phoenix) = 10\nwink(phoenix, spider) = rule3()\nwink(phoenix, spider) == True\nwink(mosquito, buffalo) = rule1()\nwink(mosquito, buffalo) == True\nquestion = True", "answer": 1, "code": "rule1() = not become_enemy(halibut, mosquito) => wink(mosquito, buffalo)\nrule2() = wink(something, spider) => not wink(mosquito, buffalo)\nrule3() = friends(phoenix) > 6 => wink(phoenix, spider)\norder(rule1) > order(rule2) = True\n\nfriends(phoenix) = 10\n\nquestion = wink(mosquito, buffalo)\n"}, {"idx": 449, "response": "lazy_friends(cricket) = 6\nnon_lazy_friends(cricket) = 1\nname(cricket, Paco) = True\nfirst_letter_of(name(cricket)) == first_letter_of(name(pig)) = rule1()\nfirst_letter_of(name(cricket)) == first_letter_of(name(pig)) == False\nnot sing_victory_song(cricket, oscar) = rule1()\nsing_victory_song(cricket, oscar) == False\nnot sing_victory_song(cricket, oscar) == False\nshow_cards(cricket, all, squirrel) = True\nsteal_points(cricket, 5, eel) = False\nsing_victory_song(something, oscar) = rule2()\nsing_victory_song(something, oscar) == False\nsteal_points(oscar, 5, sun_bear) = rule4()\nsteal_points(oscar, 5, sun_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = first_letter_of(name(cricket)) == first_letter_of(name(pig)) => not sing_victory_song(cricket, oscar)\nrule2() = steal_points(something, 5, eel) & show_cards(something, all, squirrel) => sing_victory_song(something, oscar)\nrule3() = friends(cricket) < 4 => not sing_victory_song(cricket, oscar)\nrule4() = sing_victory_song(cricket, oscar) => steal_points(oscar, 5, sun_bear)\norder(rule1) > order(rule2) = True\norder(rule3) > order(rule2) = True\n\nlazy_friends(cricket) = 6\nnon_lazy_friends(cricket) = 1\nname(cricket, Paco) = True\nshow_cards(cricket, all, squirrel) = True\nsteal_points(cricket, 5, eel) = False\n\nquestion = steal_points(oscar, 5, sun_bear)\n"}, {"idx": 450, "response": "name(kudu, Mojo) == True\nfirst_letter_of(name(goldfish)) == first_letter_of(name(kudu)) = True\nnot remove(goldfish, piece, grizzly_bear) = rule1()\nnot remove(goldfish, piece, grizzly_bear) == True\nraise_flag_of_peace(goldfish, panther) = True\nremove(something, piece, grizzly_bear) = rule2()\nremove(goldfish, piece, grizzly_bear) == True\nhas(goldfish, card) == True\ncolor(card, black) == True\ncolor(card) in rainbow_colors == True\nnot remove(goldfish, piece, grizzly_bear) = rule3()\nnot remove(goldfish, piece, grizzly_bear) == True\nshow_cards(eel, grizzly_bear) = True\nremove(goldfish, piece, grizzly_bear) == True\nadd_conclusion(\"the grizzly bear burns the warehouse of the snail\") = rule4()\nadd_conclusion(\"the grizzly bear burns the warehouse of the snail\") == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(goldfish)) == first_letter_of(name(kudu)) => not remove(goldfish, piece, grizzly_bear)\nrule2() = raise_flag_of_peace(something, panther) => remove(something, piece, grizzly_bear)\nrule3() = has(goldfish, card) and color(card) in rainbow_colors => not remove(goldfish, piece, grizzly_bear)\nrule4() = show_cards(eel, grizzly_bear) & remove(goldfish, piece, grizzly_bear) => add_conclusion(\"the grizzly bear burns the warehouse of the snail\")\nrule5() = raise_flag_of_peace(something, dog) => show_cards(something, grizzly_bear)\norder(rule1) > order(rule2) = True\norder(rule3) > order(rule2) = True\n\nraise_flag_of_peace(eel, dog) = True\nhas(goldfish, card) = True\ncolor(card, black) = True\nraise_flag_of_peace(goldfish, panther) = True\nname(kudu, Mojo) = True\n\nquestion = \"the grizzly bear burns the warehouse of the snail\" in conclusions\n"}, {"idx": 451, "response": "friends(bat) = 14\nfriends(bat) > 7 = True\nprepare_armor(bat, kudu) = rule1()\nprepare_armor(bat, kudu) == True\nburn_warehouse(panda_bear, bat) = True\ngive(spider, magnifier, bat) = True\nnot prepare_armor(bat, kudu) = rule4()\nprepare_armor(bat, kudu) == False\nnot prepare_armor(bat, kudu) == False\nowe(bat, money, polar_bear) = rule2()\nowe(bat, money, polar_bear) == not need_support(bat, lion)\nneed_support(bat, lion) = rule3()\nneed_support(bat, lion) == not raise_flag_of_peace(bat, sheep)\nnot raise_flag_of_peace(bat, sheep) = rule5(bat)\nnot raise_flag_of_peace(bat, sheep) == need_support(bat, lion)\nneed_support(bat, lion) == True\nowe(bat, money, polar_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(bat) > 7 => prepare_armor(bat, kudu)\nrule2() = prepare_armor(something, kudu) & not need_support(something, lion) => not owe(something, money, polar_bear)\nrule3() = first_letter_of(name(bat)) == first_letter_of(name(hummingbird)) => not need_support(bat, lion)\nrule4() = give(spider, magnifier, bat) & burn_warehouse(panda_bear, bat) => not prepare_armor(bat, kudu)\nrule5(something) = not raise_flag_of_peace(something, sheep) => need_support(something, lion)\norder(rule1) > order(rule4) = True\norder(rule5) > order(rule3) = True\n\nfriends(bat) = 14\nname(bat, Pablo) = True\nname(hummingbird, Pashmak) = True\nburn_warehouse(panda_bear, bat) = True\ngive(spider, magnifier, bat) = True\n\nquestion = owe(bat, money, polar_bear)\n"}, {"idx": 452, "response": "has(spider, card) == True\ncolor(card, white) == True\ncolor(card, blue) == False\nhas(spider, romaine_lettuce) == False\nhas(spider, leafy_green_vegetable) == False\nraise_flag_of_peace(spider, lobster) = rule1()\nraise_flag_of_peace(spider, lobster) == False\nhas(lobster, card) == True\ncolor(card, blue) == True\ncolor(card, primary_colors) == True\nowe(lobster, money, mosquito) = rule8()\nowe(lobster, money, mosquito) == True\nwink(lobster, viperfish) = rule2()\nwink(lobster, viperfish) == True\nquestion = True", "answer": 1, "code": "rule1() = has(spider, card) and color(card) in rainbow_colors => raise_flag_of_peace(spider, lobster)\nrule2(something) = not owe(something, money, mosquito) => wink(something, viperfish)\nrule3() = has(spider, leafy_green_vegetable) => raise_flag_of_peace(spider, lobster)\nrule4() = needs_support(something, crocodile) => offer_job_position(cheetah, lobster)\nrule5() = prepare_armor(something, starfish) & not attack(something, green_fields, owner=raven) => not offer_job_position(something, lobster)\nrule6() = has(lobster, sharp_object) => owe(lobster, money, mosquito)\nrule7() = remove_piece(something, doctorfish) => not raise_flag_of_peace(spider, lobster)\nrule8() = has(lobster, card) and color(card) in primary_colors => owe(lobster, money, mosquito)\norder(rule1) > order(rule7) = True\norder(rule3) > order(rule7) = True\norder(rule4) > order(rule5) = True\n\nprepare_armor(cheetah, starfish) = True\nnot attack(cheetah, green_fields, owner=raven) = True\nhas(lobster, card) = True\ncolor(card, blue) = True\nhas(lobster, hot_chocolate) = True\nhas(spider, card) = True\ncolor(card, white) = True\nhas(spider, romaine_lettuce) = True\n\nquestion = wink(lobster, viperfish)\n"}, {"idx": 453, "response": "becomes_enemy(donkey, sheep) == True\nsing_victory_song(tiger, amberjack) = rule1()\nsing_victory_song(tiger, amberjack) == True\nsings_victory_song(tiger, amberjack) = True\nprepare_armor(elephant, hare) = rule2()\nprepare_armor(elephant, hare) == True\nquestion = True", "answer": 1, "code": "rule1() = becomes_enemy(something, sheep) => sing_victory_song(tiger, amberjack)\nrule2() = sings_victory_song(something, amberjack) => prepare_armor(elephant, hare)\nrule3() = raise_flag_of_peace(raven, elephant) => not prepare_armor(elephant, hare)\nrule4() = salary(raven) == high => not raise_flag_of_peace(raven, elephant)\nrule5() = has(raven, basket) and carries(raven, apples_oranges) => raise_flag_of_peace(raven, elephant)\nrule6() = friends(raven) > 6 => not raise_flag_of_peace(raven, elephant)\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule5) = True\norder(rule6) > order(rule5) = True\n\nbecomes_enemy(donkey, sheep) = True\nhas(raven, basket) = True\njob_income(raven, low) = True\n\nquestion = prepare_armor(elephant, hare)\n"}, {"idx": 454, "response": "has(cheetah, card) == True\ncolor(card, red) == True\neats_food(cheetah, food_of(wolverine)) = rule2()\neats_food(cheetah, food_of(wolverine)) == True\nnot sing_victory_song(gecko, goldfish) = rule1()\nsing_victory_song(gecko, goldfish) == False\nquestion = False", "answer": -1, "code": "rule1() = eats_food(something, food_of(wolverine)) => not sing_victory_song(gecko, goldfish)\nrule2() = has(cheetah, card) and color(card) in primary_colors => eats_food(cheetah, food_of(wolverine))\n\nhas(cheetah, card) = True\ncolor(card, red) = True\n\nquestion = sing_victory_song(gecko, goldfish)\n"}, {"idx": 455, "response": "has(kiwi, card) == True\ncolor(card, orange) == True\nsteal(kiwi, 5, points, sun_bear) = rule2()\nsteal(kiwi, 5, points, sun_bear) == True\nknock_down(sun_bear, fortress, phoenix) = rule1()\nknock_down(sun_bear, fortress, phoenix) == True\nquestion = True", "answer": 1, "code": "rule1() = steal(kiwi, 5, points, sun_bear) => knock_down(sun_bear, fortress, phoenix)\nrule2() = has(kiwi, card) and color(card) in flag_colors(italy) => steal(kiwi, 5, points, sun_bear)\n\nhas(kiwi, card) = True\ncolor(card, orange) = True\n\nquestion = knock_down(sun_bear, fortress, phoenix)\n"}, {"idx": 456, "response": "smart_friends(crocodile) = 1\nnon_smart_friends(crocodile) = 1\nfriends(crocodile) = 2\nfriends(crocodile) < 3 = True\nbecome_enemy(crocodile, polar_bear) = rule2()\nbecome_enemy(crocodile, polar_bear) == True\nknock_down(sun_bear, fortress, crocodile) = True\nshow_cards(crocodile, all, carp) = rule3()\nshow_cards(crocodile, all, carp) == True\nbecome_enemy(crocodile, polar_bear) == True\nshow_cards(crocodile, all, carp) == True\nneed_support(crocodile, panda_bear) = rule1()\nneed_support(crocodile, panda_bear) == True\nquestion = True", "answer": 1, "code": "rule1(something) = become_enemy(something, polar_bear) & show_cards(something, all, carp) => need_support(something, panda_bear)\nrule2() = friends(crocodile) < 3 => become_enemy(crocodile, polar_bear)\nrule3() = knock_down(sun_bear, fortress, crocodile) => show_cards(crocodile, all, carp)\nrule4() = purchased(crocodile, time_machine) => become_enemy(crocodile, polar_bear)\n\nsmart_friends(crocodile) = 1\nnon_smart_friends(crocodile) = 1\ninvented(crocodile, time_machine) = True\nknock_down(sun_bear, fortress, crocodile) = True\n\nquestion = need_support(crocodile, panda_bear)\n"}, {"idx": 457, "response": "learn(pig, basics_of_resource_management_from(puffin)) == True\nattack(pig, green_fields, owner(wolverine)) = rule4()\nattack(pig, green_fields, owner(wolverine)) == True\nattack(pig, green_fields, owner(leopard)) = rule6()\nattack(pig, green_fields, owner(leopard)) == True\nnot knock_down(pig, fortress, koala) = rule2()\nknock_down(pig, fortress, koala) == False\nknock_down(pig, fortress, koala) == False\nquestion = False", "answer": -1, "code": "rule1() = friends(pig) < 8 => not attack(pig, green_fields, owner(leopard))\nrule2() = attack(something, green_fields, owner(leopard)) & attack(something, green_fields, owner(wolverine)) => not knock_down(something, fortress, koala)\nrule3(something) = roll_dice(something, snail) => not know(something, defense_plan, pig)\nrule4(something) = learn(something, elementary_resource_management_from(puffin)) => attack(something, green_fields, owner(wolverine))\nrule5(something) = not become_enemy(something, black_bear) => know(something, defensive_plans, pig)\nrule6() = owes_money_to(something, moose) => attack(pig, green_fields, owner(leopard))\norder(rule1) > order(rule6) = True\norder(rule3) > order(rule5) = True\n\nowes_money_to(cricket, moose) = True\nlearn(pig, basics_of_resource_management_from(puffin)) = True\nnot become_enemy(amberjack, black_bear) = True\n\nquestion = knock_down(pig, fortress, koala)\n"}, {"idx": 458, "response": "burn(penguin, warehouse, ferret) == True\ngive(ferret, magnifying_glass, leopard) = rule2(ferret)\ngive(ferret, magnifying_glass, leopard) == True\nquestion = True", "answer": 1, "code": "rule1() = burn(penguin, warehouse, ferret) => not attack(ferret, green_fields, owner(hippopotamus))\nrule2(something) = not remove(something, piece, hippopotamus) => give(something, magnifying_glass, leopard)\n\nlazy_friends(ferret) = 5\nnon_lazy_friends(ferret) = 1\nburn(penguin, warehouse, ferret) = True\n\nquestion = give(ferret, magnifying_glass, leopard)\n"}, {"idx": 459, "response": "took(whale, bike, store) == True\nnot owe(whale, money, kudu) == True\nknock_down(whale, fortress, eagle) = rule2(whale)\nknock_down(whale, fortress, eagle) == True\nknock_down(whale, fortress, eagle) == True\nshow_cards(whale, wolverine) = rule3(whale)\nshow_cards(whale, wolverine) == True\nshow_cards(whale, wolverine) == True\nquestion = True", "answer": 1, "code": "rule1() = took(whale, bike, store) => not knock_down(whale, fortress, eagle)\nrule2(something) = not owe(something, money, kudu) => knock_down(something, fortress, eagle)\nrule3(something) = knock_down(something, fortress, eagle) => show_cards(something, wolverine)\norder(rule2) > order(rule1) = True\n\ntook(whale, bike, store) = True\nnot owe(whale, money, kudu) = True\n\nquestion = show_cards(whale, wolverine)\n"}, {"idx": 460, "response": "name(grizzly_bear, Peddi) == True\nname(moose, ???) = unknown\nfirst_letter_of(name(grizzly_bear)) == first_letter_of(name(moose)) = unknown\nroll_dice(grizzly_bear, snail) = rule1()\nroll_dice(grizzly_bear, snail) == True\ninvented_time_machine(grizzly_bear) == True\nnot roll_dice(grizzly_bear, snail) = rule4()\nnot roll_dice(grizzly_bear, snail) == False\nnot roll_dice(grizzly_bear, snail) == False\nfriends(grizzly_bear) = 10\nfriends(grizzly_bear) < 4 = rule7()\nfriends(grizzly_bear) < 4 == False\nnot roll_dice(grizzly_bear, snail) == False\nremove_piece(meerkat, snail) = rule3()\nremove_piece(meerkat, snail) == True\nnot remove_piece(meerkat, snail) = rule8()\nnot remove_piece(meerkat, snail) == False\nnot remove_piece(meerkat, snail) == False\nadd_conclusion(\"the snail is not going to proceed to the spot right after the leopard\") = rule6()\nadd_conclusion(\"the snail is not going to proceed to the spot right after the leopard\") == True\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(grizzly_bear)) == first_letter_of(name(moose)) => roll_dice(grizzly_bear, snail)\nrule2() = has(meerkat, sharp_object) => not remove_piece(meerkat, snail)\nrule3() = has(meerkat, leafy_green_vegetable) => remove_piece(meerkat, snail)\nrule4() = created_time_machine(grizzly_bear) => not roll_dice(grizzly_bear, snail)\nrule5() = steal_points(something, 5, cheetah) => not know(snail, defense_plan, spider)\nrule6() = not roll_dice(grizzly_bear, snail) & remove_piece(meerkat, snail) => add_conclusion(\"the snail is not going to proceed to the spot right after the leopard\")\nrule7() = friends(grizzly_bear) < 4 => not roll_dice(grizzly_bear, snail)\nrule8() = friends(meerkat) > 5 => not remove_piece(meerkat, snail)\nrule9() = first_letter_of(name(meerkat)) == first_letter_of(name(pig)) => remove_piece(meerkat, snail)\norder(rule1) > order(rule4) = True\norder(rule1) > order(rule7) = True\norder(rule2) > order(rule3) = True\norder(rule2) > order(rule9) = True\norder(rule8) > order(rule3) = True\norder(rule8) > order(rule9) = True\n\nfriends(grizzly_bear) = 10\ninvented_time_machine(grizzly_bear) = True\nname(grizzly_bear, Peddi) = True\nsteal_points(hippopotamus, 5, cheetah) = True\nhas(meerkat, saxophone) = True\nhas(meerkat, arugula) = True\nname(meerkat, Blossom) = True\nname(pig, Charlie) = True\n\nquestion = \"the snail is not going to proceed to the spot right after the leopard\" in conclusions\n"}, {"idx": 461, "response": "has(kangaroo, drink) == True\nhas(kangaroo, banana_strawberry_smoothie) == True\nproceed_to_spot(kangaroo, right_after_spot(amberjack)) = rule1()\nproceed_to_spot(kangaroo, right_after_spot(amberjack)) == False\nsings(panda_bear, victory_song, kangaroo) = rule2()\nsings(panda_bear, victory_song, kangaroo) == True\nproceed_to_spot(kangaroo, right_after_spot(amberjack)) == True\nraise_flag_of_peace(swordfish, amberjack) = rule4()\nraise_flag_of_peace(swordfish, amberjack) == False\nlearn(amberjack, elementary_resource_management, bat) = rule4()\nlearn(amberjack, elementary_resource_management, bat) == True\nquestion = True", "answer": 1, "code": "rule1() = has(kangaroo, drink) => not proceed_to_spot(kangaroo, right_after_spot(amberjack))\nrule2() = sings(panda_bear, victory_song, kangaroo) => proceed_to_spot(kangaroo, right_after_spot(amberjack))\nrule3() = belief(eagle, steals_points(amberjack, 5)) & not proceed_to_spot(kangaroo, right_after_spot(amberjack)) => not learn(amberjack, elementary_resource_management, bat)\nrule4() = raise_flag_of_peace(swordfish, amberjack) => learn(amberjack, elementary_resource_management, bat)\nrule5() = saw(something, shows_cards(all_cards), hare) => raise_flag_of_peace(something, amberjack)\norder(rule2) > order(rule1) = True\norder(rule3) > order(rule4) = True\n\nhas(kangaroo, banana_strawberry_smoothie) = True\nknocks_down(swordfish, fortress(hare)) = True\n\nquestion = learn(amberjack, elementary_resource_management, bat)\n"}, {"idx": 462, "response": "not burn(tiger, warehouse, kudu) == True\nburn(kudu, warehouse, mosquito) = rule1()\nburn(kudu, warehouse, mosquito) == True\nhas(catfish, romaine_lettuce) == True\nhas(catfish, card) == False\ncolor(card) in colors_of(flag_of_Belgium) == False\nnot show_cards(catfish, all, snail) = rule3()\nnot show_cards(catfish, all, snail) == True\nshow_cards(catfish, all, snail) == False\nfriends(catfish) < 3 == False\nshow_cards(catfish, all, snail) = rule4()\nshow_cards(catfish, all, snail) == False\npublished(catfish, high_quality_paper) == True\nneeds_support(catfish, dog) = rule5()\nneeds_support(catfish, dog) == True\nknows(catfish, defensive_plans, viperfish) = rule2(catfish)\nknows(catfish, defensive_plans, viperfish) == True\nquestion = True", "answer": 1, "code": "rule1() = not burn(tiger, warehouse, kudu) => burn(kudu, warehouse, mosquito)\nrule2(something) = show_cards(something, all, snail) & needs_support(something, dog) => knows(something, defensive_plans, viperfish)\nrule3() = has(catfish, card) & color(card) in colors_of(flag_of_Belgium) => not show_cards(catfish, all, snail)\nrule4() = friends(catfish) < 3 => show_cards(catfish, all, snail)\nrule5() = published(catfish, high_quality_paper) => needs_support(catfish, dog)\nrule6() = has(catfish, leafy_green_vegetable) => show_cards(catfish, all, snail)\nrule7() = has(catfish, leafy_green_vegetable) => needs_support(catfish, dog)\nrule8() = not attack(elephant, green_fields, owner=catfish) & not knows(eagle, defensive_plans, catfish) => not needs_support(catfish, dog)\nrule9() = first_letter_of(name(catfish)) == first_letter_of(name(lion)) => not show_cards(catfish, all, snail)\norder(rule3) > order(rule4) = True\norder(rule3) > order(rule6) = True\norder(rule8) > order(rule5) = True\norder(rule8) > order(rule7) = True\norder(rule9) > order(rule4) = True\norder(rule9) > order(rule6) = True\n\nhas(catfish, romaine_lettuce) = True\nname(catfish, Teddy) = True\nrecently_read(catfish, high_quality_paper) = True\nadventurous_friends(catfish) = 3\nnon_adventurous_friends(catfish) = 2\nname(lion, Mojo) = True\nnot attack(elephant, green_fields, owner=catfish) = True\nnot burn(tiger, warehouse, kudu) = True\n\nquestion = knows(catfish, defensive_plans, viperfish)\n"}, {"idx": 463, "response": "name(cricket, Tessa) == True\nfirst_letter_of(name(cricket)) == first_letter_of(name(grasshopper)) = True\nnot become_enemy(cricket, black_bear) = rule4()\nnot become_enemy(cricket, black_bear) == True\nnot raise_flag_of_peace(cricket, raven) = rule2()\nnot raise_flag_of_peace(cricket, raven) == True\nquestion = True", "answer": 1, "code": "rule1() = has(cricket, card) and color(card) in colors_of_flag(france) => not become_enemy(cricket, black_bear)\nrule2(something) = become_enemy(something, black_bear) => not raise_flag_of_peace(something, raven)\nrule3(something) = steal_points(something, cockroach, 5) & remove_piece(something, hippopotamus) => become_enemy(something, black_bear)\nrule4() = first_letter_of(name(cricket)) == first_letter_of(name(grasshopper)) => not become_enemy(cricket, black_bear)\norder(rule1) > order(rule3) = True\norder(rule4) > order(rule3) = True\n\nname(cricket, Tessa) = True\nsteal_points(cricket, cockroach, 5) = True\nremove_piece(cricket, hippopotamus) = True\nname(grasshopper, Pashmak) = True\n\nquestion = raise_flag_of_peace(cricket, raven)\n"}, {"idx": 464, "response": "name(raven, Tango) == True\npoints(raven) != points(panda_bear) = rule1()\npoints(raven) != points(panda_bear) == True\nburn_warehouse(raven, grizzly_bear) = rule1()\nburn_warehouse(raven, grizzly_bear) == True\nquestion = True", "answer": 1, "code": "rule1(something) = points(something) != points(panda_bear) => burn_warehouse(something, grizzly_bear)\nrule2() = first_letter_of(name(raven)) == first_letter_of(name(cockroach)) => not raise_flag_of_peace(raven, panda_bear)\nrule3(something) = knows(something, defense_plan, penguin) & not give(something, magnifier, meerkat) => raise_flag_of_peace(something, panda_bear)\nrule4() = owns(raven, luxury_aircraft) => not raise_flag_of_peace(raven, panda_bear)\norder(rule2) > order(rule3) = True\norder(rule4) > order(rule3) = True\n\nname(cockroach, Luna) = True\nname(raven, Tango) = True\nknows(raven, defense_plan, penguin) = True\nowns(raven, luxury_aircraft) = True\ngive(raven, magnifier, meerkat) = False\n\nquestion = burn_warehouse(raven, grizzly_bear)\n"}, {"idx": 465, "response": "steals(wolverine, 5, points, parrot) == True\nattack(parrot, green_fields, grizzly_bear) = rule1()\nattack(parrot, green_fields, grizzly_bear) == True\ngive(parrot, magnifier, tiger) = rule3()\ngive(parrot, magnifier, tiger) == True\nquestion = True", "answer": 1, "code": "rule1() = steals(wolverine, 5, points, parrot) => attack(parrot, green_fields, grizzly_bear)\nrule2() = first_letter_of(name(parrot)) == first_letter_of(name(sea_bass)) => not raise_flag_of_peace(parrot, halibut)\nrule3(something) = attack(something, green_fields, grizzly_bear) => give(something, magnifier, tiger)\nrule4(something) = not remove(something, piece, pig) & not raise_flag_of_peace(something, halibut) => not give(something, magnifying_glass, tiger)\norder(rule4) > order(rule3) = True\n\nname(parrot, Max) = True\nname(sea_bass, Meadow) = True\nsteals(wolverine, 5, points, parrot) = True\n\nquestion = give(parrot, magnifier, tiger)\n"}, {"idx": 466, "response": "attacks(dog, green_fields(rabbit)) == True\nknocks_down(dog, fortress(halibut)) == True\nknocks_down(fortress(dog), fortress(octopus)) == True\neats(food(octopus), eagle) = rule2()\neats(food(octopus), eagle) == True\nnot steal_points(octopus, 5, canary) = rule3()\nnot steal_points(octopus, 5, canary) == False\nsteal_points(octopus, 5, canary) == True\nquestion = True", "answer": 1, "code": "rule1() = knocks_down(something, fortress(halibut)) & attacks(something, green_fields(rabbit)) => knocks_down(fortress(octopus))\nrule2() = not raise_flag_of_peace(grasshopper, eagle) => eats(food(octopus), eagle)\nrule3() = knocks_down(fortress(dog), fortress(octopus)) & eats(food(octopus), eagle) => not steal_points(octopus, 5, canary)\nrule4(something) = needs_support(something, viperfish) => not eats(food(octopus), something)\norder(rule4) > order(rule2) = True\n\nattacks(dog, green_fields(rabbit)) = True\nknocks_down(dog, fortress(halibut)) = True\nnot raise_flag_of_peace(grasshopper, eagle) = True\n\nquestion = steal_points(octopus, 5, canary)\n"}, {"idx": 467, "response": "attacks(jellyfish, green_fields) == True\nowner(green_fields) == catfish == True\nknows(catfish, defense_plan, hippopotamus) = rule1()\nknows(catfish, defense_plan, hippopotamus) == True\nnot respect(catfish, snail) = rule2(catfish)\nnot respect(catfish, snail) == True\nlearn(catfish, basics_of_resource_management, kiwi) = rule2(catfish)\nlearn(catfish, basics_of_resource_management, kiwi) == True\nquestion = True", "answer": 1, "code": "rule1() = attacks(jellyfish, green_fields) & owner(green_fields) == catfish => knows(catfish, defense_plan, hippopotamus)\nrule2(something) = knows(something, defense_plan, hippopotamus) & not respect(something, snail) => learn(something, basics_of_resource_management, kiwi)\nrule3(something) = not become_enemy(something, meerkat) => respect(something, snail)\n\nattacks(jellyfish, green_fields) & owner(green_fields) == catfish = True\nnot become_enemy(catfish, meerkat) = True\n\nquestion = learn(catfish, basics_of_resource_management, kiwi)\n"}, {"idx": 468, "response": "has(cat, card) == True\ncolor(card, blue) == True\ncolor(card, green) == True\nname(cat, Lucy) == True\nname(tilapia, Pablo) == True\nhas(tilapia, card) == True\nnot offer_job_position(cat, gecko) = rule1()\nnot offer_job_position(cat, gecko) == True\nnot knock_down(wolverine, fortress, jellyfish) == True\nnot knock_down(wolverine, fortress, gecko) = rule5()\nnot knock_down(wolverine, fortress, gecko) == True\nknow(gecko, defensive_plans, halibut) = rule5()\nknow(gecko, defensive_plans, halibut) == True\nquestion = True", "answer": 1, "code": "rule1() = has(cat, card) and color(card) in rainbow_colors => not offer_job_position(cat, gecko)\nrule2(something) = not knock_down(something, fortress, jellyfish) & owe(something, money, lion) => knock_down(something, fortress, gecko)\nrule3() = has(tilapia, card) and color(card) in rainbow_colors => steal_points(tilapia, 5, gecko)\nrule4() = burn(something, warehouse, caterpillar) => not steal_points(something, 5, gecko)\nrule5() = not offer_job_position(cat, gecko) & knock_down(wolverine, fortress, gecko) => know(gecko, defensive_plans, halibut)\nrule6() = eat_food(something, food_of(goldfish)) => not knock_down(wolverine, fortress, gecko)\nrule7() = first_letter_of(name(cat)) == first_letter_of(name(tilapia)) => not offer_job_position(cat, gecko)\nrule8() = has(tilapia, something_to_carry(apples, oranges)) => steal_points(tilapia, 5, gecko)\norder(rule4) > order(rule3) = True\norder(rule4) > order(rule8) = True\norder(rule6) > order(rule2) = True\n\nhas(cat, card) = True\ncolor(card, blue) = True\nname(cat, Lucy) = True\nhas(tilapia, blade) = True\nhas(tilapia, card) = True\ncolor(card, green) = True\nname(tilapia, Pablo) = True\nowe(wolverine, money, lion) = True\nnot knock_down(wolverine, fortress, jellyfish) = True\n\nquestion = know(gecko, defensive_plans, halibut)\n"}, {"idx": 469, "response": "has(mosquito, card) == True\nstarts_with(color(card), \"o\") == True\nburn(warehouse, pig) = rule4()\nburn(warehouse, pig) == True\nbecome_enemy(mosquito, turtle) = rule1()\nbecome_enemy(mosquito, turtle) == True\nnot show_cards(mosquito, all, cockroach) = rule2()\nshow_cards(mosquito, all, cockroach) == False\nnot show_cards(mosquito, all, cockroach) == False\nquestion = False", "answer": -1, "code": "rule1() = has(mosquito, carry(apples)) & has(mosquito, carry(oranges)) => become_enemy(mosquito, turtle)\nrule2() = not burn(warehouse, pig) & become_enemy(something, turtle) => not show_cards(something, all, cockroach)\nrule3() = salary(mosquito) == high => not burn(warehouse, pig)\nrule4() = has(mosquito, card) & starts_with(color(card), \"o\") => burn(warehouse, pig)\nrule5() = first_letter_of(name(mosquito)) == first_letter_of(name(whale)) => not burn(warehouse, pig)\norder(rule3) > order(rule4) = True\norder(rule5) > order(rule4) = True\n\nhas(mosquito, card) = True\ncolor(card, orange) = True\nhas(mosquito, plastic_bag) = True\nsalary(mosquito) == low = True\nname(mosquito, Mojo) = True\nname(whale, Max) = True\n\nquestion = show_cards(mosquito, all, cockroach)\n"}, {"idx": 470, "response": "winks(canary, turtle) == True\nknocks_down(canary, fortress, turtle) = True\nnot learn(canary, basics_of_resource_management, moose) = rule1()\nnot learn(canary, basics_of_resource_management, moose) == True\nsteal_points(canary, 5, elephant) = rule1()\nsteal_points(canary, 5, elephant) == True\nprepare_armor(hippopotamus, amberjack) = rule2()\nprepare_armor(hippopotamus, amberjack) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not learn(something, basics_of_resource_management, moose) & knocks_down(something, fortress, turtle) => steal_points(something, 5, elephant)\nrule2() = steal_points(something, 5, elephant) => prepare_armor(hippopotamus, amberjack)\n\nwinks(canary, turtle) = True\nlearn(canary, basics_of_resource_management, moose) = False\n\nquestion = prepare_armor(hippopotamus, amberjack)\n"}, {"idx": 471, "response": "has(doctorfish, high_salary) == True\nnot need_support(doctorfish, donkey) = rule1()\nnot need_support(doctorfish, donkey) == True\nnot need_support(doctorfish, donkey) == True\nprepare_armor(doctorfish, polar_bear) = rule2()\nprepare_armor(doctorfish, polar_bear) == True\nprepare_armor(doctorfish, polar_bear) == True\nquestion = True", "answer": 1, "code": "rule1() = has(doctorfish, high_salary) => not need_support(doctorfish, donkey)\nrule2() = not need_support(something, donkey) => prepare_armor(something, polar_bear)\nrule3() = has(doctorfish, sharp_object) => not need_support(doctorfish, donkey)\n\nhas(doctorfish, high_salary) = True\nhas(doctorfish, hot_chocolate) = True\nname(doctorfish, Cinnamon) = True\nname(kangaroo, Chickpea) = True\n\nquestion = prepare_armor(doctorfish, polar_bear)\n"}, {"idx": 472, "response": "give(eagle, magnifier, koala) = rule2()\ngive(eagle, magnifier, koala) == True\nnot raise_flag_of_peace(eagle, lobster) = rule1()\nraise_flag_of_peace(eagle, lobster) == False\nraise_flag_of_peace(eagle, lobster) == False\nquestion = False", "answer": -1, "code": "rule1(something) = give(something, magnifier, koala) => not raise_flag_of_peace(something, lobster)\nrule2() = not show_all_cards(koala, eagle) => give(eagle, magnifier, koala)\nrule3() = owe(spider, money, eagle) => not give(eagle, magnifier, koala)\norder(rule2) > order(rule3) = True\n\nowe(spider, money, eagle) = True\nshow_all_cards(koala, eagle) = False\n\nquestion = raise_flag_of_peace(eagle, lobster)\n"}, {"idx": 473, "response": "has(bat, flute) == True\nrecently_read(bat, high_quality_paper) == True\npublished(bat, high_quality_paper) = rule2()\npublished(bat, high_quality_paper) == True\noffer_job_position(bat, oscar) = rule2()\noffer_job_position(bat, oscar) == True\npoints(cow) == points(cheetah) = rule1()\npoints(cow) == points(cheetah) == True\nquestion = True", "answer": 1, "code": "rule1() = offer_job_position(something, oscar) => points(cow) == points(cheetah)\nrule2() = published(bat, high_quality_paper) => offer_job_position(bat, oscar)\nrule3() = has(bat, something_to_carry_apples_and_oranges) => offer_job_position(bat, oscar)\n\nhas(bat, flute) = True\nrecently_read(bat, high_quality_paper) = True\n\nquestion = points(cow) == points(cheetah)\n"}, {"idx": 474, "response": "playful_friends(dog) = 4\nnon_playful_friends(dog) = 1\nwink(dog, cricket) = rule2()\nwink(dog, cricket) == True\nnot knows(sun_bear, defensive_plans, cricket) = rule1()\nnot knows(sun_bear, defensive_plans, cricket) == True\nnot knows(sun_bear, defensive_plans, cricket) == True\nraise_flag_of_peace(cricket, carp) = rule1()\nraise_flag_of_peace(cricket, carp) == True\nraise_flag_of_peace(cricket, carp) == True\nquestion = True", "answer": 1, "code": "rule1() = wink(dog, cricket) & not knows(sun_bear, defensive_plans, cricket) => raise_flag_of_peace(cricket, carp)\nrule2() = friends(dog) < 8 => wink(dog, cricket)\nrule3() = attack(snail, green_fields(cricket)) => not raise_flag_of_peace(cricket, carp)\nrule4(something) = give(something, magnifier, cheetah) => not knows(something, defensive_plans, cricket)\norder(rule3) > order(rule1) = True\n\nplayful_friends(dog) = 4\nnon_playful_friends(dog) = 1\ngive(sun_bear, magnifier, cheetah) = True\n\nquestion = raise_flag_of_peace(cricket, carp)\n"}, {"idx": 475, "response": "not offer_job_position(sea_bass, turtle) == True\nnot offer_job_position(sea_bass, turtle) == True\nwink(puffin, turtle) = rule2()\nwink(puffin, turtle) == True\nnot attack(turtle, green_fields, owner(penguin)) = rule2()\nattack(turtle, green_fields, owner(penguin)) == False\nnot attack(turtle, green_fields, owner(penguin)) == False\nshow_all_cards(tiger, amberjack) == True\nattack(turtle, green_fields, owner(penguin)) = rule3()\nattack(turtle, green_fields, owner(penguin)) == True\nattack(turtle, green_fields, owner(penguin)) == True\nknock_down(eel, fortress, canary) = rule1()\nknock_down(eel, fortress, canary) == True\nquestion = True", "answer": 1, "code": "rule1() = attacks(something, green_fields, owner(penguin)) => not knock_down(eel, fortress, canary)\nrule2() = not offer_job_position(sea_bass, turtle) & wink(puffin, turtle) => not attack(turtle, green_fields, owner(penguin))\nrule3() = show_all_cards(something, amberjack) => attack(turtle, green_fields, owner(penguin))\norder(rule2) > order(rule3) = True\n\nshow_all_cards(tiger, amberjack) = True\nnot offer_job_position(sea_bass, turtle) = True\n\nquestion = knock_down(eel, fortress, canary)\n"}, {"idx": 476, "response": "steals_points(grizzly_bear, doctorfish, 5) == True\nattacks(grizzly_bear, green_fields, cat) == True\nknock_down_fortress(lobster) = rule1()\nknock_down_fortress(lobster) == True\npoints(lobster) == points(dog) = rule6()\npoints(lobster) == points(dog) == True\npoints(lobster) == points(dog) == True\nquestion = True", "answer": 1, "code": "rule1() = steals_points(something, doctorfish, 5) & attacks(something, green_fields, cat) => knock_down_fortress(lobster)\nrule2() = has(meerkat, card) & color(card) in colors_of(flag_of_Belgium) => not give(meerkat, magnifying_glass, baboon)\nrule3() = has(tilapia, sharp_object) => owe(tilapia, money, lobster)\nrule4() = rolls_dice(something, baboon) => not points(lobster) == points(dog)\nrule5() = becomes_enemy(something, goldfish) => give(meerkat, magnifying_glass, baboon)\nrule6() = not knock_down_fortress(grizzly_bear) & owe(tilapia, money, lobster) => points(lobster) == points(dog)\norder(rule2) > order(rule5) = True\norder(rule6) > order(rule4) = True\n\nattacks(grizzly_bear, green_fields, cat) = True\nsteals_points(grizzly_bear, doctorfish, 5) = True\nbecomes_enemy(lion, goldfish) = True\nhas(tilapia, blade) = True\n\nquestion = points(lobster) == points(dog)\n"}, {"idx": 477, "response": "knocks_down(octopus, fortress, elephant) == True\nknocks_down(elephant, fortress, salmon) = rule1()\nknocks_down(elephant, fortress, salmon) == True\nknocks_down(something, fortress, salmon) = True\nattacks(halibut, green_fields, owner(grizzly_bear)) = rule2()\nattacks(halibut, green_fields, owner(grizzly_bear)) == True\nnot prepare_armor(something, meerkat) = rule3()\nnot prepare_armor(halibut, meerkat) == True\nnot attacks(halibut, green_fields, owner(grizzly_bear)) == False\nquestion = False", "answer": -1, "code": "rule1() = knocks_down(octopus, fortress, elephant) => knocks_down(elephant, fortress, salmon)\nrule2() = knocks_down(something, fortress, salmon) => attacks(halibut, green_fields, owner(grizzly_bear))\nrule3(something) = not prepare_armor(something, meerkat) => not attacks(something, green_fields, owner(grizzly_bear))\nrule4() = first_letter_of(name(elephant)) == first_letter_of(name(tilapia)) => not knocks_down(elephant, fortress, salmon)\norder(rule1) > order(rule4) = True\norder(rule3) > order(rule2) = True\n\nhas(elephant, blade) = True\nname(elephant, Chickpea) = True\nknocks_down(octopus, fortress, elephant) = True\nname(tilapia, Pashmak) = True\n\nquestion = attacks(halibut, green_fields, owner(grizzly_bear))\n"}, {"idx": 478, "response": "become_enemy(panther, cat) == True\nknock_down(cat, fortress, octopus) = rule1()\nknock_down(cat, fortress, octopus) == False\nknock_down(cat, fortress, octopus) == False\noffer_job_position(cat, phoenix) = rule4()\noffer_job_position(cat, phoenix) == True\nknock_down(cat, fortress, grizzly_bear) = rule2(cat)\nknock_down(cat, fortress, grizzly_bear) == False\nknock_down(cat, fortress, grizzly_bear) == False\nquestion = False", "answer": -1, "code": "rule1() = become_enemy(panther, cat) => not knock_down(cat, fortress, octopus)\nrule2(something) = not knock_down(something, fortress, octopus) & offer_job_position(something, phoenix) => not knock_down(something, fortress, grizzly_bear)\nrule3() = first_letter_of(name(cat)) == first_letter_of(name(panda_bear)) => not offer_job_position(cat, phoenix)\nrule4() = has(cat, card) and color(card) in primary_colors => offer_job_position(cat, phoenix)\nrule5() = owns(cat, luxury_aircraft) => offer_job_position(cat, phoenix)\norder(rule4) > order(rule3) = True\norder(rule5) > order(rule3) = True\n\nhas(cat, card) = True\ncolor(card, violet) = True\nname(cat, Meadow) = True\nowns(cat, luxury_aircraft) = True\nname(panda_bear, Max) = True\nbecome_enemy(panther, cat) = True\nknock_down(squirrel, fortress, cat) = True\n\nquestion = knock_down(cat, fortress, grizzly_bear)\n"}, {"idx": 479, "response": "show_cards(caterpillar, all_cards) to salmon == True\neat_food(hippopotamus, food_of(cricket)) = rule1()\neat_food(hippopotamus, food_of(cricket)) == True\nsupport(black_bear, phoenix) = rule2()\nsupport(black_bear, phoenix) == True\nquestion = True", "answer": 1, "code": "rule1() = show_cards(something, all_cards) to salmon => eat_food(hippopotamus, food_of(cricket))\nrule2() = eat_food(something, food_of(cricket)) => support(black_bear, phoenix)\nrule3() = has(hippopotamus, card) and color(card) in colors_of(flag_of_france) => not eat_food(hippopotamus, food_of(cricket))\nrule4() = owns(lobster, luxury_aircraft) => points(lobster) == points(black_bear)\norder(rule3) > order(rule1) = True\n\nshow_cards(caterpillar, all_cards) to salmon = True\nname(goldfish, Luna) = True\nhas(hippopotamus, card) = True\ncolor(card, white) = True\nhas(lobster, card) = True\ncolor(card, yellow) = True\nname(lobster, Tango) = True\nowns(lobster, luxury_aircraft) = True\n\nquestion = support(black_bear, phoenix)\n"}, {"idx": 480, "response": "removes(baboon, piece, squirrel) == True\nburn(warehouse, donkey) == False\nlearns(caterpillar, elementary_resource_management, tiger) = rule1()\nlearns(caterpillar, elementary_resource_management, tiger) == False\noffer_job_position(caterpillar, hummingbird) = rule1()\noffer_job_position(caterpillar, hummingbird) == False\nquestion = False", "answer": -1, "code": "rule1() = learns(something, elementary_resource_management, tiger) => offer_job_position(caterpillar, hummingbird)\nrule2(something) = removes(something, piece, squirrel) & not burn(warehouse, donkey) => learns(something, elementary_resource_management, tiger)\n\nremoves(baboon, piece, squirrel) = True\nburn(warehouse, donkey) = False\n\nquestion = offer_job_position(caterpillar, hummingbird)\n"}, {"idx": 481, "response": "proceed_to_spot(panther, spot_after(donkey)) == True\nprepare_armor(panther, halibut) == True\nburn_warehouse(panther, cheetah) = rule2()\nburn_warehouse(panther, cheetah) == True\nnot respect(grizzly_bear, kiwi) = rule1()\nrespect(grizzly_bear, kiwi) == False\nrespect(grizzly_bear, kiwi) == False\nquestion = False", "answer": -1, "code": "rule1() = burn_warehouse(something, cheetah) => not respect(grizzly_bear, kiwi)\nrule2() = proceed_to_spot(something, spot_after(donkey)) & prepare_armor(something, halibut) => burn_warehouse(something, cheetah)\n\nprepare_armor(panther, halibut) = True\nproceed_to_spot(panther, spot_after(donkey)) = True\n\nquestion = respect(grizzly_bear, kiwi)\n"}, {"idx": 482, "response": "knows(viperfish, defensive_plans, cow) == True\nneeds_support(salmon, cow) == False\nadd_conclusion(\"the cow rolls the dice for the eel\") = rule1()\nadd_conclusion(\"the cow rolls the dice for the eel\") == True\ncow_rolls_dice_for(eel) = False\nshow_all_cards(eel, spider) = rule2()\nshow_all_cards(eel, spider) == False\nquestion = False", "answer": -1, "code": "rule1() = knows(viperfish, defensive_plans, cow) & needs_support(salmon, cow) => add_conclusion(\"the cow rolls the dice for the eel\")\nrule2() = cow_rolls_dice_for(eel) => show_all_cards(eel, spider)\n\nkind_friends(cow) = 1\nunkind_friends(cow) = 1\nlost(cow, keys) = True\nknows(viperfish, defensive_plans, cow) = True\nneeds_support(salmon, cow) = False\n\nquestion = show_all_cards(eel, spider)\n"}, {"idx": 483, "response": "give(halibut, magnifier, grizzly_bear) == True\nknocks_down_fortress(halibut, kudu) == True\nprepare_armor(halibut, eagle) = rule1()\nprepare_armor(halibut, eagle) == True\nprepare_armor(eagle, dog) = rule2()\nprepare_armor(eagle, dog) == True\nnot learn(salmon, elementary_resource_management, eagle) = rule3()\nnot learn(salmon, elementary_resource_management, eagle) == True\nnot prepare_armor(eagle, dog) == True\nquestion = True", "answer": 1, "code": "rule1(something) = give(something, magnifier, grizzly_bear) & knocks_down_fortress(something, kudu) => prepare_armor(something, eagle)\nrule2() = prepare_armor(halibut, eagle) => prepare_armor(eagle, dog)\nrule3() = not learn(salmon, elementary_resource_management, eagle) => not prepare_armor(eagle, dog)\norder(rule3) > order(rule2) = True\n\ngive(halibut, magnifier, grizzly_bear) = True\nknocks_down_fortress(halibut, kudu) = True\n\nquestion = prepare_armor(eagle, dog)\n"}, {"idx": 484, "response": "has(panda_bear, device_to_connect_to_internet) == False\nhas(panda_bear, sharp_object) == True\nprepare_armor(panda_bear, carp) = rule4()\nprepare_armor(panda_bear, carp) == True\nnot attack(green_fields, owner(whale)) = rule2()\nattack(green_fields, owner(whale)) == False\nquestion = False", "answer": -1, "code": "rule1(something) = not respect(something, koala) => attack(green_fields, owner(whale))\nrule2(something) = prepare_armor(something, carp) => not attack(green_fields, owner(whale))\nrule3() = has(panda_bear, device_to_connect_to_internet) => prepare_armor(panda_bear, carp)\nrule4() = has(panda_bear, sharp_object) => prepare_armor(panda_bear, carp)\norder(rule1) > order(rule2) = True\n\nhas(panda_bear, guitar) = True\nhas(panda_bear, knife) = True\n\nquestion = attack(green_fields, owner(whale))\n"}, {"idx": 485, "response": "friends(grasshopper) = 1\nfriends(grasshopper) < 4 = True\nburn(warehouse, rabbit) = rule1()\nburn(warehouse, rabbit) == True\nwink(grasshopper, rabbit) = unknown\nquestion = unknown", "answer": 0, "code": "rule1() = friends(grasshopper) < 4 => burn(warehouse, rabbit)\nrule2() = wink(grasshopper, rabbit) => knock_down(fortress, rabbit, elephant)\n\nfriends(grasshopper) = 1\n\nquestion = knock_down(fortress, rabbit, elephant)\n"}, {"idx": 486, "response": "become_enemy(black_bear, salmon) == True\nraise_flag_of_peace(black_bear, caterpillar) == True\nshow_cards(black_bear, all, elephant) = rule1()\nshow_cards(black_bear, all, elephant) == True\nlearn(elephant, elementary_resource_management, octopus) = rule3()\nlearn(elephant, elementary_resource_management, octopus) == True\nlearn(elephant, basics_of_resource_management, octopus) = rule2()\nlearn(elephant, basics_of_resource_management, octopus) == False\nquestion = False", "answer": -1, "code": "rule1(something) = become_enemy(something, salmon) & raise_flag_of_peace(something, caterpillar) => show_cards(something, all, elephant)\nrule2() = respect(carp, elephant) => not learn(elephant, basics_of_resource_management, octopus)\nrule3() = show_cards(black_bear, all, elephant) => learn(elephant, elementary_resource_management, octopus)\norder(rule2) > order(rule3) = True\n\nbecome_enemy(black_bear, salmon) = True\nhas(black_bear, card) = True\ncolor(card, white) = True\nname(black_bear, Casper) = True\nraise_flag_of_peace(black_bear, caterpillar) = True\nname(grasshopper, Tango) = True\n\nquestion = learn(elephant, basics_of_resource_management, octopus)\n"}, {"idx": 487, "response": "has(phoenix, card) == True\ncolor(card(phoenix), yellow) == True\nhas(phoenix, something_to_sit_on) == True\nnot eat(phoenix, food_of(hummingbird)) = rule2()\nnot eat(phoenix, food_of(hummingbird)) == True\ngive(wolverine, magnifying_glass, phoenix) == True\nwink(aardvark, phoenix) == True\nnot burn(phoenix, warehouse_of(turtle)) = rule5()\nnot burn(phoenix, warehouse_of(turtle)) == True\nburn(phoenix, warehouse_of(turtle)) == False\nquestion = True", "answer": 1, "code": "rule1() = first_letter_of(name(aardvark)) == first_letter_of(name(zander)) => wink(aardvark, phoenix)\nrule2() = has(phoenix, something_to_sit_on) => not eat(phoenix, food_of(hummingbird))\nrule3() = has(aardvark, card) and color(card) in primary_colors => wink(aardvark, phoenix)\nrule4() = has(phoenix, card) and color(card) in primary_colors => not eat(phoenix, food_of(hummingbird))\nrule5() = give(wolverine, magnifying_glass, phoenix) & wink(aardvark, phoenix) => not burn(phoenix, warehouse_of(turtle))\nrule6() = has(wolverine, card) and color(card) in rainbow_colors => not give(wolverine, magnifying_glass, phoenix)\nrule7() = friends(wolverine) < 10 => give(wolverine, magnifying_glass, phoenix)\norder(rule7) > order(rule6) = True\n\nhas(aardvark, card) = True\ncolor(card(aardvark), green) = True\nname(aardvark, Casper) = True\nhas(phoenix, card) = True\ncolor(card(phoenix), yellow) = True\nhas(phoenix, club_chair) = True\nfriends(wolverine) = 6\nhas(wolverine, card) = True\ncolor(card(wolverine), indigo) = True\nname(zander, Milo) = True\n\nquestion = burn(phoenix, warehouse_of(turtle))\n"}, {"idx": 488, "response": "has(hummingbird, device_to_connect_to_internet) == True\nknows(hummingbird, defense_plan, sun_bear) = rule3()\nknows(hummingbird, defense_plan, sun_bear) == True\nknows(hummingbird, defense_plan, sun_bear) == True\nlearn(hummingbird, elementary_resource_management, rabbit) = rule1()\nlearn(hummingbird, elementary_resource_management, rabbit) == True\nlearn(hummingbird, elementary_resource_management, rabbit) == True\nquestion = True", "answer": 1, "code": "rule1(something) = knows(something, defense_plan, sun_bear) => learn(something, elementary_resource_management, rabbit)\nrule2() = proceed(something, spot_right_after(parrot)) => not knows(hummingbird, defense_plan, sun_bear)\nrule3() = has(hummingbird, device_to_connect_to_internet) => knows(hummingbird, defense_plan, sun_bear)\norder(rule3) > order(rule2) = True\n\nhas(hummingbird, cello) = True\n\nquestion = learn(hummingbird, elementary_resource_management, rabbit)\n"}, {"idx": 489, "response": "has(doctorfish, sharp_object) == False\nhas(doctorfish, violin) == True\nroll_dice(doctorfish, turtle) = rule1()\nroll_dice(doctorfish, turtle) == True\nrolls_dice(something, turtle) = rule2()\nrolls_dice(doctorfish, turtle) == True\nwink(canary, bat) = rule2()\nwink(canary, bat) == True\nquestion = True", "answer": 1, "code": "rule1() = has(doctorfish, sharp_object) => roll_dice(doctorfish, turtle)\nrule2() = rolls_dice(something, turtle) => wink(canary, bat)\nrule3() = owe(kudu, money, doctorfish) & sings(carp, song_of_victory, doctorfish) => not roll_dice(doctorfish, turtle)\nrule4() = fan_of(doctorfish, Chris_Ronaldo) => roll_dice(doctorfish, turtle)\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule4) = True\n\nhas(doctorfish, violin) = True\nfan_of(doctorfish, Chris_Ronaldo) = True\nowe(kudu, money, doctorfish) = True\n\nquestion = wink(canary, bat)\n"}, {"idx": 490, "response": "owns(turtle, time_machine) == True\nowe(turtle, money, gecko) = rule1()\nowe(turtle, money, gecko) == True\nrespect(crocodile, gecko) = rule2()\nrespect(crocodile, gecko) == True\nnot knock_down_fortress(gecko, sheep) = rule6()\nknock_down_fortress(gecko, sheep) == False\nknock_down_fortress(gecko, sheep) == False\nquestion = False", "answer": -1, "code": "rule1() = owns(turtle, time_machine) => owe(turtle, money, gecko)\nrule2() = remove(something, piece, catfish) => respect(crocodile, gecko)\nrule3() = first_letter_of(name(turtle)) == first_letter_of(name(aardvark)) => owe(turtle, money, gecko)\nrule4(something) = proceeds_to(something, spot_right_after(grasshopper)) => sing_victory_song(something, hippopotamus)\nrule5() = first_letter_of(name(crocodile)) == first_letter_of(name(zander)) => not respect(crocodile, gecko)\nrule6() = owe(turtle, money, gecko) & respect(crocodile, gecko) => not knock_down_fortress(gecko, sheep)\nrule7() = not know(squirrel, defensive_plans, gecko) => not become_enemy(gecko, meerkat)\norder(rule2) > order(rule5) = True\n\nname(aardvark, Meadow) = True\nname(crocodile, Meadow) = True\nremove(eagle, piece, catfish) = True\nfriends(gecko) = 10\nhas(gecko, bench) = True\nproceeds_to(gecko, spot_right_after(grasshopper)) = True\nowns(turtle, time_machine) = True\nname(turtle, Mojo) = True\nname(zander, Max) = True\nnot_need_support(cat, gecko) = True\nknow(squirrel, defensive_plans, gecko) = False\n\nquestion = knock_down_fortress(gecko, sheep)\n"}, {"idx": 491, "response": "owns(koala, luxury_aircraft) == True\nsings(koala, song_of_victory, eel) = rule1()\nsings(koala, song_of_victory, eel) == True\nburns(koala, warehouse, eel) = rule2()\nburns(koala, warehouse, eel) == True\nknows(cat, defense_plan, eel) == False\nnot knows(cat, defense_plan, eel) == True\nknows(eel, defense_plan, viperfish) = rule2()\nknows(eel, defense_plan, viperfish) == True\nquestion = True", "answer": 1, "code": "rule1() = owns(koala, luxury_aircraft) => sings(koala, song_of_victory, eel)\nrule2() = not knows(cat, defense_plan, eel) & burns(koala, warehouse, eel) => knows(eel, defense_plan, viperfish)\nrule3() = has(koala, card) and starts_with(color(card), \"h\") => sings(koala, song_of_victory, eel)\nrule4(something) = shows(something, all_cards, squirrel) => not knows(something, defense_plan, eel)\n\nshows(cat, all_cards, squirrel) = True\nhas(koala, card) = True\ncolor(card, white) = True\nowns(koala, luxury_aircraft) = True\n\nquestion = knows(eel, defense_plan, viperfish)\n"}, {"idx": 492, "response": "has(cat, card) == True\ncolor(card) in primary_colors == True\nnot knock_down(cat, fortress, cheetah) = rule3()\nnot knock_down(cat, fortress, cheetah) == True\nnot knock_down(cat, fortress, cheetah) == True\neat(kudu, food, starfish) = rule4()\neat(kudu, food, starfish) == True\neat(kudu, food, starfish) == True\nquestion = True", "answer": 1, "code": "rule1() = took(cat, bike) => not knock_down(cat, fortress, cheetah)\nrule2() = raise_flag(something, peace, polar_bear) => knock_down(cat, fortress, cheetah)\nrule3() = has(cat, card) and color(card) in primary_colors => not knock_down(cat, fortress, cheetah)\nrule4() = knock_down(something, fortress, cheetah) => eat(kudu, food, starfish)\norder(rule1) > order(rule2) = True\norder(rule3) > order(rule2) = True\n\nhas(cat, card) = True\ncolor(card, yellow) = True\nraise_flag(oscar, peace, polar_bear) = True\n\nquestion = eat(kudu, food, starfish)\n"}, {"idx": 493, "response": "has(raven, card) == True\ncolor(card, white) == True\nnot respect(raven, crocodile) = rule2()\nnot respect(raven, crocodile) == True\nfirst_letter_of(name(raven)) == first_letter_of(name(starfish)) == True\nnot respect(raven, crocodile) = rule3()\nnot respect(raven, crocodile) == True\nhas(hummingbird, card) == True\ncolor(card, red) == True\nneeds_support(hummingbird, crocodile) = rule4()\nneeds_support(hummingbird, crocodile) == True\nadd_conclusion(\"the crocodile is not going to proceed to the spot that is right after the spot of the amberjack\") = rule1()\nadd_conclusion(\"the crocodile is not going to proceed to the spot that is right after the spot of the amberjack\") == True\nquestion = True", "answer": 1, "code": "rule1() = not respect(raven, crocodile) & needs_support(hummingbird, crocodile) => add_conclusion(\"the crocodile is not going to proceed to the spot that is right after the spot of the amberjack\")\nrule2() = has(raven, card) and color(card) in rainbow_colors => not respect(raven, crocodile)\nrule3() = first_letter_of(name(raven)) == first_letter_of(name(starfish)) => not respect(raven, crocodile)\nrule4() = has(hummingbird, card) and color(card) in colors_of_Italy_flag => needs_support(hummingbird, crocodile)\n\nhas(hummingbird, card) = True\ncolor(card, red) = True\nhas(raven, card) = True\ncolor(card, white) = True\nname(raven, Lucy) = True\nname(starfish, Lily) = True\n\nquestion = \"the crocodile is not going to proceed to the spot that is right after the spot of the amberjack\" in conclusions\n"}, {"idx": 494, "response": "has(grasshopper, card) == True\ncolor(card, green) == True\ncolor(card) in primary_colors = True\nraise_flag_of_peace(grasshopper, polar_bear) = rule1()\nraise_flag_of_peace(grasshopper, polar_bear) == True\nneed_support(polar_bear, sea_bass) = rule2()\nneed_support(polar_bear, sea_bass) == True\nquestion = True", "answer": 1, "code": "rule1() = has(grasshopper, card) and color(card) in primary_colors => raise_flag_of_peace(grasshopper, polar_bear)\nrule2() = raise_flag_of_peace(grasshopper, polar_bear) => need_support(polar_bear, sea_bass)\nrule3() = has(grasshopper, device_to_connect_to_internet) => not raise_flag_of_peace(grasshopper, polar_bear)\norder(rule3) > order(rule1) = True\n\nname(cheetah, Cinnamon) = True\nhas(grasshopper, card) = True\ncolor(card, green) = True\nhas(grasshopper, cell_phone) = True\nname(grasshopper, Max) = True\n\nquestion = need_support(polar_bear, sea_bass)\n"}, {"idx": 495, "response": "has(lobster, card) == True\ncolor(card, orange) == True\nstarts_with(color(card), \"o\") == True\nnot need_support(lobster, turtle) = rule1()\nnot need_support(lobster, turtle) == False\nremove_from_board(aardvark, piece_of(cat)) == True\nneed_support(lobster, turtle) = rule2()\nneed_support(lobster, turtle) == True\nquestion = True", "answer": 1, "code": "rule1() = has(lobster, card) and starts_with(color(card), \"o\") => not need_support(lobster, turtle)\nrule2() = remove_from_board(something, piece_of(cat)) => need_support(lobster, turtle)\nrule3() = learns(something, elementary_resource_management_from(moose)) => eat_food(squirrel, food_of(turtle))\nrule4() = has(turtle, card) and color(card) in rainbow_colors => offer_job_position(turtle, bat)\nrule5(something) = not knock_down(something, fortress_of(amberjack)) and offer_job_position(something, bat) => need_support(something, grasshopper)\nrule6() = has(squirrel, something_to_sit_on) => not eat_food(squirrel, food_of(turtle))\nrule7() = owns(squirrel, luxury_aircraft) => not eat_food(squirrel, food_of(turtle))\nrule8() = burn(something, warehouse_of(donkey)) => not knock_down(turtle, fortress_of(amberjack))\norder(rule1) > order(rule2) = True\norder(rule3) > order(rule6) = True\norder(rule3) > order(rule7) = True\n\nremove_from_board(aardvark, piece_of(cat)) = True\nhas(lobster, card) = True\ncolor(card, orange) = True\nburn(sheep, warehouse_of(donkey)) = True\nhas(squirrel, plastic_bag) = True\nowns(squirrel, luxury_aircraft) = True\nhas(turtle, card) = True\ncolor(card, orange) = True\nhates(turtle, Chris_Ronaldo) = True\nhas(turtle, hot_chocolate) = True\n\nquestion = need_support(turtle, grasshopper)\n"}, {"idx": 496, "response": "has(wolverine, card) == True\ncolor(card) in flag_colors(Japan) == True\nremove(wolverine, piece, blobfish) = rule2()\nremove(wolverine, piece, blobfish) == True\nname(wolverine, Lola) == True\nname(sun_bear, Lily) == True\nfirst_letter_of(name(wolverine)) == first_letter_of(name(sun_bear)) == False\nknow(wolverine, defense_plans, panther) = rule1()\nknow(wolverine, defense_plans, panther) == not know(wolverine, defense_plans, panther)\nknow(wolverine, defense_plans, panther) == not know(wolverine, defense_plans, panther)\nquestion = not know(wolverine, defense_plans, panther)", "answer": 0, "code": "rule1(something) = remove(something, piece, blobfish) => not know(something, defense_plans, panther)\nrule2() = has(wolverine, card) and color(card) in flag_colors(Japan) => remove(wolverine, piece, blobfish)\nrule3() = first_letter_of(name(wolverine)) == first_letter_of(name(sun_bear)) => remove(wolverine, piece, blobfish)\n\nname(sun_bear, Lily) = True\nhas(wolverine, card) = True\ncolor(card, yellow) = True\nname(wolverine, Lola) = True\n\nquestion = know(wolverine, defense_plans, panther)\n"}, {"idx": 497, "response": "prepares_armor(sheep, squirrel) == True\nbecome_enemy(sheep, squirrel) = rule1()\nbecome_enemy(sheep, squirrel) == True\nnot burn_warehouse(sheep, warehouse_of(phoenix)) = rule4()\nnot burn_warehouse(sheep, warehouse_of(phoenix)) == True\neat_food(sheep, food_of(cricket)) = rule4()\neat_food(sheep, food_of(cricket)) == True\nquestion = True", "answer": 1, "code": "rule1(something) = learns(something, basics_of_resource_management, squirrel) => become_enemy(something, squirrel)\nrule2() = rolls_dice(something, turtle) => not eat_food(sheep, food_of(cricket))\nrule3() = sings_song(hare, victory, sheep) & not need_support(carp, sheep) => not burn_warehouse(sheep, warehouse_of(phoenix))\nrule4() = become_enemy(something, squirrel) & not burn_warehouse(something, warehouse_of(phoenix)) => eat_food(something, food_of(cricket))\norder(rule4) > order(rule2) = True\n\nsings_song(hare, victory, sheep) = True\nprepares_armor(sheep, squirrel) = True\nnot need_support(carp, sheep) = True\n\nquestion = eat_food(sheep, food_of(cricket))\n"}, {"idx": 498, "response": "has(buffalo, card) == True\ncolor(card) in flag_colors(japan) == True\nraise_flag_of_peace(buffalo, moose) = rule4()\nraise_flag_of_peace(buffalo, moose) == True\nfriends(buffalo) < 10 == False\nprepare_armor(moose, swordfish) = rule3()\nprepare_armor(moose, swordfish) == True\nnot burn_warehouse(moose, crocodile) = rule2()\nburn_warehouse(moose, crocodile) == False\nprepare_armor(moose, wolverine) = rule5()\nprepare_armor(moose, wolverine) == True\nquestion = True", "answer": 1, "code": "rule1(something) = not offer_job_position(something, cat) => not need_support(something, moose)\nrule2() = knocks_down(something, fortress, starfish) => not burn_warehouse(moose, crocodile)\nrule3() = not knocks_down(eel, fortress, moose) => prepare_armor(moose, swordfish)\nrule4() = has(buffalo, card) and color(card) in flag_colors(japan) => raise_flag_of_peace(buffalo, moose)\nrule5() = not burn_warehouse(something, crocodile) & prepare_armor(something, swordfish) => prepare_armor(something, wolverine)\nrule6() = friends(buffalo) < 10 => raise_flag_of_peace(buffalo, moose)\n\nhas(buffalo, card) = True\ncolor(card, white) = True\nfriends(buffalo) = 16\nknocks_down(elephant, fortress, starfish) = True\nknocks_down(eel, fortress, moose) = False\noffer_job_position(oscar, cat) = False\n\nquestion = prepare_armor(moose, wolverine)\n"}, {"idx": 499, "response": "has(kangaroo, card) and color(card, orange) == True\nhas(kangaroo, card) == True\ncolor(card, orange) == True\nbecome_enemy(kangaroo, turtle) = rule1()\nbecome_enemy(kangaroo, turtle) == True\nowe(turtle, money, eagle) = not become_enemy(kangaroo, turtle)\nowe(turtle, money, eagle) == False\nowe(turtle, money, eagle) == False\nquestion = False", "answer": -1, "code": "rule1() = has(kangaroo, card) and color(card) in rainbow_colors => become_enemy(kangaroo, turtle)\nrule2() = not has(kangaroo, keys) => become_enemy(kangaroo, turtle)\nrule3() = friends(kangaroo) < 5 => not become_enemy(kangaroo, turtle)\nrule4() = first_letter_of(name(kangaroo)) == first_letter_of(name(baboon)) => not become_enemy(kangaroo, turtle)\nrule5() = become_enemy(kangaroo, turtle) => not owe(turtle, money, eagle)\norder(rule3) > order(rule1) = True\norder(rule3) > order(rule2) = True\norder(rule4) > order(rule1) = True\norder(rule4) > order(rule2) = True\n\nhas(kangaroo, card) and color(card, orange) = True\nfriends(kangaroo) = 14\nname(kangaroo, Luna) = True\nhas(kangaroo, keys) = True\n\nquestion = owe(turtle, money, eagle)\n"}]