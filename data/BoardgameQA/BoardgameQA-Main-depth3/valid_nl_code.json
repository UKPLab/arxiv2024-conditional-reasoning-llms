[
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sheep prepares armor for the amberjack, then the amberjack removes one of the pieces of the raven\nRule2: If the oscar respects the parrot, then the parrot does not hold the same number of points as the amberjack\nRule3: If the hummingbird has a name whose first letter is the same as the first letter of the pig's name, then it knows the defensive plans of the halibut\nRule4: If something respects the ferret, then it prepares armor for the amberjack\nRule5: If the puffin does not wink at the grizzly bear, then the grizzly bear does not offer a job to the amberjack\nRule6: If the sheep has a name whose first letter is the same as the first letter of the hare's name, then it does not prepare armor for the amberjack\nRule7: If the grizzly bear has something to drink, then it offers a job position to the amberjack\nRule8: If the sheep has fewer than six friends, then it prepares armor for the amberjack\nRule9: If the grizzly bear offers a job to the amberjack and the parrot holds an equal number of points as the amberjack, then the amberjack gives a magnifying glass to the wolverine\nRule10: If at least one animal burns the warehouse that is in possession of the canary, then the sea bass does not prepare armor for the amberjack\nRule11: If the sea bass does not prepare armor for the amberjack, then the amberjack does not remove one of the pieces of the raven\nRule12: If something winks at the panther, then it does not know the defense plan of the halibut\nRule13: If something removes from the board one of the pieces of the raven but does not give a magnifying glass to the wolverine, then it removes one of the pieces of the carp\nRule14: If the parrot has a sharp object, then it holds the same number of points as the amberjack\nRule15: If at least one animal knows the defensive plans of the halibut, then the amberjack does not give a magnifier to the wolverine\nRule16: If the sheep has a card whose color is one of the rainbow colors, then the sheep prepares armor for the amberjack\nRule17: If the hummingbird has a card whose color starts with the letter \"b\", then the hummingbird knows the defense plan of the halibut.\n\nRule1 is preferred over Rule11\nRule12 is preferred over Rule17\nRule12 is preferred over Rule3\nRule14 is preferred over Rule2\nRule15 is preferred over Rule9\nRule4 is preferred over Rule10\nRule5 is preferred over Rule7\nRule6 is preferred over Rule16\nRule6 is preferred over Rule8\n\nThe current state of the game is as follows\nThe grizzly bear has a banana-strawberry smoothie\nThe hummingbird has a card that is black in color\nThe hummingbird is named Milo\nThe oscar respects the parrot\nThe parrot has a cutter\nThe pig is named Blossom\nThe sheep has 11 friends and is named Buddy\nThe sheep has a card that is red in color\nThe swordfish burns the warehouse of the canary\n\nBased on the game state and the rules and preferences, does the amberjack remove from the board one of the pieces of the carp?\nQuestion: Does the amberjack remove from the board one of the pieces of the carp?",
        "idx": 0,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sheep prepares armor for the amberjack, then the amberjack removes one of the pieces of the raven\nrule1() = prepare_armor(sheep, amberjack) => remove(amberjack, piece_of(raven))\n# Rule2: The parrot does not hold the same number of points as the amberjack, in the case where the oscar respects the parrot\nrule2() = respects(oscar, parrot) => not same_points(parrot, amberjack)\n# Rule3: Regarding the hummingbird, if it has a name whose first letter is the same as the first letter of the pig's name, then we can conclude that it knows the defensive plans of the halibut\nrule3() = first_letter_of(name(hummingbird)) == first_letter_of(name(pig)) => knows(defensive_plans_of(halibut), hummingbird)\n# Rule4: If something respects the ferret, then it prepares armor for the amberjack, too\nrule4(something) = respects(something, ferret) => prepare_armor(something, amberjack)\n# Rule5: If the puffin does not wink at the grizzly bear, then the grizzly bear does not offer a job to the amberjack\nrule5() = not wink(puffin, grizzly_bear) => not offer_job(grizzly_bear, amberjack)\n# Rule6: Regarding the sheep, if it has a name whose first letter is the same as the first letter of the hare's name, then we can conclude that it does not prepare armor for the amberjack\nrule6() = first_letter_of(name(sheep)) == first_letter_of(name(hare)) => not prepare_armor(sheep, amberjack)\n# Rule7: Regarding the grizzly bear, if it has something to drink, then we can conclude that it offers a job position to the amberjack\nrule7() = has(grizzly_bear, drink) => offer_job(grizzly_bear, amberjack)\n# Rule8: Regarding the sheep, if it has fewer than six friends, then we can conclude that it prepares armor for the amberjack\nrule8() = friends(sheep) < 6 => prepare_armor(sheep, amberjack)\n# Rule9: For the amberjack, if the belief is that the grizzly bear offers a job to the amberjack and the parrot holds an equal number of points as the amberjack, then you can add \"the amberjack gives a magnifying glass to the wolverine\" to your conclusions\nrule9() = offer_job(grizzly_bear, amberjack) & same_points(parrot, amberjack) => give(amberjack, magnifying_glass, wolverine)\n# Rule10: If at least one animal burns the warehouse that is in possession of the canary, then the sea bass does not prepare armor for the amberjack\nrule10(something) = burn(warehouse_of(canary), something) => not prepare_armor(sea_bass, amberjack)\n# Rule11: If the sea bass does not prepare armor for the amberjack, then the amberjack does not remove one of the pieces of the raven\nrule11() = not prepare_armor(sea_bass, amberjack) => not remove(amberjack, piece_of(raven))\n# Rule12: If something winks at the panther, then it does not know the defense plan of the halibut\nrule12(something) = wink(something, panther) => not knows(defense_plan_of(halibut), something)\n# Rule13: If you see that something removes from the board one of the pieces of the raven but does not give a magnifying glass to the wolverine, what can you certainly conclude? You can conclude that it removes one of the pieces of the carp\nrule13(something) = remove(something, piece_of(raven)) & not give(something, magnifying_glass, wolverine) => remove(something, piece_of(carp))\n# Rule14: Regarding the parrot, if it has a sharp object, then we can conclude that it holds the same number of points as the amberjack\nrule14() = has(parrot, sharp_object) => same_points(parrot, amberjack)\n# Rule15: If at least one animal knows the defensive plans of the halibut, then the amberjack does not give a magnifier to the wolverine\nrule15(something) = knows(defensive_plans_of(halibut), something) => not give(amberjack, magnifying_glass, wolverine)\n# Rule16: If the sheep has a card whose color is one of the rainbow colors, then the sheep prepares armor for the amberjack\nrule16() = has(sheep, card) and color(card) in rainbow_colors => prepare_armor(sheep, amberjack)\n# Rule17: If the hummingbird has a card whose color starts with the letter \"b\", then the hummingbird knows the defense plan of the halibut.\nrule17() = has(hummingbird, card_with(color_starting_with(\"b\"))) => knows(defense_plan_of(halibut), hummingbird)\n# Rule1 is preferred over Rule11\norder(rule1) > order(rule11) = True\n# Rule12 is preferred over Rule17\norder(rule12) > order(rule17) = True\n# Rule12 is preferred over Rule3\norder(rule12) > order(rule3) = True\n# Rule14 is preferred over Rule2\norder(rule14) > order(rule2) = True\n# Rule15 is preferred over Rule9\norder(rule15) > order(rule9) = True\n# Rule4 is preferred over Rule10\norder(rule4) > order(rule10) = True\n# Rule5 is preferred over Rule7\norder(rule5) > order(rule7) = True\n# Rule6 is preferred over Rule16\norder(rule6) > order(rule16) = True\n# Rule6 is preferred over Rule8\norder(rule6) > order(rule8) = True\n\n# The current state of the game is as follows\n# The grizzly bear has a banana-strawberry smoothie\nhas(grizzly_bear, banana_strawberry_smoothie) = True\n# The hummingbird has a card that is black in color\nhas(hummingbird, card_with(black_color)) = True\n# The hummingbird is named Milo\nname(hummingbird, Milo) = True\n# The oscar respects the parrot\nrespects(oscar, parrot) = True\n# The parrot has a cutter\nhas(parrot, cutter) = True\n# The pig is named Blossom\nname(pig, Blossom) = True\n# The sheep has 11 friends, and is named Buddy\nfriends(sheep) = 11\nname(sheep, Buddy) = True\n# The sheep has a card that is red in color\nhas(sheep, card_with(red_color)) = True\n# The swordfish burns the warehouse of the canary\nburn(warehouse_of(canary), swordfish) = True\n\n# Based on the game state and the rules and preferences, does the amberjack remove from the board one of the pieces of the carp?\nquestion = remove(amberjack, piece_of(carp))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals proceed to the spot right after the pig, you can be certain that it will not raise a peace flag for the caterpillar\nRule2: If the snail has more than 6 friends, then it does not show all her cards to the kudu\nRule3: The donkey does not wink at the carp, in the case where the zander rolls the dice for the donkey\nRule4: If you are positive that you saw one of the animals give a magnifying glass to the amberjack, you can be certain that it will also wink at the carp\nRule5: If the name of the donkey starts with the same letter as the name of the penguin, then the donkey gives a magnifying glass to the amberjack\nRule6: If the snail has a card with a color from the rainbow colors, then it does not show all her cards to the kudu\nRule7: If at least one animal shows all her cards to the kudu, then the donkey proceeds to the spot right after the pig\nRule8: If the goldfish gives a magnifying glass to the donkey and the squirrel learns elementary resource management from the donkey, then the donkey does not give a magnifying glass to the amberjack\nRule9: If the snail has a device to connect to the internet, then it shows all her cards to the kudu\n\nRule2 is preferred over Rule9\nRule3 is preferred over Rule4\nRule5 is preferred over Rule8\nRule6 is preferred over Rule9\n\nThe current state of the game is as follows\nThe donkey is named Charlie\nThe goldfish gives a magnifying glass to the donkey\nThe penguin is named Casper\nThe snail has a card that is white in color and has a cell phone\nThe squirrel learns elementary resource management from the donkey\n\nBased on the game state and the rules and preferences, does the donkey raise a peace flag for the caterpillar?\nQuestion: Does the donkey raise a peace flag for the caterpillar?",
        "idx": 1,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals proceeds to the spot right after the pig, you can be certain that it will not raise a peace flag for the caterpillar\nrule1() = proceed(something, spot_right_after(spot_of(pig))) => not raise_flag_of_peace(something, caterpillar)\n# Rule2: Regarding the snail, if it has more than 6 friends, then we can conclude that it does not show all her cards to the kudu\nrule2() = friends(snail) > 6 => not show_all_cards(snail, kudu)\n# Rule3: The donkey does not wink at the carp, in the case where the zander rolls the dice for the donkey\nrule3() = roll_dice(zander, donkey) => not wink(donkey, carp)\n# Rule4: If you are positive that you saw one of the animals gives a magnifying glass to the amberjack, you can be certain that it will also wink at the carp\nrule4() = give_magnifying_glass(something, amberjack) => wink(something, carp)\n# Rule5: Regarding the donkey, if it has a name whose first letter is the same as the first letter of the penguin's name, then we can conclude that it gives a magnifying glass to the amberjack\nrule5() = first_letter_of(name(donkey)) == first_letter_of(name(penguin)) => give_magnifying_glass(donkey, amberjack)\n# Rule6: If the snail has a card whose color is one of the rainbow colors, then the snail does not show all her cards to the kudu\nrule6() = has(snail, card_with(color_in(rainbow_colors))) => not show_all_cards(snail, kudu)\n# Rule7: If at least one animal shows all her cards to the kudu, then the donkey proceeds to the spot that is right after the spot of the pig\nrule7(something) = show_all_cards(something, kudu) => proceed(donkey, spot_right_after(spot_of(pig)))\n# Rule8: For the donkey, if the belief is that the goldfish gives a magnifying glass to the donkey and the squirrel learns elementary resource management from the donkey, then you can add that \"the donkey is not going to give a magnifying glass to the amberjack\" to your conclusions\nrule8() = give_magnifying_glass(goldfish, donkey) & learn(squirrel, elementary_resource_management_from(donkey)) => not give_magnifying_glass(donkey, amberjack)\n# Rule9: Regarding the snail, if it has a device to connect to the internet, then we can conclude that it shows all her cards to the kudu.\nrule9() = has(snail, connect_to_internet(device)) => show_all_cards(snail, kudu)\n# Rule2 is preferred over Rule9\norder(rule2) > order(rule9) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule5 is preferred over Rule8\norder(rule5) > order(rule8) = True\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n\n# The current state of the game is as follows\n# The donkey is named Charlie\nname(donkey, Charlie) = True\n# The goldfish gives a magnifier to the donkey\ngive_magnifying_glass(goldfish, donkey) = True\n# The penguin is named Casper\nname(penguin, Casper) = True\n# The snail has a card that is white in color, and has a cell phone\nhas(snail, card_with(white_color)) = True\nhas(snail, cell_phone) = True\n# The squirrel learns the basics of resource management from the donkey\nlearn(squirrel, elementary_resource_management_from(donkey)) = True\n\n# Based on the game state and the rules and preferences, does the donkey raise a peace flag for the caterpillar?\nquestion = raise_flag_of_peace(donkey, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the halibut has a card whose color starts with the letter \"w\", then it does not respect the cheetah\nRule2: If the hippopotamus has something to sit on, then it holds the same number of points as the tiger\nRule3: If the hippopotamus does not hold the same number of points as the tiger but the sheep shows her cards to the tiger, then the tiger gives a magnifying glass to the turtle\nRule4: If at least one animal attacks the green fields of the oscar, then the turtle knocks down the fortress that belongs to the black bear\nRule5: If the hummingbird raises a peace flag for the tiger, then the tiger does not give a magnifying glass to the turtle\nRule6: If at least one animal eats the food that belongs to the bat, then the hippopotamus does not hold an equal number of points as the tiger\nRule7: If something prepares armor for the tilapia, then it shows her cards to the tiger\nRule8: If the halibut does not respect the cheetah, then the cheetah attacks the green fields whose owner is the oscar\nRule9: If the halibut has a leafy green vegetable, then it does not respect the cheetah\n\nRule3 is preferred over Rule5\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe amberjack needs support from the bat\nThe halibut has a card that is green in color\nThe halibut has a trumpet\nThe sheep does not roll the dice for the tilapia\n\nBased on the game state and the rules and preferences, does the turtle knock down the fortress of the black bear?\nQuestion: Does the turtle knock down the fortress of the black bear?",
        "idx": 2,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the halibut, if it has a card whose color starts with the letter \"w\", then we can conclude that it does not respect the cheetah\nrule1() = has(halibut, card_with(color_starting_with(\"w\"))) => not respects(halibut, cheetah)\n# Rule2: If the hippopotamus has something to sit on, then the hippopotamus holds the same number of points as the tiger\nrule2() = has(hippopotamus, something_to_sit_on) => points(hippopotamus) == points(tiger)\n# Rule3: For the tiger, if the belief is that the hippopotamus does not hold the same number of points as the tiger but the sheep shows her cards (all of them) to the tiger, then you can add \"the tiger gives a magnifying glass to the turtle\" to your conclusions\nrule3() = not (points(hippopotamus) == points(tiger)) & show_cards(sheep, tiger) => add_conclusion(\"the tiger gives a magnifying glass to the turtle\")\n# Rule4: If at least one animal attacks the green fields of the oscar, then the turtle knocks down the fortress that belongs to the black bear\nrule4() = attack_green_fields(something, oscar) => knock_down_fortress(turtle, fortress_of(black_bear))\n# Rule5: The tiger does not give a magnifying glass to the turtle, in the case where the hummingbird raises a peace flag for the tiger\nrule5() = raise_flag_of_peace(hummingbird, tiger) => not give_magnifying_glass(tiger, turtle)\n# Rule6: If at least one animal eats the food that belongs to the bat, then the hippopotamus does not hold an equal number of points as the tiger\nrule6() = eat_food(something, food_of(bat)) => not (points(hippopotamus) == points(tiger))\n# Rule7: If something prepares armor for the tilapia, then it shows her cards (all of them) to the tiger, too\nrule7() = prepare_armor(something, tilapia) => show_cards(something, tiger)\n# Rule8: If the halibut does not respect the cheetah, then the cheetah attacks the green fields whose owner is the oscar\nrule8() = not respects(halibut, cheetah) => attack_green_fields(cheetah, green_fields_of(oscar))\n# Rule9: Regarding the halibut, if it has a leafy green vegetable, then we can conclude that it does not respect the cheetah.\nrule9() = has(halibut, leafy_green_vegetable) => not respects(halibut, cheetah)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The amberjack needs support from the bat\nneeds_support(amberjack, bat) = True\n# The halibut has a card that is green in color\nhas(halibut, card_with(green_color)) = True\n# The halibut has a trumpet\nhas(halibut, trumpet) = True\n# The sheep does not roll the dice for the tilapia\nnot roll_dice(sheep, tilapia) = True\n\n# Based on the game state and the rules and preferences, does the turtle knock down the fortress of the black bear?\nquestion = knock_down_fortress(turtle, fortress_of(black_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals proceed to the spot that is right after the spot of the grasshopper, you can be certain that it will also roll the dice for the leopard\nRule2: If the whale has a card with a primary color, then it proceeds to the spot that is right after the spot of the grasshopper\nRule3: If you are positive that one of the animals does not respect the kudu, you can be certain that it will not raise a peace flag for the zander\nRule4: If the buffalo does not attack the green fields of the leopard but the whale rolls the dice for the leopard, then the leopard raises a flag of peace for the zander\nRule5: If you are positive that one of the animals eats the food of the raven, you can be certain that it will not know the defense plan of the cat\nRule6: If you are positive that one of the animals does not know the defense plan of the cat, you can be certain that it will not attack the green fields of the leopard\n\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe buffalo eats the food of the raven\nThe whale has a card that is green in color\n\nBased on the game state and the rules and preferences, does the leopard raise a peace flag for the zander?\nQuestion: Does the leopard raise a peace flag for the zander?",
        "idx": 3,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals proceeds to the spot that is right after the spot of the grasshopper, you can be certain that it will also roll the dice for the leopard\nrule1(something) = proceed(something, spot_right_after(spot_of(grasshopper))) => roll_dice(something, leopard)\n# Rule2: Regarding the whale, if it has a card with a primary color, then we can conclude that it proceeds to the spot that is right after the spot of the grasshopper\nrule2() = has(whale, card_with(primary_color)) => proceed(whale, spot_right_after(spot_of(grasshopper)))\n# Rule3: If you are positive that one of the animals does not respect the kudu, you can be certain that it will not raise a peace flag for the zander\nrule3(something) = not respects(something, kudu) => not raise_flag_of_peace(something, zander)\n# Rule4: For the leopard, if the belief is that the buffalo does not attack the green fields of the leopard but the whale rolls the dice for the leopard, then you can add \"the leopard raises a flag of peace for the zander\" to your conclusions\nrule4() = not attack(green_fields_of(leopard), buffalo) & roll_dice(whale, leopard) => raise_flag_of_peace(leopard, zander)\n# Rule5: If you are positive that you saw one of the animals eats the food of the raven, you can be certain that it will not know the defense plan of the cat\nrule5(something) = eats_food_of(something, raven) => not knows(defense_plan_of(cat), something)\n# Rule6: If you are positive that one of the animals does not know the defense plan of the cat, you can be certain that it will not attack the green fields of the leopard.\nrule6(something) = not knows(defense_plan_of(cat), something) => not attack(green_fields_of(leopard), something)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The buffalo eats the food of the raven\neats_food_of(buffalo, raven) = True\n# The whale has a card that is green in color\nhas(whale, card_with(green_color)) = True\n\n# Based on the game state and the rules and preferences, does the leopard raise a peace flag for the zander?\nquestion = raise_flag_of_peace(leopard, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon has fewer than 8 friends, then it does not become an actual enemy of the canary\nRule2: If something winks at the mosquito, then it does not knock down the fortress of the grizzly bear\nRule3: If at least one animal needs the support of the eagle, then the canary winks at the cheetah\nRule4: If the cat has a name whose first letter is the same as the first letter of the sheep's name, then the cat attacks the green fields of the canary\nRule5: If the cat has a card whose color is one of the rainbow colors, then the cat attacks the green fields of the canary\nRule6: If the canary has a card whose color starts with the letter \"w\", then it winks at the mosquito\nRule7: The jellyfish respects the black bear whenever at least one animal steals five points from the amberjack\nRule8: If the canary has more than 6 friends, then it does not wink at the mosquito\nRule9: If the canary has a name whose first letter is the same as the first letter of the oscar's name, then it winks at the mosquito\nRule10: If the baboon has a leafy green vegetable, then it becomes an enemy of the canary\nRule11: The canary knocks down the fortress of the grizzly bear whenever at least one animal respects the black bear\nRule12: If at least one animal needs the support of the hare, then it will not proceed to the spot right after the whale\nRule13: If the baboon does not become an actual enemy of the canary but the cat attacks the green fields whose owner is the canary, then the canary needs support from the hare\nRule14: If the donkey has a musical instrument, then it needs support from the eagle\nRule15: If the donkey has a name whose first letter is the same as the first letter of the meerkat's name, then the donkey needs support from the eagle\nRule16: If the baboon has a leafy green vegetable, then it does not become an enemy of the canary\n\nRule1 is preferred over Rule10\nRule11 is preferred over Rule2\nRule16 is preferred over Rule10\nRule6 is preferred over Rule8\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe baboon has arugula\nThe baboon has ten friends\nThe baboon has romaine lettuce\nThe canary got a well-paid job\nThe canary has a card that is white in color\nThe canary has two friends\nThe canary is named Tessa\nThe cat has a card that is red in color\nThe cat is named Tarzan\nThe donkey has a bench\nThe donkey is named Paco\nThe grizzly bear steals five points from the amberjack\nThe meerkat is named Pashmak\nThe oscar is named Bella\nThe sheep is named Meadow\nThe octopus does not respect the donkey\n\nBased on the game state and the rules and preferences, does the canary proceed to the spot right after the whale?\nQuestion: Does the canary proceed to the spot right after the whale?",
        "idx": 4,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the baboon, if it has fewer than 8 friends, then we can conclude that it does not become an actual enemy of the canary\nrule1() = friends(baboon) < 8 => not actual_enemy(baboon, canary)\n# Rule2: If something winks at the mosquito, then it does not knock down the fortress of the grizzly bear\nrule2() = wink(something, mosquito) => not knock_down(fortress_of(grizzly_bear))\n# Rule3: If at least one animal needs the support of the eagle, then the canary winks at the cheetah\nrule3() = needs_support(something, eagle) => wink(canary, cheetah)\n# Rule4: If the cat has a name whose first letter is the same as the first letter of the sheep's name, then the cat attacks the green fields of the canary\nrule4() = first_letter_of(name(cat)) == first_letter_of(name(sheep)) => attack(cat, green_fields_of(canary))\n# Rule5: If the cat has a card whose color is one of the rainbow colors, then the cat attacks the green fields of the canary\nrule5() = has(cat, card) and color(card) in rainbow_colors => attack(cat, green_fields_of(canary))\n# Rule6: Regarding the canary, if it has a card whose color starts with the letter \"w\", then we can conclude that it winks at the mosquito\nrule6() = has(canary, card_with(color_starting_with(\"w\"))) => wink(canary, mosquito)\n# Rule7: The jellyfish respects the black bear whenever at least one animal steals five of the points of the amberjack\nrule7() = steals_points(something, 5, amberjack) => respects(jellyfish, black_bear)\n# Rule8: Regarding the canary, if it has more than 6 friends, then we can conclude that it does not wink at the mosquito\nrule8() = friends(canary) > 6 => not wink(canary, mosquito)\n# Rule9: Regarding the canary, if it has a name whose first letter is the same as the first letter of the oscar's name, then we can conclude that it winks at the mosquito\nrule9() = first_letter_of(name(canary)) == first_letter_of(name(oscar)) => wink(canary, mosquito)\n# Rule10: If the baboon has a leafy green vegetable, then the baboon becomes an enemy of the canary\nrule10() = has(baboon, leafy_green_vegetable) => enemy(baboon, canary)\n# Rule11: The canary knocks down the fortress of the grizzly bear whenever at least one animal respects the black bear\nrule11() = respects(something, black_bear) => knock_down(fortress_of(grizzly_bear))\n# Rule12: If you are positive that you saw one of the animals needs the support of the hare, you can be certain that it will not proceed to the spot right after the whale\nrule12(something) = needs_support(something, hare) => not proceed(something, spot_right_after(spot_of(whale)))\n# Rule13: For the canary, if the belief is that the baboon does not become an actual enemy of the canary but the cat attacks the green fields whose owner is the canary, then you can add \"the canary needs support from the hare\" to your conclusions\nrule13() = not actual_enemy(baboon, canary) & attack(cat, green_fields_of(canary)) => needs_support(canary, hare)\n# Rule14: If the donkey has a musical instrument, then the donkey needs support from the eagle\nrule14() = has(donkey, musical_instrument) => needs_support(donkey, eagle)\n# Rule15: If the donkey has a name whose first letter is the same as the first letter of the meerkat's name, then the donkey needs the support of the eagle\nrule15() = first_letter_of(name(donkey)) == first_letter_of(name(meerkat)) => needs_support(donkey, eagle)\n# Rule16: Regarding the baboon, if it has a leafy green vegetable, then we can conclude that it does not become an enemy of the canary.\nrule16() = has(baboon, leafy_green_vegetable) => not enemy(baboon, canary)\n# Rule1 is preferred over Rule10\norder(rule1) > order(rule10) = True\n# Rule11 is preferred over Rule2\norder(rule11) > order(rule2) = True\n# Rule16 is preferred over Rule10\norder(rule16) > order(rule10) = True\n# Rule6 is preferred over Rule8\norder(rule6) > order(rule8) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The baboon has some arugula, and has ten friends\nhas(baboon, arugula) = True\nfriends(baboon) = 10\n# The baboon has some romaine lettuce\nhas(baboon, romaine_lettuce) = True\n# The canary got a well-paid job, and has a card that is white in color\ngot_job(canary, well_paid) = True\nhas(canary, card_with(white_color)) = True\n# The canary has two friends\nfriends(canary) = 2\n# The canary is named Tessa\nname(canary, Tessa) = True\n# The cat has a card that is red in color\nhas(cat, card_with(red_color)) = True\n# The cat is named Tarzan\nname(cat, Tarzan) = True\n# The donkey has a bench\nhas(donkey, bench) = True\n# The donkey is named Paco\nname(donkey, Paco) = True\n# The grizzly bear steals five points from the amberjack\nsteals_points(grizzly_bear, 5, amberjack) = True\n# The meerkat is named Pashmak\nname(meerkat, Pashmak) = True\n# The oscar is named Bella\nname(oscar, Bella) = True\n# The sheep is named Meadow\nname(sheep, Meadow) = True\n# The octopus does not respect the donkey\nrespects(octopus, donkey) = False\n\n# Based on the game state and the rules and preferences, does the canary proceed to the spot right after the whale?\nquestion = proceed(canary, spot_right_after(spot_of(whale)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something raises a peace flag for the catfish and also proceeds to the spot that is right after the spot of the carp because in this case it will surely raise a flag of peace for the squid\nRule2: If the eagle has something to sit on, then it does not raise a peace flag for the squid\nRule3: If the eagle has a card whose color appears in the flag of Japan, then it does not raise a peace flag for the squid\nRule4: If the meerkat holds an equal number of points as the spider, then the spider gives a magnifying glass to the tilapia\nRule5: The meerkat offers a job to the spider whenever at least one animal raises a peace flag for the squid\n\nRule2 is preferred over Rule1\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe eagle has a card that is orange in color\nThe eagle proceeds to the spot right after the carp and raises a peace flag for the catfish\n\nBased on the game state and the rules and preferences, does the spider give a magnifier to the tilapia?\nQuestion: Does the spider give a magnifying glass to the tilapia?",
        "idx": 5,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something raises a peace flag for the catfish and also proceeds to the spot that is right after the spot of the carp because in this case it will surely raise a flag of peace for the squid (this may or may not be problematic)\nrule1(something) = raise_flag_of_peace(something, catfish) & proceed(something, spot_right_after(spot_of(carp))) => raise_flag_of_peace(something, squid)\n# Rule2: Regarding the eagle, if it has something to sit on, then we can conclude that it does not raise a peace flag for the squid\nrule2() = has(eagle, something_to_sit_on) => not raise_flag_of_peace(eagle, squid)\n# Rule3: Regarding the eagle, if it has a card whose color appears in the flag of Japan, then we can conclude that it does not raise a peace flag for the squid\nrule3() = has(eagle, card_with(color_in_flag_of_Japan)) => not raise_flag_of_peace(eagle, squid)\n# Rule4: If the meerkat holds an equal number of points as the spider, then the spider gives a magnifying glass to the tilapia\nrule4() = points(meerkat) == points(spider) => give_magnifying_glass(spider, tilapia)\n# Rule5: The meerkat offers a job to the spider whenever at least one animal raises a peace flag for the squid.\nrule5() = raise_flag_of_peace(something, squid) => offer_job(meerkat, spider)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The eagle has a card that is orange in color\nhas(eagle, card_with(orange_color)) = True\n# The eagle proceeds to the spot right after the carp, and raises a peace flag for the catfish\nproceed(eagle, spot_right_after(spot_of(carp))) = True\nraise_flag_of_peace(eagle, catfish) = True\n\n# Based on the game state and the rules and preferences, does the spider give a magnifier to the tilapia?\nquestion = give_magnifying_glass(spider, tilapia)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the crocodile has more than twelve friends, then it steals five points from the cockroach\nRule2: If something does not give a magnifier to the eagle and also does not eat the food that belongs to the spider, then it knows the defense plan of the tiger\nRule3: If at least one animal attacks the green fields of the catfish, then the aardvark eats the food that belongs to the spider\nRule4: If at least one animal knows the defensive plans of the buffalo, then the crocodile does not steal five points from the cockroach\nRule5: If the buffalo has more than seven friends, then the buffalo owes money to the hare\nRule6: If you saw one of the animals steal five points from the cockroach, then it does not remove one of the pieces of the tiger\nRule7: If one of the animals does not hold the same number of points as the phoenix, then it does not give a magnifying glass to the eagle\nRule8: If something proceeds to the spot that is right after the spot of the lion, then it does not eat the food that belongs to the spider\nRule9: If at least one animal offers a job to the panda bear, then the buffalo does not owe money to the hare\nRule10: If the aardvark knows the defense plan of the tiger and the crocodile does not remove one of the pieces of the tiger, then the tiger becomes an actual enemy of the cheetah\nRule11: If the crocodile has a name whose first letter is the same as the first letter of the donkey's name, then the crocodile steals five points from the cockroach\n\nRule3 is preferred over Rule8\nRule4 is preferred over Rule1\nRule4 is preferred over Rule11\nRule9 is preferred over Rule5\n\nThe current state of the game is as follows\nThe aardvark proceeds to the spot right after the lion\nThe buffalo has fifteen friends\nThe crocodile has two playful friends and seven non-playful friends\nThe crocodile is named Milo\nThe donkey is named Meadow\nThe aardvark does not hold the same number of points as the phoenix\n\nBased on the game state and the rules and preferences, does the tiger become an enemy of the cheetah?\nQuestion: Does the tiger become an enemy of the cheetah?",
        "idx": 6,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the crocodile, if it has more than twelve friends, then we can conclude that it steals five points from the cockroach\nrule1() = friends(crocodile) > 12 => steal_points(crocodile, 5, cockroach)\n# Rule2: Be careful when something does not give a magnifier to the eagle and also does not eat the food that belongs to the spider because in this case it will surely know the defense plan of the tiger (this may or may not be problematic)\nrule2(something) = not give_magnifier(something, eagle) & not eat_food(something, food_of(spider)) => knows_defense_plan(tiger, something)\n# Rule3: If at least one animal attacks the green fields of the catfish, then the aardvark eats the food that belongs to the spider\nrule3() = attack_green_fields(catfish) => eat_food(aardvark, food_of(spider))\n# Rule4: If at least one animal knows the defensive plans of the buffalo, then the crocodile does not steal five points from the cockroach\nrule4() = knows(defensive_plans_of(buffalo), something) => not steal_points(crocodile, 5, cockroach)\n# Rule5: If the buffalo has more than seven friends, then the buffalo owes money to the hare\nrule5() = friends(buffalo) > 7 => owes_money_to(buffalo, hare)\n# Rule6: If you are positive that you saw one of the animals steals five of the points of the cockroach, you can be certain that it will not remove from the board one of the pieces of the tiger\nrule6(something) = saw_steal_points(something, 5, cockroach) => not remove(something, piece_of(tiger))\n# Rule7: If you are positive that one of the animals does not hold the same number of points as the phoenix, you can be certain that it will not give a magnifying glass to the eagle\nrule7(something) = not same_points(something, phoenix) => not give_magnifying_glass(something, eagle)\n# Rule8: If something proceeds to the spot that is right after the spot of the lion, then it does not eat the food that belongs to the spider\nrule8(something) = proceed(something, spot_right_after(spot_of(lion))) => not eat_food(something, food_of(spider))\n# Rule9: The buffalo does not owe money to the hare whenever at least one animal offers a job to the panda bear\nrule9() = offer_job(something, panda_bear) => not owes_money_to(buffalo, hare)\n# Rule10: For the tiger, if the belief is that the aardvark knows the defense plan of the tiger and the crocodile does not remove one of the pieces of the tiger, then you can add \"the tiger becomes an actual enemy of the cheetah\" to your conclusions\nrule10() = knows(defense_plan_of(tiger), aardvark) & not remove(crocodile, piece_of(tiger)) => actual_enemy(tiger, cheetah)\n# Rule11: If the crocodile has a name whose first letter is the same as the first letter of the donkey's name, then the crocodile steals five of the points of the cockroach.\nrule11() = first_letter_of(name(crocodile)) == first_letter_of(name(donkey)) => steal_points(crocodile, 5, cockroach)\n# Rule3 is preferred over Rule8\norder(rule3) > order(rule8) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule4 is preferred over Rule11\norder(rule4) > order(rule11) = True\n# Rule9 is preferred over Rule5\norder(rule9) > order(rule5) = True\n\n# The current state of the game is as follows\n# The aardvark proceeds to the spot right after the lion\nproceed(aardvark, spot_right_after(spot_of(lion))) = True\n# The buffalo has fifteen friends\nfriends(buffalo) = 15\n# The crocodile has two playful friends and 7 non-playful friends, and is named Milo\nfriends(crocodile) = 9\nplayful_friends(crocodile) = 2\nnon_playful_friends(crocodile) = 7\nname(crocodile, Milo) = True\n# The donkey is named Meadow\nname(donkey, Meadow) = True\n# The aardvark does not hold the same number of points as the phoenix\nsame_points(aardvark, phoenix) = False\n\n# Based on the game state and the rules and preferences, does the tiger become an enemy of the cheetah?\nquestion = actual_enemy(tiger, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squirrel took a bike from the store, then the squirrel does not sing a song of victory for the lobster\nRule2: If something sings a song of victory for the grasshopper, then it does not prepare armor for the goldfish\nRule3: If the squirrel sings a victory song for the lobster, then the lobster prepares armor for the goldfish\nRule4: The octopus raises a flag of peace for the goldfish, in the case where the raven does not eat the food that belongs to the octopus\nRule5: If something attacks the green fields whose owner is the tiger but does not know the defensive plans of the panda bear, then it sings a song of victory for the lobster\nRule6: If the octopus raises a peace flag for the goldfish and the lobster prepares armor for the goldfish, then the goldfish does not owe money to the kudu\nRule7: If at least one animal eats the food of the cockroach, then the raven does not eat the food that belongs to the octopus\n\nRule2 is preferred over Rule3\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe donkey offers a job to the raven\nThe hare eats the food of the cockroach\nThe squirrel attacks the green fields whose owner is the tiger, stole a bike from the store, and does not know the defensive plans of the panda bear\n\nBased on the game state and the rules and preferences, does the goldfish owe money to the kudu?\nQuestion: Does the goldfish owe money to the kudu?",
        "idx": 7,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squirrel took a bike from the store, then the squirrel does not sing a song of victory for the lobster\nrule1() = took_bike(squirrel, store) => not sing_song(squirrel, victory_song_for(lobster))\n# Rule2: If something sings a song of victory for the grasshopper, then it does not prepare armor for the goldfish\nrule2() = sing_song(something, victory_song_for(grasshopper)) => not prepare_armor(something, goldfish)\n# Rule3: The lobster unquestionably prepares armor for the goldfish, in the case where the squirrel sings a victory song for the lobster\nrule3() = sing_song(squirrel, victory_song_for(lobster)) => prepare_armor(lobster, goldfish)\n# Rule4: The octopus unquestionably raises a flag of peace for the goldfish, in the case where the raven does not eat the food that belongs to the octopus\nrule4() = not eat_food(raven, food_of(octopus)) => raise_flag_of_peace(octopus, goldfish)\n# Rule5: If you see that something attacks the green fields whose owner is the tiger but does not know the defensive plans of the panda bear, what can you certainly conclude? You can conclude that it sings a song of victory for the lobster\nrule5(something) = attacks_green_fields(something, owner_is(tiger)) & not knows(defensive_plans_of(panda_bear), something) => sing_song(something, victory_song_for(lobster))\n# Rule6: For the goldfish, if the belief is that the octopus raises a peace flag for the goldfish and the lobster prepares armor for the goldfish, then you can add that \"the goldfish is not going to owe $$$ to the kudu\" to your conclusions\nrule6() = raise_flag_of_peace(octopus, goldfish) & prepare_armor(lobster, goldfish) => not owe_money_to(goldfish, kudu)\n# Rule7: If at least one animal eats the food of the cockroach, then the raven does not eat the food that belongs to the octopus.\nrule7() = eats_food(something, food_of(cockroach)) => not eat_food(raven, food_of(octopus))\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The donkey offers a job to the raven\noffers_job(donkey, raven) = True\n# The hare eats the food of the cockroach\neats_food(hare, food_of(cockroach)) = True\n# The squirrel attacks the green fields whose owner is the tiger, stole a bike from the store, and does not know the defensive plans of the panda bear.\nattacks_green_fields(squirrel, owner_is(tiger)) = True\ntook_bike(squirrel, store) = True\nnot knows(defensive_plans_of(panda_bear), squirrel) = True\n\n# Based on the game state and the rules and preferences, does the goldfish owe money to the kudu?\nquestion = owe_money_to(goldfish, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The amberjack does not sing a victory song for the penguin whenever at least one animal steals five points from the cat\nRule2: Be careful when something does not raise a flag of peace for the viperfish but needs the support of the mosquito because in this case it certainly does not sing a victory song for the amberjack\nRule3: If something owes money to the grizzly bear, then it respects the amberjack, too\nRule4: If the sun bear does not sing a song of victory for the amberjack but the octopus respects the amberjack, then the amberjack eats the food that belongs to the elephant\nRule5: If something does not eat the food of the elephant, then it will sing a victory song for the penguin\n\nRule1 is preferred over Rule5\n\nThe current state of the game is as follows\nThe octopus owes money to the grizzly bear\nThe sun bear needs support from the mosquito\nThe sun bear does not raise a peace flag for the viperfish\n\nBased on the game state and the rules and preferences, does the amberjack sing a victory song for the penguin?\nQuestion: Does the amberjack sing a victory song for the penguin?",
        "idx": 8,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The amberjack does not sing a victory song for the penguin whenever at least one animal steals five points from the cat\nrule1() = steal_points(something, 5, cat) => not sing_song(amberjack, victory_song_for(penguin))\n# Rule2: Be careful when something does not raise a flag of peace for the viperfish but needs the support of the mosquito because in this case it certainly does not sing a victory song for the amberjack (this may or may not be problematic)\nrule2(something) = not raise_flag_of_peace(something, viperfish) & needs_support(something, mosquito) => not sing_song(something, victory_song_for(amberjack))\n# Rule3: If something owes money to the grizzly bear, then it respects the amberjack, too\nrule3(something) = owes_money_to(something, grizzly_bear) => respects(something, amberjack)\n# Rule4: For the amberjack, if the belief is that the sun bear does not sing a song of victory for the amberjack but the octopus respects the amberjack, then you can add \"the amberjack eats the food that belongs to the elephant\" to your conclusions\nrule4() = not sing_song(sun_bear, victory_song_for(amberjack)) & respects(octopus, amberjack) => eat_food(amberjack, food_of(elephant))\n# Rule5: If you are positive that one of the animals does not eat the food of the elephant, you can be certain that it will sing a victory song for the penguin without a doubt.\nrule5(something) = not eat_food(something, food_of(elephant)) => sing_song(something, victory_song_for(penguin))\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n\n# The current state of the game is as follows\n# The octopus owes money to the grizzly bear\nowes_money_to(octopus, grizzly_bear) = True\n# The sun bear needs support from the mosquito\nneeds_support(sun_bear, mosquito) = True\n# The sun bear does not raise a peace flag for the viperfish\nnot raise_flag_of_peace(sun_bear, viperfish) = True\n\n# Based on the game state and the rules and preferences, does the amberjack sing a victory song for the penguin?\nquestion = sing_song(amberjack, victory_song_for(penguin))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the dog has a sharp object, then the dog rolls the dice for the polar bear\nRule2: If something does not become an enemy of the black bear, then it does not prepare armor for the eel\nRule3: If the leopard raises a peace flag for the dog, then the dog becomes an enemy of the black bear\nRule4: If the dog has a card with a primary color, then the dog knows the defensive plans of the canary\nRule5: If the dog took a bike from the store, then the dog rolls the dice for the polar bear\nRule6: If at least one animal eats the food of the amberjack, then the turtle removes from the board one of the pieces of the dog\nRule7: If something attacks the green fields of the puffin, then it prepares armor for the eel\nRule8: If the turtle removes from the board one of the pieces of the dog, then the dog is not going to become an enemy of the black bear\nRule9: The dog does not roll the dice for the polar bear, in the case where the salmon proceeds to the spot that is right after the spot of the dog\nRule10: If the turtle has a name whose first letter is the same as the first letter of the donkey's name, then the turtle does not remove from the board one of the pieces of the dog\nRule11: If the dog has more than seventeen friends, then the dog knows the defensive plans of the canary\nRule12: If something knows the defensive plans of the canary and also rolls the dice for the polar bear, then it attacks the green fields of the puffin\n\nRule3 is preferred over Rule8\nRule6 is preferred over Rule10\nRule7 is preferred over Rule2\nRule9 is preferred over Rule1\nRule9 is preferred over Rule5\n\nThe current state of the game is as follows\nThe dog has a card that is red in color\nThe dog has a plastic bag\nThe dog has five playful friends and 2 non-playful friends\nThe dog stole a bike from the store\nThe donkey is named Charlie\nThe rabbit eats the food of the amberjack\nThe turtle hates Chris Ronaldo\nThe turtle is named Casper\n\nBased on the game state and the rules and preferences, does the dog prepare armor for the eel?\nQuestion: Does the dog prepare armor for the eel?",
        "idx": 9,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the dog has a sharp object, then the dog rolls the dice for the polar bear\nrule1() = has(dog, sharp_object) => roll_dice(dog, polar_bear)\n# Rule2: If something does not become an enemy of the black bear, then it does not prepare armor for the eel\nrule2() = not enemy(something, black_bear) => not prepare_armor(something, eel)\n# Rule3: If the leopard raises a peace flag for the dog, then the dog becomes an enemy of the black bear\nrule3() = raise_flag_of_peace(leopard, dog) => enemy(dog, black_bear)\n# Rule4: If the dog has a card with a primary color, then the dog knows the defensive plans of the canary\nrule4() = has(dog, card_with(primary_color)) => knows_defensive_plans(dog, canary)\n# Rule5: If the dog took a bike from the store, then the dog rolls the dice for the polar bear\nrule5() = took_bike_from_store(dog) => roll_dice(dog, polar_bear)\n# Rule6: If at least one animal eats the food of the amberjack, then the turtle removes from the board one of the pieces of the dog\nrule6() = eats_food_of(something, amberjack) => remove(turtle, piece_of(dog))\n# Rule7: If something attacks the green fields of the puffin, then it prepares armor for the eel, too\nrule7(something) = attack_green_fields(something, puffin) => prepare_armor(something, eel)\n# Rule8: If the turtle removes from the board one of the pieces of the dog, then the dog is not going to become an enemy of the black bear\nrule8() = remove(turtle, piece_of(dog)) => not enemy(dog, black_bear)\n# Rule9: The dog does not roll the dice for the polar bear, in the case where the salmon proceeds to the spot that is right after the spot of the dog\nrule9() = proceed(salmon, spot_right_after(spot_of(dog))) => not roll_dice(dog, polar_bear)\n# Rule10: If the turtle has a name whose first letter is the same as the first letter of the donkey's name, then the turtle does not remove from the board one of the pieces of the dog\nrule10() = first_letter_of(name(turtle)) == first_letter_of(name(donkey)) => not remove(turtle, piece_of(dog))\n# Rule11: Regarding the dog, if it has more than seventeen friends, then we can conclude that it knows the defensive plans of the canary\nrule11() = count(playful_friends(dog)) + count(non_playful_friends(dog)) > 17 => knows_defensive_plans(dog, canary)\n# Rule12: Be careful when something knows the defensive plans of the canary and also rolls the dice for the polar bear because in this case it will surely attack the green fields of the puffin (this may or may not be problematic).\nrule12(something) = knows_defensive_plans(something, canary) & roll_dice(something, polar_bear) => attack_green_fields(something, puffin)\n# Rule3 is preferred over Rule8\norder(rule3) > order(rule8) = True\n# Rule6 is preferred over Rule10\norder(rule6) > order(rule10) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n# Rule9 is preferred over Rule1\norder(rule9) > order(rule1) = True\n# Rule9 is preferred over Rule5\norder(rule9) > order(rule5) = True\n\n# The current state of the game is as follows\n# The dog has a card that is red in color\nhas(dog, card_with(red_color)) = True\n# The dog has a plastic bag, has five friends that are playful and 2 friends that are not, and stole a bike from the store\nhas(dog, plastic_bag) = True\ncount(playful_friends(dog)) = 5\ncount(non_playful_friends(dog)) = 2\nstole_bike_from_store(dog) = True\n# The donkey is named Charlie\nname(donkey, Charlie) = True\n# The rabbit eats the food of the amberjack\neats_food_of(rabbit, amberjack) = True\n# The turtle hates Chris Ronaldo\nhates(turtle, Chris_Ronaldo) = True\n# The turtle is named Casper\nname(turtle, Casper) = True\n\n# Based on the game state and the rules and preferences, does the dog prepare armor for the eel?\nquestion = prepare_armor(dog, eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kiwi has a sharp object, then it becomes an actual enemy of the tiger\nRule2: If the kiwi has a card whose color appears in the flag of Netherlands, then it becomes an actual enemy of the tiger\nRule3: If the kiwi has a device to connect to the internet, then it does not sing a victory song for the rabbit\nRule4: If something becomes an enemy of the tiger but does not sing a victory song for the rabbit, then it holds an equal number of points as the spider\nRule5: If the kiwi has something to drink, then it does not sing a victory song for the rabbit\nRule6: If the kiwi holds the same number of points as the spider, then the spider does not owe money to the sea bass\n\nThe current state of the game is as follows\nThe hummingbird is named Lola\nThe kiwi has 2 friends\nThe kiwi has a computer\nThe kiwi has a card that is white in color\nThe kiwi has some spinach\nThe kiwi is named Lily\n\nBased on the game state and the rules and preferences, does the spider owe money to the sea bass?\nQuestion: Does the spider owe money to the sea bass?",
        "idx": 10,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kiwi, if it has a sharp object, then we can conclude that it becomes an actual enemy of the tiger\nrule1() = has(kiwi, sharp_object) => actual_enemy(kiwi, tiger)\n# Rule2: If the kiwi has a card whose color appears in the flag of Netherlands, then the kiwi becomes an actual enemy of the tiger\nrule2() = has(kiwi, card_with(color)) & color in flag_of(Netherlands) => actual_enemy(kiwi, tiger)\n# Rule3: If the kiwi has a device to connect to the internet, then the kiwi does not sing a victory song for the rabbit\nrule3() = has(kiwi, connect_to_internet(device)) => not sing_song(kiwi, victory_song_for(rabbit))\n# Rule4: Be careful when something becomes an enemy of the tiger but does not sing a victory song for the rabbit because in this case it will, surely, hold an equal number of points as the spider (this may or may not be problematic)\nrule4(something) = actual_enemy(something, tiger) & not sing_song(something, victory_song_for(rabbit)) => points(something) == points(spider)\n# Rule5: Regarding the kiwi, if it has something to drink, then we can conclude that it does not sing a song of victory for the rabbit\nrule5() = has(kiwi, drink) => not sing_song(kiwi, victory_song_for(rabbit))\n# Rule6: The spider does not owe $$$ to the sea bass, in the case where the kiwi holds the same number of points as the spider.\nrule6() = points(kiwi) == points(spider) => not owe_money_to(spider, sea_bass)\n\n# The current state of the game is as follows\n# The hummingbird is named Lola\nname(hummingbird, Lola) = True\n# The kiwi has 2 friends, and has a computer\nfriends(kiwi) = 2\nhas(kiwi, computer) = True\n# The kiwi has a card that is white in color\nhas(kiwi, card_with(white_color)) = True\n# The kiwi has some spinach, and is named Lily\nhas(kiwi, spinach) = True\nname(kiwi, Lily) = True\n\n# Based on the game state and the rules and preferences, does the spider owe money to the sea bass?\nquestion = owe_money_to(spider, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something gives a magnifier to the parrot, then it does not offer a job to the turtle\nRule2: The sheep gives a magnifier to the parrot whenever at least one animal becomes an actual enemy of the kudu\nRule3: If the sheep does not offer a job to the turtle and the kiwi does not wink at the turtle, then the turtle gives a magnifying glass to the grasshopper\nRule4: If something steals five points from the pig, then it does not sing a song of victory for the hippopotamus\nRule5: If the kiwi has something to carry apples and oranges, then the kiwi sings a victory song for the hippopotamus\nRule6: If something sings a victory song for the hippopotamus, then it does not wink at the turtle\n\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe kiwi has a basket\nThe polar bear knows the defensive plans of the kudu\n\nBased on the game state and the rules and preferences, does the turtle give a magnifier to the grasshopper?\nQuestion: Does the turtle give a magnifier to the grasshopper?",
        "idx": 11,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something gives a magnifier to the parrot, then it does not offer a job to the turtle\nrule1() = give_magnifier(something, parrot) => not offer_job(something, turtle)\n# Rule2: The sheep gives a magnifier to the parrot whenever at least one animal becomes an actual enemy of the kudu\nrule2() = becomes_enemy(something, kudu) => give_magnifier(sheep, parrot)\n# Rule3: If the sheep does not offer a job to the turtle and the kiwi does not wink at the turtle, then the turtle gives a magnifying glass to the grasshopper\nrule3() = not offer_job(sheep, turtle) & not wink(kiwi, turtle) => give_magnifying_glass(turtle, grasshopper)\n# Rule4: If something steals five of the points of the pig, then it does not sing a song of victory for the hippopotamus\nrule4() = steal_points(something, pig, 5) => not sing_song(something, victory_song_for(hippopotamus))\n# Rule5: If the kiwi has something to carry apples and oranges, then the kiwi sings a victory song for the hippopotamus\nrule5() = has(kiwi, carry_apples_and_oranges) => sing_song(kiwi, victory_song_for(hippopotamus))\n# Rule6: If something sings a victory song for the hippopotamus, then it does not wink at the turtle.\nrule6() = sing_song(something, victory_song_for(hippopotamus)) => not wink(something, turtle)\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The kiwi has a basket\nhas(kiwi, basket) = True\n# The polar bear knows the defensive plans of the kudu\nknows(polar_bear, defensive_plans_of(kudu)) = True\n\n# Based on the game state and the rules and preferences, does the turtle give a magnifier to the grasshopper?\nquestion = give_magnifier(turtle, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something becomes an actual enemy of the jellyfish, then it learns elementary resource management from the eel, too\nRule2: If something learns elementary resource management from the eel, then it winks at the halibut, too\nRule3: The viperfish becomes an enemy of the jellyfish whenever at least one animal eats the food of the kangaroo\nRule4: If the viperfish took a bike from the store, then the viperfish does not become an actual enemy of the jellyfish.\n\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe octopus eats the food of the kangaroo\n\nBased on the game state and the rules and preferences, does the viperfish wink at the halibut?\nQuestion: Does the viperfish wink at the halibut?",
        "idx": 12,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something becomes an actual enemy of the jellyfish, then it learns elementary resource management from the eel, too\nrule1() = enemy(something, jellyfish) => learn(something, elementary_resource_management_from(eel))\n# Rule2: If something learns elementary resource management from the eel, then it winks at the halibut, too\nrule2() = learn(something, elementary_resource_management_from(eel)) => wink(something, halibut)\n# Rule3: The viperfish becomes an enemy of the jellyfish whenever at least one animal eats the food of the kangaroo\nrule3() = eats_food_of(something, kangaroo) => enemy(viperfish, jellyfish)\n# Rule4: If the viperfish took a bike from the store, then the viperfish does not become an actual enemy of the jellyfish.\nrule4() = took_bike(viperfish, store) => not enemy(viperfish, jellyfish)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The octopus eats the food of the kangaroo\neats_food_of(octopus, kangaroo) = True\n\n# Based on the game state and the rules and preferences, does the viperfish wink at the halibut?\nquestion = wink(viperfish, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squirrel does not roll the dice for the gecko, then the gecko does not give a magnifying glass to the squid\nRule2: If the sea bass has more than 2 friends, then the sea bass needs support from the dog\nRule3: If something knows the defense plan of the lion, then it does not burn the warehouse of the meerkat\nRule4: If at least one animal gives a magnifier to the squirrel, then the gecko proceeds to the spot that is right after the spot of the meerkat\nRule5: If at least one animal raises a flag of peace for the leopard, then the meerkat gives a magnifier to the donkey\nRule6: If at least one animal steals five points from the lobster, then the gecko gives a magnifier to the squid\nRule7: If the sea bass has a card whose color is one of the rainbow colors, then the sea bass needs support from the dog\nRule8: If something does not remove one of the pieces of the squid but gives a magnifier to the squid, then it does not proceed to the spot right after the meerkat\nRule9: If something needs the support of the dog, then it burns the warehouse of the meerkat, too\nRule10: The gecko does not remove one of the pieces of the squid whenever at least one animal raises a flag of peace for the squid\nRule11: If the sea bass burns the warehouse of the meerkat and the gecko does not proceed to the spot that is right after the spot of the meerkat, then the meerkat will never give a magnifying glass to the donkey\n\nRule1 is preferred over Rule6\nRule3 is preferred over Rule9\nRule4 is preferred over Rule8\nRule5 is preferred over Rule11\n\nThe current state of the game is as follows\nThe penguin raises a peace flag for the squid\nThe sea bass has a card that is black in color\nThe sea bass has four lazy friends and one non-lazy friend\nThe sun bear steals five points from the lobster\n\nBased on the game state and the rules and preferences, does the meerkat give a magnifier to the donkey?\nQuestion: Does the meerkat give a magnifier to the donkey?",
        "idx": 13,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squirrel does not roll the dice for the gecko, then the gecko does not give a magnifying glass to the squid\nrule1() = not roll_dice(squirrel, gecko) => not give_magnifying_glass(gecko, squid)\n# Rule2: If the sea bass has more than 2 friends, then the sea bass needs support from the dog\nrule2() = friends(sea_bass) > 2 => needs_support(sea_bass, dog)\n# Rule3: If something knows the defense plan of the lion, then it does not burn the warehouse of the meerkat\nrule3(something) = knows(defense_plan_of(lion), something) => not burn(warehouse_of(meerkat), something)\n# Rule4: If at least one animal gives a magnifier to the squirrel, then the gecko proceeds to the spot that is right after the spot of the meerkat\nrule4() = give_magnifier(animal, squirrel) => proceed(gecko, spot_right_after(spot_of(meerkat)))\n# Rule5: If at least one animal raises a flag of peace for the leopard, then the meerkat gives a magnifier to the donkey\nrule5() = raise_flag_of_peace(animal, leopard) => give_magnifier(meerkat, donkey)\n# Rule6: If at least one animal steals five of the points of the lobster, then the gecko gives a magnifier to the squid\nrule6() = steal_points(animal, lobster, 5) => give_magnifier(gecko, squid)\n# Rule7: If the sea bass has a card whose color is one of the rainbow colors, then the sea bass needs support from the dog\nrule7() = has(sea_bass, card) and color(card) in rainbow_colors => needs_support(sea_bass, dog)\n# Rule8: Be careful when something does not remove from the board one of the pieces of the squid but gives a magnifier to the squid because in this case it certainly does not proceed to the spot right after the meerkat (this may or may not be problematic)\nrule8(something) = not remove(something, piece_of(squid)) & give_magnifier(something, squid) => not proceed(something, spot_right_after(spot_of(meerkat)))\n# Rule9: If something needs the support of the dog, then it burns the warehouse of the meerkat, too\nrule9(something) = needs_support(something, dog) => burn(warehouse_of(meerkat), something)\n# Rule10: The gecko does not remove one of the pieces of the squid whenever at least one animal raises a flag of peace for the squid\nrule10() = raise_flag_of_peace(animal, squid) => not remove(gecko, piece_of(squid))\n# Rule11: If the sea bass burns the warehouse of the meerkat and the gecko does not proceed to the spot that is right after the spot of the meerkat, then the meerkat will never give a magnifying glass to the donkey.\nrule11() = burn(warehouse_of(meerkat), sea_bass) & not proceed(gecko, spot_right_after(spot_of(meerkat))) => never_give_magnifying_glass(meerkat, donkey)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule3 is preferred over Rule9\norder(rule3) > order(rule9) = True\n# Rule4 is preferred over Rule8\norder(rule4) > order(rule8) = True\n# Rule5 is preferred over Rule11\norder(rule5) > order(rule11) = True\n\n# The current state of the game is as follows\n# The penguin raises a peace flag for the squid\nraise_flag_of_peace(penguin, squid) = True\n# The sea bass has a card that is black in color\nhas(sea_bass, card_with(black_color)) = True\n# The sea bass has four friends that are lazy and one friend that is not\nfriends(sea_bass) = 5\n# The sun bear steals five points from the lobster\nsteal_points(sun_bear, lobster, 5) = True\n\n# Based on the game state and the rules and preferences, does the meerkat give a magnifier to the donkey?\nquestion = give_magnifier(meerkat, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the snail has a card with a primary color, then it does not raise a flag of peace for the grizzly bear\nRule2: If the snail has fewer than 6 friends, then it does not raise a peace flag for the grizzly bear\nRule3: If the snail raises a flag of peace for the grizzly bear, then the grizzly bear steals five points from the oscar\nRule4: The cockroach winks at the bat whenever at least one animal owes money to the penguin\nRule5: If the cockroach has something to sit on, then it does not prepare armor for the lobster\nRule6: The bat respects the panther whenever at least one animal steals five points from the oscar\nRule7: If the black bear knocks down the fortress of the snail and the cricket does not respect the snail, then the snail raises a flag of peace for the grizzly bear\nRule8: The grasshopper owes money to the penguin in the case where the donkey attacks the green fields of the grasshopper\nRule9: If the cockroach purchased a time machine, then it does not prepare armor for the lobster\n\nRule1 is preferred over Rule7\nRule2 is preferred over Rule7\n\nThe current state of the game is as follows\nThe black bear knocks down the fortress of the snail\nThe cockroach has a love seat sofa\nThe cockroach invented a time machine\nThe snail has a card that is violet in color\nThe cricket does not roll the dice for the snail\nThe donkey does not attack the green fields whose owner is the grasshopper\n\nBased on the game state and the rules and preferences, does the bat respect the panther?\nQuestion: Does the bat respect the panther?",
        "idx": 14,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the snail, if it has a card with a primary color, then we can conclude that it does not raise a flag of peace for the grizzly bear\nrule1() = has(snail, card_with(primary_color)) => not raise_flag_of_peace(snail, grizzly_bear)\n# Rule2: If the snail has fewer than 6 friends, then the snail does not raise a peace flag for the grizzly bear\nrule2() = friends(snail) < 6 => not raise_flag_of_peace(snail, grizzly_bear)\n# Rule3: The grizzly bear unquestionably steals five of the points of the oscar, in the case where the snail raises a flag of peace for the grizzly bear\nrule3() = raise_flag_of_peace(snail, grizzly_bear) => steal_points(grizzly_bear, 5, oscar)\n# Rule4: The cockroach winks at the bat whenever at least one animal owes $$$ to the penguin\nrule4() = owes_money_to(something, penguin) => wink(cockroach, bat)\n# Rule5: Regarding the cockroach, if it has something to sit on, then we can conclude that it does not prepare armor for the lobster\nrule5() = has(cockroach, something_to_sit_on) => not prepare_armor(cockroach, lobster)\n# Rule6: The bat respects the panther whenever at least one animal steals five of the points of the oscar\nrule6() = steal_points(something, 5, oscar) => respects(bat, panther)\n# Rule7: For the snail, if the belief is that the black bear knocks down the fortress that belongs to the snail and the cricket does not respect the snail, then you can add \"the snail raises a flag of peace for the grizzly bear\" to your conclusions\nrule7() = knock_down(black_bear, fortress_of(snail)) & not respects(cricket, snail) => raise_flag_of_peace(snail, grizzly_bear)\n# Rule8: The grasshopper unquestionably owes money to the penguin, in the case where the donkey attacks the green fields of the grasshopper\nrule8() = attack(donkey, green_fields_of(grasshopper)) => owes_money_to(grasshopper, penguin)\n# Rule9: Regarding the cockroach, if it purchased a time machine, then we can conclude that it does not prepare armor for the lobster.\nrule9() = purchased(cockroach, time_machine) => not prepare_armor(cockroach, lobster)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n\n# The current state of the game is as follows\n# The black bear knocks down the fortress of the snail\nknock_down(black_bear, fortress_of(snail)) = True\n# The cockroach has a love seat sofa\nhas(cockroach, love_seat_sofa) = True\n# The cockroach invented a time machine\ninvented(cockroach, time_machine) = True\n# The snail has a card that is violet in color\nhas(snail, card_with(violet_color)) = True\n# The cricket does not roll the dice for the snail\nnot roll_dice(cricket, snail) = True\n# The donkey does not attack the green fields whose owner is the grasshopper\nnot attack(donkey, green_fields_of(grasshopper)) = True\n\n# Based on the game state and the rules and preferences, does the bat respect the panther?\nquestion = respects(bat, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the rabbit knocks down the fortress that belongs to the cricket, then the cricket becomes an actual enemy of the parrot\nRule2: If the kangaroo has a name whose first letter is the same as the first letter of the meerkat's name, then the kangaroo becomes an actual enemy of the cricket\nRule3: If the grasshopper has a name whose first letter is the same as the first letter of the lobster's name, then the grasshopper does not sing a song of victory for the cricket\nRule4: If one of the animals does not proceed to the spot that is right after the spot of the viperfish, then it will knock down the fortress of the cricket\nRule5: If something respects the elephant, then it holds the same number of points as the phoenix\nRule6: If the kangaroo has more than 3 friends, then the kangaroo becomes an enemy of the cricket\nRule7: If one of the animals does not remove one of the pieces of the wolverine, then it will respect the elephant\nRule8: If one of the animals becomes an actual enemy of the parrot and holds an equal number of points as the phoenix, then it also sings a victory song for the goldfish\n\nThe current state of the game is as follows\nThe blobfish knows the defensive plans of the rabbit\nThe grasshopper is named Luna\nThe kangaroo has two friends and is named Cinnamon\nThe lobster is named Lily\nThe meerkat is named Charlie\nThe cricket does not remove one of the pieces of the wolverine\nThe rabbit does not proceed to the spot right after the viperfish\n\nBased on the game state and the rules and preferences, does the cricket sing a victory song for the goldfish?\nQuestion: Does the cricket sing a victory song for the goldfish?",
        "idx": 15,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the rabbit knocks down the fortress that belongs to the cricket, then the cricket becomes an actual enemy of the parrot\nrule1() = knock_down(rabbit, fortress_of(cricket)) => actual_enemy(cricket, parrot)\n# Rule2: Regarding the kangaroo, if it has a name whose first letter is the same as the first letter of the meerkat's name, then we can conclude that it becomes an actual enemy of the cricket\nrule2() = first_letter_of(name(kangaroo)) == first_letter_of(name(meerkat)) => actual_enemy(kangaroo, cricket)\n# Rule3: Regarding the grasshopper, if it has a name whose first letter is the same as the first letter of the lobster's name, then we can conclude that it does not sing a song of victory for the cricket\nrule3() = first_letter_of(name(grasshopper)) == first_letter_of(name(lobster)) => not sing_song(grasshopper, victory_song_for(cricket))\n# Rule4: If you are positive that one of the animals does not proceed to the spot that is right after the spot of the viperfish, you can be certain that it will knock down the fortress of the cricket without a doubt\nrule4(something) = not proceed(something, spot_right_after(spot_of(viperfish))) => knock_down(fortress_of(cricket), something)\n# Rule5: If something respects the elephant, then it holds the same number of points as the phoenix, too\nrule5(something) = respects(something, elephant) => points(something) == points(phoenix)\n# Rule6: If the kangaroo has more than 3 friends, then the kangaroo becomes an enemy of the cricket\nrule6() = friends(kangaroo) > 3 => enemy(kangaroo, cricket)\n# Rule7: If you are positive that one of the animals does not remove one of the pieces of the wolverine, you can be certain that it will respect the elephant without a doubt\nrule7(something) = not remove(something, piece_of(wolverine)) => respect(something, elephant)\n# Rule8: If you see that something becomes an actual enemy of the parrot and holds an equal number of points as the phoenix, what can you certainly conclude? You can conclude that it also sings a victory song for the goldfish.\nrule8(something) = actual_enemy(something, parrot) & points(something) == points(phoenix) => sing_song(something, victory_song_for(goldfish))\n\n# The current state of the game is as follows\n# The blobfish knows the defensive plans of the rabbit\nknows(defensive_plans_of(rabbit), blobfish) = True\n# The grasshopper is named Luna\nname(grasshopper, Luna) = True\n# The kangaroo has two friends, and is named Cinnamon\nfriends(kangaroo) = 2\nname(kangaroo, Cinnamon) = True\n# The lobster is named Lily\nname(lobster, Lily) = True\n# The meerkat is named Charlie\nname(meerkat, Charlie) = True\n# The cricket does not remove from the board one of the pieces of the wolverine\nnot remove(cricket, piece_of(wolverine)) = True\n# The rabbit does not proceed to the spot right after the viperfish\nnot proceed(rabbit, spot_right_after(spot_of(viperfish))) = True\n\n# Based on the game state and the rules and preferences, does the cricket sing a victory song for the goldfish?\nquestion = sing_song(cricket, victory_song_for(goldfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals respects the hippopotamus, you can be certain that it will also steal five points from the cheetah\nRule2: The cheetah does not steal five points of the points of the cat, in the case where the hummingbird steals five points from the cheetah\nRule3: If you see that something attacks the green fields of the spider and rolls the dice for the bat, then you can conclude that it also respects the hippopotamus\nRule4: If the grasshopper does not respect the hummingbird and the hare does not sing a victory song for the hummingbird, then the hummingbird does not know the defensive plans of the polar bear\nRule5: If the hummingbird has a card whose color is one of the rainbow colors, then it knows the defensive plans of the polar bear\n\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe hummingbird attacks the green fields whose owner is the spider\nThe hummingbird has a card that is indigo in color\nThe hummingbird rolls the dice for the bat\nThe grasshopper does not respect the hummingbird\n\nBased on the game state and the rules and preferences, does the cheetah steal five points from the cat?\nQuestion: Does the cheetah steal five points from the cat?",
        "idx": 16,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals respects the hippopotamus, you can be certain that it will also steal five points from the cheetah\nrule1() = respects(something, hippopotamus) => steal_points(something, cheetah, 5)\n# Rule2: The cheetah does not steal five of the points of the cat, in the case where the hummingbird steals five points from the cheetah\nrule2() = steal_points(hummingbird, cheetah, 5) => not steal_points(cheetah, cat, 5)\n# Rule3: If you see that something attacks the green fields of the spider and rolls the dice for the bat, what can you certainly conclude? You can conclude that it also respects the hippopotamus\nrule3(something) = attacks(something, green_fields_of(spider)) & rolls_dice(something, bat) => respects(something, hippopotamus)\n# Rule4: For the hummingbird, if the belief is that the grasshopper does not respect the hummingbird and the hare does not sing a victory song for the hummingbird, then you can add \"the hummingbird does not know the defensive plans of the polar bear\" to your conclusions\nrule4() = not respects(grasshopper, hummingbird) & not sing_song(hare, victory_song_for(hummingbird)) => not knows_defensive_plans(hummingbird, polar_bear)\n# Rule5: Regarding the hummingbird, if it has a card whose color is one of the rainbow colors, then we can conclude that it knows the defensive plans of the polar bear.\nrule5() = has(hummingbird, card_with(color_in(rainbow_colors))) => knows_defensive_plans(hummingbird, polar_bear)\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The hummingbird attacks the green fields whose owner is the spider\nattacks(hummingbird, green_fields_of(spider)) = True\n# The hummingbird has a card that is indigo in color\nhas(hummingbird, card_with(indigo_color)) = True\n# The hummingbird rolls the dice for the bat\nrolls_dice(hummingbird, bat) = True\n# The grasshopper does not respect the hummingbird\nrespects(grasshopper, hummingbird) = False\n\n# Based on the game state and the rules and preferences, does the cheetah steal five points from the cat?\nquestion = steal_points(cheetah, cat, 5)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something knocks down the fortress of the viperfish and becomes an actual enemy of the kudu, then it does not owe money to the elephant\nRule2: The kiwi offers a job to the swordfish whenever at least one animal becomes an actual enemy of the parrot\nRule3: The panda bear becomes an enemy of the kudu whenever at least one animal offers a job to the swordfish\nRule4: If the catfish has a musical instrument, then it does not steal five points from the grizzly bear\nRule5: If the catfish does not owe money to the grizzly bear, then the grizzly bear sings a song of victory for the panda bear\nRule6: If the catfish has fewer than 12 friends, then it does not steal five points from the grizzly bear\nRule7: If one of the animals does not roll the dice for the sea bass, then it respects the blobfish\nRule8: If the lobster respects the blobfish, then the blobfish knocks down the fortress of the panda bear\nRule9: If the blobfish knocks down the fortress of the panda bear and the grizzly bear sings a song of victory for the panda bear, then the panda bear owes money to the elephant\n\nRule1 is preferred over Rule9\n\nThe current state of the game is as follows\nThe baboon becomes an enemy of the parrot\nThe catfish has a card that is black in color\nThe catfish has eight easy-going friends and two not-easy-going friends\nThe catfish has some spinach\nThe lobster does not roll the dice for the sea bass\n\nBased on the game state and the rules and preferences, does the panda bear owe money to the elephant?\nQuestion: Does the panda bear owe money to the elephant?",
        "idx": 17,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something knocks down the fortress of the viperfish and becomes an actual enemy of the kudu, what can you certainly conclude? You can conclude that it does not owe $$$ to the elephant\nrule1() = knock_down(fortress_of(viperfish), something) & enemy(something, kudu) => not owes_money_to(something, elephant)\n# Rule2: The kiwi offers a job to the swordfish whenever at least one animal becomes an actual enemy of the parrot\nrule2() = enemy(something, parrot) => offer_job(kiwi, swordfish)\n# Rule3: The panda bear becomes an enemy of the kudu whenever at least one animal offers a job to the swordfish\nrule3() = offer_job(something, swordfish) => enemy(panda_bear, kudu)\n# Rule4: If the catfish has a musical instrument, then the catfish does not steal five of the points of the grizzly bear\nrule4() = has(catfish, musical_instrument) => not steal_points(catfish, 5, grizzly_bear)\n# Rule5: If the catfish does not owe $$$ to the grizzly bear, then the grizzly bear sings a song of victory for the panda bear\nrule5() = not owes_money_to(catfish, grizzly_bear) => sing_song(grizzly_bear, victory_song_for(panda_bear))\n# Rule6: Regarding the catfish, if it has fewer than 12 friends, then we can conclude that it does not steal five points from the grizzly bear\nrule6() = friends(catfish) < 12 => not steal_points(catfish, 5, grizzly_bear)\n# Rule7: If you are positive that one of the animals does not roll the dice for the sea bass, you can be certain that it will respect the blobfish without a doubt\nrule7(something) = not roll_dice(something, sea_bass) => respect(something, blobfish)\n# Rule8: If the lobster respects the blobfish, then the blobfish knocks down the fortress of the panda bear\nrule8() = respect(lobster, blobfish) => knock_down(fortress_of(panda_bear), blobfish)\n# Rule9: If the blobfish knocks down the fortress that belongs to the panda bear and the grizzly bear sings a song of victory for the panda bear, then the panda bear owes money to the elephant.\nrule9() = knock_down(fortress_of(panda_bear), blobfish) & sing_song(grizzly_bear, victory_song_for(panda_bear)) => owes_money_to(panda_bear, elephant)\n# Rule1 is preferred over Rule9\norder(rule1) > order(rule9) = True\n\n# The current state of the game is as follows\n# The baboon becomes an enemy of the parrot\nenemy(baboon, parrot) = True\n# The catfish has a card that is black in color\nhas(catfish, card_with(black_color)) = True\n# The catfish has eight friends that are easy going and two friends that are not, and has some spinach\nfriends(catfish, easy_going) = 8\nfriends(catfish, not_easy_going) = 2\nhas(catfish, spinach) = True\n# The lobster does not roll the dice for the sea bass\nnot roll_dice(lobster, sea_bass) = True\n\n# Based on the game state and the rules and preferences, does the panda bear owe money to the elephant?\nquestion = owes_money_to(panda_bear, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sea bass has more than 1 friend, then the sea bass knocks down the fortress of the squirrel\nRule2: If at least one animal shows all her cards to the viperfish, then the sea bass does not roll the dice for the canary\nRule3: If at least one animal learns elementary resource management from the starfish, then the goldfish shows all her cards to the viperfish\nRule4: If you are positive that you saw one of the animals owes money to the carp, you can be certain that it will also steal five points from the cat\nRule5: If the sea bass has a name whose first letter is the same as the first letter of the leopard's name, then the sea bass does not knock down the fortress of the squirrel\nRule6: If the koala has a leafy green vegetable, then it eats the food of the cow\nRule7: If the koala has a name whose first letter is the same as the first letter of the meerkat's name, then the koala eats the food that belongs to the cow\nRule8: If something knocks down the fortress that belongs to the squirrel and also raises a flag of peace for the doctorfish, then it will surely roll the dice for the canary\nRule9: If the elephant does not know the defensive plans of the koala, then the koala becomes an actual enemy of the cockroach\nRule10: If at least one animal steals five points from the cat, then the bat becomes an enemy of the canary\nRule11: If the sea bass has something to sit on, then the sea bass does not knock down the fortress of the squirrel\nRule12: If the rabbit eats the food that belongs to the elephant, then the elephant does not know the defensive plans of the koala\nRule13: If the sea bass has a card with a primary color, then it raises a peace flag for the doctorfish\nRule14: If the bat becomes an actual enemy of the canary and the sea bass rolls the dice for the canary, then the canary eats the food of the amberjack\nRule15: If the sea bass took a bike from the store, then it knocks down the fortress of the squirrel\nRule16: If something eats the food that belongs to the cow, then it does not become an actual enemy of the cockroach\n\nRule11 is preferred over Rule1\nRule11 is preferred over Rule15\nRule5 is preferred over Rule1\nRule5 is preferred over Rule15\nRule8 is preferred over Rule2\nRule9 is preferred over Rule16\n\nThe current state of the game is as follows\nThe ferret owes money to the carp\nThe koala has romaine lettuce\nThe koala is named Mojo\nThe meerkat is named Buddy\nThe rabbit eats the food of the elephant\nThe sea bass has 1 loyal friend and 4 friends that are not loyal\nThe sea bass parked her bike in front of the store\nThe sea bass has a backpack\nThe sea bass has a card that is blue in color\nThe sea bass is named Bella\nThe tilapia learns the basics of resource management from the starfish\n\nBased on the game state and the rules and preferences, does the canary eat the food of the amberjack?\nQuestion: Does the canary eat the food of the amberjack?",
        "idx": 18,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sea bass has more than 1 friend, then the sea bass knocks down the fortress of the squirrel\nrule1() = friends(sea_bass) > 1 => knock_down(fortress_of(squirrel))\n# Rule2: If at least one animal shows her cards (all of them) to the viperfish, then the sea bass does not roll the dice for the canary\nrule2() = show_cards(something, viperfish) => not roll_dice(sea_bass, canary)\n# Rule3: If at least one animal learns elementary resource management from the starfish, then the goldfish shows all her cards to the viperfish\nrule3() = learn(something, elementary_resource_management_from(starfish)) => show_all_cards(goldfish, viperfish)\n# Rule4: If you are positive that you saw one of the animals owes $$$ to the carp, you can be certain that it will also steal five points from the cat\nrule4(something) = owes_money_to(something, carp) => steal_points(something, 5, cat)\n# Rule5: If the sea bass has a name whose first letter is the same as the first letter of the leopard's name, then the sea bass does not knock down the fortress of the squirrel\nrule5() = first_letter_of(name(sea_bass)) == first_letter_of(name(leopard)) => not knock_down(fortress_of(squirrel))\n# Rule6: Regarding the koala, if it has a leafy green vegetable, then we can conclude that it eats the food of the cow\nrule6() = has(koala, leafy_green_vegetable) => eats_food(koala, food_of(cow))\n# Rule7: If the koala has a name whose first letter is the same as the first letter of the meerkat's name, then the koala eats the food that belongs to the cow\nrule7() = first_letter_of(name(koala)) == first_letter_of(name(meerkat)) => eats_food(koala, food_of(cow))\n# Rule8: Be careful when something knocks down the fortress that belongs to the squirrel and also raises a flag of peace for the doctorfish because in this case it will surely roll the dice for the canary (this may or may not be problematic)\nrule8(something) = knock_down(fortress_of(squirrel), something) & raise_flag_of_peace(something, doctorfish) => roll_dice(something, canary)\n# Rule9: The koala unquestionably becomes an actual enemy of the cockroach, in the case where the elephant does not know the defensive plans of the koala\nrule9() = not knows(defensive_plans_of(koala), elephant) => enemy(koala, cockroach)\n# Rule10: If at least one animal steals five of the points of the cat, then the bat becomes an enemy of the canary\nrule10() = steal_points(something, 5, cat) => enemy(bat, canary)\n# Rule11: If the sea bass has something to sit on, then the sea bass does not knock down the fortress of the squirrel\nrule11() = has(sea_bass, something_to_sit_on) => not knock_down(fortress_of(squirrel))\n# Rule12: The elephant does not know the defensive plans of the koala, in the case where the rabbit eats the food that belongs to the elephant\nrule12() = eats_food(rabbit, food_of(elephant)) => not knows(defensive_plans_of(koala), elephant)\n# Rule13: Regarding the sea bass, if it has a card with a primary color, then we can conclude that it raises a peace flag for the doctorfish\nrule13() = has(sea_bass, card_with(primary_color)) => raise_flag_of_peace(sea_bass, doctorfish)\n# Rule14: For the canary, if the belief is that the bat becomes an actual enemy of the canary and the sea bass rolls the dice for the canary, then you can add \"the canary eats the food of the amberjack\" to your conclusions\nrule14() = belief(enemy(bat, canary)) & roll_dice(sea_bass, canary) => eats_food(canary, food_of(amberjack))\n# Rule15: Regarding the sea bass, if it took a bike from the store, then we can conclude that it knocks down the fortress of the squirrel\nrule15() = took(sea_bass, bike_from(store)) => knock_down(fortress_of(squirrel))\n# Rule16: If something eats the food that belongs to the cow, then it does not become an actual enemy of the cockroach.\nrule16(something) = eats_food(something, food_of(cow)) => not enemy(something, cockroach)\n# Rule11 is preferred over Rule1\norder(rule11) > order(rule1) = True\n# Rule11 is preferred over Rule15\norder(rule11) > order(rule15) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule5 is preferred over Rule15\norder(rule5) > order(rule15) = True\n# Rule8 is preferred over Rule2\norder(rule8) > order(rule2) = True\n# Rule9 is preferred over Rule16\norder(rule9) > order(rule16) = True\n\n# The current state of the game is as follows\n# The ferret owes money to the carp\nowes_money_to(ferret, carp) = True\n# The koala has some romaine lettuce\nhas(koala, romaine_lettuce) = True\n# The koala is named Mojo\nname(koala, Mojo) = True\n# The meerkat is named Buddy\nname(meerkat, Buddy) = True\n# The rabbit eats the food of the elephant\neats_food(rabbit, food_of(elephant)) = True\n# The sea bass has 1 loyal friend and 4 friends that are not loyal\nfriends(sea_bass) = 1\n# The sea bass parked her bike in front of the store\nparked(sea_bass, bike, in_front_of(store)) = True\n# The sea bass has a backpack\nhas(sea_bass, backpack) = True\n# The sea bass has a card that is blue in color\nhas(sea_bass, card_with(blue_color)) = True\n# The sea bass is named Bella\nname(sea_bass, Bella) = True\n# The tilapia learns the basics of resource management from the starfish\nlearn(tilapia, basics_of_resource_management_from(starfish)) = True\n\n# Based on the game state and the rules and preferences, does the canary eat the food of the amberjack?\nquestion = eats_food(canary, food_of(amberjack))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hummingbird has a card whose color starts with the letter \"h\", then it does not sing a song of victory for the starfish\nRule2: If the hummingbird sings a song of victory for the starfish, then the starfish knocks down the fortress of the gecko\nRule3: If the name of the hummingbird starts with the same letter as the name of the oscar, then it does not sing a song of victory for the starfish\nRule4: If the blobfish does not sing a song of victory for the hummingbird and the oscar proceeds to the spot right after the hummingbird, then the hummingbird sings a victory song for the starfish\nRule5: If an animal knocks down the fortress of the gecko, then it does not need support from the black bear\n\nRule1 is preferred over Rule4\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe hummingbird has a card that is white in color\nThe hummingbird is named Teddy\nThe oscar proceeds to the spot right after the hummingbird\nThe blobfish does not sing a victory song for the hummingbird\n\nBased on the game state and the rules and preferences, does the starfish need support from the black bear?\nQuestion: Does the starfish need support from the black bear?",
        "idx": 19,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hummingbird has a card whose color starts with the letter \"h\", then the hummingbird does not sing a song of victory for the starfish\nrule1() = has(hummingbird, card_with(color_starting_with(\"h\"))) => not sing_song(hummingbird, victory_song_for(starfish))\n# Rule2: The starfish unquestionably knocks down the fortress of the gecko, in the case where the hummingbird sings a song of victory for the starfish\nrule2() = sing_song(hummingbird, victory_song_for(starfish)) => knock_down(starfish, fortress_of(gecko))\n# Rule3: If the hummingbird has a name whose first letter is the same as the first letter of the oscar's name, then the hummingbird does not sing a song of victory for the starfish\nrule3() = first_letter_of(name(hummingbird)) == first_letter_of(name(oscar)) => not sing_song(hummingbird, victory_song_for(starfish))\n# Rule4: For the hummingbird, if the belief is that the blobfish does not sing a song of victory for the hummingbird but the oscar proceeds to the spot that is right after the spot of the hummingbird, then you can add \"the hummingbird sings a victory song for the starfish\" to your conclusions\nrule4() = not sing_song(blobfish, victory_song_for(hummingbird)) & proceed(oscar, spot_right_after(spot_of(hummingbird))) => sing_song(hummingbird, victory_song_for(starfish))\n# Rule5: If you are positive that you saw one of the animals knocks down the fortress that belongs to the gecko, you can be certain that it will not need support from the black bear.\nrule5(something) = knock_down(something, fortress_of(gecko)) => not need_support(something, black_bear)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The hummingbird has a card that is white in color\nhas(hummingbird, card_with(white_color)) = True\n# The hummingbird is named Teddy\nname(hummingbird, Teddy) = True\n# The oscar proceeds to the spot right after the hummingbird\nproceed(oscar, spot_right_after(spot_of(hummingbird))) = True\n# The blobfish does not sing a victory song for the hummingbird\nnot sing_song(blobfish, victory_song_for(hummingbird)) = True\n\n# Based on the game state and the rules and preferences, does the starfish need support from the black bear?\nquestion = need_support(starfish, black_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cricket knocks down the fortress of the jellyfish, then the jellyfish holds an equal number of points as the mosquito\nRule2: If the phoenix has a name whose first letter is the same as the first letter of the viperfish's name, then the phoenix needs support from the grasshopper\nRule3: If one of the animals does not hold an equal number of points as the mosquito, then it will not proceed to the spot right after the zander\nRule4: If something does not give a magnifying glass to the hare but raises a peace flag for the moose, then it does not wink at the zander\nRule5: If at least one animal needs the support of the grasshopper, then the jellyfish proceeds to the spot right after the zander\nRule6: If the phoenix has fewer than 8 friends, then it needs the support of the grasshopper\nRule7: If the baboon has a name whose first letter is the same as the first letter of the buffalo's name, then the baboon gives a magnifying glass to the hummingbird\nRule8: If at least one animal rolls the dice for the elephant, then the cheetah does not give a magnifying glass to the hare\nRule9: If the cheetah winks at the zander and the jellyfish proceeds to the spot right after the zander, then the zander eats the food that belongs to the swordfish\nRule10: If at least one animal gives a magnifier to the hummingbird, then the cheetah winks at the zander\n\nRule4 is preferred over Rule10\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe baboon is named Cinnamon\nThe buffalo is named Casper\nThe cricket knocks down the fortress of the jellyfish\nThe phoenix has fifteen friends and is named Charlie\nThe rabbit rolls the dice for the elephant\nThe viperfish is named Pashmak\n\nBased on the game state and the rules and preferences, does the zander eat the food of the swordfish?\nQuestion: Does the zander eat the food of the swordfish?",
        "idx": 20,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cricket knocks down the fortress of the jellyfish, then the jellyfish holds an equal number of points as the mosquito\nrule1() = knock_down(fortress_of(jellyfish), cricket) => points(jellyfish) == points(mosquito)\n# Rule2: If the phoenix has a name whose first letter is the same as the first letter of the viperfish's name, then the phoenix needs support from the grasshopper\nrule2() = first_letter_of(name(phoenix)) == first_letter_of(name(viperfish)) => needs_support(phoenix, grasshopper)\n# Rule3: If you are positive that one of the animals does not hold an equal number of points as the mosquito, you can be certain that it will not proceed to the spot right after the zander\nrule3(something) = not equal_points(something, mosquito) => not proceed(something, spot_right_after(spot_of(zander)))\n# Rule4: Be careful when something does not give a magnifying glass to the hare but raises a peace flag for the moose because in this case it certainly does not wink at the zander (this may or may not be problematic)\nrule4(something) = not give_magnifying_glass(something, hare) & raise_flag_of_peace(something, moose) => not wink_at(something, zander)\n# Rule5: If at least one animal needs the support of the grasshopper, then the jellyfish proceeds to the spot that is right after the spot of the zander\nrule5() = needs_support(something, grasshopper) => proceed(jellyfish, spot_right_after(spot_of(zander)))\n# Rule6: Regarding the phoenix, if it has fewer than 8 friends, then we can conclude that it needs the support of the grasshopper\nrule6() = friends(phoenix) < 8 => needs_support(phoenix, grasshopper)\n# Rule7: Regarding the baboon, if it has a name whose first letter is the same as the first letter of the buffalo's name, then we can conclude that it gives a magnifying glass to the hummingbird\nrule7() = first_letter_of(name(baboon)) == first_letter_of(name(buffalo)) => give_magnifying_glass(baboon, hummingbird)\n# Rule8: If at least one animal rolls the dice for the elephant, then the cheetah does not give a magnifying glass to the hare\nrule8() = rolls_dice(something, elephant) => not give_magnifying_glass(cheetah, hare)\n# Rule9: For the zander, if the belief is that the cheetah winks at the zander and the jellyfish proceeds to the spot right after the zander, then you can add \"the zander eats the food that belongs to the swordfish\" to your conclusions\nrule9() = belief(wink_at(cheetah, zander) & proceed(jellyfish, spot_right_after(spot_of(zander)))) => add_conclusion(\"the zander eats the food that belongs to the swordfish\")\n# Rule10: If at least one animal gives a magnifier to the hummingbird, then the cheetah winks at the zander.\nrule10() = give_magnifier(something, hummingbird) => wink_at(cheetah, zander)\n# Rule4 is preferred over Rule10\norder(rule4) > order(rule10) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The baboon is named Cinnamon\nname(baboon, Cinnamon) = True\n# The buffalo is named Casper\nname(buffalo, Casper) = True\n# The cricket knocks down the fortress of the jellyfish\nknock_down(fortress_of(jellyfish), cricket) = True\n# The phoenix has fifteen friends, and is named Charlie\nfriends(phoenix) = 15\nname(phoenix, Charlie) = True\n# The rabbit rolls the dice for the elephant\nrolls_dice(rabbit, elephant) = True\n# The viperfish is named Pashmak\nname(viperfish, Pashmak) = True\n\n# Based on the game state and the rules and preferences, does the zander eat the food of the swordfish?\nquestion = \"the zander eats the food that belongs to the swordfish\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the aardvark has a device to connect to the internet, then the aardvark burns the warehouse of the buffalo\nRule2: If the baboon has a high-quality paper, then it steals five points from the zander\nRule3: If the carp needs support from the eel, then the eel does not respect the ferret\nRule4: If the eel has fewer than 5 friends, then the eel respects the ferret\nRule5: If the baboon has a name whose first letter is the same as the first letter of the mosquito's name, then the baboon knocks down the fortress of the kiwi\nRule6: If one of the animals removes a piece of the squid from the board, then it also attacks the green fields of the eel\nRule7: If the aardvark has a card with a color from the rainbow colors, then it burns the warehouse of the buffalo\nRule8: If something does not knock down the fortress of the kiwi but steals five points from the zander, then it does not proceed to the spot right after the eel\nRule9: If one of the animals does not need support from the gecko, then it steals five points from the grasshopper\nRule10: If the baboon has something to drink, then it does not knock down the fortress of the kiwi\nRule11: If one of the animals respects the ferret, then it does not need support from the gecko\nRule12: If the baboon proceeds to the spot right after the eel and the wolverine attacks the green fields of the eel, then the eel does not steal five points from the grasshopper\nRule13: If the baboon has a card with a color that starts with the letter \"l\", then it does not knock down the fortress of the kiwi\nRule14: If the eel has a name whose first letter is the same as the first letter of the turtle's name, then the eel respects the ferret\nRule15: If at least one animal burns the warehouse of the buffalo, then the baboon proceeds to the spot right after the eel\nRule16: If at least one animal needs the support of the doctorfish, then the wolverine removes a piece of the squid\n\nRule10 is preferred over Rule5\nRule13 is preferred over Rule5\nRule15 is preferred over Rule8\nRule3 is preferred over Rule14\nRule3 is preferred over Rule4\nRule9 is preferred over Rule12\n\nThe current state of the game is as follows\nThe aardvark has a card that is black in color and has a cell phone\nThe baboon has a banana-strawberry smoothie, a hot chocolate, and is named Buddy\nThe baboon has a card that is black in color and published a high-quality paper\nThe eel has 15 friends and is named Peddi\nThe elephant needs support from the doctorfish\nThe mosquito is named Casper\nThe turtle is named Pashmak\n\nBased on the game state and the rules and preferences, does the eel steal five points from the grasshopper?\nQuestion: Does the eel steal five points from the grasshopper?",
        "idx": 21,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the aardvark has a device to connect to the internet, then the aardvark burns the warehouse of the buffalo\nrule1() = has(aardvark, connect_to_internet(device)) => burn(warehouse_of(buffalo))\n# Rule2: Regarding the baboon, if it has a high-quality paper, then we can conclude that it steals five of the points of the zander\nrule2() = has(baboon, high_quality_paper) => steal_points(baboon, 5, zander)\n# Rule3: If the carp needs support from the eel, then the eel is not going to respect the ferret\nrule3() = needs_support(carp, eel) => not respect(eel, ferret)\n# Rule4: If the eel has fewer than 5 friends, then the eel respects the ferret\nrule4() = friends(eel) < 5 => respect(eel, ferret)\n# Rule5: If the baboon has a name whose first letter is the same as the first letter of the mosquito's name, then the baboon knocks down the fortress that belongs to the kiwi\nrule5() = first_letter_of(name(baboon)) == first_letter_of(name(mosquito)) => knock_down(fortress_of(kiwi))\n# Rule6: If you are positive that you saw one of the animals removes from the board one of the pieces of the squid, you can be certain that it will also attack the green fields of the eel\nrule6(something) = remove(something, piece_of(squid)) => attack_green_fields(something, eel)\n# Rule7: Regarding the aardvark, if it has a card whose color is one of the rainbow colors, then we can conclude that it burns the warehouse that is in possession of the buffalo\nrule7() = has(aardvark, card) and color(card) in rainbow_colors => burn(warehouse_of(buffalo))\n# Rule8: If you see that something does not knock down the fortress that belongs to the kiwi but it steals five of the points of the zander, what can you certainly conclude? You can conclude that it is not going to proceed to the spot right after the eel\nrule8(something) = not knock_down(fortress_of(kiwi)) & steal_points(something, 5, zander) => not proceed(something, spot_right_after(spot_of(eel)))\n# Rule9: If you are positive that one of the animals does not need support from the gecko, you can be certain that it will steal five points from the grasshopper without a doubt\nrule9(something) = not needs_support(something, gecko) => steal_points(something, 5, grasshopper)\n# Rule10: Regarding the baboon, if it has something to drink, then we can conclude that it does not knock down the fortress that belongs to the kiwi\nrule10() = has(baboon, drink) => not knock_down(fortress_of(kiwi))\n# Rule11: If you are positive that you saw one of the animals respects the ferret, you can be certain that it will not need support from the gecko\nrule11(something) = respects(something, ferret) => not needs_support(something, gecko)\n# Rule12: For the eel, if the belief is that the baboon proceeds to the spot right after the eel and the wolverine attacks the green fields whose owner is the eel, then you can add that \"the eel is not going to steal five points from the grasshopper\" to your conclusions\nrule12() = proceed(baboon, spot_right_after(spot_of(eel))) & attack_green_fields(wolverine, eel) => not steal_points(eel, 5, grasshopper)\n# Rule13: Regarding the baboon, if it has a card whose color starts with the letter \"l\", then we can conclude that it does not knock down the fortress of the kiwi\nrule13() = has(baboon, card) and color_starts_with(card, \"l\") => not knock_down(fortress_of(kiwi))\n# Rule14: If the eel has a name whose first letter is the same as the first letter of the turtle's name, then the eel respects the ferret\nrule14() = first_letter_of(name(eel)) == first_letter_of(name(turtle)) => respect(eel, ferret)\n# Rule15: The baboon proceeds to the spot right after the eel whenever at least one animal burns the warehouse of the buffalo\nrule15() = burn(warehouse_of(buffalo)) => proceed(baboon, spot_right_after(spot_of(eel)))\n# Rule16: The wolverine removes one of the pieces of the squid whenever at least one animal needs the support of the doctorfish.\nrule16() = needs_support(something, doctorfish) => remove(wolverine, piece_of(squid))\n# Rule10 is preferred over Rule5\norder(rule10) > order(rule5) = True\n# Rule13 is preferred over Rule5\norder(rule13) > order(rule5) = True\n# Rule15 is preferred over Rule8\norder(rule15) > order(rule8) = True\n# Rule3 is preferred over Rule14\norder(rule3) > order(rule14) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule9 is preferred over Rule12\norder(rule9) > order(rule12) = True\n\n# The current state of the game is as follows\n# The aardvark has a card that is black in color, and has a cell phone\nhas(aardvark, card_with(black_color)) = True\nhas(aardvark, cell_phone) = True\n# The baboon has a banana-strawberry smoothie, has a hot chocolate, and is named Buddy\nhas(baboon, banana_strawberry_smoothie) = True\nhas(baboon, hot_chocolate) = True\nname(baboon, Buddy) = True\n# The baboon has a card that is black in color, and published a high-quality paper\nhas(baboon, card_with(black_color)) = True\npublished_high_quality_paper(baboon) = True\n# The eel has 15 friends, and is named Peddi\nfriends(eel) = 15\nname(eel, Peddi) = True\n# The elephant needs support from the doctorfish\nneeds_support(elephant, doctorfish) = True\n# The mosquito is named Casper\nname(mosquito, Casper) = True\n# The turtle is named Pashmak\nname(turtle, Pashmak) = True\n\n# Based on the game state and the rules and preferences, does the eel steal five points from the grasshopper?\nquestion = steal_points(eel, 5, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish has a card whose color starts with the letter \"v\", then the catfish proceeds to the spot right after the snail\nRule2: If something rolls the dice for the lobster, then it knows the defensive plans of the swordfish, too\nRule3: If at least one animal proceeds to the spot right after the snail, then the cheetah burns the warehouse of the swordfish\nRule4: If the whale does not know the defense plan of the swordfish however the cheetah burns the warehouse of the swordfish, then the swordfish will not raise a flag of peace for the gecko\nRule5: If the zander raises a peace flag for the swordfish, then the swordfish raises a peace flag for the gecko\nRule6: If something knocks down the fortress that belongs to the crocodile and also sings a victory song for the kiwi, then it does not know the defense plan of the swordfish\nRule7: If the whale has a leafy green vegetable, then the whale sings a victory song for the kiwi\nRule8: If the whale has a card whose color is one of the rainbow colors, then the whale sings a victory song for the kiwi\nRule9: If at least one animal becomes an actual enemy of the penguin, then the whale knocks down the fortress that belongs to the crocodile\nRule10: If the catfish is a fan of Chris Ronaldo, then it proceeds to the spot right after the snail\nRule11: The cheetah does not burn the warehouse that is in possession of the swordfish, in the case where the eel attacks the green fields of the cheetah\n\nRule11 is preferred over Rule3\nRule2 is preferred over Rule6\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe catfish has a card that is violet in color\nThe catfish hates Chris Ronaldo\nThe spider becomes an enemy of the penguin\nThe whale has a banana-strawberry smoothie\nThe whale has a card that is indigo in color\n\nBased on the game state and the rules and preferences, does the swordfish raise a peace flag for the gecko?\nQuestion: Does the swordfish raise a peace flag for the gecko?",
        "idx": 22,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the catfish has a card whose color starts with the letter \"v\", then the catfish proceeds to the spot right after the snail\nrule1() = has(catfish, card_with(color_starting_with(\"v\"))) => proceed(catfish, spot_right_after(spot_of(snail)))\n# Rule2: If something rolls the dice for the lobster, then it knows the defensive plans of the swordfish, too\nrule2(something) = roll_dice_for(something, lobster) => knows(defensive_plans_of(swordfish), something)\n# Rule3: If at least one animal proceeds to the spot right after the snail, then the cheetah burns the warehouse of the swordfish\nrule3() = proceed(something, spot_right_after(spot_of(snail))) => burn(warehouse_of(swordfish), cheetah)\n# Rule4: If the whale does not know the defense plan of the swordfish however the cheetah burns the warehouse of the swordfish, then the swordfish will not raise a flag of peace for the gecko\nrule4() = not knows(defense_plan_of(swordfish), whale) & burn(warehouse_of(swordfish), cheetah) => not raise_flag_of_peace(swordfish, gecko)\n# Rule5: If the zander raises a peace flag for the swordfish, then the swordfish raises a peace flag for the gecko\nrule5() = raise_flag_of_peace(zander, swordfish) => raise_flag_of_peace(swordfish, gecko)\n# Rule6: Be careful when something knocks down the fortress that belongs to the crocodile and also sings a victory song for the kiwi because in this case it will surely not know the defense plan of the swordfish (this may or may not be problematic)\nrule6(something) = knock_down(fortress_of(crocodile), something) & sing_song(something, victory_song_for(kiwi)) => not knows(defense_plan_of(swordfish), something)\n# Rule7: If the whale has a leafy green vegetable, then the whale sings a victory song for the kiwi\nrule7() = has(whale, leafy_green_vegetable) => sing_song(whale, victory_song_for(kiwi))\n# Rule8: If the whale has a card whose color is one of the rainbow colors, then the whale sings a victory song for the kiwi\nrule8() = has(whale, card_with(color_in(rainbow_colors))) => sing_song(whale, victory_song_for(kiwi))\n# Rule9: If at least one animal becomes an actual enemy of the penguin, then the whale knocks down the fortress that belongs to the crocodile\nrule9() = becomes_enemy(something, penguin) => knock_down(fortress_of(crocodile), whale)\n# Rule10: Regarding the catfish, if it is a fan of Chris Ronaldo, then we can conclude that it proceeds to the spot that is right after the spot of the snail\nrule10() = fan_of(catfish, Chris_Ronaldo) => proceed(catfish, spot_right_after(spot_of(snail)))\n# Rule11: The cheetah does not burn the warehouse that is in possession of the swordfish, in the case where the eel attacks the green fields of the cheetah.\nrule11() = attack(eel, green_fields_of(cheetah)) => not burn(warehouse_of(swordfish), cheetah)\n# Rule11 is preferred over Rule3\norder(rule11) > order(rule3) = True\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The catfish has a card that is violet in color, and hates Chris Ronaldo\nhas(catfish, card_with(violet_color)) = True\nhates(catfish, Chris_Ronaldo) = True\n# The spider becomes an enemy of the penguin\nbecomes_enemy(spider, penguin) = True\n# The whale has a banana-strawberry smoothie, and has a card that is indigo in color\nhas(whale, banana_strawberry_smoothie) = True\nhas(whale, card_with(indigo_color)) = True\n\n# Based on the game state and the rules and preferences, does the swordfish raise a peace flag for the gecko?\nquestion = raise_flag_of_peace(swordfish, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The canary rolls the dice for the lobster whenever at least one animal rolls the dice for the eagle\nRule2: If something offers a job position to the parrot, then it does not roll the dice for the lobster\nRule3: The aardvark rolls the dice for the eagle whenever at least one animal respects the rabbit\nRule4: If one of the animals does not respect the octopus, then it will respect the rabbit\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe phoenix respects the octopus\n\nBased on the game state and the rules and preferences, does the canary roll the dice for the lobster?\nQuestion: Does the canary roll the dice for the lobster?",
        "idx": 23,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The canary rolls the dice for the lobster whenever at least one animal rolls the dice for the eagle\nrule1() = roll_dice(canary, lobster) & roll_dice(animal, eagle)\n# Rule2: If something offers a job position to the parrot, then it does not roll the dice for the lobster\nrule2(something) = offer_job_position(something, parrot) => not roll_dice(something, lobster)\n# Rule3: The aardvark rolls the dice for the eagle whenever at least one animal respects the rabbit\nrule3() = roll_dice(aardvark, eagle) & respects(animal, rabbit)\n# Rule4: If you are positive that one of the animals does not respect the octopus, you can be certain that it will respect the rabbit without a doubt.\nrule4(something) = not respects(something, octopus) => respects(something, rabbit)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The phoenix respects the octopus\nrespects(phoenix, octopus) = True\n\n# Based on the game state and the rules and preferences, does the canary roll the dice for the lobster?\nquestion = roll_dice(canary, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something holds the same number of points as the cheetah, then it learns the basics of resource management from the jellyfish, too\nRule2: If the salmon has fewer than 7 friends, then the salmon does not become an actual enemy of the grizzly bear\nRule3: If the salmon has a card whose color is one of the rainbow colors, then it becomes an actual enemy of the grizzly bear\nRule4: The crocodile does not knock down the fortress that belongs to the grizzly bear whenever at least one animal raises a peace flag for the tilapia\nRule5: If the crocodile does not knock down the fortress of the grizzly bear but the salmon becomes an actual enemy of the grizzly bear, then the grizzly bear holds an equal number of points as the cheetah\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe salmon has a card that is indigo in color\nThe squirrel raises a peace flag for the tilapia\n\nBased on the game state and the rules and preferences, does the grizzly bear learn the basics of resource management from the jellyfish?\nQuestion: Does the grizzly bear learn the basics of resource management from the jellyfish?",
        "idx": 24,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something holds the same number of points as the cheetah, then it learns the basics of resource management from the jellyfish, too\nrule1(something) = points(something) == points(cheetah) => learn_basics_of_resource_management(something, jellyfish)\n# Rule2: If the salmon has fewer than 7 friends, then the salmon does not become an actual enemy of the grizzly bear\nrule2() = friends(salmon) < 7 => not actual_enemy(salmon, grizzly_bear)\n# Rule3: Regarding the salmon, if it has a card whose color is one of the rainbow colors, then we can conclude that it becomes an actual enemy of the grizzly bear\nrule3() = has(salmon, card) and color(card) in rainbow_colors => actual_enemy(salmon, grizzly_bear)\n# Rule4: The crocodile does not knock down the fortress that belongs to the grizzly bear whenever at least one animal raises a peace flag for the tilapia\nrule4() = raise_flag_of_peace(something, tilapia) => not knock_down(fortress_of(grizzly_bear), crocodile)\n# Rule5: For the grizzly bear, if the belief is that the crocodile does not knock down the fortress of the grizzly bear but the salmon becomes an actual enemy of the grizzly bear, then you can add \"the grizzly bear holds an equal number of points as the cheetah\" to your conclusions.\nrule5() = not knock_down(fortress_of(grizzly_bear), crocodile) & actual_enemy(salmon, grizzly_bear) => points(grizzly_bear) == points(cheetah)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The salmon has a card that is indigo in color\nhas(salmon, card_with(indigo_color)) = True\n# The squirrel raises a peace flag for the tilapia\nraise_flag_of_peace(squirrel, tilapia) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear learn the basics of resource management from the jellyfish?\nquestion = learn_basics_of_resource_management(grizzly_bear, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tilapia does not offer a job position to the hummingbird and the pig rolls the dice for the hummingbird, then the hummingbird does not proceed to the spot that is right after the spot of the moose\nRule2: If something proceeds to the spot that is right after the spot of the moose but does not respect the cow, then the hummingbird does not remove one of the pieces of the halibut\nRule3: If the pig has a card with a color that is one of the rainbow colors, then it does not roll the dice for the hummingbird\nRule4: The hummingbird does not respect the cow whenever at least one animal owes money to the caterpillar\nRule5: The hummingbird removes one of the pieces of the halibut whenever at least one animal respects the cricket\nRule6: If something winks at the carp, then it owes money to the caterpillar\nRule7: If something does not give a magnifier to the snail, then it does not owe money to the caterpillar\nRule8: If at least one animal does not know the defensive plans of the phoenix, then it will proceed to the spot that is right after the spot of the moose\nRule9: The pig rolls the dice for the hummingbird whenever at least one animal gives a magnifier to the starfish\nRule10: The hummingbird does not know the defensive plans of the phoenix whenever at least one animal shows all her cards to the pig\n\nRule1 is preferred over Rule8\nRule3 is preferred over Rule9\nRule5 is preferred over Rule2\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe crocodile gives a magnifier to the starfish\nThe leopard winks at the carp but does not give a magnifier to the snail\nThe wolverine shows all her cards to the pig\n\nBased on the game state and the rules and preferences, does the hummingbird remove one of the pieces of the halibut?\nQuestion: Does the hummingbird remove one of the pieces of the halibut?",
        "idx": 25,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the hummingbird, if the belief is that the tilapia is not going to offer a job position to the hummingbird but the pig rolls the dice for the hummingbird, then you can add that \"the hummingbird is not going to proceed to the spot that is right after the spot of the moose\" to your conclusions\nrule1() = not offer_job_position(tilapia, hummingbird) & roll_dice(pig, hummingbird) => not proceed(hummingbird, spot_right_after(spot_of(moose)))\n# Rule2: Be careful when something proceeds to the spot that is right after the spot of the moose but does not respect the cow because in this case it will, surely, not remove one of the pieces of the halibut (this may or may not be problematic)\nrule2(something) = proceed(something, spot_right_after(spot_of(moose))) & not respects(something, cow) => not remove(hummingbird, piece_of(halibut))\n# Rule3: Regarding the pig, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not roll the dice for the hummingbird\nrule3() = has(pig, card) & color(card) in rainbow_colors => not roll_dice(pig, hummingbird)\n# Rule4: The hummingbird does not respect the cow whenever at least one animal owes $$$ to the caterpillar\nrule4() = owes_money_to(something, caterpillar) => not respects(hummingbird, cow)\n# Rule5: The hummingbird removes from the board one of the pieces of the halibut whenever at least one animal respects the cricket\nrule5() = respects(something, cricket) => remove(hummingbird, piece_of(halibut))\n# Rule6: If something winks at the carp, then it owes money to the caterpillar, too\nrule6(something) = wink(something, carp) => owes_money_to(something, caterpillar)\n# Rule7: If something does not give a magnifier to the snail, then it does not owe money to the caterpillar\nrule7(something) = not give_magnifier(something, snail) => not owes_money_to(something, caterpillar)\n# Rule8: If you are positive that one of the animals does not know the defensive plans of the phoenix, you can be certain that it will proceed to the spot that is right after the spot of the moose without a doubt\nrule8(something) = not knows(defensive_plans_of(phoenix), something) => proceed(something, spot_right_after(spot_of(moose)))\n# Rule9: The pig rolls the dice for the hummingbird whenever at least one animal gives a magnifier to the starfish\nrule9() = give_magnifier(something, starfish) => roll_dice(pig, hummingbird)\n# Rule10: The hummingbird does not know the defensive plans of the phoenix whenever at least one animal shows her cards (all of them) to the pig.\nrule10() = show_cards(something, pig) => not knows(defensive_plans_of(phoenix), hummingbird)\n# Rule1 is preferred over Rule8\norder(rule1) > order(rule8) = True\n# Rule3 is preferred over Rule9\norder(rule3) > order(rule9) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The crocodile gives a magnifier to the starfish\ngive_magnifier(crocodile, starfish) = True\n# The leopard winks at the carp but does not give a magnifier to the snail\nwink(leopard, carp) = True\nnot give_magnifier(leopard, snail) = True\n# The wolverine shows all her cards to the pig\nshow_cards(wolverine, pig) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird remove from the board one of the pieces of the halibut?\nquestion = remove(hummingbird, piece_of(halibut))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal knows the defense plan of the sea bass, then the spider does not wink at the cow\nRule2: If the polar bear has a card whose color is one of the rainbow colors, then the polar bear becomes an actual enemy of the aardvark\nRule3: If one of the animals gives a magnifying glass to the donkey, then it knows the defensive plans of the sea bass\nRule4: If the hummingbird has more than one friend, then it does not know the defensive plans of the sea bass\nRule5: If the spider does not wink at the cow but the donkey learns the basics of resource management from the cow, then the cow offers a job position to the hare\nRule6: If at least one animal becomes an enemy of the aardvark, then the donkey learns elementary resource management from the cow\nRule7: The spider winks at the cow if the mosquito respects the spider\nRule8: If the polar bear owns a luxury aircraft, then it becomes an enemy of the aardvark\n\nRule1 is preferred over Rule7\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe hummingbird has 6 loyal friends and 1 disloyal friend\nThe hummingbird has a blade\nThe polar bear has a black-colored card\nThe polar bear has 3 friends\nThe polar bear owns a luxury aircraft\nThe hummingbird does not give a magnifying glass to the donkey\n\nBased on the game state and the rules and preferences, does the cow offer a job to the hare?\nQuestion: Does the cow offer a job to the hare?",
        "idx": 26,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal knows the defense plan of the sea bass, then the spider does not wink at the cow\nrule1() = knows(defense_plan_of(sea_bass), something) => not wink(spider, cow)\n# Rule2: If the polar bear has a card whose color is one of the rainbow colors, then the polar bear becomes an actual enemy of the aardvark\nrule2() = has(polar_bear, card) and color(card) in rainbow_colors => enemy(polar_bear, aardvark)\n# Rule3: If you are positive that you saw one of the animals gives a magnifying glass to the donkey, you can be certain that it will also know the defensive plans of the sea bass\nrule3() = give_magnifying_glass(something, donkey) => knows(defense_plan_of(sea_bass), something)\n# Rule4: Regarding the hummingbird, if it has more than one friend, then we can conclude that it does not know the defensive plans of the sea bass\nrule4() = friends(hummingbird) > 1 => not knows(defense_plan_of(sea_bass), hummingbird)\n# Rule5: For the cow, if the belief is that the spider does not wink at the cow but the donkey learns the basics of resource management from the cow, then you can add \"the cow offers a job position to the hare\" to your conclusions\nrule5() = not wink(spider, cow) & learn_basics_of_resource_management(donkey, cow) => offer_job_position(cow, hare)\n# Rule6: The donkey learns elementary resource management from the cow whenever at least one animal becomes an enemy of the aardvark\nrule6() = enemy(something, aardvark) => learn_elementary_resource_management(donkey, cow)\n# Rule7: The spider unquestionably winks at the cow, in the case where the mosquito respects the spider\nrule7() = respects(mosquito, spider) => wink(spider, cow)\n# Rule8: Regarding the polar bear, if it owns a luxury aircraft, then we can conclude that it becomes an enemy of the aardvark.\nrule8() = owns(polar_bear, luxury_aircraft) => enemy(polar_bear, aardvark)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The hummingbird has 6 friends that are loyal and one friend that is not, and has a blade\nfriends(hummingbird) = 6\nhas(hummingbird, blade) = True\n# The polar bear has a card that is black in color, and has three friends\nhas(polar_bear, card_with(black_color)) = True\nfriends(polar_bear) = 3\n# The polar bear purchased a luxury aircraft\nowns(polar_bear, luxury_aircraft) = True\n# The hummingbird does not give a magnifier to the donkey\ngive_magnifying_glass(hummingbird, donkey) = False\n\n# Based on the game state and the rules and preferences, does the cow offer a job to the hare?\nquestion = offer_job_position(cow, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something needs support from the amberjack but does not sing a victory song for the salmon because in this case it will surely give a magnifier to the polar bear\nRule2: If something eats the food that belongs to the panda bear, then it knocks down the fortress that belongs to the gecko too\nRule3: The leopard offers a job position to the salmon whenever at least one animal respects the phoenix\nRule4: The moose does not sing a victory song for the salmon whenever at least one animal offers a job position to the salmon\nRule5: The moose needs the support of the amberjack whenever at least one animal knocks down the fortress that belongs to the gecko\nRule6: If the leopard has fewer than 16 friends, then it does not offer a job to the salmon\n\nRule6 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cockroach eats the food of the panda bear\nThe wolverine respects the phoenix\n\nBased on the game state and the rules and preferences, does the moose give a magnifier to the polar bear?\nQuestion: Does the moose give a magnifier to the polar bear?",
        "idx": 27,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something needs support from the amberjack but does not sing a victory song for the salmon because in this case it will, surely, give a magnifier to the polar bear (this may or may not be problematic)\nrule1(something) = needs_support(something, amberjack) & not sing_song(something, victory_song_for(salmon)) => give_magnifier(something, polar_bear)\n# Rule2: If something eats the food that belongs to the panda bear, then it knocks down the fortress that belongs to the gecko, too\nrule2(something) = eat_food(something, food_of(panda_bear)) => knock_down_fortress(something, fortress_of(gecko))\n# Rule3: The leopard offers a job position to the salmon whenever at least one animal respects the phoenix\nrule3() = respects(animal, phoenix) => offer_job_position(leopard, salmon)\n# Rule4: The moose does not sing a song of victory for the salmon whenever at least one animal offers a job position to the salmon\nrule4() = offer_job_position(animal, salmon) => not sing_song(moose, victory_song_for(salmon))\n# Rule5: The moose needs the support of the amberjack whenever at least one animal knocks down the fortress that belongs to the gecko\nrule5() = knock_down_fortress(animal, fortress_of(gecko)) => needs_support(moose, amberjack)\n# Rule6: Regarding the leopard, if it has fewer than 16 friends, then we can conclude that it does not offer a job to the salmon.\nrule6() = friends(leopard) < 16 => not offer_job_position(leopard, salmon)\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cockroach eats the food of the panda bear\neat_food(cockroach, food_of(panda_bear)) = True\n# The wolverine respects the phoenix\nrespects(wolverine, phoenix) = True\n\n# Based on the game state and the rules and preferences, does the moose give a magnifier to the polar bear?\nquestion = give_magnifier(moose, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something prepares armor for the kudu and winks at the penguin, then it does not steal five points from the ferret\nRule2: The black bear winks at the penguin if the meerkat winks at the black bear\nRule3: If something prepares armor for the cricket, then it does not wink at the black bear\nRule4: If at least one animal rolls the dice for the grasshopper, then the meerkat winks at the black bear\nRule5: If the cockroach holds the same number of points as the black bear and the cow respects the black bear, then the black bear prepares armor for the kudu\nRule6: If the hummingbird needs support from the black bear, then the black bear steals five points from the ferret\nRule7: If something raises a peace flag for the mosquito, then it offers a job position to the oscar\nRule8: If the cockroach has a name whose first letter is the same as the first letter of the panther's name, then the cockroach holds an equal number of points as the black bear\nRule9: If something does not eat the food of the panda bear, then it respects the black bear\nRule10: If something offers a job position to the oscar, then it does not wink at the penguin\nRule11: If the cockroach has fewer than 12 friends, then it holds the same number of points as the black bear\n\nRule2 is preferred over Rule10\nRule3 is preferred over Rule4\nRule6 is preferred over Rule1\n\nThe current state of the game is as follows\nThe black bear raises a peace flag for the mosquito\nThe cockroach has a card that is red in color\nThe cockroach is named Tango\nThe cockroach has four friends\nThe leopard burns the warehouse of the lion\nThe panther is named Lily\nThe parrot rolls the dice for the grasshopper\nThe cow does not eat the food of the panda bear\n\nBased on the game state and the rules and preferences, does the black bear steal five points from the ferret?\nQuestion: Does the black bear steal five points from the ferret?",
        "idx": 28,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something prepares armor for the kudu and winks at the penguin, what can you certainly conclude? You can conclude that it does not steal five points from the ferret\nrule1() = prepare_armor(something, kudu) & wink_at(something, penguin) => not steal_points(something, 5, ferret)\n# Rule2: The black bear unquestionably winks at the penguin, in the case where the meerkat winks at the black bear\nrule2() = wink_at(black_bear, penguin) <= wink_at(meerkat, black_bear)\n# Rule3: If something prepares armor for the cricket, then it does not wink at the black bear\nrule3() = prepare_armor(something, cricket) => not wink_at(something, black_bear)\n# Rule4: If at least one animal rolls the dice for the grasshopper, then the meerkat winks at the black bear\nrule4() = roll_dice(something, grasshopper) => wink_at(meerkat, black_bear)\n# Rule5: For the black bear, if the belief is that the cockroach holds the same number of points as the black bear and the cow respects the black bear, then you can add \"the black bear prepares armor for the kudu\" to your conclusions\nrule5() = belief(cow, respects(black_bear)) & belief(cockroach, points(cockroach) == points(black_bear)) => prepare_armor(black_bear, kudu)\n# Rule6: If the hummingbird needs support from the black bear, then the black bear steals five points from the ferret\nrule6() = needs_support(hummingbird, black_bear) => steal_points(black_bear, 5, ferret)\n# Rule7: If something raises a peace flag for the mosquito, then it offers a job to the oscar, too\nrule7(something) = raise_flag_of_peace(something, mosquito) => offer_job_position(something, oscar)\n# Rule8: If the cockroach has a name whose first letter is the same as the first letter of the panther's name, then the cockroach holds an equal number of points as the black bear\nrule8() = first_letter_of(name(cockroach)) == first_letter_of(name(panther)) => points(cockroach) == points(black_bear)\n# Rule9: If something does not eat the food that belongs to the panda bear, then it respects the black bear\nrule9(something) = not eat_food(something, food_of(panda_bear)) => respects(something, black_bear)\n# Rule10: If something offers a job position to the oscar, then it does not wink at the penguin\nrule10(something) = offer_job_position(something, oscar) => not wink_at(something, penguin)\n# Rule11: Regarding the cockroach, if it has fewer than 12 friends, then we can conclude that it holds the same number of points as the black bear.\nrule11() = friends(cockroach) < 12 => points(cockroach) == points(black_bear)\n# Rule2 is preferred over Rule10\norder(rule2) > order(rule10) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n\n# The current state of the game is as follows\n# The black bear raises a peace flag for the mosquito\nraise_flag_of_peace(black_bear, mosquito) = True\n# The cockroach has a card that is red in color, and is named Tango\nhas(cockroach, card_with(red_color)) = True\nname(cockroach, Tango) = True\n# The cockroach has four friends\nfriends(cockroach) = 4\n# The leopard burns the warehouse of the lion\nburn(warehouse_of(lion), leopard) = True\n# The panther is named Lily\nname(panther, Lily) = True\n# The parrot rolls the dice for the grasshopper\nroll_dice(parrot, grasshopper) = True\n# The cow does not eat the food of the panda bear\nnot eat_food(cow, food_of(panda_bear)) = True\n\n# Based on the game state and the rules and preferences, does the black bear steal five points from the ferret?\nquestion = steal_points(black_bear, 5, ferret)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not eat the food that belongs to the donkey but raises a flag of peace for the elephant, then it also winks at the elephant\nRule2: If the pig prepares armor for the lobster and the catfish does not offer a job position to the lobster, then the lobster will never give a magnifying glass to the eagle\nRule3: If the oscar has a high salary, then it does not raise a flag of peace for the elephant\nRule4: If the tilapia offers a job position to the catfish, then the catfish does not offer a job position to the lobster\nRule5: If the kudu does not know the defense plan of the oscar, then the oscar raises a flag of peace for the elephant\nRule6: If at least one animal shows all her cards to the raven, then the oscar eats the food that belongs to the donkey\nRule7: If the oscar has a musical instrument, then it gives a magnifying glass to the gecko\nRule8: If at least one animal winks at the elephant, then the lobster gives a magnifier to the eagle\nRule9: If at least one animal learns the basics of resource management from the parrot, then the tilapia offers a job position to the catfish\nRule10: If the oscar has a musical instrument, then it does not eat the food of the donkey\nRule11: If the oscar has a sharp object, then it does not raise a peace flag for the elephant\nRule12: If the oscar has more than five friends, then it does not eat the food that belongs to the donkey\nRule13: If the name of the oscar starts with the same letter as the name of the polar bear, then the oscar gives a magnifying glass to the gecko\n\nRule2 is preferred over Rule8\nRule5 is preferred over Rule11\nRule5 is preferred over Rule3\nRule6 is preferred over Rule10\nRule6 is preferred over Rule12\n\nThe current state of the game is as follows\nThe cheetah learns the basics of resource management from the parrot\nThe kudu knows the defensive plans of the oscar\nThe oscar has 3 adventurous friends and 1 non-adventurous friend\nThe oscar has a beer and a harmonica\nThe oscar is named Beauty\nThe oscar has a flute\nThe polar bear is named Bella\n\nBased on the game state and the rules and preferences, does the lobster give a magnifier to the eagle?\nQuestion: Does the lobster give a magnifier to the eagle?",
        "idx": 29,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not eat the food that belongs to the donkey but it raises a flag of peace for the elephant, what can you certainly conclude? You can conclude that it also winks at the elephant\nrule1() = not eat_food(something, donkey) & raise_flag_of_peace(something, elephant) => wink_at(something, elephant)\n# Rule2: If the pig prepares armor for the lobster and the catfish does not offer a job position to the lobster, then the lobster will never give a magnifying glass to the eagle\nrule2() = prepare_armor(pig, lobster) & not offer_job_position(catfish, lobster) => never_give_magnifying_glass(lobster, eagle)\n# Rule3: Regarding the oscar, if it has a high salary, then we can conclude that it does not raise a flag of peace for the elephant\nrule3() = has_high_salary(oscar) => not raise_flag_of_peace(oscar, elephant)\n# Rule4: The catfish does not offer a job to the lobster, in the case where the tilapia offers a job to the catfish\nrule4() = offer_job_position(tilapia, catfish) => not offer_job_position(catfish, lobster)\n# Rule5: The oscar unquestionably raises a flag of peace for the elephant, in the case where the kudu does not know the defense plan of the oscar\nrule5() = not knows_defense_plan(kudu, oscar) => raise_flag_of_peace(oscar, elephant)\n# Rule6: The oscar eats the food that belongs to the donkey whenever at least one animal shows all her cards to the raven\nrule6() = show_all_cards(animal, raven) => eat_food(oscar, donkey)\n# Rule7: If the oscar has a musical instrument, then the oscar gives a magnifying glass to the gecko\nrule7() = has(oscar, musical_instrument) => give_magnifying_glass(oscar, gecko)\n# Rule8: If at least one animal winks at the elephant, then the lobster gives a magnifier to the eagle\nrule8() = wink_at(animal, elephant) => give_magnifier(lobster, eagle)\n# Rule9: If at least one animal learns the basics of resource management from the parrot, then the tilapia offers a job to the catfish\nrule9() = learn_basics_of_resource_management(animal, parrot) => offer_job_position(tilapia, catfish)\n# Rule10: If the oscar has a musical instrument, then the oscar does not eat the food of the donkey\nrule10() = has(oscar, musical_instrument) => not eat_food(oscar, donkey)\n# Rule11: Regarding the oscar, if it has a sharp object, then we can conclude that it does not raise a peace flag for the elephant\nrule11() = has(oscar, sharp_object) => not raise_flag_of_peace(oscar, elephant)\n# Rule12: If the oscar has more than five friends, then the oscar does not eat the food that belongs to the donkey\nrule12() = friends(oscar) > 5 => not eat_food(oscar, donkey)\n# Rule13: Regarding the oscar, if it has a name whose first letter is the same as the first letter of the polar bear's name, then we can conclude that it gives a magnifying glass to the gecko.\nrule13() = first_letter_of(name(oscar)) == first_letter_of(name(polar_bear)) => give_magnifying_glass(oscar, gecko)\n# Rule2 is preferred over Rule8\norder(rule2) > order(rule8) = True\n# Rule5 is preferred over Rule11\norder(rule5) > order(rule11) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule6 is preferred over Rule10\norder(rule6) > order(rule10) = True\n# Rule6 is preferred over Rule12\norder(rule6) > order(rule12) = True\n\n# The current state of the game is as follows\n# The cheetah learns the basics of resource management from the parrot\nlearn_basics_of_resource_management(cheetah, parrot) = True\n# The kudu knows the defensive plans of the oscar\nknows_defense_plan(kudu, oscar) = True\n# The oscar has 3 adventurous friends and 1 non-adventurous friend, has a beer, has a harmonica, and is named Beauty\nfriends(oscar) = 4\nhas(oscar, beer) = True\nhas(oscar, harmonica) = True\nname(oscar, Beauty) = True\n# The oscar has a flute\nhas(oscar, flute) = True\n# The polar bear is named Bella\nname(polar_bear, Bella) = True\n\n# Based on the game state and the rules and preferences, does the lobster give a magnifier to the eagle?\nquestion = give_magnifier(lobster, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something steals five points from the salmon and also needs support from the oscar because in this case it will surely roll the dice for the cockroach (this may or may not be problematic)\nRule2: If at least one animal prepares armor for the hummingbird, then the grizzly bear steals five points from the salmon\nRule3: If the spider has a card whose color appears in the flag of Belgium, then it prepares armor for the hummingbird\nRule4: If the koala has something to drink, then it owes money to the raven\nRule5: If at least one animal owes money to the raven, then the grizzly bear needs the support of the oscar\nRule6: If the gecko does not eat the food of the koala, then the koala does not owe money to the raven\n\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe koala has a cappuccino\nThe spider has a card that is red in color\n\nBased on the game state and the rules and preferences, does the grizzly bear roll the dice for the cockroach?\nQuestion: Does the grizzly bear roll the dice for the cockroach?",
        "idx": 30,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something steals five points from the salmon and also needs support from the oscar because in this case it will surely roll the dice for the cockroach (this may or may not be problematic)\nrule1(something) = steal_points(something, 5, salmon) & needs_support(something, oscar) => roll_dice(something, cockroach)\n# Rule2: If at least one animal prepares armor for the hummingbird, then the grizzly bear steals five of the points of the salmon\nrule2() = prepare_armor(something, hummingbird) => steal_points(grizzly_bear, 5, salmon)\n# Rule3: Regarding the spider, if it has a card whose color appears in the flag of Belgium, then we can conclude that it prepares armor for the hummingbird\nrule3() = has(spider, card_with(color_in_flag_of_belgium)) => prepare_armor(spider, hummingbird)\n# Rule4: If the koala has something to drink, then the koala owes money to the raven\nrule4() = has(koala, drink) => owes_money_to(koala, raven)\n# Rule5: If at least one animal owes $$$ to the raven, then the grizzly bear needs the support of the oscar\nrule5() = owes_money_to(something, raven) => needs_support(grizzly_bear, oscar)\n# Rule6: If the gecko does not eat the food of the koala, then the koala does not owe $$$ to the raven.\nrule6() = not eat_food(gecko, food_of(koala)) => not owes_money_to(koala, raven)\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The koala has a cappuccino\nhas(koala, cappuccino) = True\n# The spider has a card that is red in color\nhas(spider, card_with(red_color)) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear roll the dice for the cockroach?\nquestion = roll_dice(grizzly_bear, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the carp has more than 5 friends, then it does not prepare armor for the turtle\nRule2: If something eats the food that belongs to the spider, then it does not proceed to the spot right after the grizzly bear\nRule3: If the carp took a bike from the store, then it does not prepare armor for the turtle\nRule4: If the carp has a name whose first letter is the same as the first letter of the bat's name, then it sings a song of victory for the parrot\nRule5: If something sings a song of victory for the parrot but does not prepare armor for the turtle, then it eats the food of the spider\n\nThe current state of the game is as follows\nThe bat is named Milo\nThe carp has six easy-going friends and 2 non-easy-going friends\nThe carp is named Meadow and parked her bike in front of the store\n\nBased on the game state and the rules and preferences, does the carp proceed to the spot right after the grizzly bear?\nQuestion: Does the carp proceed to the spot right after the grizzly bear?",
        "idx": 31,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the carp has more than 5 friends, then the carp does not prepare armor for the turtle\nrule1() = friends(carp) > 5 => not prepare_armor(carp, turtle)\n# Rule2: If something eats the food that belongs to the spider, then it does not proceed to the spot that is right after the spot of the grizzly bear\nrule2() = eat_food(something, food_of(spider)) => not proceed(something, spot_right_after(spot_of(grizzly_bear)))\n# Rule3: Regarding the carp, if it took a bike from the store, then we can conclude that it does not prepare armor for the turtle\nrule3() = took_bike(carp, store) => not prepare_armor(carp, turtle)\n# Rule4: If the carp has a name whose first letter is the same as the first letter of the bat's name, then the carp sings a song of victory for the parrot\nrule4() = first_letter_of(name(carp)) == first_letter_of(name(bat)) => sing_song(carp, victory_song_for(parrot))\n# Rule5: Be careful when something sings a song of victory for the parrot but does not prepare armor for the turtle because in this case it will, surely, eat the food of the spider (this may or may not be problematic).\nrule5(something) = sing_song(something, victory_song_for(parrot)) & not prepare_armor(something, turtle) => eat_food(something, food_of(spider))\n\n# The current state of the game is as follows\n# The bat is named Milo\nname(bat, Milo) = True\n# The carp has six friends that are easy going and 2 friends that are not\nfriends(carp) = 6\n# The carp is named Meadow, and parked her bike in front of the store.\nname(carp, Meadow) = True\nparked_bike(carp, in_front_of(store)) = True\n\n# Based on the game state and the rules and preferences, does the carp proceed to the spot right after the grizzly bear?\nquestion = proceed(carp, spot_right_after(spot_of(grizzly_bear)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the koala does not sing a song of victory for the penguin, then the penguin does not proceed to the spot right after the lion\nRule2: If one of the animals does not respect the hippopotamus, then it will not knock down the fortress that belongs to the carp\nRule3: If the penguin has a card whose color appears in the flag of Netherlands, then it respects the hippopotamus\nRule4: If one of the animals does not knock down the fortress of the carp, then it will proceed to the spot right after the spot of the lion\nRule5: If the penguin killed the mayor, then it respects the hippopotamus\n\nRule1 is preferred over Rule4\n\nThe current state of the game is as follows\nThe penguin assassinated the mayor and has some romaine lettuce\nThe penguin has a card that is black in color\n\nBased on the game state and the rules and preferences, does the penguin proceed to the spot right after the lion?\nQuestion: Does the penguin proceed to the spot right after the lion?",
        "idx": 32,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the koala does not sing a song of victory for the penguin, then the penguin does not proceed to the spot right after the lion\nrule1() = not sing_song(koala, victory_song_for(penguin)) => not proceed(penguin, spot_right_after(spot_of(lion)))\n# Rule2: If you are positive that one of the animals does not respect the hippopotamus, you can be certain that it will not knock down the fortress that belongs to the carp\nrule2(something) = not respects(something, hippopotamus) => not knock_down(fortress_of(carp), something)\n# Rule3: Regarding the penguin, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it respects the hippopotamus\nrule3() = has(penguin, card) and color(card) in colors_of(flag_of(Netherlands)) => respects(penguin, hippopotamus)\n# Rule4: If you are positive that one of the animals does not knock down the fortress of the carp, you can be certain that it will proceed to the spot that is right after the spot of the lion without a doubt\nrule4(something) = not knock_down(fortress_of(carp), something) => proceed(something, spot_right_after(spot_of(lion)))\n# Rule5: If the penguin killed the mayor, then the penguin respects the hippopotamus.\nrule5() = killed(penguin, mayor) => respects(penguin, hippopotamus)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n\n# The current state of the game is as follows\n# The penguin assassinated the mayor, and has some romaine lettuce\nkilled(penguin, mayor) = True\nhas(penguin, romaine_lettuce) = True\n# The penguin has a card that is black in color\nhas(penguin, card_with(black_color)) = True\n\n# Based on the game state and the rules and preferences, does the penguin proceed to the spot right after the lion?\nquestion = proceed(penguin, spot_right_after(spot_of(lion)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sun bear respects the goldfish, then the goldfish steals five points from the tilapia\nRule2: If the leopard respects the tilapia and the goldfish steals five points from the tilapia, then the tilapia knocks down the fortress of the eagle\nRule3: If something does not remove one of the pieces of the raven but owes money to the blobfish, then it does not respect the tilapia\nRule4: If the lobster has a card whose color starts with the letter \"l\", then it knocks down the fortress that belongs to the catfish\nRule5: If the lobster has a sharp object, then it does not knock down the fortress of the catfish\nRule6: If at least one animal sings a victory song for the moose, then the leopard does not owe money to the blobfish\nRule7: The sun bear respects the goldfish whenever at least one animal prepares armor for the parrot\nRule8: If an animal does not steal five points from the ferret, then it owes money to the blobfish\nRule9: The leopard respects the tilapia whenever at least one animal knocks down the fortress of the catfish\nRule10: If the lobster has more than five friends, then it knocks down the fortress that belongs to the catfish\n\nRule10 is preferred over Rule5\nRule3 is preferred over Rule9\nRule4 is preferred over Rule5\nRule6 is preferred over Rule8\n\nThe current state of the game is as follows\nThe lobster has a card that is blue in color\nThe lobster has a tablet\nThe lobster has six friends\nThe lobster published a high-quality paper\nThe oscar prepares armor for the parrot\nThe leopard does not steal five points from the ferret\n\nBased on the game state and the rules and preferences, does the tilapia knock down the fortress of the eagle?\nQuestion: Does the tilapia knock down the fortress of the eagle?",
        "idx": 33,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sun bear respects the goldfish, then the goldfish steals five points from the tilapia\nrule1() = respects(sun_bear, goldfish) => steal_points(goldfish, 5, tilapia)\n# Rule2: If the leopard respects the tilapia and the goldfish steals five points from the tilapia, then the tilapia knocks down the fortress of the eagle\nrule2() = respects(leopard, tilapia) & steal_points(goldfish, 5, tilapia) => knock_down_fortress(tilapia, eagle)\n# Rule3: If you see that something does not remove one of the pieces of the raven but it owes $$$ to the blobfish, what can you certainly conclude? You can conclude that it is not going to respect the tilapia\nrule3(something) = not remove(something, piece_of(raven)) & owes_money_to(something, blobfish) => not respect(something, tilapia)\n# Rule4: Regarding the lobster, if it has a card whose color starts with the letter \"l\", then we can conclude that it knocks down the fortress that belongs to the catfish\nrule4() = has(lobster, card_with(color_starting_with(\"l\"))) => knock_down_fortress(lobster, catfish)\n# Rule5: Regarding the lobster, if it has a sharp object, then we can conclude that it does not knock down the fortress of the catfish\nrule5() = has(lobster, sharp_object) => not knock_down_fortress(lobster, catfish)\n# Rule6: If at least one animal sings a victory song for the moose, then the leopard does not owe $$$ to the blobfish\nrule6() = sing_song(something, victory_song_for(moose)) => not owes_money_to(leopard, blobfish)\n# Rule7: The sun bear respects the goldfish whenever at least one animal prepares armor for the parrot\nrule7() = prepare_armor(something, parrot) => respects(sun_bear, goldfish)\n# Rule8: If you are positive that one of the animals does not steal five points from the ferret, you can be certain that it will owe $$$ to the blobfish without a doubt\nrule8(something) = not steal_points(something, 5, ferret) => owes_money_to(something, blobfish)\n# Rule9: The leopard respects the tilapia whenever at least one animal knocks down the fortress of the catfish\nrule9() = knock_down_fortress(something, catfish) => respects(leopard, tilapia)\n# Rule10: Regarding the lobster, if it has more than five friends, then we can conclude that it knocks down the fortress that belongs to the catfish.\nrule10() = friends(lobster) > 5 => knock_down_fortress(lobster, catfish)\n# Rule10 is preferred over Rule5\norder(rule10) > order(rule5) = True\n# Rule3 is preferred over Rule9\norder(rule3) > order(rule9) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n# Rule6 is preferred over Rule8\norder(rule6) > order(rule8) = True\n\n# The current state of the game is as follows\n# The lobster has a card that is blue in color, and has a tablet\nhas(lobster, card_with(blue_color)) = True\nhas(lobster, tablet) = True\n# The lobster has six friends\nfriends(lobster) = 6\n# The lobster published a high-quality paper\npublished_high_quality_paper(lobster) = True\n# The oscar prepares armor for the parrot\nprepare_armor(oscar, parrot) = True\n# The leopard does not steal five points from the ferret\nnot steal_points(leopard, 5, ferret) = True\n\n# Based on the game state and the rules and preferences, does the tilapia knock down the fortress of the eagle?\nquestion = knock_down_fortress(tilapia, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cockroach does not have her keys, then the cockroach learns elementary resource management from the cheetah\nRule2: If the kiwi knocks down the fortress of the cockroach and the starfish attacks the green fields owned by the cockroach, then the cockroach does not eat the food of the starfish\nRule3: If the cockroach has a card with a primary color, then it learns the basics of resource management from the cheetah\nRule4: If something does not eat the food of the starfish but learns the basics of resource management from the cheetah, then it does not learn the basics of resource management from the hippopotamus\nRule5: If the cockroach has something to drink, then it gives a magnifier to the bat\nRule6: If the cockroach has something to sit on, then it does not give a magnifier to the bat\nRule7: If the name of the cockroach starts with the same letter as the name of the parrot, then the cockroach eats the food of the starfish\nRule8: If the cockroach does not learn the basics of resource management from the hippopotamus, then the hippopotamus does not sing a victory song for the jellyfish\n\nRule2 is preferred over Rule7\nRule5 is preferred over Rule6\n\nThe current state of the game is as follows\nThe cockroach has a bench\nThe cockroach has a card that is indigo in color\nThe cockroach has a cello\nThe cockroach is named Beauty\nThe cockroach lost her keys\nThe cockroach has hot chocolate\nThe kiwi knocks down the fortress of the cockroach\nThe parrot is named Bella\nThe starfish attacks the green fields owned by the cockroach\n\nBased on the game state and the rules and preferences, does the hippopotamus sing a victory song for the jellyfish?\nQuestion: Does the hippopotamus sing a victory song for the jellyfish?",
        "idx": 34,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cockroach does not have her keys, then the cockroach learns elementary resource management from the cheetah\nrule1() = not has(cockroach, keys) => learn_elementary_resource_management(cockroach, cheetah)\n# Rule2: For the cockroach, if the belief is that the kiwi knocks down the fortress of the cockroach and the starfish attacks the green fields whose owner is the cockroach, then you can add that \"the cockroach is not going to eat the food of the starfish\" to your conclusions\nrule2() = belief(kiwi_knocks_down_fortress_of(cockroach)) & belief(starfish_attacks_green_fields_of(cockroach)) => not eat_food_of(cockroach, starfish)\n# Rule3: Regarding the cockroach, if it has a card with a primary color, then we can conclude that it learns the basics of resource management from the cheetah\nrule3() = has(cockroach, card_with(primary_color)) => learn_basics_of_resource_management(cockroach, cheetah)\n# Rule4: Be careful when something does not eat the food that belongs to the starfish but learns the basics of resource management from the cheetah because in this case it certainly does not learn the basics of resource management from the hippopotamus (this may or may not be problematic)\nrule4(something) = not eat_food_of(something, starfish) & learn_basics_of_resource_management(something, cheetah) => not learn_basics_of_resource_management(something, hippopotamus)\n# Rule5: Regarding the cockroach, if it has something to drink, then we can conclude that it gives a magnifier to the bat\nrule5() = has(cockroach, something_to_drink) => give_magnifier_to(cockroach, bat)\n# Rule6: Regarding the cockroach, if it has something to sit on, then we can conclude that it does not give a magnifier to the bat\nrule6() = has(cockroach, something_to_sit_on) => not give_magnifier_to(cockroach, bat)\n# Rule7: If the cockroach has a name whose first letter is the same as the first letter of the parrot's name, then the cockroach eats the food of the starfish\nrule7() = first_letter_of(name(cockroach)) == first_letter_of(name(parrot)) => eat_food_of(cockroach, starfish)\n# Rule8: The hippopotamus will not sing a victory song for the jellyfish, in the case where the cockroach does not learn the basics of resource management from the hippopotamus.\nrule8() = not learn_basics_of_resource_management(cockroach, hippopotamus) => not sing_song(hippopotamus, victory_song_for(jellyfish))\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n\n# The current state of the game is as follows\n# The cockroach has a bench, has a card that is indigo in color, has a cello, is named Beauty, and lost her keys\nhas(cockroach, bench) = True\nhas(cockroach, card_with(indigo_color)) = True\nhas(cockroach, cello) = True\nname(cockroach, Beauty) = True\nnot has(cockroach, keys) = True\n# The cockroach has a hot chocolate\nhas(cockroach, hot_chocolate) = True\n# The kiwi knocks down the fortress of the cockroach\nkiwi_knocks_down_fortress_of(cockroach) = True\n# The parrot is named Bella\nname(parrot, Bella) = True\n# The starfish attacks the green fields whose owner is the cockroach\nstarfish_attacks_green_fields_of(cockroach) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus sing a victory song for the jellyfish?\nquestion = sing_song(hippopotamus, victory_song_for(jellyfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the caterpillar does not roll the dice for the leopard, then the leopard does not offer a job to the cockroach\nRule2: If you see that one of the animals holds the same number of points as the squid, then it will not offer a job to the leopard\nRule3: If the halibut does not offer a job to the leopard and the whale attacks the green fields of the leopard, then the leopard learns the basics of resource management from the rabbit\nRule4: If the whale has something to drink, then it attacks the green fields owned by the leopard\nRule5: If one of the animals learns elementary resource management from the rabbit, then it also respects the lobster\nRule6: If something gives a magnifier to the cow but does not offer a job position to the cockroach, then it does not learn the basics of resource management from the rabbit\n\nRule6 is preferred over Rule3\n\nThe current state of the game is as follows\nThe caterpillar rolls the dice for the leopard\nThe halibut holds the same number of points as the squid\nThe whale has a tablet and does not roll the dice for the rabbit\n\nBased on the game state and the rules and preferences, does the leopard respect the lobster?\nQuestion: Does the leopard respect the lobster?",
        "idx": 35,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the caterpillar does not roll the dice for the leopard, then the leopard does not offer a job to the cockroach\nrule1() = not roll_dice(caterpillar, leopard) => not offer_job(leopard, cockroach)\n# Rule2: If you are positive that you saw one of the animals holds the same number of points as the squid, you can be certain that it will not offer a job to the leopard\nrule2(something) = holds_same_points(something, squid) => not offer_job(something, leopard)\n# Rule3: For the leopard, if the belief is that the halibut does not offer a job to the leopard but the whale attacks the green fields of the leopard, then you can add \"the leopard learns the basics of resource management from the rabbit\" to your conclusions\nrule3() = not offer_job(halibut, leopard) & attacks_green_fields(whale, leopard) => learn_basics_of_resource_management(leopard, rabbit)\n# Rule4: If the whale has something to drink, then the whale attacks the green fields whose owner is the leopard\nrule4() = has(drink, whale) => attacks_green_fields(whale, leopard)\n# Rule5: If you are positive that you saw one of the animals learns elementary resource management from the rabbit, you can be certain that it will also respect the lobster\nrule5(something) = learns_elementary_resource_management(something, rabbit) => respects(something, lobster)\n# Rule6: If you see that something gives a magnifier to the cow but does not offer a job position to the cockroach, what can you certainly conclude? You can conclude that it does not learn the basics of resource management from the rabbit.\nrule6() = gives_magnifier(something, cow) & not offer_job(something, cockroach) => not learn_basics_of_resource_management(something, rabbit)\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n\n# The current state of the game is as follows\n# The caterpillar rolls the dice for the leopard\nroll_dice(caterpillar, leopard) = True\n# The halibut holds the same number of points as the squid\nholds_same_points(halibut, squid) = True\n# The whale has a tablet, and does not roll the dice for the rabbit\nhas(whale, tablet) = True\nnot roll_dice(whale, rabbit) = True\n\n# Based on the game state and the rules and preferences, does the leopard respect the lobster?\nquestion = respects(leopard, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not offer a job position to the squid, then it does not raise a peace flag for the eagle\nRule2: If the cheetah does not become an enemy of the eagle, then the eagle does not prepare armor for the donkey\nRule3: The kangaroo will not roll the dice for the halibut, in the case where the zander does not show all her cards to the kangaroo\nRule4: The cheetah raises a peace flag for the eagle whenever at least one animal rolls the dice for the halibut\nRule5: If the black bear has a card with a primary color, then the black bear burns the warehouse that is in possession of the jellyfish\nRule6: If the black bear has something to carry apples and oranges, then it burns the warehouse that is in possession of the jellyfish\nRule7: If at least one animal knocks down the fortress of the doctorfish, then the kangaroo rolls the dice for the halibut\nRule8: If you are positive that you saw one of the animals burns the warehouse that is in possession of the jellyfish, you can be certain that it will not steal five points from the eagle\nRule9: If the cheetah raises a peace flag for the eagle and the black bear does not steal five points from the eagle, then the eagle prepares armor for the donkey\n\nRule1 is preferred over Rule4\nRule2 is preferred over Rule9\nRule3 is preferred over Rule7\n\nThe current state of the game is as follows\nThe black bear has a beer\nThe black bear has a card that is blue in color\nThe cricket knocks down the fortress of the doctorfish\n\nBased on the game state and the rules and preferences, does the eagle prepare armor for the donkey?\nQuestion: Does the eagle prepare armor for the donkey?",
        "idx": 36,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not offer a job position to the squid, then it does not raise a peace flag for the eagle\nrule1() = not offer_job_position(something, squid) => not raise_flag_of_peace(something, eagle)\n# Rule2: If the cheetah does not become an enemy of the eagle, then the eagle does not prepare armor for the donkey\nrule2() = not enemy(cheetah, eagle) => not prepare_armor(eagle, donkey)\n# Rule3: The kangaroo will not roll the dice for the halibut, in the case where the zander does not show all her cards to the kangaroo\nrule3() = not show_all_cards(zander, kangaroo) => not roll_dice(kangaroo, halibut)\n# Rule4: The cheetah raises a peace flag for the eagle whenever at least one animal rolls the dice for the halibut\nrule4() = roll_dice(something, halibut) => raise_flag_of_peace(cheetah, eagle)\n# Rule5: If the black bear has a card with a primary color, then the black bear burns the warehouse that is in possession of the jellyfish\nrule5() = has(black_bear, card_with(primary_color)) => burn(warehouse_of(jellyfish), black_bear)\n# Rule6: Regarding the black bear, if it has something to carry apples and oranges, then we can conclude that it burns the warehouse that is in possession of the jellyfish\nrule6() = has(black_bear, something_to_carry_apples_and_oranges) => burn(warehouse_of(jellyfish), black_bear)\n# Rule7: If at least one animal knocks down the fortress of the doctorfish, then the kangaroo rolls the dice for the halibut\nrule7() = knock_down(fortress_of(doctorfish), something) => roll_dice(kangaroo, halibut)\n# Rule8: If you are positive that you saw one of the animals burns the warehouse that is in possession of the jellyfish, you can be certain that it will not steal five points from the eagle\nrule8(something) = burn(warehouse_of(jellyfish), something) => not steal_points(something, 5, eagle)\n# Rule9: If the cheetah raises a peace flag for the eagle and the black bear does not steal five points from the eagle, then, inevitably, the eagle prepares armor for the donkey.\nrule9() = raise_flag_of_peace(cheetah, eagle) & not steal_points(black_bear, 5, eagle) => prepare_armor(eagle, donkey)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule2 is preferred over Rule9\norder(rule2) > order(rule9) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n\n# The current state of the game is as follows\n# The black bear has a beer\nhas(black_bear, beer) = True\n# The black bear has a card that is blue in color\nhas(black_bear, card_with(blue_color)) = True\n# The cricket knocks down the fortress of the doctorfish\nknock_down(fortress_of(doctorfish), cricket) = True\n\n# Based on the game state and the rules and preferences, does the eagle prepare armor for the donkey?\nquestion = prepare_armor(eagle, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something winks at the crocodile, then it owes money to the catfish, too\nRule2: If something rolls the dice for the buffalo, then it respects the turtle, too\nRule3: The cricket steals five points from the elephant whenever at least one animal attacks the green fields whose owner is the kangaroo\nRule4: If you see that one of the animals steals five points from the elephant, you can be certain that it will not need the support of the goldfish\nRule5: If something does not need the support of the goldfish and also does not owe money to the catfish, then it does not learn elementary resource management from the blobfish\nRule6: If something respects the turtle, then it does not owe money to the catfish\nRule7: If something does not respect the doctorfish, then it learns elementary resource management from the blobfish\n\nRule1 is preferred over Rule6\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cricket rolls the dice for the buffalo\nThe leopard attacks the green fields whose owner is the kangaroo\n\nBased on the game state and the rules and preferences, does the cricket learn the basics of resource management from the blobfish?\nQuestion: Does the cricket learn the basics of resource management from the blobfish?",
        "idx": 37,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something winks at the crocodile, then it owes money to the catfish, too\nrule1() = wink(something, crocodile) => owes_money_to(something, catfish)\n# Rule2: If something rolls the dice for the buffalo, then it respects the turtle, too\nrule2() = rolls_dice_for(something, buffalo) => respects(something, turtle)\n# Rule3: The cricket steals five points from the elephant whenever at least one animal attacks the green fields whose owner is the kangaroo\nrule3() = attacks(green_fields_of(kangaroo), something) => steal_points(cricket, elephant, 5)\n# Rule4: If you are positive that you saw one of the animals steals five of the points of the elephant, you can be certain that it will not need the support of the goldfish\nrule4(something) = steal_points(something, elephant, 5) => not need_support(something, goldfish)\n# Rule5: If you see that something does not need the support of the goldfish and also does not owe $$$ to the catfish, what can you certainly conclude? You can conclude that it also does not learn elementary resource management from the blobfish\nrule5(something) = not need_support(something, goldfish) & not owes_money_to(something, catfish) => not learn_basics_of_resource_management(something, blobfish)\n# Rule6: If something respects the turtle, then it does not owe $$$ to the catfish\nrule6() = respects(something, turtle) => not owes_money_to(something, catfish)\n# Rule7: If something does not respect the doctorfish, then it learns elementary resource management from the blobfish.\nrule7() = not respects(something, doctorfish) => learn_basics_of_resource_management(something, blobfish)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cricket rolls the dice for the buffalo\nrolls_dice_for(cricket, buffalo) = True\n# The leopard attacks the green fields whose owner is the kangaroo\nattacks(green_fields_of(kangaroo), leopard) = True\n\n# Based on the game state and the rules and preferences, does the cricket learn the basics of resource management from the blobfish?\nquestion = learn_basics_of_resource_management(cricket, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the aardvark has fewer than 17 friends, then the aardvark owes money to the phoenix\nRule2: If the kudu has a card whose color appears in the flag of France, then the kudu becomes an actual enemy of the hare\nRule3: If the kudu becomes an actual enemy of the spider, then the spider sings a song of victory for the panda bear\nRule4: If something gives a magnifying glass to the hare and also becomes an enemy of the hare, then it becomes an enemy of the spider\nRule5: If the name of the kudu starts with the same letter as the name of the cat, then the kudu gives a magnifying glass to the hare\nRule6: If the kudu has something to sit on, then it gives a magnifier to the hare\n\nThe current state of the game is as follows\nThe aardvark has 10 friends\nThe cat is named Paco\nThe kudu has a card that is blue in color\nThe kudu has three mean friends and two non-mean friends\nThe kudu has a cutter\nThe kudu is named Buddy\n\nBased on the game state and the rules and preferences, does the spider sing a victory song for the panda bear?\nQuestion: Does the spider sing a victory song for the panda bear?",
        "idx": 38,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the aardvark has fewer than 17 friends, then the aardvark owes money to the phoenix\nrule1() = friends(aardvark) < 17 => owes_money_to(aardvark, phoenix)\n# Rule2: If the kudu has a card whose color appears in the flag of France, then the kudu becomes an actual enemy of the hare\nrule2() = has(kudu, card_with(color_in_flag_of_france)) => actual_enemy(kudu, hare)\n# Rule3: If the kudu becomes an actual enemy of the spider, then the spider sings a song of victory for the panda bear\nrule3() = actual_enemy(kudu, spider) => sing_song(spider, victory_song_for(panda_bear))\n# Rule4: Be careful when something gives a magnifying glass to the hare and also becomes an enemy of the hare because in this case it will surely become an enemy of the spider (this may or may not be problematic)\nrule4(something) = give(something, magnifying_glass, hare) & enemy(something, hare) => enemy(something, spider)\n# Rule5: Regarding the kudu, if it has a name whose first letter is the same as the first letter of the cat's name, then we can conclude that it gives a magnifying glass to the hare\nrule5() = first_letter_of(name(kudu)) == first_letter_of(name(cat)) => give(kudu, magnifying_glass, hare)\n# Rule6: Regarding the kudu, if it has something to sit on, then we can conclude that it gives a magnifier to the hare.\nrule6() = has(kudu, something_to_sit_on) => give(kudu, magnifier, hare)\n\n# The current state of the game is as follows\n# The aardvark has 10 friends\nfriends(aardvark) = 10\n# The cat is named Paco\nname(cat, Paco) = True\n# The kudu has a card that is blue in color, and has three friends that are mean and two friends that are not\nhas(kudu, card_with(blue_color)) = True\nmean_friends(kudu) = 3\nnot_mean_friends(kudu) = 2\n# The kudu has a cutter\nhas(kudu, cutter) = True\n# The kudu is named Buddy\nname(kudu, Buddy) = True\n\n# Based on the game state and the rules and preferences, does the spider sing a victory song for the panda bear?\nquestion = sing_song(spider, victory_song_for(panda_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the meerkat has more than 10 friends, then the meerkat owes money to the sheep\nRule2: If the rabbit respects the viperfish, then the viperfish does not sing a song of victory for the pig\nRule3: If at least one animal owes money to the sheep, then the dog learns elementary resource management from the pig\nRule4: If the catfish does not burn the warehouse of the panther, then the panther will not knock down the fortress that belongs to the dog\nRule5: If the rabbit has a card with a color from the rainbow colors, then the rabbit respects the viperfish\nRule6: If something removes one of the pieces of the squirrel from the board and eats the food that belongs to the cockroach, then it will knock down the fortress that belongs to the dog\nRule7: If the wolverine winks at the moose, then the moose rolls the dice for the viperfish\nRule8: If the meerkat has something to sit on, then it does not owe money to the sheep\nRule9: If the dog learns elementary resource management from the pig and the viperfish does not sing a song of victory for the pig, then the pig sings a victory song for the tiger\nRule10: If the meerkat has something to sit on, then it does not owe money to the sheep\nRule11: If the panther knocks down the fortress of the dog, then the dog does not learn the basics of resource management from the pig\nRule12: If the rabbit has more than fifteen friends, then the rabbit respects the viperfish\nRule13: If the meerkat has a name whose first letter is the same as the first letter of the hippopotamus's name, then the meerkat owes money to the sheep\n\nRule10 is preferred over Rule1\nRule10 is preferred over Rule13\nRule3 is preferred over Rule11\nRule6 is preferred over Rule4\nRule8 is preferred over Rule1\nRule8 is preferred over Rule13\n\nThe current state of the game is as follows\nThe donkey learns the basics of resource management from the moose\nThe goldfish burns the warehouse of the cow\nThe hippopotamus is named Chickpea\nThe meerkat has 1 loyal friend and 8 non-loyal friends\nThe meerkat has arugula\nThe meerkat is named Cinnamon\nThe panther eats the food of the cockroach\nThe panther removes one of the pieces of the squirrel from the board\nThe rabbit has 7 friends\nThe rabbit has a card that is violet in color\nThe wolverine winks at the moose\nThe catfish does not burn the warehouse of the panther\n\nBased on the game state and the rules and preferences, does the pig sing a victory song for the tiger?\nQuestion: Does the pig sing a victory song for the tiger?",
        "idx": 39,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the meerkat has more than 10 friends, then the meerkat owes $$$ to the sheep\nrule1() = friends(meerkat) > 10 => owes_money_to(meerkat, sheep)\n# Rule2: The viperfish does not sing a song of victory for the pig, in the case where the rabbit respects the viperfish\nrule2() = respects(rabbit, viperfish) => not sing_song(viperfish, victory_song_for(pig))\n# Rule3: The dog learns elementary resource management from the pig whenever at least one animal owes $$$ to the sheep\nrule3() = owes_money_to(some_animal, sheep) => learn(dog, elementary_resource_management_from(pig))\n# Rule4: The panther will not knock down the fortress that belongs to the dog, in the case where the catfish does not burn the warehouse of the panther\nrule4() = not burn(warehouse_of(panther), catfish) => not knock_down(fortress_of(dog), panther)\n# Rule5: If the rabbit has a card whose color is one of the rainbow colors, then the rabbit respects the viperfish\nrule5() = has(rabbit, card) and color(card) in rainbow_colors => respects(rabbit, viperfish)\n# Rule6: Be careful when something removes from the board one of the pieces of the squirrel and also eats the food that belongs to the cockroach because in this case it will surely knock down the fortress that belongs to the dog (this may or may not be problematic)\nrule6(something) = remove(something, piece_of(squirrel)) & eat_food(something, food_of(cockroach)) => knock_down(fortress_of(dog), something)\n# Rule7: If the wolverine winks at the moose, then the moose rolls the dice for the viperfish\nrule7() = wink(wolverine, moose) => roll_dice(moose, viperfish)\n# Rule8: If the meerkat has something to sit on, then the meerkat does not owe $$$ to the sheep\nrule8() = has(meerkat, something_to_sit_on) => not owes_money_to(meerkat, sheep)\n# Rule9: If the dog learns elementary resource management from the pig and the viperfish does not sing a song of victory for the pig, then, inevitably, the pig sings a victory song for the tiger\nrule9() = learn(dog, elementary_resource_management_from(pig)) & not sing_song(viperfish, victory_song_for(pig)) => sing_song(pig, victory_song_for(tiger))\n# Rule10: If the meerkat has something to sit on, then the meerkat does not owe money to the sheep\nrule10() = has(meerkat, something_to_sit_on) => not owe_money(meerkat, sheep)\n# Rule11: The dog does not learn the basics of resource management from the pig, in the case where the panther knocks down the fortress of the dog\nrule11() = knock_down(fortress_of(dog), panther) => not learn(dog, basics_of_resource_management_from(pig))\n# Rule12: If the rabbit has more than fifteen friends, then the rabbit respects the viperfish\nrule12() = friends(rabbit) > 15 => respects(rabbit, viperfish)\n# Rule13: If the meerkat has a name whose first letter is the same as the first letter of the hippopotamus's name, then the meerkat owes $$$ to the sheep.\nrule13() = first_letter_of(name(meerkat)) == first_letter_of(name(hippopotamus)) => owes_money_to(meerkat, sheep)\n# Rule10 is preferred over Rule1\norder(rule10) > order(rule1) = True\n# Rule10 is preferred over Rule13\norder(rule10) > order(rule13) = True\n# Rule3 is preferred over Rule11\norder(rule3) > order(rule11) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule8 is preferred over Rule1\norder(rule8) > order(rule1) = True\n# Rule8 is preferred over Rule13\norder(rule8) > order(rule13) = True\n\n# The current state of the game is as follows\n# The donkey learns the basics of resource management from the moose\nlearn(donkey, basics_of_resource_management_from(moose)) = True\n# The goldfish burns the warehouse of the cow\nburn(warehouse_of(cow), goldfish) = True\n# The hippopotamus is named Chickpea\nname(hippopotamus, Chickpea) = True\n# The meerkat has 1 friend that is loyal and 8 friends that are not, has some arugula, and is named Cinnamon\nfriends(meerkat) = 1\nhas(meerkat, arugula) = True\nname(meerkat, Cinnamon) = True\n# The panther eats the food of the cockroach\neat_food(panther, food_of(cockroach)) = True\n# The panther removes from the board one of the pieces of the squirrel\nremove(panther, piece_of(squirrel)) = True\n# The rabbit has 7 friends\nfriends(rabbit) = 7\n# The rabbit has a card that is violet in color\nhas(rabbit, card_with(violet_color)) = True\n# The wolverine winks at the moose\nwink(wolverine, moose) = True\n# The catfish does not burn the warehouse of the panther\nnot burn(warehouse_of(panther), catfish) = True\n\n# Based on the game state and the rules and preferences, does the pig sing a victory song for the tiger?\nquestion = sing_song(pig, victory_song_for(tiger))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something eats the food that belongs to the halibut but does not roll the dice for the raven because in this case it will not become an actual enemy of the tilapia\nRule2: If one of the animals does not sing a song of victory for the viperfish, then it will prepare armor for the tilapia\nRule3: If the cow does not have her keys, then it eats the food that belongs to the halibut\nRule4: The crocodile does not become an enemy of the phoenix whenever at least one animal knocks down the fortress of the bat\nRule5: The sun bear will not sing a song of victory for the viperfish if the blobfish does not give a magnifying glass to the sun bear\nRule6: If the cow has a card with a color from the rainbow colors, then it sings a song of victory for the whale\nRule7: If the cow becomes an actual enemy of the tilapia and the sun bear prepares armor for the tilapia, then the tilapia will not raise a peace flag for the sea bass\nRule8: If at least one animal winks at the snail, then the sun bear sings a victory song for the viperfish\nRule9: If one of the animals knows the defensive plans of the spider, then it will not sing a song of victory for the whale\nRule10: If the donkey owes money to the crocodile, then the crocodile becomes an actual enemy of the phoenix\nRule11: If one of the animals does not sing a song of victory for the whale, then it becomes an actual enemy of the tilapia\n\nRule1 is preferred over Rule11\nRule10 is preferred over Rule4\nRule6 is preferred over Rule9\nRule8 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cow knows the defensive plans of the spider\nThe cow lost her keys\nThe donkey owes money to the crocodile\nThe elephant knocks down the fortress of the bat\nThe blobfish does not give a magnifying glass to the sun bear\n\nBased on the game state and the rules and preferences, does the tilapia raise a peace flag for the sea bass?\nQuestion: Does the tilapia raise a peace flag for the sea bass?",
        "idx": 40,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something eats the food that belongs to the halibut but does not roll the dice for the raven because in this case it will, surely, not become an actual enemy of the tilapia (this may or may not be problematic)\nrule1(something) = eat_food(something, food_of(halibut)) & not roll_dice(something, raven) => not become_enemy(something, tilapia)\n# Rule2: If you are positive that one of the animals does not sing a song of victory for the viperfish, you can be certain that it will prepare armor for the tilapia without a doubt\nrule2(something) = not sing_song(something, victory_song_for(viperfish)) => prepare_armor(something, tilapia)\n# Rule3: Regarding the cow, if it does not have her keys, then we can conclude that it eats the food that belongs to the halibut\nrule3() = not has(cow, keys) => eat_food(cow, food_of(halibut))\n# Rule4: The crocodile does not become an enemy of the phoenix whenever at least one animal knocks down the fortress of the bat\nrule4() = knock_down(something, fortress_of(bat)) => not become_enemy(crocodile, phoenix)\n# Rule5: The sun bear will not sing a song of victory for the viperfish, in the case where the blobfish does not give a magnifying glass to the sun bear\nrule5() = not give(blobfish, magnifying_glass, sun_bear) => not sing_song(sun_bear, victory_song_for(viperfish))\n# Rule6: Regarding the cow, if it has a card whose color is one of the rainbow colors, then we can conclude that it sings a song of victory for the whale\nrule6() = has(cow, card_with(color_in(rainbow_colors))) => sing_song(cow, victory_song_for(whale))\n# Rule7: If the cow becomes an actual enemy of the tilapia and the sun bear prepares armor for the tilapia, then the tilapia will not raise a peace flag for the sea bass\nrule7() = become_enemy(cow, tilapia) & prepare_armor(sun_bear, tilapia) => not raise_flag_of_peace(tilapia, sea_bass)\n# Rule8: If at least one animal winks at the snail, then the sun bear sings a victory song for the viperfish\nrule8() = wink_at(something, snail) => sing_song(sun_bear, victory_song_for(viperfish))\n# Rule9: If you are positive that you saw one of the animals knows the defensive plans of the spider, you can be certain that it will not sing a song of victory for the whale\nrule9(something) = knows(defensive_plans_of(spider), something) => not sing_song(something, victory_song_for(whale))\n# Rule10: If the donkey owes $$$ to the crocodile, then the crocodile becomes an actual enemy of the phoenix\nrule10() = owes_money_to(donkey, crocodile) => become_enemy(crocodile, phoenix)\n# Rule11: If something does not sing a song of victory for the whale, then it becomes an actual enemy of the tilapia.\nrule11(something) = not sing_song(something, victory_song_for(whale)) => become_enemy(something, tilapia)\n# Rule1 is preferred over Rule11\norder(rule1) > order(rule11) = True\n# Rule10 is preferred over Rule4\norder(rule10) > order(rule4) = True\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cow knows the defensive plans of the spider, and lost her keys\nknows(defensive_plans_of(spider), cow) = True\nlost_keys(cow) = True\n# The donkey owes money to the crocodile\nowes_money_to(donkey, crocodile) = True\n# The elephant knocks down the fortress of the bat\nknock_down(elephant, fortress_of(bat)) = True\n# The blobfish does not give a magnifier to the sun bear\nnot give(blobfish, magnifying_glass, sun_bear) = True\n\n# Based on the game state and the rules and preferences, does the tilapia raise a peace flag for the sea bass?\nquestion = raise_flag_of_peace(tilapia, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal learns the basics of resource management from the wolverine, then the squid gives a magnifying glass to the aardvark\nRule2: The meerkat learns the basics of resource management from the wolverine whenever at least one animal respects the carp\nRule3: The ferret does not respect the carp whenever at least one animal removes one of the pieces of the spider\nRule4: If the ferret does not have her keys, then the ferret respects the carp\n\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe buffalo removes from the board one of the pieces of the spider\nThe ferret stole a bike from the store\n\nBased on the game state and the rules and preferences, does the squid give a magnifying glass to the aardvark?\nQuestion: Does the squid give a magnifying glass to the aardvark?",
        "idx": 41,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal learns the basics of resource management from the wolverine, then the squid gives a magnifying glass to the aardvark\nrule1() = learns_basics_of_resource_management(something, wolverine) => give(squid, magnifying_glass, aardvark)\n# Rule2: The meerkat learns the basics of resource management from the wolverine whenever at least one animal respects the carp\nrule2() = respects(something, carp) => learns_basics_of_resource_management(meerkat, wolverine)\n# Rule3: The ferret does not respect the carp whenever at least one animal removes one of the pieces of the spider\nrule3() = remove(something, piece_of(spider)) => not respects(ferret, carp)\n# Rule4: If the ferret does not have her keys, then the ferret respects the carp.\nrule4() = not has(ferret, keys) => respects(ferret, carp)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The buffalo removes from the board one of the pieces of the spider\nremove(buffalo, piece_of(spider)) = True\n# The ferret stole a bike from the store\nstole(ferret, bike_from(store)) = True\n\n# Based on the game state and the rules and preferences, does the squid give a magnifier to the aardvark?\nquestion = give(squid, magnifying_glass, aardvark)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals burns the warehouse that is in possession of the blobfish, you can be certain that it will also knock down the fortress that belongs to the oscar\nRule2: If you see that something does not burn the warehouse of the tilapia but it holds an equal number of points as the kiwi, then it also holds the same number of points as the turtle\nRule3: If the goldfish becomes an actual enemy of the oscar and the wolverine does not knock down the fortress of the oscar, then the oscar will never hold an equal number of points as the turtle\nRule4: If the oscar has a card whose color is one of the rainbow colors, then it holds the same number of points as the kiwi\nRule5: If the oscar has fewer than seventeen friends, then it does not burn the warehouse that is in possession of the tilapia\nRule6: If the wolverine has a name whose first letter is the same as the first letter of the polar bear's name, then the wolverine does not knock down the fortress that belongs to the oscar\nRule7: If the oscar has something to drink, then it holds an equal number of points as the kiwi\nRule8: If you are positive that you saw one of the animals holds an equal number of points as the turtle, then it gives a magnifier to the phoenix\n\nRule1 is preferred over Rule6\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe oscar has 8 friends\nThe oscar has a card that is blue in color\nThe oscar has a tablet\nThe polar bear is named Lucy\nThe wolverine is named Lola\n\nBased on the game state and the rules and preferences, does the oscar give a magnifier to the phoenix?\nQuestion: Does the oscar give a magnifier to the phoenix?",
        "idx": 42,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals burns the warehouse that is in possession of the blobfish, you can be certain that it will also knock down the fortress that belongs to the oscar\nrule1() = saw_burn(warehouse_of(blobfish), something) => knock_down(fortress_of(oscar), something)\n# Rule2: If you see that something does not burn the warehouse of the tilapia but it holds an equal number of points as the kiwi, what can you certainly conclude? You can conclude that it also holds the same number of points as the turtle\nrule2(something) = not burn(warehouse_of(tilapia), something) & points(something) == points(kiwi) => points(something) == points(turtle)\n# Rule3: If the goldfish becomes an actual enemy of the oscar and the wolverine does not knock down the fortress of the oscar, then the oscar will never hold an equal number of points as the turtle\nrule3() = enemy(goldfish, oscar) & not knock_down(fortress_of(oscar), wolverine) => never_equal_points(oscar, turtle)\n# Rule4: Regarding the oscar, if it has a card whose color is one of the rainbow colors, then we can conclude that it holds the same number of points as the kiwi\nrule4() = has(oscar, card) and color(card) in rainbow_colors => points(oscar) == points(kiwi)\n# Rule5: Regarding the oscar, if it has fewer than seventeen friends, then we can conclude that it does not burn the warehouse that is in possession of the tilapia\nrule5() = friends(oscar) < 17 => not burn(warehouse_of(tilapia), oscar)\n# Rule6: If the wolverine has a name whose first letter is the same as the first letter of the polar bear's name, then the wolverine does not knock down the fortress that belongs to the oscar\nrule6() = first_letter_of(name(wolverine)) == first_letter_of(name(polar_bear)) => not knock_down(fortress_of(oscar), wolverine)\n# Rule7: If the oscar has something to drink, then the oscar holds an equal number of points as the kiwi\nrule7() = has(oscar, drink) => points(oscar) == points(kiwi)\n# Rule8: If you are positive that you saw one of the animals holds an equal number of points as the turtle, you can be certain that it will also give a magnifier to the phoenix.\nrule8() = saw_equal_points(something, turtle) => give_magnifier(something, phoenix)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The oscar has 8 friends\nfriends(oscar) = 8\n# The oscar has a card that is blue in color, and has a tablet\nhas(oscar, card_with(blue_color)) = True\nhas(oscar, tablet) = True\n# The polar bear is named Lucy\nname(polar_bear, Lucy) = True\n# The wolverine is named Lola\nname(wolverine, Lola) = True\n\n# Based on the game state and the rules and preferences, does the oscar give a magnifier to the phoenix?\nquestion = give_magnifier(oscar, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal shows her cards to the octopus, then the kudu knocks down the fortress that belongs to the cat\nRule2: If at least one animal eats the food of the jellyfish, then the cat does not become an actual enemy of the hare\nRule3: If you are positive that you saw one of the animals owes money to the salmon, you can be certain that it will not need support from the squirrel\nRule4: If you are positive that one of the animals does not become an enemy of the hare, you can be certain that it will owe money to the salmon without a doubt\nRule5: If you are positive that you saw one of the animals rolls the dice for the wolverine, you can be certain that it will also need the support of the squirrel\nRule6: If the kudu knocks down the fortress of the cat and the salmon offers a job position to the cat, then the cat will not owe money to the salmon.\n\nRule5 is preferred over Rule3\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cat becomes an enemy of the donkey\nThe cat raises a peace flag for the carp\nThe cockroach shows all her cards to the octopus\nThe hummingbird eats the food of the jellyfish\n\nBased on the game state and the rules and preferences, does the cat need support from the squirrel?\nQuestion: Does the cat need support from the squirrel?",
        "idx": 43,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal shows her cards (all of them) to the octopus, then the kudu knocks down the fortress that belongs to the cat\nrule1() = show_cards(something, octopus) => knock_down(kudu, fortress_of(cat))\n# Rule2: If at least one animal eats the food of the jellyfish, then the cat does not become an actual enemy of the hare\nrule2() = eat_food(something, jellyfish) => not actual_enemy(cat, hare)\n# Rule3: If you are positive that you saw one of the animals owes money to the salmon, you can be certain that it will not need support from the squirrel\nrule3() = owes_money_to(something, salmon) => not need_support(something, squirrel)\n# Rule4: If you are positive that one of the animals does not become an enemy of the hare, you can be certain that it will owe money to the salmon without a doubt\nrule4() = not actual_enemy(something, hare) => owes_money_to(something, salmon)\n# Rule5: If you are positive that you saw one of the animals rolls the dice for the wolverine, you can be certain that it will also need the support of the squirrel\nrule5() = rolls_dice_for(something, wolverine) => need_support(something, squirrel)\n# Rule6: If the kudu knocks down the fortress of the cat and the salmon offers a job position to the cat, then the cat will not owe money to the salmon.\nrule6() = knock_down(kudu, fortress_of(cat)) & offer_job_position(salmon, cat) => not owes_money_to(cat, salmon)\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cat becomes an enemy of the donkey, and raises a peace flag for the carp\nactual_enemy(cat, donkey) = True\nraise_flag_of_peace(cat, carp) = True\n# The cockroach shows all her cards to the octopus\nshow_cards(cockroach, octopus) = True\n# The hummingbird eats the food of the jellyfish\neat_food(hummingbird, jellyfish) = True\n\n# Based on the game state and the rules and preferences, does the cat need support from the squirrel?\nquestion = need_support(cat, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the phoenix starts with the first letter of the name of the whale, then the phoenix attacks the green fields owned by the tiger\nRule2: If the phoenix does not offer a job to the cricket and the oscar does not attack the green fields owned by the cricket, then the cricket learns the basics of resource management from the canary\nRule3: If something attacks the green fields owned by the tiger and holds an equal number of points as the panther, then it does not offer a job to the cricket\nRule4: If at least one animal owes money to the meerkat, then the phoenix holds the same number of points as the panther\nRule5: If one of the animals becomes an actual enemy of the amberjack, then it gives a magnifier to the sheep\nRule6: If at least one animal gives a magnifier to the sheep, then the oscar does not attack the green fields owned by the cricket\nRule7: If the phoenix has a card whose color appears in the flag of France, then it attacks the green fields owned by the tiger\nRule8: If one of the animals does not raise a flag of peace for the panda bear, then it does not attack the green fields owned by the tiger\n\nRule8 is preferred over Rule1\nRule8 is preferred over Rule7\n\nThe current state of the game is as follows\nThe phoenix has a card that is white in color\nThe phoenix is named Pashmak\nThe salmon owes money to the meerkat\nThe whale is named Tarzan\nThe spider does not become an enemy of the amberjack\n\nBased on the game state and the rules and preferences, does the cricket learn the basics of resource management from the canary?\nQuestion: Does the cricket learn the basics of resource management from the canary?",
        "idx": 44,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the phoenix has a name whose first letter is the same as the first letter of the whale's name, then the phoenix attacks the green fields whose owner is the tiger\nrule1() = first_letter_of(name(phoenix)) == first_letter_of(name(whale)) => attack_green_fields(phoenix, owner_is(tiger))\n# Rule2: For the cricket, if the belief is that the phoenix does not offer a job to the cricket and the oscar does not attack the green fields whose owner is the cricket, then you can add \"the cricket learns the basics of resource management from the canary\" to your conclusions\nrule2() = not offer_job(phoenix, cricket) & not attack_green_fields(oscar, owner_is(cricket)) => learn_basics_of_resource_management(cricket, canary)\n# Rule3: If you see that something attacks the green fields of the tiger and holds an equal number of points as the panther, what can you certainly conclude? You can conclude that it does not offer a job to the cricket\nrule3(something) = attack_green_fields(something, owner_is(tiger)) & points(something) == points(panther) => not offer_job(something, cricket)\n# Rule4: If at least one animal owes $$$ to the meerkat, then the phoenix holds the same number of points as the panther\nrule4() = owes_money_to(something, meerkat) => points(phoenix) == points(panther)\n# Rule5: If you are positive that you saw one of the animals becomes an actual enemy of the amberjack, you can be certain that it will also give a magnifier to the sheep\nrule5(something) = enemy(something, amberjack) => give_magnifier(something, sheep)\n# Rule6: If at least one animal gives a magnifier to the sheep, then the oscar does not attack the green fields whose owner is the cricket\nrule6() = give_magnifier(something, sheep) => not attack_green_fields(oscar, owner_is(cricket))\n# Rule7: Regarding the phoenix, if it has a card whose color appears in the flag of France, then we can conclude that it attacks the green fields whose owner is the tiger\nrule7() = has(phoenix, card_with(color_in_flag_of_france)) => attack_green_fields(phoenix, owner_is(tiger))\n# Rule8: If you are positive that one of the animals does not raise a flag of peace for the panda bear, you can be certain that it will not attack the green fields whose owner is the tiger.\nrule8(something) = not raise_flag_of_peace(something, panda_bear) => not attack_green_fields(something, owner_is(tiger))\n# Rule8 is preferred over Rule1\norder(rule8) > order(rule1) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n\n# The current state of the game is as follows\n# The phoenix has a card that is white in color\nhas(phoenix, card_with(white_color)) = True\n# The phoenix is named Pashmak\nname(phoenix, Pashmak) = True\n# The salmon owes money to the meerkat\nowes_money_to(salmon, meerkat) = True\n# The whale is named Tarzan\nname(whale, Tarzan) = True\n# The spider does not become an enemy of the amberjack\nnot enemy(spider, amberjack) = True\n\n# Based on the game state and the rules and preferences, does the cricket learn the basics of resource management from the canary?\nquestion = learn_basics_of_resource_management(cricket, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal attacks the green fields owned by the eel, then the halibut attacks the green fields of the oscar\nRule2: If the puffin has a name whose first letter is the same as the first letter of the sun bear's name, then it does not need support from the octopus\nRule3: If the puffin offers a job to the oscar and the halibut attacks the green fields owned by the oscar, then the oscar eats the food of the moose\nRule4: If something holds the same number of points as the eagle, then it also attacks the green fields owned by the eel\nRule5: If something knocks down the fortress owned by the ferret, then it does not learn elementary resource management from the parrot\nRule6: If at least one animal proceeds to the spot right after the spot of the lobster, then the puffin needs the support of the octopus\nRule7: If the puffin has a card with a color that is one of the rainbow colors, then it does not knock down the fortress owned by the jellyfish\nRule8: If the puffin has a sharp object, then it does not knock down the fortress owned by the jellyfish\nRule9: If something does not learn the basics of resource management from the parrot, then it offers a job position to the oscar\n\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe hippopotamus proceeds to the spot right after the lobster\nThe puffin has a card that is orange in color\nThe puffin has a cello\nThe puffin is named Buddy\nThe puffin knocks down the fortress owned by the ferret\nThe squirrel holds the same number of points as the eagle\nThe sun bear is named Beauty\n\nBased on the game state and the rules and preferences, does the oscar eat the food of the moose?\nQuestion: Does the oscar eat the food of the moose?",
        "idx": 45,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal attacks the green fields whose owner is the eel, then the halibut attacks the green fields of the oscar\nrule1() = attack_green_fields(something, green_fields_of(eel)) => attack_green_fields(halibut, green_fields_of(oscar))\n# Rule2: Regarding the puffin, if it has a name whose first letter is the same as the first letter of the sun bear's name, then we can conclude that it does not need support from the octopus\nrule2() = first_letter_of(name(puffin)) == first_letter_of(name(sun_bear)) => not need_support(puffin, octopus)\n# Rule3: If the puffin offers a job to the oscar and the halibut attacks the green fields whose owner is the oscar, then the oscar eats the food of the moose\nrule3() = offer_job(puffin, oscar) & attack_green_fields(halibut, green_fields_of(oscar)) => eat_food(oscar, food_of(moose))\n# Rule4: If something holds the same number of points as the eagle, then it attacks the green fields of the eel, too\nrule4(something) = points(something) == points(eagle) => attack_green_fields(something, green_fields_of(eel))\n# Rule5: If something knocks down the fortress that belongs to the ferret, then it does not learn elementary resource management from the parrot\nrule5(something) = knock_down_fortress(something, fortress_of(ferret)) => not learn_elementary_resource_management(something, parrot)\n# Rule6: If at least one animal proceeds to the spot that is right after the spot of the lobster, then the puffin needs the support of the octopus\nrule6() = proceed_to_spot_right_after(something, spot_of(lobster)) => need_support(puffin, octopus)\n# Rule7: Regarding the puffin, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not knock down the fortress of the jellyfish\nrule7() = has(puffin, card_with(color_in(rainbow_colors))) => not knock_down_fortress(puffin, fortress_of(jellyfish))\n# Rule8: Regarding the puffin, if it has a sharp object, then we can conclude that it does not knock down the fortress that belongs to the jellyfish\nrule8() = has(puffin, sharp_object) => not knock_down_fortress(puffin, fortress_of(jellyfish))\n# Rule9: If something does not learn the basics of resource management from the parrot, then it offers a job position to the oscar.\nrule9(something) = not learn_basics_of_resource_management(something, parrot) => offer_job_position(something, oscar)\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The hippopotamus proceeds to the spot right after the lobster\nproceed_to_spot_right_after(hippopotamus, spot_of(lobster)) = True\n# The puffin has a card that is orange in color, has a cello, and is named Buddy\nhas(puffin, card_with(orange_color)) = True\nhas(puffin, cello) = True\nname(puffin, Buddy) = True\n# The puffin knocks down the fortress of the ferret\nknock_down_fortress(puffin, fortress_of(ferret)) = True\n# The squirrel holds the same number of points as the eagle\npoints(squirrel) == points(eagle) = True\n# The sun bear is named Beauty\nname(sun_bear, Beauty) = True\n\n# Based on the game state and the rules and preferences, does the oscar eat the food of the moose?\nquestion = eat_food(oscar, food_of(moose))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal gives a magnifier to the kiwi, then the kangaroo attacks the green fields of the eel\nRule2: If the leopard holds an equal number of points as the kangaroo and the sea bass sings a victory song for the kangaroo, then the kangaroo will not sing a song of victory for the viperfish\nRule3: If the pig has a leafy green vegetable, then it does not roll the dice for the leopard\nRule4: If one of the animals does not attack the green fields of the sun bear, then it will sing a song of victory for the kangaroo\nRule5: If the pig does not roll the dice for the leopard, then the leopard holds the same number of points as the kangaroo\nRule6: If something does not attack the green fields whose owner is the eel but offers a job to the starfish, then it will sing a song of victory for the viperfish\nRule7: If something steals five points from the dog, then it does not attack the green fields of the eel\nRule8: If at least one animal shows all her cards to the cat, then the sea bass does not attack the green fields whose owner is the sun bear\nRule9: If the dog owes money to the kangaroo, then the kangaroo steals five points from the dog\nRule10: If the pig has a card whose color appears in the flag of Japan, then it rolls the dice for the leopard\n\nRule1 is preferred over Rule7\nRule10 is preferred over Rule3\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe dog owes money to the kangaroo\nThe kangaroo struggles to find food\nThe parrot shows all her cards to the cat\nThe pig has some spinach\nThe puffin does not roll the dice for the sea bass\n\nBased on the game state and the rules and preferences, does the kangaroo sing a victory song for the viperfish?\nQuestion: Does the kangaroo sing a victory song for the viperfish?",
        "idx": 46,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal gives a magnifier to the kiwi, then the kangaroo attacks the green fields of the eel\nrule1() = give_magnifier(something, kiwi) => attack(kangaroo, green_fields_of(eel))\n# Rule2: If the leopard holds an equal number of points as the kangaroo and the sea bass sings a victory song for the kangaroo, then the kangaroo will not sing a song of victory for the viperfish\nrule2() = points(leopard) == points(kangaroo) & sing_song(sea_bass, victory_song_for(kangaroo)) => not sing_song(kangaroo, victory_song_for(viperfish))\n# Rule3: Regarding the pig, if it has a leafy green vegetable, then we can conclude that it does not roll the dice for the leopard\nrule3() = has(pig, leafy_green_vegetable) => not roll_dice(pig, leopard)\n# Rule4: If you are positive that one of the animals does not attack the green fields of the sun bear, you can be certain that it will sing a song of victory for the kangaroo without a doubt\nrule4(something) = not attack(something, green_fields_of(sun_bear)) => sing_song(something, victory_song_for(kangaroo))\n# Rule5: If the pig does not roll the dice for the leopard, then the leopard holds the same number of points as the kangaroo\nrule5() = not roll_dice(pig, leopard) => points(leopard) == points(kangaroo)\n# Rule6: Be careful when something does not attack the green fields whose owner is the eel but offers a job to the starfish because in this case it will, surely, sing a song of victory for the viperfish (this may or may not be problematic)\nrule6(something) = not attack(green_fields_of(eel), something) & offer_job(something, starfish) => sing_song(something, victory_song_for(viperfish))\n# Rule7: If something steals five points from the dog, then it does not attack the green fields of the eel\nrule7(something) = steal_points(something, dog, 5) => not attack(something, green_fields_of(eel))\n# Rule8: If at least one animal shows all her cards to the cat, then the sea bass does not attack the green fields whose owner is the sun bear\nrule8() = show_all_cards(something, cat) => not attack(green_fields_of(sun_bear), sea_bass)\n# Rule9: If the dog owes $$$ to the kangaroo, then the kangaroo steals five points from the dog\nrule9() = owes_money_to(dog, kangaroo) => steal_points(kangaroo, dog, 5)\n# Rule10: Regarding the pig, if it has a card whose color appears in the flag of Japan, then we can conclude that it rolls the dice for the leopard.\nrule10() = has(pig, card_with(color_in_flag_of_Japan)) => roll_dice(pig, leopard)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule10 is preferred over Rule3\norder(rule10) > order(rule3) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The dog owes money to the kangaroo\nowes_money_to(dog, kangaroo) = True\n# The kangaroo struggles to find food\nstruggles_to_find_food(kangaroo) = True\n# The parrot shows all her cards to the cat\nshow_all_cards(parrot, cat) = True\n# The pig has some spinach\nhas(pig, spinach) = True\n# The puffin does not roll the dice for the sea bass\nnot roll_dice(puffin, sea_bass) = True\n\n# Based on the game state and the rules and preferences, does the kangaroo sing a victory song for the viperfish?\nquestion = sing_song(kangaroo, victory_song_for(viperfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish has a device to connect to the internet, then it shows all her cards to the eagle\nRule2: If the eel does not become an actual enemy of the eagle but the blobfish shows her cards to the eagle, then the eagle burns the warehouse that is in possession of the zander\nRule3: If one of the animals does not need the support of the sea bass, then it sings a victory song for the spider\nRule4: If the squid has a card whose color appears in the flag of Netherlands, then the squid needs support from the sea bass\nRule5: If something sings a victory song for the spider but does not hold an equal number of points as the dog, then it does not remove one of the pieces of the parrot\nRule6: If the eel has a card whose color appears in the flag of Belgium, then it does not become an enemy of the eagle\nRule7: If at least one animal burns the warehouse of the zander, then the squid removes one of the pieces of the parrot\nRule8: If the squid has a high-quality paper, then the squid needs support from the sea bass\nRule9: If the tilapia learns elementary resource management from the eel, then the eel becomes an enemy of the eagle\nRule10: If the blobfish has more than seven friends, then it shows her cards to the eagle\n\nRule6 is preferred over Rule9\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe blobfish has a knapsack\nThe blobfish has six friends\nThe eel has a card that is black in color\nThe squid has a card that is indigo in color\nThe squid published a high-quality paper\n\nBased on the game state and the rules and preferences, does the squid remove one of the pieces of the parrot?\nQuestion: Does the squid remove one of the pieces of the parrot?",
        "idx": 47,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the blobfish, if it has a device to connect to the internet, then we can conclude that it shows all her cards to the eagle\nrule1() = has(blobfish, connect_to_internet(device)) => show_cards(blobfish, eagle)\n# Rule2: For the eagle, if the belief is that the eel does not become an actual enemy of the eagle but the blobfish shows her cards (all of them) to the eagle, then you can add \"the eagle burns the warehouse that is in possession of the zander\" to your conclusions\nrule2() = not enemy(eel, eagle) & show_cards(blobfish, eagle) => burn(warehouse_of(zander), eagle)\n# Rule3: If you are positive that one of the animals does not need the support of the sea bass, you can be certain that it will sing a victory song for the spider without a doubt\nrule3(something) = not needs_support(something, sea_bass) => sing_song(something, victory_song_for(spider))\n# Rule4: If the squid has a card whose color appears in the flag of Netherlands, then the squid needs support from the sea bass\nrule4() = has(squid, card_with(color_in_flag_of(Netherlands))) => needs_support(squid, sea_bass)\n# Rule5: If you see that something sings a song of victory for the spider but does not hold an equal number of points as the dog, what can you certainly conclude? You can conclude that it does not remove from the board one of the pieces of the parrot\nrule5(something) = sing_song(something, victory_song_for(spider)) & points(something) != points(dog) => not remove(something, piece_of(parrot))\n# Rule6: Regarding the eel, if it has a card whose color appears in the flag of Belgium, then we can conclude that it does not become an enemy of the eagle\nrule6() = has(eel, card_with(color_in_flag_of(Belgium))) => not enemy(eel, eagle)\n# Rule7: If at least one animal burns the warehouse of the zander, then the squid removes one of the pieces of the parrot\nrule7() = burn(warehouse_of(zander), something) => remove(squid, piece_of(parrot))\n# Rule8: If the squid has a high-quality paper, then the squid needs support from the sea bass\nrule8() = has(squid, high_quality_paper) => needs_support(squid, sea_bass)\n# Rule9: If the tilapia learns elementary resource management from the eel, then the eel becomes an enemy of the eagle\nrule9() = learn(tilapia, elementary_resource_management_from(eel)) => enemy(eel, eagle)\n# Rule10: Regarding the blobfish, if it has more than seven friends, then we can conclude that it shows her cards (all of them) to the eagle.\nrule10() = friends(blobfish) > 7 => show_cards(blobfish, eagle)\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The blobfish has a knapsack\nhas(blobfish, knapsack) = True\n# The blobfish has six friends\nfriends(blobfish) = 6\n# The eel has a card that is black in color\nhas(eel, card_with(black_color)) = True\n# The squid has a card that is indigo in color, and published a high-quality paper.\nhas(squid, card_with(indigo_color)) = True\npublished(squid, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the squid remove from the board one of the pieces of the parrot?\nquestion = remove(squid, piece_of(parrot))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sun bear has fewer than 14 friends, then the sun bear sings a victory song for the turtle\nRule2: If something raises a flag of peace for the jellyfish and also sings a song of victory for the turtle, then it removes one of the pieces of the viperfish\nRule3: If the polar bear has difficulty finding food, then the polar bear owes money to the grasshopper\nRule4: If the sun bear removes one of the pieces of the viperfish, then the viperfish raises a flag of peace for the lobster\nRule5: If the name of the sun bear starts with the same letter as the name of the oscar, then the sun bear raises a peace flag for the jellyfish\nRule6: If the sun bear has a card with a primary color, then the sun bear raises a flag of peace for the jellyfish\nRule7: If the name of the polar bear starts with the same letter as the name of the cheetah, then the polar bear owes money to the grasshopper\n\nThe current state of the game is as follows\nThe cheetah is named Lucy\nThe mosquito owes money to the penguin\nThe oscar is named Tango\nThe polar bear is named Charlie and struggles to find food\nThe sun bear has a card that is green in color, has two adventurous friends and eight non-adventurous friends, and is named Peddi\n\nBased on the game state and the rules and preferences, does the viperfish raise a peace flag for the lobster?\nQuestion: Does the viperfish raise a peace flag for the lobster?",
        "idx": 48,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sun bear has fewer than 14 friends, then the sun bear sings a victory song for the turtle\nrule1() = friends(sun_bear) < 14 => sing_song(sun_bear, victory_song_for(turtle))\n# Rule2: Be careful when something raises a flag of peace for the jellyfish and also sings a song of victory for the turtle because in this case it will surely remove one of the pieces of the viperfish (this may or may not be problematic)\nrule2(something) = raise_flag_of_peace(something, jellyfish) & sing_song(something, victory_song_for(turtle)) => remove(something, piece_of(viperfish))\n# Rule3: If the polar bear has difficulty to find food, then the polar bear owes money to the grasshopper\nrule3() = difficulty_finding_food(polar_bear) => owes_money_to(polar_bear, grasshopper)\n# Rule4: If the sun bear removes from the board one of the pieces of the viperfish, then the viperfish raises a flag of peace for the lobster\nrule4() = remove(sun_bear, piece_of(viperfish)) => raise_flag_of_peace(viperfish, lobster)\n# Rule5: If the sun bear has a name whose first letter is the same as the first letter of the oscar's name, then the sun bear raises a peace flag for the jellyfish\nrule5() = first_letter_of(name(sun_bear)) == first_letter_of(name(oscar)) => raise_flag_of_peace(sun_bear, jellyfish)\n# Rule6: If the sun bear has a card with a primary color, then the sun bear raises a flag of peace for the jellyfish\nrule6() = has(sun_bear, card_with(primary_color)) => raise_flag_of_peace(sun_bear, jellyfish)\n# Rule7: Regarding the polar bear, if it has a name whose first letter is the same as the first letter of the cheetah's name, then we can conclude that it owes $$$ to the grasshopper.\nrule7() = first_letter_of(name(polar_bear)) == first_letter_of(name(cheetah)) => owes_money_to(polar_bear, grasshopper)\n\n# The current state of the game is as follows\n# The cheetah is named Lucy\nname(cheetah, Lucy) = True\n# The mosquito owes money to the penguin\nowes_money_to(mosquito, penguin) = True\n# The oscar is named Tango\nname(oscar, Tango) = True\n# The polar bear is named Charlie, and struggles to find food\nname(polar_bear, Charlie) = True\ndifficulty_finding_food(polar_bear) = True\n# The sun bear has a card that is green in color, has two friends that are adventurous and eight friends that are not, and is named Peddi.\nhas(sun_bear, card_with(green_color)) = True\nfriends(sun_bear, adventurous) = 2\nfriends(sun_bear, not_adventurous) = 8\nname(sun_bear, Peddi) = True\n\n# Based on the game state and the rules and preferences, does the viperfish raise a peace flag for the lobster?\nquestion = raise_flag_of_peace(viperfish, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panda bear proceeds to the spot right after the goldfish and the caterpillar gives a magnifier to the goldfish, then the goldfish knows the defensive plans of the sun bear\nRule2: If the goldfish has something to carry apples and oranges, then it removes one of the pieces of the grasshopper\nRule3: If an animal removes one of the pieces of the grasshopper, then it needs support from the cheetah\nRule4: The goldfish does not remove one of the pieces of the grasshopper whenever at least one animal owes money to the crocodile\nRule5: If the panda bear has a name whose first letter is the same as the first letter of the baboon's name, then the panda bear does not proceed to the spot right after the goldfish\nRule6: If the goldfish has a name whose first letter is the same as the first letter of the cow's name, then the goldfish removes one of the pieces of the grasshopper\nRule7: If the panda bear has fewer than 7 friends, then the panda bear proceeds to the spot right after the goldfish\nRule8: If an animal learns elementary resource management from the cheetah, then it does not need support from the cheetah\nRule9: If the starfish does not remove one of the pieces of the caterpillar, then the caterpillar gives a magnifying glass to the goldfish\nRule10: If the panda bear has a card whose color is one of the rainbow colors, then the panda bear does not proceed to the spot right after the goldfish\nRule11: If an animal knows the defensive plans of the sun bear and needs support from the cheetah, then it does not burn the warehouse that is in possession of the eel\n\nRule10 is preferred over Rule7\nRule2 is preferred over Rule4\nRule5 is preferred over Rule7\nRule6 is preferred over Rule4\nRule8 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cow is named Tango\nThe goldfish has a basket\nThe goldfish is named Beauty\nThe oscar owes money to the crocodile\nThe panda bear has 1 friend that is mean and one friend that is not\nThe panda bear has a card that is black in color\nThe panda bear is named Charlie\nThe starfish does not remove one of the pieces of the caterpillar\n\nBased on the game state and the rules and preferences, does the goldfish burn the warehouse of the eel?\nQuestion: Does the goldfish burn the warehouse of the eel?",
        "idx": 49,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the goldfish, if the belief is that the panda bear proceeds to the spot that is right after the spot of the goldfish and the caterpillar gives a magnifier to the goldfish, then you can add \"the goldfish knows the defensive plans of the sun bear\" to your conclusions\nrule1() = proceed(panda_bear, spot_right_after(spot_of(goldfish))) & give(caterpillar, magnifier, goldfish) => knows_defensive_plans(goldfish, sun_bear)\n# Rule2: If the goldfish has something to carry apples and oranges, then the goldfish removes from the board one of the pieces of the grasshopper\nrule2() = has(goldfish, carry_apples_and_oranges) => remove(goldfish, piece_of(grasshopper))\n# Rule3: If you are positive that you saw one of the animals removes from the board one of the pieces of the grasshopper, you can be certain that it will also need support from the cheetah\nrule3(something) = remove(something, piece_of(grasshopper)) => needs_support(something, cheetah)\n# Rule4: The goldfish does not remove one of the pieces of the grasshopper whenever at least one animal owes $$$ to the crocodile\nrule4() = owes_money_to(someone, crocodile) => not remove(goldfish, piece_of(grasshopper))\n# Rule5: If the panda bear has a name whose first letter is the same as the first letter of the baboon's name, then the panda bear does not proceed to the spot right after the goldfish\nrule5() = first_letter_of(name(panda_bear)) == first_letter_of(name(baboon)) => not proceed(panda_bear, spot_right_after(spot_of(goldfish)))\n# Rule6: If the goldfish has a name whose first letter is the same as the first letter of the cow's name, then the goldfish removes from the board one of the pieces of the grasshopper\nrule6() = first_letter_of(name(goldfish)) == first_letter_of(name(cow)) => remove(goldfish, piece_of(grasshopper))\n# Rule7: If the panda bear has fewer than 7 friends, then the panda bear proceeds to the spot that is right after the spot of the goldfish\nrule7() = friends(panda_bear) < 7 => proceed(panda_bear, spot_right_after(spot_of(goldfish)))\n# Rule8: If you are positive that you saw one of the animals learns elementary resource management from the cheetah, you can be certain that it will not need support from the cheetah\nrule8(something) = learns(something, elementary_resource_management_from(cheetah)) => not needs_support(something, cheetah)\n# Rule9: The caterpillar unquestionably gives a magnifying glass to the goldfish, in the case where the starfish does not remove one of the pieces of the caterpillar\nrule9() = not remove(starfish, piece_of(caterpillar)) => give(caterpillar, magnifying_glass, goldfish)\n# Rule10: If the panda bear has a card whose color is one of the rainbow colors, then the panda bear does not proceed to the spot right after the goldfish\nrule10() = has(panda_bear, card_with(color_in(rainbow_colors))) => not proceed(panda_bear, spot_right_after(spot_of(goldfish)))\n# Rule11: If you see that something knows the defensive plans of the sun bear and needs support from the cheetah, what can you certainly conclude? You can conclude that it does not burn the warehouse that is in possession of the eel.\nrule11(something) = knows_defensive_plans(something, sun_bear) & needs_support(something, cheetah) => not burn(warehouse_of(eel), something)\n# Rule10 is preferred over Rule7\norder(rule10) > order(rule7) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule5 is preferred over Rule7\norder(rule5) > order(rule7) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule8 is preferred over Rule3\norder(rule8) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cow is named Tango\nname(cow, Tango) = True\n# The goldfish has a basket, and is named Beauty\nhas(goldfish, basket) = True\nname(goldfish, Beauty) = True\n# The oscar owes money to the crocodile\nowes_money_to(oscar, crocodile) = True\n# The panda bear has 1 friend that is mean and one friend that is not\nfriends(panda_bear) = 2\n# The panda bear has a card that is black in color\nhas(panda_bear, card_with(black_color)) = True\n# The panda bear is named Charlie\nname(panda_bear, Charlie) = True\n# The starfish does not remove from the board one of the pieces of the caterpillar\nnot remove(starfish, piece_of(caterpillar)) = True\n\n# Based on the game state and the rules and preferences, does the goldfish burn the warehouse of the eel?\nquestion = burn(warehouse_of(eel), goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kudu eats the food that belongs to the hummingbird, then the hummingbird attacks the green fields owned by the jellyfish\nRule2: The caterpillar attacks the green fields of the baboon whenever at least one animal attacks the green fields owned by the jellyfish\nRule3: Be careful when something attacks the green fields owned by the panda bear but does not proceed to the spot right after the eagle because in this case it will surely eat the food that belongs to the hummingbird\n\nThe current state of the game is as follows\nThe kudu attacks the green fields owned by the panda bear\nThe kudu proceeds to the spot right after the eagle\n\nBased on the game state and the rules and preferences, does the caterpillar attack the green fields owned by the baboon?\nQuestion: Does the caterpillar attack the green fields owned by the baboon?",
        "idx": 50,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kudu eats the food that belongs to the hummingbird, then the hummingbird attacks the green fields whose owner is the jellyfish\nrule1() = eat_food(kudu, food_of(hummingbird)) => attack(hummingbird, green_fields_of(jellyfish))\n# Rule2: The caterpillar attacks the green fields of the baboon whenever at least one animal attacks the green fields whose owner is the jellyfish\nrule2() = attack(something, green_fields_of(jellyfish)) => attack(caterpillar, green_fields_of(baboon))\n# Rule3: Be careful when something attacks the green fields whose owner is the panda bear but does not proceed to the spot right after the eagle because in this case it will, surely, eat the food that belongs to the hummingbird (this may or may not be problematic).\nrule3(something) = attack(green_fields_of(panda_bear), something) & not proceed(something, spot_right_after(eagle)) => eat_food(something, food_of(hummingbird))\n\n# The current state of the game is as follows\n# The kudu attacks the green fields whose owner is the panda bear\nattack(kudu, green_fields_of(panda_bear)) = True\n# The kudu proceeds to the spot right after the eagle\nproceed(kudu, spot_right_after(eagle)) = True\n\n# Based on the game state and the rules and preferences, does the caterpillar attack the green fields whose owner is the baboon?\nquestion = attack(caterpillar, green_fields_of(baboon))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the turtle created a time machine, then it removes one of the pieces of the panther\nRule2: The cockroach removes from the board one of the pieces of the tilapia whenever at least one animal proceeds to the spot that is right after the spot of the squirrel\nRule3: If the turtle removes one of the pieces of the panther, then the panther proceeds to the spot right after the squirrel\nRule4: If the turtle has a card whose color starts with the letter \"e\", then it removes one of the pieces of the panther.\n\nThe current state of the game is as follows\nThe turtle has a card that is red in color and invented a time machine.\n\nBased on the game state and the rules and preferences, does the cockroach remove from the board one of the pieces of the tilapia?\nQuestion: Does the cockroach remove from the board one of the pieces of the tilapia?",
        "idx": 51,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the turtle, if it created a time machine, then we can conclude that it removes one of the pieces of the panther\nrule1() = created_time_machine(turtle) => remove(turtle, piece_of(panther))\n# Rule2: The cockroach removes from the board one of the pieces of the tilapia whenever at least one animal proceeds to the spot that is right after the spot of the squirrel\nrule2() = proceed(animal, spot_right_after(spot_of(squirrel))) => remove(cockroach, piece_of(tilapia))\n# Rule3: If the turtle removes from the board one of the pieces of the panther, then the panther proceeds to the spot right after the squirrel\nrule3() = remove(turtle, piece_of(panther)) => proceed(panther, spot_right_after(spot_of(squirrel)))\n# Rule4: Regarding the turtle, if it has a card whose color starts with the letter \"e\", then we can conclude that it removes one of the pieces of the panther.\nrule4() = has(turtle, card_with(color_starting_with(\"e\"))) => remove(turtle, piece_of(panther))\n\n# The current state of the game is as follows\n# The turtle has a card that is red in color, and invented a time machine.\nhas(turtle, card_with(red_color)) = True\ninvented_time_machine(turtle) = True\n\n# Based on the game state and the rules and preferences, does the cockroach remove from the board one of the pieces of the tilapia?\nquestion = remove(cockroach, piece_of(tilapia))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the mosquito has more than 13 friends, then the mosquito knows the defensive plans of the amberjack\nRule2: If the caterpillar raises a peace flag for the kangaroo, then the kangaroo does not offer a job to the polar bear\nRule3: If one of the animals does not knock down the fortress of the canary, then it raises a peace flag for the sea bass\nRule4: If the kangaroo has a name whose first letter is the same as the first letter of the doctorfish's name, then the kangaroo offers a job position to the polar bear\nRule5: If at least one animal eats the food that belongs to the parrot, then the kangaroo winks at the whale\nRule6: If the mosquito has a card with a primary color, then the mosquito does not know the defense plan of the amberjack\nRule7: If the mosquito has a name whose first letter is the same as the first letter of the cricket's name, then the mosquito does not know the defensive plans of the amberjack\nRule8: If the mosquito knows the defense plan of the amberjack, then the amberjack does not knock down the fortress of the canary\nRule9: If at least one animal raises a flag of peace for the moose, then the kangaroo does not know the defense plan of the lion\nRule10: If the mosquito killed the mayor, then the mosquito knows the defensive plans of the amberjack\nRule11: If the kangaroo works more hours than before, then the kangaroo offers a job position to the polar bear\nRule12: If something gives a magnifier to the oscar, then it eats the food of the parrot\nRule13: The amberjack does not raise a peace flag for the sea bass whenever at least one animal winks at the whale\nRule14: If something eats the food that belongs to the rabbit, then it knows the defensive plans of the lion\n\nRule13 is preferred over Rule3\nRule2 is preferred over Rule11\nRule2 is preferred over Rule4\nRule6 is preferred over Rule1\nRule6 is preferred over Rule10\nRule7 is preferred over Rule1\nRule7 is preferred over Rule10\nRule9 is preferred over Rule14\n\nThe current state of the game is as follows\nThe doctorfish is named Tessa\nThe hippopotamus respects the whale\nThe kangaroo eats the food of the rabbit and is named Teddy\nThe kangaroo reduced her work hours recently\nThe mosquito assassinated the mayor\nThe mosquito has 2 lazy friends and 6 non-lazy friends\nThe mosquito has a card that is black in color and is named Peddi\nThe whale gives a magnifier to the oscar\nThe turtle does not proceed to the spot right after the whale\n\nBased on the game state and the rules and preferences, does the amberjack raise a peace flag for the sea bass?\nQuestion: Does the amberjack raise a peace flag for the sea bass?",
        "idx": 52,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the mosquito has more than 13 friends, then the mosquito knows the defensive plans of the amberjack\nrule1() = friends(mosquito) > 13 => knows(defensive_plans_of(amberjack), mosquito)\n# Rule2: If the caterpillar raises a peace flag for the kangaroo, then the kangaroo is not going to offer a job to the polar bear\nrule2() = raise_flag_of_peace(caterpillar, kangaroo) => not offer_job(kangaroo, polar_bear)\n# Rule3: If you are positive that one of the animals does not knock down the fortress that belongs to the canary, you can be certain that it will raise a peace flag for the sea bass without a doubt\nrule3(something) = not knock_down(fortress_of(canary), something) => raise_flag_of_peace(something, sea_bass)\n# Rule4: Regarding the kangaroo, if it has a name whose first letter is the same as the first letter of the doctorfish's name, then we can conclude that it offers a job position to the polar bear\nrule4() = first_letter_of(name(kangaroo)) == first_letter_of(name(doctorfish)) => offer_job(kangaroo, polar_bear)\n# Rule5: If at least one animal eats the food that belongs to the parrot, then the kangaroo winks at the whale\nrule5() = eats_food_of(something, parrot) => winks(kangaroo, whale)\n# Rule6: If the mosquito has a card with a primary color, then the mosquito does not know the defense plan of the amberjack\nrule6() = has(mosquito, card_with(primary_color)) => not knows(defense_plan_of(amberjack), mosquito)\n# Rule7: If the mosquito has a name whose first letter is the same as the first letter of the cricket's name, then the mosquito does not know the defensive plans of the amberjack\nrule7() = first_letter_of(name(mosquito)) == first_letter_of(name(cricket)) => not knows(defensive_plans_of(amberjack), mosquito)\n# Rule8: If the mosquito knows the defense plan of the amberjack, then the amberjack is not going to knock down the fortress of the canary\nrule8() = knows(defense_plan_of(amberjack), mosquito) => not knock_down(fortress_of(canary), amberjack)\n# Rule9: If at least one animal raises a flag of peace for the moose, then the kangaroo does not know the defense plan of the lion\nrule9() = raise_flag_of_peace(something, moose) => not knows(defense_plan_of(lion), kangaroo)\n# Rule10: Regarding the mosquito, if it killed the mayor, then we can conclude that it knows the defensive plans of the amberjack\nrule10() = killed(mosquito, mayor) => knows(defensive_plans_of(amberjack), mosquito)\n# Rule11: Regarding the kangaroo, if it works more hours than before, then we can conclude that it offers a job position to the polar bear\nrule11() = increase_work_hours(kangaroo) => offer_job(kangaroo, polar_bear)\n# Rule12: If something gives a magnifier to the oscar, then it eats the food of the parrot, too\nrule12(something) = give(something, magnifier, oscar) => eats_food_of(something, parrot)\n# Rule13: The amberjack does not raise a peace flag for the sea bass whenever at least one animal winks at the whale\nrule13() = winks(something, whale) => not raise_flag_of_peace(amberjack, sea_bass)\n# Rule14: If something eats the food that belongs to the rabbit, then it knows the defensive plans of the lion, too.\nrule14(something) = eats_food_of(something, rabbit) => knows(defensive_plans_of(lion), something)\n# Rule13 is preferred over Rule3\norder(rule13) > order(rule3) = True\n# Rule2 is preferred over Rule11\norder(rule2) > order(rule11) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n# Rule6 is preferred over Rule10\norder(rule6) > order(rule10) = True\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n# Rule7 is preferred over Rule10\norder(rule7) > order(rule10) = True\n# Rule9 is preferred over Rule14\norder(rule9) > order(rule14) = True\n\n# The current state of the game is as follows\n# The doctorfish is named Tessa\nname(doctorfish, Tessa) = True\n# The hippopotamus respects the whale\nrespects(hippopotamus, whale) = True\n# The kangaroo eats the food of the rabbit, and is named Teddy\neats_food_of(kangaroo, rabbit) = True\nname(kangaroo, Teddy) = True\n# The kangaroo reduced her work hours recently\nreduce_work_hours(kangaroo) = True\n# The mosquito assassinated the mayor\nkilled(mosquito, mayor) = True\n# The mosquito has 2 friends that are lazy and 6 friends that are not\nfriends(mosquito) = 8\n# The mosquito has a card that is black in color, and is named Peddi\nhas(mosquito, card_with(black_color)) = True\nname(mosquito, Peddi) = True\n# The whale gives a magnifier to the oscar\ngive(whale, magnifier, oscar) = True\n# The turtle does not proceed to the spot right after the whale\nnot proceed(turtle, spot_right_after(spot_of(whale))) = True\n\n# Based on the game state and the rules and preferences, does the amberjack raise a peace flag for the sea bass?\nquestion = raise_flag_of_peace(amberjack, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the puffin raises a flag of peace for the leopard and the halibut does not remove one of the pieces of the leopard, then the leopard will never knock down the fortress of the carp\nRule2: If the koala has a card with a primary color, then the koala sings a song of victory for the leopard\nRule3: If the koala has fewer than five friends, then the koala sings a song of victory for the leopard\nRule4: If something does not offer a job to the carp but knocks down the fortress that belongs to the sun bear, then it proceeds to the spot right after the spot of the dog\nRule5: If the tilapia attacks the green fields of the puffin, then the puffin does not raise a flag of peace for the leopard\nRule6: If the puffin has a card whose color appears in the flag of Belgium, then the puffin raises a flag of peace for the leopard\nRule7: The leopard knocks down the fortress that belongs to the carp, in the case where the pig sings a victory song for the leopard\nRule8: If the halibut owns a luxury aircraft, then it does not remove one of the pieces of the leopard\nRule9: If the koala sings a song of victory for the leopard, then the leopard knocks down the fortress that belongs to the sun bear\nRule10: If the puffin has a name whose first letter is the same as the first letter of the eel's name, then the puffin raises a flag of peace for the leopard\n\nRule1 is preferred over Rule7\nRule10 is preferred over Rule5\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe eel is named Meadow\nThe halibut has eight friends\nThe halibut is named Charlie\nThe halibut purchased a luxury aircraft\nThe koala has a card that is orange in color\nThe koala has one friend\nThe puffin has a card that is indigo in color\nThe puffin is named Milo\nThe turtle is named Cinnamon\nThe grasshopper does not offer a job to the koala\n\nBased on the game state and the rules and preferences, does the leopard proceed to the spot right after the dog?\nQuestion: Does the leopard proceed to the spot right after the dog?",
        "idx": 53,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the puffin raises a flag of peace for the leopard and the halibut does not remove from the board one of the pieces of the leopard, then the leopard will never knock down the fortress of the carp\nrule1() = raise_flag_of_peace(puffin, leopard) & not remove(halibut, piece_of(leopard)) => never_knock_down(leopard, fortress_of(carp))\n# Rule2: If the koala has a card with a primary color, then the koala sings a song of victory for the leopard\nrule2() = has(koala, card_with(primary_color)) => sing_song(koala, victory_song_for(leopard))\n# Rule3: If the koala has fewer than five friends, then the koala sings a song of victory for the leopard\nrule3() = friends(koala) < 5 => sing_song(koala, victory_song_for(leopard))\n# Rule4: Be careful when something does not offer a job to the carp but knocks down the fortress that belongs to the sun bear because in this case it will, surely, proceed to the spot that is right after the spot of the dog (this may or may not be problematic)\nrule4(something) = not offer_job(something, carp) & knock_down(something, fortress_of(sun_bear)) => proceed(something, spot_right_after(spot_of(dog)))\n# Rule5: If the tilapia attacks the green fields of the puffin, then the puffin is not going to raise a flag of peace for the leopard\nrule5() = attack(tilapia, green_fields_of(puffin)) => not raise_flag_of_peace(puffin, leopard)\n# Rule6: If the puffin has a card whose color appears in the flag of Belgium, then the puffin raises a flag of peace for the leopard\nrule6() = has(puffin, card_with(color_in_flag_of_Belgium)) => raise_flag_of_peace(puffin, leopard)\n# Rule7: The leopard unquestionably knocks down the fortress that belongs to the carp, in the case where the pig sings a victory song for the leopard\nrule7() = sing_song(pig, victory_song_for(leopard)) => knock_down(leopard, fortress_of(carp))\n# Rule8: Regarding the halibut, if it owns a luxury aircraft, then we can conclude that it does not remove one of the pieces of the leopard\nrule8() = owns(halibut, luxury_aircraft) => not remove(halibut, piece_of(leopard))\n# Rule9: If the koala sings a song of victory for the leopard, then the leopard knocks down the fortress that belongs to the sun bear\nrule9() = sing_song(koala, victory_song_for(leopard)) => knock_down(leopard, fortress_of(sun_bear))\n# Rule10: If the puffin has a name whose first letter is the same as the first letter of the eel's name, then the puffin raises a flag of peace for the leopard.\nrule10() = first_letter_of(name(puffin)) == first_letter_of(name(eel)) => raise_flag_of_peace(puffin, leopard)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule10 is preferred over Rule5\norder(rule10) > order(rule5) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The eel is named Meadow\nname(eel, Meadow) = True\n# The halibut has eight friends\nfriends(halibut) = 8\n# The halibut is named Charlie\nname(halibut, Charlie) = True\n# The halibut purchased a luxury aircraft\nowns(halibut, luxury_aircraft) = True\n# The koala has a card that is orange in color\nhas(koala, card_with(orange_color)) = True\n# The koala has one friend\nfriends(koala) = 1\n# The puffin has a card that is indigo in color\nhas(puffin, card_with(indigo_color)) = True\n# The puffin is named Milo\nname(puffin, Milo) = True\n# The turtle is named Cinnamon\nname(turtle, Cinnamon) = True\n# The grasshopper does not offer a job to the koala\nnot offer_job(grasshopper, koala) = True\n\n# Based on the game state and the rules and preferences, does the leopard proceed to the spot right after the dog?\nquestion = proceed(leopard, spot_right_after(spot_of(dog)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal burns the warehouse of the sheep, then the squirrel does not learn the basics of resource management from the catfish\nRule2: If the zander has more than 6 friends, then it prepares armor for the panther\nRule3: If the phoenix has a card with a primary color, then it knocks down the fortress that belongs to the squirrel\nRule4: If the squirrel is a fan of Chris Ronaldo, then it learns the basics of resource management from the catfish\nRule5: The canary removes one of the pieces of the whale, in the case where the panther eats the food of the canary\nRule6: The panther eats the food of the canary, in the case where the zander prepares armor for the panther\nRule7: If the squirrel has something to drink, then it sings a victory song for the leopard\nRule8: If something shows all her cards to the halibut, then it does not sing a victory song for the leopard\nRule9: If the zander has a name whose first letter is the same as the first letter of the meerkat's name, then it prepares armor for the panther\nRule10: If something sings a victory song for the leopard and learns elementary resource management from the catfish, then it also attacks the green fields of the bat\nRule11: If the squirrel has a card whose color starts with the letter \"e\", then it sings a victory song for the leopard\n\nRule1 is preferred over Rule4\nRule8 is preferred over Rule11\nRule8 is preferred over Rule7\n\nThe current state of the game is as follows\nThe meerkat is named Chickpea\nThe phoenix has a card that is red in color\nThe squirrel has a card that is red in color and has hot chocolate\nThe squirrel supports Chris Ronaldo\nThe zander has eleven friends\nThe zander is named Paco\n\nBased on the game state and the rules and preferences, does the canary remove from the board one of the pieces of the whale?\nQuestion: Does the canary remove from the board one of the pieces of the whale?",
        "idx": 54,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal burns the warehouse of the sheep, then the squirrel does not learn the basics of resource management from the catfish\nrule1() = burn(warehouse_of(sheep), something) => not learn_basics_of_resource_management(squirrel, catfish)\n# Rule2: Regarding the zander, if it has more than 6 friends, then we can conclude that it prepares armor for the panther\nrule2() = friends(zander) > 6 => prepare_armor(zander, panther)\n# Rule3: Regarding the phoenix, if it has a card with a primary color, then we can conclude that it knocks down the fortress that belongs to the squirrel\nrule3() = has(phoenix, card_with(primary_color)) => knock_down(fortress_of(squirrel), phoenix)\n# Rule4: If the squirrel is a fan of Chris Ronaldo, then the squirrel learns the basics of resource management from the catfish\nrule4() = supports(squirrel, Chris_Ronaldo) => learn_basics_of_resource_management(squirrel, catfish)\n# Rule5: The canary unquestionably removes one of the pieces of the whale, in the case where the panther eats the food of the canary\nrule5() = eat_food(panther, food_of(canary)) => remove(whale, piece)\n# Rule6: The panther unquestionably eats the food of the canary, in the case where the zander prepares armor for the panther\nrule6() = prepare_armor(zander, panther) => eat_food(panther, food_of(canary))\n# Rule7: If the squirrel has something to drink, then the squirrel sings a victory song for the leopard\nrule7() = has(squirrel, drink) => sing_song(squirrel, victory_song_for(leopard))\n# Rule8: If something shows all her cards to the halibut, then it does not sing a victory song for the leopard\nrule8() = show_all_cards(something, halibut) => not sing_song(something, victory_song_for(leopard))\n# Rule9: If the zander has a name whose first letter is the same as the first letter of the meerkat's name, then the zander prepares armor for the panther\nrule9() = first_letter_of(name(zander)) == first_letter_of(name(meerkat)) => prepare_armor(zander, panther)\n# Rule10: If you see that something sings a victory song for the leopard and learns elementary resource management from the catfish, what can you certainly conclude? You can conclude that it also attacks the green fields of the bat\nrule10() = sing_song(something, victory_song_for(leopard)) & learn_elementary_resource_management(something, catfish) => attack_fields(something, green_fields_of(bat))\n# Rule11: If the squirrel has a card whose color starts with the letter \"e\", then the squirrel sings a victory song for the leopard.\nrule11() = has(squirrel, card_with(color_starting_with(\"e\"))) => sing_song(squirrel, victory_song_for(leopard))\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule8 is preferred over Rule11\norder(rule8) > order(rule11) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n\n# The current state of the game is as follows\n# The meerkat is named Chickpea\nname(meerkat, Chickpea) = True\n# The phoenix has a card that is red in color\nhas(phoenix, card_with(red_color)) = True\n# The squirrel has a card that is red in color, and has a hot chocolate\nhas(squirrel, card_with(red_color)) = True\nhas(squirrel, hot_chocolate) = True\n# The squirrel supports Chris Ronaldo\nsupports(squirrel, Chris_Ronaldo) = True\n# The zander has eleven friends\nfriends(zander) = 11\n# The zander is named Paco\nname(zander, Paco) = True\n\n# Based on the game state and the rules and preferences, does the canary remove from the board one of the pieces of the whale?\nquestion = remove(whale, piece)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the raven does not offer a job position to the hummingbird, then the hummingbird winks at the cheetah\nRule2: If the buffalo has more than 3 friends, then it knows the defense plan of the turtle\nRule3: If one of the animals owes money to the spider, then it does not roll the dice for the tilapia\nRule4: If the polar bear shows all her cards to the hummingbird and the sea bass does not owe money to the hummingbird, then the hummingbird will never wink at the cheetah\nRule5: If the sea bass has a device to connect to the internet, then it does not roll the dice for the kangaroo\nRule6: If the sea bass has a card with a primary color, then it rolls the dice for the kangaroo\nRule7: If the sea bass has more than seventeen friends, then it rolls the dice for the kangaroo\nRule8: If one of the animals rolls the dice for the kangaroo, then it does not owe money to the hummingbird\nRule9: If something proceeds to the spot right after the hippopotamus, then it owes money to the hummingbird\nRule10: If the sea bass has a name whose first letter is the same as the first letter of the whale's name, then it does not roll the dice for the kangaroo\nRule11: If one of the animals owes money to the zander but does not roll the dice for the tilapia, then it does not show all her cards to the hummingbird\nRule12: If at least one animal knows the defensive plans of the turtle, then the polar bear shows all her cards to the hummingbird\n\nRule1 is preferred over Rule4\nRule10 is preferred over Rule6\nRule10 is preferred over Rule7\nRule11 is preferred over Rule12\nRule5 is preferred over Rule6\nRule5 is preferred over Rule7\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe buffalo has four friends\nThe polar bear owes money to the spider\nThe sea bass has 2 lazy friends and 8 non-lazy friends\nThe sea bass has a red-colored card and a knapsack\nThe whale is named Paco\n\nBased on the game state and the rules and preferences, does the hummingbird wink at the cheetah?\nQuestion: Does the hummingbird wink at the cheetah?",
        "idx": 55,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The hummingbird unquestionably winks at the cheetah, in the case where the raven does not offer a job position to the hummingbird\nrule1() = not offer_job_position(raven, hummingbird) => wink(hummingbird, cheetah)\n# Rule2: Regarding the buffalo, if it has more than 3 friends, then we can conclude that it knows the defense plan of the turtle\nrule2() = friends(buffalo) > 3 => knows(defense_plan_of(turtle), buffalo)\n# Rule3: If you are positive that you saw one of the animals owes money to the spider, you can be certain that it will not roll the dice for the tilapia\nrule3(something) = owes_money_to(something, spider) => not roll_dice(something, tilapia)\n# Rule4: If the polar bear shows her cards (all of them) to the hummingbird and the sea bass does not owe money to the hummingbird, then the hummingbird will never wink at the cheetah\nrule4() = show_cards(polar_bear, hummingbird) & not owes_money_to(sea_bass, hummingbird) => never_wink(hummingbird, cheetah)\n# Rule5: Regarding the sea bass, if it has a device to connect to the internet, then we can conclude that it does not roll the dice for the kangaroo\nrule5(device) = has(sea_bass, connect_to_internet(device)) => not roll_dice(sea_bass, kangaroo)\n# Rule6: Regarding the sea bass, if it has a card with a primary color, then we can conclude that it rolls the dice for the kangaroo\nrule6() = has(sea_bass, card_with(primary_color)) => roll_dice(sea_bass, kangaroo)\n# Rule7: If the sea bass has more than seventeen friends, then the sea bass rolls the dice for the kangaroo\nrule7() = friends(sea_bass) > 17 => roll_dice(sea_bass, kangaroo)\n# Rule8: If you are positive that you saw one of the animals rolls the dice for the kangaroo, you can be certain that it will not owe $$$ to the hummingbird\nrule8(something) = roll_dice(something, kangaroo) => not owes_money_to(something, hummingbird)\n# Rule9: If something proceeds to the spot right after the hippopotamus, then it owes money to the hummingbird, too\nrule9(something) = proceed(something, spot_right_after(spot_of(hippopotamus))) => owes_money_to(something, hummingbird)\n# Rule10: Regarding the sea bass, if it has a name whose first letter is the same as the first letter of the whale's name, then we can conclude that it does not roll the dice for the kangaroo\nrule10() = first_letter_of(name(sea_bass)) == first_letter_of(name(whale)) => not roll_dice(sea_bass, kangaroo)\n# Rule11: Be careful when something owes money to the zander but does not roll the dice for the tilapia because in this case it will, surely, not show her cards (all of them) to the hummingbird (this may or may not be problematic)\nrule11() = owes_money_to(something, zander) & not roll_dice(something, tilapia) => not show_cards(something, hummingbird)\n# Rule12: If at least one animal knows the defensive plans of the turtle, then the polar bear shows all her cards to the hummingbird.\nrule12() = knows(defense_plan_of(turtle), something) => show_cards(polar_bear, hummingbird)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule10 is preferred over Rule6\norder(rule10) > order(rule6) = True\n# Rule10 is preferred over Rule7\norder(rule10) > order(rule7) = True\n# Rule11 is preferred over Rule12\norder(rule11) > order(rule12) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n# Rule5 is preferred over Rule7\norder(rule5) > order(rule7) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The buffalo has four friends\nfriends(buffalo) = 4\n# The polar bear owes money to the spider\nowes_money_to(polar_bear, spider) = True\n# The sea bass has 2 friends that are lazy and eight friends that are not, has a card that is red in color, and has a knapsack\nfriends(sea_bass, lazy) = 2\nfriends(sea_bass, not_lazy) = 8\nhas(sea_bass, card_with(red_color)) = True\nhas(sea_bass, knapsack) = True\n# The whale is named Paco\nname(whale, Paco) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird wink at the cheetah?\nquestion = wink(hummingbird, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals knows the defensive plans of the oscar, you can be certain that it will also hold the same number of points as the cricket\nRule2: If you are positive that one of the animals does not proceed to the spot right after the sea bass, you can be certain that it will need the support of the halibut without a doubt\nRule3: The cockroach knows the defense plan of the oscar whenever at least one animal needs the support of the halibut\nRule4: If the rabbit has a leafy green vegetable, then the rabbit does not need support from the halibut\nRule5: If you are positive that one of the animals does not learn elementary resource management from the kangaroo, you can be certain that it will not hold an equal number of points as the cricket.\n\nRule1 is preferred over Rule5\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe rabbit has a card that is white in color\nThe rabbit has some spinach\nThe rabbit does not proceed to the spot right after the sea bass\n\nBased on the game state and the rules and preferences, does the cockroach hold the same number of points as the cricket?\nQuestion: Does the cockroach hold the same number of points as the cricket?",
        "idx": 56,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals knows the defensive plans of the oscar, you can be certain that it will also hold the same number of points as the cricket\nrule1() = knows(defensive_plans_of(oscar), something) => points(something) == points(cricket)\n# Rule2: If you are positive that one of the animals does not proceed to the spot right after the sea bass, you can be certain that it will need the support of the halibut without a doubt\nrule2() = not proceed(something, spot_right_after(spot_of(sea_bass))) => needs_support(something, halibut)\n# Rule3: The cockroach knows the defense plan of the oscar whenever at least one animal needs the support of the halibut\nrule3() = needs_support(something, halibut) => knows(defense_plan_of(oscar), cockroach)\n# Rule4: If the rabbit has a leafy green vegetable, then the rabbit does not need support from the halibut\nrule4() = has(rabbit, leafy_green_vegetable) => not needs_support(rabbit, halibut)\n# Rule5: If you are positive that one of the animals does not learn elementary resource management from the kangaroo, you can be certain that it will not hold an equal number of points as the cricket.\nrule5() = not learn_elementary_resource_management(something, kangaroo) => not points(something) == points(cricket)\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The rabbit has a card that is white in color\nhas(rabbit, card_with(white_color)) = True\n# The rabbit has some spinach\nhas(rabbit, spinach) = True\n# The rabbit does not proceed to the spot right after the sea bass\nnot proceed(rabbit, spot_right_after(spot_of(sea_bass))) = True\n\n# Based on the game state and the rules and preferences, does the cockroach hold the same number of points as the cricket?\nquestion = points(cockroach) == points(cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kudu created a time machine, then the kudu attacks the green fields of the wolverine\nRule2: If the doctorfish does not owe money to the wolverine, then the wolverine does not remove one of the pieces of the lobster\nRule3: If the kudu attacks the green fields of the wolverine and the elephant knocks down the fortress of the wolverine, then the wolverine will not know the defensive plans of the penguin\nRule4: If the wolverine has a card whose color appears in the flag of Italy, then the wolverine removes one of the pieces of the lobster\nRule5: If the wolverine owns a luxury aircraft, then the wolverine does not wink at the carp\nRule6: If the elephant has a device to connect to the internet, then the elephant knocks down the fortress that belongs to the wolverine\nRule7: The jellyfish proceeds to the spot that is right after the spot of the cow whenever at least one animal knows the defense plan of the penguin\nRule8: The wolverine winks at the carp, in the case where the meerkat gives a magnifier to the wolverine\nRule9: If something removes one of the pieces of the lobster and also winks at the carp, then it knows the defense plan of the penguin\nRule10: If the kudu has a name whose first letter is the same as the first letter of the dog's name, then the kudu attacks the green fields of the wolverine\nRule11: The jellyfish does not proceed to the spot that is right after the spot of the cow, in the case where the buffalo needs the support of the jellyfish\n\nRule11 is preferred over Rule7\nRule2 is preferred over Rule4\nRule8 is preferred over Rule5\nRule9 is preferred over Rule3\n\nThe current state of the game is as follows\nThe dog is named Blossom\nThe elephant has a cell phone\nThe kudu invented a time machine and is named Pablo\nThe meerkat gives a magnifier to the wolverine\nThe wolverine dreamed of a luxury aircraft, has a card that is white in color, and has a knapsack\n\nBased on the game state and the rules and preferences, does the jellyfish proceed to the spot right after the cow?\nQuestion: Does the jellyfish proceed to the spot right after the cow?",
        "idx": 57,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kudu created a time machine, then the kudu attacks the green fields of the wolverine\nrule1() = created_time_machine(kudu) => attacks(kudu, green_fields_of(wolverine))\n# Rule2: If the doctorfish does not owe $$$ to the wolverine, then the wolverine does not remove from the board one of the pieces of the lobster\nrule2() = not owes_money_to(doctorfish, wolverine) => not remove(wolverine, piece_of(lobster))\n# Rule3: If the kudu attacks the green fields of the wolverine and the elephant knocks down the fortress of the wolverine, then the wolverine will not know the defensive plans of the penguin\nrule3() = attacks(kudu, green_fields_of(wolverine)) & knock_down(elephant, fortress_of(wolverine)) => not know_defensive_plans(wolverine, penguin)\n# Rule4: Regarding the wolverine, if it has a card whose color appears in the flag of Italy, then we can conclude that it removes from the board one of the pieces of the lobster\nrule4() = has(wolverine, card_with(color_in_flag_of_Italy)) => remove(wolverine, piece_of(lobster))\n# Rule5: Regarding the wolverine, if it owns a luxury aircraft, then we can conclude that it does not wink at the carp\nrule5() = owns(wolverine, luxury_aircraft) => not wink(wolverine, carp)\n# Rule6: If the elephant has a device to connect to the internet, then the elephant knocks down the fortress that belongs to the wolverine\nrule6() = has(elephant, connect_to_internet(device)) => knock_down(elephant, fortress_of(wolverine))\n# Rule7: The jellyfish proceeds to the spot that is right after the spot of the cow whenever at least one animal knows the defense plan of the penguin\nrule7() = knows_defense_plan(something, penguin) => proceed(jellyfish, spot_right_after(spot_of(cow)))\n# Rule8: The wolverine unquestionably winks at the carp, in the case where the meerkat gives a magnifier to the wolverine\nrule8() = give(magnifier, meerkat, wolverine) => wink(wolverine, carp)\n# Rule9: Be careful when something removes one of the pieces of the lobster and also winks at the carp because in this case it will surely know the defense plan of the penguin (this may or may not be problematic)\nrule9() = remove(something, piece_of(lobster)) & wink(something, carp) => know_defense_plan(something, penguin)\n# Rule10: Regarding the kudu, if it has a name whose first letter is the same as the first letter of the dog's name, then we can conclude that it attacks the green fields of the wolverine\nrule10() = first_letter_of(name(kudu)) == first_letter_of(name(dog)) => attacks(kudu, green_fields_of(wolverine))\n# Rule11: The jellyfish does not proceed to the spot that is right after the spot of the cow, in the case where the buffalo needs the support of the jellyfish.\nrule11() = needs_support(buffalo, jellyfish) => not proceed(jellyfish, spot_right_after(spot_of(cow)))\n# Rule11 is preferred over Rule7\norder(rule11) > order(rule7) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n# Rule9 is preferred over Rule3\norder(rule9) > order(rule3) = True\n\n# The current state of the game is as follows\n# The dog is named Blossom\nname(dog, Blossom) = True\n# The elephant has a cell phone\nhas(elephant, cell_phone) = True\n# The kudu invented a time machine, and is named Pablo\ninvented_time_machine(kudu) = True\nname(kudu, Pablo) = True\n# The meerkat gives a magnifier to the wolverine\ngive(magnifier, meerkat, wolverine) = True\n# The wolverine dreamed of a luxury aircraft, has a card that is white in color, and has a knapsack\ndreamed_of(wolverine, luxury_aircraft) = True\nhas(wolverine, card_with(white_color)) = True\nhas(wolverine, knapsack) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish proceed to the spot right after the cow?\nquestion = proceed(jellyfish, spot_right_after(spot_of(cow)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The parrot proceeds to the spot that is right after the spot of the tiger, in the case where the cockroach removes one of the pieces of the parrot\nRule2: If the cockroach has a card whose color is one of the rainbow colors, then the cockroach removes from the board one of the pieces of the parrot\nRule3: If something does not wink at the puffin, then it does not proceed to the spot right after the tiger\nRule4: If the parrot proceeds to the spot that is right after the spot of the tiger, then the tiger does not remove one of the pieces of the moose\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cockroach has a card that is indigo in color\n\nBased on the game state and the rules and preferences, does the tiger remove from the board one of the pieces of the moose?\nQuestion: Does the tiger remove from the board one of the pieces of the moose?",
        "idx": 58,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The parrot unquestionably proceeds to the spot that is right after the spot of the tiger, in the case where the cockroach removes one of the pieces of the parrot\nrule1() = remove(cockroach, piece_of(parrot)) => proceed(parrot, spot_right_after(spot_of(tiger)))\n# Rule2: If the cockroach has a card whose color is one of the rainbow colors, then the cockroach removes from the board one of the pieces of the parrot\nrule2() = has(cockroach, card) and color(card) in rainbow_colors => remove(cockroach, piece_of(parrot))\n# Rule3: If something does not wink at the puffin, then it does not proceed to the spot right after the tiger\nrule3(something) = not wink(something, puffin) => not proceed(something, spot_right_after(spot_of(tiger)))\n# Rule4: If the parrot proceeds to the spot that is right after the spot of the tiger, then the tiger is not going to remove one of the pieces of the moose.\nrule4() = proceed(parrot, spot_right_after(spot_of(tiger))) => not remove(tiger, piece_of(moose))\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cockroach has a card that is indigo in color\nhas(cockroach, card_with(indigo_color)) = True\n\n# Based on the game state and the rules and preferences, does the tiger remove from the board one of the pieces of the moose?\nquestion = remove(tiger, piece_of(moose))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hummingbird created a time machine, then it learns elementary resource management from the parrot\nRule2: If you see one of the animals show all her cards to the panda bear, then she holds the same number of points as the cheetah\nRule3: If something does not learn the basics of resource management from the parrot but holds an equal number of points as the cheetah, then it also attacks the green fields owned by the snail\nRule4: If the hummingbird does not attack the green fields owned by the snail, then the snail holds an equal number of points as the eel\nRule5: If at least one animal gives a magnifier to the oscar, then the hummingbird does not learn elementary resource management from the parrot\nRule6: If the penguin sings a victory song for the hummingbird and the wolverine gives a magnifier to the hummingbird, then the hummingbird does not hold an equal number of points as the cheetah\n\nRule1 is preferred over Rule5\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe eagle gives a magnifier to the oscar\nThe hummingbird shows all her cards to the panda bear\nThe penguin sings a victory song for the hummingbird\n\nBased on the game state and the rules and preferences, does the snail hold the same number of points as the eel?\nQuestion: Does the snail hold the same number of points as the eel?",
        "idx": 59,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hummingbird, if it created a time machine, then we can conclude that it learns elementary resource management from the parrot\nrule1() = created(hummingbird, time_machine) => learn(hummingbird, elementary_resource_management_from(parrot))\n# Rule2: If you are positive that you saw one of the animals shows her cards (all of them) to the panda bear, you can be certain that it will also hold the same number of points as the cheetah\nrule2() = show_cards(something, panda_bear) => points(something) == points(cheetah)\n# Rule3: If you see that something does not learn the basics of resource management from the parrot but it holds an equal number of points as the cheetah, what can you certainly conclude? You can conclude that it also attacks the green fields whose owner is the snail\nrule3(something) = not learn_basics_of_resource_management(something, parrot) & points(something) == points(cheetah) => attack(something, green_fields_of(snail))\n# Rule4: If the hummingbird does not attack the green fields whose owner is the snail, then the snail holds an equal number of points as the eel\nrule4() = not attack(hummingbird, green_fields_of(snail)) => points(snail) == points(eel)\n# Rule5: If at least one animal gives a magnifier to the oscar, then the hummingbird does not learn elementary resource management from the parrot\nrule5() = give_magnifier(something, oscar) => not learn(hummingbird, elementary_resource_management_from(parrot))\n# Rule6: If the penguin sings a song of victory for the hummingbird and the wolverine gives a magnifier to the hummingbird, then the hummingbird will not hold an equal number of points as the cheetah.\nrule6() = sing_song(penguin, victory_song_for(hummingbird)) & give_magnifier(wolverine, hummingbird) => not points(hummingbird) == points(cheetah)\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The eagle gives a magnifier to the oscar\ngive_magnifier(eagle, oscar) = True\n# The hummingbird shows all her cards to the panda bear\nshow_cards(hummingbird, panda_bear) = True\n# The penguin sings a victory song for the hummingbird\nsing_song(penguin, victory_song_for(hummingbird)) = True\n\n# Based on the game state and the rules and preferences, does the snail hold the same number of points as the eel?\nquestion = points(snail) == points(eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something eats the food of the amberjack, then it gives a magnifying glass to the panther, too\nRule2: The catfish does not give a magnifying glass to the panther, in the case where the cat eats the food of the catfish\nRule3: If the catfish does not give a magnifying glass to the panther, then the panther eats the food that belongs to the dog\nRule4: If the panther eats the food that belongs to the dog, then the dog knows the defensive plans of the jellyfish.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cat eats the food of the catfish\n\nBased on the game state and the rules and preferences, does the dog know the defensive plans of the jellyfish?\nQuestion: Does the dog know the defensive plans of the jellyfish?",
        "idx": 60,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something eats the food of the amberjack, then it gives a magnifying glass to the panther, too\nrule1() = eat_food(something, amberjack) => give_magnifying_glass(something, panther)\n# Rule2: The catfish does not give a magnifying glass to the panther, in the case where the cat eats the food of the catfish\nrule2() = eat_food(cat, catfish) => not give_magnifying_glass(catfish, panther)\n# Rule3: If the catfish does not give a magnifying glass to the panther, then the panther eats the food that belongs to the dog\nrule3() = not give_magnifying_glass(catfish, panther) => eat_food(panther, dog)\n# Rule4: If the panther eats the food that belongs to the dog, then the dog knows the defensive plans of the jellyfish.\nrule4() = eat_food(panther, dog) => knows_defensive_plans(dog, jellyfish)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cat eats the food of the catfish\neat_food(cat, catfish) = True\n\n# Based on the game state and the rules and preferences, does the dog know the defensive plans of the jellyfish?\nquestion = knows_defensive_plans(dog, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The leopard burns the warehouse that is in possession of the parrot whenever at least one animal steals five points from the bat\nRule2: The parrot sings a song of victory for the bat, in the case where the ferret does not show all her cards to the parrot\nRule3: If the cheetah does not give a magnifier to the ferret but the lion gives a magnifying glass to the ferret, then the ferret will not show all her cards to the parrot\nRule4: If something steals five points from the lobster and sings a song of victory for the bat, then it does not owe money to the cat\nRule5: The parrot steals five points from the lobster, in the case where the leopard burns the warehouse of the parrot\n\nThe current state of the game is as follows\nThe kangaroo steals five points from the bat\nThe lion gives a magnifier to the ferret\nThe cheetah does not give a magnifier to the ferret\n\nBased on the game state and the rules and preferences, does the parrot owe money to the cat?\nQuestion: Does the parrot owe money to the cat?",
        "idx": 61,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The leopard burns the warehouse that is in possession of the parrot whenever at least one animal steals five of the points of the bat\nrule1() = steals_points(something, 5, bat) => burn(warehouse_of(parrot), leopard)\n# Rule2: The parrot unquestionably sings a song of victory for the bat, in the case where the ferret does not show her cards (all of them) to the parrot\nrule2() = not show_cards(ferret, parrot) => sing_song(parrot, victory_song_for(bat))\n# Rule3: If the cheetah does not give a magnifier to the ferret however the lion gives a magnifying glass to the ferret, then the ferret will not show her cards (all of them) to the parrot\nrule3() = not give(cheetah, magnifier, ferret) & give(lion, magnifying_glass, ferret) => not show_cards(ferret, parrot)\n# Rule4: If you see that something steals five of the points of the lobster and sings a song of victory for the bat, what can you certainly conclude? You can conclude that it does not owe money to the cat\nrule4() = steals_points(something, 5, lobster) & sing_song(something, victory_song_for(bat)) => not owes_money_to(something, cat)\n# Rule5: The parrot unquestionably steals five of the points of the lobster, in the case where the leopard burns the warehouse of the parrot.\nrule5() = burn(warehouse_of(parrot), leopard) => steals_points(parrot, 5, lobster)\n\n# The current state of the game is as follows\n# The kangaroo steals five points from the bat\nsteals_points(kangaroo, 5, bat) = True\n# The lion gives a magnifier to the ferret\ngive(lion, magnifier, ferret) = True\n# The cheetah does not give a magnifier to the ferret\nnot give(cheetah, magnifier, ferret) = True\n\n# Based on the game state and the rules and preferences, does the parrot owe money to the cat?\nquestion = owes_money_to(parrot, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kiwi rolls the dice for the cheetah and the kangaroo does not roll the dice for the cheetah, then the cheetah shows all her cards to the dog\nRule2: If one of the animals eats the food that belongs to the snail, then it does not learn the basics of resource management from the phoenix\nRule3: If one of the animals does not hold an equal number of points as the eagle, then it will roll the dice for the cheetah\nRule4: If at least one animal raises a peace flag for the catfish, then the kangaroo rolls the dice for the cheetah\nRule5: If something does not proceed to the spot right after the phoenix but rolls the dice for the spider, then it will not show all her cards to the dog\nRule6: If the swordfish gives a magnifier to the kangaroo, then the kangaroo will not roll the dice for the cheetah\nRule7: If the kiwi has a card whose color starts with the letter \"r\", then it does not prepare armor for the eagle\nRule8: If the cheetah has a name whose first letter is the same as the first letter of the puffin's name, then it does not eat the food that belongs to the snail\nRule9: If the halibut rolls the dice for the cheetah, then the cheetah unquestionably eats the food of the snail\nRule10: If the swordfish has fewer than 4 friends, then it gives a magnifying glass to the kangaroo\nRule11: If the swordfish has a name whose first letter is the same as the first letter of the raven's name, then the swordfish gives a magnifier to the kangaroo\n\nRule4 is preferred over Rule6\nRule5 is preferred over Rule1\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe cheetah is named Teddy\nThe halibut rolls the dice for the cheetah\nThe kiwi has a banana-strawberry smoothie\nThe kiwi has a card that is red in color\nThe puffin is named Tarzan\nThe raven is named Peddi\nThe swordfish has one adventurous friend and 5 non-adventurous friends\nThe swordfish is named Pablo\n\nBased on the game state and the rules and preferences, does the cheetah show all her cards to the dog?\nQuestion: Does the cheetah show all her cards to the dog?",
        "idx": 62,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kiwi rolls the dice for the cheetah and the kangaroo does not roll the dice for the cheetah, then, inevitably, the cheetah shows her cards (all of them) to the dog\nrule1() = roll_dice(kiwi, cheetah) & not roll_dice(kangaroo, cheetah) => show_cards(cheetah, dog)\n# Rule2: If you are positive that you saw one of the animals eats the food that belongs to the snail, you can be certain that it will not learn the basics of resource management from the phoenix\nrule2(something) = eats_food(something, food_of(snail)) => not learn_basics_of_resource_management(something, phoenix)\n# Rule3: If you are positive that one of the animals does not hold an equal number of points as the eagle, you can be certain that it will roll the dice for the cheetah without a doubt\nrule3(something) = not holds_equal_points(something, eagle) => roll_dice(something, cheetah)\n# Rule4: If at least one animal raises a peace flag for the catfish, then the kangaroo rolls the dice for the cheetah\nrule4(something) = raise_flag_of_peace(something, catfish) => roll_dice(kangaroo, cheetah)\n# Rule5: If you see that something does not proceed to the spot right after the phoenix but it rolls the dice for the spider, what can you certainly conclude? You can conclude that it is not going to show her cards (all of them) to the dog\nrule5(something) = not proceed(something, spot_right_after(spot_of(phoenix))) & roll_dice(something, spider) => not show_cards(something, dog)\n# Rule6: If the swordfish gives a magnifier to the kangaroo, then the kangaroo is not going to roll the dice for the cheetah\nrule6() = give_magnifier(swordfish, kangaroo) => not roll_dice(kangaroo, cheetah)\n# Rule7: Regarding the kiwi, if it has a card whose color starts with the letter \"r\", then we can conclude that it does not prepare armor for the eagle\nrule7() = has(kiwi, card_with(color_starting_with(\"r\"))) => not prepare_armor(kiwi, eagle)\n# Rule8: Regarding the cheetah, if it has a name whose first letter is the same as the first letter of the puffin's name, then we can conclude that it does not eat the food that belongs to the snail\nrule8() = first_letter_of(name(cheetah)) == first_letter_of(name(puffin)) => not eats_food(cheetah, food_of(snail))\n# Rule9: The cheetah unquestionably eats the food of the snail, in the case where the halibut rolls the dice for the cheetah\nrule9() = roll_dice(halibut, cheetah) => eats_food(cheetah, food_of(snail))\n# Rule10: Regarding the swordfish, if it has fewer than 4 friends, then we can conclude that it gives a magnifying glass to the kangaroo\nrule10() = friends(swordfish) < 4 => give_magnifying_glass(swordfish, kangaroo)\n# Rule11: If the swordfish has a name whose first letter is the same as the first letter of the raven's name, then the swordfish gives a magnifier to the kangaroo.\nrule11() = first_letter_of(name(swordfish)) == first_letter_of(name(raven)) => give_magnifier(swordfish, kangaroo)\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The cheetah is named Teddy\nname(cheetah, Teddy) = True\n# The halibut rolls the dice for the cheetah\nroll_dice(halibut, cheetah) = True\n# The kiwi has a banana-strawberry smoothie\nhas(kiwi, banana_strawberry_smoothie) = True\n# The kiwi has a card that is red in color\nhas(kiwi, card_with(red_color)) = True\n# The puffin is named Tarzan\nname(puffin, Tarzan) = True\n# The raven is named Peddi\nname(raven, Peddi) = True\n# The swordfish has one friend that is adventurous and 5 friends that are not\nfriends(swordfish) = 6\n# The swordfish is named Pablo\nname(swordfish, Pablo) = True\n\n# Based on the game state and the rules and preferences, does the cheetah show all her cards to the dog?\nquestion = show_cards(cheetah, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panda bear has something to sit on, then the panda bear eats the food of the crocodile\nRule2: If something eats the food that belongs to the crocodile and also raises a peace flag for the kangaroo, then it offers a job position to the bat\nRule3: If the panda bear has something to carry apples and oranges, then the panda bear raises a peace flag for the kangaroo\nRule4: If the panda bear has more than ten friends, then it eats the food that belongs to the crocodile\nRule5: If at least one animal offers a job position to the bat, then the mosquito owes money to the phoenix\n\nThe current state of the game is as follows\nThe panda bear has a backpack and a bench\nThe panda bear has three friends\n\nBased on the game state and the rules and preferences, does the mosquito owe money to the phoenix?\nQuestion: Does the mosquito owe money to the phoenix?",
        "idx": 63,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panda bear has something to sit on, then the panda bear eats the food of the crocodile\nrule1() = has(panda_bear, something_to_sit_on) => eat_food(panda_bear, food_of(crocodile))\n# Rule2: Be careful when something eats the food that belongs to the crocodile and also raises a peace flag for the kangaroo because in this case it will surely offer a job position to the bat (this may or may not be problematic)\nrule2(something) = eat_food(something, food_of(crocodile)) & raise_flag_of_peace(something, kangaroo) => offer_job_position(something, bat)\n# Rule3: If the panda bear has something to carry apples and oranges, then the panda bear raises a flag of peace for the kangaroo\nrule3() = has(panda_bear, something_to_carry_apples_and_oranges) => raise_flag_of_peace(panda_bear, kangaroo)\n# Rule4: Regarding the panda bear, if it has more than ten friends, then we can conclude that it eats the food that belongs to the crocodile\nrule4() = friends(panda_bear) > 10 => eat_food(panda_bear, food_of(crocodile))\n# Rule5: If at least one animal offers a job position to the bat, then the mosquito owes money to the phoenix.\nrule5(something) = offer_job_position(something, bat) => owes_money_to(mosquito, phoenix)\n\n# The current state of the game is as follows\n# The panda bear has a backpack, and has a bench\nhas(panda_bear, backpack) = True\nhas(panda_bear, bench) = True\n# The panda bear has three friends\nfriends(panda_bear) = 3\n\n# Based on the game state and the rules and preferences, does the mosquito owe money to the phoenix?\nquestion = owes_money_to(mosquito, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something needs the support of the jellyfish, then it does not know the defense plan of the tiger\nRule2: If something does not offer a job to the caterpillar but steals five points from the grizzly bear, then it proceeds to the spot right after the baboon\nRule3: The amberjack does not proceed to the spot right after the baboon whenever at least one animal offers a job position to the phoenix\nRule4: If the amberjack does not proceed to the spot right after the baboon, then the baboon needs support from the jellyfish\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe amberjack steals five points from the grizzly bear\nThe cow offers a job to the phoenix\n\nBased on the game state and the rules and preferences, does the baboon know the defensive plans of the tiger?\nQuestion: Does the baboon know the defensive plans of the tiger?",
        "idx": 64,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something needs the support of the jellyfish, then it does not know the defense plan of the tiger\nrule1() = needs_support(something, jellyfish) => not knows(defense_plan_of(tiger), something)\n# Rule2: Be careful when something does not offer a job to the caterpillar but steals five points from the grizzly bear because in this case it will, surely, proceed to the spot right after the baboon (this may or may not be problematic)\nrule2() = not offer_job_position(something, caterpillar) & steal_points(something, 5, grizzly_bear) => proceed(something, spot_right_after(spot_of(baboon)))\n# Rule3: The amberjack does not proceed to the spot right after the baboon whenever at least one animal offers a job position to the phoenix\nrule3() = offer_job_position(something, phoenix) => not proceed(amberjack, spot_right_after(spot_of(baboon)))\n# Rule4: If the amberjack does not proceed to the spot right after the baboon, then the baboon needs support from the jellyfish.\nrule4() = not proceed(amberjack, spot_right_after(spot_of(baboon))) => needs_support(baboon, jellyfish)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The amberjack steals five points from the grizzly bear\nsteal_points(amberjack, 5, grizzly_bear) = True\n# The cow offers a job to the phoenix\noffer_job_position(cow, phoenix) = True\n\n# Based on the game state and the rules and preferences, does the baboon know the defensive plans of the tiger?\nquestion = knows(defense_plan_of(tiger), baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something gives a magnifying glass to the swordfish, then it owes money to the cockroach, too\nRule2: If the meerkat does not owe money to the cockroach, then the cockroach learns elementary resource management from the cow\nRule3: If the meerkat has a high salary, then it gives a magnifying glass to the swordfish\nRule4: If the meerkat has a card with a primary color, then it gives a magnifying glass to the swordfish\nRule5: If the moose knows the defensive plans of the cockroach, then the cockroach does not learn elementary resource management from the cow\n\nRule2 is preferred over Rule5\n\nThe current state of the game is as follows\nThe meerkat got a well-paid job\nThe meerkat has a card that is black in color\n\nBased on the game state and the rules and preferences, does the cockroach learn the basics of resource management from the cow?\nQuestion: Does the cockroach learn the basics of resource management from the cow?",
        "idx": 65,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something gives a magnifying glass to the swordfish, then it owes money to the cockroach, too\nrule1() = give(something, magnifying_glass, swordfish) => owes_money_to(something, cockroach)\n# Rule2: If the meerkat does not owe money to the cockroach, then the cockroach learns elementary resource management from the cow\nrule2() = not owes_money_to(meerkat, cockroach) => learn_elementary_resource_management(cockroach, cow)\n# Rule3: Regarding the meerkat, if it has a high salary, then we can conclude that it gives a magnifying glass to the swordfish\nrule3() = has_high_salary(meerkat) => give(meerkat, magnifying_glass, swordfish)\n# Rule4: If the meerkat has a card with a primary color, then the meerkat gives a magnifier to the swordfish\nrule4() = has(meerkat, card_with(primary_color)) => give(meerkat, magnifying_glass, swordfish)\n# Rule5: The cockroach does not learn the basics of resource management from the cow, in the case where the moose knows the defensive plans of the cockroach.\nrule5() = knows(defensive_plans_of(cockroach), moose) => not learn_elementary_resource_management(cockroach, cow)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n\n# The current state of the game is as follows\n# The meerkat got a well-paid job\nhas_high_salary(meerkat) = True\n# The meerkat has a card that is black in color\nhas(meerkat, card_with(black_color)) = True\n\n# Based on the game state and the rules and preferences, does the cockroach learn the basics of resource management from the cow?\nquestion = learn_elementary_resource_management(cockroach, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the elephant has a card with a primary color, then it knocks down the fortress of the panda bear\nRule2: If you see one of the animals winks at the elephant, then it does not know the defensive plans of the pig\nRule3: If the leopard took a bike from the store, then it removes one of the pieces of the kudu\nRule4: If the leopard has a card with a color that appears in the rainbow colors, then it removes one of the pieces of the kudu\nRule5: If the lion has a card with a color that appears in the flag of Belgium, then it does not proceed to the spot that is right after the spot of the catfish\nRule6: The catfish winks at the elephant whenever one animal removes one of the pieces of the kudu\nRule7: If the lion does not proceed to the spot that is right after the spot of the catfish, then the catfish does not know the defense plan of the meerkat\nRule8: If one animal knocks down the fortress of the panda bear, then the catfish does not become an enemy of the phoenix\nRule9: If the aardvark rolls the dice for the catfish and the goldfish rolls the dice for the catfish, then the catfish prepares armor for the caterpillar\nRule10: If something does not become an actual enemy of the phoenix and also does not know the defensive plans of the meerkat, then it knows the defensive plans of the pig\nRule11: If something shows all her cards to the hippopotamus, then it does not wink at the elephant\n\nRule10 is preferred over Rule2\nRule11 is preferred over Rule6\n\nThe current state of the game is as follows\nThe aardvark rolls the dice for the catfish\nThe elephant has a card that is red in color\nThe goldfish rolls the dice for the catfish\nThe leopard has a card that is white in color\nThe leopard took a bike from the store\nThe lion has a card that is red in color\n\nBased on the game state and the rules and preferences, does the catfish know the defensive plans of the pig?\nQuestion: Does the catfish know the defensive plans of the pig?",
        "idx": 66,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the elephant, if it has a card with a primary color, then we can conclude that it knocks down the fortress of the panda bear\nrule1() = has(elephant, card_with(primary_color)) => knock_down(elephant, fortress_of(panda_bear))\n# Rule2: If you are positive that you saw one of the animals winks at the elephant, you can be certain that it will not know the defensive plans of the pig\nrule2(something) = winks_at(something, elephant) => not knows_defensive_plans_of(something, pig)\n# Rule3: Regarding the leopard, if it took a bike from the store, then we can conclude that it removes one of the pieces of the kudu\nrule3() = took_bike(leopard) => remove(leopard, piece_of(kudu))\n# Rule4: Regarding the leopard, if it has a card whose color is one of the rainbow colors, then we can conclude that it removes one of the pieces of the kudu\nrule4() = has(leopard, card_with(color_in(rainbow_colors))) => remove(leopard, piece_of(kudu))\n# Rule5: Regarding the lion, if it has a card whose color appears in the flag of Belgium, then we can conclude that it does not proceed to the spot that is right after the spot of the catfish\nrule5() = has(lion, card_with(color_in(flag_of(Belgium)))) => not proceed(lion, spot_right_after(spot_of(catfish)))\n# Rule6: The catfish winks at the elephant whenever at least one animal removes from the board one of the pieces of the kudu\nrule6() = remove(something, piece_of(kudu)) => winks_at(catfish, elephant)\n# Rule7: The catfish will not know the defense plan of the meerkat, in the case where the lion does not proceed to the spot that is right after the spot of the catfish\nrule7() = not proceed(lion, spot_right_after(spot_of(catfish))) => not knows_defense_plan_of(catfish, meerkat)\n# Rule8: If at least one animal knocks down the fortress that belongs to the panda bear, then the catfish does not become an enemy of the phoenix\nrule8(something) = knock_down(something, fortress_of(panda_bear)) => not enemy(catfish, phoenix)\n# Rule9: For the catfish, if the belief is that the aardvark rolls the dice for the catfish and the goldfish rolls the dice for the catfish, then you can add \"the catfish prepares armor for the caterpillar\" to your conclusions\nrule9() = rolls_dice(aardvark, catfish) & rolls_dice(goldfish, catfish) => prepare_armor(catfish, caterpillar)\n# Rule10: Be careful when something does not become an actual enemy of the phoenix and also does not know the defensive plans of the meerkat because in this case it will surely know the defensive plans of the pig (this may or may not be problematic)\nrule10(something) = not enemy(something, phoenix) & not knows_defensive_plans_of(something, meerkat) => knows_defensive_plans_of(something, pig)\n# Rule11: If something shows all her cards to the hippopotamus, then it does not wink at the elephant.\nrule11(something) = show_all_cards(something, hippopotamus) => not winks_at(something, elephant)\n# Rule10 is preferred over Rule2\norder(rule10) > order(rule2) = True\n# Rule11 is preferred over Rule6\norder(rule11) > order(rule6) = True\n\n# The current state of the game is as follows\n# The aardvark rolls the dice for the catfish\nrolls_dice(aardvark, catfish) = True\n# The elephant has a card that is red in color\nhas(elephant, card_with(red_color)) = True\n# The goldfish rolls the dice for the catfish\nrolls_dice(goldfish, catfish) = True\n# The leopard has a card that is white in color\nhas(leopard, card_with(white_color)) = True\n# The leopard stole a bike from the store\ntook_bike(leopard) = True\n# The lion has a card that is red in color\nhas(lion, card_with(red_color)) = True\n\n# Based on the game state and the rules and preferences, does the catfish know the defensive plans of the pig?\nquestion = knows_defensive_plans_of(catfish, pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the leopard shows all her cards to the aardvark and the koala burns the warehouse that is in possession of the aardvark, then the aardvark will not burn the warehouse of the panda bear\nRule2: If at least one animal rolls the dice for the grizzly bear, then the aardvark learns elementary resource management from the catfish\nRule3: If the koala has a card with a primary color, then it burns the warehouse that is in possession of the aardvark\nRule4: If the aardvark does not burn the warehouse of the panda bear, then the panda bear does not learn elementary resource management from the halibut\nRule5: If the leopard has something to carry apples and oranges, then it shows all her cards to the aardvark\n\nThe current state of the game is as follows\nThe aardvark winks at the salmon\nThe carp rolls the dice for the grizzly bear\nThe koala has a card that is blue in color\nThe leopard has a plastic bag\n\nBased on the game state and the rules and preferences, does the panda bear learn the basics of resource management from the halibut?\nQuestion: Does the panda bear learn the basics of resource management from the halibut?",
        "idx": 67,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the leopard shows all her cards to the aardvark and the koala burns the warehouse that is in possession of the aardvark, then the aardvark will not burn the warehouse of the panda bear\nrule1() = show_cards(leopard, aardvark) & burn(warehouse_of(aardvark), koala) => not burn(warehouse_of(panda_bear), aardvark)\n# Rule2: If at least one animal rolls the dice for the grizzly bear, then the aardvark learns elementary resource management from the catfish\nrule2() = roll_dice(something, grizzly_bear) => learn_elementary_resource_management(aardvark, catfish)\n# Rule3: Regarding the koala, if it has a card with a primary color, then we can conclude that it burns the warehouse that is in possession of the aardvark\nrule3() = has(koala, card_with(primary_color)) => burn(warehouse_of(aardvark), koala)\n# Rule4: If the aardvark does not burn the warehouse of the panda bear, then the panda bear does not learn elementary resource management from the halibut\nrule4() = not burn(warehouse_of(panda_bear), aardvark) => not learn_elementary_resource_management(panda_bear, halibut)\n# Rule5: Regarding the leopard, if it has something to carry apples and oranges, then we can conclude that it shows her cards (all of them) to the aardvark.\nrule5() = has(leopard, something_to_carry_apples_and_oranges) => show_cards(leopard, aardvark)\n\n# The current state of the game is as follows\n# The aardvark winks at the salmon\nwinks(aardvark, salmon) = True\n# The carp rolls the dice for the grizzly bear\nroll_dice(carp, grizzly_bear) = True\n# The koala has a card that is blue in color\nhas(koala, card_with(blue_color)) = True\n# The leopard has a plastic bag\nhas(leopard, plastic_bag) = True\n\n# Based on the game state and the rules and preferences, does the panda bear learn the basics of resource management from the halibut?\nquestion = learn_elementary_resource_management(panda_bear, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the polar bear has a musical instrument, then it winks at the goldfish\nRule2: The polar bear does not wink at the goldfish whenever at least one animal steals five points from the baboon\nRule3: The polar bear knows the defensive plans of the salmon whenever at least one animal knocks down the fortress of the cheetah\nRule4: If something removes one of the pieces of the elephant, then it does not attack the green fields of the zander\nRule5: If the polar bear attacks the green fields whose owner is the zander and the starfish knocks down the fortress that belongs to the zander, then the zander attacks the green fields of the grasshopper\nRule6: If at least one animal knocks down the fortress of the rabbit, then it will not knock down the fortress of the zander\nRule7: If the panther holds an equal number of points as the octopus, then the octopus knocks down the fortress that belongs to the starfish\nRule8: The starfish knocks down the fortress that belongs to the zander, in the case where the octopus knocks down the fortress of the starfish\nRule9: If the octopus has a card whose color starts with the letter \"w\", then it does not knock down the fortress that belongs to the starfish\nRule10: If the polar bear has a card whose color appears in the flag of Italy, then it removes one of the pieces of the elephant\nRule11: If the polar bear has a musical instrument, then it winks at the goldfish\nRule12: If the polar bear has a name whose first letter is the same as the first letter of the halibut's name, then it removes one of the pieces of the elephant\n\nRule1 is preferred over Rule2\nRule11 is preferred over Rule2\nRule6 is preferred over Rule8\nRule9 is preferred over Rule7\n\nThe current state of the game is as follows\nThe cricket knocks down the fortress of the cheetah\nThe halibut is named Luna\nThe meerkat steals five points from the baboon\nThe panther holds the same number of points as the octopus\nThe polar bear has a card that is yellow in color\nThe polar bear is named Lily\nThe polar bear has some spinach\nThe polar bear supports Chris Ronaldo\n\nBased on the game state and the rules and preferences, does the zander attack the green fields whose owner is the grasshopper?\nQuestion: Does the zander attack the green fields whose owner is the grasshopper?",
        "idx": 68,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the polar bear, if it has a musical instrument, then we can conclude that it winks at the goldfish\nrule1() = has(polar_bear, musical_instrument) => wink(polar_bear, goldfish)\n# Rule2: The polar bear does not wink at the goldfish whenever at least one animal steals five of the points of the baboon\nrule2() = steals_points(something, baboon, 5) => not wink(polar_bear, goldfish)\n# Rule3: The polar bear knows the defensive plans of the salmon whenever at least one animal knocks down the fortress of the cheetah\nrule3() = knock_down(fortress_of(cheetah), something) => knows(defensive_plans_of(salmon), polar_bear)\n# Rule4: If something removes from the board one of the pieces of the elephant, then it does not attack the green fields of the zander\nrule4() = remove(something, piece_of(elephant)) => not attack_green_fields(something, zander)\n# Rule5: For the zander, if the belief is that the polar bear attacks the green fields whose owner is the zander and the starfish knocks down the fortress that belongs to the zander, then you can add \"the zander attacks the green fields of the grasshopper\" to your conclusions\nrule5() = attack_green_fields(polar_bear, zander) & knock_down(fortress_of(zander), starfish) => add_conclusion(\"the zander attacks the green fields of the grasshopper\")\n# Rule6: If you are positive that you saw one of the animals knocks down the fortress of the rabbit, you can be certain that it will not knock down the fortress of the zander\nrule6(something) = knock_down(fortress_of(rabbit), something) => not knock_down(fortress_of(zander), something)\n# Rule7: If the panther holds an equal number of points as the octopus, then the octopus knocks down the fortress that belongs to the starfish\nrule7() = points(panther) == points(octopus) => knock_down(fortress_of(starfish), octopus)\n# Rule8: The starfish unquestionably knocks down the fortress that belongs to the zander, in the case where the octopus knocks down the fortress of the starfish\nrule8() = knock_down(fortress_of(starfish), octopus) => knock_down(fortress_of(zander), starfish)\n# Rule9: If the octopus has a card whose color starts with the letter \"w\", then the octopus does not knock down the fortress that belongs to the starfish\nrule9() = has(octopus, card_with(color_starting_with(\"w\"))) => not knock_down(fortress_of(starfish), octopus)\n# Rule10: Regarding the polar bear, if it has a card whose color appears in the flag of Italy, then we can conclude that it removes from the board one of the pieces of the elephant\nrule10() = has(polar_bear, card_with(color_in(flag_of_italy))) => remove(polar_bear, piece_of(elephant))\n# Rule11: Regarding the polar bear, if it has a musical instrument, then we can conclude that it winks at the goldfish\nrule11() = has(polar_bear, musical_instrument) => wink(polar_bear, goldfish)\n# Rule12: Regarding the polar bear, if it has a name whose first letter is the same as the first letter of the halibut's name, then we can conclude that it removes one of the pieces of the elephant.\nrule12() = first_letter_of(name(polar_bear)) == first_letter_of(name(halibut)) => remove(polar_bear, piece_of(elephant))\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule11 is preferred over Rule2\norder(rule11) > order(rule2) = True\n# Rule6 is preferred over Rule8\norder(rule6) > order(rule8) = True\n# Rule9 is preferred over Rule7\norder(rule9) > order(rule7) = True\n\n# The current state of the game is as follows\n# The cricket knocks down the fortress of the cheetah\nknock_down(fortress_of(cheetah), cricket) = True\n# The halibut is named Luna\nname(halibut, Luna) = True\n# The meerkat steals five points from the baboon\nsteals_points(meerkat, baboon, 5) = True\n# The panther holds the same number of points as the octopus\npoints(panther) == points(octopus) = True\n# The polar bear has a card that is yellow in color, and is named Lily\nhas(polar_bear, card_with(yellow_color)) = True\nname(polar_bear, Lily) = True\n# The polar bear has some spinach, and supports Chris Ronaldo\nhas(polar_bear, spinach) = True\nsupports(polar_bear, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the zander attack the green fields whose owner is the grasshopper?\nquestion = attack_green_fields(zander, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The sun bear holds the same number of points as the cow whenever at least one animal shows all her cards to the lion\nRule2: If something gives a magnifier to the kiwi, then it needs support from the wolverine, too\nRule3: If something holds an equal number of points as the cow, then it gives a magnifying glass to the kiwi, too.\n\nThe current state of the game is as follows\nThe penguin shows all her cards to the lion\n\nBased on the game state and the rules and preferences, does the sun bear need support from the wolverine?\nQuestion: Does the sun bear need support from the wolverine?",
        "idx": 69,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The sun bear holds the same number of points as the cow whenever at least one animal shows all her cards to the lion\nrule1() = show_all_cards(something, lion) => points(sun_bear) == points(cow)\n# Rule2: If something gives a magnifier to the kiwi, then it needs support from the wolverine, too\nrule2(something) = give_magnifier(something, kiwi) => needs_support(something, wolverine)\n# Rule3: If something holds an equal number of points as the cow, then it gives a magnifying glass to the kiwi, too.\nrule3(something) = points(something) == points(cow) => give_magnifying_glass(something, kiwi)\n\n# The current state of the game is as follows\n# The penguin shows all her cards to the lion\nshow_all_cards(penguin, lion) = True\n\n# Based on the game state and the rules and preferences, does the sun bear need support from the wolverine?\nquestion = needs_support(sun_bear, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The tiger needs the support of the rabbit whenever at least one animal attacks the green fields owned by the panda bear\nRule2: If the tiger has something to sit on, then it does not need support from the rabbit\nRule3: If something does not need support from the rabbit but attacks the green fields owned by the kiwi, then it needs the support of the eagle\nRule4: If an animal needs support from the eagle, then it does not remove one of the pieces of the doctorfish\nRule5: If an animal does not show all her cards to the black bear, then it attacks the green fields owned by the kiwi\nRule6: If the tiger has a name whose first letter is the same as the first letter of the leopard's name, then it does not attack the green fields owned by the kiwi\nRule7: If the tiger has a card with a primary color, then it does not need the support of the rabbit\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule7\nRule5 is preferred over Rule6\n\nThe current state of the game is as follows\nThe leopard is named Buddy\nThe tiger has a basket\nThe tiger has a card that is green in color\nThe tiger is named Beauty\nThe tiger does not show all her cards to the black bear\n\nBased on the game state and the rules and preferences, does the tiger remove from the board one of the pieces of the doctorfish?\nQuestion: Does the tiger remove from the board one of the pieces of the doctorfish?",
        "idx": 70,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The tiger needs the support of the rabbit whenever at least one animal attacks the green fields whose owner is the panda bear\nrule1() = attack(green_fields_of(panda_bear), something) => needs_support(tiger, rabbit)\n# Rule2: Regarding the tiger, if it has something to sit on, then we can conclude that it does not need support from the rabbit\nrule2() = has(tiger, something_to_sit_on) => not needs_support(tiger, rabbit)\n# Rule3: Be careful when something does not need support from the rabbit but attacks the green fields of the kiwi because in this case it will, surely, need the support of the eagle (this may or may not be problematic)\nrule3(something) = not needs_support(something, rabbit) & attack(green_fields_of(kiwi), something) => needs_support(something, eagle)\n# Rule4: If you are positive that you saw one of the animals needs support from the eagle, you can be certain that it will not remove one of the pieces of the doctorfish\nrule4(something) = needs_support(something, eagle) => not remove(something, piece_of(doctorfish))\n# Rule5: If you are positive that one of the animals does not show her cards (all of them) to the black bear, you can be certain that it will attack the green fields whose owner is the kiwi without a doubt\nrule5(something) = not show_cards(something, black_bear) => attack(green_fields_of(kiwi), something)\n# Rule6: Regarding the tiger, if it has a name whose first letter is the same as the first letter of the leopard's name, then we can conclude that it does not attack the green fields of the kiwi\nrule6() = first_letter_of(name(tiger)) == first_letter_of(name(leopard)) => not attack(green_fields_of(kiwi), tiger)\n# Rule7: If the tiger has a card with a primary color, then the tiger does not need the support of the rabbit.\nrule7() = has(tiger, card_with(primary_color)) => not needs_support(tiger, rabbit)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n\n# The current state of the game is as follows\n# The leopard is named Buddy\nname(leopard, Buddy) = True\n# The tiger has a basket, has a card that is green in color, and is named Beauty\nhas(tiger, basket) = True\nhas(tiger, card_with(green_color)) = True\nname(tiger, Beauty) = True\n# The tiger does not show all her cards to the black bear\nnot show_cards(tiger, black_bear) = True\n\n# Based on the game state and the rules and preferences, does the tiger remove from the board one of the pieces of the doctorfish?\nquestion = remove(tiger, piece_of(doctorfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the salmon has something to drink, then it gives a magnifier to the sheep\nRule2: If one of the animals does not learn elementary resource management from the koala, then it offers a job position to the donkey\nRule3: If at least one animal gives a magnifying glass to the sheep, then the jellyfish eats the food of the mosquito\nRule4: If something rolls the dice for the cockroach, then it learns the basics of resource management from the koala\nRule5: If the catfish attacks the green fields of the mosquito and the jellyfish eats the food of the mosquito, then the mosquito does not offer a job position to the donkey\nRule6: If something holds an equal number of points as the crocodile and needs support from the raven, then it does not give a magnifying glass to the sheep\nRule7: If the tiger has a name whose first letter is the same as the first letter of the zander's name, then the tiger shows her cards to the mosquito\nRule8: If the tiger shows her cards to the mosquito, then the mosquito does not learn the basics of resource management from the koala\n\nRule2 is preferred over Rule5\nRule4 is preferred over Rule8\nRule6 is preferred over Rule1\n\nThe current state of the game is as follows\nThe salmon gives a magnifier to the crocodile\nThe salmon has a cappuccino\nThe tiger is named Casper\nThe tiger stole a bike from the store\nThe zander is named Lily\n\nBased on the game state and the rules and preferences, does the mosquito offer a job to the donkey?\nQuestion: Does the mosquito offer a job to the donkey?",
        "idx": 71,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the salmon, if it has something to drink, then we can conclude that it gives a magnifier to the sheep\nrule1() = has(salmon, something_to_drink) => give_magnifier(salmon, sheep)\n# Rule2: If you are positive that one of the animals does not learn elementary resource management from the koala, you can be certain that it will offer a job position to the donkey without a doubt\nrule2(something) = not learn_elementary_resource_management_from(something, koala) => offer_job_position(something, donkey)\n# Rule3: If at least one animal gives a magnifying glass to the sheep, then the jellyfish eats the food of the mosquito\nrule3() = give_magnifying_glass(something, sheep) => eat_food(jellyfish, mosquito)\n# Rule4: If something rolls the dice for the cockroach, then it learns the basics of resource management from the koala, too\nrule4(something) = roll_dice(something, cockroach) => learn_basics_of_resource_management(something, koala)\n# Rule5: If the catfish attacks the green fields of the mosquito and the jellyfish eats the food of the mosquito, then the mosquito will not offer a job position to the donkey\nrule5() = attack_green_fields(catfish, mosquito) & eat_food(jellyfish, mosquito) => not offer_job_position(mosquito, donkey)\n# Rule6: If you see that something holds an equal number of points as the crocodile and needs support from the raven, what can you certainly conclude? You can conclude that it does not give a magnifying glass to the sheep\nrule6(something) = points(something) == points(crocodile) & needs_support(something, raven) => not give_magnifying_glass(something, sheep)\n# Rule7: If the tiger has a name whose first letter is the same as the first letter of the zander's name, then the tiger shows her cards (all of them) to the mosquito\nrule7() = first_letter_of(name(tiger)) == first_letter_of(name(zander)) => show_cards(tiger, mosquito)\n# Rule8: The mosquito does not learn the basics of resource management from the koala, in the case where the tiger shows her cards (all of them) to the mosquito.\nrule8() = show_cards(tiger, mosquito) => not learn_basics_of_resource_management(mosquito, koala)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule4 is preferred over Rule8\norder(rule4) > order(rule8) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n\n# The current state of the game is as follows\n# The salmon gives a magnifier to the crocodile\ngive_magnifier(salmon, crocodile) = True\n# The salmon has a cappuccino\nhas(salmon, cappuccino) = True\n# The tiger is named Casper\nname(tiger, Casper) = True\n# The tiger stole a bike from the store\nstole(tiger, bike_from(store)) = True\n# The zander is named Lily\nname(zander, Lily) = True\n\n# Based on the game state and the rules and preferences, does the mosquito offer a job to the donkey?\nquestion = offer_job_position(mosquito, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish has a card whose color starts with the letter \"g\", then it removes one of the pieces of the octopus\nRule2: If the blobfish has a high-quality paper, then it does not remove from the board one of the pieces of the octopus\nRule3: If at least one animal removes from the board one of the pieces of the halibut, then the octopus proceeds to the spot that is right after the spot of the zander\nRule4: If the blobfish does not remove one of the pieces of the octopus, then the octopus offers a job to the amberjack\nRule5: If the cow killed the mayor, then it raises a peace flag for the elephant\nRule6: If the cow raises a peace flag for the elephant, then the elephant rolls the dice for the cow\nRule7: If at least one animal sings a victory song for the polar bear, then the octopus does not raise a peace flag for the bat\nRule8: If you see that one of the animals proceeds to the spot right after the zander, then it offers a job position to the sea bass\nRule9: If something offers a job to the amberjack and offers a job position to the sea bass, then it does not offer a job to the hippopotamus\nRule10: If the octopus has a name whose first letter is the same as the first letter of the sea bass's name, then it raises a peace flag for the bat\nRule11: If at least one animal rolls the dice for the cow, then the octopus offers a job position to the hippopotamus\nRule12: If the meerkat owes money to the cow and the sun bear does not learn elementary resource management from the cow, then the cow will never raise a peace flag for the elephant\n\nRule1 is preferred over Rule2\nRule11 is preferred over Rule9\nRule5 is preferred over Rule12\nRule7 is preferred over Rule10\n\nThe current state of the game is as follows\nThe blobfish published a high-quality paper\nThe cow assassinated the mayor\nThe meerkat owes money to the cow\nThe octopus is named Teddy\nThe penguin removes from the board one of the pieces of the halibut\nThe sea bass is named Tango\nThe sun bear does not learn elementary resource management from the cow\n\nBased on the game state and the rules and preferences, does the octopus offer a job to the hippopotamus?\nQuestion: Does the octopus offer a job to the hippopotamus?",
        "idx": 72,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the blobfish, if it has a card whose color starts with the letter \"g\", then we can conclude that it removes one of the pieces of the octopus\nrule1() = has(blobfish, card_with(color_starting_with(\"g\"))) => remove(blobfish, piece_of(octopus))\n# Rule2: Regarding the blobfish, if it has a high-quality paper, then we can conclude that it does not remove from the board one of the pieces of the octopus\nrule2() = has(blobfish, high_quality_paper) => not remove(blobfish, piece_of(octopus))\n# Rule3: If at least one animal removes from the board one of the pieces of the halibut, then the octopus proceeds to the spot that is right after the spot of the zander\nrule3() = remove(something, piece_of(halibut)) => proceed(octopus, spot_right_after(spot_of(zander)))\n# Rule4: If the blobfish does not remove one of the pieces of the octopus, then the octopus offers a job to the amberjack\nrule4() = not remove(blobfish, piece_of(octopus)) => offer_job(octopus, amberjack)\n# Rule5: Regarding the cow, if it killed the mayor, then we can conclude that it raises a peace flag for the elephant\nrule5() = killed(cow, mayor) => raise_flag_of_peace(cow, elephant)\n# Rule6: The elephant unquestionably rolls the dice for the cow, in the case where the cow raises a peace flag for the elephant\nrule6() = raise_flag_of_peace(cow, elephant) => roll_dice(elephant, cow)\n# Rule7: The octopus does not raise a peace flag for the bat whenever at least one animal sings a victory song for the polar bear\nrule7() = sing_song(something, victory_song_for(polar_bear)) => not raise_flag_of_peace(octopus, bat)\n# Rule8: If you are positive that you saw one of the animals proceeds to the spot right after the zander, you can be certain that it will also offer a job position to the sea bass\nrule8(something) = proceed(something, spot_right_after(spot_of(zander))) => offer_job_position(something, sea_bass)\n# Rule9: If you see that something offers a job to the amberjack and offers a job position to the sea bass, what can you certainly conclude? You can conclude that it does not offer a job to the hippopotamus\nrule9(something) = offer_job(something, amberjack) & offer_job_position(something, sea_bass) => not offer_job(something, hippopotamus)\n# Rule10: Regarding the octopus, if it has a name whose first letter is the same as the first letter of the sea bass's name, then we can conclude that it raises a peace flag for the bat\nrule10() = first_letter_of(name(octopus)) == first_letter_of(name(sea_bass)) => raise_flag_of_peace(octopus, bat)\n# Rule11: If at least one animal rolls the dice for the cow, then the octopus offers a job position to the hippopotamus\nrule11() = roll_dice(something, cow) => offer_job_position(octopus, hippopotamus)\n# Rule12: If the meerkat owes $$$ to the cow and the sun bear does not learn elementary resource management from the cow, then the cow will never raise a peace flag for the elephant.\nrule12() = owes_money_to(meerkat, cow) & not learn(sun_bear, elementary_resource_management_from(cow)) => never_raise_flag_of_peace(cow, elephant)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule11 is preferred over Rule9\norder(rule11) > order(rule9) = True\n# Rule5 is preferred over Rule12\norder(rule5) > order(rule12) = True\n# Rule7 is preferred over Rule10\norder(rule7) > order(rule10) = True\n\n# The current state of the game is as follows\n# The blobfish published a high-quality paper\nhas(blobfish, high_quality_paper) = True\n# The cow assassinated the mayor\nkilled(cow, mayor) = True\n# The meerkat owes money to the cow\nowes_money_to(meerkat, cow) = True\n# The octopus is named Teddy\nname(octopus, Teddy) = True\n# The penguin removes from the board one of the pieces of the halibut\nremove(penguin, piece_of(halibut)) = True\n# The sea bass is named Tango\nname(sea_bass, Tango) = True\n# The sun bear does not learn the basics of resource management from the cow\nnot learn(sun_bear, elementary_resource_management_from(cow)) = True\n\n# Based on the game state and the rules and preferences, does the octopus offer a job to the hippopotamus?\nquestion = offer_job(octopus, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the snail has something to sit on, then the snail proceeds to the spot that is right after the spot of the meerkat\nRule2: If the tiger has a card whose color starts with the letter \"b\", then it does not raise a peace flag for the snail\nRule3: If you see one of the animals proceeds to the spot that is right after the spot of the meerkat, then it will also need the support of the lobster\nRule4: If you see one of the animals winks at the puffin, then it will also sing a song of victory for the snail\nRule5: The tiger raises a peace flag for the snail whenever at least one animal steals five points from the grasshopper\nRule6: If the aardvark owes money to the moose, then the moose does not sing a victory song for the snail\nRule7: If something needs support from the lobster but does not offer a job to the buffalo, then it does not burn the warehouse of the pig\nRule8: If the tiger raises a peace flag for the snail and the moose sings a song of victory for the snail, then the snail does not offer a job to the buffalo\nRule9: If the snail has a name whose first letter is the same as the first letter of the jellyfish's name, then it proceeds to the spot that is right after the spot of the meerkat\n\nRule5 is preferred over Rule2\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe jellyfish is named Tarzan\nThe moose winks at the puffin\nThe panda bear steals five points from the grasshopper\nThe snail has green tea\nThe snail has a knapsack\nThe snail is named Tessa\nThe snail reduced her work hours recently\nThe tiger has a card that is blue in color\n\nBased on the game state and the rules and preferences, does the snail burn the warehouse of the pig?\nQuestion: Does the snail burn the warehouse of the pig?",
        "idx": 73,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the snail has something to sit on, then the snail proceeds to the spot that is right after the spot of the meerkat\nrule1() = has(snail, something_to_sit_on) => proceed(snail, spot_right_after(spot_of(meerkat)))\n# Rule2: Regarding the tiger, if it has a card whose color starts with the letter \"b\", then we can conclude that it does not raise a peace flag for the snail\nrule2() = has(tiger, card_with(color_starting_with(\"b\"))) => not raise_flag_of_peace(tiger, snail)\n# Rule3: If you are positive that you saw one of the animals proceeds to the spot that is right after the spot of the meerkat, you can be certain that it will also need the support of the lobster\nrule3(something) = proceed(something, spot_right_after(spot_of(meerkat))) => needs_support(something, lobster)\n# Rule4: If you are positive that you saw one of the animals winks at the puffin, you can be certain that it will also sing a song of victory for the snail\nrule4(something) = wink(something, puffin) => sing_song(something, victory_song_for(snail))\n# Rule5: The tiger raises a peace flag for the snail whenever at least one animal steals five points from the grasshopper\nrule5() = steal_points_from(grasshopper, 5) => raise_flag_of_peace(tiger, snail)\n# Rule6: The moose does not sing a victory song for the snail, in the case where the aardvark owes $$$ to the moose\nrule6() = owes_money_to(aardvark, moose) => not sing_song(moose, victory_song_for(snail))\n# Rule7: If you see that something needs support from the lobster but does not offer a job to the buffalo, what can you certainly conclude? You can conclude that it does not burn the warehouse of the pig\nrule7(something) = needs_support(something, lobster) & not offer_job(something, buffalo) => not burn(warehouse_of(pig), something)\n# Rule8: For the snail, if the belief is that the tiger raises a peace flag for the snail and the moose sings a song of victory for the snail, then you can add that \"the snail is not going to offer a job to the buffalo\" to your conclusions\nrule8() = raise_flag_of_peace(tiger, snail) & sing_song(moose, victory_song_for(snail)) => not offer_job(snail, buffalo)\n# Rule9: Regarding the snail, if it has a name whose first letter is the same as the first letter of the jellyfish's name, then we can conclude that it proceeds to the spot that is right after the spot of the meerkat.\nrule9() = first_letter_of(name(snail)) == first_letter_of(name(jellyfish)) => proceed(snail, spot_right_after(spot_of(meerkat)))\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The jellyfish is named Tarzan\nname(jellyfish, Tarzan) = True\n# The moose winks at the puffin\nwink(moose, puffin) = True\n# The panda bear steals five points from the grasshopper\nsteal_points_from(panda_bear, 5) = True\n# The snail has a green tea, has a knapsack, and is named Tessa\nhas(snail, green_tea) = True\nhas(snail, knapsack) = True\nname(snail, Tessa) = True\n# The snail reduced her work hours recently\nreduce_work_hours(snail) = True\n# The tiger has a card that is blue in color\nhas(tiger, card_with(blue_color)) = True\n\n# Based on the game state and the rules and preferences, does the snail burn the warehouse of the pig?\nquestion = burn(warehouse_of(pig), snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish has a card whose color starts with the letter \"w\", then it steals five points from the kudu\nRule2: If at least one animal proceeds to the spot right after the canary, then the kudu offers a job position to the parrot\nRule3: The kudu does not raise a peace flag for the squirrel, in the case where the catfish steals five points from the kudu\nRule4: If at least one animal raises a peace flag for the caterpillar, then the squirrel does not know the defense plan of the kudu\nRule5: If you are positive that you saw one of the animals sings a victory song for the cheetah, you can be certain that it will also proceed to the spot right after the canary\nRule6: If something holds the same number of points as the parrot but does not raise a flag of peace for the squirrel, then it respects the swordfish\nRule7: If the grasshopper has more than three friends, then it does not steal five points from the squirrel\nRule8: If the grasshopper steals five points from the squirrel, then the squirrel knows the defensive plans of the kudu\nRule9: The kudu does not respect the swordfish, in the case where the squirrel burns the warehouse that is in possession of the kudu\nRule10: If at least one animal offers a job position to the crocodile, then the halibut does not know the defensive plans of the kudu\nRule11: If the puffin does not show all her cards to the halibut but the hummingbird prepares armor for the halibut, then the halibut knows the defense plan of the kudu\nRule12: If something removes one of the pieces of the lion, then it raises a peace flag for the squirrel\nRule13: The grasshopper steals five points from the squirrel whenever at least one animal knocks down the fortress of the goldfish\nRule14: The kudu will not offer a job position to the parrot, in the case where the halibut does not know the defensive plans of the kudu\n\nRule11 is preferred over Rule10\nRule12 is preferred over Rule3\nRule13 is preferred over Rule7\nRule2 is preferred over Rule14\nRule4 is preferred over Rule8\nRule6 is preferred over Rule9\n\nThe current state of the game is as follows\nThe catfish has a card that is white in color\nThe grasshopper has 5 friends\nThe hippopotamus offers a job position to the crocodile\nThe hummingbird prepares armor for the halibut\nThe pig proceeds to the spot right after the cheetah\nThe zander knocks down the fortress of the goldfish\n\nBased on the game state and the rules and preferences, does the kudu respect the swordfish?\nQuestion: Does the kudu respect the swordfish?",
        "idx": 74,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the catfish, if it has a card whose color starts with the letter \"w\", then we can conclude that it steals five points from the kudu\nrule1() = has(catfish, card_with(color_starting_with(\"w\"))) => steal_points(catfish, 5, kudu)\n# Rule2: If at least one animal proceeds to the spot right after the canary, then the kudu offers a job position to the parrot\nrule2() = proceed(something, spot_right_after(spot_of(canary))) => offer_job_position(kudu, parrot)\n# Rule3: The kudu does not raise a peace flag for the squirrel, in the case where the catfish steals five of the points of the kudu\nrule3() = steal_points(catfish, 5, kudu) => not raise_flag_of_peace(kudu, squirrel)\n# Rule4: If at least one animal raises a peace flag for the caterpillar, then the squirrel does not know the defense plan of the kudu\nrule4() = raise_flag_of_peace(something, caterpillar) => not knows_defense_plan(kudu, squirrel)\n# Rule5: If you are positive that you saw one of the animals sings a victory song for the cheetah, you can be certain that it will also proceed to the spot right after the canary\nrule5() = sing_song(something, victory_song_for(cheetah)) => proceed(something, spot_right_after(spot_of(canary)))\n# Rule6: If you see that something holds the same number of points as the parrot but does not raise a flag of peace for the squirrel, what can you certainly conclude? You can conclude that it respects the swordfish\nrule6(something) = points(something) == points(parrot) & not raise_flag_of_peace(something, squirrel) => respects(something, swordfish)\n# Rule7: If the grasshopper has more than three friends, then the grasshopper does not steal five points from the squirrel\nrule7() = friends(grasshopper) > 3 => not steal_points(grasshopper, 5, squirrel)\n# Rule8: If the grasshopper steals five of the points of the squirrel, then the squirrel knows the defensive plans of the kudu\nrule8() = steal_points(grasshopper, 5, squirrel) => knows_defensive_plans(squirrel, kudu)\n# Rule9: The kudu does not respect the swordfish, in the case where the squirrel burns the warehouse that is in possession of the kudu\nrule9() = burn(warehouse_of(kudu), squirrel) => not respects(kudu, swordfish)\n# Rule10: If at least one animal offers a job position to the crocodile, then the halibut does not know the defensive plans of the kudu\nrule10() = offer_job_position(something, crocodile) => not knows_defensive_plans(halibut, kudu)\n# Rule11: For the halibut, if the belief is that the puffin does not show her cards (all of them) to the halibut but the hummingbird prepares armor for the halibut, then you can add \"the halibut knows the defense plan of the kudu\" to your conclusions\nrule11() = not show_cards(puffin, halibut) & prepare_armor(hummingbird, halibut) => knows_defense_plan(halibut, kudu)\n# Rule12: If something removes one of the pieces of the lion, then it raises a peace flag for the squirrel, too\nrule12() = remove(something, piece_of(lion)) => raise_flag_of_peace(something, squirrel)\n# Rule13: The grasshopper steals five points from the squirrel whenever at least one animal knocks down the fortress of the goldfish\nrule13() = knock_down(fortress_of(goldfish), something) => steal_points(grasshopper, 5, squirrel)\n# Rule14: The kudu will not offer a job position to the parrot, in the case where the halibut does not know the defensive plans of the kudu.\nrule14() = not knows_defensive_plans(halibut, kudu) => not offer_job_position(kudu, parrot)\n# Rule11 is preferred over Rule10\norder(rule11) > order(rule10) = True\n# Rule12 is preferred over Rule3\norder(rule12) > order(rule3) = True\n# Rule13 is preferred over Rule7\norder(rule13) > order(rule7) = True\n# Rule2 is preferred over Rule14\norder(rule2) > order(rule14) = True\n# Rule4 is preferred over Rule8\norder(rule4) > order(rule8) = True\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n\n# The current state of the game is as follows\n# The catfish has a card that is white in color\nhas(catfish, card_with(white_color)) = True\n# The grasshopper has 5 friends\nfriends(grasshopper) = 5\n# The hippopotamus offers a job to the crocodile\noffer_job_position(hippopotamus, crocodile) = True\n# The hummingbird prepares armor for the halibut\nprepare_armor(hummingbird, halibut) = True\n# The pig proceeds to the spot right after the cheetah\nproceed(pig, spot_right_after(spot_of(cheetah))) = True\n# The zander knocks down the fortress of the goldfish\nknock_down(fortress_of(goldfish), zander) = True\n\n# Based on the game state and the rules and preferences, does the kudu respect the swordfish?\nquestion = respects(kudu, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the carp has something to drink, then it does not need support from the cockroach\nRule2: If at least one animal shows all her cards to the cat, then the hare does not become an enemy of the cockroach\nRule3: If you saw one of the animals roll the dice for the raven, then it will also roll the dice for the phoenix\nRule4: If at least one animal proceeds to the spot right after the spot of the eel, then the snail holds an equal number of points as the rabbit\nRule5: If the lion has fewer than two friends, then it becomes an actual enemy of the snail\nRule6: If the lion killed the mayor, then it becomes an enemy of the snail\nRule7: If the cricket does not roll the dice for the carp, then the carp needs support from the cockroach\nRule8: If the mosquito has a card with a primary color, then it proceeds to the spot right after the spot of the eel\nRule9: If the lion has a name whose first letter is the same as the first letter of the octopus's name, then the lion does not become an actual enemy of the snail\nRule10: If something rolls the dice for the phoenix, then it respects the canary\nRule11: If the mosquito has a name whose first letter is the same as the first letter of the viperfish's name, then the mosquito proceeds to the spot right after the eel\nRule12: If something does not show all her cards to the penguin but respects the canary, then it also burns the warehouse that is in possession of the zander\nRule13: If the hare has a card whose color starts with the letter \"w\", then it becomes an actual enemy of the cockroach\nRule14: If at least one animal eats the food that belongs to the grasshopper, then the baboon steals five points from the cockroach\nRule15: If the baboon does not steal five points from the cockroach and the hare does not become an enemy of the cockroach, then the cockroach does not show all her cards to the penguin\nRule16: If the baboon has a name whose first letter is the same as the first letter of the penguin's name, then the baboon does not steal five points from the cockroach\n\nRule1 is preferred over Rule7\nRule13 is preferred over Rule2\nRule14 is preferred over Rule16\nRule9 is preferred over Rule5\nRule9 is preferred over Rule6\n\nThe current state of the game is as follows\nThe baboon is named Peddi\nThe cockroach rolls the dice for the raven\nThe lion assassinated the mayor, has five energetic friends and 2 non-energetic friends, and is named Max\nThe mosquito has a white-colored card\nThe mosquito is named Max\nThe penguin is named Pablo\nThe squid shows all her cards to the cat\nThe viperfish is named Meadow\nThe cricket does not roll the dice for the carp\n\nBased on the game state and the rules and preferences, does the cockroach burn the warehouse of the zander?\nQuestion: Does the cockroach burn the warehouse of the zander?",
        "idx": 75,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the carp, if it has something to drink, then we can conclude that it does not need support from the cockroach\nrule1() = has(carp, drink) => not needs_support(carp, cockroach)\n# Rule2: If at least one animal shows all her cards to the cat, then the hare does not become an enemy of the cockroach\nrule2() = show_all_cards(something, cat) => not enemy(hare, cockroach)\n# Rule3: If you are positive that you saw one of the animals rolls the dice for the raven, you can be certain that it will also roll the dice for the phoenix\nrule3(something) = rolls_dice(something, raven) => rolls_dice(something, phoenix)\n# Rule4: If at least one animal proceeds to the spot that is right after the spot of the eel, then the snail holds an equal number of points as the rabbit\nrule4() = proceed(something, spot_right_after(spot_of(eel))) => points(snail) == points(rabbit)\n# Rule5: Regarding the lion, if it has fewer than two friends, then we can conclude that it becomes an actual enemy of the snail\nrule5() = friends(lion) < 2 => enemy(lion, snail)\n# Rule6: If the lion killed the mayor, then the lion becomes an enemy of the snail\nrule6() = killed(lion, mayor) => enemy(lion, snail)\n# Rule7: The carp unquestionably needs support from the cockroach, in the case where the cricket does not roll the dice for the carp\nrule7() = not rolls_dice(cricket, carp) => needs_support(carp, cockroach)\n# Rule8: If the mosquito has a card with a primary color, then the mosquito proceeds to the spot that is right after the spot of the eel\nrule8() = has(mosquito, card_with(primary_color)) => proceed(mosquito, spot_right_after(spot_of(eel)))\n# Rule9: If the lion has a name whose first letter is the same as the first letter of the octopus's name, then the lion does not become an actual enemy of the snail\nrule9() = first_letter_of(name(lion)) == first_letter_of(name(octopus)) => not enemy(lion, snail)\n# Rule10: If something rolls the dice for the phoenix, then it respects the canary, too\nrule10(something) = rolls_dice(something, phoenix) => respects(something, canary)\n# Rule11: If the mosquito has a name whose first letter is the same as the first letter of the viperfish's name, then the mosquito proceeds to the spot right after the eel\nrule11() = first_letter_of(name(mosquito)) == first_letter_of(name(viperfish)) => proceed(mosquito, spot_right_after(spot_of(eel)))\n# Rule12: If you see that something does not show all her cards to the penguin but it respects the canary, what can you certainly conclude? You can conclude that it also burns the warehouse that is in possession of the zander\nrule12(something) = not show_all_cards(something, penguin) & respects(something, canary) => burn(warehouse_of(zander), something)\n# Rule13: Regarding the hare, if it has a card whose color starts with the letter \"w\", then we can conclude that it becomes an actual enemy of the cockroach\nrule13() = has(hare, card_with(color_starting_with(\"w\"))) => enemy(hare, cockroach)\n# Rule14: If at least one animal eats the food that belongs to the grasshopper, then the baboon steals five points from the cockroach\nrule14() = eats_food(something, food_of(grasshopper)) => steal_points(baboon, 5, cockroach)\n# Rule15: For the cockroach, if the belief is that the baboon does not steal five of the points of the cockroach and the hare does not become an enemy of the cockroach, then you can add \"the cockroach does not show all her cards to the penguin\" to your conclusions\nrule15() = not steal_points(baboon, 5, cockroach) & not enemy(hare, cockroach) => not show_all_cards(cockroach, penguin)\n# Rule16: Regarding the baboon, if it has a name whose first letter is the same as the first letter of the penguin's name, then we can conclude that it does not steal five points from the cockroach.\nrule16() = first_letter_of(name(baboon)) == first_letter_of(name(penguin)) => not steal_points(baboon, 5, cockroach)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule13 is preferred over Rule2\norder(rule13) > order(rule2) = True\n# Rule14 is preferred over Rule16\norder(rule14) > order(rule16) = True\n# Rule9 is preferred over Rule5\norder(rule9) > order(rule5) = True\n# Rule9 is preferred over Rule6\norder(rule9) > order(rule6) = True\n\n# The current state of the game is as follows\n# The baboon is named Peddi\nname(baboon, Peddi) = True\n# The cockroach rolls the dice for the raven\nrolls_dice(cockroach, raven) = True\n# The lion assassinated the mayor, has five friends that are energetic and 2 friends that are not, and is named Max\nkilled(lion, mayor) = True\nfriends(lion, energetic) = 5\nfriends(lion, not_energetic) = 2\nname(lion, Max) = True\n# The mosquito has a card that is white in color\nhas(mosquito, card_with(white_color)) = True\n# The mosquito is named Max\nname(mosquito, Max) = True\n# The penguin is named Pablo\nname(penguin, Pablo) = True\n# The squid shows all her cards to the cat\nshow_all_cards(squid, cat) = True\n# The viperfish is named Meadow\nname(viperfish, Meadow) = True\n# The cricket does not roll the dice for the carp\nnot rolls_dice(cricket, carp) = True\n\n# Based on the game state and the rules and preferences, does the cockroach burn the warehouse of the zander?\nquestion = burn(warehouse_of(zander), cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus does not steal five points from the bat but the cheetah steals five points from the bat, then the bat will not roll the dice for the leopard\nRule2: If the catfish has fewer than 5 friends, then it shows all her cards to the oscar\nRule3: If the octopus has fewer than three friends, then the octopus becomes an enemy of the raven\nRule4: If the cheetah has a name whose first letter is the same as the first letter of the donkey's name, then it becomes an actual enemy of the squid\nRule5: If the catfish owns a luxury aircraft, then it shows all her cards to the oscar\nRule6: If the cheetah has more than five friends, then it becomes an actual enemy of the squid\nRule7: If the octopus has a name whose first letter is the same as the first letter of the cricket's name, then it becomes an actual enemy of the raven\nRule8: If something learns the basics of resource management from the kudu and becomes an actual enemy of the squid, then it steals five points from the bat\nRule9: If at least one animal proceeds to the spot right after the spot of the eagle, then the cheetah learns the basics of resource management from the kudu\nRule10: If at least one animal becomes an enemy of the raven, then it does not steal five points from the bat\n\nThe current state of the game is as follows\nThe catfish has fourteen friends and owns a luxury aircraft\nThe cheetah has 1 friend that is bald and 1 friend that is not, and is named Chickpea\nThe cricket is named Tango\nThe donkey is named Cinnamon\nThe octopus has twelve friends and is named Tessa\nThe polar bear sings a victory song for the cheetah\nThe sun bear proceeds to the spot right after the eagle\n\nBased on the game state and the rules and preferences, does the bat roll the dice for the leopard?\nQuestion: Does the bat roll the dice for the leopard?",
        "idx": 76,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the octopus does not steal five of the points of the bat however the cheetah steals five points from the bat, then the bat will not roll the dice for the leopard\nrule1() = not steal_points(octopus, 5, bat) & steal_points(cheetah, 5, bat) => not roll_dice(bat, leopard)\n# Rule2: Regarding the catfish, if it has fewer than 5 friends, then we can conclude that it shows her cards (all of them) to the oscar\nrule2() = friends(catfish) < 5 => show_cards(catfish, oscar)\n# Rule3: If the octopus has fewer than three friends, then the octopus becomes an enemy of the raven\nrule3() = friends(octopus) < 3 => enemy(octopus, raven)\n# Rule4: Regarding the cheetah, if it has a name whose first letter is the same as the first letter of the donkey's name, then we can conclude that it becomes an actual enemy of the squid\nrule4() = first_letter_of(name(cheetah)) == first_letter_of(name(donkey)) => actual_enemy(cheetah, squid)\n# Rule5: If the catfish owns a luxury aircraft, then the catfish shows all her cards to the oscar\nrule5() = owns(catfish, luxury_aircraft) => show_all_cards(catfish, oscar)\n# Rule6: Regarding the cheetah, if it has more than five friends, then we can conclude that it becomes an actual enemy of the squid\nrule6() = friends(cheetah) > 5 => actual_enemy(cheetah, squid)\n# Rule7: Regarding the octopus, if it has a name whose first letter is the same as the first letter of the cricket's name, then we can conclude that it becomes an actual enemy of the raven\nrule7() = first_letter_of(name(octopus)) == first_letter_of(name(cricket)) => actual_enemy(octopus, raven)\n# Rule8: Be careful when something learns the basics of resource management from the kudu and also becomes an actual enemy of the squid because in this case it will surely steal five points from the bat (this may or may not be problematic)\nrule8(something) = learn_basics_of_resource_management(something, kudu) & actual_enemy(something, squid) => steal_points(something, 5, bat)\n# Rule9: If at least one animal proceeds to the spot that is right after the spot of the eagle, then the cheetah learns the basics of resource management from the kudu\nrule9() = proceed_to_spot_right_after(spot_of(eagle), something) => learn_basics_of_resource_management(cheetah, kudu)\n# Rule10: If you are positive that you saw one of the animals becomes an enemy of the raven, you can be certain that it will not steal five of the points of the bat.\nrule10() = enemy(something, raven) => not steal_points(something, 5, bat)\n\n# The current state of the game is as follows\n# The catfish has fourteen friends, and purchased a luxury aircraft\nfriends(catfish) = 14\nowns(catfish, luxury_aircraft) = True\n# The cheetah has 1 friend that is bald and 1 friend that is not, and is named Chickpea\nfriends(cheetah) = 2\nhas_friend(cheetah, bald) = True\nhas_friend(cheetah, not_bald) = True\nname(cheetah, Chickpea) = True\n# The cricket is named Tango\nname(cricket, Tango) = True\n# The donkey is named Cinnamon\nname(donkey, Cinnamon) = True\n# The octopus has twelve friends\nfriends(octopus) = 12\n# The octopus is named Tessa\nname(octopus, Tessa) = True\n# The polar bear sings a victory song for the cheetah\nsing_song(polar_bear, victory_song_for(cheetah)) = True\n# The sun bear proceeds to the spot right after the eagle\nproceed_to_spot_right_after(spot_of(eagle), sun_bear) = True\n\n# Based on the game state and the rules and preferences, does the bat roll the dice for the leopard?\nquestion = roll_dice(bat, leopard)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the dog respects the raven and the sheep does not know the defensive plans of the raven, then the raven prepares armor for the eagle\nRule2: If the panda bear owes money to the dog, then the dog burns the warehouse of the grizzly bear\nRule3: If something attacks the green fields whose owner is the elephant but does not attack the green fields whose owner is the squirrel, then it learns elementary resource management from the octopus\nRule4: If the rabbit does not prepare armor for the sheep, then the sheep does not learn the basics of resource management from the octopus\nRule5: The dog gives a magnifying glass to the sheep whenever at least one animal rolls the dice for the blobfish\nRule6: If something learns the basics of resource management from the octopus, then it does not know the defensive plans of the raven\nRule7: If the dog has published a high-quality paper, then it does not burn the warehouse of the grizzly bear\nRule8: If something gives a magnifier to the sheep, then it respects the raven\nRule9: If the dog has a card with a primary color, then it does not burn the warehouse of the grizzly bear\n\nRule4 is preferred over Rule3\nRule7 is preferred over Rule2\nRule9 is preferred over Rule2\n\nThe current state of the game is as follows\nThe dog recently read a high-quality paper\nThe panda bear owes money to the dog\nThe panther rolls the dice for the blobfish\nThe sheep attacks the green fields whose owner is the elephant but does not respect the squirrel\n\nBased on the game state and the rules and preferences, does the raven prepare armor for the eagle?\nQuestion: Does the raven prepare armor for the eagle?",
        "idx": 77,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the raven, if the belief is that the dog respects the raven and the sheep does not know the defensive plans of the raven, then you can add \"the raven prepares armor for the eagle\" to your conclusions\nrule1() = believes(dog_respects_raven) & not knows_defensive_plans(sheep, raven) => add_conclusion(\"the raven prepares armor for the eagle\")\n# Rule2: If the panda bear owes money to the dog, then the dog burns the warehouse that is in possession of the grizzly bear\nrule2() = owes_money_to(panda_bear, dog) => burn(warehouse_of(grizzly_bear))\n# Rule3: If you see that something attacks the green fields whose owner is the elephant but does not attack the green fields whose owner is the squirrel, what can you certainly conclude? You can conclude that it learns elementary resource management from the octopus\nrule3(something) = attacks(green_fields_of(elephant)) & not attacks(green_fields_of(squirrel)) => conclude(learns_elementary_resource_management(something, octopus))\n# Rule4: If the rabbit does not prepare armor for the sheep, then the sheep does not learn the basics of resource management from the octopus\nrule4() = not prepare_armor(rabbit, sheep) => not learn_basics_of_resource_management(sheep, octopus)\n# Rule5: The dog gives a magnifying glass to the sheep whenever at least one animal rolls the dice for the blobfish\nrule5() = rolls_dice_for(blobfish) => give_magnifying_glass(dog, sheep)\n# Rule6: If you are positive that you saw one of the animals learns the basics of resource management from the octopus, you can be certain that it will not know the defensive plans of the raven\nrule6(something) = learns_basics_of_resource_management(something, octopus) => not knows_defensive_plans(something, raven)\n# Rule7: Regarding the dog, if it has published a high-quality paper, then we can conclude that it does not burn the warehouse of the grizzly bear\nrule7() = has_published_high_quality_paper(dog) => not burn(warehouse_of(grizzly_bear))\n# Rule8: If something gives a magnifier to the sheep, then it respects the raven, too\nrule8(something) = give_magnifier(something, sheep) => respects(something, raven)\n# Rule9: Regarding the dog, if it has a card with a primary color, then we can conclude that it does not burn the warehouse of the grizzly bear.\nrule9() = has(dog, card_with(primary_color)) => not burn(warehouse_of(grizzly_bear))\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n# Rule9 is preferred over Rule2\norder(rule9) > order(rule2) = True\n\n# The current state of the game is as follows\n# The dog recently read a high-quality paper\nrecently_read(dog, high_quality_paper) = True\n# The panda bear owes money to the dog\nowes_money_to(panda_bear, dog) = True\n# The panther rolls the dice for the blobfish\nrolls_dice_for(panther, blobfish) = True\n# The sheep attacks the green fields whose owner is the elephant but does not respect the squirrel\nattacks(sheep, green_fields_of(elephant)) = True\nnot respects(sheep, squirrel) = True\n\n# Based on the game state and the rules and preferences, does the raven prepare armor for the eagle?\nquestion = prepare_armor(raven, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal steals five points from the panda bear, then the leopard becomes an enemy of the sea bass\nRule2: If the panda bear does not learn elementary resource management from the crocodile, then the crocodile becomes an actual enemy of the dog\nRule3: The leopard does not wink at the spider whenever at least one animal knocks down the fortress of the kangaroo\nRule4: If the zander learns the basics of resource management from the mosquito, then the mosquito does not owe money to the leopard\nRule5: The leopard unquestionably winks at the spider, in the case where the mosquito does not owe money to the leopard\nRule6: If the mosquito has a name whose first letter is the same as the first letter of the canary's name, then the mosquito owes money to the leopard\nRule7: If the mosquito has something to sit on, then the mosquito owes money to the leopard\nRule8: If something becomes an actual enemy of the dog, then it steals five points from the panda bear\n\nRule3 is preferred over Rule5\nRule6 is preferred over Rule4\nRule7 is preferred over Rule4\n\nThe current state of the game is as follows\nThe canary is named Lily\nThe mosquito is named Cinnamon\nThe zander learns the basics of resource management from the mosquito\nThe panda bear does not learn elementary resource management from the crocodile\n\nBased on the game state and the rules and preferences, does the leopard become an enemy of the sea bass?\nQuestion: Does the leopard become an enemy of the sea bass?",
        "idx": 78,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal steals five points from the panda bear, then the leopard becomes an enemy of the sea bass\nrule1() = steal_points(something, 5, panda_bear) => enemy(leopard, sea_bass)\n# Rule2: If the panda bear does not learn elementary resource management from the crocodile, then the crocodile becomes an actual enemy of the dog\nrule2() = not learn_elementary_resource_management(panda_bear, crocodile) => actual_enemy(crocodile, dog)\n# Rule3: The leopard does not wink at the spider whenever at least one animal knocks down the fortress of the kangaroo\nrule3() = knock_down_fortress(something, kangaroo) => not wink(leopard, spider)\n# Rule4: If the zander learns the basics of resource management from the mosquito, then the mosquito is not going to owe $$$ to the leopard\nrule4() = learn_basics_of_resource_management(zander, mosquito) => not owes_money_to(mosquito, leopard)\n# Rule5: The leopard unquestionably winks at the spider, in the case where the mosquito does not owe $$$ to the leopard\nrule5() = not owes_money_to(mosquito, leopard) => wink(leopard, spider)\n# Rule6: Regarding the mosquito, if it has a name whose first letter is the same as the first letter of the canary's name, then we can conclude that it owes money to the leopard\nrule6() = first_letter_of(name(mosquito)) == first_letter_of(name(canary)) => owes_money_to(mosquito, leopard)\n# Rule7: If the mosquito has something to sit on, then the mosquito owes money to the leopard\nrule7() = has(mosquito, something_to_sit_on) => owes_money_to(mosquito, leopard)\n# Rule8: If you are positive that you saw one of the animals becomes an actual enemy of the dog, you can be certain that it will also steal five of the points of the panda bear.\nrule8(something) = actual_enemy(something, dog) => steal_points(something, 5, panda_bear)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n\n# The current state of the game is as follows\n# The canary is named Lily\nname(canary, Lily) = True\n# The mosquito is named Cinnamon\nname(mosquito, Cinnamon) = True\n# The zander learns the basics of resource management from the mosquito\nlearn_basics_of_resource_management(zander, mosquito) = True\n# The panda bear does not learn the basics of resource management from the crocodile\nnot learn_elementary_resource_management(panda_bear, crocodile) = True\n\n# Based on the game state and the rules and preferences, does the leopard become an enemy of the sea bass?\nquestion = enemy(leopard, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The sea bass burns the warehouse that is in possession of the kudu whenever at least one animal removes from the board one of the pieces of the viperfish\nRule2: The kudu does not eat the food of the cow, in the case where the sea bass burns the warehouse that is in possession of the kudu\nRule3: The zander unquestionably removes one of the pieces of the viperfish, in the case where the koala does not prepare armor for the zander.\n\nThe current state of the game is as follows\nThe koala does not prepare armor for the zander\n\nBased on the game state and the rules and preferences, does the kudu eat the food of the cow?\nQuestion: Does the kudu eat the food of the cow?",
        "idx": 79,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The sea bass burns the warehouse that is in possession of the kudu whenever at least one animal removes from the board one of the pieces of the viperfish\nrule1() = remove(something, piece_of(viperfish)) => burn(warehouse_of(kudu), sea_bass)\n# Rule2: The kudu does not eat the food of the cow, in the case where the sea bass burns the warehouse that is in possession of the kudu\nrule2() = burn(warehouse_of(kudu), sea_bass) => not eat_food(kudu, cow)\n# Rule3: The zander unquestionably removes one of the pieces of the viperfish, in the case where the koala does not prepare armor for the zander.\nrule3() = not prepare_armor(koala, zander) => remove(zander, piece_of(viperfish))\n\n# The current state of the game is as follows\n# The koala does not prepare armor for the zander\nnot prepare_armor(koala, zander) = True\n\n# Based on the game state and the rules and preferences, does the kudu eat the food of the cow?\nquestion = eat_food(kudu, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The koala eats the food of the squid, in the case where the panda bear does not proceed to the spot that is right after the spot of the koala\nRule2: If the snail winks at the octopus, then the octopus prepares armor for the polar bear\nRule3: If something rolls the dice for the parrot and holds the same number of points as the cat, then it does not proceed to the spot right after the koala\nRule4: The snail winks at the octopus whenever at least one animal rolls the dice for the canary\nRule5: The panda bear holds the same number of points as the cat, in the case where the turtle does not need support from the panda bear\nRule6: The panda bear proceeds to the spot that is right after the spot of the koala, in the case where the parrot prepares armor for the panda bear\nRule7: If the cockroach becomes an actual enemy of the panda bear, then the panda bear rolls the dice for the parrot\n\nRule6 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cockroach becomes an enemy of the panda bear\nThe kangaroo rolls the dice for the canary\nThe panda bear has some arugula\nThe panda bear lost her keys\nThe turtle needs support from the panda bear\n\nBased on the game state and the rules and preferences, does the koala eat the food of the squid?\nQuestion: Does the koala eat the food of the squid?",
        "idx": 80,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The koala unquestionably eats the food of the squid, in the case where the panda bear does not proceed to the spot that is right after the spot of the koala\nrule1() = not proceed(panda_bear, spot_right_after(spot_of(koala))) => eat_food(koala, squid)\n# Rule2: If the snail winks at the octopus, then the octopus prepares armor for the polar bear\nrule2() = wink(snail, octopus) => prepare_armor(octopus, polar_bear)\n# Rule3: If you see that something rolls the dice for the parrot and holds the same number of points as the cat, what can you certainly conclude? You can conclude that it does not proceed to the spot right after the koala\nrule3(something) = rolls_dice_for(something, parrot) & points(something) == points(cat) => not proceed(something, spot_right_after(spot_of(koala)))\n# Rule4: The snail winks at the octopus whenever at least one animal rolls the dice for the canary\nrule4() = rolls_dice_for(something, canary) => wink(snail, octopus)\n# Rule5: The panda bear unquestionably holds the same number of points as the cat, in the case where the turtle does not need support from the panda bear\nrule5() = not needs_support(turtle, panda_bear) => points(panda_bear) == points(cat)\n# Rule6: The panda bear unquestionably proceeds to the spot that is right after the spot of the koala, in the case where the parrot prepares armor for the panda bear\nrule6() = prepare_armor(parrot, panda_bear) => proceed(panda_bear, spot_right_after(spot_of(koala)))\n# Rule7: If the cockroach becomes an actual enemy of the panda bear, then the panda bear rolls the dice for the parrot.\nrule7() = enemy(cockroach, panda_bear) => rolls_dice_for(panda_bear, parrot)\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cockroach becomes an enemy of the panda bear\nenemy(cockroach, panda_bear) = True\n# The kangaroo rolls the dice for the canary\nrolls_dice_for(kangaroo, canary) = True\n# The panda bear has some arugula\nhas(panda_bear, arugula) = True\n# The panda bear lost her keys\nlost_keys(panda_bear) = True\n# The turtle needs support from the panda bear\nneeds_support(turtle, panda_bear) = True\n\n# Based on the game state and the rules and preferences, does the koala eat the food of the squid?\nquestion = eat_food(koala, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squid has more than one friend, then it does not need support from the kudu\nRule2: Be careful when something raises a flag of peace for the moose and also prepares armor for the starfish because in this case it will surely sing a song of victory for the parrot\nRule3: If at least one animal shows all her cards to the panther, then the bat raises a flag of peace for the moose\nRule4: The squid does not need support from the bat whenever at least one animal proceeds to the spot that is right after the spot of the sea bass\nRule5: If the turtle gives a magnifying glass to the bat and the squid needs the support of the bat, then the bat is not going to sing a song of victory for the parrot\nRule6: If at least one animal rolls the dice for the jellyfish, then the bat does not prepare armor for the starfish\nRule7: The bat does not give a magnifying glass to the grasshopper, in the case where the raven gives a magnifier to the bat\nRule8: If something does not give a magnifier to the grasshopper, then it prepares armor for the starfish\nRule9: If the elephant learns the basics of resource management from the gecko, then the gecko shows her cards to the panther\nRule10: If something does not need the support of the kudu, then it needs support from the bat\n\nRule4 is preferred over Rule10\nRule5 is preferred over Rule2\nRule6 is preferred over Rule8\n\nThe current state of the game is as follows\nThe elephant learns the basics of resource management from the gecko\nThe raven gives a magnifier to the bat\nThe squid has 1 loyal friend and 1 non-loyal friend\nThe squid reduced her work hours recently\n\nBased on the game state and the rules and preferences, does the bat sing a victory song for the parrot?\nQuestion: Does the bat sing a victory song for the parrot?",
        "idx": 81,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squid has more than one friend, then the squid does not need support from the kudu\nrule1() = friends(squid) > 1 => not need_support(squid, kudu)\n# Rule2: Be careful when something raises a flag of peace for the moose and also prepares armor for the starfish because in this case it will surely sing a song of victory for the parrot (this may or may not be problematic)\nrule2(something) = raise_flag_of_peace(something, moose) & prepare_armor(something, starfish) => sing_song(something, victory_song_for(parrot))\n# Rule3: If at least one animal shows all her cards to the panther, then the bat raises a flag of peace for the moose\nrule3() = show_cards(some_animal, panther) => raise_flag_of_peace(bat, moose)\n# Rule4: The squid does not need support from the bat whenever at least one animal proceeds to the spot that is right after the spot of the sea bass\nrule4() = proceed(some_animal, spot_right_after(spot_of(sea_bass))) => not need_support(squid, bat)\n# Rule5: For the bat, if the belief is that the turtle gives a magnifying glass to the bat and the squid needs the support of the bat, then you can add that \"the bat is not going to sing a song of victory for the parrot\" to your conclusions\nrule5() = give_magnifying_glass(turtle, bat) & need_support(squid, bat) => not sing_song(bat, victory_song_for(parrot))\n# Rule6: If at least one animal rolls the dice for the jellyfish, then the bat does not prepare armor for the starfish\nrule6() = roll_dice(some_animal, jellyfish) => not prepare_armor(bat, starfish)\n# Rule7: The bat does not give a magnifying glass to the grasshopper, in the case where the raven gives a magnifier to the bat\nrule7() = give_magnifying_glass(raven, bat) => not give_magnifying_glass(bat, grasshopper)\n# Rule8: If something does not give a magnifier to the grasshopper, then it prepares armor for the starfish\nrule8(something) = not give_magnifying_glass(something, grasshopper) => prepare_armor(something, starfish)\n# Rule9: If the elephant learns the basics of resource management from the gecko, then the gecko shows her cards (all of them) to the panther\nrule9() = learn_basics_of_resource_management(elephant, gecko) => show_cards(gecko, panther)\n# Rule10: If something does not need the support of the kudu, then it needs support from the bat.\nrule10(something) = not need_support(something, kudu) => need_support(something, bat)\n# Rule4 is preferred over Rule10\norder(rule4) > order(rule10) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule6 is preferred over Rule8\norder(rule6) > order(rule8) = True\n\n# The current state of the game is as follows\n# The elephant learns the basics of resource management from the gecko\nlearn_basics_of_resource_management(elephant, gecko) = True\n# The raven gives a magnifier to the bat\ngive_magnifying_glass(raven, bat) = True\n# The squid has 1 friend that is loyal and one friend that is not\nfriends(squid) = 2\n# The squid reduced her work hours recently\nreduce_work_hours(squid) = True\n\n# Based on the game state and the rules and preferences, does the bat sing a victory song for the parrot?\nquestion = sing_song(bat, victory_song_for(parrot))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo has a name whose first letter is the same as the first letter of the dog's name, then the buffalo eats the food that belongs to the kangaroo\nRule2: The kangaroo winks at the parrot, in the case where the meerkat rolls the dice for the kangaroo\nRule3: If at least one animal proceeds to the spot that is right after the spot of the salmon, then the kangaroo does not wink at the parrot\nRule4: The meerkat rolls the dice for the kangaroo, in the case where the aardvark needs support from the meerkat\nRule5: If the tiger has a sharp object, then it removes one of the pieces of the kangaroo\nRule6: If the penguin knows the defense plan of the kangaroo and the buffalo eats the food of the kangaroo, then the kangaroo will not show all her cards to the mosquito\nRule7: If the tiger removes one of the pieces of the kangaroo, then the kangaroo shows all her cards to the mosquito\nRule8: If the buffalo has more than twelve friends, then the buffalo eats the food of the kangaroo\nRule9: If something shows all her cards to the mosquito and winks at the parrot, then it does not remove one of the pieces of the panther\nRule10: If the tiger is a fan of Chris Ronaldo, then it removes one of the pieces of the kangaroo\n\nRule3 is preferred over Rule2\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe aardvark needs support from the meerkat\nThe buffalo has six friends and is named Cinnamon\nThe dog is named Charlie\nThe tiger has a violin\nThe tiger supports Chris Ronaldo\n\nBased on the game state and the rules and preferences, does the kangaroo remove from the board one of the pieces of the panther?\nQuestion: Does the kangaroo remove from the board one of the pieces of the panther?",
        "idx": 82,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the buffalo has a name whose first letter is the same as the first letter of the dog's name, then the buffalo eats the food that belongs to the kangaroo\nrule1() = first_letter_of(name(buffalo)) == first_letter_of(name(dog)) => eat_food(buffalo, food_of(kangaroo))\n# Rule2: The kangaroo unquestionably winks at the parrot, in the case where the meerkat rolls the dice for the kangaroo\nrule2() = roll_dice(meerkat, kangaroo) => wink(kangaroo, parrot)\n# Rule3: If at least one animal proceeds to the spot that is right after the spot of the salmon, then the kangaroo does not wink at the parrot\nrule3() = proceed_to_spot_right_after(spot_of(salmon), something) => not wink(kangaroo, parrot)\n# Rule4: The meerkat unquestionably rolls the dice for the kangaroo, in the case where the aardvark needs support from the meerkat\nrule4() = needs_support(aardvark, meerkat) => roll_dice(meerkat, kangaroo)\n# Rule5: Regarding the tiger, if it has a sharp object, then we can conclude that it removes one of the pieces of the kangaroo\nrule5() = has(tiger, sharp_object) => remove(tiger, piece_of(kangaroo))\n# Rule6: If the penguin knows the defense plan of the kangaroo and the buffalo eats the food of the kangaroo, then the kangaroo will not show her cards (all of them) to the mosquito\nrule6() = knows(defense_plan_of(kangaroo), penguin) & eat_food(buffalo, food_of(kangaroo)) => not show_cards(kangaroo, mosquito)\n# Rule7: If the tiger removes one of the pieces of the kangaroo, then the kangaroo shows all her cards to the mosquito\nrule7() = remove(tiger, piece_of(kangaroo)) => show_cards(kangaroo, mosquito)\n# Rule8: If the buffalo has more than twelve friends, then the buffalo eats the food of the kangaroo\nrule8() = friends(buffalo) > 12 => eat_food(buffalo, food_of(kangaroo))\n# Rule9: If you see that something shows her cards (all of them) to the mosquito and winks at the parrot, what can you certainly conclude? You can conclude that it does not remove one of the pieces of the panther\nrule9() = show_cards(something, mosquito) & wink(something, parrot) => not remove(something, piece_of(panther))\n# Rule10: If the tiger is a fan of Chris Ronaldo, then the tiger removes one of the pieces of the kangaroo.\nrule10() = fan_of(tiger, Chris_Ronaldo) => remove(tiger, piece_of(kangaroo))\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The aardvark needs support from the meerkat\nneeds_support(aardvark, meerkat) = True\n# The buffalo has six friends, and is named Cinnamon\nfriends(buffalo) = 6\nname(buffalo, Cinnamon) = True\n# The dog is named Charlie\nname(dog, Charlie) = True\n# The tiger has a violin\nhas(tiger, violin) = True\n# The tiger supports Chris Ronaldo\nsupports(tiger, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the kangaroo remove from the board one of the pieces of the panther?\nquestion = remove(kangaroo, piece_of(panther))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eel rolls the dice for the elephant and the meerkat sings a song of victory for the elephant, then the elephant learns elementary resource management from the swordfish\nRule2: If at least one animal owes money to the hippopotamus, then the eel rolls the dice for the elephant\nRule3: If the caterpillar has a card whose color starts with the letter \"b\", then the caterpillar prepares armor for the meerkat\nRule4: If one of the animals does not proceed to the spot that is right after the spot of the cricket, then it will not roll the dice for the elephant\nRule5: If the caterpillar has a name whose first letter is the same as the first letter of the kudu's name, then the caterpillar does not prepare armor for the meerkat\nRule6: If the caterpillar prepares armor for the meerkat, then the meerkat sings a victory song for the elephant\nRule7: The viperfish owes money to the hippopotamus whenever at least one animal steals five points from the polar bear\n\nRule2 is preferred over Rule4\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe caterpillar has a card that is blue in color\nThe caterpillar is named Casper\nThe kangaroo steals five points from the polar bear\nThe kudu is named Charlie\n\nBased on the game state and the rules and preferences, does the elephant learn the basics of resource management from the swordfish?\nQuestion: Does the elephant learn the basics of resource management from the swordfish?",
        "idx": 83,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eel rolls the dice for the elephant and the meerkat sings a song of victory for the elephant, then the elephant learns elementary resource management from the swordfish\nrule1() = roll_dice(eel, elephant) & sing_song(meerkat, victory_song_for(elephant)) => learn_elementary_resource_management(elephant, swordfish)\n# Rule2: If at least one animal owes money to the hippopotamus, then the eel rolls the dice for the elephant\nrule2() = owes_money_to(something, hippopotamus) => roll_dice(eel, elephant)\n# Rule3: If the caterpillar has a card whose color starts with the letter \"b\", then the caterpillar prepares armor for the meerkat\nrule3() = has(caterpillar, card_with(color_starting_with(\"b\"))) => prepare_armor(caterpillar, meerkat)\n# Rule4: If you are positive that one of the animals does not proceed to the spot that is right after the spot of the cricket, you can be certain that it will not roll the dice for the elephant\nrule4(something) = not proceed(something, spot_right_after(spot_of(cricket))) => not roll_dice(something, elephant)\n# Rule5: If the caterpillar has a name whose first letter is the same as the first letter of the kudu's name, then the caterpillar does not prepare armor for the meerkat\nrule5() = first_letter_of(name(caterpillar)) == first_letter_of(name(kudu)) => not prepare_armor(caterpillar, meerkat)\n# Rule6: If the caterpillar prepares armor for the meerkat, then the meerkat sings a victory song for the elephant\nrule6() = prepare_armor(caterpillar, meerkat) => sing_song(meerkat, victory_song_for(elephant))\n# Rule7: The viperfish owes $$$ to the hippopotamus whenever at least one animal steals five points from the polar bear.\nrule7() = steal_points(something, polar_bear, 5) => owes_money_to(viperfish, hippopotamus)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The caterpillar has a card that is blue in color\nhas(caterpillar, card_with(blue_color)) = True\n# The caterpillar is named Casper\nname(caterpillar, Casper) = True\n# The kangaroo steals five points from the polar bear\nsteal_points(kangaroo, polar_bear, 5) = True\n# The kudu is named Charlie\nname(kudu, Charlie) = True\n\n# Based on the game state and the rules and preferences, does the elephant learn the basics of resource management from the swordfish?\nquestion = learn_elementary_resource_management(elephant, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something attacks the green fields whose owner is the tiger but does not remove one of the pieces of the cricket because in this case it will surely attack the green fields of the octopus\nRule2: If you see one of the animals attack the green fields of the octopus, you can be certain that it will also burn the warehouse of the ferret\nRule3: If the moose has a card with a color that is one of the rainbow colors, then the moose does not remove one of the pieces of the cricket\nRule4: If at least one animal owes money to the amberjack, then the moose does not burn the warehouse of the ferret\nRule5: If the name of the moose starts with the same letter as the name of the lion, then the moose attacks the green fields whose owner is the tiger\n\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe lion is named Lucy\nThe moose has a card that is orange in color and is named Luna\n\nBased on the game state and the rules and preferences, does the moose burn the warehouse of the ferret?\nQuestion: Does the moose burn the warehouse of the ferret?",
        "idx": 84,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something attacks the green fields whose owner is the tiger but does not remove from the board one of the pieces of the cricket because in this case it will, surely, attack the green fields of the octopus (this may or may not be problematic)\nrule1(something) = attack_green_fields(something, tiger) & not remove(something, piece_of(cricket)) => attack_green_fields(something, octopus)\n# Rule2: If you are positive that you saw one of the animals attacks the green fields of the octopus, you can be certain that it will also burn the warehouse of the ferret\nrule2() = attack_green_fields(something, octopus) => burn(warehouse_of(ferret))\n# Rule3: If the moose has a card whose color is one of the rainbow colors, then the moose does not remove from the board one of the pieces of the cricket\nrule3() = has(moose, card) and color(card) in rainbow_colors => not remove(moose, piece_of(cricket))\n# Rule4: If at least one animal owes money to the amberjack, then the moose does not burn the warehouse of the ferret\nrule4() = owes_money_to(something, amberjack) => not burn(warehouse_of(ferret))\n# Rule5: Regarding the moose, if it has a name whose first letter is the same as the first letter of the lion's name, then we can conclude that it attacks the green fields whose owner is the tiger.\nrule5() = first_letter_of(name(moose)) == first_letter_of(name(lion)) => attack_green_fields(moose, tiger)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The lion is named Lucy\nname(lion, Lucy) = True\n# The moose has a card that is orange in color, and is named Luna\nhas(moose, card_with(orange_color)) = True\nname(moose, Luna) = True\n\n# Based on the game state and the rules and preferences, does the moose burn the warehouse of the ferret?\nquestion = burn(warehouse_of(ferret))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal becomes an actual enemy of the blobfish, then the bat eats the food that belongs to the tiger\nRule2: If something removes one of the pieces of the wolverine from the board, then it does not eat the food that belongs to the tiger\nRule3: The rabbit attacks the green fields of the bat whenever at least one animal steals five points from the salmon\nRule4: If the bat has a device to connect to the internet, then it does not remove one of the pieces of the wolverine from the board\nRule5: If the buffalo has more than 9 friends, then it steals five points from the salmon\nRule6: The buffalo will not steal five points from the salmon if the starfish does not prepare armor for the buffalo\nRule7: If something does not know the defense plan of the octopus, then it burns the warehouse of the doctorfish\nRule8: If the bat has more than twelve friends, then it does not know the defense plan of the octopus\nRule9: If something burns the warehouse of the doctorfish and eats the food that belongs to the tiger, then it does not sing a victory song for the jellyfish\nRule10: If the cat does not offer a job to the moose, then the moose becomes an actual enemy of the blobfish\nRule11: If the rabbit attacks the green fields owned by the bat and the kiwi eats the food of the bat, then the bat sings a victory song for the jellyfish\nRule12: If an animal does not raise a peace flag for the aardvark, then it removes one of the pieces of the wolverine\nRule13: If the bat has a name whose first letter is the same as the first letter of the sun bear's name, then the bat does not know the defense plan of the octopus\n\nRule1 is preferred over Rule2\nRule11 is preferred over Rule9\nRule12 is preferred over Rule4\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe bat has a card with yellow color\nThe bat has a knife\nThe bat invented a time machine\nThe bat has a cello\nThe bat has eight friends and does not raise a peace flag for the aardvark\nThe bat is named Pablo\nThe buffalo has eleven friends\nThe sun bear is named Paco\nThe cat does not offer a job to the moose\n\nBased on the game state and the rules and preferences, does the bat sing a victory song for the jellyfish?\nQuestion: Does the bat sing a victory song for the jellyfish?",
        "idx": 85,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal becomes an actual enemy of the blobfish, then the bat eats the food that belongs to the tiger\nrule1() = enemy(something, blobfish) => eat_food(bat, food_of(tiger))\n# Rule2: If something removes from the board one of the pieces of the wolverine, then it does not eat the food of the tiger\nrule2() = remove(something, piece_of(wolverine)) => not eat_food(something, food_of(tiger))\n# Rule3: The rabbit attacks the green fields of the bat whenever at least one animal steals five of the points of the salmon\nrule3() = steal_points(something, 5, salmon) => attack_fields(rabbit, green_fields_of(bat))\n# Rule4: If the bat has a device to connect to the internet, then the bat does not remove from the board one of the pieces of the wolverine\nrule4() = has(bat, connect_to_internet(device)) => not remove(bat, piece_of(wolverine))\n# Rule5: If the buffalo has more than 9 friends, then the buffalo steals five points from the salmon\nrule5() = friends(buffalo) > 9 => steal_points(buffalo, 5, salmon)\n# Rule6: The buffalo will not steal five points from the salmon, in the case where the starfish does not prepare armor for the buffalo\nrule6() = not prepare_armor(starfish, buffalo) => not steal_points(buffalo, 5, salmon)\n# Rule7: If something does not know the defense plan of the octopus, then it burns the warehouse of the doctorfish\nrule7() = not knows(defense_plan_of(octopus), something) => burn(warehouse_of(doctorfish), something)\n# Rule8: If the bat has more than twelve friends, then the bat does not know the defense plan of the octopus\nrule8() = friends(bat) > 12 => not knows(defense_plan_of(octopus), bat)\n# Rule9: Be careful when something burns the warehouse that is in possession of the doctorfish and also eats the food that belongs to the tiger because in this case it will surely not sing a victory song for the jellyfish (this may or may not be problematic)\nrule9(something) = burn(warehouse_of(doctorfish), something) & eat_food(something, food_of(tiger)) => not sing_song(something, victory_song_for(jellyfish))\n# Rule10: If the cat does not offer a job to the moose, then the moose becomes an actual enemy of the blobfish\nrule10() = not offer_job(cat, moose) => enemy(moose, blobfish)\n# Rule11: If the rabbit attacks the green fields whose owner is the bat and the kiwi eats the food of the bat, then the bat sings a song of victory for the jellyfish\nrule11() = attack_fields(rabbit, green_fields_of(bat)) & eat_food(kiwi, food_of(bat)) => sing_song(bat, victory_song_for(jellyfish))\n# Rule12: If you are positive that one of the animals does not raise a flag of peace for the aardvark, you can be certain that it will remove from the board one of the pieces of the wolverine without a doubt\nrule12(something) = not raise_flag_of_peace(something, aardvark) => remove(something, piece_of(wolverine))\n# Rule13: If the bat has a name whose first letter is the same as the first letter of the sun bear's name, then the bat does not know the defense plan of the octopus.\nrule13() = first_letter_of(name(bat)) == first_letter_of(name(sun_bear)) => not knows(defense_plan_of(octopus), bat)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule11 is preferred over Rule9\norder(rule11) > order(rule9) = True\n# Rule12 is preferred over Rule4\norder(rule12) > order(rule4) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The bat has a card that is yellow in color, has a knife, and invented a time machine\nhas(bat, card_with(yellow_color)) = True\nhas(bat, knife) = True\ninvented(bat, time_machine) = True\n# The bat has a cello\nhas(bat, cello) = True\n# The bat has eight friends, and does not raise a peace flag for the aardvark\nfriends(bat) = 8\nnot raise_flag_of_peace(bat, aardvark) = True\n# The bat is named Pablo\nname(bat, Pablo) = True\n# The buffalo has eleven friends\nfriends(buffalo) = 11\n# The sun bear is named Paco\nname(sun_bear, Paco) = True\n# The cat does not offer a job to the moose\nnot offer_job(cat, moose) = True\n\n# Based on the game state and the rules and preferences, does the bat sing a victory song for the jellyfish?\nquestion = sing_song(bat, victory_song_for(jellyfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The leopard owes money to the sea bass whenever at least one animal burns the warehouse of the kudu\nRule2: If something owes money to the sea bass, then it respects the donkey, too\nRule3: If the grizzly bear has a card with a primary color, then it raises a flag of peace for the penguin\nRule4: If the grizzly bear has a name whose first letter is the same as the first letter of the dog's name, then it raises a peace flag for the penguin\nRule5: The leopard does not owe money to the oscar whenever at least one animal steals five points from the penguin\nRule6: If something respects the donkey but does not owe money to the oscar, then it shows all her cards to the puffin\nRule7: If the snail does not steal five points from the oscar, then the oscar knocks down the fortress that belongs to the leopard\nRule8: If at least one animal raises a peace flag for the parrot, then the leopard does not show all her cards to the puffin\n\nRule8 is preferred over Rule6\n\nThe current state of the game is as follows\nThe dog is named Max\nThe grizzly bear has a card that is blue in color\nThe grizzly bear is named Pashmak\nThe tiger burns the warehouse of the kudu\nThe snail does not proceed to the spot right after the oscar\n\nBased on the game state and the rules and preferences, does the leopard show all her cards to the puffin?\nQuestion: Does the leopard show all her cards to the puffin?",
        "idx": 86,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The leopard owes $$$ to the sea bass whenever at least one animal burns the warehouse of the kudu\nrule1() = burn(warehouse_of(kudu), something) => owes_money_to(leopard, sea_bass)\n# Rule2: If something owes $$$ to the sea bass, then it respects the donkey, too\nrule2() = owes_money_to(something, sea_bass) => respects(something, donkey)\n# Rule3: Regarding the grizzly bear, if it has a card with a primary color, then we can conclude that it raises a flag of peace for the penguin\nrule3() = has(grizzly_bear, card_with(primary_color)) => raise_flag_of_peace(grizzly_bear, penguin)\n# Rule4: Regarding the grizzly bear, if it has a name whose first letter is the same as the first letter of the dog's name, then we can conclude that it raises a peace flag for the penguin\nrule4() = first_letter_of(name(grizzly_bear)) == first_letter_of(name(dog)) => raise_flag_of_peace(grizzly_bear, penguin)\n# Rule5: The leopard does not owe money to the oscar whenever at least one animal steals five points from the penguin\nrule5() = steal_points_from(penguin, something, 5) => not owes_money_to(leopard, oscar)\n# Rule6: If you see that something respects the donkey but does not owe $$$ to the oscar, what can you certainly conclude? You can conclude that it shows all her cards to the puffin\nrule6(something) = respects(something, donkey) & not owes_money_to(something, oscar) => show_cards(something, puffin)\n# Rule7: If the snail does not steal five of the points of the oscar, then the oscar knocks down the fortress that belongs to the leopard\nrule7() = not steal_points_from(oscar, snail, 5) => knock_down(fortress_of(leopard), oscar)\n# Rule8: If at least one animal raises a peace flag for the parrot, then the leopard does not show her cards (all of them) to the puffin.\nrule8() = raise_flag_of_peace(something, parrot) => not show_cards(leopard, puffin)\n# Rule8 is preferred over Rule6\norder(rule8) > order(rule6) = True\n\n# The current state of the game is as follows\n# The dog is named Max\nname(dog, Max) = True\n# The grizzly bear has a card that is blue in color\nhas(grizzly_bear, card_with(blue_color)) = True\n# The grizzly bear is named Pashmak\nname(grizzly_bear, Pashmak) = True\n# The tiger burns the warehouse of the kudu\nburn(warehouse_of(kudu), tiger) = True\n# The snail does not proceed to the spot right after the oscar\nnot proceed(snail, spot_right_after(spot_of(oscar))) = True\n\n# Based on the game state and the rules and preferences, does the leopard show all her cards to the puffin?\nquestion = show_cards(leopard, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something steals five of the points of the cow, then it does not respect the kudu\nRule2: If something sings a victory song for the jellyfish but does not respect the kudu, then it raises a flag of peace for the blobfish\nRule3: If the baboon removes one of the pieces of the leopard, then the leopard does not respect the zander\nRule4: If the cheetah gives a magnifier to the zander, then the zander steals five of the points of the cow\nRule5: If the zander has more than ten friends, then it does not steal five points from the cow\nRule6: If the zander has a card with a primary color, then it does not steal five points from the cow\nRule7: The kangaroo does not remove one of the pieces of the zander whenever at least one animal sings a song of victory for the phoenix\nRule8: The phoenix will not know the defense plan of the zander, in the case where the panda bear does not become an actual enemy of the phoenix\nRule9: If the kangaroo does not remove one of the pieces of the zander, then the zander sings a victory song for the jellyfish\nRule10: If one of the animals becomes an actual enemy of the polar bear, then it will not become an enemy of the phoenix\nRule11: If the baboon has something to carry apples and oranges, then the baboon removes one of the pieces of the leopard\nRule12: The baboon does not remove one of the pieces of the leopard, in the case where the squirrel prepares armor for the baboon\nRule13: If at least one animal owes money to the lobster, then the zander respects the kudu\nRule14: If the koala does not respect the zander, then the zander does not sing a victory song for the jellyfish\n\nRule12 is preferred over Rule11\nRule13 is preferred over Rule1\nRule14 is preferred over Rule9\nRule5 is preferred over Rule4\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe baboon has a plastic bag\nThe caterpillar sings a victory song for the phoenix\nThe cheetah gives a magnifier to the zander\nThe panda bear becomes an enemy of the polar bear\nThe zander has a card that is yellow in color\n\nBased on the game state and the rules and preferences, does the zander raise a peace flag for the blobfish?\nQuestion: Does the zander raise a peace flag for the blobfish?",
        "idx": 87,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something steals five of the points of the cow, then it does not respect the kudu\nrule1() = steal_points(something, cow, 5) => not respects(something, kudu)\n# Rule2: Be careful when something sings a victory song for the jellyfish but does not respect the kudu because in this case it will, surely, raise a flag of peace for the blobfish (this may or may not be problematic)\nrule2() = sing_song(something, victory_song_for(jellyfish)) & not respects(something, kudu) => raise_flag_of_peace(something, blobfish)\n# Rule3: If the baboon removes from the board one of the pieces of the leopard, then the leopard is not going to respect the zander\nrule3() = remove(baboon, piece_of(leopard)) => not respects(leopard, zander)\n# Rule4: If the cheetah gives a magnifier to the zander, then the zander steals five of the points of the cow\nrule4() = give(cheetah, magnifier, zander) => steal_points(zander, cow, 5)\n# Rule5: Regarding the zander, if it has more than ten friends, then we can conclude that it does not steal five points from the cow\nrule5() = friends(zander) > 10 => not steal_points(zander, cow, 5)\n# Rule6: Regarding the zander, if it has a card with a primary color, then we can conclude that it does not steal five points from the cow\nrule6() = has(zander, card_with(primary_color)) => not steal_points(zander, cow, 5)\n# Rule7: The kangaroo does not remove one of the pieces of the zander whenever at least one animal sings a song of victory for the phoenix\nrule7() = sing_song(animal, victory_song_for(phoenix)) => not remove(kangaroo, piece_of(zander))\n# Rule8: The phoenix will not know the defense plan of the zander, in the case where the panda bear does not become an actual enemy of the phoenix\nrule8() = not become_enemy(panda_bear, phoenix) => not knows(defense_plan_of(zander), phoenix)\n# Rule9: If the kangaroo does not remove one of the pieces of the zander, then the zander sings a victory song for the jellyfish\nrule9() = not remove(kangaroo, piece_of(zander)) => sing_song(zander, victory_song_for(jellyfish))\n# Rule10: If you are positive that you saw one of the animals becomes an actual enemy of the polar bear, you can be certain that it will not become an enemy of the phoenix\nrule10(animal) = become_enemy(animal, polar_bear) => not become_enemy(animal, phoenix)\n# Rule11: If the baboon has something to carry apples and oranges, then the baboon removes one of the pieces of the leopard\nrule11() = has(baboon, carry_apples_and_oranges) => remove(baboon, piece_of(leopard))\n# Rule12: The baboon does not remove from the board one of the pieces of the leopard, in the case where the squirrel prepares armor for the baboon\nrule12() = prepare_armor(squirrel, baboon) => not remove(baboon, piece_of(leopard))\n# Rule13: If at least one animal owes money to the lobster, then the zander respects the kudu\nrule13() = owes_money_to(animal, lobster) => respects(zander, kudu)\n# Rule14: If the koala does not respect the zander, then the zander does not sing a victory song for the jellyfish.\nrule14() = not respects(koala, zander) => not sing_song(zander, victory_song_for(jellyfish))\n# Rule12 is preferred over Rule11\norder(rule12) > order(rule11) = True\n# Rule13 is preferred over Rule1\norder(rule13) > order(rule1) = True\n# Rule14 is preferred over Rule9\norder(rule14) > order(rule9) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The baboon has a plastic bag\nhas(baboon, plastic_bag) = True\n# The caterpillar sings a victory song for the phoenix\nsing_song(caterpillar, victory_song_for(phoenix)) = True\n# The cheetah gives a magnifier to the zander\ngive(cheetah, magnifier, zander) = True\n# The panda bear becomes an enemy of the polar bear\nbecome_enemy(panda_bear, polar_bear) = True\n# The zander has a card that is yellow in color\nhas(zander, card_with(yellow_color)) = True\n\n# Based on the game state and the rules and preferences, does the zander raise a peace flag for the blobfish?\nquestion = raise_flag_of_peace(zander, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion steals five points from the squid, then the squid sings a victory song for the cricket\nRule2: Be careful when something does not attack the green fields owned by the crocodile but raises a peace flag for the raven because in this case it certainly does not knock down the fortress of the hare\nRule3: If at least one animal sings a victory song for the cricket, then the cow does not attack the green fields of the crocodile\nRule4: If the grasshopper shows all her cards to the oscar and the amberjack does not roll the dice for the oscar, then the oscar sings a song of victory for the caterpillar\nRule5: If at least one animal attacks the green fields of the swordfish, then the aardvark knows the defense plan of the cow\nRule6: The cow raises a peace flag for the raven whenever at least one animal sings a song of victory for the caterpillar\nRule7: The cow does not raise a peace flag for the raven, in the case where the panda bear knows the defensive plans of the cow\n\nRule7 is preferred over Rule6\n\nThe current state of the game is as follows\nThe crocodile attacks the green fields owned by the swordfish\nThe grasshopper shows all her cards to the oscar\nThe lion steals five points from the squid\nThe oscar eats the food of the tiger\nThe amberjack does not roll the dice for the oscar\n\nBased on the game state and the rules and preferences, does the cow knock down the fortress of the hare?\nQuestion: Does the cow knock down the fortress of the hare?",
        "idx": 88,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The squid unquestionably sings a victory song for the cricket, in the case where the lion steals five points from the squid\nrule1() = steal_points(lion, squid, 5) => sing_song(squid, victory_song_for(cricket))\n# Rule2: Be careful when something does not attack the green fields whose owner is the crocodile but raises a peace flag for the raven because in this case it certainly does not knock down the fortress of the hare (this may or may not be problematic)\nrule2(something) = not attack(something, green_fields_of(crocodile)) & raise_flag_of_peace(something, raven) => not knock_down(something, fortress_of(hare))\n# Rule3: If at least one animal sings a victory song for the cricket, then the cow does not attack the green fields of the crocodile\nrule3() = sing_song(something, victory_song_for(cricket)) => not attack(cow, green_fields_of(crocodile))\n# Rule4: If the grasshopper shows all her cards to the oscar and the amberjack does not roll the dice for the oscar, then, inevitably, the oscar sings a song of victory for the caterpillar\nrule4() = show_cards(grasshopper, oscar) & not roll_dice(amberjack, oscar) => sing_song(oscar, victory_song_for(caterpillar))\n# Rule5: If at least one animal attacks the green fields of the swordfish, then the aardvark knows the defense plan of the cow\nrule5() = attack(something, green_fields_of(swordfish)) => knows_defense_plan(aardvark, cow)\n# Rule6: The cow raises a flag of peace for the raven whenever at least one animal sings a song of victory for the caterpillar\nrule6() = sing_song(something, victory_song_for(caterpillar)) => raise_flag_of_peace(cow, raven)\n# Rule7: The cow does not raise a peace flag for the raven, in the case where the panda bear knows the defensive plans of the cow.\nrule7() = knows_defensive_plans(panda_bear, cow) => not raise_flag_of_peace(cow, raven)\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n\n# The current state of the game is as follows\n# The crocodile attacks the green fields whose owner is the swordfish\nattack(crocodile, green_fields_of(swordfish)) = True\n# The grasshopper shows all her cards to the oscar\nshow_cards(grasshopper, oscar) = True\n# The lion steals five points from the squid\nsteal_points(lion, squid, 5) = True\n# The oscar eats the food of the tiger\neat_food(oscar, tiger) = True\n# The amberjack does not roll the dice for the oscar\nnot roll_dice(amberjack, oscar) = True\n\n# Based on the game state and the rules and preferences, does the cow knock down the fortress of the hare?\nquestion = knock_down(cow, fortress_of(hare))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panda bear has a name whose first letter is the same as the first letter of the sea bass's name, then the panda bear does not prepare armor for the whale\nRule2: If the panda bear works fewer hours than before, then it prepares armor for the whale\nRule3: If something winks at the sheep but does not become an enemy of the carp, then it will knock down the fortress of the whale\nRule4: If something respects the doctorfish, then it holds an equal number of points as the lion\nRule5: If something knocks down the fortress of the whale, then it needs support from the kudu\nRule6: If the lion becomes an enemy of the kudu, then the kudu proceeds to the spot right after the penguin\nRule7: If the amberjack holds an equal number of points as the lion, then the lion becomes an enemy of the kudu\nRule8: If the oscar has fewer than seventeen friends, then it winks at the mosquito\nRule9: If the panda bear prepares armor for the whale, then the whale knocks down the fortress of the kudu\nRule10: If something holds the same number of points as the cricket, then it does not knock down the fortress of the kudu\nRule11: If the elephant needs the support of the kudu and the whale knocks down the fortress of the kudu, then the kudu does not proceed to the spot right after the penguin\nRule12: If the oscar voted for the mayor, then it winks at the mosquito\n\nRule1 is preferred over Rule2\nRule10 is preferred over Rule9\nRule11 is preferred over Rule6\n\nThe current state of the game is as follows\nThe amberjack respects the doctorfish\nThe elephant winks at the sheep\nThe oscar has 12 friends\nThe oscar parked her bike in front of the store\nThe panda bear is named Milo\nThe panda bear reduced her work hours recently\nThe sea bass is named Mojo\nThe elephant does not become an enemy of the carp\n\nBased on the game state and the rules and preferences, does the kudu proceed to the spot right after the penguin?\nQuestion: Does the kudu proceed to the spot right after the penguin?",
        "idx": 89,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panda bear has a name whose first letter is the same as the first letter of the sea bass's name, then the panda bear does not prepare armor for the whale\nrule1() = first_letter_of(name(panda_bear)) == first_letter_of(name(sea_bass)) => not prepare_armor(panda_bear, whale)\n# Rule2: Regarding the panda bear, if it works fewer hours than before, then we can conclude that it prepares armor for the whale\nrule2() = reduce_work_hours(panda_bear) => prepare_armor(panda_bear, whale)\n# Rule3: Be careful when something winks at the sheep but does not become an enemy of the carp because in this case it will, surely, knock down the fortress of the whale (this may or may not be problematic)\nrule3(something) = wink_at(something, sheep) & not enemy(something, carp) => knock_down_fortress(something, whale)\n# Rule4: If you are positive that you saw one of the animals respects the doctorfish, you can be certain that it will also hold an equal number of points as the lion\nrule4(something) = respects(something, doctorfish) => points(something) == points(lion)\n# Rule5: If something knocks down the fortress of the whale, then it needs support from the kudu, too\nrule5(something) = knock_down_fortress(something, whale) => needs_support(something, kudu)\n# Rule6: If the lion becomes an actual enemy of the kudu, then the kudu proceeds to the spot right after the penguin\nrule6() = enemy(lion, kudu) => proceed(kudu, spot_right_after(spot_of(penguin)))\n# Rule7: The lion unquestionably becomes an enemy of the kudu, in the case where the amberjack holds an equal number of points as the lion\nrule7() = points(amberjack) == points(lion) => enemy(lion, kudu)\n# Rule8: Regarding the oscar, if it has fewer than seventeen friends, then we can conclude that it winks at the mosquito\nrule8() = friends(oscar) < 17 => wink_at(oscar, mosquito)\n# Rule9: The whale unquestionably knocks down the fortress that belongs to the kudu, in the case where the panda bear prepares armor for the whale\nrule9() = prepare_armor(panda_bear, whale) => knock_down_fortress(whale, kudu)\n# Rule10: If you are positive that you saw one of the animals holds the same number of points as the cricket, you can be certain that it will not knock down the fortress that belongs to the kudu\nrule10(something) = points(something) == points(cricket) => not knock_down_fortress(something, kudu)\n# Rule11: For the kudu, if the belief is that the elephant needs the support of the kudu and the whale knocks down the fortress that belongs to the kudu, then you can add that \"the kudu is not going to proceed to the spot that is right after the spot of the penguin\" to your conclusions\nrule11() = needs_support(elephant, kudu) & knock_down_fortress(whale, kudu) => not proceed(kudu, spot_right_after(spot_of(penguin)))\n# Rule12: If the oscar voted for the mayor, then the oscar winks at the mosquito.\nrule12() = voted_for(oscar, mayor) => wink_at(oscar, mosquito)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule10 is preferred over Rule9\norder(rule10) > order(rule9) = True\n# Rule11 is preferred over Rule6\norder(rule11) > order(rule6) = True\n\n# The current state of the game is as follows\n# The amberjack respects the doctorfish\nrespects(amberjack, doctorfish) = True\n# The elephant winks at the sheep\nwink_at(elephant, sheep) = True\n# The oscar has 12 friends\nfriends(oscar) = 12\n# The oscar parked her bike in front of the store\nparked_bike(oscar, front_of(store)) = True\n# The panda bear is named Milo\nname(panda_bear, Milo) = True\n# The panda bear reduced her work hours recently\nreduce_work_hours(panda_bear) = True\n# The sea bass is named Mojo\nname(sea_bass, Mojo) = True\n# The elephant does not become an enemy of the carp\nnot enemy(elephant, carp) = True\n\n# Based on the game state and the rules and preferences, does the kudu proceed to the spot right after the penguin?\nquestion = proceed(kudu, spot_right_after(spot_of(penguin)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon has a card with a primary color, then it eats the food that belongs to the panther\nRule2: If the baboon has fewer than three friends, then it eats the food of the panther\nRule3: If the canary does not have her keys, then the canary prepares armor for the rabbit\nRule4: If the rabbit has a high-quality paper, then it needs support from the catfish\nRule5: The kudu does not offer a job to the moose whenever at least one animal eats the food that belongs to the panther\nRule6: If the canary has a card whose color is one of the rainbow colors, then the canary prepares armor for the rabbit\nRule7: If the kudu has a name whose first letter is the same as the first letter of the doctorfish's name, then it learns elementary resource management from the kangaroo\nRule8: If the kudu has a card whose color is one of the rainbow colors, then it learns elementary resource management from the kangaroo\nRule9: If something does not become an actual enemy of the koala but needs the support of the catfish, then it shows all its cards to the moose\nRule10: If at least one animal steals five points from the donkey, then the rabbit does not become an actual enemy of the koala\nRule11: If the kudu does not offer a job position to the moose but the rabbit shows all her cards to the moose, then the moose needs support from the goldfish\n\nThe current state of the game is as follows\nThe baboon has a card that is red in color\nThe baboon has six easy-going friends and three non-easy-going friends\nThe canary has a card that is yellow in color and is holding her keys\nThe canary proceeds to the spot right after the bat\nThe cow steals five points from the donkey\nThe doctorfish is named Lily\nThe halibut offers a job to the jellyfish\nThe kudu has a card that is black in color\nThe kudu is named Luna\nThe rabbit published a high-quality paper\n\nBased on the game state and the rules and preferences, does the moose need support from the goldfish?\nQuestion: Does the moose need support from the goldfish?",
        "idx": 90,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the baboon, if it has a card with a primary color, then we can conclude that it eats the food that belongs to the panther\nrule1() = has(baboon, card_with(primary_color)) => eats_food(baboon, food_of(panther))\n# Rule2: If the baboon has fewer than three friends, then the baboon eats the food of the panther\nrule2() = friends(baboon, easy_going) < 3 => eats_food(baboon, food_of(panther))\n# Rule3: If the canary does not have her keys, then the canary prepares armor for the rabbit\nrule3() = not has(canary, keys) => prepare_armor(canary, rabbit)\n# Rule4: Regarding the rabbit, if it has a high-quality paper, then we can conclude that it needs support from the catfish\nrule4() = has(rabbit, high_quality_paper) => needs_support(rabbit, catfish)\n# Rule5: The kudu does not offer a job to the moose whenever at least one animal eats the food that belongs to the panther\nrule5() = exists(animal, eats_food(animal, food_of(panther))) => not offer_job_position(kudu, moose)\n# Rule6: If the canary has a card whose color is one of the rainbow colors, then the canary prepares armor for the rabbit\nrule6() = has(canary, card_with(color_in(rainbow_colors))) => prepare_armor(canary, rabbit)\n# Rule7: Regarding the kudu, if it has a name whose first letter is the same as the first letter of the doctorfish's name, then we can conclude that it learns elementary resource management from the kangaroo\nrule7() = first_letter_of(name(kudu)) == first_letter_of(name(doctorfish)) => learn_elementary_resource_management(kudu, kangaroo)\n# Rule8: Regarding the kudu, if it has a card whose color is one of the rainbow colors, then we can conclude that it learns elementary resource management from the kangaroo\nrule8() = has(kudu, card_with(color_in(rainbow_colors))) => learn_elementary_resource_management(kudu, kangaroo)\n# Rule9: Be careful when something does not become an actual enemy of the koala but needs the support of the catfish because in this case it will, surely, show all her cards to the moose (this may or may not be problematic)\nrule9(something) = not actual_enemy(something, koala) & needs_support(something, catfish) => show_cards(something, moose)\n# Rule10: If at least one animal steals five points from the donkey, then the rabbit does not become an actual enemy of the koala\nrule10() = exists(animal, steals_points_from(animal, donkey, 5)) => not actual_enemy(rabbit, koala)\n# Rule11: If the kudu does not offer a job position to the moose but the rabbit shows her cards (all of them) to the moose, then the moose needs support from the goldfish unavoidably.\nrule11() = not offer_job_position(kudu, moose) & show_cards(rabbit, moose) => needs_support(moose, goldfish)\n\n# The current state of the game is as follows\n# The baboon has a card that is red in color\nhas(baboon, card_with(red_color)) = True\n# The baboon has six friends that are easy going and three friends that are not\nfriends(baboon, easy_going) = 6\n# The canary has a card that is yellow in color, and is holding her keys\nhas(canary, card_with(yellow_color)) = True\nhas(canary, keys) = True\n# The canary proceeds to the spot right after the bat\nproceed(canary, spot_right_after(spot_of(bat))) = True\n# The cow steals five points from the donkey\nsteals_points_from(cow, donkey, 5) = True\n# The doctorfish is named Lily\nname(doctorfish, Lily) = True\n# The halibut offers a job to the jellyfish\noffer_job_position(halibut, jellyfish) = True\n# The kudu has a card that is black in color\nhas(kudu, card_with(black_color)) = True\n# The kudu is named Luna\nname(kudu, Luna) = True\n# The rabbit published a high-quality paper\npublished_high_quality_paper(rabbit) = True\n\n# Based on the game state and the rules and preferences, does the moose need support from the goldfish?\nquestion = needs_support(moose, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion has a name whose first letter is the same as the first letter of the snail's name, then it shows all her cards to the rabbit\nRule2: If the moose has a card whose color appears in the flag of Belgium, then it does not owe money to the rabbit\nRule3: If the sea bass burns the warehouse of the moose and the kangaroo holds the same number of points as the moose, then the moose owes money to the rabbit\nRule4: The rabbit unquestionably knows the defense plan of the starfish, in the case where the lion shows all her cards to the rabbit\nRule5: If something sings a victory song for the tiger, then it gives a magnifying glass to the wolverine\nRule6: The starfish needs support from the grasshopper whenever at least one animal gives a magnifying glass to the wolverine\nRule7: The starfish does not offer a job to the caterpillar, in the case where the rabbit knows the defense plan of the starfish\nRule8: If the moose has more than 5 friends, then it does not owe money to the rabbit\nRule9: If the kiwi does not know the defense plan of the starfish, then the starfish does not need support from the grasshopper\n\nRule3 is preferred over Rule2\nRule3 is preferred over Rule8\nRule9 is preferred over Rule6\n\nThe current state of the game is as follows\nThe lion is named Lucy\nThe moose has 3 playful friends and 4 not playful friends\nThe moose has a card that is blue in color\nThe pig sings a victory song for the tiger\nThe sea bass burns the warehouse of the moose\nThe snail is named Lola\nThe pig does not show all her cards to the canary\n\nBased on the game state and the rules and preferences, does the starfish offer a job to the caterpillar?\nQuestion: Does the starfish offer a job to the caterpillar?",
        "idx": 91,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the lion, if it has a name whose first letter is the same as the first letter of the snail's name, then we can conclude that it shows her cards (all of them) to the rabbit\nrule1() = first_letter_of(name(lion)) == first_letter_of(name(snail)) => show_cards(lion, rabbit)\n# Rule2: Regarding the moose, if it has a card whose color appears in the flag of Belgium, then we can conclude that it does not owe $$$ to the rabbit\nrule2() = has(moose, card_with(color)) & color in colors_of(flag_of(Belgium)) => not owes_money_to(moose, rabbit)\n# Rule3: If the sea bass burns the warehouse that is in possession of the moose and the kangaroo holds the same number of points as the moose, then the moose owes $$$ to the rabbit\nrule3() = burn(warehouse_of(moose), sea_bass) & points(kangaroo) == points(moose) => owes_money_to(moose, rabbit)\n# Rule4: The rabbit unquestionably knows the defense plan of the starfish, in the case where the lion shows her cards (all of them) to the rabbit\nrule4() = show_cards(lion, rabbit) => knows(defense_plan_of(starfish), rabbit)\n# Rule5: If something sings a song of victory for the tiger, then it gives a magnifying glass to the wolverine, too\nrule5(something) = sing_song(something, victory_song_for(tiger)) => give(something, magnifying_glass, wolverine)\n# Rule6: The starfish needs support from the grasshopper whenever at least one animal gives a magnifier to the wolverine\nrule6() = give(something, magnifying_glass, wolverine) => needs_support(starfish, grasshopper)\n# Rule7: The starfish does not offer a job to the caterpillar, in the case where the rabbit knows the defense plan of the starfish\nrule7() = knows(defense_plan_of(starfish), rabbit) => not offer_job(starfish, caterpillar)\n# Rule8: If the moose has more than 5 friends, then the moose does not owe $$$ to the rabbit\nrule8() = friends(moose) > 5 => not owes_money_to(moose, rabbit)\n# Rule9: If the kiwi does not know the defense plan of the starfish, then the starfish does not need support from the grasshopper.\nrule9() = not knows(defense_plan_of(starfish), kiwi) => not needs_support(starfish, grasshopper)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule3 is preferred over Rule8\norder(rule3) > order(rule8) = True\n# Rule9 is preferred over Rule6\norder(rule9) > order(rule6) = True\n\n# The current state of the game is as follows\n# The lion is named Lucy\nname(lion, Lucy) = True\n# The moose has 3 friends that are playful and 4 friends that are not\nfriends(moose, playful) = 3\nfriends(moose, not_playful) = 4\n# The moose has a card that is blue in color\nhas(moose, card_with(blue_color)) = True\n# The pig sings a victory song for the tiger\nsing_song(pig, victory_song_for(tiger)) = True\n# The sea bass burns the warehouse of the moose\nburn(warehouse_of(moose), sea_bass) = True\n# The snail is named Lola\nname(snail, Lola) = True\n# The pig does not show all her cards to the canary\nnot show_cards(pig, canary) = True\n\n# Based on the game state and the rules and preferences, does the starfish offer a job to the caterpillar?\nquestion = offer_job(starfish, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The carp unquestionably owes money to the panda bear, in the case where the viperfish does not eat the food that belongs to the carp\nRule2: If the phoenix winks at the viperfish and the halibut attacks the green fields of the viperfish, then the viperfish will not raise a peace flag for the spider\nRule3: If something does not raise a peace flag for the spider, then it does not eat the food that belongs to the carp.\n\nThe current state of the game is as follows\nThe halibut attacks the green fields whose owner is the viperfish\nThe phoenix does not wink at the viperfish\n\nBased on the game state and the rules and preferences, does the carp owe money to the panda bear?\nQuestion: Does the carp owe money to the panda bear?",
        "idx": 92,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The carp unquestionably owes money to the panda bear, in the case where the viperfish does not eat the food that belongs to the carp\nrule1() = not eat_food(viperfish, food_of(carp)) => owes_money_to(carp, panda_bear)\n# Rule2: If the phoenix winks at the viperfish and the halibut attacks the green fields of the viperfish, then the viperfish will not raise a peace flag for the spider\nrule2() = wink(phoenix, viperfish) & attack(halibut, green_fields_of(viperfish)) => not raise_flag_of_peace(viperfish, spider)\n# Rule3: If something does not raise a peace flag for the spider, then it does not eat the food that belongs to the carp.\nrule3(something) = not raise_flag_of_peace(something, spider) => not eat_food(something, food_of(carp))\n\n# The current state of the game is as follows\n# The halibut attacks the green fields whose owner is the viperfish\nattack(halibut, green_fields_of(viperfish)) = True\n# The phoenix does not wink at the viperfish\nwink(phoenix, viperfish) = False\n\n# Based on the game state and the rules and preferences, does the carp owe money to the panda bear?\nquestion = owes_money_to(carp, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal gives a magnifying glass to the sheep, then the zander needs the support of the meerkat\nRule2: If something does not eat the food that belongs to the halibut, then it gives a magnifying glass to the sheep\nRule3: If something needs the support of the meerkat, then it burns the warehouse that is in possession of the jellyfish\n\nThe current state of the game is as follows\nThe tiger does not eat the food of the halibut\n\nBased on the game state and the rules and preferences, does the zander burn the warehouse of the jellyfish?\nQuestion: Does the zander burn the warehouse of the jellyfish?",
        "idx": 93,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal gives a magnifying glass to the sheep, then the zander needs the support of the meerkat\nrule1() = give_magnifying_glass(something, sheep) => needs_support(zander, meerkat)\n# Rule2: If something does not eat the food that belongs to the halibut, then it gives a magnifying glass to the sheep\nrule2() = not eat_food(something, food_of(halibut)) => give_magnifying_glass(something, sheep)\n# Rule3: If something needs the support of the meerkat, then it burns the warehouse that is in possession of the jellyfish, too.\nrule3() = needs_support(something, meerkat) => burn(warehouse_of(jellyfish), something)\n\n# The current state of the game is as follows\n# The tiger does not eat the food of the halibut\nnot eat_food(tiger, food_of(halibut)) = True\n\n# Based on the game state and the rules and preferences, does the zander burn the warehouse of the jellyfish?\nquestion = burn(warehouse_of(jellyfish), zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The mosquito does not show all her cards to the moose whenever at least one animal gives a magnifying glass to the carp\nRule2: Be careful when something does not prepare armor for the octopus but owes money to the snail because in this case it certainly does not learn the basics of resource management from the moose\nRule3: If at least one animal winks at the ferret, then the zander does not know the defensive plans of the goldfish\nRule4: If the mosquito does not show all her cards to the moose but the rabbit learns elementary resource management from the moose, then the moose winks at the ferret unavoidably\nRule5: If the rabbit has a card whose color appears in the flag of France, then it learns elementary resource management from the moose\nRule6: If the cockroach respects the zander, then the zander knows the defensive plans of the goldfish\nRule7: If the rabbit does not have her keys, then it learns the basics of resource management from the moose\n\nRule5 is preferred over Rule2\nRule6 is preferred over Rule3\nRule7 is preferred over Rule2\n\nThe current state of the game is as follows\nThe kiwi is named Beauty\nThe mosquito is named Buddy and parked her bike in front of the store\nThe rabbit has a card that is white in color and is holding her keys\nThe rabbit owes money to the snail\nThe tiger gives a magnifier to the carp\nThe rabbit does not prepare armor for the octopus\n\nBased on the game state and the rules and preferences, does the zander know the defensive plans of the goldfish?\nQuestion: Does the zander know the defensive plans of the goldfish?",
        "idx": 94,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The mosquito does not show her cards (all of them) to the moose whenever at least one animal gives a magnifying glass to the carp\nrule1() = give(magnifying_glass, carp) => not show_cards(mosquito, moose)\n# Rule2: Be careful when something does not prepare armor for the octopus but owes $$$ to the snail because in this case it certainly does not learn the basics of resource management from the moose (this may or may not be problematic)\nrule2(something) = not prepare_armor(something, octopus) & owes_money_to(something, snail) => not learn_basics_of_resource_management(something, moose)\n# Rule3: If at least one animal winks at the ferret, then the zander does not know the defensive plans of the goldfish\nrule3() = wink_at(ferret, something) => not knows(defensive_plans_of(goldfish), zander)\n# Rule4: If the mosquito does not show all her cards to the moose but the rabbit learns elementary resource management from the moose, then the moose winks at the ferret unavoidably\nrule4() = not show_all_cards(mosquito, moose) & learn_elementary_resource_management(rabbit, moose) => wink_at(ferret, moose)\n# Rule5: Regarding the rabbit, if it has a card whose color appears in the flag of France, then we can conclude that it learns elementary resource management from the moose\nrule5() = has(rabbit, card_with(color_in_flag_of_france)) => learn_elementary_resource_management(rabbit, moose)\n# Rule6: If the cockroach respects the zander, then the zander knows the defensive plans of the goldfish\nrule6() = respects(cockroach, zander) => knows(defensive_plans_of(goldfish), zander)\n# Rule7: Regarding the rabbit, if it does not have her keys, then we can conclude that it learns the basics of resource management from the moose.\nrule7() = not has(rabbit, keys) => learn_basics_of_resource_management(rabbit, moose)\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n\n# The current state of the game is as follows\n# The kiwi is named Beauty\nname(kiwi, Beauty) = True\n# The mosquito is named Buddy, and parked her bike in front of the store\nname(mosquito, Buddy) = True\npark_bike(mosquito, in_front_of(store)) = True\n# The rabbit has a card that is white in color, and is holding her keys\nhas(rabbit, card_with(white_color)) = True\nhas(rabbit, keys) = True\n# The rabbit owes money to the snail\nowes_money_to(rabbit, snail) = True\n# The tiger gives a magnifier to the carp\ngive(tiger, magnifier, carp) = True\n# The rabbit does not prepare armor for the octopus\nnot prepare_armor(rabbit, octopus) = True\n\n# Based on the game state and the rules and preferences, does the zander know the defensive plans of the goldfish?\nquestion = knows(defensive_plans_of(goldfish), zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hippopotamus has a high salary, then it steals five points from the raven\nRule2: If the hippopotamus prepares armor for the parrot, then the parrot respects the meerkat\nRule3: If the hippopotamus has a card with a color from the rainbow colors, then it does not attack the green fields of the eel\nRule4: If the hippopotamus has a name whose first letter is the same as the first letter of the squid's name, then it steals five points from the raven\nRule5: If something does not attack the green fields owned by the eel, then it respects the parrot\n\nThe current state of the game is as follows\nThe hippopotamus has a card that is violet in color\nThe hippopotamus has twelve friends\nThe hippopotamus is named Pablo\nThe hippopotamus recently read a high-quality paper\nThe squid is named Peddi\n\nBased on the game state and the rules and preferences, does the parrot respect the meerkat?\nQuestion: Does the parrot respect the meerkat?",
        "idx": 95,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hippopotamus, if it has a high salary, then we can conclude that it steals five of the points of the raven\nrule1() = has_high_salary(hippopotamus) => steal_points(hippopotamus, 5, raven)\n# Rule2: If the hippopotamus prepares armor for the parrot, then the parrot respects the meerkat\nrule2() = prepare_armor(hippopotamus, parrot) => respects(parrot, meerkat)\n# Rule3: Regarding the hippopotamus, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not attack the green fields of the eel\nrule3() = has(hippopotamus, card) and color(card) in rainbow_colors => not attack(hippopotamus, green_fields_of(eel))\n# Rule4: If the hippopotamus has a name whose first letter is the same as the first letter of the squid's name, then the hippopotamus steals five of the points of the raven\nrule4() = first_letter_of(name(hippopotamus)) == first_letter_of(name(squid)) => steal_points(hippopotamus, 5, raven)\n# Rule5: If something does not attack the green fields whose owner is the eel, then it respects the parrot.\nrule5(something) = not attack(something, green_fields_of(eel)) => respects(something, parrot)\n\n# The current state of the game is as follows\n# The hippopotamus has a card that is violet in color, has twelve friends, is named Pablo, and recently read a high-quality paper\nhas(hippopotamus, card_with(violet_color)) = True\nfriends(hippopotamus) = 12\nname(hippopotamus, Pablo) = True\nrecently_read(hippopotamus, high_quality_paper) = True\n# The squid is named Peddi\nname(squid, Peddi) = True\n\n# Based on the game state and the rules and preferences, does the parrot respect the meerkat?\nquestion = respects(parrot, meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal holds an equal number of points as the spider, then the turtle becomes an actual enemy of the salmon\nRule2: If the cockroach created a time machine, then it proceeds to the spot right after the salmon\nRule3: If the cockroach proceeds to the spot right after the salmon and the turtle becomes an actual enemy of the salmon, then the salmon gives a magnifying glass to the eel\nRule4: If the buffalo voted for the mayor, then it attacks the green fields whose owner is the jellyfish\nRule5: If you saw one of the animals rolls the dice for the goldfish, then it will not become an actual enemy of the salmon\nRule6: The cockroach does not proceed to the spot right after the salmon whenever at least one animal offers a job position to the meerkat\nRule7: If the buffalo has a name whose first letter is the same as the first letter of the hare's name, then the buffalo attacks the green fields of the jellyfish\nRule8: The salmon becomes an actual enemy of the penguin whenever at least one animal attacks the green fields whose owner is the jellyfish\nRule9: If something gives a magnifier to the eel and also becomes an actual enemy of the penguin, then it owes money to the koala\n\nRule5 is preferred over Rule1\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe buffalo assassinated the mayor\nThe buffalo is named Lily\nThe cockroach invented a time machine\nThe eagle becomes an enemy of the crocodile\nThe ferret holds the same number of points as the spider\nThe hare is named Lola\n\nBased on the game state and the rules and preferences, does the salmon owe money to the koala?\nQuestion: Does the salmon owe money to the koala?",
        "idx": 96,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal holds an equal number of points as the spider, then the turtle becomes an actual enemy of the salmon\nrule1() = holds_same_points(animal, spider) => actual_enemy(turtle, salmon)\n# Rule2: Regarding the cockroach, if it created a time machine, then we can conclude that it proceeds to the spot right after the salmon\nrule2() = created_time_machine(cockroach) => proceed(cockroach, spot_right_after(spot_of(salmon)))\n# Rule3: If the cockroach proceeds to the spot right after the salmon and the turtle becomes an actual enemy of the salmon, then the salmon gives a magnifying glass to the eel\nrule3() = proceed(cockroach, spot_right_after(spot_of(salmon))) & actual_enemy(turtle, salmon) => give_magnifying_glass(salmon, eel)\n# Rule4: Regarding the buffalo, if it voted for the mayor, then we can conclude that it attacks the green fields whose owner is the jellyfish\nrule4() = voted_for(buffalo, mayor) => attack_green_fields(buffalo, owner_is(jellyfish))\n# Rule5: If you are positive that you saw one of the animals rolls the dice for the goldfish, you can be certain that it will not become an actual enemy of the salmon\nrule5() = rolls_dice_for(animal, goldfish) => not actual_enemy(animal, salmon)\n# Rule6: The cockroach does not proceed to the spot that is right after the spot of the salmon whenever at least one animal offers a job position to the meerkat\nrule6() = offers_job_position(animal, meerkat) => not proceed(cockroach, spot_right_after(spot_of(salmon)))\n# Rule7: If the buffalo has a name whose first letter is the same as the first letter of the hare's name, then the buffalo attacks the green fields of the jellyfish\nrule7() = first_letter_of(name(buffalo)) == first_letter_of(name(hare)) => attack_green_fields(buffalo, owner_is(jellyfish))\n# Rule8: The salmon becomes an actual enemy of the penguin whenever at least one animal attacks the green fields whose owner is the jellyfish\nrule8() = attack_green_fields(animal, owner_is(jellyfish)) => actual_enemy(salmon, penguin)\n# Rule9: Be careful when something gives a magnifier to the eel and also becomes an actual enemy of the penguin because in this case it will surely owe money to the koala (this may or may not be problematic).\nrule9(something) = give_magnifier(something, eel) & actual_enemy(something, penguin) => owes_money_to(something, koala)\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The buffalo assassinated the mayor\nassassinated(buffalo, mayor) = True\n# The buffalo is named Lily\nname(buffalo, Lily) = True\n# The cockroach invented a time machine\ninvented_time_machine(cockroach) = True\n# The eagle becomes an enemy of the crocodile\nenemy(eagle, crocodile) = True\n# The ferret holds the same number of points as the spider\nholds_same_points(ferret, spider) = True\n# The hare is named Lola\nname(hare, Lola) = True\n\n# Based on the game state and the rules and preferences, does the salmon owe money to the koala?\nquestion = owes_money_to(salmon, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If one of the animals learns the basics of resource management from the squirrel, it will not owe money to the mosquito\nRule2: If the octopus has a card whose color appears in the flag of Belgium, it gives a magnifying glass to the eel\nRule3: If one of the animals owes money to the sea bass, it will also need the support of the donkey\nRule4: If an animal does not owe money to the mosquito but gives a magnifying glass to the eel, it will know the defense plan of the cat\nRule5: If the elephant knocks down the fortress of the cat and the octopus knows the defense plan of the cat, the cat will not wink at the baboon\nRule6: If at least one animal needs the support of the donkey, the elephant knocks down the fortress of the cat\n\nThe current state of the game is as follows\nThe octopus eats the food of the moose\nThe octopus has a card that is black in color\nThe octopus learns the basics of resource management from the squirrel\nThe pig has a card that is white in color\nThe pig stole a bike from the store\nThe pig owes money to the sea bass\n\nBased on the game state and the rules and preferences, does the cat wink at the baboon?\nQuestion: Does the cat wink at the baboon?",
        "idx": 97,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals learns the basics of resource management from the squirrel, you can be certain that it will not owe $$$ to the mosquito\nrule1() = learns_basics_of_resource_management(something, squirrel) => not owes_money_to(something, mosquito)\n# Rule2: If the octopus has a card whose color appears in the flag of Belgium, then the octopus gives a magnifying glass to the eel\nrule2() = has(octopus, card_with(color)) & color in colors_of_Belgium_flag => give_magnifying_glass(octopus, eel)\n# Rule3: If you are positive that you saw one of the animals owes $$$ to the sea bass, you can be certain that it will also need the support of the donkey\nrule3() = owes_money_to(something, sea_bass) => needs_support(something, donkey)\n# Rule4: Be careful when something does not owe $$$ to the mosquito but gives a magnifier to the eel because in this case it will, surely, know the defense plan of the cat (this may or may not be problematic)\nrule4() = not owes_money_to(something, mosquito) & give_magnifying_glass(something, eel) => knows_defense_plan_of(cat, something)\n# Rule5: For the cat, if the belief is that the elephant knocks down the fortress of the cat and the octopus knows the defense plan of the cat, then you can add that \"the cat is not going to wink at the baboon\" to your conclusions\nrule5() = knock_down(elephant, fortress_of(cat)) & knows_defense_plan_of(octopus, cat) => not wink(cat, baboon)\n# Rule6: If at least one animal needs the support of the donkey, then the elephant knocks down the fortress that belongs to the cat.\nrule6() = needs_support(something, donkey) => knock_down(elephant, fortress_of(cat))\n\n# The current state of the game is as follows\n# The octopus eats the food of the moose, and has a card that is black in color\neats_food(octopus, moose) = True\nhas(octopus, card_with(black_color)) = True\n# The octopus learns the basics of resource management from the squirrel\nlearns_basics_of_resource_management(octopus, squirrel) = True\n# The pig has a card that is white in color, and stole a bike from the store\nhas(pig, card_with(white_color)) = True\nstole(pig, bike_from(store)) = True\n# The pig owes money to the sea bass\nowes_money_to(pig, sea_bass) = True\n\n# Based on the game state and the rules and preferences, does the cat wink at the baboon?\nquestion = wink(cat, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the puffin does not learn the basics of resource management from the meerkat, then the meerkat learns elementary resource management from the tiger\nRule2: If the catfish rolls the dice for the tiger and the meerkat learns elementary resource management from the tiger, then the tiger attacks the green fields of the raven\nRule3: If at least one animal owes money to the hare, then the lion needs support from the wolverine\nRule4: If the name of the lion starts with the same letter as the name of the dog, then the lion does not need support from the wolverine\nRule5: If the lion is a fan of Chris Ronaldo, then the lion does not need support from the wolverine\nRule6: If the puffin killed the mayor, then the puffin learns the basics of resource management from the meerkat\nRule7: If the catfish has something to drink, then the catfish does not raise a flag of peace for the lobster\nRule8: If something does not knock down the fortress of the mosquito and also does not raise a peace flag for the lobster, then it surely rolls the dice for the tiger\nRule9: If the name of the catfish starts with the same letter as the name of the penguin, then the catfish does not knock down the fortress of the mosquito\nRule10: If the catfish has more than 3 friends, then the catfish does not knock down the fortress of the mosquito\nRule11: If at least one animal knocks down the fortress of the cow, then the puffin does not learn elementary resource management from the meerkat\n\nRule4 is preferred over Rule3\nRule5 is preferred over Rule3\nRule6 is preferred over Rule11\n\nThe current state of the game is as follows\nThe catfish has 12 friends\nThe catfish is named Casper\nThe catfish has a cappuccino\nThe lion hates Chris Ronaldo\nThe lion is named Pablo\nThe meerkat owes money to the hare\nThe penguin is named Buddy\nThe puffin assassinated the mayor\n\nBased on the game state and the rules and preferences, does the tiger attack the green fields whose owner is the raven?\nQuestion: Does the tiger attack the green fields whose owner is the raven?",
        "idx": 98,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the puffin does not learn the basics of resource management from the meerkat, then the meerkat learns elementary resource management from the tiger\nrule1() = not learn_basics_of_resource_management(puffin, meerkat) => learn_elementary_resource_management(meerkat, tiger)\n# Rule2: For the tiger, if the belief is that the catfish rolls the dice for the tiger and the meerkat learns elementary resource management from the tiger, then you can add \"the tiger attacks the green fields of the raven\" to your conclusions\nrule2() = belief(catfish_rolls_dice_for(tiger)) & learn_elementary_resource_management(meerkat, tiger) => add_conclusion(\"the tiger attacks the green fields of the raven\")\n# Rule3: If at least one animal owes money to the hare, then the lion needs support from the wolverine\nrule3() = owes_money_to(something, hare) => needs_support(lion, wolverine)\n# Rule4: Regarding the lion, if it has a name whose first letter is the same as the first letter of the dog's name, then we can conclude that it does not need support from the wolverine\nrule4() = first_letter_of(name(lion)) == first_letter_of(name(dog)) => not needs_support(lion, wolverine)\n# Rule5: Regarding the lion, if it is a fan of Chris Ronaldo, then we can conclude that it does not need support from the wolverine\nrule5() = fan_of(lion, Chris_Ronaldo) => not needs_support(lion, wolverine)\n# Rule6: Regarding the puffin, if it killed the mayor, then we can conclude that it learns the basics of resource management from the meerkat\nrule6() = killed(puffin, mayor) => learn_basics_of_resource_management(puffin, meerkat)\n# Rule7: If the catfish has something to drink, then the catfish does not raise a flag of peace for the lobster\nrule7() = has(catfish, drink) => not raise_flag_of_peace(catfish, lobster)\n# Rule8: Be careful when something does not knock down the fortress of the mosquito and also does not raise a peace flag for the lobster because in this case it will surely roll the dice for the tiger (this may or may not be problematic)\nrule8(something) = not knock_down(something, fortress_of(mosquito)) & not raise_flag_of_peace(something, lobster) => roll_dice(something, tiger)\n# Rule9: Regarding the catfish, if it has a name whose first letter is the same as the first letter of the penguin's name, then we can conclude that it does not knock down the fortress of the mosquito\nrule9() = first_letter_of(name(catfish)) == first_letter_of(name(penguin)) => not knock_down(catfish, fortress_of(mosquito))\n# Rule10: If the catfish has more than 3 friends, then the catfish does not knock down the fortress of the mosquito\nrule10() = friends(catfish) > 3 => not knock_down(catfish, fortress_of(mosquito))\n# Rule11: The puffin does not learn elementary resource management from the meerkat whenever at least one animal knocks down the fortress that belongs to the cow.\nrule11() = knock_down(fortress_of(cow), something) => not learn_elementary_resource_management(puffin, meerkat)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule6 is preferred over Rule11\norder(rule6) > order(rule11) = True\n\n# The current state of the game is as follows\n# The catfish has 12 friends, and is named Casper\nfriends(catfish) = 12\nname(catfish, Casper) = True\n# The catfish has a cappuccino\nhas(catfish, cappuccino) = True\n# The lion hates Chris Ronaldo, and is named Pablo\nhates(lion, Chris_Ronaldo) = True\nname(lion, Pablo) = True\n# The meerkat owes money to the hare\nowes_money_to(meerkat, hare) = True\n# The penguin is named Buddy\nname(penguin, Buddy) = True\n# The puffin assassinated the mayor\nkilled(puffin, mayor) = True\n\n# Based on the game state and the rules and preferences, does the tiger attack the green fields whose owner is the raven?\nquestion = \"the tiger attacks the green fields of the raven\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the aardvark starts with the same letter as the name of the snail, then the aardvark raises a flag of peace for the carp\nRule2: If the eel has fewer than fifteen friends, then it does not wink at the carp\nRule3: If the carp eats the food of the tiger, then the tiger learns elementary resource management from the squid\nRule4: If the eel winks at the carp and the aardvark raises a flag of peace for the carp, then the carp eats the food of the tiger\nRule5: If something does not need support from the jellyfish but learns the basics of resource management from the doctorfish, then it winks at the carp\n\nRule5 is preferred over Rule2\n\nThe current state of the game is as follows\nThe aardvark is named Tarzan\nThe eel has 5 adventurous friends and 4 non-adventurous friends\nThe eel learns the basics of resource management from the doctorfish but does not need support from the jellyfish\nThe snail is named Tango\n\nBased on the game state and the rules and preferences, does the tiger learn the basics of resource management from the squid?\nQuestion: Does the tiger learn the basics of resource management from the squid?",
        "idx": 99,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the aardvark has a name whose first letter is the same as the first letter of the snail's name, then the aardvark raises a flag of peace for the carp\nrule1() = first_letter_of(name(aardvark)) == first_letter_of(name(snail)) => raise_flag_of_peace(aardvark, carp)\n# Rule2: Regarding the eel, if it has fewer than fifteen friends, then we can conclude that it does not wink at the carp\nrule2() = friends(eel) < 15 => not wink_at(eel, carp)\n# Rule3: If the carp eats the food that belongs to the tiger, then the tiger learns elementary resource management from the squid\nrule3() = eat_food(carp, food_of(tiger)) => learn_elementary_resource_management(tiger, squid)\n# Rule4: For the carp, if the belief is that the eel winks at the carp and the aardvark raises a flag of peace for the carp, then you can add \"the carp eats the food of the tiger\" to your conclusions\nrule4() = wink_at(eel, carp) & raise_flag_of_peace(aardvark, carp) => eat_food(carp, food_of(tiger))\n# Rule5: If you see that something does not need support from the jellyfish but it learns the basics of resource management from the doctorfish, what can you certainly conclude? You can conclude that it also winks at the carp.\nrule5(something) = not needs_support(something, jellyfish) & learn_basics_of_resource_management(something, doctorfish) => wink_at(something, carp)\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n\n# The current state of the game is as follows\n# The aardvark is named Tarzan\nname(aardvark, Tarzan) = True\n# The eel has 5 adventurous friends and 4 non-adventurous friends\nfriends(eel, adventurous) = 5\nfriends(eel, not adventurous) = 4\n# The eel learns the basics of resource management from the doctorfish but does not need support from the jellyfish\nlearn_basics_of_resource_management(eel, doctorfish) = True\nnot needs_support(eel, jellyfish) = True\n# The snail is named Tango\nname(snail, Tango) = True\n\n# Based on the game state and the rules and preferences, does the tiger learn the basics of resource management from the squid?\nquestion = learn_elementary_resource_management(tiger, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the cheetah starts with the first letter of the name of the pig, then the cheetah sings a song of victory for the hare\nRule2: If something sings a song of victory for the hare, then it does not remove one of the pieces of the bat from the board\nRule3: If the cheetah has more than 9 friends, then the cheetah sings a victory song for the hare\nRule4: If something does not remove one of the pieces of the bat from the board, then it does not attack the green fields of the tiger\n\nThe current state of the game is as follows\nThe cheetah has nineteen friends\nThe cheetah is named Pablo\nThe pig is named Max\n\nBased on the game state and the rules and preferences, does the cheetah attack the green fields whose owner is the tiger?\nQuestion: Does the cheetah attack the green fields whose owner is the tiger?",
        "idx": 100,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cheetah, if it has a name whose first letter is the same as the first letter of the pig's name, then we can conclude that it sings a song of victory for the hare\nrule1() = first_letter_of(name(cheetah)) == first_letter_of(name(pig)) => sing_song(cheetah, victory_song_for(hare))\n# Rule2: If something sings a song of victory for the hare, then it does not remove from the board one of the pieces of the bat\nrule2() = sing_song(something, victory_song_for(hare)) => not remove(something, piece_of(bat))\n# Rule3: If the cheetah has more than 9 friends, then the cheetah sings a victory song for the hare\nrule3() = friends(cheetah) > 9 => sing_song(cheetah, victory_song_for(hare))\n# Rule4: If something does not remove from the board one of the pieces of the bat, then it does not attack the green fields of the tiger.\nrule4() = not remove(something, piece_of(bat)) => not attack(something, green_fields_of(tiger))\n\n# The current state of the game is as follows\n# The cheetah has nineteen friends, and is named Pablo\nfriends(cheetah) = 19\nname(cheetah, Pablo) = True\n# The pig is named Max\nname(pig, Max) = True\n\n# Based on the game state and the rules and preferences, does the cheetah attack the green fields whose owner is the tiger?\nquestion = attack(cheetah, green_fields_of(tiger))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the gecko has something to drink, then it respects the panther\nRule2: The buffalo gives a magnifier to the eel whenever at least one animal respects the panther\nRule3: If you see one of the animals singing a victory song for the eel, then that animal will also give a magnifying glass to the canary\nRule4: If the gecko has a name whose first letter is the same as the first letter of the amberjack's name, then the gecko respects the panther\n\nThe current state of the game is as follows\nThe amberjack is named Beauty\nThe gecko has a trumpet\nThe gecko is named Buddy\n\nBased on the game state and the rules and preferences, does the buffalo give a magnifier to the canary?\nQuestion: Does the buffalo give a magnifier to the canary?",
        "idx": 101,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the gecko, if it has something to drink, then we can conclude that it respects the panther\nrule1() = has(gecko, something_to_drink) => respects(gecko, panther)\n# Rule2: The buffalo gives a magnifier to the eel whenever at least one animal respects the panther\nrule2() = respects(something, panther) => give_magnifier(buffalo, eel)\n# Rule3: If you are positive that you saw one of the animals sings a victory song for the eel, you can be certain that it will also give a magnifying glass to the canary\nrule3() = sing_song(something, victory_song_for(eel)) => give_magnifying_glass(something, canary)\n# Rule4: If the gecko has a name whose first letter is the same as the first letter of the amberjack's name, then the gecko respects the panther.\nrule4() = first_letter_of(name(gecko)) == first_letter_of(name(amberjack)) => respects(gecko, panther)\n\n# The current state of the game is as follows\n# The amberjack is named Beauty\nname(amberjack, Beauty) = True\n# The gecko has a trumpet\nhas(gecko, trumpet) = True\n# The gecko is named Buddy\nname(gecko, Buddy) = True\n\n# Based on the game state and the rules and preferences, does the buffalo give a magnifier to the canary?\nquestion = give_magnifier(buffalo, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The gecko steals five points from the sheep, in the case where the penguin does not raise a flag of peace for the gecko\nRule2: The dog does not prepare armor for the swordfish, in the case where the elephant sings a song of victory for the dog\nRule3: The jellyfish burns the warehouse of the tilapia whenever at least one animal steals five points from the koala\nRule4: If one of the animals does not prepare armor for the swordfish, it will not steal five points from the carp\nRule5: If the gecko respects the dog, then the dog steals five points from the carp\nRule6: If at least one animal knocks down the fortress of the eagle, then the elephant does not sing a song of victory for the dog\nRule7: If the elephant has a leafy green vegetable, it sings a victory song for the dog\nRule8: If the gecko has a device to connect to the internet, it does not learn the basics of resource management from the whale\nRule9: If the elephant has more than 13 friends, it sings a song of victory for the dog\nRule10: If at least one animal burns the warehouse of the tilapia, the gecko respects the dog\n\nRule5 is preferred over Rule4\nRule6 is preferred over Rule7\nRule6 is preferred over Rule9\n\nThe current state of the game is as follows\nThe elephant has romaine lettuce\nThe elephant has 2 smart friends and 3 not smart friends\nThe gecko has a cell phone\nThe gecko is named Buddy\nThe sheep steals five points from the koala\nThe snail is named Bella\nThe penguin does not raise a peace flag for the gecko\n\nBased on the game state and the rules and preferences, does the dog steal five points from the carp?\nQuestion: Does the dog steal five points from the carp?",
        "idx": 102,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The gecko unquestionably steals five points from the sheep, in the case where the penguin does not raise a flag of peace for the gecko\nrule1() = not raise_flag_of_peace(penguin, gecko) => steal_points(gecko, 5, sheep)\n# Rule2: The dog does not prepare armor for the swordfish, in the case where the elephant sings a song of victory for the dog\nrule2() = sing_song(elephant, victory_song_for(dog)) => not prepare_armor(dog, swordfish)\n# Rule3: The jellyfish burns the warehouse of the tilapia whenever at least one animal steals five points from the koala\nrule3() = steal_points(something, 5, koala) => burn(warehouse_of(tilapia), jellyfish)\n# Rule4: If you are positive that one of the animals does not prepare armor for the swordfish, you can be certain that it will not steal five points from the carp\nrule4(something) = not prepare_armor(something, swordfish) => not steal_points(something, 5, carp)\n# Rule5: If the gecko respects the dog, then the dog steals five of the points of the carp\nrule5() = respects(gecko, dog) => steal_points(dog, 5, carp)\n# Rule6: If at least one animal knocks down the fortress that belongs to the eagle, then the elephant does not sing a song of victory for the dog\nrule6() = knock_down_fortress(something, fortress_of(eagle)) => not sing_song(elephant, victory_song_for(dog))\n# Rule7: Regarding the elephant, if it has a leafy green vegetable, then we can conclude that it sings a victory song for the dog\nrule7() = has(elephant, leafy_green_vegetable) => sing_song(elephant, victory_song_for(dog))\n# Rule8: Regarding the gecko, if it has a device to connect to the internet, then we can conclude that it does not learn the basics of resource management from the whale\nrule8(device) = has(gecko, connect_to_internet(device)) => not learn_basics_of_resource_management(gecko, whale)\n# Rule9: If the elephant has more than 13 friends, then the elephant sings a song of victory for the dog\nrule9() = friends(elephant) > 13 => sing_song(elephant, victory_song_for(dog))\n# Rule10: If at least one animal burns the warehouse of the tilapia, then the gecko respects the dog.\nrule10() = burn(warehouse_of(tilapia), something) => respects(gecko, dog)\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n\n# The current state of the game is as follows\n# The elephant has some romaine lettuce, and has two friends that are smart and three friends that are not\nhas(elephant, romaine_lettuce) = True\nfriends(elephant, smart) = 2\nfriends(elephant, not_smart) = 3\n# The gecko has a cell phone\nhas(gecko, cell_phone) = True\n# The gecko is named Buddy\nname(gecko, Buddy) = True\n# The sheep steals five points from the koala\nsteal_points(sheep, 5, koala) = True\n# The snail is named Bella\nname(snail, Bella) = True\n# The penguin does not raise a peace flag for the gecko\nnot raise_flag_of_peace(penguin, gecko) = True\n\n# Based on the game state and the rules and preferences, does the dog steal five points from the carp?\nquestion = steal_points(dog, 5, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kudu has a leafy green vegetable, then it knows the defensive plans of the catfish\nRule2: If the kudu eats the food that belongs to the dog, then the dog does not hold an equal number of points as the rabbit\nRule3: If you see one of the animals burn the warehouse of the aardvark, then it will not eat the food that belongs to the dog\nRule4: If the kudu has something to sit on, then it knows the defense plan of the catfish\nRule5: If you see one of the animals attack the green fields owned by the cat, then it will also owe money to the donkey\nRule6: If something owes money to the donkey and knows the defensive plans of the catfish, then it also eats the food of the dog\n\nRule3 is preferred over Rule6\n\nThe current state of the game is as follows\nThe kudu attacks the green fields owned by the cat\nThe kudu has a plastic bag\nThe kudu has a bench\n\nBased on the game state and the rules and preferences, does the dog hold the same number of points as the rabbit?\nQuestion: Does the dog hold the same number of points as the rabbit?",
        "idx": 103,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kudu, if it has a leafy green vegetable, then we can conclude that it knows the defensive plans of the catfish\nrule1() = has(kudu, leafy_green_vegetable) => knows(defensive_plans_of(catfish), kudu)\n# Rule2: The dog does not hold an equal number of points as the rabbit, in the case where the kudu eats the food that belongs to the dog\nrule2() = eat_food(kudu, food_of(dog)) => not equal_points(dog, rabbit)\n# Rule3: If you are positive that you saw one of the animals burns the warehouse of the aardvark, you can be certain that it will not eat the food that belongs to the dog\nrule3(something) = burn(warehouse_of(aardvark), something) => not eat_food(something, food_of(dog))\n# Rule4: Regarding the kudu, if it has something to sit on, then we can conclude that it knows the defense plan of the catfish\nrule4() = has(kudu, something_to_sit_on) => knows(defense_plan_of(catfish), kudu)\n# Rule5: If you are positive that you saw one of the animals attacks the green fields whose owner is the cat, you can be certain that it will also owe money to the donkey\nrule5(something) = attack(green_fields_of(cat), something) => owes_money_to(something, donkey)\n# Rule6: If you see that something owes $$$ to the donkey and knows the defensive plans of the catfish, what can you certainly conclude? You can conclude that it also eats the food of the dog.\nrule6(something) = owes_money_to(something, donkey) & knows(defensive_plans_of(catfish), something) => eat_food(something, food_of(dog))\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n\n# The current state of the game is as follows\n# The kudu attacks the green fields whose owner is the cat, and has a plastic bag\nattack(green_fields_of(cat), kudu) = True\nhas(kudu, plastic_bag) = True\n# The kudu has a bench\nhas(kudu, bench) = True\n\n# Based on the game state and the rules and preferences, does the dog hold the same number of points as the rabbit?\nquestion = equal_points(dog, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cow burns the warehouse that is in possession of the buffalo, then the buffalo rolls the dice for the kangaroo\nRule2: If the name of the cow starts with the same letter as the name of the tilapia, then the cow burns the warehouse that is in possession of the buffalo\nRule3: If the cow has more than ten friends, then the cow burns the warehouse that is in possession of the buffalo\nRule4: If something does not roll the dice for the kangaroo, then it steals five points from the oscar\nRule5: If something does not attack the green fields of the hippopotamus, then it does not steal five points from the oscar\n\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cow has twenty friends and struggles to find food\nThe cow is named Peddi\nThe tilapia is named Milo\n\nBased on the game state and the rules and preferences, does the buffalo steal five points from the oscar?\nQuestion: Does the buffalo steal five points from the oscar?",
        "idx": 104,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cow burns the warehouse that is in possession of the buffalo, then the buffalo rolls the dice for the kangaroo\nrule1() = burn(warehouse_of(buffalo), cow) => roll_dice(buffalo, kangaroo)\n# Rule2: If the cow has a name whose first letter is the same as the first letter of the tilapia's name, then the cow burns the warehouse that is in possession of the buffalo\nrule2() = first_letter_of(name(cow)) == first_letter_of(name(tilapia)) => burn(warehouse_of(buffalo), cow)\n# Rule3: If the cow has more than ten friends, then the cow burns the warehouse that is in possession of the buffalo\nrule3() = friends(cow) > 10 => burn(warehouse_of(buffalo), cow)\n# Rule4: If something does not roll the dice for the kangaroo, then it steals five points from the oscar\nrule4(something) = not roll_dice(something, kangaroo) => steal_points(something, 5, oscar)\n# Rule5: If something does not attack the green fields of the hippopotamus, then it does not steal five points from the oscar.\nrule5(something) = not attack_green_fields(something, hippopotamus) => not steal_points(something, 5, oscar)\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cow has twenty friends, and struggles to find food\nfriends(cow) = 20\nstruggles_to_find_food(cow) = True\n# The cow is named Peddi\nname(cow, Peddi) = True\n# The tilapia is named Milo\nname(tilapia, Milo) = True\n\n# Based on the game state and the rules and preferences, does the buffalo steal five points from the oscar?\nquestion = steal_points(buffalo, 5, oscar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the amberjack has more than 9 friends, then the amberjack gives a magnifier to the tiger\nRule2: If something rolls the dice for the aardvark, then it knocks down the fortress that belongs to the donkey, too\nRule3: If something gives a magnifier to the tiger, then it rolls the dice for the aardvark, too.\n\nThe current state of the game is as follows\nThe amberjack has 19 friends\nThe amberjack invented a time machine\n\nBased on the game state and the rules and preferences, does the amberjack knock down the fortress of the donkey?\nQuestion: Does the amberjack knock down the fortress of the donkey?",
        "idx": 105,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the amberjack has more than 9 friends, then the amberjack gives a magnifier to the tiger\nrule1() = friends(amberjack) > 9 => give(amberjack, magnifier, tiger)\n# Rule2: If something rolls the dice for the aardvark, then it knocks down the fortress that belongs to the donkey, too\nrule2(something) = roll_dice_for(something, aardvark) => knock_down(fortress_of(donkey))\n# Rule3: If something gives a magnifier to the tiger, then it rolls the dice for the aardvark, too.\nrule3(something) = give(something, magnifier, tiger) => roll_dice_for(something, aardvark)\n\n# The current state of the game is as follows\n# The amberjack has 19 friends\nfriends(amberjack) = 19\n# The amberjack invented a time machine\ninvented(amberjack, time_machine) = True\n\n# Based on the game state and the rules and preferences, does the amberjack knock down the fortress of the donkey?\nquestion = knock_down(fortress_of(donkey))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knows the defense plan of the lion, then it does not give a magnifier to the cheetah\nRule2: If something knows the defense plan of the blobfish, then it gives a magnifier to the cheetah\nRule3: If something gives a magnifier to the cheetah and removes one of the pieces of the wolverine, then it shows all its cards to the puffin\nRule4: If the pig removes one of the pieces of the salmon, then the salmon prepares armor for the amberjack\nRule5: If the canary has fewer than four friends, then it does not eat the food of the panther\nRule6: If something removes one of the pieces of the baboon, then it does not prepare armor for the amberjack\nRule7: If the kiwi burns the warehouse of the canary, then the canary eats the food of the panther\nRule8: If at least one animal prepares armor for the amberjack, then the kudu prepares armor for the puffin\nRule9: If the parrot shows all its cards to the puffin and the kudu prepares armor for the puffin, then the puffin does not learn the basics of resource management from the buffalo\nRule10: If the black bear respects the parrot, then the parrot removes one of the pieces of the wolverine\nRule11: If something respects the starfish, then it does not prepare armor for the puffin\n\nRule1 is preferred over Rule2\nRule11 is preferred over Rule8\nRule5 is preferred over Rule7\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe black bear respects the parrot\nThe kiwi burns the warehouse of the canary\nThe parrot knows the defensive plans of the blobfish\nThe pig removes one of the pieces of the salmon\n\nBased on the game state and the rules and preferences, does the puffin learn the basics of resource management from the buffalo?\nQuestion: Does the puffin learn the basics of resource management from the buffalo?",
        "idx": 106,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something knows the defense plan of the lion, then it does not give a magnifier to the cheetah\nrule1() = knows(defense_plan_of(lion), something) => not give_magnifier(something, cheetah)\n# Rule2: If you are positive that you saw one of the animals knows the defense plan of the blobfish, you can be certain that it will also give a magnifier to the cheetah\nrule2(something) = knows(defense_plan_of(blobfish), something) => give_magnifier(something, cheetah)\n# Rule3: If you see that something gives a magnifier to the cheetah and removes from the board one of the pieces of the wolverine, what can you certainly conclude? You can conclude that it also shows all her cards to the puffin\nrule3(something) = give_magnifier(something, cheetah) & remove(something, piece_of(wolverine)) => show_cards(something, puffin)\n# Rule4: If the pig removes one of the pieces of the salmon, then the salmon prepares armor for the amberjack\nrule4() = remove(pig, piece_of(salmon)) => prepare_armor(salmon, amberjack)\n# Rule5: Regarding the canary, if it has fewer than four friends, then we can conclude that it does not eat the food of the panther\nrule5() = friends(canary) < 4 => not eat_food(canary, panther)\n# Rule6: If something removes one of the pieces of the baboon, then it does not prepare armor for the amberjack\nrule6(something) = remove(something, piece_of(baboon)) => not prepare_armor(something, amberjack)\n# Rule7: The canary unquestionably eats the food that belongs to the panther, in the case where the kiwi burns the warehouse that is in possession of the canary\nrule7() = burn(warehouse_of(canary), kiwi) => eat_food(canary, panther)\n# Rule8: The kudu prepares armor for the puffin whenever at least one animal prepares armor for the amberjack\nrule8() = prepare_armor(_, amberjack) => prepare_armor(kudu, puffin)\n# Rule9: If the parrot shows her cards (all of them) to the puffin and the kudu prepares armor for the puffin, then the puffin will not learn the basics of resource management from the buffalo\nrule9() = show_cards(parrot, puffin) & prepare_armor(kudu, puffin) => not learn_basics_of_resource_management(puffin, buffalo)\n# Rule10: The parrot unquestionably removes from the board one of the pieces of the wolverine, in the case where the black bear respects the parrot\nrule10() = respects(black_bear, parrot) => remove(parrot, piece_of(wolverine))\n# Rule11: If something respects the starfish, then it does not prepare armor for the puffin.\nrule11(something) = respects(something, starfish) => not prepare_armor(something, puffin)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule11 is preferred over Rule8\norder(rule11) > order(rule8) = True\n# Rule5 is preferred over Rule7\norder(rule5) > order(rule7) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The black bear respects the parrot\nrespects(black_bear, parrot) = True\n# The kiwi burns the warehouse of the canary\nburn(warehouse_of(canary), kiwi) = True\n# The parrot knows the defensive plans of the blobfish\nknows(defense_plan_of(blobfish), parrot) = True\n# The pig removes from the board one of the pieces of the salmon\nremove(pig, piece_of(salmon)) = True\n\n# Based on the game state and the rules and preferences, does the puffin learn the basics of resource management from the buffalo?\nquestion = learn_basics_of_resource_management(puffin, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The zander attacks the green fields of the meerkat whenever at least one animal learns the basics of resource management from the buffalo\nRule2: If at least one animal offers a job position to the cricket, then the kudu does not learn the basics of resource management from the zander\nRule3: If at least one animal eats the food of the dog, then the pig does not learn elementary resource management from the buffalo\nRule4: If the spider has difficulty finding food, then the spider does not offer a job position to the cricket\nRule5: If something prepares armor for the carp, then it offers a job position to the cricket as well\nRule6: If something respects the baboon, then it does not learn elementary resource management from the octopus\nRule7: If the spider does not knock down the fortress of the zander and the kudu does not learn the basics of resource management from the zander, then the zander will never attack the green fields owned by the meerkat\nRule8: If the spider has a sharp object, then it does not offer a job position to the cricket\nRule9: If something shows all her cards to the catfish but does not learn elementary resource management from the octopus, then she will surely learn the basics of resource management from the buffalo\nRule10: If the pig has a device to connect to the internet, then the pig shows all her cards to the catfish\n\nRule5 is preferred over Rule4\nRule5 is preferred over Rule8\nRule7 is preferred over Rule1\nRule9 is preferred over Rule3\n\nThe current state of the game is as follows\nThe pig becomes an enemy of the baboon\nThe pig purchased a luxury aircraft\nThe pig has a cell phone\nThe pig is named Buddy\nThe snail is named Cinnamon\nThe spider has a basket\nThe spider prepares armor for the carp\nThe panda bear does not show all her cards to the hummingbird\n\nBased on the game state and the rules and preferences, does the zander attack the green fields owned by the meerkat?\nQuestion: Does the zander attack the green fields owned by the meerkat?",
        "idx": 107,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The zander attacks the green fields of the meerkat whenever at least one animal learns the basics of resource management from the buffalo\nrule1() = learns_basics_of_resource_management(something, buffalo) => attack(zander, green_fields_of(meerkat))\n# Rule2: If at least one animal offers a job position to the cricket, then the kudu does not learn the basics of resource management from the zander\nrule2() = offers_job_position(something, cricket) => not learns_basics_of_resource_management(kudu, zander)\n# Rule3: If at least one animal eats the food of the dog, then the pig does not learn elementary resource management from the buffalo\nrule3() = eats_food_of(something, dog) => not learns_elementary_resource_management(pig, buffalo)\n# Rule4: If the spider has difficulty to find food, then the spider does not offer a job to the cricket\nrule4() = has_difficulty_finding_food(spider) => not offers_job_position(spider, cricket)\n# Rule5: If something prepares armor for the carp, then it offers a job position to the cricket, too\nrule5() = prepare_armor(something, carp) => offers_job_position(something, cricket)\n# Rule6: If something respects the baboon, then it does not learn elementary resource management from the octopus\nrule6() = respects(something, baboon) => not learns_elementary_resource_management(something, octopus)\n# Rule7: If the spider does not knock down the fortress of the zander and the kudu does not learn the basics of resource management from the zander, then the zander will never attack the green fields whose owner is the meerkat\nrule7() = not knock_down(fortress_of(zander), spider) & not learns_basics_of_resource_management(kudu, zander) => never_attack(zander, green_fields_of(meerkat))\n# Rule8: Regarding the spider, if it has a sharp object, then we can conclude that it does not offer a job position to the cricket\nrule8() = has(spider, sharp_object) => not offers_job_position(spider, cricket)\n# Rule9: Be careful when something shows all her cards to the catfish but does not learn elementary resource management from the octopus because in this case it will, surely, learn the basics of resource management from the buffalo (this may or may not be problematic)\nrule9() = show_all_cards(something, catfish) & not learns_elementary_resource_management(something, octopus) => learns_basics_of_resource_management(something, buffalo)\n# Rule10: If the pig has a device to connect to the internet, then the pig shows her cards (all of them) to the catfish.\nrule10() = has(pig, connect_to_internet(device)) => show_all_cards(pig, catfish)\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n# Rule5 is preferred over Rule8\norder(rule5) > order(rule8) = True\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n# Rule9 is preferred over Rule3\norder(rule9) > order(rule3) = True\n\n# The current state of the game is as follows\n# The pig becomes an enemy of the baboon, and purchased a luxury aircraft\nenemy(pig, baboon) = True\npurchased(pig, luxury_aircraft) = True\n# The pig has a cell phone, and is named Buddy\nhas(pig, cell_phone) = True\nname(pig, Buddy) = True\n# The snail is named Cinnamon\nname(snail, Cinnamon) = True\n# The spider has a basket\nhas(spider, basket) = True\n# The spider prepares armor for the carp\nprepare_armor(spider, carp) = True\n# The panda bear does not show all her cards to the hummingbird\nnot show_all_cards(panda_bear, hummingbird) = True\n\n# Based on the game state and the rules and preferences, does the zander attack the green fields whose owner is the meerkat?\nquestion = attack(zander, green_fields_of(meerkat))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The squid knocks down the fortress that belongs to the leopard, in the case where the baboon winks at the squid\nRule2: The baboon winks at the squid whenever at least one animal removes one of the pieces of the lion\nRule3: If the aardvark steals five points from the ferret and the grizzly bear gives a magnifying glass to the ferret, then the ferret removes one of the pieces of the lion from the board.\n\nThe current state of the game is as follows\nThe aardvark steals five points from the ferret\nThe grizzly bear gives a magnifying glass to the ferret\n\nBased on the game state and the rules and preferences, does the squid knock down the fortress of the leopard?\nQuestion: Does the squid knock down the fortress of the leopard?",
        "idx": 108,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The squid unquestionably knocks down the fortress that belongs to the leopard, in the case where the baboon winks at the squid\nrule1() = wink(baboon, squid) => knock_down(squid, fortress_of(leopard))\n# Rule2: The baboon winks at the squid whenever at least one animal removes one of the pieces of the lion\nrule2() = remove(something, piece_of(lion)) => wink(baboon, squid)\n# Rule3: If the aardvark steals five points from the ferret and the grizzly bear gives a magnifying glass to the ferret, then the ferret removes from the board one of the pieces of the lion.\nrule3() = steal_points(aardvark, 5, ferret) & give(grizzly_bear, magnifying_glass, ferret) => remove(ferret, piece_of(lion))\n\n# The current state of the game is as follows\n# The aardvark steals five points from the ferret\nsteal_points(aardvark, 5, ferret) = True\n# The grizzly bear gives a magnifier to the ferret\ngive(grizzly_bear, magnifying_glass, ferret) = True\n\n# Based on the game state and the rules and preferences, does the squid knock down the fortress of the leopard?\nquestion = knock_down(squid, fortress_of(leopard))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo prepares armor for the moose, then the moose steals five points from the cat\nRule2: The sea bass does not steal five points from the canary whenever at least one animal owes money to the meerkat\nRule3: If something does not knock down the fortress that belongs to the pig, then it does not steal five points from the cat\nRule4: If the moose has a device to connect to the internet, then it shows all her cards to the eagle\nRule5: If something steals five points from the cat and shows all her cards to the eagle, then it owes money to the meerkat\nRule6: If the moose has something to carry apples and oranges, then it shows all her cards to the eagle\nRule7: If at least one animal owes money to the whale, then it steals five points from the canary\n\nRule3 is preferred over Rule1\nRule7 is preferred over Rule2\n\nThe current state of the game is as follows\nThe buffalo prepares armor for the moose\nThe moose has a computer and a violin\nThe raven proceeds to the spot right after the moose\nThe catfish does not sing a victory song for the moose\n\nBased on the game state and the rules and preferences, does the sea bass steal five points from the canary?\nQuestion: Does the sea bass steal five points from the canary?",
        "idx": 109,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the buffalo prepares armor for the moose, then the moose steals five of the points of the cat\nrule1() = prepare_armor(buffalo, moose) => steal_points(moose, 5, cat)\n# Rule2: The sea bass does not steal five of the points of the canary whenever at least one animal owes money to the meerkat\nrule2() = owes_money_to(something, meerkat) => not steal_points(sea_bass, 5, canary)\n# Rule3: If something does not knock down the fortress that belongs to the pig, then it does not steal five points from the cat\nrule3(something) = not knock_down(something, fortress_of(pig)) => not steal_points(something, 5, cat)\n# Rule4: Regarding the moose, if it has a device to connect to the internet, then we can conclude that it shows her cards (all of them) to the eagle\nrule4(device) = has(moose, connect_to_internet(device)) => show_cards(moose, eagle)\n# Rule5: If you see that something steals five points from the cat and shows all her cards to the eagle, what can you certainly conclude? You can conclude that it also owes money to the meerkat\nrule5() = steal_points(something, 5, cat) & show_cards(something, eagle) => owes_money_to(something, meerkat)\n# Rule6: Regarding the moose, if it has something to carry apples and oranges, then we can conclude that it shows her cards (all of them) to the eagle\nrule6() = has(moose, carry_apples_and_oranges) => show_cards(moose, eagle)\n# Rule7: If you are positive that you saw one of the animals owes $$$ to the whale, you can be certain that it will also steal five of the points of the canary.\nrule7() = owes_money_to(something, whale) => steal_points(something, 5, canary)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n\n# The current state of the game is as follows\n# The buffalo prepares armor for the moose\nprepare_armor(buffalo, moose) = True\n# The moose has a computer, and has a violin\nhas(moose, computer) = True\nhas(moose, violin) = True\n# The raven proceeds to the spot right after the moose\nproceed(raven, spot_right_after(spot_of(moose))) = True\n# The catfish does not sing a victory song for the moose\nnot sing_song(catfish, victory_song_for(moose)) = True\n\n# Based on the game state and the rules and preferences, does the sea bass steal five points from the canary?\nquestion = steal_points(sea_bass, 5, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sun bear has a card with a primary color, then it steals five points from the elephant\nRule2: If the pig does not learn the basics of resource management from the sun bear, then the sun bear steals five points from the tiger\nRule3: If the bat has fewer than eleven friends, then it becomes an enemy of the ferret\nRule4: If something steals five points from the tiger and also steals five points from the elephant, then it raises a peace flag for the octopus\nRule5: If something learns the basics of resource management from the carp, then it does not steal five points from the elephant\nRule6: If the sun bear raises a peace flag for the octopus and the bat needs support from the octopus, then the octopus holds an equal number of points as the turtle\nRule7: If the cricket proceeds to the spot right after the bat, then the bat does not need support from the octopus\nRule8: If you see one of the animals sings a song of victory for the jellyfish, then it does not raise a peace flag for the octopus\nRule9: If the sun bear reduces her work hours, then it steals five points from the elephant\nRule10: If the bat has a name whose first letter is the same as the first letter of the cricket's name, then it becomes an actual enemy of the ferret\nRule11: If something becomes an enemy of the ferret, then it needs the support of the octopus\n\nRule5 is preferred over Rule1\nRule5 is preferred over Rule9\nRule7 is preferred over Rule11\nRule8 is preferred over Rule4\n\nThe current state of the game is as follows\nThe bat has two friends, one bald and one not bald\nThe bat is named Teddy\nThe cricket is named Beauty\nThe pig learns the basics of resource management from the sun bear\nThe sun bear has a card that is violet in color\nThe sun bear reduced her work hours recently\nThe bat does not proceed to the spot right after the spider\n\nBased on the game state and the rules and preferences, does the octopus hold the same number of points as the turtle?\nQuestion: Does the octopus hold the same number of points as the turtle?",
        "idx": 110,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the sun bear, if it has a card with a primary color, then we can conclude that it steals five points from the elephant\nrule1() = has(sun_bear, card_with(primary_color)) => steal_points(sun_bear, 5, elephant)\n# Rule2: The sun bear unquestionably steals five of the points of the tiger, in the case where the pig does not learn the basics of resource management from the sun bear\nrule2() = not learn_basics_of_resource_management(pig, sun_bear) => steal_points(sun_bear, 5, tiger)\n# Rule3: Regarding the bat, if it has fewer than eleven friends, then we can conclude that it becomes an enemy of the ferret\nrule3() = friends(bat) < 11 => enemy(bat, ferret)\n# Rule4: Be careful when something steals five points from the tiger and also steals five of the points of the elephant because in this case it will surely raise a peace flag for the octopus (this may or may not be problematic)\nrule4(something) = steal_points(something, 5, tiger) & steal_points(something, 5, elephant) => raise_flag_of_peace(something, octopus)\n# Rule5: If something learns the basics of resource management from the carp, then it does not steal five points from the elephant\nrule5() = learn_basics_of_resource_management(something, carp) => not steal_points(something, 5, elephant)\n# Rule6: For the octopus, if the belief is that the sun bear raises a peace flag for the octopus and the bat needs support from the octopus, then you can add \"the octopus holds an equal number of points as the turtle\" to your conclusions\nrule6() = raise_flag_of_peace(sun_bear, octopus) & needs_support(bat, octopus) => points(octopus) == points(turtle)\n# Rule7: The bat does not need support from the octopus, in the case where the cricket proceeds to the spot right after the bat\nrule7() = proceed(cricket, spot_right_after(spot_of(bat))) => not needs_support(bat, octopus)\n# Rule8: If you are positive that you saw one of the animals sings a song of victory for the jellyfish, you can be certain that it will not raise a peace flag for the octopus\nrule8() = sing_song(something, victory_song_for(jellyfish)) => not raise_flag_of_peace(something, octopus)\n# Rule9: If the sun bear works fewer hours than before, then the sun bear steals five points from the elephant\nrule9() = reduce_work_hours(sun_bear) => steal_points(sun_bear, 5, elephant)\n# Rule10: Regarding the bat, if it has a name whose first letter is the same as the first letter of the cricket's name, then we can conclude that it becomes an actual enemy of the ferret\nrule10() = first_letter_of(name(bat)) == first_letter_of(name(cricket)) => actual_enemy(bat, ferret)\n# Rule11: If something becomes an enemy of the ferret, then it needs the support of the octopus, too.\nrule11(something) = enemy(something, ferret) => needs_support(something, octopus)\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule5 is preferred over Rule9\norder(rule5) > order(rule9) = True\n# Rule7 is preferred over Rule11\norder(rule7) > order(rule11) = True\n# Rule8 is preferred over Rule4\norder(rule8) > order(rule4) = True\n\n# The current state of the game is as follows\n# The bat has one friend that is bald and one friend that is not, and is named Teddy\nfriends(bat) = 2\nhas_friend(bat, bald) = True\nhas_friend(bat, not_bald) = True\nname(bat, Teddy) = True\n# The cricket is named Beauty\nname(cricket, Beauty) = True\n# The pig learns the basics of resource management from the sun bear\nlearn_basics_of_resource_management(pig, sun_bear) = True\n# The sun bear has a card that is violet in color\nhas(sun_bear, card_with(violet_color)) = True\n# The sun bear reduced her work hours recently\nreduce_work_hours(sun_bear) = True\n# The bat does not proceed to the spot right after the spider\nnot proceed(bat, spot_right_after(spot_of(spider))) = True\n\n# Based on the game state and the rules and preferences, does the octopus hold the same number of points as the turtle?\nquestion = points(octopus) == points(turtle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal becomes an enemy of the wolverine, then the octopus does not become an actual enemy of the hippopotamus\nRule2: Be careful when something burns the warehouse that is in possession of the meerkat but does not prepare armor for the leopard because in this case it will, surely, not know the defensive plans of the octopus (this may or may not be problematic)\nRule3: The dog knows the defense plan of the octopus, in the case where the bat raises a peace flag for the dog\nRule4: If at least one animal knocks down the fortress that belongs to the gecko, then the bat raises a flag of peace for the dog\nRule5: If the name of the dog starts with the same letter as the name of the zander, then the dog burns the warehouse that is in possession of the meerkat\nRule6: If the dog knows the defensive plans of the octopus, then the octopus becomes an enemy of the hippopotamus\n\nRule1 is preferred over Rule6\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe dog is named Milo\nThe meerkat knocks down the fortress of the gecko\nThe zander is named Max\n\nBased on the game state and the rules and preferences, does the octopus become an enemy of the hippopotamus?\nQuestion: Does the octopus become an enemy of the hippopotamus?",
        "idx": 111,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal becomes an enemy of the wolverine, then the octopus does not become an actual enemy of the hippopotamus\nrule1() = enemy(something, wolverine) => not actual_enemy(octopus, hippopotamus)\n# Rule2: Be careful when something burns the warehouse that is in possession of the meerkat but does not prepare armor for the leopard because in this case it will, surely, not know the defensive plans of the octopus (this may or may not be problematic)\nrule2(something) = burn(warehouse_of(meerkat), something) & not prepare_armor(something, leopard) => not knows_defensive_plans_of(octopus, something)\n# Rule3: The dog unquestionably knows the defense plan of the octopus, in the case where the bat raises a peace flag for the dog\nrule3() = raise_flag_of_peace(bat, dog) => knows_defensive_plans_of(octopus, dog)\n# Rule4: If at least one animal knocks down the fortress that belongs to the gecko, then the bat raises a flag of peace for the dog\nrule4() = knock_down(fortress_of(gecko), something) => raise_flag_of_peace(bat, dog)\n# Rule5: Regarding the dog, if it has a name whose first letter is the same as the first letter of the zander's name, then we can conclude that it burns the warehouse that is in possession of the meerkat\nrule5() = first_letter_of(name(dog)) == first_letter_of(name(zander)) => burn(warehouse_of(meerkat), dog)\n# Rule6: If the dog knows the defensive plans of the octopus, then the octopus becomes an enemy of the hippopotamus.\nrule6() = knows_defensive_plans_of(octopus, dog) => enemy(octopus, hippopotamus)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The dog is named Milo\nname(dog, Milo) = True\n# The meerkat knocks down the fortress of the gecko\nknock_down(fortress_of(gecko), meerkat) = True\n# The zander is named Max\nname(zander, Max) = True\n\n# Based on the game state and the rules and preferences, does the octopus become an enemy of the hippopotamus?\nquestion = enemy(octopus, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cat will not give a magnifier to the leopard, in the case where the puffin does not steal five points from the cat\nRule2: If the cat does not give a magnifier to the leopard and the carp holds the same number of points as the leopard, then the leopard does not learn the basics of resource management from the doctorfish\nRule3: If at least one animal proceeds to the spot that is right after the spot of the tiger, then the cow does not eat the food that belongs to the carp\nRule4: If the puffin has fewer than 8 friends, then it does not steal five points from the cat\nRule5: If the name of the puffin starts with the same letter as the name of the octopus, then the puffin does not steal five points from the cat\nRule6: If the viperfish removes one of the pieces of the leopard from the board, then the leopard learns the basics of resource management from the doctorfish\nRule7: If something removes one of the pieces of the whale from the board and winks at the turtle, then it gives a magnifier to the leopard\nRule8: If the cow eats the food of the carp, then the carp holds the same number of points as the leopard\nRule9: The cat does not remove one of the pieces of the whale whenever at least one animal prepares armor for the rabbit\nRule10: The cat removes one of the pieces of the whale in the case where the rabbit learns the basics of resource management from the cat\nRule11: If something does not wink at the salmon, then it eats the food that belongs to the carp\n\nRule3 is preferred over Rule11\nRule6 is preferred over Rule2\nRule7 is preferred over Rule1\nRule9 is preferred over Rule10\n\nThe current state of the game is as follows\nThe octopus is named Lola\nThe puffin has 6 friends, holds her keys, and is named Milo\nThe puffin has a card that is red in color\nThe rabbit learns the basics of resource management from the cat\nThe cow does not wink at the salmon\n\nBased on the game state and the rules and preferences, does the leopard learn the basics of resource management from the doctorfish?\nQuestion: Does the leopard learn the basics of resource management from the doctorfish?",
        "idx": 112,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cat will not give a magnifier to the leopard, in the case where the puffin does not steal five points from the cat\nrule1() = not steal_points(puffin, 5, cat) => not give_magnifier(cat, leopard)\n# Rule2: For the leopard, if the belief is that the cat is not going to give a magnifier to the leopard but the carp holds the same number of points as the leopard, then you can add that \"the leopard is not going to learn the basics of resource management from the doctorfish\" to your conclusions\nrule2() = not give_magnifier(cat, leopard) & points(carp) == points(leopard) => not learn_basics_of_resource_management(leopard, doctorfish)\n# Rule3: If at least one animal proceeds to the spot that is right after the spot of the tiger, then the cow does not eat the food that belongs to the carp\nrule3() = proceed(something, spot_right_after(spot_of(tiger))) => not eat_food(cow, food_of(carp))\n# Rule4: Regarding the puffin, if it has fewer than 8 friends, then we can conclude that it does not steal five points from the cat\nrule4() = friends(puffin) < 8 => not steal_points(puffin, 5, cat)\n# Rule5: Regarding the puffin, if it has a name whose first letter is the same as the first letter of the octopus's name, then we can conclude that it does not steal five of the points of the cat\nrule5() = first_letter_of(name(puffin)) == first_letter_of(name(octopus)) => not steal_points(puffin, 5, cat)\n# Rule6: If the viperfish removes from the board one of the pieces of the leopard, then the leopard learns the basics of resource management from the doctorfish\nrule6() = remove(viperfish, piece_of(leopard)) => learn_basics_of_resource_management(leopard, doctorfish)\n# Rule7: If you see that something removes from the board one of the pieces of the whale and winks at the turtle, what can you certainly conclude? You can conclude that it also gives a magnifier to the leopard\nrule7(something) = remove(something, piece_of(whale)) & wink_at(something, turtle) => give_magnifier(something, leopard)\n# Rule8: If the cow eats the food of the carp, then the carp holds the same number of points as the leopard\nrule8() = eat_food(cow, food_of(carp)) => points(carp) == points(leopard)\n# Rule9: The cat does not remove one of the pieces of the whale whenever at least one animal prepares armor for the rabbit\nrule9() = prepare_armor(something, rabbit) => not remove(cat, piece_of(whale))\n# Rule10: The cat unquestionably removes from the board one of the pieces of the whale, in the case where the rabbit learns the basics of resource management from the cat\nrule10() = learn_basics_of_resource_management(rabbit, cat) => remove(cat, piece_of(whale))\n# Rule11: If something does not wink at the salmon, then it eats the food that belongs to the carp.\nrule11(something) = not wink_at(something, salmon) => eat_food(something, food_of(carp))\n# Rule3 is preferred over Rule11\norder(rule3) > order(rule11) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n# Rule9 is preferred over Rule10\norder(rule9) > order(rule10) = True\n\n# The current state of the game is as follows\n# The octopus is named Lola\nname(octopus, Lola) = True\n# The puffin has 2 friends that are easy going and 4 friends that are not, is named Milo, and is holding her keys\nfriends(puffin) = 6\nhas(puffin, keys) = True\nname(puffin, Milo) = True\n# The puffin has a card that is red in color\nhas(puffin, card_with(red_color)) = True\n# The rabbit learns the basics of resource management from the cat\nlearn_basics_of_resource_management(rabbit, cat) = True\n# The cow does not wink at the salmon\nnot wink_at(cow, salmon) = True\n\n# Based on the game state and the rules and preferences, does the leopard learn the basics of resource management from the doctorfish?\nquestion = learn_basics_of_resource_management(leopard, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo does not owe money to the caterpillar, then the caterpillar learns elementary resource management from the donkey\nRule2: If something eats the food that belongs to the sheep, then it holds the same number of points as the squid\nRule3: If the grizzly bear has more than 4 friends, then the grizzly bear does not learn elementary resource management from the donkey\nRule4: If the grizzly bear has difficulty finding food, then the grizzly bear learns elementary resource management from the donkey\nRule5: If the caterpillar does not learn elementary resource management from the donkey but the grizzly bear learns elementary resource management from the donkey, then the donkey holds the same number of points as the kangaroo\nRule6: If the leopard removes one of the pieces of the donkey from the board, then the donkey does not offer a job to the cricket\nRule7: If the panther does not raise a peace flag for the caterpillar, then the caterpillar does not learn the basics of resource management from the donkey\nRule8: The donkey needs support from the dog whenever at least one animal holds an equal number of points as the squid\nRule9: If something does not hold an equal number of points as the kangaroo but needs the support of the dog, then it also offers a job to the cricket\n\nRule1 is preferred over Rule7\nRule4 is preferred over Rule3\nRule6 is preferred over Rule9\n\nThe current state of the game is as follows\nThe crocodile is named Paco\nThe grizzly bear has eleven friends and struggles to find food\nThe grizzly bear is named Tessa\nThe salmon eats the food of the sheep\nThe panther does not raise a peace flag for the caterpillar\n\nBased on the game state and the rules and preferences, does the donkey offer a job to the cricket?\nQuestion: Does the donkey offer a job to the cricket?",
        "idx": 113,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the buffalo does not owe $$$ to the caterpillar, then the caterpillar learns elementary resource management from the donkey\nrule1() = not owes_money_to(buffalo, caterpillar) => learn_elementary_resource_management(caterpillar, donkey)\n# Rule2: If something eats the food that belongs to the sheep, then it holds the same number of points as the squid, too\nrule2(something) = eat_food(something, sheep) => points(something) == points(squid)\n# Rule3: If the grizzly bear has more than 4 friends, then the grizzly bear does not learn elementary resource management from the donkey\nrule3() = friends(grizzly_bear) > 4 => not learn_elementary_resource_management(grizzly_bear, donkey)\n# Rule4: If the grizzly bear has difficulty to find food, then the grizzly bear learns elementary resource management from the donkey\nrule4() = difficulty_finding_food(grizzly_bear) => learn_elementary_resource_management(grizzly_bear, donkey)\n# Rule5: If the caterpillar does not learn elementary resource management from the donkey but the grizzly bear learns elementary resource management from the donkey, then the donkey holds the same number of points as the kangaroo unavoidably\nrule5() = not learn_elementary_resource_management(caterpillar, donkey) & learn_elementary_resource_management(grizzly_bear, donkey) => points(donkey) == points(kangaroo)\n# Rule6: If the leopard removes from the board one of the pieces of the donkey, then the donkey is not going to offer a job to the cricket\nrule6() = remove(leopard, piece_of(donkey)) => not offer_job(donkey, cricket)\n# Rule7: If the panther does not raise a peace flag for the caterpillar, then the caterpillar does not learn the basics of resource management from the donkey\nrule7() = not raise_flag_of_peace(panther, caterpillar) => not learn_basics_of_resource_management(caterpillar, donkey)\n# Rule8: The donkey needs support from the dog whenever at least one animal holds an equal number of points as the squid\nrule8() = holds_equal_points_as(something, squid) => needs_support(donkey, dog)\n# Rule9: If you see that something does not hold an equal number of points as the kangaroo but it needs the support of the dog, what can you certainly conclude? You can conclude that it also offers a job to the cricket.\nrule9(something) = not holds_equal_points_as(something, kangaroo) & needs_support(something, dog) => offer_job(something, cricket)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n\n# The current state of the game is as follows\n# The crocodile is named Paco\nname(crocodile, Paco) = True\n# The grizzly bear has eleven friends, and struggles to find food\nfriends(grizzly_bear) = 11\ndifficulty_finding_food(grizzly_bear) = True\n# The grizzly bear is named Tessa\nname(grizzly_bear, Tessa) = True\n# The salmon eats the food of the sheep\neat_food(salmon, sheep) = True\n# The panther does not raise a peace flag for the caterpillar\nnot raise_flag_of_peace(panther, caterpillar) = True\n\n# Based on the game state and the rules and preferences, does the donkey offer a job to the cricket?\nquestion = offer_job(donkey, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not burn the warehouse of the dog, then it winks at the panda bear\nRule2: If the puffin learns elementary resource management from the zander and the buffalo becomes an actual enemy of the zander, then the zander will not owe money to the bat\nRule3: If the hare has something to drink, then the hare burns the warehouse that is in possession of the meerkat\nRule4: If at least one animal burns the warehouse that is in possession of the meerkat, then the tilapia knows the defense plan of the zander\nRule5: If at least one animal shows all her cards to the ferret, then the puffin learns elementary resource management from the zander\nRule6: If at least one animal burns the warehouse that is in possession of the eel, then the zander owes money to the bat\nRule7: If something owes money to the cat but does not owe money to the bat, then it owes money to the phoenix\nRule8: If the hare does not have her keys, then the hare burns the warehouse of the meerkat\nRule9: If the buffalo has a high-quality paper, then it becomes an enemy of the zander\nRule10: If you saw one of the animals roll the dice for the caterpillar, then it does not owe money to the cat\nRule11: If the tilapia knows the defense plan of the zander, then the zander does not owe money to the phoenix\nRule12: If at least one animal winks at the panda bear, then the zander owes money to the cat\n\nRule10 is preferred over Rule12\nRule6 is preferred over Rule2\nRule7 is preferred over Rule11\n\nThe current state of the game is as follows\nThe buffalo published a high-quality paper\nThe hare has a card that is white in color and is holding her keys\nThe hare has hot chocolate\nThe whale shows all her cards to the ferret\nThe koala does not burn the warehouse of the dog\nThe leopard does not sing a victory song for the puffin\n\nBased on the game state and the rules and preferences, does the zander owe money to the phoenix?\nQuestion: Does the zander owe money to the phoenix?",
        "idx": 114,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not burn the warehouse of the dog, then it winks at the panda bear\nrule1() = not burn(warehouse_of(dog), something) => wink_at(something, panda_bear)\n# Rule2: If the puffin learns elementary resource management from the zander and the buffalo becomes an actual enemy of the zander, then the zander will not owe $$$ to the bat\nrule2() = learn(puffin, elementary_resource_management_from(zander)) & enemy(buffalo, zander) => not owes_money_to(zander, bat)\n# Rule3: If the hare has something to drink, then the hare burns the warehouse that is in possession of the meerkat\nrule3() = has(hare, drink) => burn(warehouse_of(meerkat), hare)\n# Rule4: If at least one animal burns the warehouse that is in possession of the meerkat, then the tilapia knows the defense plan of the zander\nrule4(something) = burn(warehouse_of(meerkat), something) => knows(defense_plan_of(zander), tilapia)\n# Rule5: If at least one animal shows all her cards to the ferret, then the puffin learns elementary resource management from the zander\nrule5(something) = show_cards(something, ferret) => learn(puffin, elementary_resource_management_from(zander))\n# Rule6: If at least one animal burns the warehouse that is in possession of the eel, then the zander owes money to the bat\nrule6(something) = burn(warehouse_of(eel), something) => owes_money_to(zander, bat)\n# Rule7: Be careful when something owes money to the cat but does not owe $$$ to the bat because in this case it will, surely, owe $$$ to the phoenix (this may or may not be problematic)\nrule7(something) = owes_money_to(something, cat) & not owes_money_to(something, bat) => owes_money_to(something, phoenix)\n# Rule8: If the hare does not have her keys, then the hare burns the warehouse of the meerkat\nrule8() = not has(hare, keys) => burn(warehouse_of(meerkat), hare)\n# Rule9: Regarding the buffalo, if it has a high-quality paper, then we can conclude that it becomes an enemy of the zander\nrule9() = has(buffalo, high_quality_paper) => enemy(buffalo, zander)\n# Rule10: If you are positive that you saw one of the animals rolls the dice for the caterpillar, you can be certain that it will not owe money to the cat\nrule10() = saw_roll_dice(something, caterpillar) => not owes_money_to(something, cat)\n# Rule11: If the tilapia knows the defense plan of the zander, then the zander is not going to owe money to the phoenix\nrule11() = knows(defense_plan_of(zander), tilapia) => not owes_money_to(zander, phoenix)\n# Rule12: If at least one animal winks at the panda bear, then the zander owes money to the cat.\nrule12(something) = wink_at(something, panda_bear) => owes_money_to(zander, cat)\n# Rule10 is preferred over Rule12\norder(rule10) > order(rule12) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n# Rule7 is preferred over Rule11\norder(rule7) > order(rule11) = True\n\n# The current state of the game is as follows\n# The buffalo published a high-quality paper\nhas(buffalo, high_quality_paper) = True\n# The hare has a card that is white in color, and is holding her keys\nhas(hare, card_with(white_color)) = True\nhas(hare, keys) = True\n# The hare has a hot chocolate\nhas(hare, hot_chocolate) = True\n# The whale shows all her cards to the ferret\nshow_cards(whale, ferret) = True\n# The koala does not burn the warehouse of the dog\nnot burn(warehouse_of(dog), koala) = True\n# The leopard does not sing a victory song for the puffin\nnot sing_song(leopard, victory_song_for(puffin)) = True\n\n# Based on the game state and the rules and preferences, does the zander owe money to the phoenix?\nquestion = owes_money_to(zander, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The eagle does not prepare armor for the turtle, in the case where the viperfish rolls the dice for the eagle\nRule2: If the eagle prepares armor for the turtle and the squid burns the warehouse of the turtle, then the turtle will not roll the dice for the polar bear\nRule3: If at least one animal rolls the dice for the baboon, then the elephant knows the defense plan of the black bear\nRule4: The squid unquestionably raises a peace flag for the swordfish, in the case where the oscar prepares armor for the squid\nRule5: If one of the animals does not eat the food of the penguin, then it will not know the defensive plans of the black bear\nRule6: If something does not proceed to the spot that is right after the spot of the whale, then it prepares armor for the turtle\nRule7: If the hippopotamus knocks down the fortress that belongs to the squid, then the squid owes money to the starfish\nRule8: If the eagle has something to sit on, then it proceeds to the spot right after the whale\nRule9: The squid burns the warehouse of the turtle whenever at least one animal knows the defensive plans of the black bear\nRule10: If the squid has a name whose first letter is the same as the first letter of the buffalo's name, then it does not raise a peace flag for the swordfish\nRule11: If the eagle has a card whose color starts with the letter \"i\", then it proceeds to the spot that is right after the spot of the whale\nRule12: If the eagle has fewer than seven friends, then it does not proceed to the spot that is right after the spot of the whale\n\nRule1 is preferred over Rule6\nRule10 is preferred over Rule4\nRule11 is preferred over Rule12\nRule5 is preferred over Rule3\nRule8 is preferred over Rule12\n\nThe current state of the game is as follows\nThe eagle has 5 friends that are wise and one friend that is not, and has a card that is violet in color\nThe hippopotamus knocks down the fortress of the squid\nThe oscar prepares armor for the squid\nThe spider rolls the dice for the baboon\nThe squid is named Milo\n\nBased on the game state and the rules and preferences, does the turtle roll the dice for the polar bear?\nQuestion: Does the turtle roll the dice for the polar bear?",
        "idx": 115,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The eagle does not prepare armor for the turtle, in the case where the viperfish rolls the dice for the eagle\nrule1() = roll_dice(viperfish, eagle) => not prepare_armor(eagle, turtle)\n# Rule2: If the eagle prepares armor for the turtle and the squid burns the warehouse of the turtle, then the turtle will not roll the dice for the polar bear\nrule2() = prepare_armor(eagle, turtle) & burn(warehouse_of(turtle), squid) => not roll_dice(turtle, polar_bear)\n# Rule3: If at least one animal rolls the dice for the baboon, then the elephant knows the defense plan of the black bear\nrule3(something) = roll_dice(something, baboon) => knows(defense_plan_of(black_bear), elephant)\n# Rule4: The squid unquestionably raises a peace flag for the swordfish, in the case where the oscar prepares armor for the squid\nrule4() = prepare_armor(oscar, squid) => raise_flag_of_peace(squid, swordfish)\n# Rule5: If you are positive that one of the animals does not eat the food of the penguin, you can be certain that it will not know the defensive plans of the black bear\nrule5(something) = not eat_food_of(penguin, something) => not knows(defensive_plans_of(black_bear), something)\n# Rule6: If something does not proceed to the spot that is right after the spot of the whale, then it prepares armor for the turtle\nrule6(something) = not proceed(something, spot_right_after(spot_of(whale))) => prepare_armor(something, turtle)\n# Rule7: If the hippopotamus knocks down the fortress that belongs to the squid, then the squid owes $$$ to the starfish\nrule7() = knock_down(fortress_of(squid), hippopotamus) => owes_money_to(squid, starfish)\n# Rule8: If the eagle has something to sit on, then the eagle proceeds to the spot right after the whale\nrule8() = has(eagle, something_to_sit_on) => proceed(eagle, spot_right_after(spot_of(whale)))\n# Rule9: The squid burns the warehouse of the turtle whenever at least one animal knows the defensive plans of the black bear\nrule9() = knows(defensive_plans_of(black_bear), something) => burn(warehouse_of(turtle), squid)\n# Rule10: Regarding the squid, if it has a name whose first letter is the same as the first letter of the buffalo's name, then we can conclude that it does not raise a peace flag for the swordfish\nrule10() = first_letter_of(name(squid)) == first_letter_of(name(buffalo)) => not raise_flag_of_peace(squid, swordfish)\n# Rule11: Regarding the eagle, if it has a card whose color starts with the letter \"i\", then we can conclude that it proceeds to the spot that is right after the spot of the whale\nrule11() = has(eagle, card_with(color_starting_with(\"i\"))) => proceed(eagle, spot_right_after(spot_of(whale)))\n# Rule12: If the eagle has fewer than seven friends, then the eagle does not proceed to the spot that is right after the spot of the whale.\nrule12() = friends(eagle) < 7 => not proceed(eagle, spot_right_after(spot_of(whale)))\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule10 is preferred over Rule4\norder(rule10) > order(rule4) = True\n# Rule11 is preferred over Rule12\norder(rule11) > order(rule12) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule8 is preferred over Rule12\norder(rule8) > order(rule12) = True\n\n# The current state of the game is as follows\n# The eagle has 5 friends that are wise and one friend that is not, and has a card that is violet in color\nfriends(eagle) = 5\nwise_friends(eagle) = 5\nnot_wise_friends(eagle) = 1\nhas(eagle, card_with(violet_color)) = True\n# The hippopotamus knocks down the fortress of the squid\nknock_down(fortress_of(squid), hippopotamus) = True\n# The oscar prepares armor for the squid\nprepare_armor(oscar, squid) = True\n# The spider rolls the dice for the baboon\nroll_dice(spider, baboon) = True\n# The squid is named Milo\nname(squid, Milo) = True\n\n# Based on the game state and the rules and preferences, does the turtle roll the dice for the polar bear?\nquestion = roll_dice(turtle, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the elephant starts with the first letter of the name of the hummingbird, then the elephant becomes an actual enemy of the ferret\nRule2: The cow knows the defensive plans of the tilapia whenever at least one animal needs the support of the bat\nRule3: If you are positive that you saw one of the animals owes money to the raven, you can be certain that it will also show all her cards to the tilapia\nRule4: If something does not eat the food that belongs to the blobfish, then it knocks down the fortress that belongs to the wolverine\nRule5: If something learns the basics of resource management from the hippopotamus, then it does not eat the food of the blobfish\nRule6: If the elephant has a leafy green vegetable, then the elephant becomes an actual enemy of the ferret\nRule7: If the ferret has more than five friends, then it does not owe money to the raven\nRule8: The tilapia eats the food that belongs to the blobfish whenever at least one animal becomes an enemy of the ferret\nRule9: If the kudu has a card with a color that is one of the rainbow colors, then it needs the support of the bat\nRule10: If at least one animal needs support from the eel, then the kudu does not need support from the bat\nRule11: Be careful when something does not offer a job to the whale but shows all her cards to the puffin because in this case it certainly does not become an actual enemy of the ferret\nRule12: If you are positive that you saw one of the animals removes one of the pieces of the viperfish, you can be certain that it will also owe money to the raven.\n\nRule1 is preferred over Rule11\nRule10 is preferred over Rule9\nRule5 is preferred over Rule8\nRule6 is preferred over Rule11\nRule7 is preferred over Rule12\n\nThe current state of the game is as follows\nThe elephant has a knife\nThe elephant does not offer a job to the whale\nThe elephant is named Pashmak\nThe ferret removes one of the pieces of the viperfish\nThe hummingbird is named Pablo\nThe kudu has a card that is orange in color\n\nBased on the game state and the rules and preferences, does the tilapia knock down the fortress of the wolverine?\nQuestion: Does the tilapia knock down the fortress of the wolverine?",
        "idx": 116,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the elephant has a name whose first letter is the same as the first letter of the hummingbird's name, then the elephant becomes an actual enemy of the ferret\nrule1() = first_letter_of(name(elephant)) == first_letter_of(name(hummingbird)) => enemy(elephant, ferret)\n# Rule2: The cow knows the defensive plans of the tilapia whenever at least one animal needs the support of the bat\nrule2() = needs_support(something, bat) => knows(defensive_plans_of(tilapia), cow)\n# Rule3: If you are positive that you saw one of the animals owes money to the raven, you can be certain that it will also show all her cards to the tilapia\nrule3() = owes_money_to(something, raven) => show_cards(something, tilapia)\n# Rule4: If something does not eat the food that belongs to the blobfish, then it knocks down the fortress that belongs to the wolverine\nrule4() = not eat_food(something, food_of(blobfish)) => knock_down(fortress_of(wolverine), something)\n# Rule5: If something learns the basics of resource management from the hippopotamus, then it does not eat the food of the blobfish\nrule5() = learn_basics_of_resource_management(something, hippopotamus) => not eat_food(something, food_of(blobfish))\n# Rule6: If the elephant has a leafy green vegetable, then the elephant becomes an actual enemy of the ferret\nrule6() = has(elephant, leafy_green_vegetable) => enemy(elephant, ferret)\n# Rule7: Regarding the ferret, if it has more than five friends, then we can conclude that it does not owe $$$ to the raven\nrule7() = friends(ferret) > 5 => not owes_money_to(ferret, raven)\n# Rule8: The tilapia eats the food that belongs to the blobfish whenever at least one animal becomes an enemy of the ferret\nrule8() = enemy(something, ferret) => eat_food(tilapia, food_of(blobfish))\n# Rule9: Regarding the kudu, if it has a card whose color is one of the rainbow colors, then we can conclude that it needs the support of the bat\nrule9() = has(kudu, card_with(color_in(rainbow_colors))) => needs_support(kudu, bat)\n# Rule10: If at least one animal needs support from the eel, then the kudu does not need support from the bat\nrule10() = needs_support(something, eel) => not needs_support(kudu, bat)\n# Rule11: Be careful when something does not offer a job to the whale but shows all her cards to the puffin because in this case it certainly does not become an actual enemy of the ferret (this may or may not be problematic)\nrule11() = not offer_job(something, whale) & show_cards(something, puffin) => not enemy(something, ferret)\n# Rule12: If you are positive that you saw one of the animals removes one of the pieces of the viperfish, you can be certain that it will also owe $$$ to the raven.\nrule12() = remove(something, piece_of(viperfish)) => owes_money_to(something, raven)\n# Rule1 is preferred over Rule11\norder(rule1) > order(rule11) = True\n# Rule10 is preferred over Rule9\norder(rule10) > order(rule9) = True\n# Rule5 is preferred over Rule8\norder(rule5) > order(rule8) = True\n# Rule6 is preferred over Rule11\norder(rule6) > order(rule11) = True\n# Rule7 is preferred over Rule12\norder(rule7) > order(rule12) = True\n\n# The current state of the game is as follows\n# The elephant has a knife, and does not offer a job to the whale\nhas(elephant, knife) = True\nnot offer_job(elephant, whale) = True\n# The elephant is named Pashmak\nname(elephant, Pashmak) = True\n# The ferret removes from the board one of the pieces of the viperfish\nremove(ferret, piece_of(viperfish)) = True\n# The hummingbird is named Pablo\nname(hummingbird, Pablo) = True\n# The kudu has a card that is orange in color\nhas(kudu, card_with(orange_color)) = True\n\n# Based on the game state and the rules and preferences, does the tilapia knock down the fortress of the wolverine?\nquestion = knock_down(fortress_of(wolverine), tilapia)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals eats the food of the lion, you can be certain that it will also learn the basics of resource management from the bat\nRule2: If the cow sings a victory song for the panda bear, then the panda bear eats the food that belongs to the lion\nRule3: If the bat has a card with a primary color, then it does not proceed to the spot right after the panda bear\nRule4: If at least one animal winks at the leopard, then the panda bear does not learn the basics of resource management from the bat\nRule5: If the squid is a fan of Chris Ronaldo, then the squid proceeds to the spot that is right after the spot of the panda bear\nRule6: If the squid proceeds to the spot right after the panda bear and the bat does not proceed to the spot that is right after the spot of the panda bear, then the panda bear steals five of the points of the panther\nRule7: If something steals five points from the panther and also learns the basics of resource management from the bat, then it needs the support of the elephant\nRule8: If the bat has more than 6 friends, then it does not proceed to the spot that is right after the spot of the panda bear\n\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe bat has a card that is violet in color\nThe bat has sixteen friends\nThe cow sings a victory song for the panda bear\nThe hare becomes an enemy of the squid\nThe squid supports Chris Ronaldo\n\nBased on the game state and the rules and preferences, does the panda bear need support from the elephant?\nQuestion: Does the panda bear need support from the elephant?",
        "idx": 117,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals eats the food of the lion, you can be certain that it will also learn the basics of resource management from the bat\nrule1() = eats_food_of(something, lion) => learn_basics_of_resource_management(something, bat)\n# Rule2: If the cow sings a song of victory for the panda bear, then the panda bear eats the food that belongs to the lion\nrule2() = sing_song(cow, victory_song_for(panda_bear)) => eats_food_of(panda_bear, lion)\n# Rule3: Regarding the bat, if it has a card with a primary color, then we can conclude that it does not proceed to the spot right after the panda bear\nrule3() = has(bat, card_with(primary_color)) => not proceed(bat, spot_right_after(spot_of(panda_bear)))\n# Rule4: If at least one animal winks at the leopard, then the panda bear does not learn the basics of resource management from the bat\nrule4() = wink_at(something, leopard) => not learn_basics_of_resource_management(panda_bear, bat)\n# Rule5: If the squid is a fan of Chris Ronaldo, then the squid proceeds to the spot that is right after the spot of the panda bear\nrule5() = fan_of(squid, Chris_Ronaldo) => proceed(squid, spot_right_after(spot_of(panda_bear)))\n# Rule6: For the panda bear, if the belief is that the squid proceeds to the spot right after the panda bear and the bat does not proceed to the spot that is right after the spot of the panda bear, then you can add \"the panda bear steals five of the points of the panther\" to your conclusions\nrule6() = proceed(squid, spot_right_after(spot_of(panda_bear))) & not proceed(bat, spot_right_after(spot_of(panda_bear))) => steal_points(panda_bear, 5, panther)\n# Rule7: Be careful when something steals five points from the panther and also learns the basics of resource management from the bat because in this case it will surely need the support of the elephant (this may or may not be problematic)\nrule7(something) = steal_points(something, 5, panther) & learn_basics_of_resource_management(something, bat) => need_support(something, elephant)\n# Rule8: Regarding the bat, if it has more than 6 friends, then we can conclude that it does not proceed to the spot that is right after the spot of the panda bear.\nrule8() = friends(bat) > 6 => not proceed(bat, spot_right_after(spot_of(panda_bear)))\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The bat has a card that is violet in color\nhas(bat, card_with(violet_color)) = True\n# The bat has sixteen friends\nfriends(bat) = 16\n# The cow sings a victory song for the panda bear\nsing_song(cow, victory_song_for(panda_bear)) = True\n# The hare becomes an enemy of the squid\nenemy(hare, squid) = True\n# The squid supports Chris Ronaldo\nsupports(squid, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the panda bear need support from the elephant?\nquestion = need_support(panda_bear, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the amberjack does not attack the green fields owned by the zander and the turtle removes one of the pieces of the zander, then the zander will not offer a job to the kangaroo\nRule2: If the amberjack has published a high-quality paper, then it does not attack the green fields owned by the zander\nRule3: If the name of the amberjack starts with the same letter as the name of the black bear, then the amberjack does not attack the green fields owned by the zander\nRule4: If the turtle has published a high-quality paper, then it removes one of the pieces of the zander\nRule5: If at least one animal needs support from the spider, then the zander offers a job position to the kangaroo\nRule6: The lion eats the food of the grizzly bear whenever at least one animal knocks down the fortress of the cricket\nRule7: If something offers a job position to the kangaroo but does not know the defense plan of the kudu, then it does not owe money to the baboon\nRule8: If the whale steals five points from the eagle, then the eagle needs support from the spider\nRule9: If the turtle has a card with a primary color, then it removes one of the pieces of the zander\nRule10: If at least one animal eats the food that belongs to the grizzly bear, then the zander does not know the defensive plans of the kudu\n\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe aardvark knocks down the fortress of the cricket\nThe amberjack has 6 friends, 3 of them are smart and 3 of them are not\nThe name of the amberjack is Beauty\nThe amberjack recently read a high-quality paper\nThe name of the black bear is Buddy\nThe turtle has a card that is white in color\nThe turtle published a high-quality paper\nThe whale steals five points from the eagle\n\nBased on the game state and the rules and preferences, does the zander owe money to the baboon?\nQuestion: Does the zander owe money to the baboon?",
        "idx": 118,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the amberjack does not attack the green fields whose owner is the zander however the turtle removes from the board one of the pieces of the zander, then the zander will not offer a job to the kangaroo\nrule1() = not attack(amberjack, green_fields_of(zander)) & remove(turtle, piece_of(zander)) => not offer_job(zander, kangaroo)\n# Rule2: If the amberjack has published a high-quality paper, then the amberjack does not attack the green fields whose owner is the zander\nrule2() = publish_high_quality_paper(amberjack) => not attack(amberjack, green_fields_of(zander))\n# Rule3: If the amberjack has a name whose first letter is the same as the first letter of the black bear's name, then the amberjack does not attack the green fields of the zander\nrule3() = first_letter_of(name(amberjack)) == first_letter_of(name(black_bear)) => not attack(amberjack, green_fields_of(zander))\n# Rule4: Regarding the turtle, if it has a high-quality paper, then we can conclude that it removes one of the pieces of the zander\nrule4() = publish_high_quality_paper(turtle) => remove(turtle, piece_of(zander))\n# Rule5: If at least one animal needs support from the spider, then the zander offers a job position to the kangaroo\nrule5(something) = needs_support(something, spider) => offer_job(zander, kangaroo)\n# Rule6: The lion eats the food of the grizzly bear whenever at least one animal knocks down the fortress of the cricket\nrule6() = knock_down(something, fortress_of(cricket)) => eat_food(lion, food_of(grizzly_bear))\n# Rule7: Be careful when something offers a job position to the kangaroo but does not know the defense plan of the kudu because in this case it will, surely, not owe money to the baboon (this may or may not be problematic)\nrule7(something) = offer_job(something, kangaroo) & not knows(defense_plan_of(kudu), something) => not owe_money_to(something, baboon)\n# Rule8: The eagle unquestionably needs support from the spider, in the case where the whale steals five points from the eagle\nrule8() = steal_points(whale, 5, eagle) => needs_support(eagle, spider)\n# Rule9: If the turtle has a card with a primary color, then the turtle removes from the board one of the pieces of the zander\nrule9() = has(turtle, card_with(primary_color)) => remove(turtle, piece_of(zander))\n# Rule10: The zander does not know the defensive plans of the kudu whenever at least one animal eats the food that belongs to the grizzly bear.\nrule10() = eat_food(something, food_of(grizzly_bear)) => not knows(defense_plan_of(kudu), zander)\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The aardvark knocks down the fortress of the cricket\nknock_down(aardvark, fortress_of(cricket)) = True\n# The amberjack has 3 friends that are smart and three friends that are not, and is named Beauty\nfriends(amberjack) = 6\nfriends(amberjack, smart) = 3\nfriends(amberjack, not_smart) = 3\nname(amberjack, Beauty) = True\n# The amberjack recently read a high-quality paper\nread_high_quality_paper(amberjack) = True\n# The black bear is named Buddy\nname(black_bear, Buddy) = True\n# The turtle has a card that is white in color\nhas(turtle, card_with(white_color)) = True\n# The turtle published a high-quality paper\npublish_high_quality_paper(turtle) = True\n# The whale steals five points from the eagle\nsteal_points(whale, 5, eagle) = True\n\n# Based on the game state and the rules and preferences, does the zander owe money to the baboon?\nquestion = owe_money_to(zander, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the gecko has a card with a primary color, then the gecko winks at the catfish\nRule2: If something winks at the octopus, then it does not steal five points from the sun bear\nRule3: If the gecko needs support from the sun bear and the eel does not steal five points from the sun bear, then the sun bear offers a job position to the canary\nRule4: If something winks at the catfish, then it needs support from the sun bear, too\nRule5: If the black bear eats the food that belongs to the eel, then the eel winks at the octopus\nRule6: If the crocodile took a bike from the store, then it gives a magnifier to the salmon\n\nThe current state of the game is as follows\nThe black bear eats the food of the eel\nThe crocodile stole a bike from the store\nThe gecko has a card that is violet in color\nThe moose respects the grasshopper\n\nBased on the game state and the rules and preferences, does the sun bear offer a job to the canary?\nQuestion: Does the sun bear offer a job to the canary?",
        "idx": 119,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the gecko has a card with a primary color, then the gecko winks at the catfish\nrule1() = has(gecko, card_with(primary_color)) => wink(gecko, catfish)\n# Rule2: If something winks at the octopus, then it does not steal five of the points of the sun bear\nrule2() = wink(something, octopus) => not steal_points(something, 5, sun_bear)\n# Rule3: If the gecko needs support from the sun bear and the eel does not steal five of the points of the sun bear, then, inevitably, the sun bear offers a job position to the canary\nrule3() = needs_support(gecko, sun_bear) & not steal_points(eel, 5, sun_bear) => offer_job_position(sun_bear, canary)\n# Rule4: If something winks at the catfish, then it needs support from the sun bear, too\nrule4() = wink(something, catfish) => needs_support(something, sun_bear)\n# Rule5: If the black bear eats the food that belongs to the eel, then the eel winks at the octopus\nrule5() = eat_food(black_bear, food_of(eel)) => wink(eel, octopus)\n# Rule6: Regarding the crocodile, if it took a bike from the store, then we can conclude that it gives a magnifier to the salmon.\nrule6() = took_bike(crocodile, store) => give_magnifier(crocodile, salmon)\n\n# The current state of the game is as follows\n# The black bear eats the food of the eel\neat_food(black_bear, food_of(eel)) = True\n# The crocodile stole a bike from the store\ntook_bike(crocodile, store) = True\n# The gecko has a card that is violet in color\nhas(gecko, card_with(violet_color)) = True\n# The moose respects the grasshopper\nrespects(moose, grasshopper) = True\n\n# Based on the game state and the rules and preferences, does the sun bear offer a job to the canary?\nquestion = offer_job_position(sun_bear, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something holds an equal number of points as the mosquito but does not learn the basics of resource management from the cheetah because in this case it will surely sing a song of victory for the panda bear\nRule2: If the panda bear does not knock down the fortress of the squid and the kangaroo does not burn the warehouse of the squid, then the squid knows the defensive plans of the meerkat\nRule3: If the buffalo sings a song of victory for the panda bear, then the panda bear does not knock down the fortress of the squid\nRule4: If the dog has fewer than eleven friends, then the dog attacks the green fields of the eel\nRule5: The kangaroo does not burn the warehouse of the squid whenever at least one animal attacks the green fields of the eel\n\nThe current state of the game is as follows\nThe buffalo holds the same number of points as the mosquito but does not learn the basics of resource management from the cheetah\nThe dog has 9 friends\nThe leopard needs support from the mosquito\n\nBased on the game state and the rules and preferences, does the squid know the defensive plans of the meerkat?\nQuestion: Does the squid know the defensive plans of the meerkat?",
        "idx": 120,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something holds an equal number of points as the mosquito but does not learn the basics of resource management from the cheetah because in this case it will, surely, sing a song of victory for the panda bear (this may or may not be problematic)\nrule1(something) = points(something) == points(mosquito) & not learn_basics_of_resource_management(something, cheetah) => sing_song(something, victory_song_for(panda_bear))\n# Rule2: For the squid, if the belief is that the panda bear does not knock down the fortress of the squid and the kangaroo does not burn the warehouse of the squid, then you can add \"the squid knows the defensive plans of the meerkat\" to your conclusions\nrule2() = not knock_down(panda_bear, fortress_of(squid)) & not burn(warehouse_of(squid), kangaroo) => knows_defensive_plans(squid, meerkat)\n# Rule3: If the buffalo sings a song of victory for the panda bear, then the panda bear is not going to knock down the fortress of the squid\nrule3() = sing_song(buffalo, victory_song_for(panda_bear)) => not knock_down(panda_bear, fortress_of(squid))\n# Rule4: If the dog has fewer than eleven friends, then the dog attacks the green fields of the eel\nrule4() = friends(dog) < 11 => attack(dog, green_fields_of(eel))\n# Rule5: The kangaroo does not burn the warehouse of the squid whenever at least one animal attacks the green fields of the eel.\nrule5() = attack(something, green_fields_of(eel)) => not burn(warehouse_of(squid), kangaroo)\n\n# The current state of the game is as follows\n# The buffalo holds the same number of points as the mosquito but does not learn the basics of resource management from the cheetah\npoints(buffalo) == points(mosquito) = True\nnot learn_basics_of_resource_management(buffalo, cheetah) = True\n# The dog has 9 friends\nfriends(dog) = 9\n# The leopard needs support from the mosquito\nneeds_support(leopard, mosquito) = True\n\n# Based on the game state and the rules and preferences, does the squid know the defensive plans of the meerkat?\nquestion = knows_defensive_plans(squid, meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something needs the support of the parrot, then it shows her cards (all of them) to the canary, too\nRule2: Be careful when something sings a victory song for the polar bear and also rolls the dice for the hippopotamus because in this case it will surely not show her cards (all of them) to the canary (this may or may not be problematic)\nRule3: If the elephant has a card whose color starts with the letter \"b\", then it removes one of the pieces of the lion\nRule4: If the squid has a leafy green vegetable, then it does not burn the warehouse that is in possession of the lion\nRule5: If the tilapia has a leafy green vegetable, then the tilapia holds the same number of points as the lion\nRule6: If the tilapia holds the same number of points as the lion and the squid does not burn the warehouse of the lion, then the lion sings a song of victory for the polar bear\nRule7: If the eel eats the food that belongs to the lion, then the lion does not sing a song of victory for the polar bear\nRule8: If the elephant removes one of the pieces of the lion, then the lion rolls the dice for the hippopotamus\n\nRule1 is preferred over Rule2\nRule7 is preferred over Rule6\n\nThe current state of the game is as follows\nThe elephant has a card that is blue in color\nThe squid has a card that is blue in color\nThe squid has some spinach\nThe tilapia has some spinach\n\nBased on the game state and the rules and preferences, does the lion show all her cards to the canary?\nQuestion: Does the lion show all her cards to the canary?",
        "idx": 121,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something needs the support of the parrot, then it shows her cards (all of them) to the canary, too\nrule1() = needs_support(something, parrot) => show_cards(something, canary)\n# Rule2: Be careful when something sings a victory song for the polar bear and also rolls the dice for the hippopotamus because in this case it will surely not show her cards (all of them) to the canary (this may or may not be problematic)\nrule2() = sing_song(something, victory_song_for(polar_bear)) & roll_dice(something, hippopotamus) => not show_cards(something, canary)\n# Rule3: Regarding the elephant, if it has a card whose color starts with the letter \"b\", then we can conclude that it removes from the board one of the pieces of the lion\nrule3() = has(elephant, card_with(color_starting_with(\"b\"))) => remove(elephant, piece_of(lion))\n# Rule4: Regarding the squid, if it has a leafy green vegetable, then we can conclude that it does not burn the warehouse that is in possession of the lion\nrule4() = has(squid, leafy_green_vegetable) => not burn(warehouse_of(lion))\n# Rule5: If the tilapia has a leafy green vegetable, then the tilapia holds the same number of points as the lion\nrule5() = has(tilapia, leafy_green_vegetable) => points(tilapia) == points(lion)\n# Rule6: For the lion, if the belief is that the tilapia holds the same number of points as the lion and the squid does not burn the warehouse of the lion, then you can add \"the lion sings a song of victory for the polar bear\" to your conclusions\nrule6() = points(tilapia) == points(lion) & not burn(warehouse_of(lion)) => sing_song(lion, victory_song_for(polar_bear))\n# Rule7: If the eel eats the food that belongs to the lion, then the lion is not going to sing a song of victory for the polar bear\nrule7() = eat(eel, food_of(lion)) => not sing_song(lion, victory_song_for(polar_bear))\n# Rule8: The lion unquestionably rolls the dice for the hippopotamus, in the case where the elephant removes one of the pieces of the lion.\nrule8() = remove(elephant, piece_of(lion)) => roll_dice(lion, hippopotamus)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n\n# The current state of the game is as follows\n# The elephant has a card that is blue in color\nhas(elephant, card_with(blue_color)) = True\n# The squid has a card that is blue in color, and has some spinach\nhas(squid, card_with(blue_color)) = True\nhas(squid, spinach) = True\n# The tilapia has some spinach\nhas(tilapia, spinach) = True\n\n# Based on the game state and the rules and preferences, does the lion show all her cards to the canary?\nquestion = show_cards(lion, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale has fewer than 7 friends, then the whale does not sing a song of victory for the moose\nRule2: If the whale has a card whose color appears in the flag of Italy, then the whale sings a victory song for the moose\nRule3: If the leopard knocks down the fortress of the moose and the whale sings a song of victory for the moose, then the moose respects the tilapia\nRule4: If the whale has a name whose first letter is the same as the first letter of the cricket's name, then the whale does not sing a victory song for the moose\nRule5: If the moose has more than 7 friends, then the moose respects the doctorfish\nRule6: If something offers a job position to the sea bass and also respects the tilapia, then it does not wink at the gecko\nRule7: If the whale has a sharp object, then the whale sings a song of victory for the moose\nRule8: If the moose has something to sit on, then the moose does not burn the warehouse of the black bear\nRule9: If one of the animals knocks down the fortress that belongs to the carp, then it also knocks down the fortress of the moose\nRule10: If one of the animals does not burn the warehouse of the black bear, then it proceeds to the spot right after the eel\nRule11: If one of the animals steals five points from the eel, then it winks at the gecko\n\nRule2 is preferred over Rule1\nRule2 is preferred over Rule4\nRule6 is preferred over Rule11\nRule7 is preferred over Rule1\nRule7 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cricket is named Lola\nThe leopard knocks down the fortress of the carp\nThe moose has 17 friends and a couch\nThe whale has a card that is red in color, has hot chocolate, and has thirteen friends\n\nBased on the game state and the rules and preferences, does the moose wink at the gecko?\nQuestion: Does the moose wink at the gecko?",
        "idx": 122,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the whale has fewer than 7 friends, then the whale does not sing a song of victory for the moose\nrule1() = friends(whale) < 7 => not sing_song(whale, victory_song_for(moose))\n# Rule2: If the whale has a card whose color appears in the flag of Italy, then the whale sings a victory song for the moose\nrule2() = has(whale, card) and color(card) in colors_of(flag_of_Italy) => sing_song(whale, victory_song_for(moose))\n# Rule3: If the leopard knocks down the fortress of the moose and the whale sings a song of victory for the moose, then the moose respects the tilapia\nrule3() = knock_down(fortress_of(leopard), fortress_of(moose)) & sing_song(whale, victory_song_for(moose)) => respects(moose, tilapia)\n# Rule4: If the whale has a name whose first letter is the same as the first letter of the cricket's name, then the whale does not sing a victory song for the moose\nrule4() = first_letter_of(name(whale)) == first_letter_of(name(cricket)) => not sing_song(whale, victory_song_for(moose))\n# Rule5: If the moose has more than 7 friends, then the moose respects the doctorfish\nrule5() = friends(moose) > 7 => respects(moose, doctorfish)\n# Rule6: Be careful when something offers a job position to the sea bass and also respects the tilapia because in this case it will surely not wink at the gecko (this may or may not be problematic)\nrule6(something) = offer_job_position(something, sea_bass) & respects(something, tilapia) => not wink_at(something, gecko)\n# Rule7: If the whale has a sharp object, then the whale sings a song of victory for the moose\nrule7() = has(whale, sharp_object) => sing_song(whale, victory_song_for(moose))\n# Rule8: If the moose has something to sit on, then the moose does not burn the warehouse of the black bear\nrule8() = has(moose, something_to_sit_on) => not burn(warehouse_of(black_bear))\n# Rule9: If you are positive that you saw one of the animals knocks down the fortress that belongs to the carp, you can be certain that it will also knock down the fortress of the moose\nrule9(something) = knock_down(fortress_of(carp), something) => knock_down(fortress_of(moose), something)\n# Rule10: If you are positive that one of the animals does not burn the warehouse of the black bear, you can be certain that it will proceed to the spot right after the eel without a doubt\nrule10(something) = not burn(warehouse_of(black_bear), something) => proceed(something, spot_right_after(spot_of(eel)))\n# Rule11: If you are positive that you saw one of the animals steals five points from the eel, you can be certain that it will also wink at the gecko.\nrule11(something) = steal_points(something, 5, eel) => wink_at(something, gecko)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule6 is preferred over Rule11\norder(rule6) > order(rule11) = True\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cricket is named Lola\nname(cricket, Lola) = True\n# The leopard knocks down the fortress of the carp\nknock_down(fortress_of(leopard), fortress_of(carp)) = True\n# The moose has 17 friends, and has a couch\nfriends(moose) = 17\nhas(moose, couch) = True\n# The whale has a card that is red in color, has a hot chocolate, and has thirteen friends.\nhas(whale, card_with(red_color)) = True\nhas(whale, hot_chocolate) = True\nfriends(whale) = 13\n\n# Based on the game state and the rules and preferences, does the moose wink at the gecko?\nquestion = wink_at(moose, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal sings a song of victory for the penguin, then the whale knows the defensive plans of the koala\nRule2: If the whale works fewer hours than before, then the whale does not know the defense plan of the koala\nRule3: The koala does not show all her cards to the cockroach whenever at least one animal proceeds to the spot right after the spider\nRule4: If the whale knows the defensive plans of the koala, then the koala does not give a magnifying glass to the raven\nRule5: If the baboon has fewer than 12 friends, then it proceeds to the spot right after the spider\nRule6: If something does not show all her cards to the cockroach and also does not give a magnifying glass to the raven, then it attacks the green fields whose owner is the viperfish\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe baboon has a low-income job\nThe baboon has seven friends and has some arugula\nThe panda bear sings a victory song for the penguin\n\nBased on the game state and the rules and preferences, does the koala attack the green fields whose owner is the viperfish?\nQuestion: Does the koala attack the green fields whose owner is the viperfish?",
        "idx": 123,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal sings a song of victory for the penguin, then the whale knows the defensive plans of the koala\nrule1() = sing_song(something, victory_song_for(penguin)) => knows(defensive_plans_of(koala), whale)\n# Rule2: If the whale works fewer hours than before, then the whale does not know the defense plan of the koala\nrule2() = reduce_work_hours(whale) => not knows(defense_plan_of(koala), whale)\n# Rule3: The koala does not show all her cards to the cockroach whenever at least one animal proceeds to the spot right after the spider\nrule3() = proceed(something, spot_right_after(spot_of(spider))) => not show_cards(koala, cockroach)\n# Rule4: If the whale knows the defensive plans of the koala, then the koala is not going to give a magnifying glass to the raven\nrule4() = knows(defensive_plans_of(koala), whale) => not give(koala, magnifying_glass, raven)\n# Rule5: Regarding the baboon, if it has fewer than 12 friends, then we can conclude that it proceeds to the spot right after the spider\nrule5() = friends(baboon) < 12 => proceed(baboon, spot_right_after(spot_of(spider)))\n# Rule6: If you see that something does not show her cards (all of them) to the cockroach and also does not give a magnifying glass to the raven, what can you certainly conclude? You can conclude that it also attacks the green fields whose owner is the viperfish.\nrule6(something) = not show_cards(something, cockroach) & not give(something, magnifying_glass, raven) => attack_green_fields(something, owner_is(viperfish))\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The baboon has a low-income job\nhas(baboon, low_income_job) = True\n# The baboon has seven friends, and has some arugula\nfriends(baboon) = 7\nhas(baboon, arugula) = True\n# The panda bear sings a victory song for the penguin\nsing_song(panda_bear, victory_song_for(penguin)) = True\n\n# Based on the game state and the rules and preferences, does the koala attack the green fields whose owner is the viperfish?\nquestion = attack_green_fields(koala, owner_is(viperfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the moose starts with the first letter of the name of the wolverine, then the moose knocks down the fortress of the gecko\nRule2: If something burns the warehouse that is in possession of the hummingbird, then it does not know the defensive plans of the catfish\nRule3: If something owes money to the panda bear, then it does not knock down the fortress that belongs to the gecko\nRule4: If one of the animals does not knock down the fortress of the gecko, then it will burn the warehouse that is in possession of the hummingbird\nRule5: If the moose has a card whose color starts with the letter \"b\", then the moose knocks down the fortress of the gecko\n\nRule1 is preferred over Rule3\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe moose is named Pablo and owes money to the panda bear\nThe wolverine is named Lily\n\nBased on the game state and the rules and preferences, does the moose know the defensive plans of the catfish?\nQuestion: Does the moose know the defensive plans of the catfish?",
        "idx": 124,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the moose has a name whose first letter is the same as the first letter of the wolverine's name, then the moose knocks down the fortress of the gecko\nrule1() = first_letter_of(name(moose)) == first_letter_of(name(wolverine)) => knock_down(moose, fortress_of(gecko))\n# Rule2: If something burns the warehouse that is in possession of the hummingbird, then it does not know the defensive plans of the catfish\nrule2() = burn(warehouse_of(hummingbird), something) => not knows_defensive_plans(something, catfish)\n# Rule3: If something owes money to the panda bear, then it does not knock down the fortress that belongs to the gecko\nrule3() = owes_money_to(something, panda_bear) => not knock_down(fortress_of(gecko), something)\n# Rule4: If you are positive that one of the animals does not knock down the fortress of the gecko, you can be certain that it will burn the warehouse that is in possession of the hummingbird without a doubt\nrule4(something) = not knock_down(fortress_of(gecko), something) => burn(warehouse_of(hummingbird), something)\n# Rule5: If the moose has a card whose color starts with the letter \"b\", then the moose knocks down the fortress of the gecko.\nrule5() = has(moose, card_with(color_starting_with(\"b\"))) => knock_down(moose, fortress_of(gecko))\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The moose is named Pablo, and owes money to the panda bear\nname(moose, Pablo) = True\nowes_money_to(moose, panda_bear) = True\n# The wolverine is named Lily\nname(wolverine, Lily) = True\n\n# Based on the game state and the rules and preferences, does the moose know the defensive plans of the catfish?\nquestion = knows_defensive_plans(moose, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something respects the baboon, then it respects the goldfish, too\nRule2: If something attacks the green fields of the cheetah and offers a job position to the lion, then it becomes an actual enemy of the kangaroo\nRule3: The goldfish removes one of the pieces of the doctorfish, in the case where the tilapia respects the goldfish\nRule4: If the hummingbird has a high-quality paper, then it holds the same number of points as the doctorfish\nRule5: If the cow does not wink at the doctorfish, then the doctorfish attacks the green fields owned by the cheetah\nRule6: If the hummingbird has a card with a primary color, then it holds an equal number of points as the doctorfish\nRule7: If the cow has a card with a color from the rainbow colors, then it does not wink at the doctorfish\nRule8: The doctorfish offers a job position to the lion whenever at least one animal rolls the dice for the grizzly bear\nRule9: If the penguin raises a peace flag for the cow, then the cow winks at the doctorfish\nRule10: If at least one animal shows all her cards to the ferret, then it does not respect the goldfish\nRule11: If the goldfish removes one of the pieces of the doctorfish and the elephant shows all her cards to the doctorfish, then the doctorfish does not become an actual enemy of the kangaroo\nRule12: If the rabbit shows all her cards to the carp, then the carp rolls the dice for the grizzly bear\n\nRule10 is preferred over Rule1\nRule11 is preferred over Rule2\nRule7 is preferred over Rule9\n\nThe current state of the game is as follows\nThe hummingbird has a card that is violet in color and published a high-quality paper\nThe penguin raises a peace flag for the cow\nThe rabbit shows all her cards to the carp\nThe turtle becomes an enemy of the aardvark\nThe tilapia does not wink at the baboon\n\nBased on the game state and the rules and preferences, does the doctorfish become an enemy of the kangaroo?\nQuestion: Does the doctorfish become an enemy of the kangaroo?",
        "idx": 125,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something respects the baboon, then it respects the goldfish, too\nrule1() = respects(something, baboon) => respects(something, goldfish)\n# Rule2: Be careful when something attacks the green fields of the cheetah and also offers a job position to the lion because in this case it will surely become an actual enemy of the kangaroo (this may or may not be problematic)\nrule2(something) = attack(something, green_fields_of(cheetah)) & offer_job_position(something, lion) => enemy(something, kangaroo)\n# Rule3: The goldfish unquestionably removes one of the pieces of the doctorfish, in the case where the tilapia respects the goldfish\nrule3() = respects(tilapia, goldfish) => remove(goldfish, piece_of(doctorfish))\n# Rule4: If the hummingbird has a high-quality paper, then the hummingbird holds the same number of points as the doctorfish\nrule4() = has(hummingbird, high_quality_paper) => points(hummingbird) == points(doctorfish)\n# Rule5: If the cow does not wink at the doctorfish, then the doctorfish attacks the green fields whose owner is the cheetah\nrule5() = not wink(cow, doctorfish) => attack(green_fields_of(cheetah), doctorfish)\n# Rule6: Regarding the hummingbird, if it has a card with a primary color, then we can conclude that it holds an equal number of points as the doctorfish\nrule6() = has(hummingbird, card_with(primary_color)) => points(hummingbird) == points(doctorfish)\n# Rule7: Regarding the cow, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not wink at the doctorfish\nrule7() = has(cow, card_with(color_in(rainbow_colors))) => not wink(cow, doctorfish)\n# Rule8: The doctorfish offers a job to the lion whenever at least one animal rolls the dice for the grizzly bear\nrule8() = rolls_dice_for(grizzly_bear, something) => offer_job_position(doctorfish, lion)\n# Rule9: If the penguin raises a peace flag for the cow, then the cow winks at the doctorfish\nrule9() = raise_flag_of_peace(penguin, cow) => wink(cow, doctorfish)\n# Rule10: If you are positive that you saw one of the animals shows her cards (all of them) to the ferret, you can be certain that it will not respect the goldfish\nrule10(something) = show_cards(something, ferret) => not respects(something, goldfish)\n# Rule11: If the goldfish removes from the board one of the pieces of the doctorfish and the elephant shows all her cards to the doctorfish, then the doctorfish will not become an actual enemy of the kangaroo\nrule11() = remove(goldfish, piece_of(doctorfish)) & show_cards(elephant, doctorfish) => not enemy(doctorfish, kangaroo)\n# Rule12: If the rabbit shows all her cards to the carp, then the carp rolls the dice for the grizzly bear.\nrule12() = show_cards(rabbit, carp) => rolls_dice_for(grizzly_bear, carp)\n# Rule10 is preferred over Rule1\norder(rule10) > order(rule1) = True\n# Rule11 is preferred over Rule2\norder(rule11) > order(rule2) = True\n# Rule7 is preferred over Rule9\norder(rule7) > order(rule9) = True\n\n# The current state of the game is as follows\n# The hummingbird has a card that is violet in color, and published a high-quality paper\nhas(hummingbird, card_with(violet_color)) = True\npublished(high_quality_paper, hummingbird) = True\n# The penguin raises a peace flag for the cow\nraise_flag_of_peace(penguin, cow) = True\n# The rabbit shows all her cards to the carp\nshow_cards(rabbit, carp) = True\n# The turtle becomes an enemy of the aardvark\nenemy(turtle, aardvark) = True\n# The tilapia does not wink at the baboon\nnot wink(tilapia, baboon) = True\n\n# Based on the game state and the rules and preferences, does the doctorfish become an enemy of the kangaroo?\nquestion = enemy(doctorfish, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the puffin owes money to the aardvark, then the aardvark holds the same number of points as the octopus\nRule2: If the cat has fewer than 10 friends, then it becomes an enemy of the octopus\nRule3: If the octopus does not respect the sheep, then the sheep eats the food of the parrot\nRule4: If at least one animal attacks the green fields of the eagle, then the aardvark does not hold the same number of points as the octopus\nRule5: If the cat becomes an enemy of the octopus and the aardvark holds an equal number of points as the octopus, then the octopus does not respect the sheep\n\nRule1 is preferred over Rule4\n\nThe current state of the game is as follows\nThe canary attacks the green fields owned by the eagle\nThe cat has 3 loyal friends and one disloyal friend\nThe puffin owes money to the aardvark\n\nBased on the game state and the rules and preferences, does the sheep eat the food of the parrot?\nQuestion: Does the sheep eat the food of the parrot?",
        "idx": 126,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The aardvark unquestionably holds the same number of points as the octopus, in the case where the puffin owes money to the aardvark\nrule1() = owes_money_to(puffin, aardvark) => points(aardvark) == points(octopus)\n# Rule2: Regarding the cat, if it has fewer than 10 friends, then we can conclude that it becomes an enemy of the octopus\nrule2() = friends(cat) < 10 => enemy(cat, octopus)\n# Rule3: The sheep unquestionably eats the food of the parrot, in the case where the octopus does not respect the sheep\nrule3() = not respects(octopus, sheep) => eat_food(sheep, parrot)\n# Rule4: If at least one animal attacks the green fields of the eagle, then the aardvark does not hold the same number of points as the octopus\nrule4() = attack_green_fields(something, eagle) => not points(aardvark) == points(octopus)\n# Rule5: If the cat becomes an actual enemy of the octopus and the aardvark holds an equal number of points as the octopus, then the octopus will not respect the sheep.\nrule5() = enemy(cat, octopus) & points(aardvark) == points(octopus) => not respects(octopus, sheep)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n\n# The current state of the game is as follows\n# The canary attacks the green fields whose owner is the eagle\nattack_green_fields(canary, eagle) = True\n# The cat has 3 friends that are loyal and one friend that is not\nfriends(cat) = 3\n# The puffin owes money to the aardvark\nowes_money_to(puffin, aardvark) = True\n\n# Based on the game state and the rules and preferences, does the sheep eat the food of the parrot?\nquestion = eat_food(sheep, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals roll the dice for the rabbit, you can be certain that it will also wink at the puffin\nRule2: If the black bear sings a victory song for the kiwi, then the kiwi is not going to wink at the puffin\nRule3: If you are positive that you saw one of the animals remove one of the pieces of the catfish, you can be certain that it will not prepare armor for the parrot\nRule4: If something does not prepare armor for the parrot, then it removes one of the pieces of the viperfish\nRule5: If something removes one of the pieces of the viperfish and also steals five points from the spider, then it will not learn elementary resource management from the aardvark\nRule6: If the wolverine burns the warehouse of the puffin, then the puffin does not remove one of the pieces of the viperfish\nRule7: If the kiwi winks at the puffin, then the puffin steals five points from the spider\n\nRule2 is preferred over Rule1\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe kiwi rolls the dice for the rabbit\nThe puffin removes one of the pieces of the catfish\n\nBased on the game state and the rules and preferences, does the puffin learn the basics of resource management from the aardvark?\nQuestion: Does the puffin learn the basics of resource management from the aardvark?",
        "idx": 127,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals rolls the dice for the rabbit, you can be certain that it will also wink at the puffin\nrule1() = rolls_dice_for(something, rabbit) => wink_at(something, puffin)\n# Rule2: If the black bear sings a victory song for the kiwi, then the kiwi is not going to wink at the puffin\nrule2() = sings_song(black_bear, victory_song_for(kiwi)) => not wink_at(kiwi, puffin)\n# Rule3: If you are positive that you saw one of the animals removes one of the pieces of the catfish, you can be certain that it will not prepare armor for the parrot\nrule3() = removes(something, piece_of(catfish)) => not prepare_armor(something, parrot)\n# Rule4: If something does not prepare armor for the parrot, then it removes one of the pieces of the viperfish\nrule4(something) = not prepare_armor(something, parrot) => removes(something, piece_of(viperfish))\n# Rule5: Be careful when something removes one of the pieces of the viperfish and also steals five of the points of the spider because in this case it will surely not learn elementary resource management from the aardvark (this may or may not be problematic)\nrule5(something) = removes(something, piece_of(viperfish)) & steals_points(something, 5, spider) => not learn_elementary_resource_management(something, aardvark)\n# Rule6: The puffin does not remove one of the pieces of the viperfish, in the case where the wolverine burns the warehouse of the puffin\nrule6() = burn(warehouse_of(puffin), wolverine) => not removes(puffin, piece_of(viperfish))\n# Rule7: The puffin unquestionably steals five points from the spider, in the case where the kiwi winks at the puffin.\nrule7() = wink_at(kiwi, puffin) => steals_points(puffin, 5, spider)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The kiwi rolls the dice for the rabbit\nrolls_dice_for(kiwi, rabbit) = True\n# The puffin removes from the board one of the pieces of the catfish\nremoves(puffin, piece_of(catfish)) = True\n\n# Based on the game state and the rules and preferences, does the puffin learn the basics of resource management from the aardvark?\nquestion = learn_elementary_resource_management(puffin, aardvark)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo has something to drink, then it does not respect the bat\nRule2: If something respects the bat but does not roll the dice for the carp, then it does not respect the salmon\nRule3: If at least one animal learns the basics of resource management from the tilapia, then the parrot removes one of the pieces of the octopus from the board\nRule4: If the octopus eats the food of the kangaroo, then the kangaroo respects the bat\nRule5: If at least one animal knows the defense plan of the panther, then the kangaroo respects the salmon\nRule6: If something does not respect the salmon, then it holds the same number of points as the halibut\nRule7: If the cheetah has a device to connect to the internet, then it learns elementary resource management from the tilapia\nRule8: If the wolverine does not roll the dice for the kangaroo but the gecko gives a magnifier to the kangaroo, then the kangaroo does not roll the dice for the carp\n\nRule1 is preferred over Rule4\nRule2 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cheetah has a cell phone\nThe gecko gives a magnifier to the kangaroo\nThe kangaroo has a blade\nThe kangaroo has a cappuccino\nThe octopus eats the food of the kangaroo\nThe wolverine does not roll the dice for the kangaroo\n\nBased on the game state and the rules and preferences, does the kangaroo hold the same number of points as the halibut?\nQuestion: Does the kangaroo hold the same number of points as the halibut?",
        "idx": 128,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kangaroo, if it has something to drink, then we can conclude that it does not respect the bat\nrule1() = has(kangaroo, something_to_drink) => not respects(kangaroo, bat)\n# Rule2: Be careful when something respects the bat but does not roll the dice for the carp because in this case it will, surely, not respect the salmon (this may or may not be problematic)\nrule2(something) = respects(something, bat) & not roll_dice(something, carp) => not respects(something, salmon)\n# Rule3: If at least one animal learns the basics of resource management from the tilapia, then the parrot removes from the board one of the pieces of the octopus\nrule3(something) = learns_basics_of_resource_management(something, tilapia) => remove(parrot, piece_of(octopus))\n# Rule4: The kangaroo unquestionably respects the bat, in the case where the octopus eats the food that belongs to the kangaroo\nrule4() = eats_food(octopus, food_of(kangaroo)) => respects(kangaroo, bat)\n# Rule5: The kangaroo respects the salmon whenever at least one animal knows the defense plan of the panther\nrule5() = knows(defense_plan_of(panther), something) => respects(kangaroo, salmon)\n# Rule6: If something does not respect the salmon, then it holds the same number of points as the halibut\nrule6(something) = not respects(something, salmon) => points(something) == points(halibut)\n# Rule7: Regarding the cheetah, if it has a device to connect to the internet, then we can conclude that it learns elementary resource management from the tilapia\nrule7() = has(cheetah, connect_to_internet(device)) => learns_elementary_resource_management(cheetah, tilapia)\n# Rule8: If the wolverine does not roll the dice for the kangaroo however the gecko gives a magnifier to the kangaroo, then the kangaroo will not roll the dice for the carp.\nrule8() = not roll_dice(wolverine, kangaroo) & give(gecko, magnifier, kangaroo) => not roll_dice(kangaroo, carp)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cheetah has a cell phone\nhas(cheetah, cell_phone) = True\n# The gecko gives a magnifier to the kangaroo\ngive(gecko, magnifier, kangaroo) = True\n# The kangaroo has a blade\nhas(kangaroo, blade) = True\n# The kangaroo has a cappuccino\nhas(kangaroo, cappuccino) = True\n# The octopus eats the food of the kangaroo\neats_food(octopus, food_of(kangaroo)) = True\n# The wolverine does not roll the dice for the kangaroo\nnot roll_dice(wolverine, kangaroo) = True\n\n# Based on the game state and the rules and preferences, does the kangaroo hold the same number of points as the halibut?\nquestion = points(kangaroo) == points(halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The snail does not raise a flag of peace for the cat whenever at least one animal prepares armor for the wolverine\nRule2: If the leopard has a name whose first letter is the same as the first letter of the kangaroo's name, then it respects the snail\nRule3: If the doctorfish has fewer than eleven friends, then the doctorfish does not show all her cards to the snail\nRule4: If the doctorfish shows all her cards to the snail and the leopard respects the snail, then the snail raises a flag of peace for the cat\nRule5: If the doctorfish created a time machine, then the doctorfish shows all her cards to the snail\nRule6: If the leopard has more than eight friends, then it respects the snail\nRule7: If at least one animal raises a flag of peace for the cat, then the gecko burns the warehouse of the parrot\nRule8: If the doctorfish has a name whose first letter is the same as the first letter of the donkey's name, then the doctorfish does not show all her cards to the snail\n\nRule1 is preferred over Rule4\nRule3 is preferred over Rule5\nRule8 is preferred over Rule5\n\nThe current state of the game is as follows\nThe doctorfish invented a time machine and is named Buddy\nThe donkey is named Casper\nThe kangaroo is named Beauty\nThe leopard has thirteen friends and is named Lily\n\nBased on the game state and the rules and preferences, does the gecko burn the warehouse of the parrot?\nQuestion: Does the gecko burn the warehouse of the parrot?",
        "idx": 129,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The snail does not raise a flag of peace for the cat whenever at least one animal prepares armor for the wolverine\nrule1() = prepare_armor(something, wolverine) => not raise_flag_of_peace(snail, cat)\n# Rule2: Regarding the leopard, if it has a name whose first letter is the same as the first letter of the kangaroo's name, then we can conclude that it respects the snail\nrule2() = first_letter_of(name(leopard)) == first_letter_of(name(kangaroo)) => respects(leopard, snail)\n# Rule3: If the doctorfish has fewer than eleven friends, then the doctorfish does not show all her cards to the snail\nrule3() = friends(doctorfish) < 11 => not show_cards(doctorfish, snail)\n# Rule4: For the snail, if the belief is that the doctorfish shows all her cards to the snail and the leopard respects the snail, then you can add \"the snail raises a peace flag for the cat\" to your conclusions\nrule4() = show_cards(doctorfish, snail) & respects(leopard, snail) => raise_flag_of_peace(snail, cat)\n# Rule5: If the doctorfish created a time machine, then the doctorfish shows all her cards to the snail\nrule5() = created_time_machine(doctorfish) => show_cards(doctorfish, snail)\n# Rule6: Regarding the leopard, if it has more than eight friends, then we can conclude that it respects the snail\nrule6() = friends(leopard) > 8 => respects(leopard, snail)\n# Rule7: If at least one animal raises a flag of peace for the cat, then the gecko burns the warehouse that is in possession of the parrot\nrule7() = raise_flag_of_peace(something, cat) => burn(warehouse_of(parrot), gecko)\n# Rule8: If the doctorfish has a name whose first letter is the same as the first letter of the donkey's name, then the doctorfish does not show her cards (all of them) to the snail.\nrule8() = first_letter_of(name(doctorfish)) == first_letter_of(name(donkey)) => not show_cards(doctorfish, snail)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n\n# The current state of the game is as follows\n# The doctorfish invented a time machine, and is named Buddy\ninvented_time_machine(doctorfish, Buddy) = True\n# The donkey is named Casper\nname(donkey, Casper) = True\n# The kangaroo is named Beauty\nname(kangaroo, Beauty) = True\n# The leopard has thirteen friends, and is named Lily\nfriends(leopard) = 13\nname(leopard, Lily) = True\n\n# Based on the game state and the rules and preferences, does the gecko burn the warehouse of the parrot?\nquestion = burn(warehouse_of(parrot), gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The whale does not sing a song of victory for the dog whenever at least one animal proceeds to the spot right after the buffalo\nRule2: If one of the animals does not need the support of the zander, then it does not owe money to the wolverine\nRule3: If one of the animals owes money to the wolverine, then it needs the support of the ferret\nRule4: The whale does not need support from the ferret whenever at least one animal becomes an enemy of the oscar\nRule5: If the eel knows the defense plan of the rabbit and the koala steals five points from the rabbit, then the rabbit proceeds to the spot right after the buffalo\nRule6: The whale owes money to the wolverine if the raven does not give a magnifying glass to the whale\nRule7: The elephant does not know the defense plan of the whale if the polar bear holds the same number of points as the elephant\nRule8: If something needs the support of the ferret but does not sing a song of victory for the dog, then it does not learn elementary resource management from the kudu\n\nRule2 is preferred over Rule6\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe eel knows the defensive plans of the rabbit\nThe koala steals five points from the rabbit\nThe polar bear holds the same number of points as the elephant\nThe raven does not give a magnifying glass to the whale\n\nBased on the game state and the rules and preferences, does the whale learn the basics of resource management from the kudu?\nQuestion: Does the whale learn the basics of resource management from the kudu?",
        "idx": 130,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The whale does not sing a song of victory for the dog whenever at least one animal proceeds to the spot right after the buffalo\nrule1() = proceed(something, spot_right_after(spot_of(buffalo))) => not sing_song(whale, victory_song_for(dog))\n# Rule2: If you are positive that one of the animals does not need the support of the zander, you can be certain that it will not owe $$$ to the wolverine\nrule2(something) = not needs_support(something, zander) => not owes_money_to(something, wolverine)\n# Rule3: If you are positive that you saw one of the animals owes money to the wolverine, you can be certain that it will also need the support of the ferret\nrule3(something) = owes_money_to(something, wolverine) => needs_support(something, ferret)\n# Rule4: The whale does not need support from the ferret whenever at least one animal becomes an enemy of the oscar\nrule4() = enemy(something, oscar) => not needs_support(whale, ferret)\n# Rule5: If the eel knows the defense plan of the rabbit and the koala steals five of the points of the rabbit, then the rabbit proceeds to the spot that is right after the spot of the buffalo\nrule5() = knows(defense_plan_of(rabbit), eel) & steal_points(koala, 5, rabbit) => proceed(rabbit, spot_right_after(spot_of(buffalo)))\n# Rule6: The whale unquestionably owes $$$ to the wolverine, in the case where the raven does not give a magnifying glass to the whale\nrule6() = not give_magnifying_glass(raven, whale) => owes_money_to(whale, wolverine)\n# Rule7: The elephant does not know the defense plan of the whale, in the case where the polar bear holds an equal number of points as the elephant\nrule7() = points(polar_bear) == points(elephant) => not knows(defense_plan_of(whale), elephant)\n# Rule8: Be careful when something needs the support of the ferret but does not sing a song of victory for the dog because in this case it will, surely, not learn elementary resource management from the kudu (this may or may not be problematic).\nrule8(something) = needs_support(something, ferret) & not sing_song(something, victory_song_for(dog)) => not learn_elementary_resource_management(something, kudu)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The eel knows the defensive plans of the rabbit\nknows(defense_plan_of(rabbit), eel) = True\n# The koala steals five points from the rabbit\nsteal_points(koala, 5, rabbit) = True\n# The polar bear holds the same number of points as the elephant\npoints(polar_bear) == points(elephant) = True\n# The raven does not give a magnifier to the whale\nnot give_magnifying_glass(raven, whale) = True\n\n# Based on the game state and the rules and preferences, does the whale learn the basics of resource management from the kudu?\nquestion = learn_elementary_resource_management(whale, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal owes money to the tilapia, then the donkey does not respect the squirrel\nRule2: If the ferret holds the same number of points as the kangaroo, then the kangaroo does not need the support of the ferret\nRule3: If the donkey respects the squirrel and the kangaroo needs support from the squirrel, then the squirrel becomes an actual enemy of the kiwi\nRule4: If an animal needs support from the ferret, then it also needs support from the squirrel\nRule5: If something prepares armor for the wolverine and holds an equal number of points as the zander, then it respects the squirrel\nRule6: If the kangaroo has a sharp object, then it needs support from the ferret\nRule7: If the donkey has more than five friends, then it prepares armor for the wolverine\nRule8: If the kangaroo does not respect the donkey, then the donkey holds an equal number of points as the zander\nRule9: If the kangaroo has a card whose color appears in the flag of France, then it needs the support of the ferret\n\nRule1 is preferred over Rule5\nRule2 is preferred over Rule6\nRule2 is preferred over Rule9\n\nThe current state of the game is as follows\nThe donkey has 14 friends\nThe kangaroo has a card that is blue in color\nThe kangaroo has a knapsack\nThe kangaroo respects the donkey\n\nBased on the game state and the rules and preferences, does the squirrel become an enemy of the kiwi?\nQuestion: Does the squirrel become an enemy of the kiwi?",
        "idx": 131,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal owes money to the tilapia, then the donkey does not respect the squirrel\nrule1() = owes_money_to(something, tilapia) => not respect(donkey, squirrel)\n# Rule2: The kangaroo does not need the support of the ferret, in the case where the ferret holds the same number of points as the kangaroo\nrule2() = points(ferret) == points(kangaroo) => not needs_support(kangaroo, ferret)\n# Rule3: If the donkey respects the squirrel and the kangaroo needs support from the squirrel, then the squirrel becomes an actual enemy of the kiwi\nrule3() = respect(donkey, squirrel) & needs_support(kangaroo, squirrel) => enemy(squirrel, kiwi)\n# Rule4: If you are positive that you saw one of the animals needs support from the ferret, you can be certain that it will also need the support of the squirrel\nrule4(something) = needs_support(something, ferret) => needs_support(something, squirrel)\n# Rule5: Be careful when something prepares armor for the wolverine and also holds an equal number of points as the zander because in this case it will surely respect the squirrel (this may or may not be problematic)\nrule5(something) = prepare_armor(something, wolverine) & points(something) == points(zander) => respect(something, squirrel)\n# Rule6: Regarding the kangaroo, if it has a sharp object, then we can conclude that it needs support from the ferret\nrule6() = has(kangaroo, sharp_object) => needs_support(kangaroo, ferret)\n# Rule7: Regarding the donkey, if it has more than five friends, then we can conclude that it prepares armor for the wolverine\nrule7() = friends(donkey) > 5 => prepare_armor(donkey, wolverine)\n# Rule8: If the kangaroo does not respect the donkey, then the donkey holds an equal number of points as the zander\nrule8() = not respect(kangaroo, donkey) => points(donkey) == points(zander)\n# Rule9: If the kangaroo has a card whose color appears in the flag of France, then the kangaroo needs the support of the ferret.\nrule9() = has(kangaroo, card_with(color_in_flag_of_france)) => needs_support(kangaroo, ferret)\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule2 is preferred over Rule9\norder(rule2) > order(rule9) = True\n\n# The current state of the game is as follows\n# The donkey has 14 friends\nfriends(donkey) = 14\n# The kangaroo has a card that is blue in color, has a knapsack, and respects the donkey\nhas(kangaroo, card_with(blue_color)) = True\nhas(kangaroo, knapsack) = True\nrespect(kangaroo, donkey) = True\n\n# Based on the game state and the rules and preferences, does the squirrel become an enemy of the kiwi?\nquestion = enemy(squirrel, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals holds the same number of points as the canary, you can be certain that it will also steal five points from the rabbit\nRule2: If the mosquito has more than one friend, then the mosquito does not offer a job to the polar bear\nRule3: If the polar bear has a card whose color is one of the rainbow colors, then the polar bear needs the support of the eel\nRule4: The polar bear holds the same number of points as the canary, in the case where the mosquito offers a job position to the polar bear\nRule5: If something does not wink at the cow, then it does not steal five points from the rabbit\nRule6: If the mosquito has a card whose color starts with the letter \"i\", then it offers a job to the polar bear\nRule7: If the polar bear has more than 10 friends, then the polar bear does not raise a peace flag for the sheep\nRule8: If the polar bear has a name whose first letter is the same as the first letter of the parrot's name, then it raises a peace flag for the sheep\nRule9: If the polar bear has difficulty finding food, then it does not raise a peace flag for the sheep\nRule10: If the polar bear has a device to connect to the internet, then the polar bear needs support from the eel\nRule11: If something raises a peace flag for the sheep and needs the support of the eel, then it does not hold the same number of points as the canary\n\nRule2 is preferred over Rule6\nRule4 is preferred over Rule11\nRule5 is preferred over Rule1\nRule7 is preferred over Rule8\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe buffalo owes money to the polar bear\nThe mosquito has a card that is indigo in color\nThe parrot is named Cinnamon\nThe polar bear has a card that is indigo in color\nThe polar bear has a knapsack\nThe polar bear has four friends\nThe polar bear is named Charlie\n\nBased on the game state and the rules and preferences, does the polar bear steal five points from the rabbit?\nQuestion: Does the polar bear steal five points from the rabbit?",
        "idx": 132,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals holds the same number of points as the canary, you can be certain that it will also steal five points from the rabbit\nrule1() = holds_same_points_as(something, canary) => steal_points(something, rabbit, 5)\n# Rule2: If the mosquito has more than one friend, then the mosquito does not offer a job to the polar bear\nrule2() = friends(mosquito) > 1 => not offer_job(mosquito, polar_bear)\n# Rule3: If the polar bear has a card whose color is one of the rainbow colors, then the polar bear needs the support of the eel\nrule3() = has(polar_bear, card) and color(card) in rainbow_colors => needs_support(polar_bear, eel)\n# Rule4: The polar bear unquestionably holds the same number of points as the canary, in the case where the mosquito offers a job position to the polar bear\nrule4() = offer_job(mosquito, polar_bear) => holds_same_points_as(polar_bear, canary)\n# Rule5: If something does not wink at the cow, then it does not steal five points from the rabbit\nrule5() = not wink(something, cow) => not steal_points(something, rabbit, 5)\n# Rule6: Regarding the mosquito, if it has a card whose color starts with the letter \"i\", then we can conclude that it offers a job to the polar bear\nrule6() = has(mosquito, card_with(color_starting_with(\"i\"))) => offer_job(mosquito, polar_bear)\n# Rule7: If the polar bear has more than 10 friends, then the polar bear does not raise a peace flag for the sheep\nrule7() = friends(polar_bear) > 10 => not raise_flag_of_peace(polar_bear, sheep)\n# Rule8: Regarding the polar bear, if it has a name whose first letter is the same as the first letter of the parrot's name, then we can conclude that it raises a peace flag for the sheep\nrule8() = first_letter_of(name(polar_bear)) == first_letter_of(name(parrot)) => raise_flag_of_peace(polar_bear, sheep)\n# Rule9: Regarding the polar bear, if it has difficulty to find food, then we can conclude that it does not raise a flag of peace for the sheep\nrule9() = has_difficulty_finding_food(polar_bear) => not raise_flag_of_peace(polar_bear, sheep)\n# Rule10: If the polar bear has a device to connect to the internet, then the polar bear needs support from the eel\nrule10() = has(polar_bear, connect_to_internet(device)) => needs_support(polar_bear, eel)\n# Rule11: If you see that something raises a flag of peace for the sheep and needs the support of the eel, what can you certainly conclude? You can conclude that it does not hold the same number of points as the canary.\nrule11() = raise_flag_of_peace(something, sheep) & needs_support(something, eel) => not holds_same_points_as(something, canary)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule4 is preferred over Rule11\norder(rule4) > order(rule11) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule7 is preferred over Rule8\norder(rule7) > order(rule8) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The buffalo owes money to the polar bear\nowes_money_to(buffalo, polar_bear) = True\n# The mosquito has a card that is indigo in color\nhas(mosquito, card_with(indigo_color)) = True\n# The parrot is named Cinnamon\nname(parrot, Cinnamon) = True\n# The polar bear has a card that is indigo in color\nhas(polar_bear, card_with(indigo_color)) = True\n# The polar bear has a knapsack\nhas(polar_bear, knapsack) = True\n# The polar bear has four friends\nfriends(polar_bear) = 4\n# The polar bear is named Charlie\nname(polar_bear, Charlie) = True\n\n# Based on the game state and the rules and preferences, does the polar bear steal five points from the rabbit?\nquestion = steal_points(polar_bear, rabbit, 5)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the jellyfish owns a luxury aircraft, then it offers a job to the squid\nRule2: If at least one animal winks at the buffalo, then the parrot does not know the defense plan of the blobfish\nRule3: If the name of the jellyfish starts with the same letter as the name of the donkey, then it does not offer a job position to the squid\nRule4: If the jellyfish has a card whose color appears in the flag of Italy, then it offers a job position to the squid\nRule5: The cat winks at the buffalo whenever at least one animal offers a job position to the squid\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe donkey is named Beauty\nThe jellyfish dreamed of a luxury aircraft\nThe jellyfish has a card that is red in color\n\nBased on the game state and the rules and preferences, does the parrot know the defensive plans of the blobfish?\nQuestion: Does the parrot know the defensive plans of the blobfish?",
        "idx": 133,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the jellyfish owns a luxury aircraft, then the jellyfish offers a job to the squid\nrule1() = owns(jellyfish, luxury_aircraft) => offer_job(jellyfish, squid)\n# Rule2: If at least one animal winks at the buffalo, then the parrot does not know the defense plan of the blobfish\nrule2() = wink_at(something, buffalo) => not knows_defense_plan(parrot, blobfish)\n# Rule3: Regarding the jellyfish, if it has a name whose first letter is the same as the first letter of the donkey's name, then we can conclude that it does not offer a job position to the squid\nrule3() = first_letter_of(name(jellyfish)) == first_letter_of(name(donkey)) => not offer_job(jellyfish, squid)\n# Rule4: Regarding the jellyfish, if it has a card whose color appears in the flag of Italy, then we can conclude that it offers a job position to the squid\nrule4() = has(jellyfish, card) and color(card) in colors_of(flag_of(Italy)) => offer_job(jellyfish, squid)\n# Rule5: The cat winks at the buffalo whenever at least one animal offers a job position to the squid.\nrule5() = exists(animal) offer_job(animal, squid) => wink_at(cat, buffalo)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The donkey is named Beauty\nname(donkey, Beauty) = True\n# The jellyfish dreamed of a luxury aircraft\ndreamed_of(jellyfish, luxury_aircraft) = True\n# The jellyfish has a card that is red in color\nhas(jellyfish, card_with(red_color)) = True\n\n# Based on the game state and the rules and preferences, does the parrot know the defensive plans of the blobfish?\nquestion = knows_defense_plan(parrot, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The pig does not remove one of the pieces of the buffalo, in the case where the snail proceeds to the spot that is right after the spot of the pig\nRule2: If you see one of the animals attack the green fields owned by the blobfish, then it will not raise a flag of peace for the carp\nRule3: Be careful when something does not remove one of the pieces of the buffalo but knocks down the fortress of the kangaroo because in this case it will surely roll the dice for the carp\nRule4: If you see one of the animals show all her cards to the caterpillar, then it will also attack the green fields owned by the blobfish\nRule5: If the pig rolls the dice for the carp and the doctorfish does not raise a flag of peace for the carp, then the carp needs support from the baboon\nRule6: If the doctorfish prepares armor for the pig, then the pig knocks down the fortress owned by the kangaroo\n\nThe current state of the game is as follows\nThe doctorfish shows all her cards to the caterpillar but does not prepare armor for the pig\nThe snail proceeds to the spot right after the pig\n\nBased on the game state and the rules and preferences, does the carp need support from the baboon?\nQuestion: Does the carp need support from the baboon?",
        "idx": 134,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The pig does not remove one of the pieces of the buffalo, in the case where the snail proceeds to the spot that is right after the spot of the pig\nrule1() = proceed(snail, spot_right_after(spot_of(pig))) => not remove(pig, piece_of(buffalo))\n# Rule2: If you are positive that you saw one of the animals attacks the green fields whose owner is the blobfish, you can be certain that it will not raise a flag of peace for the carp\nrule2(something) = attack(something, green_fields_of(blobfish)) => not raise_flag_of_peace(something, carp)\n# Rule3: Be careful when something does not remove from the board one of the pieces of the buffalo but knocks down the fortress of the kangaroo because in this case it will, surely, roll the dice for the carp (this may or may not be problematic)\nrule3(something) = not remove(something, piece_of(buffalo)) & knock_down(fortress_of(kangaroo), something) => roll_dice(something, carp)\n# Rule4: If you are positive that you saw one of the animals shows her cards (all of them) to the caterpillar, you can be certain that it will also attack the green fields whose owner is the blobfish\nrule4(something) = show_cards(something, caterpillar) => attack(something, green_fields_of(blobfish))\n# Rule5: For the carp, if the belief is that the pig rolls the dice for the carp and the doctorfish does not raise a peace flag for the carp, then you can add \"the carp needs support from the baboon\" to your conclusions\nrule5() = roll_dice(pig, carp) & not raise_flag_of_peace(doctorfish, carp) => needs_support(carp, baboon)\n# Rule6: If the doctorfish prepares armor for the pig, then the pig knocks down the fortress that belongs to the kangaroo.\nrule6() = prepare_armor(doctorfish, pig) => knock_down(fortress_of(kangaroo), pig)\n\n# The current state of the game is as follows\n# The doctorfish shows all her cards to the caterpillar but does not prepare armor for the pig\nshow_cards(doctorfish, caterpillar) = True\nnot prepare_armor(doctorfish, pig) = True\n# The snail proceeds to the spot right after the pig\nproceed(snail, spot_right_after(spot_of(pig))) = True\n\n# Based on the game state and the rules and preferences, does the carp need support from the baboon?\nquestion = needs_support(carp, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the amberjack sings a song of victory for the eagle, then the eagle attacks the green fields owned by the penguin\nRule2: If something does not remove one of the pieces of the kiwi from the board, then it removes one of the pieces of the phoenix from the board\nRule3: If the eagle has fewer than eight friends, then the eagle knows the defensive plans of the squid\nRule4: If something proceeds to the spot right after the eel, then it owes money to the cheetah as well\nRule5: If the jellyfish killed the mayor, then the jellyfish proceeds to the spot right after the eel\nRule6: If you see one of the animals remove one of the pieces of the phoenix from the board, then it will not give a magnifying glass to the cheetah\nRule7: If the black bear does not have her keys, then it becomes an enemy of the jellyfish\nRule8: If the eagle has a card with a color from the rainbow colors, then the eagle does not remove one of the pieces of the phoenix from the board\nRule9: If the eagle does not give a magnifier to the cheetah but the jellyfish owes money to the cheetah, then the cheetah eats the food that belongs to the cockroach\nRule10: If the jellyfish has something to sit on, then it proceeds to the spot right after the eel\nRule11: If the eagle works fewer hours than before, then the eagle knows the defensive plans of the squid\n\nRule2 is preferred over Rule8\n\nThe current state of the game is as follows\nThe amberjack sings a victory song for the eagle\nThe black bear lost her keys\nThe eagle has a card that is indigo in color, reduced her work hours recently, and does not remove one of the pieces of the kiwi from the board\nThe eagle has nine friends\nThe jellyfish assassinated the mayor and has a piano\nThe lion shows all her cards to the eagle\nThe moose removes one of the pieces of the gecko from the board\n\nBased on the game state and the rules and preferences, does the cheetah eat the food of the cockroach?\nQuestion: Does the cheetah eat the food of the cockroach?",
        "idx": 135,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the amberjack sings a song of victory for the eagle, then the eagle attacks the green fields whose owner is the penguin\nrule1() = sing_song(amberjack, victory_song_for(eagle)) => attack(eagle, green_fields_of(penguin))\n# Rule2: If something does not remove from the board one of the pieces of the kiwi, then it removes from the board one of the pieces of the phoenix\nrule2() = not remove(something, piece_of(kiwi)) => remove(something, piece_of(phoenix))\n# Rule3: If the eagle has fewer than eight friends, then the eagle knows the defensive plans of the squid\nrule3() = friends(eagle) < 8 => knows(defensive_plans_of(squid), eagle)\n# Rule4: If something proceeds to the spot right after the eel, then it owes $$$ to the cheetah, too\nrule4() = proceed(something, spot_right_after(spot_of(eel))) => owes_money_to(something, cheetah)\n# Rule5: If the jellyfish killed the mayor, then the jellyfish proceeds to the spot right after the eel\nrule5() = killed(jellyfish, mayor) => proceed(jellyfish, spot_right_after(spot_of(eel)))\n# Rule6: If you are positive that you saw one of the animals removes from the board one of the pieces of the phoenix, you can be certain that it will not give a magnifying glass to the cheetah\nrule6(something) = remove(something, piece_of(phoenix)) => not give(something, magnifying_glass, cheetah)\n# Rule7: Regarding the black bear, if it does not have her keys, then we can conclude that it becomes an enemy of the jellyfish\nrule7() = not has(black_bear, keys) => enemy(black_bear, jellyfish)\n# Rule8: If the eagle has a card whose color is one of the rainbow colors, then the eagle does not remove from the board one of the pieces of the phoenix\nrule8() = has(eagle, card_with(color_in(rainbow_colors))) => not remove(eagle, piece_of(phoenix))\n# Rule9: For the cheetah, if the belief is that the eagle does not give a magnifier to the cheetah but the jellyfish owes $$$ to the cheetah, then you can add \"the cheetah eats the food that belongs to the cockroach\" to your conclusions\nrule9() = not give(eagle, magnifier, cheetah) & owes_money_to(jellyfish, cheetah) => eat_food(cheetah, food_of(cockroach))\n# Rule10: Regarding the jellyfish, if it has something to sit on, then we can conclude that it proceeds to the spot that is right after the spot of the eel\nrule10() = has(jellyfish, something_to_sit_on) => proceed(jellyfish, spot_right_after(spot_of(eel)))\n# Rule11: Regarding the eagle, if it works fewer hours than before, then we can conclude that it knows the defensive plans of the squid.\nrule11() = reduce_work_hours(eagle) => knows(defensive_plans_of(squid), eagle)\n# Rule2 is preferred over Rule8\norder(rule2) > order(rule8) = True\n\n# The current state of the game is as follows\n# The amberjack sings a victory song for the eagle\nsing_song(amberjack, victory_song_for(eagle)) = True\n# The black bear lost her keys\nhas(black_bear, keys) = False\n# The eagle has a card that is indigo in color, reduced her work hours recently, and does not remove from the board one of the pieces of the kiwi\nhas(eagle, card_with(indigo_color)) = True\nreduce_work_hours(eagle) = True\nnot remove(eagle, piece_of(kiwi)) = True\n# The eagle has nine friends\nfriends(eagle) = 9\n# The jellyfish assassinated the mayor, and has a piano\nkilled(jellyfish, mayor) = True\nhas(jellyfish, piano) = True\n# The lion shows all her cards to the eagle\nshow_cards(lion, eagle) = True\n# The moose removes from the board one of the pieces of the gecko\nremove(moose, piece_of(gecko)) = True\n\n# Based on the game state and the rules and preferences, does the cheetah eat the food of the cockroach?\nquestion = eat_food(cheetah, food_of(cockroach))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hippopotamus has a sharp object, then it does not offer a job position to the oscar\nRule2: If the donkey has something to drink, then it removes one of the pieces of the oscar\nRule3: If the donkey has access to an abundance of food, then it removes one of the pieces of the oscar\nRule4: If something knows the defense plan of the gecko but does not give a magnifying glass to the turtle, then it does not eat the food of the grizzly bear\nRule5: If the starfish has a name whose first letter is the same as the first letter of the wolverine's name, then it attacks the green fields of the oscar\nRule6: If the starfish attacks the green fields of the oscar, then the oscar does not give a magnifying glass to the turtle\nRule7: If the hippopotamus is a fan of Chris Ronaldo, then it offers a job position to the oscar\nRule8: If the hippopotamus offers a job position to the oscar and the donkey removes one of the pieces of the oscar, then the oscar knows the defense plan of the gecko\n\nRule1 is preferred over Rule7\n\nThe current state of the game is as follows\nThe donkey has hot chocolate and struggles to find food\nThe hippopotamus supports Chris Ronaldo\nThe starfish is named Teddy\nThe wolverine is named Tango\n\nBased on the game state and the rules and preferences, does the oscar eat the food of the grizzly bear?\nQuestion: Does the oscar eat the food of the grizzly bear?",
        "idx": 136,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hippopotamus has a sharp object, then the hippopotamus does not offer a job position to the oscar\nrule1() = has(hippopotamus, sharp_object) => not offer_job_position(hippopotamus, oscar)\n# Rule2: Regarding the donkey, if it has something to drink, then we can conclude that it removes one of the pieces of the oscar\nrule2() = has(drink, donkey) => remove(donkey, piece_of(oscar))\n# Rule3: If the donkey has access to an abundance of food, then the donkey removes one of the pieces of the oscar\nrule3() = has(abundance_of(food), donkey) => remove(donkey, piece_of(oscar))\n# Rule4: Be careful when something knows the defense plan of the gecko but does not give a magnifying glass to the turtle because in this case it will, surely, not eat the food of the grizzly bear (this may or may not be problematic)\nrule4(something) = knows(defense_plan_of(gecko), something) & not give_magnifying_glass(something, turtle) => not eat_food_of(grizzly_bear)\n# Rule5: If the starfish has a name whose first letter is the same as the first letter of the wolverine's name, then the starfish attacks the green fields of the oscar\nrule5() = first_letter_of(name(starfish)) == first_letter_of(name(wolverine)) => attack(starfish, green_fields_of(oscar))\n# Rule6: The oscar does not give a magnifier to the turtle, in the case where the starfish attacks the green fields of the oscar\nrule6() = attack(starfish, green_fields_of(oscar)) => not give_magnifying_glass(oscar, turtle)\n# Rule7: Regarding the hippopotamus, if it is a fan of Chris Ronaldo, then we can conclude that it offers a job position to the oscar\nrule7() = fan_of(hippopotamus, Chris_Ronaldo) => offer_job_position(hippopotamus, oscar)\n# Rule8: For the oscar, if the belief is that the hippopotamus offers a job position to the oscar and the donkey removes from the board one of the pieces of the oscar, then you can add \"the oscar knows the defense plan of the gecko\" to your conclusions.\nrule8() = offer_job_position(hippopotamus, oscar) & remove(donkey, piece_of(oscar)) => knows(defense_plan_of(gecko), oscar)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n\n# The current state of the game is as follows\n# The donkey has a hot chocolate, and struggles to find food\nhas(hot_chocolate, donkey) = True\nstruggles_to_find_food(donkey) = True\n# The hippopotamus supports Chris Ronaldo\nsupports(hippopotamus, Chris_Ronaldo) = True\n# The starfish is named Teddy\nname(starfish, Teddy) = True\n# The wolverine is named Tango\nname(wolverine, Tango) = True\n\n# Based on the game state and the rules and preferences, does the oscar eat the food of the grizzly bear?\nquestion = eat_food_of(grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cockroach rolls the dice for the starfish, then the starfish steals five points from the tiger\nRule2: If at least one animal knows the defensive plans of the bat, then the parrot burns the warehouse of the mosquito\nRule3: If something knows the defensive plans of the tiger, then it does not know the defense plan of the hummingbird\nRule4: If the zander burns the warehouse that is in possession of the kudu, then the kudu knows the defensive plans of the bat\nRule5: If something knows the defensive plans of the hummingbird and also sings a victory song for the canary, then it does not burn the warehouse of the mosquito\nRule6: If at least one animal steals five points from the tiger, then the parrot knows the defensive plans of the hummingbird\nRule7: The zander burns the warehouse that is in possession of the kudu whenever at least one animal becomes an actual enemy of the kangaroo\nRule8: The phoenix attacks the green fields whose owner is the kudu, in the case where the moose raises a flag of peace for the phoenix\nRule9: If the starfish has fewer than 5 friends, then it does not steal five points from the tiger\nRule10: If the starfish owns a luxury aircraft, then it does not steal five points from the tiger\nRule11: If the leopard eats the food that belongs to the hippopotamus, then the hippopotamus becomes an actual enemy of the kudu\n\nRule1 is preferred over Rule10\nRule1 is preferred over Rule9\nRule2 is preferred over Rule5\nRule3 is preferred over Rule6\n\nThe current state of the game is as follows\nThe leopard eats the food of the hippopotamus\nThe moose raises a peace flag for the phoenix\nThe starfish has nine wise friends and 1 friend that is not wise\nThe cockroach does not roll the dice for the starfish\nThe crocodile does not become an enemy of the kangaroo\n\nBased on the game state and the rules and preferences, does the parrot burn the warehouse of the mosquito?\nQuestion: Does the parrot burn the warehouse of the mosquito?",
        "idx": 137,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cockroach rolls the dice for the starfish, then the starfish steals five points from the tiger\nrule1() = roll_dice(cockroach, starfish) => steal_points(starfish, 5, tiger)\n# Rule2: If at least one animal knows the defensive plans of the bat, then the parrot burns the warehouse of the mosquito\nrule2() = knows(defensive_plans_of(bat), something) => burn(warehouse_of(mosquito), parrot)\n# Rule3: If something knows the defensive plans of the tiger, then it does not know the defense plan of the hummingbird\nrule3(something) = knows(defensive_plans_of(tiger), something) => not knows(defense_plan_of(hummingbird), something)\n# Rule4: If the zander burns the warehouse that is in possession of the kudu, then the kudu knows the defensive plans of the bat\nrule4() = burn(warehouse_of(kudu), zander) => knows(defensive_plans_of(bat), kudu)\n# Rule5: Be careful when something knows the defensive plans of the hummingbird and also sings a victory song for the canary because in this case it will surely not burn the warehouse of the mosquito (this may or may not be problematic)\nrule5(something) = knows(defensive_plans_of(hummingbird), something) & sing_song(something, victory_song_for(canary)) => not burn(warehouse_of(mosquito), something)\n# Rule6: If at least one animal steals five of the points of the tiger, then the parrot knows the defensive plans of the hummingbird\nrule6() = steal_points(something, 5, tiger) => knows(defensive_plans_of(hummingbird), parrot)\n# Rule7: The zander burns the warehouse that is in possession of the kudu whenever at least one animal becomes an actual enemy of the kangaroo\nrule7() = enemy(something, kangaroo) => burn(warehouse_of(kudu), zander)\n# Rule8: The phoenix unquestionably attacks the green fields whose owner is the kudu, in the case where the moose raises a flag of peace for the phoenix\nrule8() = raise_flag_of_peace(moose, phoenix) => attack(phoenix, green_fields_of(kudu))\n# Rule9: Regarding the starfish, if it has fewer than 5 friends, then we can conclude that it does not steal five of the points of the tiger\nrule9() = friends(starfish) < 5 => not steal_points(starfish, 5, tiger)\n# Rule10: Regarding the starfish, if it owns a luxury aircraft, then we can conclude that it does not steal five points from the tiger\nrule10() = owns(starfish, luxury_aircraft) => not steal_points(starfish, 5, tiger)\n# Rule11: If the leopard eats the food that belongs to the hippopotamus, then the hippopotamus becomes an actual enemy of the kudu.\nrule11() = eat_food(leopard, food_of(hippopotamus)) => enemy(hippopotamus, kudu)\n# Rule1 is preferred over Rule10\norder(rule1) > order(rule10) = True\n# Rule1 is preferred over Rule9\norder(rule1) > order(rule9) = True\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n\n# The current state of the game is as follows\n# The leopard eats the food of the hippopotamus\neat_food(leopard, food_of(hippopotamus)) = True\n# The moose raises a peace flag for the phoenix\nraise_flag_of_peace(moose, phoenix) = True\n# The starfish has nine friends that are wise and 1 friend that is not\nfriends(starfish) = 9\n# The cockroach does not roll the dice for the starfish\nroll_dice(cockroach, starfish) = False\n# The crocodile does not become an enemy of the kangaroo\nenemy(crocodile, kangaroo) = False\n\n# Based on the game state and the rules and preferences, does the parrot burn the warehouse of the mosquito?\nquestion = burn(warehouse_of(mosquito), parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal offers a job to the spider, then the squirrel does not respect the tilapia\nRule2: If the squirrel does not steal five points from the salmon and the raven holds an equal number of points as the salmon, then the salmon does not roll the dice for the cockroach\nRule3: If the name of the squirrel starts with the same letter as the name of the eel, then the squirrel respects the tilapia\nRule4: If at least one animal becomes an enemy of the oscar, then the squirrel does not steal five points from the salmon\nRule5: If the squirrel has a card with a color that appears in the flag of France, then the squirrel steals five points from the salmon\nRule6: If the squirrel has fewer than one friend, then the squirrel respects the tilapia\nRule7: The zander respects the dog whenever at least one animal rolls the dice for the cockroach\nRule8: If at least one animal respects the tilapia, then the salmon rolls the dice for the cockroach\n\nRule1 is preferred over Rule3\nRule1 is preferred over Rule6\nRule2 is preferred over Rule8\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe eel is named Luna\nThe sea bass becomes an enemy of the oscar\nThe squirrel has a card with white color\nThe squirrel has a saxophone\nThe squirrel is named Lucy\nThe squirrel has one wise friend and two friends who are not wise\n\nBased on the game state and the rules and preferences, does the zander respect the dog?\nQuestion: Does the zander respect the dog?",
        "idx": 138,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal offers a job to the spider, then the squirrel does not respect the tilapia\nrule1() = offer_job(something, spider) => not respect(squirrel, tilapia)\n# Rule2: For the salmon, if the belief is that the squirrel is not going to steal five of the points of the salmon but the raven holds an equal number of points as the salmon, then you can add that \"the salmon is not going to roll the dice for the cockroach\" to your conclusions\nrule2() = not steal_points(squirrel, salmon, 5) & points(raven) == points(salmon) => not roll_dice(salmon, cockroach)\n# Rule3: Regarding the squirrel, if it has a name whose first letter is the same as the first letter of the eel's name, then we can conclude that it respects the tilapia\nrule3() = first_letter_of(name(squirrel)) == first_letter_of(name(eel)) => respect(squirrel, tilapia)\n# Rule4: The squirrel does not steal five of the points of the salmon whenever at least one animal becomes an enemy of the oscar\nrule4() = enemy(something, oscar) => not steal_points(squirrel, salmon, 5)\n# Rule5: If the squirrel has a card whose color appears in the flag of France, then the squirrel steals five points from the salmon\nrule5() = has(squirrel, card_with(color_in_flag_of_france)) => steal_points(squirrel, salmon, 5)\n# Rule6: If the squirrel has fewer than one friend, then the squirrel respects the tilapia\nrule6() = friends(squirrel) < 1 => respect(squirrel, tilapia)\n# Rule7: The zander respects the dog whenever at least one animal rolls the dice for the cockroach\nrule7() = roll_dice(something, cockroach) => respect(zander, dog)\n# Rule8: If at least one animal respects the tilapia, then the salmon rolls the dice for the cockroach.\nrule8() = respect(something, tilapia) => roll_dice(salmon, cockroach)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule2 is preferred over Rule8\norder(rule2) > order(rule8) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The eel is named Luna\nname(eel, Luna) = True\n# The sea bass becomes an enemy of the oscar\nenemy(sea_bass, oscar) = True\n# The squirrel has a card that is white in color, has a saxophone, and is named Lucy\nhas(squirrel, card_with(white_color)) = True\nhas(squirrel, saxophone) = True\nname(squirrel, Lucy) = True\n# The squirrel has one friend that is wise and two friends that are not.\nfriends(squirrel) = 1\n\n# Based on the game state and the rules and preferences, does the zander respect the dog?\nquestion = respect(zander, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the halibut has fewer than eight friends, then it does not know the defense plan of the panther\nRule2: If the baboon offers a job position to the rabbit, then the rabbit does not respect the panther\nRule3: If the panther created a time machine, then the panther does not proceed to the spot right after the oscar\nRule4: If the panther becomes an enemy of the raven, then the raven does not hold the same number of points as the carp\nRule5: If the rabbit took a bike from the store, then it respects the panther\nRule6: If the halibut has a card whose color starts with the letter \"e\", then it does not know the defense plan of the panther\nRule7: If the rabbit has a leafy green vegetable, then it respects the panther\nRule8: If the halibut does not know the defense plan of the panther but the rabbit respects the panther, then the panther becomes an actual enemy of the raven\nRule9: If something does not proceed to the spot right after the spot of the oscar but owes money to the buffalo, then it does not become an actual enemy of the raven\n\nRule2 is preferred over Rule5\nRule2 is preferred over Rule7\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe halibut has a card that is yellow in color\nThe halibut has one bald friend and 4 non-bald friends\nThe panther invented a time machine\nThe rabbit has some romaine lettuce\nThe rabbit parked her bike in front of the store\n\nBased on the game state and the rules and preferences, does the raven hold the same number of points as the carp?\nQuestion: Does the raven hold the same number of points as the carp?",
        "idx": 139,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the halibut, if it has fewer than eight friends, then we can conclude that it does not know the defense plan of the panther\nrule1() = friends(halibut) < 8 => not knows(defense_plan_of(panther), halibut)\n# Rule2: The rabbit does not respect the panther, in the case where the baboon offers a job position to the rabbit\nrule2() = offer_job_position(baboon, rabbit) => not respects(rabbit, panther)\n# Rule3: If the panther created a time machine, then the panther does not proceed to the spot right after the oscar\nrule3() = created_time_machine(panther) => not proceed(panther, spot_right_after(spot_of(oscar)))\n# Rule4: The raven does not hold the same number of points as the carp, in the case where the panther becomes an enemy of the raven\nrule4() = enemy(panther, raven) => not holds_same_number_of_points(raven, carp)\n# Rule5: Regarding the rabbit, if it took a bike from the store, then we can conclude that it respects the panther\nrule5() = took_bike(rabbit, store) => respects(rabbit, panther)\n# Rule6: Regarding the halibut, if it has a card whose color starts with the letter \"e\", then we can conclude that it does not know the defense plan of the panther\nrule6() = color_starts_with(halibut_card, \"e\") => not knows(defense_plan_of(panther), halibut)\n# Rule7: Regarding the rabbit, if it has a leafy green vegetable, then we can conclude that it respects the panther\nrule7() = has(rabbit, leafy_green_vegetable) => respects(rabbit, panther)\n# Rule8: If the halibut does not know the defense plan of the panther but the rabbit respects the panther, then the panther becomes an actual enemy of the raven unavoidably\nrule8() = not knows(defense_plan_of(panther), halibut) & respects(rabbit, panther) => enemy(panther, raven)\n# Rule9: Be careful when something does not proceed to the spot that is right after the spot of the oscar but owes $$$ to the buffalo because in this case it certainly does not become an actual enemy of the raven (this may or may not be problematic).\nrule9(something) = not proceed(something, spot_right_after(spot_of(oscar))) & owes_money_to(something, buffalo) => not enemy(something, raven)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The halibut has a card that is yellow in color\nhas(halibut, card_with(yellow_color)) = True\n# The halibut has one friend that is bald and 4 friends that are not\nfriends(halibut) = 5\n# The panther invented a time machine\ncreated_time_machine(panther) = True\n# The rabbit has some romaine lettuce\nhas(rabbit, romaine_lettuce) = True\n# The rabbit parked her bike in front of the store\nparked_bike(rabbit, store) = True\n\n# Based on the game state and the rules and preferences, does the raven hold the same number of points as the carp?\nquestion = holds_same_number_of_points(raven, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hummingbird has fewer than seventeen friends, then it burns the warehouse of the canary\nRule2: If the hummingbird has a musical instrument, then it burns the warehouse of the canary\nRule3: If an animal does not eat the food of the leopard, then it prepares armor for the doctorfish\nRule4: If the pig raises a flag of peace for the tilapia and the canary attacks the green fields of the tilapia, then the tilapia learns elementary resource management from the tiger\nRule5: If the hummingbird burns the warehouse of the canary, then the canary attacks the green fields of the tilapia\nRule6: If at least one animal prepares armor for the doctorfish, then the pig raises a flag of peace for the tilapia\n\nThe current state of the game is as follows\nThe bat gives a magnifier to the hummingbird\nThe hummingbird has a tablet\nThe hummingbird has eight friends\nThe swordfish eats the food of the leopard\n\nBased on the game state and the rules and preferences, does the tilapia learn the basics of resource management from the tiger?\nQuestion: Does the tilapia learn the basics of resource management from the tiger?",
        "idx": 140,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hummingbird has fewer than seventeen friends, then the hummingbird burns the warehouse of the canary\nrule1() = friends(hummingbird) < 17 => burn(warehouse_of(canary))\n# Rule2: Regarding the hummingbird, if it has a musical instrument, then we can conclude that it burns the warehouse that is in possession of the canary\nrule2() = has(hummingbird, musical_instrument) => burn(warehouse_of(canary))\n# Rule3: If you are positive that one of the animals does not eat the food of the leopard, you can be certain that it will prepare armor for the doctorfish without a doubt\nrule3(something) = not eat_food_of(something, leopard) => prepare_armor(something, doctorfish)\n# Rule4: If the pig raises a flag of peace for the tilapia and the canary attacks the green fields of the tilapia, then the tilapia learns elementary resource management from the tiger\nrule4() = raise_flag_of_peace(pig, tilapia) & attack(canary, green_fields_of(tilapia)) => learn_elementary_resource_management(tilapia, tiger)\n# Rule5: The canary unquestionably attacks the green fields of the tilapia, in the case where the hummingbird burns the warehouse of the canary\nrule5() = burn(warehouse_of(canary), hummingbird) => attack(canary, green_fields_of(tilapia))\n# Rule6: The pig raises a peace flag for the tilapia whenever at least one animal prepares armor for the doctorfish.\nrule6() = prepare_armor(something, doctorfish) => raise_flag_of_peace(pig, tilapia)\n\n# The current state of the game is as follows\n# The bat gives a magnifier to the hummingbird\ngive(bat, magnifier, hummingbird) = True\n# The hummingbird has a tablet\nhas(hummingbird, tablet) = True\n# The hummingbird has eight friends\nfriends(hummingbird) = 8\n# The swordfish eats the food of the leopard\neat_food_of(swordfish, leopard) = True\n\n# Based on the game state and the rules and preferences, does the tilapia learn the basics of resource management from the tiger?\nquestion = learn_elementary_resource_management(tilapia, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the leopard has more than nine friends, then the leopard shows her cards (all of them) to the carp\nRule2: If the oscar does not remove one of the pieces of the lion and the spider does not raise a flag of peace for the lion, then the lion becomes an enemy of the squid\nRule3: If the oscar has a name whose first letter is the same as the first letter of the spider's name, then the oscar removes one of the pieces of the lion\nRule4: If the zander does not eat the food that belongs to the tilapia, then the tilapia prepares armor for the lion\nRule5: If something becomes an enemy of the squid but does not remove from the board one of the pieces of the dog, then it steals five points from the mosquito\nRule6: If something does not roll the dice for the starfish, then it does not prepare armor for the lion\nRule7: If the spider has fewer than 3 friends, then it raises a peace flag for the lion\nRule8: If the oscar has a device to connect to the internet, then it removes one of the pieces of the lion\nRule9: If the spider has a card with a primary color, then it does not raise a flag of peace for the lion\nRule10: If the leopard has a high salary, then she shows her cards (all of them) to the carp\nRule11: If the spider has something to drink, then it raises a peace flag for the lion\nRule12: If the spider owns a luxury aircraft, then it does not raise a flag of peace for the lion\nRule13: If something rolls the dice for the wolverine, then it does not remove one of the pieces of the lion\nRule14: If at least one animal shows her cards (all of them) to the carp, then the lion does not remove one of the pieces of the dog\n\nRule12 is preferred over Rule11\nRule12 is preferred over Rule7\nRule3 is preferred over Rule13\nRule6 is preferred over Rule4\nRule8 is preferred over Rule13\nRule9 is preferred over Rule11\nRule9 is preferred over Rule7\n\nThe current state of the game is as follows\nThe carp is named Cinnamon\nThe leopard got a well-paid job\nThe leopard has 1 friend\nThe leopard is named Chickpea\nThe oscar is named Charlie and rolls the dice for the wolverine\nThe spider dreamed of a luxury aircraft\nThe spider has a cappuccino\nThe spider is named Paco\nThe spider has a card that is blue in color\nThe spider has twelve friends\nThe zander does not eat the food of the tilapia\n\nBased on the game state and the rules and preferences, does the lion steal five points from the mosquito?\nQuestion: Does the lion steal five points from the mosquito?",
        "idx": 141,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the leopard has more than nine friends, then the leopard shows her cards (all of them) to the carp\nrule1() = friends(leopard) > 9 => show_cards(leopard, carp)\n# Rule2: If the oscar does not remove one of the pieces of the lion and the spider does not raise a flag of peace for the lion, then the lion becomes an enemy of the squid\nrule2() = not remove(oscar, piece_of(lion)) & not raise_flag_of_peace(spider, lion) => enemy(lion, squid)\n# Rule3: If the oscar has a name whose first letter is the same as the first letter of the spider's name, then the oscar removes one of the pieces of the lion\nrule3() = first_letter_of(name(oscar)) == first_letter_of(name(spider)) => remove(oscar, piece_of(lion))\n# Rule4: If the zander does not eat the food that belongs to the tilapia, then the tilapia prepares armor for the lion\nrule4() = not eat_food(zander, food_of(tilapia)) => prepare_armor(tilapia, lion)\n# Rule5: If you see that something becomes an enemy of the squid but does not remove from the board one of the pieces of the dog, what can you certainly conclude? You can conclude that it steals five points from the mosquito\nrule5(something) = enemy(something, squid) & not remove(something, piece_of(dog)) => steal_points(something, 5, mosquito)\n# Rule6: If something does not roll the dice for the starfish, then it does not prepare armor for the lion\nrule6() = not roll_dice(something, starfish) => not prepare_armor(something, lion)\n# Rule7: Regarding the spider, if it has fewer than 3 friends, then we can conclude that it raises a peace flag for the lion\nrule7() = friends(spider) < 3 => raise_flag_of_peace(spider, lion)\n# Rule8: Regarding the oscar, if it has a device to connect to the internet, then we can conclude that it removes one of the pieces of the lion\nrule8() = has(oscar, connect_to_internet(device)) => remove(oscar, piece_of(lion))\n# Rule9: Regarding the spider, if it has a card with a primary color, then we can conclude that it does not raise a flag of peace for the lion\nrule9() = has(spider, card_with(primary_color)) => not raise_flag_of_peace(spider, lion)\n# Rule10: Regarding the leopard, if it has a high salary, then we can conclude that it shows her cards (all of them) to the carp\nrule10() = has_high_salary(leopard) => show_cards(leopard, carp)\n# Rule11: If the spider has something to drink, then the spider raises a peace flag for the lion\nrule11() = has(spider, drink) => raise_flag_of_peace(spider, lion)\n# Rule12: Regarding the spider, if it owns a luxury aircraft, then we can conclude that it does not raise a flag of peace for the lion\nrule12() = owns(spider, luxury_aircraft) => not raise_flag_of_peace(spider, lion)\n# Rule13: If something rolls the dice for the wolverine, then it does not remove one of the pieces of the lion\nrule13(something) = roll_dice(something, wolverine) => not remove(something, piece_of(lion))\n# Rule14: If at least one animal shows her cards (all of them) to the carp, then the lion does not remove from the board one of the pieces of the dog.\nrule14() = show_cards(something, carp) => not remove(lion, piece_of(dog))\n# Rule12 is preferred over Rule11\norder(rule12) > order(rule11) = True\n# Rule12 is preferred over Rule7\norder(rule12) > order(rule7) = True\n# Rule3 is preferred over Rule13\norder(rule3) > order(rule13) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule8 is preferred over Rule13\norder(rule8) > order(rule13) = True\n# Rule9 is preferred over Rule11\norder(rule9) > order(rule11) = True\n# Rule9 is preferred over Rule7\norder(rule9) > order(rule7) = True\n\n# The current state of the game is as follows\n# The carp is named Cinnamon\nname(carp, Cinnamon) = True\n# The leopard got a well-paid job\nhas_high_salary(leopard) = True\n# The leopard has 1 friend\nfriends(leopard) = 1\n# The leopard is named Chickpea\nname(leopard, Chickpea) = True\n# The oscar is named Charlie, and rolls the dice for the wolverine\nname(oscar, Charlie) = True\nroll_dice(oscar, wolverine) = True\n# The spider dreamed of a luxury aircraft, has a cappuccino, and is named Paco\nname(spider, Paco) = True\ndreamed(spider, luxury_aircraft) = True\nhas(spider, cappuccino) = True\n# The spider has a card that is blue in color\nhas(spider, card_with(blue_color)) = True\n# The spider has twelve friends\nfriends(spider) = 12\n# The zander does not eat the food of the tilapia\nnot eat_food(zander, food_of(tilapia)) = True\n\n# Based on the game state and the rules and preferences, does the lion steal five points from the mosquito?\nquestion = steal_points(lion, 5, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the puffin has a name whose first letter is the same as the first letter of the wolverine's name, then the puffin proceeds to the spot that is right after the spot of the jellyfish\nRule2: If the moose has fewer than twelve friends, then the moose removes one of the pieces of the jellyfish\nRule3: If the puffin has more than five friends, then it proceeds to the spot that is right after the spot of the jellyfish\nRule4: If the squirrel winks at the grizzly bear, then the grizzly bear does not remove one of the pieces of the jellyfish\nRule5: If something does not give a magnifying glass to the halibut and also does not sing a song of victory for the canary, then it does not offer a job position to the swordfish\nRule6: If the puffin proceeds to the spot that is right after the spot of the jellyfish and the moose removes one of the pieces of the jellyfish, then the jellyfish does not give a magnifying glass to the halibut\nRule7: If the tiger becomes an actual enemy of the grizzly bear, then the grizzly bear removes one of the pieces of the jellyfish\nRule8: If the grizzly bear removes one of the pieces of the jellyfish, then the jellyfish does not sing a song of victory for the canary\n\nRule4 is preferred over Rule7\n\nThe current state of the game is as follows\nThe moose has seven friends\nThe puffin has one playful friend and one non-playful friend\nThe puffin is named Milo\nThe tiger becomes an enemy of the grizzly bear\nThe wolverine is named Meadow\n\nBased on the game state and the rules and preferences, does the jellyfish offer a job to the swordfish?\nQuestion: Does the jellyfish offer a job position to the swordfish?",
        "idx": 142,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the puffin has a name whose first letter is the same as the first letter of the wolverine's name, then the puffin proceeds to the spot that is right after the spot of the jellyfish\nrule1() = first_letter_of(name(puffin)) == first_letter_of(name(wolverine)) => proceed(puffin, spot_right_after(spot_of(jellyfish)))\n# Rule2: If the moose has fewer than twelve friends, then the moose removes from the board one of the pieces of the jellyfish\nrule2() = friends(moose) < 12 => remove(moose, piece_of(jellyfish))\n# Rule3: Regarding the puffin, if it has more than five friends, then we can conclude that it proceeds to the spot that is right after the spot of the jellyfish\nrule3() = friends(puffin) > 5 => proceed(puffin, spot_right_after(spot_of(jellyfish)))\n# Rule4: The grizzly bear does not remove one of the pieces of the jellyfish, in the case where the squirrel winks at the grizzly bear\nrule4() = wink(squirrel, grizzly_bear) => not remove(grizzly_bear, piece_of(jellyfish))\n# Rule5: Be careful when something does not give a magnifying glass to the halibut and also does not sing a song of victory for the canary because in this case it will surely not offer a job position to the swordfish (this may or may not be problematic)\nrule5(something) = not give_magnifying_glass(something, halibut) & not sing_song(something, victory_song_for(canary)) => not offer_job_position(something, swordfish)\n# Rule6: If the puffin proceeds to the spot that is right after the spot of the jellyfish and the moose removes one of the pieces of the jellyfish, then the jellyfish will not give a magnifying glass to the halibut\nrule6() = proceed(puffin, spot_right_after(spot_of(jellyfish))) & remove(moose, piece_of(jellyfish)) => not give_magnifying_glass(jellyfish, halibut)\n# Rule7: The grizzly bear unquestionably removes one of the pieces of the jellyfish, in the case where the tiger becomes an actual enemy of the grizzly bear\nrule7() = enemy(tiger, grizzly_bear) => remove(grizzly_bear, piece_of(jellyfish))\n# Rule8: The jellyfish does not sing a song of victory for the canary, in the case where the grizzly bear removes one of the pieces of the jellyfish.\nrule8() = remove(grizzly_bear, piece_of(jellyfish)) => not sing_song(jellyfish, victory_song_for(canary))\n# Rule4 is preferred over Rule7\norder(rule4) > order(rule7) = True\n\n# The current state of the game is as follows\n# The moose has seven friends\nfriends(moose) = 7\n# The puffin has one friend that is playful and 1 friend that is not, and is named Milo\nfriends(puffin) = 2\nhas_friend(puffin, playful) = True\nhas_friend(puffin, not_playful) = True\nname(puffin, Milo) = True\n# The tiger becomes an enemy of the grizzly bear\nenemy(tiger, grizzly_bear) = True\n# The wolverine is named Meadow\nname(wolverine, Meadow) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish offer a job to the swordfish?\nquestion = offer_job_position(jellyfish, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something removes one of the pieces of the hummingbird from the board, then it also knocks down the fortress of the sea bass\nRule2: If the sun bear has something to drink, then it does not roll the dice for the lobster\nRule3: If the sun bear has a card with a primary color, then it winks at the polar bear\nRule4: If something winks at the polar bear but does not roll the dice for the lobster, then it does not remove one of the pieces of the hummingbird from the board\nRule5: If the sun bear has fewer than two friends, then it does not roll the dice for the lobster\nRule6: If the sun bear has a name whose first letter is the same as the first letter of the blobfish's name, then it winks at the polar bear\n\nThe current state of the game is as follows\nThe blobfish is named Pashmak\nThe sun bear has 11 friends, has a beer, has a card that is blue in color, and is named Tarzan\n\nBased on the game state and the rules and preferences, does the sun bear knock down the fortress of the sea bass?\nQuestion: Does the sun bear knock down the fortress of the sea bass?",
        "idx": 143,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something removes from the board one of the pieces of the hummingbird, then it knocks down the fortress of the sea bass, too\nrule1() = remove(something, piece_of(hummingbird)) => knock_down_fortress(something, sea_bass)\n# Rule2: If the sun bear has something to drink, then the sun bear does not roll the dice for the lobster\nrule2() = has(sun_bear, drink) => not roll_dice(sun_bear, lobster)\n# Rule3: Regarding the sun bear, if it has a card with a primary color, then we can conclude that it winks at the polar bear\nrule3() = has(sun_bear, card_with(primary_color)) => wink_at(sun_bear, polar_bear)\n# Rule4: If you see that something winks at the polar bear but does not roll the dice for the lobster, what can you certainly conclude? You can conclude that it does not remove from the board one of the pieces of the hummingbird\nrule4() = wink_at(something, polar_bear) & not roll_dice(something, lobster) => not remove(something, piece_of(hummingbird))\n# Rule5: Regarding the sun bear, if it has fewer than two friends, then we can conclude that it does not roll the dice for the lobster\nrule5() = friends(sun_bear) < 2 => not roll_dice(sun_bear, lobster)\n# Rule6: If the sun bear has a name whose first letter is the same as the first letter of the blobfish's name, then the sun bear winks at the polar bear.\nrule6() = first_letter_of(name(sun_bear)) == first_letter_of(name(blobfish)) => wink_at(sun_bear, polar_bear)\n\n# The current state of the game is as follows\n# The blobfish is named Pashmak\nname(blobfish, Pashmak) = True\n# The sun bear has 11 friends, has a beer, has a card that is blue in color, and is named Tarzan.\nfriends(sun_bear) = 11\nhas(sun_bear, beer) = True\nhas(sun_bear, card_with(blue_color)) = True\nname(sun_bear, Tarzan) = True\n\n# Based on the game state and the rules and preferences, does the sun bear knock down the fortress of the sea bass?\nquestion = knock_down_fortress(sun_bear, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals prepares armor for the kudu, you can be certain that it will also show all her cards to the lobster\nRule2: If the donkey does not need support from the eagle, then the eagle proceeds to the spot that is right after the spot of the canary\nRule3: The canary unquestionably prepares armor for the kudu, in the case where the jellyfish does not knock down the fortress of the canary\nRule4: If the jellyfish works fewer hours than before, then the jellyfish knocks down the fortress of the canary\nRule5: If the eagle has a card whose color starts with the letter \"r\", then the eagle does not proceed to the spot that is right after the spot of the canary\nRule6: If something raises a flag of peace for the wolverine and needs support from the kangaroo, then it does not knock down the fortress of the canary\n\nRule4 is preferred over Rule6\nRule5 is preferred over Rule2\n\nThe current state of the game is as follows\nThe jellyfish needs support from the kangaroo\nThe jellyfish raises a peace flag for the wolverine\nThe donkey does not need support from the eagle\n\nBased on the game state and the rules and preferences, does the canary show all her cards to the lobster?\nQuestion: Does the canary show all her cards to the lobster?",
        "idx": 144,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals prepares armor for the kudu, you can be certain that it will also show her cards (all of them) to the lobster\nrule1() = prepare_armor(something, kudu) => show_cards(something, lobster)\n# Rule2: If the donkey does not need support from the eagle, then the eagle proceeds to the spot that is right after the spot of the canary\nrule2() = not needs_support(donkey, eagle) => proceed(eagle, spot_right_after(spot_of(canary)))\n# Rule3: The canary unquestionably prepares armor for the kudu, in the case where the jellyfish does not knock down the fortress of the canary\nrule3() = not knock_down(fortress_of(canary), jellyfish) => prepare_armor(canary, kudu)\n# Rule4: If the jellyfish works fewer hours than before, then the jellyfish knocks down the fortress of the canary\nrule4() = reduce_work_hours(jellyfish) => knock_down(fortress_of(canary), jellyfish)\n# Rule5: If the eagle has a card whose color starts with the letter \"r\", then the eagle does not proceed to the spot that is right after the spot of the canary\nrule5() = has(eagle, card_with(color_starting_with(\"r\"))) => not proceed(eagle, spot_right_after(spot_of(canary)))\n# Rule6: If you see that something raises a flag of peace for the wolverine and needs support from the kangaroo, what can you certainly conclude? You can conclude that it does not knock down the fortress of the canary.\nrule6(something) = raise_flag_of_peace(something, wolverine) & needs_support(something, kangaroo) => not knock_down(fortress_of(canary), something)\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n\n# The current state of the game is as follows\n# The jellyfish needs support from the kangaroo\nneeds_support(jellyfish, kangaroo) = True\n# The jellyfish raises a peace flag for the wolverine\nraise_flag_of_peace(jellyfish, wolverine) = True\n# The donkey does not need support from the eagle\nnot needs_support(donkey, eagle) = True\n\n# Based on the game state and the rules and preferences, does the canary show all her cards to the lobster?\nquestion = show_cards(canary, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something does not burn the warehouse that is in possession of the blobfish but shows all her cards to the hippopotamus because in this case it certainly does not show all her cards to the buffalo (this may or may not be problematic)\nRule2: If the puffin has a sharp object, then it raises a peace flag for the panda bear\nRule3: The puffin will not show her cards to the hippopotamus, in the case where the carp does not wink at the puffin\nRule4: If at least one animal shows all her cards to the viperfish, then the puffin does not burn the warehouse that is in possession of the blobfish\nRule5: If something does not raise a peace flag for the panda bear, then it shows her cards to the hippopotamus\nRule6: If the puffin is a fan of Chris Ronaldo, then it does not raise a peace flag for the panda bear\nRule7: If the puffin has a name whose first letter is the same as the first letter of the hummingbird's name, then it does not raise a peace flag for the panda bear\nRule8: If the blobfish has fewer than one friend, then it shows her cards to the viperfish\nRule9: If the blobfish has something to sit on, then it shows her cards to the viperfish\nRule10: If the puffin has a card with a primary color, then it raises a peace flag for the panda bear\n\nRule10 is preferred over Rule6\nRule10 is preferred over Rule7\nRule2 is preferred over Rule6\nRule2 is preferred over Rule7\nRule3 is preferred over Rule5\n\nThe current state of the game is as follows\nThe blobfish has a club chair\nThe blobfish has seven friends\nThe hummingbird is named Paco\nThe puffin has a club chair\nThe puffin hates Chris Ronaldo\nThe puffin is named Peddi\n\nBased on the game state and the rules and preferences, does the puffin show all her cards to the buffalo?\nQuestion: Does the puffin show all her cards to the buffalo?",
        "idx": 145,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not burn the warehouse that is in possession of the blobfish but shows all her cards to the hippopotamus because in this case it certainly does not show all her cards to the buffalo (this may or may not be problematic)\nrule1(something) = not burn(warehouse_of(blobfish), something) & show_cards(something, hippopotamus) => not show_cards(something, buffalo)\n# Rule2: Regarding the puffin, if it has a sharp object, then we can conclude that it raises a peace flag for the panda bear\nrule2() = has(puffin, sharp_object) => raise_flag_of_peace(puffin, panda_bear)\n# Rule3: The puffin will not show her cards (all of them) to the hippopotamus, in the case where the carp does not wink at the puffin\nrule3() = not wink(carp, puffin) => not show_cards(puffin, hippopotamus)\n# Rule4: If at least one animal shows all her cards to the viperfish, then the puffin does not burn the warehouse that is in possession of the blobfish\nrule4(something) = show_cards(something, viperfish) => not burn(warehouse_of(blobfish), puffin)\n# Rule5: If something does not raise a flag of peace for the panda bear, then it shows her cards (all of them) to the hippopotamus\nrule5(something) = not raise_flag_of_peace(something, panda_bear) => show_cards(something, hippopotamus)\n# Rule6: If the puffin is a fan of Chris Ronaldo, then the puffin does not raise a flag of peace for the panda bear\nrule6() = fan_of(puffin, Chris_Ronaldo) => not raise_flag_of_peace(puffin, panda_bear)\n# Rule7: If the puffin has a name whose first letter is the same as the first letter of the hummingbird's name, then the puffin does not raise a peace flag for the panda bear\nrule7() = first_letter_of(name(puffin)) == first_letter_of(name(hummingbird)) => not raise_flag_of_peace(puffin, panda_bear)\n# Rule8: If the blobfish has fewer than one friend, then the blobfish shows her cards (all of them) to the viperfish\nrule8() = friends(blobfish) < 1 => show_cards(blobfish, viperfish)\n# Rule9: Regarding the blobfish, if it has something to sit on, then we can conclude that it shows her cards (all of them) to the viperfish\nrule9() = has(blobfish, something_to_sit_on) => show_cards(blobfish, viperfish)\n# Rule10: If the puffin has a card with a primary color, then the puffin raises a flag of peace for the panda bear.\nrule10() = has(puffin, card_with(primary_color)) => raise_flag_of_peace(puffin, panda_bear)\n# Rule10 is preferred over Rule6\norder(rule10) > order(rule6) = True\n# Rule10 is preferred over Rule7\norder(rule10) > order(rule7) = True\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n\n# The current state of the game is as follows\n# The blobfish has a club chair, and has seven friends\nhas(blobfish, club_chair) = True\nfriends(blobfish) = 7\n# The hummingbird is named Paco\nname(hummingbird, Paco) = True\n# The puffin has a club chair, hates Chris Ronaldo, and is named Peddi\nhas(puffin, club_chair) = True\nhates(puffin, Chris_Ronaldo) = True\nname(puffin, Peddi) = True\n\n# Based on the game state and the rules and preferences, does the puffin show all her cards to the buffalo?\nquestion = show_cards(puffin, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hummingbird has a sharp object, then it proceeds to the spot right after the oscar\nRule2: If the oscar has a leafy green vegetable, then it attacks the green fields of the squirrel\nRule3: If you see one of the animals remove a piece of the octopus, then it owes money to the gecko\nRule4: If something does not show all her cards to the eel but attacks the green fields of the squirrel, then it removes a piece of the octopus\nRule5: If the oscar has a name whose first letter is the same as the first letter of the wolverine's name, then it shows all her cards to the eel\nRule6: If the jellyfish knocks down the fortress of the cheetah, then the cheetah offers a job to the oscar\nRule7: If the oscar does not have her keys, then it does not show all her cards to the eel\nRule8: If the oscar has fewer than four friends, then it shows all her cards to the eel\nRule9: If the oscar has a card with a primary color, then it attacks the green fields of the squirrel\nRule10: If the hummingbird has a card with a color that appears in the flag of Belgium, then it proceeds to the spot right after the oscar\nRule11: If something needs support from the salmon, then it does not owe money to the gecko\n\nRule3 is preferred over Rule11\nRule5 is preferred over Rule7\nRule8 is preferred over Rule7\n\nThe current state of the game is as follows\nThe hummingbird has a card that is black in color\nThe hummingbird has a trumpet\nThe jellyfish knocks down the fortress of the cheetah\nThe oscar has a card that is green in color\nThe oscar has six adventurous friends and three non-adventurous friends\nThe oscar owns a luxury aircraft\nThe oscar has a love seat sofa\nThe wolverine is named Milo\n\nBased on the game state and the rules and preferences, does the oscar owe money to the gecko?\nQuestion: Does the oscar owe money to the gecko?",
        "idx": 146,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hummingbird, if it has a sharp object, then we can conclude that it proceeds to the spot right after the oscar\nrule1() = has(hummingbird, sharp_object) => proceed(hummingbird, spot_right_after(spot_of(oscar)))\n# Rule2: If the oscar has a leafy green vegetable, then the oscar attacks the green fields of the squirrel\nrule2() = has(oscar, leafy_green_vegetable) => attack(oscar, green_fields_of(squirrel))\n# Rule3: If you are positive that you saw one of the animals removes one of the pieces of the octopus, you can be certain that it will also owe $$$ to the gecko\nrule3(something) = remove(something, piece_of(octopus)) => owes_money_to(something, gecko)\n# Rule4: Be careful when something does not show her cards (all of them) to the eel but attacks the green fields of the squirrel because in this case it will, surely, remove from the board one of the pieces of the octopus (this may or may not be problematic)\nrule4(something) = not show_cards(something, eel) & attack(something, green_fields_of(squirrel)) => remove(something, piece_of(octopus))\n# Rule5: Regarding the oscar, if it has a name whose first letter is the same as the first letter of the wolverine's name, then we can conclude that it shows all her cards to the eel\nrule5() = first_letter_of(name(oscar)) == first_letter_of(name(wolverine)) => show_cards(oscar, eel)\n# Rule6: The cheetah unquestionably offers a job to the oscar, in the case where the jellyfish knocks down the fortress of the cheetah\nrule6() = knock_down(jellyfish, fortress_of(cheetah)) => offer_job(cheetah, oscar)\n# Rule7: If the oscar does not have her keys, then the oscar does not show all her cards to the eel\nrule7() = not has(oscar, keys) => not show_cards(oscar, eel)\n# Rule8: Regarding the oscar, if it has fewer than four friends, then we can conclude that it shows her cards (all of them) to the eel\nrule8() = friends(oscar) < 4 => show_cards(oscar, eel)\n# Rule9: If the oscar has a card with a primary color, then the oscar attacks the green fields of the squirrel\nrule9() = has(oscar, card_with(primary_color)) => attack(oscar, green_fields_of(squirrel))\n# Rule10: Regarding the hummingbird, if it has a card whose color appears in the flag of Belgium, then we can conclude that it proceeds to the spot right after the oscar\nrule10() = has(hummingbird, card_with(color_in_flag_of(Belgium))) => proceed(hummingbird, spot_right_after(spot_of(oscar)))\n# Rule11: If something needs support from the salmon, then it does not owe money to the gecko.\nrule11(something) = needs_support(something, salmon) => not owes_money_to(something, gecko)\n# Rule3 is preferred over Rule11\norder(rule3) > order(rule11) = True\n# Rule5 is preferred over Rule7\norder(rule5) > order(rule7) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n\n# The current state of the game is as follows\n# The hummingbird has a card that is black in color\nhas(hummingbird, card_with(black_color)) = True\n# The hummingbird has a trumpet\nhas(hummingbird, trumpet) = True\n# The jellyfish knocks down the fortress of the cheetah\nknock_down(jellyfish, fortress_of(cheetah)) = True\n# The oscar has a card that is green in color, has six friends that are adventurous and 3 friends that are not, and purchased a luxury aircraft\nhas(oscar, card_with(green_color)) = True\nfriends(oscar, adventurous) = 6\nfriends(oscar, not_adventurous) = 3\nhas(oscar, luxury_aircraft) = True\n# The oscar has a love seat sofa\nhas(oscar, love_seat_sofa) = True\n# The wolverine is named Milo\nname(wolverine, Milo) = True\n\n# Based on the game state and the rules and preferences, does the oscar owe money to the gecko?\nquestion = owes_money_to(oscar, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the salmon has a high salary, then it prepares armor for the hare\nRule2: If something prepares armor for the cheetah but does not become an enemy of the jellyfish, then it proceeds to the spot right after the spot of the snail\nRule3: The squid holds an equal number of points as the zander, in the case where the grasshopper does not eat the food that belongs to the squid\nRule4: If the pig has a card whose color appears in the flag of the Netherlands, then it burns the warehouse of the squid\nRule5: If the aardvark steals five points from the squid and the pig burns the warehouse of the squid, then the squid prepares armor for the cheetah\nRule6: If the aardvark has a musical instrument, then it does not steal five points from the squid\nRule7: If the meerkat has a card with a primary color, then it winks at the squid\nRule8: The meerkat will not wink at the squid, in the case where the canary does not offer a job position to the meerkat\nRule9: If you see that one of the animals raises a flag of peace for the pig, then it will not proceed to the spot right after the snail\nRule10: If at least one animal prepares armor for the hare, then the squid does not prepare armor for the cheetah\nRule11: The pig does not burn the warehouse of the squid, in the case where the bat rolls the dice for the pig\nRule12: The squid does not become an actual enemy of the jellyfish, in the case where the meerkat winks at the squid\nRule13: If the salmon has a card with a primary color, then it prepares armor for the hare\nRule14: If the aardvark has a name whose first letter is the same as the first letter of the tilapia's name, then the aardvark steals five points from the squid\n\nRule4 is preferred over Rule11\nRule5 is preferred over Rule10\nRule6 is preferred over Rule14\nRule7 is preferred over Rule8\nRule9 is preferred over Rule2\n\nThe current state of the game is as follows\nThe aardvark is named Tango\nThe bat rolls the dice for the pig\nThe meerkat has a card that is red in color\nThe pig has a card that is blue in color\nThe salmon has a well-paid job and a card that is yellow in color\nThe tilapia is named Tessa\nThe turtle respects the squid\nThe canary does not offer a job to the meerkat\nThe grasshopper does not eat the food of the squid\n\nBased on the game state and the rules and preferences, does the squid proceed to the spot right after the snail?\nQuestion: Does the squid proceed to the spot right after the snail?",
        "idx": 147,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the salmon, if it has a high salary, then we can conclude that it prepares armor for the hare\nrule1() = has_high_salary(salmon) => prepare_armor(salmon, hare)\n# Rule2: If you see that something prepares armor for the cheetah but does not become an enemy of the jellyfish, what can you certainly conclude? You can conclude that it proceeds to the spot that is right after the spot of the snail\nrule2() = prepare_armor(something, cheetah) & not enemy(something, jellyfish) => proceed(something, spot_right_after(spot_of(snail)))\n# Rule3: The squid unquestionably holds an equal number of points as the zander, in the case where the grasshopper does not eat the food that belongs to the squid\nrule3() = not eat(grasshopper, food_of(squid)) => points(squid) == points(zander)\n# Rule4: Regarding the pig, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it burns the warehouse of the squid\nrule4() = has(pig, card_with(color_in_flag_of_Netherlands)) => burn(warehouse_of(squid))\n# Rule5: For the squid, if the belief is that the aardvark steals five points from the squid and the pig burns the warehouse that is in possession of the squid, then you can add \"the squid prepares armor for the cheetah\" to your conclusions\nrule5() = steal_points(aardvark, 5, squid) & burn(warehouse_of(squid)) => prepare_armor(squid, cheetah)\n# Rule6: If the aardvark has a musical instrument, then the aardvark does not steal five points from the squid\nrule6() = has(aardvark, musical_instrument) => not steal_points(aardvark, 5, squid)\n# Rule7: Regarding the meerkat, if it has a card with a primary color, then we can conclude that it winks at the squid\nrule7() = has(meerkat, card_with(primary_color)) => wink(meerkat, squid)\n# Rule8: The meerkat will not wink at the squid, in the case where the canary does not offer a job position to the meerkat\nrule8() = not offer_job_position(canary, meerkat) => not wink(meerkat, squid)\n# Rule9: If you are positive that you saw one of the animals raises a flag of peace for the pig, you can be certain that it will not proceed to the spot right after the snail\nrule9() = raise_flag_of_peace(something, pig) => not proceed(something, spot_right_after(spot_of(snail)))\n# Rule10: If at least one animal prepares armor for the hare, then the squid does not prepare armor for the cheetah\nrule10() = prepare_armor(something, hare) => not prepare_armor(squid, cheetah)\n# Rule11: The pig does not burn the warehouse of the squid, in the case where the bat rolls the dice for the pig\nrule11() = roll_dice(bat, pig) => not burn(warehouse_of(squid))\n# Rule12: The squid does not become an actual enemy of the jellyfish, in the case where the meerkat winks at the squid\nrule12() = wink(meerkat, squid) => not enemy(squid, jellyfish)\n# Rule13: Regarding the salmon, if it has a card with a primary color, then we can conclude that it prepares armor for the hare\nrule13() = has(salmon, card_with(primary_color)) => prepare_armor(salmon, hare)\n# Rule14: If the aardvark has a name whose first letter is the same as the first letter of the tilapia's name, then the aardvark steals five points from the squid.\nrule14() = first_letter_of(name(aardvark)) == first_letter_of(name(tilapia)) => steal_points(aardvark, 5, squid)\n# Rule4 is preferred over Rule11\norder(rule4) > order(rule11) = True\n# Rule5 is preferred over Rule10\norder(rule5) > order(rule10) = True\n# Rule6 is preferred over Rule14\norder(rule6) > order(rule14) = True\n# Rule7 is preferred over Rule8\norder(rule7) > order(rule8) = True\n# Rule9 is preferred over Rule2\norder(rule9) > order(rule2) = True\n\n# The current state of the game is as follows\n# The aardvark is named Tango\nname(aardvark, Tango) = True\n# The bat rolls the dice for the pig\nroll_dice(bat, pig) = True\n# The meerkat has a card that is red in color\nhas(meerkat, card_with(red_color)) = True\n# The pig has a card that is blue in color\nhas(pig, card_with(blue_color)) = True\n# The salmon got a well-paid job, and has a card that is yellow in color\nhas_well_paid_job(salmon) = True\nhas(salmon, card_with(yellow_color)) = True\n# The tilapia is named Tessa\nname(tilapia, Tessa) = True\n# The turtle respects the squid\nrespects(turtle, squid) = True\n# The canary does not offer a job to the meerkat\nnot offer_job_position(canary, meerkat) = True\n# The grasshopper does not eat the food of the squid\nnot eat(grasshopper, food_of(squid)) = True\n\n# Based on the game state and the rules and preferences, does the squid proceed to the spot right after the snail?\nquestion = proceed(squid, spot_right_after(spot_of(snail)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tilapia has a card whose color appears in the flag of Japan, then the tilapia does not hold an equal number of points as the koala\nRule2: If something does not become an enemy of the meerkat, then it holds the same number of points as the koala\nRule3: If the pig has fewer than 12 friends, then the pig does not hold the same number of points as the rabbit\nRule4: If the pig has something to carry apples and oranges, then the pig does not hold the same number of points as the rabbit\nRule5: If the crocodile holds an equal number of points as the penguin and the pig removes one of the pieces of the penguin, then the penguin will not eat the food that belongs to the halibut\nRule6: If something does not hold an equal number of points as the rabbit, then it removes one of the pieces of the penguin\nRule7: If at least one animal holds the same number of points as the koala, then the crocodile holds the same number of points as the penguin\nRule8: The pig does not remove one of the pieces of the penguin, in the case where the panda bear raises a peace flag for the pig.\n\nRule1 is preferred over Rule2\nRule8 is preferred over Rule6\n\nThe current state of the game is as follows\nThe pig got a well-paid job\nThe pig has 8 friends\nThe pig has a cappuccino\nThe pig has a card that is green in color\nThe tilapia does not become an enemy of the meerkat\n\nBased on the game state and the rules and preferences, does the penguin eat the food of the halibut?\nQuestion: Does the penguin eat the food of the halibut?",
        "idx": 148,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the tilapia has a card whose color appears in the flag of Japan, then the tilapia does not hold an equal number of points as the koala\nrule1() = has(tilapia, card_with(color_in_flag_of(Japan))) => not equal_points(tilapia, koala)\n# Rule2: If something does not become an enemy of the meerkat, then it holds the same number of points as the koala\nrule2(something) = not enemy(something, meerkat) => equal_points(something, koala)\n# Rule3: If the pig has fewer than 12 friends, then the pig does not hold the same number of points as the rabbit\nrule3() = friends(pig) < 12 => not equal_points(pig, rabbit)\n# Rule4: If the pig has something to carry apples and oranges, then the pig does not hold the same number of points as the rabbit\nrule4() = has(pig, carry_apples_and_oranges) => not equal_points(pig, rabbit)\n# Rule5: If the crocodile holds an equal number of points as the penguin and the pig removes one of the pieces of the penguin, then the penguin will not eat the food that belongs to the halibut\nrule5() = equal_points(crocodile, penguin) & remove(pig, piece_of(penguin)) => not eat_food(penguin, food_of(halibut))\n# Rule6: If something does not hold an equal number of points as the rabbit, then it removes one of the pieces of the penguin\nrule6(something) = not equal_points(something, rabbit) => remove(something, piece_of(penguin))\n# Rule7: If at least one animal holds the same number of points as the koala, then the crocodile holds the same number of points as the penguin\nrule7() = exists(animal) such that equal_points(animal, koala) => equal_points(crocodile, penguin)\n# Rule8: The pig does not remove one of the pieces of the penguin, in the case where the panda bear raises a peace flag for the pig.\nrule8() = raise_flag_of_peace(panda_bear, pig) => not remove(pig, piece_of(penguin))\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule8 is preferred over Rule6\norder(rule8) > order(rule6) = True\n\n# The current state of the game is as follows\n# The pig got a well-paid job, has 8 friends, and has a cappuccino\ngot_job(pig, well_paid) = True\nfriends(pig) = 8\nhas(pig, cappuccino) = True\n# The pig has a card that is green in color\nhas(pig, card_with(green_color)) = True\n# The tilapia does not become an enemy of the meerkat\nnot enemy(tilapia, meerkat) = True\n\n# Based on the game state and the rules and preferences, does the penguin eat the food of the halibut?\nquestion = eat_food(penguin, food_of(halibut))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the zander has more than seven friends, then the zander does not need the support of the phoenix\nRule2: If something holds an equal number of points as the hummingbird, then it offers a job to the panther, too\nRule3: If the puffin has fewer than four friends, then the puffin does not offer a job to the panther\nRule4: If the puffin has a card whose color starts with the letter \"r\", then the puffin does not offer a job position to the panther\nRule5: If something offers a job to the moose but does not show all her cards to the gecko, then it does not sing a victory song for the rabbit\nRule6: The phoenix does not show all her cards to the gecko whenever at least one animal needs the support of the mosquito\nRule7: If the zander has a card with a primary color, then it needs support from the phoenix\nRule8: The phoenix unquestionably sings a song of victory for the rabbit, in the case where the puffin does not prepare armor for the phoenix\nRule9: If the zander has a name whose first letter is the same as the first letter of the swordfish's name, then it needs the support of the phoenix\nRule10: If the zander has a sharp object, then it does not need the support of the phoenix\nRule11: The canary unquestionably attacks the green fields whose owner is the phoenix, in the case where the doctorfish sings a song of victory for the canary\nRule12: If something offers a job position to the panther, then it does not sing a victory song for the phoenix\nRule13: The puffin unquestionably sings a victory song for the phoenix, in the case where the grasshopper holds an equal number of points as the puffin\nRule14: If the cat does not give a magnifier to the canary, then the canary needs the support of the mosquito\nRule15: If the canary has fewer than 16 friends, then it does not need support from the mosquito\n\nRule1 is preferred over Rule7\nRule1 is preferred over Rule9\nRule10 is preferred over Rule7\nRule10 is preferred over Rule9\nRule13 is preferred over Rule12\nRule15 is preferred over Rule14\nRule3 is preferred over Rule2\nRule4 is preferred over Rule2\nRule8 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cat gives a magnifier to the canary\nThe doctorfish sings a victory song for the canary\nThe puffin has eleven friends\nThe puffin holds the same number of points as the hummingbird\nThe swordfish is named Meadow\nThe zander has 2 friends, has a card that is blue in color, and is named Casper\n\nBased on the game state and the rules and preferences, does the phoenix sing a victory song for the rabbit?\nQuestion: Does the phoenix sing a victory song for the rabbit?",
        "idx": 149,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the zander has more than seven friends, then the zander does not need the support of the phoenix\nrule1() = friends(zander) > 7 => not need_support(zander, phoenix)\n# Rule2: If something holds an equal number of points as the hummingbird, then it offers a job to the panther, too\nrule2(something) = points(something) == points(hummingbird) => offer_job_position(something, panther)\n# Rule3: If the puffin has fewer than four friends, then the puffin does not offer a job to the panther\nrule3() = friends(puffin) < 4 => not offer_job_position(puffin, panther)\n# Rule4: If the puffin has a card whose color starts with the letter \"r\", then the puffin does not offer a job position to the panther\nrule4() = has(puffin, card_with(color_starting_with(\"r\"))) => not offer_job_position(puffin, panther)\n# Rule5: If you see that something offers a job to the moose but does not show all her cards to the gecko, what can you certainly conclude? You can conclude that it does not sing a victory song for the rabbit\nrule5(something) = offer_job_position(something, moose) & not show_all_cards(something, gecko) => not sing_song(something, victory_song_for(rabbit))\n# Rule6: The phoenix does not show all her cards to the gecko whenever at least one animal needs the support of the mosquito\nrule6() = needs_support(something, mosquito) => not show_all_cards(phoenix, gecko)\n# Rule7: Regarding the zander, if it has a card with a primary color, then we can conclude that it needs support from the phoenix\nrule7() = has(zander, card_with(primary_color)) => needs_support(zander, phoenix)\n# Rule8: The phoenix unquestionably sings a song of victory for the rabbit, in the case where the puffin does not prepare armor for the phoenix\nrule8() = not prepare_armor(puffin, phoenix) => sing_song(phoenix, victory_song_for(rabbit))\n# Rule9: Regarding the zander, if it has a name whose first letter is the same as the first letter of the swordfish's name, then we can conclude that it needs the support of the phoenix\nrule9() = first_letter_of(name(zander)) == first_letter_of(name(swordfish)) => needs_support(zander, phoenix)\n# Rule10: Regarding the zander, if it has a sharp object, then we can conclude that it does not need the support of the phoenix\nrule10() = has(zander, sharp_object) => not needs_support(zander, phoenix)\n# Rule11: The canary unquestionably attacks the green fields whose owner is the phoenix, in the case where the doctorfish sings a song of victory for the canary\nrule11() = sing_song(doctorfish, victory_song_for(canary)) => attack(canary, green_fields_of(phoenix))\n# Rule12: If something offers a job position to the panther, then it does not sing a victory song for the phoenix\nrule12(something) = offer_job_position(something, panther) => not sing_song(something, victory_song_for(phoenix))\n# Rule13: The puffin unquestionably sings a victory song for the phoenix, in the case where the grasshopper holds an equal number of points as the puffin\nrule13() = points(grasshopper) == points(puffin) => sing_song(puffin, victory_song_for(phoenix))\n# Rule14: If the cat does not give a magnifier to the canary, then the canary needs the support of the mosquito\nrule14() = not give(cat, magnifier, canary) => needs_support(canary, mosquito)\n# Rule15: Regarding the canary, if it has fewer than 16 friends, then we can conclude that it does not need support from the mosquito.\nrule15() = friends(canary) < 16 => not needs_support(canary, mosquito)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule1 is preferred over Rule9\norder(rule1) > order(rule9) = True\n# Rule10 is preferred over Rule7\norder(rule10) > order(rule7) = True\n# Rule10 is preferred over Rule9\norder(rule10) > order(rule9) = True\n# Rule13 is preferred over Rule12\norder(rule13) > order(rule12) = True\n# Rule15 is preferred over Rule14\norder(rule15) > order(rule14) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cat gives a magnifier to the canary\ngive(cat, magnifier, canary) = True\n# The doctorfish sings a victory song for the canary\nsing_song(doctorfish, victory_song_for(canary)) = True\n# The puffin has eleven friends\nfriends(puffin) = 11\n# The puffin holds the same number of points as the hummingbird\npoints(puffin) == points(hummingbird) = True\n# The swordfish is named Meadow\nname(swordfish, Meadow) = True\n# The zander has 2 friends, has a card that is blue in color, and is named Casper\nfriends(zander) = 2\nhas(zander, card_with(blue_color)) = True\nname(zander, Casper) = True\n\n# Based on the game state and the rules and preferences, does the phoenix sing a victory song for the rabbit?\nquestion = sing_song(phoenix, victory_song_for(rabbit))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If one of the animals does not attack the green fields owned by the turtle, then it will not prepare armor for the ferret\nRule2: If the baboon has a name whose first letter is the same as the first letter of the lobster's name, then it attacks the green fields owned by the turtle\nRule3: If the baboon took a bike from the store, then it does not attack the green fields owned by the turtle\nRule4: If the baboon does not prepare armor for the ferret, then the ferret owes money to the sea bass\nRule5: If the baboon has more than 4 friends, then it holds an equal number of points as the leopard\nRule6: If the baboon has a leafy green vegetable, then it does not attack the green fields owned by the turtle\n\nRule3 is preferred over Rule2\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe baboon has 1 smart friend and 4 friends who are not smart\nThe baboon has a card that is yellow in color\nThe baboon has a guitar\nThe baboon is named Tessa\nThe baboon stole a bike from the store\nThe lobster is named Beauty\n\nBased on the game state and the rules and preferences, does the ferret owe money to the sea bass?\nQuestion: Does the ferret owe money to the sea bass?",
        "idx": 150,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not attack the green fields whose owner is the turtle, you can be certain that it will not prepare armor for the ferret\nrule1() = not attack_green_fields(something, owner(turtle)) => not prepare_armor(something, ferret)\n# Rule2: Regarding the baboon, if it has a name whose first letter is the same as the first letter of the lobster's name, then we can conclude that it attacks the green fields whose owner is the turtle\nrule2() = first_letter_of(name(baboon)) == first_letter_of(name(lobster)) => attack_green_fields(baboon, owner(turtle))\n# Rule3: Regarding the baboon, if it took a bike from the store, then we can conclude that it does not attack the green fields of the turtle\nrule3() = took_bike(baboon) => not attack_green_fields(baboon, owner(turtle))\n# Rule4: The ferret unquestionably owes $$$ to the sea bass, in the case where the baboon does not prepare armor for the ferret\nrule4() = not prepare_armor(baboon, ferret) => owes_money_to(ferret, sea_bass)\n# Rule5: If the baboon has more than 4 friends, then the baboon holds an equal number of points as the leopard\nrule5() = friends(baboon) > 4 => points(baboon) == points(leopard)\n# Rule6: Regarding the baboon, if it has a leafy green vegetable, then we can conclude that it does not attack the green fields of the turtle.\nrule6() = has(baboon, leafy_green_vegetable) => not attack_green_fields(baboon, owner(turtle))\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The baboon has 1 friend that is smart and 4 friends that are not, has a card that is yellow in color, and has a guitar\nfriends(baboon) = 5\nhas(baboon, smart_friend) = True\nhas(baboon, card_with(yellow_color)) = True\nhas(baboon, guitar) = True\n# The baboon is named Tessa\nname(baboon, Tessa) = True\n# The baboon stole a bike from the store\ntook_bike(baboon) = True\n# The lobster is named Beauty\nname(lobster, Beauty) = True\n\n# Based on the game state and the rules and preferences, does the ferret owe money to the sea bass?\nquestion = owes_money_to(ferret, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the caterpillar, then it does not prepare armor for the cow\nRule2: The dog does not give a magnifier to the cow whenever at least one animal needs the support of the sea bass\nRule3: The black bear prepares armor for the cow whenever at least one animal becomes an enemy of the turtle\nRule4: If the dog has fewer than 13 friends, then the dog does not roll the dice for the crocodile\nRule5: If the black bear prepares armor for the cow and the dog does not give a magnifying glass to the cow, then the cow will never attack the green fields whose owner is the whale\nRule6: If the dog has a name whose first letter is the same as the first letter of the canary's name, then it does not know the defensive plans of the hare\nRule7: If the lion has a card whose color appears in the flag of France, then it needs the support of the sea bass\nRule8: If the dog has a musical instrument, then the dog does not roll the dice for the crocodile\nRule9: If the buffalo has something to drink, then the buffalo becomes an actual enemy of the turtle\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe buffalo has a beer\nThe canary is named Bella\nThe dog has a cell phone, has seven friends, and is named Buddy\nThe lion has a card that is red in color\nThe lobster becomes an enemy of the lion\n\nBased on the game state and the rules and preferences, does the cow attack the green fields whose owner is the whale?\nQuestion: Does the cow attack the green fields whose owner is the whale?",
        "idx": 151,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something rolls the dice for the caterpillar, then it does not prepare armor for the cow\nrule1() = roll_dice_for(something, caterpillar) => not prepare_armor(something, cow)\n# Rule2: The dog does not give a magnifier to the cow whenever at least one animal needs the support of the sea bass\nrule2() = needs_support(something, sea_bass) => not give_magnifier(dog, cow)\n# Rule3: The black bear prepares armor for the cow whenever at least one animal becomes an enemy of the turtle\nrule3() = enemy(something, turtle) => prepare_armor(black_bear, cow)\n# Rule4: If the dog has fewer than 13 friends, then the dog does not roll the dice for the crocodile\nrule4() = friends(dog) < 13 => not roll_dice(dog, crocodile)\n# Rule5: If the black bear prepares armor for the cow and the dog does not give a magnifying glass to the cow, then the cow will never attack the green fields whose owner is the whale\nrule5() = prepare_armor(black_bear, cow) & not give_magnifier(dog, cow) => never_attack(cow, green_fields_owned_by(whale))\n# Rule6: Regarding the dog, if it has a name whose first letter is the same as the first letter of the canary's name, then we can conclude that it does not know the defensive plans of the hare\nrule6() = first_letter_of(name(dog)) == first_letter_of(name(canary)) => not knows(defensive_plans_of(hare), dog)\n# Rule7: Regarding the lion, if it has a card whose color appears in the flag of France, then we can conclude that it needs the support of the sea bass\nrule7() = color(card(lion)) in colors_of(flag_of(France)) => needs_support(lion, sea_bass)\n# Rule8: If the dog has a musical instrument, then the dog does not roll the dice for the crocodile\nrule8() = has(dog, musical_instrument) => not roll_dice(dog, crocodile)\n# Rule9: If the buffalo has something to drink, then the buffalo becomes an actual enemy of the turtle.\nrule9() = has(drink, buffalo) => actual_enemy(buffalo, turtle)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The buffalo has a beer\nhas(buffalo, beer) = True\n# The canary is named Bella\nname(canary, Bella) = True\n# The dog has a cell phone, has seven friends, and is named Buddy\nhas(dog, cell_phone) = True\nfriends(dog) = 7\nname(dog, Buddy) = True\n# The lion has a card that is red in color\nhas(lion, card_with(red_color)) = True\n# The lobster becomes an enemy of the lion\nenemy(lobster, lion) = True\n\n# Based on the game state and the rules and preferences, does the cow attack the green fields whose owner is the whale?\nquestion = attack(cow, green_fields_owned_by(whale))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus has a card with a primary color, then the octopus prepares armor for the whale\nRule2: The leopard does not give a magnifier to the rabbit whenever at least one animal eats the food of the dog\nRule3: If the parrot has something to sit on, then it holds an equal number of points as the ferret\nRule4: If the octopus has a high-quality paper, then the octopus prepares armor for the whale\nRule5: If the parrot holds the same number of points as the ferret, then the ferret gives a magnifying glass to the leopard\nRule6: If the cricket holds the same number of points as the ferret, then the ferret does not give a magnifying glass to the leopard\nRule7: If the ferret gives a magnifier to the leopard and the whale owes money to the leopard, then the leopard gives a magnifying glass to the rabbit\nRule8: The whale owes money to the leopard in the case where the octopus prepares armor for the whale\nRule9: If the panther has a card whose color appears in the flag of Belgium, then the panther burns the warehouse of the whale\n\nRule2 is preferred over Rule7\nRule5 is preferred over Rule6\n\nThe current state of the game is as follows\nThe octopus has a card with orange color\nThe octopus has a low-income job\nThe panther has a card with indigo color\nThe parrot has a couch\n\nBased on the game state and the rules and preferences, does the leopard give a magnifier to the rabbit?\nQuestion: Does the leopard give a magnifier to the rabbit?",
        "idx": 152,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the octopus has a card with a primary color, then the octopus prepares armor for the whale\nrule1() = has(octopus, card_with(primary_color)) => prepare_armor(octopus, whale)\n# Rule2: The leopard does not give a magnifier to the rabbit whenever at least one animal eats the food of the dog\nrule2() = exists(animal) eats_food_of(animal, dog) => not give_magnifier(leopard, rabbit)\n# Rule3: Regarding the parrot, if it has something to sit on, then we can conclude that it holds an equal number of points as the ferret\nrule3() = has(parrot, something_to_sit_on) => points(parrot) == points(ferret)\n# Rule4: If the octopus has a high-quality paper, then the octopus prepares armor for the whale\nrule4() = has(octopus, high_quality_paper) => prepare_armor(octopus, whale)\n# Rule5: If the parrot holds the same number of points as the ferret, then the ferret gives a magnifying glass to the leopard\nrule5() = points(parrot) == points(ferret) => give_magnifying_glass(ferret, leopard)\n# Rule6: If the cricket holds the same number of points as the ferret, then the ferret is not going to give a magnifying glass to the leopard\nrule6() = points(cricket) == points(ferret) => not give_magnifying_glass(ferret, leopard)\n# Rule7: If the ferret gives a magnifier to the leopard and the whale owes $$$ to the leopard, then the leopard gives a magnifying glass to the rabbit\nrule7() = give_magnifier(ferret, leopard) & owes_money_to(whale, leopard) => give_magnifying_glass(leopard, rabbit)\n# Rule8: The whale unquestionably owes $$$ to the leopard, in the case where the octopus prepares armor for the whale\nrule8() = prepare_armor(octopus, whale) => owes_money_to(whale, leopard)\n# Rule9: If the panther has a card whose color appears in the flag of Belgium, then the panther burns the warehouse of the whale.\nrule9() = has(panther, card_with(color_in_flag_of(Belgium))) => burn(warehouse_of(whale))\n\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n\n# The current state of the game is as follows\n# The octopus has a card that is orange in color\nhas(octopus, card_with(orange_color)) = True\n# The octopus has a low-income job\nhas(octopus, low_income_job) = True\n# The panther has a card that is indigo in color\nhas(panther, card_with(indigo_color)) = True\n# The parrot has a couch\nhas(parrot, couch) = True\n\n# Based on the game state and the rules and preferences, does the leopard give a magnifier to the rabbit?\nquestion = give_magnifier(leopard, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus has a high salary, then it burns the warehouse that is in possession of the kudu\nRule2: If the name of the octopus starts with the same letter as the name of the phoenix, then the octopus burns the warehouse of the kudu\nRule3: The leopard does not offer a job to the bat whenever at least one animal burns the warehouse of the kudu\nRule4: If an animal does not offer a job to the bat, then it will remove one of the pieces of the koala from the board\n\nThe current state of the game is as follows\nThe octopus has a well-paid job\nThe octopus is named Blossom\nThe phoenix is named Casper\nThe swordfish knocks down the fortress of the octopus\n\nBased on the game state and the rules and preferences, does the leopard remove one of the pieces of the koala from the board?\nQuestion: Does the leopard remove one of the pieces of the koala?",
        "idx": 153,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the octopus, if it has a high salary, then we can conclude that it burns the warehouse that is in possession of the kudu\nrule1() = has_high_salary(octopus) => burn(warehouse_of(kudu), octopus)\n# Rule2: If the octopus has a name whose first letter is the same as the first letter of the phoenix's name, then the octopus burns the warehouse of the kudu\nrule2() = first_letter_of(name(octopus)) == first_letter_of(name(phoenix)) => burn(warehouse_of(kudu), octopus)\n# Rule3: The leopard does not offer a job to the bat whenever at least one animal burns the warehouse of the kudu\nrule3() = burn(warehouse_of(kudu), something) => not offer_job(leopard, bat)\n# Rule4: If you are positive that one of the animals does not offer a job to the bat, you can be certain that it will remove from the board one of the pieces of the koala without a doubt.\nrule4(something) = not offer_job(something, bat) => remove(something, piece_of(koala))\n\n# The current state of the game is as follows\n# The octopus got a well-paid job, and is named Blossom\nhas_high_salary(octopus) = True\nname(octopus, Blossom) = True\n# The phoenix is named Casper\nname(phoenix, Casper) = True\n# The swordfish knocks down the fortress of the octopus\nknock_down(swordfish, fortress_of(octopus)) = True\n\n# Based on the game state and the rules and preferences, does the leopard remove from the board one of the pieces of the koala?\nquestion = remove(leopard, piece_of(koala))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the zander has fewer than eighteen friends, then it learns the basics of resource management from the squirrel\nRule2: If at least one animal knows the defensive plans of the black bear, then the squirrel does not eat the food of the swordfish\nRule3: If something sings a song of victory for the lion, then it knows the defense plan of the black bear, too\nRule4: If the zander is a fan of Chris Ronaldo, then the zander does not learn elementary resource management from the squirrel\nRule5: Be careful when something does not show all her cards to the wolverine and also does not eat the food of the swordfish because in this case it will surely proceed to the spot right after the caterpillar (this may or may not be problematic)\nRule6: If the mosquito prepares armor for the squirrel, then the squirrel is not going to show all her cards to the wolverine\nRule7: If the zander has a device to connect to the internet, then it does not learn the basics of resource management from the squirrel\nRule8: If the turtle has a high-quality paper, then the turtle shows her cards (all of them) to the dog\nRule9: If something burns the warehouse that is in possession of the aardvark, then it does not know the defense plan of the black bear\nRule10: If the turtle has more than two friends, then the turtle does not show all her cards to the dog\nRule11: If at least one animal raises a peace flag for the octopus, then the squirrel does not proceed to the spot right after the caterpillar\nRule12: If the eagle has a card whose color is one of the rainbow colors, then the eagle shows her cards (all of them) to the dog\nRule13: If the turtle shows all her cards to the dog and the eagle shows her cards (all of them) to the dog, then the dog raises a flag of peace for the octopus\nRule14: If the mosquito has a name whose first letter is the same as the first letter of the zander's name, then the mosquito prepares armor for the squirrel\n\nRule1 is preferred over Rule4\nRule1 is preferred over Rule7\nRule10 is preferred over Rule8\nRule11 is preferred over Rule5\nRule3 is preferred over Rule9\n\nThe current state of the game is as follows\nThe cat burns the warehouse of the aardvark\nThe cat sings a victory song for the lion\nThe eagle has a card that is red in color\nThe mosquito is named Charlie\nThe turtle published a high-quality paper\nThe zander has 9 friends\nThe zander has a tablet\nThe zander hates Chris Ronaldo\nThe zander is named Chickpea\n\nBased on the game state and the rules and preferences, does the squirrel proceed to the spot right after the caterpillar?\nQuestion: Does the squirrel proceed to the spot right after the caterpillar?",
        "idx": 154,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the zander, if it has fewer than eighteen friends, then we can conclude that it learns the basics of resource management from the squirrel\nrule1() = friends(zander) < 18 => learn_basics_of_resource_management(zander, squirrel)\n# Rule2: If at least one animal knows the defensive plans of the black bear, then the squirrel does not eat the food of the swordfish\nrule2() = knows(defensive_plans_of(black_bear), something) => not eat_food(squirrel, swordfish)\n# Rule3: If something sings a song of victory for the lion, then it knows the defense plan of the black bear, too\nrule3() = sing_song(something, victory_song_for(lion)) => knows(defense_plan_of(black_bear), something)\n# Rule4: If the zander is a fan of Chris Ronaldo, then the zander does not learn elementary resource management from the squirrel\nrule4() = fan_of(zander, Chris_Ronaldo) => not learn_elementary_resource_management(zander, squirrel)\n# Rule5: Be careful when something does not show all her cards to the wolverine and also does not eat the food of the swordfish because in this case it will surely proceed to the spot right after the caterpillar (this may or may not be problematic)\nrule5(something) = not show_all_cards(something, wolverine) & not eat_food(something, swordfish) => proceed(something, spot_right_after(spot_of(caterpillar)))\n# Rule6: If the mosquito prepares armor for the squirrel, then the squirrel is not going to show all her cards to the wolverine\nrule6() = prepare_armor(mosquito, squirrel) => not show_all_cards(squirrel, wolverine)\n# Rule7: Regarding the zander, if it has a device to connect to the internet, then we can conclude that it does not learn the basics of resource management from the squirrel\nrule7() = has(zander, connect_to_internet(device)) => not learn_basics_of_resource_management(zander, squirrel)\n# Rule8: If the turtle has a high-quality paper, then the turtle shows her cards (all of them) to the dog\nrule8() = has(turtle, high_quality_paper) => show_all_cards(turtle, dog)\n# Rule9: If something burns the warehouse that is in possession of the aardvark, then it does not know the defense plan of the black bear\nrule9(something) = burn(warehouse_of(aardvark), something) => not knows(defense_plan_of(black_bear), something)\n# Rule10: Regarding the turtle, if it has more than two friends, then we can conclude that it does not show all her cards to the dog\nrule10() = friends(turtle) > 2 => not show_all_cards(turtle, dog)\n# Rule11: If at least one animal raises a peace flag for the octopus, then the squirrel does not proceed to the spot right after the caterpillar\nrule11() = raise_flag_of_peace(something, octopus) => not proceed(squirrel, spot_right_after(spot_of(caterpillar)))\n# Rule12: If the eagle has a card whose color is one of the rainbow colors, then the eagle shows her cards (all of them) to the dog\nrule12() = has(eagle, card_with(color_in(rainbow_colors))) => show_all_cards(eagle, dog)\n# Rule13: If the turtle shows all her cards to the dog and the eagle shows her cards (all of them) to the dog, then the dog raises a flag of peace for the octopus\nrule13() = show_all_cards(turtle, dog) & show_all_cards(eagle, dog) => raise_flag_of_peace(dog, octopus)\n# Rule14: If the mosquito has a name whose first letter is the same as the first letter of the zander's name, then the mosquito prepares armor for the squirrel.\nrule14() = first_letter_of(name(mosquito)) == first_letter_of(name(zander)) => prepare_armor(mosquito, squirrel)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule10 is preferred over Rule8\norder(rule10) > order(rule8) = True\n# Rule11 is preferred over Rule5\norder(rule11) > order(rule5) = True\n# Rule3 is preferred over Rule9\norder(rule3) > order(rule9) = True\n\n# The current state of the game is as follows\n# The cat burns the warehouse of the aardvark, and sings a victory song for the lion\nburn(warehouse_of(aardvark), cat) = True\nsing_song(cat, victory_song_for(lion)) = True\n# The eagle has a card that is red in color\nhas(eagle, card_with(red_color)) = True\n# The mosquito is named Charlie\nname(mosquito, Charlie) = True\n# The turtle published a high-quality paper\npublished(turtle, high_quality_paper) = True\n# The zander has 9 friends, has a tablet, and hates Chris Ronaldo\nfriends(zander) = 9\nhas(zander, tablet) = True\nhates(zander, Chris_Ronaldo) = True\n# The zander is named Chickpea\nname(zander, Chickpea) = True\n\n# Based on the game state and the rules and preferences, does the squirrel proceed to the spot right after the caterpillar?\nquestion = proceed(squirrel, spot_right_after(spot_of(caterpillar)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals give a magnifying glass to the salmon, you can be certain that it will not eat the food of the gecko\nRule2: If the elephant has something to drink, then the elephant needs the support of the buffalo\nRule3: If the elephant has a card whose color is one of the rainbow colors, then the elephant needs the support of the buffalo\nRule4: If the buffalo does not burn the warehouse of the cricket, then the cricket offers a job to the starfish\nRule5: If the sun bear steals five points from the gecko, then the gecko does not show all her cards to the cricket\nRule6: If something does not need support from the lobster, then it steals five points from the gecko\nRule7: If at least one animal holds the same number of points as the gecko, then the buffalo eats the food that belongs to the gecko\nRule8: If the octopus steals five points from the halibut, then the halibut eats the food that belongs to the buffalo\nRule9: If the moose attacks the green fields whose owner is the buffalo, then the buffalo prepares armor for the hummingbird\nRule10: If you are positive that you saw one of the animals owes money to the cow, you can be certain that it will not steal five points from the gecko\nRule11: If the halibut has a name whose first letter is the same as the first letter of the penguin's name, then the halibut does not eat the food of the buffalo\nRule12: If something eats the food that belongs to the gecko and also prepares armor for the hummingbird, then it burns the warehouse that is in possession of the cricket\nRule13: If the black bear owes money to the buffalo, then the buffalo does not prepare armor for the hummingbird\n\nRule10 is preferred over Rule6\nRule7 is preferred over Rule1\nRule8 is preferred over Rule11\nRule9 is preferred over Rule13\n\nThe current state of the game is as follows\nThe buffalo needs support from the salmon\nThe elephant has a card that is yellow in color\nThe elephant has a knife\nThe halibut is named Pablo\nThe moose attacks the green fields whose owner is the buffalo\nThe parrot holds the same number of points as the gecko\nThe penguin is named Pashmak\nThe sun bear owes money to the cow but does not need support from the lobster\n\nBased on the game state and the rules and preferences, does the cricket offer a job to the starfish?\nQuestion: Does the cricket offer a job to the starfish?",
        "idx": 155,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals gives a magnifying glass to the salmon, you can be certain that it will not eat the food of the gecko\nrule1() = give_magnifying_glass(something, salmon) => not eat_food(something, gecko)\n# Rule2: If the elephant has something to drink, then the elephant needs the support of the buffalo\nrule2() = has(elephant, drink) => needs_support(elephant, buffalo)\n# Rule3: If the elephant has a card whose color is one of the rainbow colors, then the elephant needs the support of the buffalo\nrule3() = has(elephant, card_with(color_in(rainbow_colors))) => needs_support(elephant, buffalo)\n# Rule4: If the buffalo does not burn the warehouse of the cricket, then the cricket offers a job to the starfish\nrule4() = not burn(warehouse_of(cricket), buffalo) => offer_job(cricket, starfish)\n# Rule5: If the sun bear steals five of the points of the gecko, then the gecko is not going to show all her cards to the cricket\nrule5() = steal_points(sun_bear, 5, gecko) => not show_all_cards(gecko, cricket)\n# Rule6: If something does not need support from the lobster, then it steals five points from the gecko\nrule6(something) = not needs_support(something, lobster) => steal_points(something, 5, gecko)\n# Rule7: If at least one animal holds the same number of points as the gecko, then the buffalo eats the food that belongs to the gecko\nrule7(something) = points(something) == points(gecko) => eat_food(buffalo, gecko)\n# Rule8: If the octopus steals five points from the halibut, then the halibut eats the food that belongs to the buffalo\nrule8() = steal_points(octopus, 5, halibut) => eat_food(halibut, buffalo)\n# Rule9: The buffalo unquestionably prepares armor for the hummingbird, in the case where the moose attacks the green fields whose owner is the buffalo\nrule9() = attack(moose, green_fields_of(buffalo)) => prepare_armor(buffalo, hummingbird)\n# Rule10: If you are positive that you saw one of the animals owes money to the cow, you can be certain that it will not steal five of the points of the gecko\nrule10() = owes_money_to(something, cow) => not steal_points(something, 5, gecko)\n# Rule11: If the halibut has a name whose first letter is the same as the first letter of the penguin's name, then the halibut does not eat the food of the buffalo\nrule11() = first_letter_of(name(halibut)) == first_letter_of(name(penguin)) => not eat_food(halibut, buffalo)\n# Rule12: Be careful when something eats the food that belongs to the gecko and also prepares armor for the hummingbird because in this case it will surely burn the warehouse that is in possession of the cricket (this may or may not be problematic)\nrule12(something) = eat_food(something, gecko) & prepare_armor(something, hummingbird) => burn(warehouse_of(cricket), something)\n# Rule13: The buffalo does not prepare armor for the hummingbird, in the case where the black bear owes money to the buffalo.\nrule13() = owes_money_to(black_bear, buffalo) => not prepare_armor(buffalo, hummingbird)\n# Rule10 is preferred over Rule6\norder(rule10) > order(rule6) = True\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n# Rule8 is preferred over Rule11\norder(rule8) > order(rule11) = True\n# Rule9 is preferred over Rule13\norder(rule9) > order(rule13) = True\n\n# The current state of the game is as follows\n# The buffalo needs support from the salmon\nneeds_support(buffalo, salmon) = True\n# The elephant has a card that is yellow in color\nhas(elephant, card_with(yellow_color)) = True\n# The elephant has a knife\nhas(elephant, knife) = True\n# The halibut is named Pablo\nname(halibut, Pablo) = True\n# The moose attacks the green fields whose owner is the buffalo\nattack(moose, green_fields_of(buffalo)) = True\n# The parrot holds the same number of points as the gecko\npoints(parrot) == points(gecko) = True\n# The penguin is named Pashmak\nname(penguin, Pashmak) = True\n# The sun bear owes money to the cow but does not need support from the lobster\nowes_money_to(sun_bear, cow) = True\nnot needs_support(sun_bear, lobster) = True\n\n# Based on the game state and the rules and preferences, does the cricket offer a job to the starfish?\nquestion = offer_job(cricket, starfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the snail has a leafy green vegetable, then it does not give a magnifying glass to the moose\nRule2: If the carp has a leafy green vegetable, then it does not remove one of the pieces of the moose\nRule3: The halibut does not become an actual enemy of the grizzly bear, in the case where the moose holds the same number of points as the halibut\nRule4: The hare does not know the defense plan of the tilapia whenever at least one animal offers a job to the viperfish\nRule5: Be careful when something does not steal five points from the baboon and also does not know the defensive plans of the tilapia because in this case it will surely raise a peace flag for the halibut (this may or may not be problematic)\nRule6: If the carp has a card whose color is one of the rainbow colors, then the carp does not remove one of the pieces of the moose\nRule7: If the hare has a name whose first letter is the same as the first letter of the polar bear's name, then the hare does not attack the green fields of the buffalo\nRule8: If something raises a flag of peace for the sea bass, then it does not hold the same number of points as the halibut\nRule9: The halibut unquestionably becomes an enemy of the grizzly bear, in the case where the hare raises a flag of peace for the halibut\nRule10: If the carp purchased a time machine, then it removes one of the pieces of the moose\nRule11: If the snail does not give a magnifying glass to the moose and the carp does not remove one of the pieces of the moose, then the moose holds an equal number of points as the halibut\nRule12: If the carp has a name whose first letter is the same as the first letter of the donkey's name, then the carp removes one of the pieces of the moose\nRule13: If the hare has more than 4 friends, then it does not attack the green fields whose owner is the buffalo\nRule14: If the hare has a sharp object, then it does not steal five points from the baboon\nRule15: If the oscar attacks the green fields whose owner is the hare, then the hare knows the defensive plans of the tilapia\n\nRule10 is preferred over Rule2\nRule10 is preferred over Rule6\nRule12 is preferred over Rule2\nRule12 is preferred over Rule6\nRule15 is preferred over Rule4\nRule8 is preferred over Rule11\nRule9 is preferred over Rule3\n\nThe current state of the game is as follows\nThe carp has a card that is blue in color\nThe carp has a knapsack\nThe carp invented a time machine\nThe carp is named Mojo\nThe cheetah offers a job to the viperfish\nThe hare has a blade\nThe hare has seven kind friends and 1 not kind friend\nThe hare is named Lily\nThe polar bear is named Mojo\nThe snail has romaine lettuce\n\nBased on the game state and the rules and preferences, does the halibut become an enemy of the grizzly bear?\nQuestion: Does the halibut become an enemy of the grizzly bear?",
        "idx": 156,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the snail, if it has a leafy green vegetable, then we can conclude that it does not give a magnifying glass to the moose\nrule1() = has(snail, leafy_green_vegetable) => not give_magnifying_glass(snail, moose)\n# Rule2: If the carp has a leafy green vegetable, then the carp does not remove from the board one of the pieces of the moose\nrule2() = has(carp, leafy_green_vegetable) => not remove(carp, piece_of(moose))\n# Rule3: The halibut does not become an actual enemy of the grizzly bear, in the case where the moose holds the same number of points as the halibut\nrule3() = points(moose) == points(halibut) => not actual_enemy(halibut, grizzly_bear)\n# Rule4: The hare does not know the defense plan of the tilapia whenever at least one animal offers a job to the viperfish\nrule4() = offer_job(something, viperfish) => not knows(defense_plan_of(tilapia), hare)\n# Rule5: Be careful when something does not steal five of the points of the baboon and also does not know the defensive plans of the tilapia because in this case it will surely raise a peace flag for the halibut (this may or may not be problematic)\nrule5(something) = not steal_points(something, baboon, 5) & not knows(defense_plan_of(tilapia), something) => raise_flag_of_peace(something, halibut)\n# Rule6: If the carp has a card whose color is one of the rainbow colors, then the carp does not remove from the board one of the pieces of the moose\nrule6() = has(carp, card_with(color_in(rainbow_colors))) => not remove(carp, piece_of(moose))\n# Rule7: If the hare has a name whose first letter is the same as the first letter of the polar bear's name, then the hare does not attack the green fields of the buffalo\nrule7() = first_letter_of(name(hare)) == first_letter_of(name(polar_bear)) => not attack(hare, green_fields_of(buffalo))\n# Rule8: If something raises a flag of peace for the sea bass, then it does not hold the same number of points as the halibut\nrule8(something) = raise_flag_of_peace(something, sea_bass) => not points(something) == points(halibut)\n# Rule9: The halibut unquestionably becomes an enemy of the grizzly bear, in the case where the hare raises a flag of peace for the halibut\nrule9() = raise_flag_of_peace(hare, halibut) => enemy(halibut, grizzly_bear)\n# Rule10: Regarding the carp, if it purchased a time machine, then we can conclude that it removes one of the pieces of the moose\nrule10() = has(carp, time_machine) => remove(carp, piece_of(moose))\n# Rule11: For the moose, if the belief is that the snail does not give a magnifier to the moose and the carp does not remove one of the pieces of the moose, then you can add \"the moose holds an equal number of points as the halibut\" to your conclusions\nrule11() = not give_magnifying_glass(snail, moose) & not remove(carp, piece_of(moose)) => points(moose) == points(halibut)\n# Rule12: If the carp has a name whose first letter is the same as the first letter of the donkey's name, then the carp removes from the board one of the pieces of the moose\nrule12() = first_letter_of(name(carp)) == first_letter_of(name(donkey)) => remove(carp, piece_of(moose))\n# Rule13: Regarding the hare, if it has more than 4 friends, then we can conclude that it does not attack the green fields whose owner is the buffalo\nrule13() = count(friends(hare)) > 4 => not attack(hare, green_fields_of(buffalo))\n# Rule14: Regarding the hare, if it has a sharp object, then we can conclude that it does not steal five of the points of the baboon\nrule14() = has(hare, sharp_object) => not steal_points(hare, baboon, 5)\n# Rule15: If the oscar attacks the green fields whose owner is the hare, then the hare knows the defensive plans of the tilapia.\nrule15() = attack(oscar, green_fields_of(hare)) => knows(defense_plan_of(tilapia), hare)\n# Rule10 is preferred over Rule2\norder(rule10) > order(rule2) = True\n# Rule10 is preferred over Rule6\norder(rule10) > order(rule6) = True\n# Rule12 is preferred over Rule2\norder(rule12) > order(rule2) = True\n# Rule12 is preferred over Rule6\norder(rule12) > order(rule6) = True\n# Rule15 is preferred over Rule4\norder(rule15) > order(rule4) = True\n# Rule8 is preferred over Rule11\norder(rule8) > order(rule11) = True\n# Rule9 is preferred over Rule3\norder(rule9) > order(rule3) = True\n\n# The current state of the game is as follows\n# The carp has a card that is blue in color, has a knapsack, invented a time machine, and is named Mojo\nhas(carp, card_with(blue_color)) = True\nhas(carp, knapsack) = True\ninvented(carp, time_machine) = True\nname(carp, Mojo) = True\n# The cheetah offers a job to the viperfish\noffer_job(cheetah, viperfish) = True\n# The hare has a blade, has seven friends that are kind and 1 friend that is not, and is named Lily\nhas(hare, blade) = True\ncount(friends(hare, kind)) = 7\ncount(friends(hare, not_kind)) = 1\nname(hare, Lily) = True\n# The polar bear is named Mojo\nname(polar_bear, Mojo) = True\n# The snail has some romaine lettuce\nhas(snail, romaine_lettuce) = True\n\n# Based on the game state and the rules and preferences, does the halibut become an enemy of the grizzly bear?\nquestion = enemy(halibut, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish does not give a magnifier to the baboon, then the baboon becomes an actual enemy of the hummingbird\nRule2: The baboon attacks the green fields whose owner is the gecko whenever at least one animal knocks down the fortress of the grasshopper\nRule3: The cow will not hold an equal number of points as the ferret, in the case where the tilapia does not owe money to the cow\nRule4: If the kiwi has a leafy green vegetable, then the kiwi sings a victory song for the tilapia\nRule5: If you are positive that you saw one of the animals roll the dice for the crocodile, you can be certain that it will not proceed to the spot that is right after the spot of the tilapia\nRule6: If the tiger rolls the dice for the blobfish, then the blobfish knocks down the fortress that belongs to the grasshopper\nRule7: If the kiwi has fewer than eight friends, then the kiwi sings a victory song for the tilapia\nRule8: If the panda bear is not going to proceed to the spot that is right after the spot of the tilapia but the kiwi sings a song of victory for the tilapia, then the tilapia does not owe money to the cow\nRule9: If at least one animal attacks the green fields of the salmon, then the blobfish does not knock down the fortress that belongs to the grasshopper\nRule10: If something becomes an actual enemy of the hummingbird but does not owe money to the cat, then it does not attack the green fields whose owner is the gecko\n\nRule10 is preferred over Rule2\nRule9 is preferred over Rule6\n\nThe current state of the game is as follows\nThe kiwi has 11 friends\nThe kiwi has kale\nThe panda bear rolls the dice for the crocodile\nThe tiger rolls the dice for the blobfish\nThe catfish does not give a magnifier to the baboon\n\nBased on the game state and the rules and preferences, does the cow hold the same number of points as the ferret?\nQuestion: Does the cow hold the same number of points as the ferret?",
        "idx": 157,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the catfish does not give a magnifier to the baboon, then the baboon becomes an actual enemy of the hummingbird\nrule1() = not give_magnifier(catfish, baboon) => actual_enemy(baboon, hummingbird)\n# Rule2: The baboon attacks the green fields whose owner is the gecko whenever at least one animal knocks down the fortress of the grasshopper\nrule2() = knock_down_fortress(something, grasshopper) => attack_green_fields(baboon, gecko)\n# Rule3: The cow will not hold an equal number of points as the ferret, in the case where the tilapia does not owe $$$ to the cow\nrule3() = not owes_money_to(tilapia, cow) => not equal_points(cow, ferret)\n# Rule4: If the kiwi has a leafy green vegetable, then the kiwi sings a victory song for the tilapia\nrule4() = has(kiwi, leafy_green_vegetable) => sing_song(kiwi, victory_song_for(tilapia))\n# Rule5: If you are positive that you saw one of the animals rolls the dice for the crocodile, you can be certain that it will not proceed to the spot that is right after the spot of the tilapia\nrule5(something) = rolls_dice(something, crocodile) => not proceed(something, spot_right_after(spot_of(tilapia)))\n# Rule6: If the tiger rolls the dice for the blobfish, then the blobfish knocks down the fortress that belongs to the grasshopper\nrule6() = rolls_dice(tiger, blobfish) => knock_down_fortress(blobfish, grasshopper)\n# Rule7: If the kiwi has fewer than eight friends, then the kiwi sings a victory song for the tilapia\nrule7() = friends(kiwi) < 8 => sing_song(kiwi, victory_song_for(tilapia))\n# Rule8: For the tilapia, if the belief is that the panda bear is not going to proceed to the spot that is right after the spot of the tilapia but the kiwi sings a song of victory for the tilapia, then you can add that \"the tilapia is not going to owe $$$ to the cow\" to your conclusions\nrule8() = not proceed(panda_bear, spot_right_after(spot_of(tilapia))) & sing_song(kiwi, victory_song_for(tilapia)) => not owes_money_to(tilapia, cow)\n# Rule9: If at least one animal attacks the green fields of the salmon, then the blobfish does not knock down the fortress that belongs to the grasshopper\nrule9() = attack_green_fields(something, salmon) => not knock_down_fortress(blobfish, grasshopper)\n# Rule10: Be careful when something becomes an actual enemy of the hummingbird but does not owe $$$ to the cat because in this case it will, surely, not attack the green fields whose owner is the gecko (this may or may not be problematic).\nrule10(something) = actual_enemy(something, hummingbird) & not owes_money_to(something, cat) => not attack_green_fields(something, gecko)\n# Rule10 is preferred over Rule2\norder(rule10) > order(rule2) = True\n# Rule9 is preferred over Rule6\norder(rule9) > order(rule6) = True\n\n# The current state of the game is as follows\n# The kiwi has 11 friends\nfriends(kiwi) = 11\n# The kiwi has some kale\nhas(kiwi, kale) = True\n# The panda bear rolls the dice for the crocodile\nrolls_dice(panda_bear, crocodile) = True\n# The tiger rolls the dice for the blobfish\nrolls_dice(tiger, blobfish) = True\n# The catfish does not give a magnifier to the baboon\nnot give_magnifier(catfish, baboon) = True\n\n# Based on the game state and the rules and preferences, does the cow hold the same number of points as the ferret?\nquestion = equal_points(cow, ferret)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the bat needs the support of the crocodile and the caterpillar does not become an actual enemy of the crocodile, then the crocodile knocks down the fortress of the cockroach\nRule2: If something needs the support of the eagle, then it offers a job position to the kangaroo as well\nRule3: The rabbit does not need support from the eagle if the octopus does not owe money to the rabbit\nRule4: The rabbit needs support from the eagle if at least one animal removes one of the pieces of the squirrel\nRule5: If at least one animal offers a job position to the kangaroo, then the viperfish sings a victory song for the sea bass\nRule6: If at least one animal knocks down the fortress of the cockroach, then the rabbit does not offer a job position to the kangaroo\nRule7: If the mosquito holds an equal number of points as the viperfish, then the viperfish does not sing a victory song for the sea bass\n\nRule2 is preferred over Rule6\nRule3 is preferred over Rule4\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe bat needs support from the crocodile\nThe crocodile assassinated the mayor\nThe crocodile has a cello\nThe caterpillar does not become an enemy of the crocodile\nThe donkey does not remove one of the pieces of the squirrel\n\nBased on the game state and the rules and preferences, does the viperfish sing a victory song for the sea bass?\nQuestion: Does the viperfish sing a victory song for the sea bass?",
        "idx": 158,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the crocodile, if the belief is that the bat needs the support of the crocodile and the caterpillar does not become an actual enemy of the crocodile, then you can add \"the crocodile knocks down the fortress of the cockroach\" to your conclusions\nrule1() = needs_support(bat, crocodile) & not enemy(caterpillar, crocodile) => add_conclusion(\"the crocodile knocks down the fortress of the cockroach\")\n# Rule2: If something needs the support of the eagle, then it offers a job position to the kangaroo, too\nrule2(something) = needs_support(something, eagle) => offer_job_position(something, kangaroo)\n# Rule3: The rabbit will not need support from the eagle, in the case where the octopus does not owe money to the rabbit\nrule3() = not owes_money_to(octopus, rabbit) => not needs_support(rabbit, eagle)\n# Rule4: The rabbit needs support from the eagle whenever at least one animal removes one of the pieces of the squirrel\nrule4() = remove(animal, piece_of(squirrel)) => needs_support(rabbit, eagle)\n# Rule5: If at least one animal offers a job to the kangaroo, then the viperfish sings a victory song for the sea bass\nrule5() = offer_job_position(animal, kangaroo) => sing_song(viperfish, victory_song_for(sea_bass))\n# Rule6: If at least one animal knocks down the fortress of the cockroach, then the rabbit does not offer a job position to the kangaroo\nrule6() = knock_down(animal, fortress_of(cockroach)) => not offer_job_position(rabbit, kangaroo)\n# Rule7: If the mosquito holds an equal number of points as the viperfish, then the viperfish is not going to sing a song of victory for the sea bass.\nrule7() = points(mosquito) == points(viperfish) => not sing_song(viperfish, victory_song_for(sea_bass))\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The bat needs support from the crocodile\nneeds_support(bat, crocodile) = True\n# The crocodile assassinated the mayor, and has a cello\nassassinated(crocodile, mayor) = True\nhas(crocodile, cello) = True\n# The caterpillar does not become an enemy of the crocodile\nnot enemy(caterpillar, crocodile) = True\n# The donkey does not remove from the board one of the pieces of the squirrel\nnot remove(donkey, piece_of(squirrel)) = True\n\n# Based on the game state and the rules and preferences, does the viperfish sing a victory song for the sea bass?\nquestion = sing_song(viperfish, victory_song_for(sea_bass))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something does not show all her cards to the cockroach and also does not remove one of the pieces of the parrot, then it does not sing a victory song for the penguin\nRule2: If you see that one of the animals sings a victory song for the penguin, then it respects the hare\nRule3: If the phoenix offers a job to the sun bear, then the sun bear sings a victory song for the penguin\nRule4: If you see that one of the animals shows all her cards to the oscar, then it does not remove one of the pieces of the parrot\nRule5: If at least one animal attacks the green fields of the cockroach, then the phoenix offers a job to the sun bear\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe black bear eats the food of the phoenix\nThe catfish attacks the green fields owned by the cockroach\nThe sun bear shows all her cards to the oscar\nThe koala does not hold the same number of points as the phoenix\n\nBased on the game state and the rules and preferences, does the sun bear respect the hare?\nQuestion: Does the sun bear respect the hare?",
        "idx": 159,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not show all her cards to the cockroach and also does not remove from the board one of the pieces of the parrot, what can you certainly conclude? You can conclude that it also does not sing a victory song for the penguin\nrule1(something) = not show_cards(something, cockroach) & not remove(something, piece_of(parrot)) => not sing_song(something, victory_song_for(penguin))\n# Rule2: If you are positive that you saw one of the animals sings a song of victory for the penguin, you can be certain that it will also respect the hare\nrule2() = sing_song(something, victory_song_for(penguin)) => respects(something, hare)\n# Rule3: If the phoenix offers a job to the sun bear, then the sun bear sings a song of victory for the penguin\nrule3() = offer_job(phoenix, sun_bear) => sing_song(sun_bear, victory_song_for(penguin))\n# Rule4: If you are positive that you saw one of the animals shows her cards (all of them) to the oscar, you can be certain that it will not remove one of the pieces of the parrot\nrule4() = show_cards(something, oscar) => not remove(something, piece_of(parrot))\n# Rule5: If at least one animal attacks the green fields of the cockroach, then the phoenix offers a job to the sun bear.\nrule5() = attack(green_fields_of(cockroach), something) => offer_job(phoenix, sun_bear)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The black bear eats the food of the phoenix\neats(black_bear, food_of(phoenix)) = True\n# The catfish attacks the green fields whose owner is the cockroach\nattacks(catfish, green_fields_of(cockroach)) = True\n# The sun bear shows all her cards to the oscar\nshow_cards(sun_bear, oscar) = True\n# The koala does not hold the same number of points as the phoenix\npoints(koala) != points(phoenix) = True\n\n# Based on the game state and the rules and preferences, does the sun bear respect the hare?\nquestion = respects(sun_bear, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cricket is a fan of Chris Ronaldo, then it does not show all her cards to the sun bear\nRule2: If something knows the defense plan of the panda bear and offers a job to the cricket, then it does not know the defensive plans of the eagle\nRule3: If one of the animals does not show all her cards to the sun bear, then it raises a flag of peace for the eagle\nRule4: If something removes one of the pieces of the kangaroo, then it does not raise a peace flag for the eagle\nRule5: If the polar bear does not know the defensive plans of the eagle and the cricket raises a flag of peace for the eagle, then the eagle does not knock down the fortress that belongs to the gecko\nRule6: If the polar bear has fewer than six friends, then it knows the defensive plans of the panda bear\nRule7: If one of the animals attacks the green fields of the catfish, then it knocks down the fortress that belongs to the gecko\nRule8: If one of the animals offers a job to the amberjack, then it also offers a job to the cricket\n\nRule4 is preferred over Rule3\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cricket supports Chris Ronaldo\nThe kiwi is named Luna\nThe polar bear has a card that is red in color\nThe polar bear has a plastic bag\nThe polar bear has one loyal friend and three friends that are not loyal\nThe polar bear is named Lola\nThe polar bear offers a job to the amberjack\n\nBased on the game state and the rules and preferences, does the eagle knock down the fortress of the gecko?\nQuestion: Does the eagle knock down the fortress of the gecko?",
        "idx": 160,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cricket, if it is a fan of Chris Ronaldo, then we can conclude that it does not show all her cards to the sun bear\nrule1() = fan_of(cricket, Chris_Ronaldo) => not show_all_cards(cricket, sun_bear)\n# Rule2: If you see that something knows the defense plan of the panda bear and offers a job to the cricket, what can you certainly conclude? You can conclude that it does not know the defensive plans of the eagle\nrule2() = knows(defense_plan_of(panda_bear), something) & offer_job(something, cricket) => not knows(defensive_plans_of(eagle), something)\n# Rule3: If you are positive that one of the animals does not show all her cards to the sun bear, you can be certain that it will raise a flag of peace for the eagle without a doubt\nrule3(something) = not show_all_cards(something, sun_bear) => raise_flag_of_peace(something, eagle)\n# Rule4: If something removes from the board one of the pieces of the kangaroo, then it does not raise a peace flag for the eagle\nrule4(something) = remove(something, piece_of(kangaroo)) => not raise_flag_of_peace(something, eagle)\n# Rule5: For the eagle, if the belief is that the polar bear is not going to know the defensive plans of the eagle but the cricket raises a flag of peace for the eagle, then you can add that \"the eagle is not going to knock down the fortress that belongs to the gecko\" to your conclusions\nrule5() = not knows(defensive_plans_of(eagle), polar_bear) & raise_flag_of_peace(cricket, eagle) => not knock_down(eagle, fortress_of(gecko))\n# Rule6: Regarding the polar bear, if it has fewer than six friends, then we can conclude that it knows the defensive plans of the panda bear\nrule6() = friends(polar_bear) < 6 => knows(defensive_plans_of(panda_bear), polar_bear)\n# Rule7: If you are positive that you saw one of the animals attacks the green fields of the catfish, you can be certain that it will also knock down the fortress that belongs to the gecko\nrule7(something) = attack_green_fields(something, catfish) => knock_down(something, fortress_of(gecko))\n# Rule8: If you are positive that you saw one of the animals offers a job to the amberjack, you can be certain that it will also offer a job to the cricket.\nrule8(something) = offer_job(something, amberjack) => offer_job(something, cricket)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cricket supports Chris Ronaldo\nsupports(cricket, Chris_Ronaldo) = True\n# The kiwi is named Luna\nname(kiwi, Luna) = True\n# The polar bear has a card that is red in color\nhas(polar_bear, card_with(red_color)) = True\n# The polar bear has a plastic bag, and has one loyal friend and three friends that are not loyal\nhas(polar_bear, plastic_bag) = True\nfriends(polar_bear) = 4\n# The polar bear is named Lola\nname(polar_bear, Lola) = True\n# The polar bear offers a job to the amberjack\noffer_job(polar_bear, amberjack) = True\n\n# Based on the game state and the rules and preferences, does the eagle knock down the fortress of the gecko?\nquestion = knock_down(eagle, fortress_of(gecko))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the ferret starts with the same letter as the name of the aardvark, then the ferret owes money to the carp\nRule2: If the carp becomes an enemy of the hare, then the hare respects the cheetah\nRule3: If the ferret has difficulty finding food, then the ferret owes money to the carp\nRule4: If the phoenix offers a job position to the carp and the ferret owes money to the carp, then the carp becomes an enemy of the hare\nRule5: If something proceeds to the spot right after the cat and burns the warehouse of the eagle, then it does not owe money to the carp\nRule6: If the phoenix has fewer than 10 friends, then the phoenix offers a job position to the carp\n\nRule5 is preferred over Rule1\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe aardvark is named Lucy\nThe ferret assassinated the mayor\nThe ferret is named Blossom\nThe ferret steals five points from the eagle\nThe phoenix has 1 friend\n\nBased on the game state and the rules and preferences, does the hare respect the cheetah?\nQuestion: Does the hare respect the cheetah?",
        "idx": 161,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the ferret, if it has a name whose first letter is the same as the first letter of the aardvark's name, then we can conclude that it owes $$$ to the carp\nrule1() = first_letter_of(name(ferret)) == first_letter_of(name(aardvark)) => owes_money_to(ferret, carp)\n# Rule2: The hare unquestionably respects the cheetah, in the case where the carp becomes an enemy of the hare\nrule2() = enemy(carp, hare) => respects(hare, cheetah)\n# Rule3: If the ferret has difficulty to find food, then the ferret owes money to the carp\nrule3() = difficulty_finding_food(ferret) => owes_money_to(ferret, carp)\n# Rule4: If the phoenix offers a job position to the carp and the ferret owes $$$ to the carp, then the carp becomes an actual enemy of the hare\nrule4() = offer_job_position(phoenix, carp) & owes_money_to(ferret, carp) => enemy(carp, hare)\n# Rule5: Be careful when something proceeds to the spot right after the cat and also burns the warehouse of the eagle because in this case it will surely not owe $$$ to the carp (this may or may not be problematic)\nrule5(something) = proceed(something, spot_right_after(spot_of(cat))) & burn(warehouse_of(eagle), something) => not owes_money_to(something, carp)\n# Rule6: Regarding the phoenix, if it has fewer than 10 friends, then we can conclude that it offers a job position to the carp.\nrule6() = friends(phoenix) < 10 => offer_job_position(phoenix, carp)\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The aardvark is named Lucy\nname(aardvark, Lucy) = True\n# The ferret assassinated the mayor, is named Blossom, and steals five points from the eagle\nname(ferret, Blossom) = True\nassassinate(ferret, mayor) = True\nsteal_points(ferret, 5, eagle) = True\n# The phoenix has 1 friend\nfriends(phoenix) = 1\n\n# Based on the game state and the rules and preferences, does the hare respect the cheetah?\nquestion = respects(hare, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the penguin does not roll the dice for the salmon but the hummingbird knocks down the fortress of the salmon, then the salmon knocks down the fortress of the sea bass unavoidably\nRule2: If the penguin has a leafy green vegetable, then it does not roll the dice for the salmon\nRule3: If one of the animals knocks down the fortress of the sea bass, then it removes one of the pieces of the carp\nRule4: If the hummingbird has a name whose first letter is the same as the first letter of the eel's name, then it knocks down the fortress of the salmon\nRule5: If the salmon has a name whose first letter is the same as the first letter of the squirrel's name, then it offers a job position to the cheetah\nRule6: If the salmon has more than 17 friends, then it offers a job position to the cheetah\n\nThe current state of the game is as follows\nThe eel is named Bella\nThe hummingbird is named Blossom\nThe penguin has spinach\nThe salmon has six playful friends and four non-playful friends\nThe salmon is named Beauty\nThe squirrel is named Bella\n\nBased on the game state and the rules and preferences, does the salmon remove from the board one of the pieces of the carp?\nQuestion: Does the salmon remove from the board one of the pieces of the carp?",
        "idx": 162,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the penguin does not roll the dice for the salmon but the hummingbird knocks down the fortress of the salmon, then the salmon knocks down the fortress of the sea bass unavoidably\nrule1() = not roll_dice(penguin, salmon) & knock_down(hummingbird, fortress_of(salmon)) => knock_down(salmon, fortress_of(sea_bass))\n# Rule2: If the penguin has a leafy green vegetable, then the penguin does not roll the dice for the salmon\nrule2() = has(penguin, leafy_green_vegetable) => not roll_dice(penguin, salmon)\n# Rule3: If you are positive that you saw one of the animals knocks down the fortress of the sea bass, you can be certain that it will also remove one of the pieces of the carp\nrule3(something) = knock_down(something, fortress_of(sea_bass)) => remove(something, piece_of(carp))\n# Rule4: Regarding the hummingbird, if it has a name whose first letter is the same as the first letter of the eel's name, then we can conclude that it knocks down the fortress of the salmon\nrule4() = first_letter_of(name(hummingbird)) == first_letter_of(name(eel)) => knock_down(hummingbird, fortress_of(salmon))\n# Rule5: If the salmon has a name whose first letter is the same as the first letter of the squirrel's name, then the salmon offers a job position to the cheetah\nrule5() = first_letter_of(name(salmon)) == first_letter_of(name(squirrel)) => offer_job_position(salmon, cheetah)\n# Rule6: If the salmon has more than 17 friends, then the salmon offers a job position to the cheetah.\nrule6() = count(friends(salmon)) > 17 => offer_job_position(salmon, cheetah)\n\n# The current state of the game is as follows\n# The eel is named Bella\nname(eel, Bella) = True\n# The hummingbird is named Blossom\nname(hummingbird, Blossom) = True\n# The penguin has some spinach\nhas(penguin, spinach) = True\n# The salmon has six playful friends and four non-playful friends\ncount(friends(salmon, playful)) = 6\ncount(friends(salmon, not_playful)) = 4\n# The salmon is named Beauty\nname(salmon, Beauty) = True\n# The squirrel is named Bella\nname(squirrel, Bella) = True\n\n# Based on the game state and the rules and preferences, does the salmon remove from the board one of the pieces of the carp?\nquestion = remove(salmon, piece_of(carp))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the salmon starts with the first letter of the name of the starfish, then the salmon does not raise a flag of peace for the dog\nRule2: If something winks at the whale but does not knock down the fortress that belongs to the kiwi, then it does not owe money to the phoenix\nRule3: If the salmon has a sharp object, then it attacks the green fields owned by the aardvark\nRule4: If the salmon has something to carry apples and oranges, then it attacks the green fields of the aardvark\nRule5: If the salmon has a card with a primary color, then it does not raise a flag of peace for the dog\nRule6: If something attacks the green fields owned by the aardvark, then it does not knock down the fortress that belongs to the kiwi\nRule7: If something does not raise a flag of peace for the dog, then it winks at the whale\n\nThe current state of the game is as follows\nThe salmon has a card that is green in color\nThe salmon has a cutter\nThe salmon has romaine lettuce\nThe salmon is named Tessa\nThe starfish is named Beauty\n\nBased on the game state and the rules and preferences, does the salmon owe money to the phoenix?\nQuestion: Does the salmon owe money to the phoenix?",
        "idx": 163,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the salmon has a name whose first letter is the same as the first letter of the starfish's name, then the salmon does not raise a flag of peace for the dog\nrule1() = first_letter_of(name(salmon)) == first_letter_of(name(starfish)) => not raise_flag_of_peace(salmon, dog)\n# Rule2: If you see that something winks at the whale but does not knock down the fortress that belongs to the kiwi, what can you certainly conclude? You can conclude that it does not owe money to the phoenix\nrule2(something) = wink_at(something, whale) & not knock_down(fortress_of(kiwi), something) => not owes_money_to(something, phoenix)\n# Rule3: Regarding the salmon, if it has a sharp object, then we can conclude that it attacks the green fields whose owner is the aardvark\nrule3() = has(salmon, sharp_object) => attack_green_fields(salmon, owner_is(aardvark))\n# Rule4: Regarding the salmon, if it has something to carry apples and oranges, then we can conclude that it attacks the green fields of the aardvark\nrule4() = has(salmon, carry_apples_and_oranges) => attack_green_fields(salmon, owner_is(aardvark))\n# Rule5: Regarding the salmon, if it has a card with a primary color, then we can conclude that it does not raise a peace flag for the dog\nrule5() = has(salmon, card_with(primary_color)) => not raise_flag_of_peace(salmon, dog)\n# Rule6: If something attacks the green fields whose owner is the aardvark, then it does not knock down the fortress that belongs to the kiwi\nrule6(something) = attack_green_fields(something, owner_is(aardvark)) => not knock_down(fortress_of(kiwi), something)\n# Rule7: If something does not raise a flag of peace for the dog, then it winks at the whale.\nrule7(something) = not raise_flag_of_peace(something, dog) => wink_at(something, whale)\n\n# The current state of the game is as follows\n# The salmon has a card that is green in color, has a cutter, has some romaine lettuce, and is named Tessa\nhas(salmon, card_with(green_color)) = True\nhas(salmon, cutter) = True\nhas(salmon, romaine_lettuce) = True\nname(salmon, Tessa) = True\n# The starfish is named Beauty\nname(starfish, Beauty) = True\n\n# Based on the game state and the rules and preferences, does the salmon owe money to the phoenix?\nquestion = owes_money_to(salmon, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something offers a job to the lion but does not know the defense plan of the cheetah because in this case it will, surely, owe money to the puffin\nRule2: If the snail does not raise a peace flag for the puffin but the dog owes money to the puffin, then the puffin knocks down the fortress of the viperfish unavoidably\nRule3: If something learns the basics of resource management from the parrot, then it offers a job position to the lion, too\nRule4: If the dog has more than three friends, then the dog does not offer a job position to the lion\nRule5: If the dog has something to carry apples and oranges, then the dog does not know the defense plan of the cheetah\nRule6: If you are positive that you saw one of the animals learns elementary resource management from the black bear, you can be certain that it will not owe money to the puffin\nRule7: If the dog has a device to connect to the internet, then the dog does not know the defensive plans of the cheetah\nRule8: The snail raises a flag of peace for the puffin whenever at least one animal shows all her cards to the hummingbird\nRule9: If the snail has fewer than 9 friends, then it sings a victory song for the koala\nRule10: If the dog has a card whose color is one of the rainbow colors, then the dog does not offer a job to the lion\nRule11: If the snail has something to sit on, then it sings a victory song for the koala\nRule12: If something sings a victory song for the koala, then it does not raise a peace flag for the puffin\n\nRule10 is preferred over Rule3\nRule4 is preferred over Rule3\nRule6 is preferred over Rule1\nRule8 is preferred over Rule12\n\nThe current state of the game is as follows\nThe dog has 1 friend\nThe dog has a guitar\nThe dog has some kale\nThe dog learns the basics of resource management from the parrot\nThe snail has 4 friends\nThe snail has a violin\n\nBased on the game state and the rules and preferences, does the puffin knock down the fortress of the viperfish?\nQuestion: Does the puffin knock down the fortress of the viperfish?",
        "idx": 164,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something offers a job to the lion but does not know the defense plan of the cheetah because in this case it will, surely, owe $$$ to the puffin (this may or may not be problematic)\nrule1() = offer_job(something, lion) & not knows(defense_plan_of(cheetah), something) => owes_money_to(something, puffin)\n# Rule2: If the snail does not raise a peace flag for the puffin but the dog owes money to the puffin, then the puffin knocks down the fortress of the viperfish unavoidably\nrule2() = not raise_flag_of_peace(snail, puffin) & owes_money_to(dog, puffin) => knock_down_fortress(puffin, viperfish)\n# Rule3: If something learns the basics of resource management from the parrot, then it offers a job position to the lion, too\nrule3() = learns_basics_of_resource_management(something, parrot) => offer_job(something, lion)\n# Rule4: If the dog has more than three friends, then the dog does not offer a job position to the lion\nrule4() = friends(dog) > 3 => not offer_job(dog, lion)\n# Rule5: If the dog has something to carry apples and oranges, then the dog does not know the defense plan of the cheetah\nrule5() = has(dog, carry_apples_and_oranges) => not knows(defense_plan_of(cheetah), dog)\n# Rule6: If you are positive that you saw one of the animals learns elementary resource management from the black bear, you can be certain that it will not owe money to the puffin\nrule6(something) = learns_elementary_resource_management(something, black_bear) => not owes_money_to(something, puffin)\n# Rule7: If the dog has a device to connect to the internet, then the dog does not know the defensive plans of the cheetah\nrule7() = has(dog, connect_to_internet(device)) => not knows(defensive_plans_of(cheetah), dog)\n# Rule8: The snail raises a flag of peace for the puffin whenever at least one animal shows all her cards to the hummingbird\nrule8() = show_all_cards_to(hummingbird) => raise_flag_of_peace(snail, puffin)\n# Rule9: Regarding the snail, if it has fewer than 9 friends, then we can conclude that it sings a victory song for the koala\nrule9() = friends(snail) < 9 => sing_song(snail, victory_song_for(koala))\n# Rule10: If the dog has a card whose color is one of the rainbow colors, then the dog does not offer a job to the lion\nrule10() = has(dog, card_with(color) in rainbow_colors) => not offer_job(dog, lion)\n# Rule11: If the snail has something to sit on, then the snail sings a victory song for the koala\nrule11() = has(snail, something_to_sit_on) => sing_song(snail, victory_song_for(koala))\n# Rule12: If something sings a victory song for the koala, then it does not raise a peace flag for the puffin.\nrule12() = sing_song(something, victory_song_for(koala)) => not raise_flag_of_peace(something, puffin)\n# Rule10 is preferred over Rule3\norder(rule10) > order(rule3) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n# Rule8 is preferred over Rule12\norder(rule8) > order(rule12) = True\n\n# The current state of the game is as follows\n# The dog has 1 friend, has a guitar, has some kale, and learns the basics of resource management from the parrot\nfriends(dog) = 1\nhas(dog, guitar) = True\nhas(dog, kale) = True\nlearns_basics_of_resource_management(dog, parrot) = True\n# The snail has 4 friends\nfriends(snail) = 4\n# The snail has a violin\nhas(snail, violin) = True\n\n# Based on the game state and the rules and preferences, does the puffin knock down the fortress of the viperfish?\nquestion = knock_down_fortress(puffin, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cheetah offers a job position to the bat whenever at least one animal removes one of the pieces of the jellyfish\nRule2: If something does not steal five points from the sea bass but offers a job to the bat, then it does not proceed to the spot right after the squirrel\nRule3: The tiger does not offer a job position to the rabbit, in the case where the zander respects the tiger\nRule4: The cheetah proceeds to the spot that is right after the spot of the squirrel whenever at least one animal knocks down the fortress that belongs to the moose\nRule5: If the rabbit offers a job to the squirrel and the cheetah proceeds to the spot right after the squirrel, then the squirrel offers a job to the canary\nRule6: If at least one animal does not become an enemy of the crocodile, then it knocks down the fortress of the moose\nRule7: The rabbit offers a job position to the squirrel, in the case where the tiger does not offer a job to the rabbit\n\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe doctorfish removes one of the pieces of the jellyfish\nThe zander respects the tiger\nThe eel does not become an enemy of the crocodile\n\nBased on the game state and the rules and preferences, does the squirrel offer a job to the canary?\nQuestion: Does the squirrel offer a job to the canary?",
        "idx": 165,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cheetah offers a job position to the bat whenever at least one animal removes one of the pieces of the jellyfish\nrule1() = remove(animal, piece_of(jellyfish)) => offer_job_position(cheetah, bat)\n# Rule2: If you see that something does not steal five of the points of the sea bass but it offers a job to the bat, what can you certainly conclude? You can conclude that it is not going to proceed to the spot right after the squirrel\nrule2(something) = not steal_points(something, 5, sea_bass) & offer_job_position(something, bat) => not proceed(something, spot_right_after(squirrel))\n# Rule3: The tiger does not offer a job position to the rabbit, in the case where the zander respects the tiger\nrule3() = respects(zander, tiger) => not offer_job_position(tiger, rabbit)\n# Rule4: The cheetah proceeds to the spot that is right after the spot of the squirrel whenever at least one animal knocks down the fortress that belongs to the moose\nrule4() = knock_down(animal, fortress_of(moose)) => proceed(cheetah, spot_right_after(squirrel))\n# Rule5: If the rabbit offers a job to the squirrel and the cheetah proceeds to the spot right after the squirrel, then the squirrel offers a job to the canary\nrule5() = offer_job_position(rabbit, squirrel) & proceed(cheetah, spot_right_after(squirrel)) => offer_job_position(squirrel, canary)\n# Rule6: If you are positive that one of the animals does not become an enemy of the crocodile, you can be certain that it will knock down the fortress of the moose without a doubt\nrule6(something) = not enemy(something, crocodile) => knock_down(something, fortress_of(moose))\n# Rule7: The rabbit unquestionably offers a job position to the squirrel, in the case where the tiger does not offer a job to the rabbit.\nrule7() = not offer_job_position(tiger, rabbit) => offer_job_position(rabbit, squirrel)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The doctorfish removes from the board one of the pieces of the jellyfish\nremove(doctorfish, piece_of(jellyfish)) = True\n# The zander respects the tiger\nrespects(zander, tiger) = True\n# The eel does not become an enemy of the crocodile\nnot enemy(eel, crocodile) = True\n\n# Based on the game state and the rules and preferences, does the squirrel offer a job to the canary?\nquestion = offer_job_position(squirrel, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the raven learns the basics of resource management from the cockroach and the octopus rolls the dice for the cockroach, then the cockroach shows all her cards to the eel\nRule2: If the cockroach has a card with a color that is one of the rainbow colors, then it needs support from the parrot\nRule3: If at least one animal rolls the dice for the viperfish, then the black bear does not learn the basics of resource management from the cheetah\nRule4: If the cockroach owns a luxury aircraft, then it becomes an actual enemy of the bat\nRule5: If something shows all her cards to the eel and becomes an actual enemy of the bat, then it rolls the dice for the viperfish\nRule6: If the cockroach has a sharp object, then it needs the support of the parrot\nRule7: If the turtle does not raise a peace flag for the cockroach, then the cockroach does not show all her cards to the eel\n\nRule1 is preferred over Rule7\n\nThe current state of the game is as follows\nThe cockroach has a card that is indigo in color\nThe cockroach has a trumpet\nThe cockroach owns a luxury aircraft\nThe cockroach is named Peddi\nThe goldfish is named Pablo\nThe octopus rolls the dice for the cockroach\nThe raven learns the basics of resource management from the cockroach\nThe turtle does not raise a peace flag for the cockroach\n\nBased on the game state and the rules and preferences, does the black bear learn the basics of resource management from the cheetah?\nQuestion: Does the black bear learn the basics of resource management from the cheetah?",
        "idx": 166,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the cockroach, if the belief is that the raven learns the basics of resource management from the cockroach and the octopus rolls the dice for the cockroach, then you can add \"the cockroach shows all her cards to the eel\" to your conclusions\nrule1() = learns_basics_of_resource_management(raven, cockroach) & rolls_dice(octopus, cockroach) => add_conclusion(\"the cockroach shows all her cards to the eel\")\n# Rule2: Regarding the cockroach, if it has a card whose color is one of the rainbow colors, then we can conclude that it needs support from the parrot\nrule2() = has(cockroach, card_with(color_in(rainbow_colors))) => needs_support(cockroach, parrot)\n# Rule3: If at least one animal rolls the dice for the viperfish, then the black bear does not learn the basics of resource management from the cheetah\nrule3() = rolls_dice(something, viperfish) => not learns_basics_of_resource_management(black_bear, cheetah)\n# Rule4: If the cockroach owns a luxury aircraft, then the cockroach becomes an actual enemy of the bat\nrule4() = owns(cockroach, luxury_aircraft) => actual_enemy(cockroach, bat)\n# Rule5: Be careful when something shows all her cards to the eel and also becomes an actual enemy of the bat because in this case it will surely roll the dice for the viperfish (this may or may not be problematic)\nrule5(something) = shows_all_cards(something, eel) & actual_enemy(something, bat) => rolls_dice(something, viperfish)\n# Rule6: If the cockroach has a sharp object, then the cockroach needs the support of the parrot\nrule6() = has(cockroach, sharp_object) => needs_support(cockroach, parrot)\n# Rule7: If the turtle does not raise a flag of peace for the cockroach, then the cockroach does not show all her cards to the eel.\nrule7() = not raise_flag_of_peace(turtle, cockroach) => not shows_all_cards(cockroach, eel)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n\n# The current state of the game is as follows\n# The cockroach has a card that is indigo in color, has a trumpet, and purchased a luxury aircraft\nhas(cockroach, card_with(indigo_color)) = True\nhas(cockroach, trumpet) = True\nowns(cockroach, luxury_aircraft) = True\n# The cockroach is named Peddi\nname(cockroach, Peddi) = True\n# The goldfish is named Pablo\nname(goldfish, Pablo) = True\n# The octopus rolls the dice for the cockroach\nrolls_dice(octopus, cockroach) = True\n# The raven learns the basics of resource management from the cockroach\nlearns_basics_of_resource_management(raven, cockroach) = True\n# The turtle does not raise a peace flag for the cockroach\nnot raise_flag_of_peace(turtle, cockroach) = True\n\n# Based on the game state and the rules and preferences, does the black bear learn the basics of resource management from the cheetah?\nquestion = learns_basics_of_resource_management(black_bear, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grizzly bear does not prepare armor for the squirrel but the hare respects the squirrel, then the squirrel raises a peace flag for the cockroach\nRule2: The squirrel does not raise a peace flag for the cockroach whenever at least one animal raises a peace flag for the buffalo\nRule3: If the cheetah winks at the leopard, then the leopard proceeds to the spot that is right after the spot of the kangaroo\nRule4: The leopard proceeds to the spot that is right after the spot of the tiger whenever at least one animal shows all her cards to the viperfish\nRule5: If the hare killed the mayor, then the hare respects the squirrel\nRule6: If the hare has fewer than thirteen friends, then the hare does not respect the squirrel\nRule7: If the leopard has a card whose color starts with the letter \"g\", then it does not proceed to the spot right after the kangaroo\nRule8: If the kiwi does not remove from the board one of the pieces of the blobfish, then the blobfish shows all her cards to the viperfish\nRule9: If the hare has a leafy green vegetable, then the hare does not respect the squirrel\nRule10: If at least one animal gives a magnifier to the grasshopper, then the grizzly bear does not prepare armor for the squirrel\nRule11: If at least one animal raises a peace flag for the cockroach, then it becomes an enemy of the snail\nRule12: If something proceeds to the spot right after the crocodile and sings a victory song for the panda bear, then it prepares armor for the squirrel\n\nRule12 is preferred over Rule10\nRule2 is preferred over Rule1\nRule5 is preferred over Rule6\nRule5 is preferred over Rule9\nRule7 is preferred over Rule3\n\nThe current state of the game is as follows\nThe blobfish assassinated the mayor\nThe cheetah winks at the leopard\nThe donkey holds the same number of points as the grasshopper\nThe grizzly bear becomes an enemy of the crocodile\nThe grizzly bear sings a victory song for the panda bear\nThe hare assassinated the mayor\nThe hare has a beer\nThe kiwi does not remove from the board one of the pieces of the blobfish\n\nBased on the game state and the rules and preferences, does the squirrel become an enemy of the snail?\nQuestion: Does the squirrel become an enemy of the snail?",
        "idx": 167,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the squirrel, if the belief is that the grizzly bear does not prepare armor for the squirrel but the hare respects the squirrel, then you can add \"the squirrel raises a peace flag for the cockroach\" to your conclusions\nrule1() = not prepare_armor(grizzly_bear, squirrel) & respects(hare, squirrel) => raise_flag_of_peace(squirrel, cockroach)\n# Rule2: The squirrel does not raise a flag of peace for the cockroach whenever at least one animal raises a peace flag for the buffalo\nrule2() = raise_flag_of_peace(animal, buffalo) => not raise_flag_of_peace(squirrel, cockroach)\n# Rule3: If the cheetah winks at the leopard, then the leopard proceeds to the spot that is right after the spot of the kangaroo\nrule3() = wink(cheetah, leopard) => proceed(leopard, spot_right_after(spot_of(kangaroo)))\n# Rule4: The leopard proceeds to the spot that is right after the spot of the tiger whenever at least one animal shows her cards (all of them) to the viperfish\nrule4() = show_cards(animal, viperfish) => proceed(leopard, spot_right_after(spot_of(tiger)))\n# Rule5: If the hare killed the mayor, then the hare respects the squirrel\nrule5() = killed(hare, mayor) => respects(hare, squirrel)\n# Rule6: If the hare has fewer than thirteen friends, then the hare does not respect the squirrel\nrule6() = friends(hare) < 13 => not respects(hare, squirrel)\n# Rule7: Regarding the leopard, if it has a card whose color starts with the letter \"g\", then we can conclude that it does not proceed to the spot right after the kangaroo\nrule7() = has(leopard, card_with(color_starting_with(\"g\"))) => not proceed(leopard, spot_right_after(spot_of(kangaroo)))\n# Rule8: If the kiwi does not remove from the board one of the pieces of the blobfish, then the blobfish shows all her cards to the viperfish\nrule8() = not remove(kiwi, piece_of(blobfish)) => show_cards(blobfish, viperfish)\n# Rule9: If the hare has a leafy green vegetable, then the hare does not respect the squirrel\nrule9() = has(hare, leafy_green_vegetable) => not respects(hare, squirrel)\n# Rule10: If at least one animal gives a magnifier to the grasshopper, then the grizzly bear does not prepare armor for the squirrel\nrule10() = give(magnifier, animal, grasshopper) => not prepare_armor(grizzly_bear, squirrel)\n# Rule11: If you are positive that you saw one of the animals raises a peace flag for the cockroach, you can be certain that it will also become an enemy of the snail\nrule11() = raise_flag_of_peace(animal, cockroach) => enemy(animal, snail)\n# Rule12: If you see that something proceeds to the spot right after the crocodile and sings a song of victory for the panda bear, what can you certainly conclude? You can conclude that it also prepares armor for the squirrel.\nrule12(something) = proceed(something, spot_right_after(spot_of(crocodile))) & sing_song(something, victory_song_for(panda_bear)) => prepare_armor(something, squirrel)\n# Rule12 is preferred over Rule10\norder(rule12) > order(rule10) = True\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n# Rule5 is preferred over Rule9\norder(rule5) > order(rule9) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n\n# The current state of the game is as follows\n# The blobfish assassinated the mayor\nassassinated(blobfish, mayor) = True\n# The cheetah winks at the leopard\nwink(cheetah, leopard) = True\n# The donkey holds the same number of points as the grasshopper\npoints(donkey) == points(grasshopper) = True\n# The grizzly bear becomes an enemy of the crocodile\nenemy(grizzly_bear, crocodile) = True\n# The grizzly bear sings a victory song for the panda bear\nsing_song(grizzly_bear, victory_song_for(panda_bear)) = True\n# The hare assassinated the mayor, and has a beer\nassassinated(hare, mayor) = True\nhas(hare, beer) = True\n# The kiwi does not remove from the board one of the pieces of the blobfish\nnot remove(kiwi, piece_of(blobfish)) = True\n\n# Based on the game state and the rules and preferences, does the squirrel become an enemy of the snail?\nquestion = enemy(squirrel, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cricket does not show all her cards to the hippopotamus whenever at least one animal shows all her cards to the squid\nRule2: The lobster rolls the dice for the hippopotamus whenever at least one animal eats the food of the eagle\nRule3: If the donkey has more than 3 friends, then it shows all her cards to the squid\nRule4: If the hare has a name whose first letter is the same as the first letter of the rabbit's name, then the hare does not need support from the cheetah\nRule5: If something does not need support from the cheetah but sings a victory song for the rabbit, then it gives a magnifying glass to the squirrel\nRule6: If the hare has a musical instrument, then the hare sings a victory song for the rabbit\nRule7: If you see that something eats the food of the viperfish, you can be certain that it will also eat the food of the eagle\nRule8: If the hare has fewer than 17 friends, then the hare does not need the support of the cheetah\nRule9: The donkey will not show all her cards to the squid if the crocodile does not attack the green fields owned by the donkey\nRule10: If the donkey created a time machine, then it shows all her cards to the squid\nRule11: The hippopotamus needs support from the caterpillar if at least one animal gives a magnifier to the squirrel\n\nRule10 is preferred over Rule9\nRule3 is preferred over Rule9\n\nThe current state of the game is as follows\nThe donkey has one friend\nThe donkey invented a time machine\nThe hare has a flute\nThe hare has ten friends and is named Chickpea\nThe koala eats the food of the viperfish\nThe rabbit is named Bella\nThe crocodile does not attack the green fields owned by the donkey\n\nBased on the game state and the rules and preferences, does the hippopotamus need support from the caterpillar?\nQuestion: Does the hippopotamus need support from the caterpillar?",
        "idx": 168,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cricket does not show all her cards to the hippopotamus whenever at least one animal shows all her cards to the squid\nrule1() = show_cards(something, squid) => not show_cards(cricket, hippopotamus)\n# Rule2: The lobster rolls the dice for the hippopotamus whenever at least one animal eats the food of the eagle\nrule2() = eat_food(something, eagle) => roll_dice(lobster, hippopotamus)\n# Rule3: Regarding the donkey, if it has more than 3 friends, then we can conclude that it shows her cards (all of them) to the squid\nrule3() = friends(donkey) > 3 => show_cards(donkey, squid)\n# Rule4: If the hare has a name whose first letter is the same as the first letter of the rabbit's name, then the hare does not need support from the cheetah\nrule4() = first_letter_of(name(hare)) == first_letter_of(name(rabbit)) => not need_support(hare, cheetah)\n# Rule5: If you see that something does not need support from the cheetah but it sings a song of victory for the rabbit, what can you certainly conclude? You can conclude that it also gives a magnifying glass to the squirrel\nrule5() = not need_support(something, cheetah) & sing_song(something, victory_song_for(rabbit)) => give_magnifying_glass(something, squirrel)\n# Rule6: If the hare has a musical instrument, then the hare sings a victory song for the rabbit\nrule6() = has(hare, musical_instrument) => sing_song(hare, victory_song_for(rabbit))\n# Rule7: If you are positive that you saw one of the animals eats the food of the viperfish, you can be certain that it will also eat the food of the eagle\nrule7() = eat_food(something, viperfish) => eat_food(something, eagle)\n# Rule8: If the hare has fewer than 17 friends, then the hare does not need the support of the cheetah\nrule8() = friends(hare) < 17 => not need_support(hare, cheetah)\n# Rule9: The donkey will not show all her cards to the squid, in the case where the crocodile does not attack the green fields whose owner is the donkey\nrule9() = not attack(crocodile, green_fields_of(donkey)) => not show_cards(donkey, squid)\n# Rule10: If the donkey created a time machine, then the donkey shows all her cards to the squid\nrule10() = created_time_machine(donkey) => show_cards(donkey, squid)\n# Rule11: The hippopotamus needs support from the caterpillar whenever at least one animal gives a magnifier to the squirrel.\nrule11() = give_magnifier(something, squirrel) => need_support(hippopotamus, caterpillar)\n# Rule10 is preferred over Rule9\norder(rule10) > order(rule9) = True\n# Rule3 is preferred over Rule9\norder(rule3) > order(rule9) = True\n\n# The current state of the game is as follows\n# The donkey has one friend\nfriends(donkey) = 1\n# The donkey invented a time machine\ncreated_time_machine(donkey) = True\n# The hare has a flute\nhas(hare, flute) = True\n# The hare has ten friends, and is named Chickpea\nfriends(hare) = 10\nname(hare, Chickpea) = True\n# The koala eats the food of the viperfish\neat_food(koala, viperfish) = True\n# The rabbit is named Bella\nname(rabbit, Bella) = True\n# The crocodile does not attack the green fields whose owner is the donkey\nnot attack(crocodile, green_fields_of(donkey)) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus need support from the caterpillar?\nquestion = need_support(hippopotamus, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish eats the food of the tilapia, then the tilapia gives a magnifying glass to the sheep\nRule2: The cheetah gives a magnifier to the sheep, in the case where the hare prepares armor for the cheetah\nRule3: If the hare has something to carry apples and oranges, then it does not prepare armor for the cheetah\nRule4: If something prepares armor for the squirrel and becomes an actual enemy of the tiger, then it knocks down the fortress of the salmon\nRule5: If you see that something burns the warehouse of the caterpillar, then it does not give a magnifying glass to the sheep\nRule6: If the blobfish has something to drink, then it does not eat the food that belongs to the tilapia\nRule7: If the baboon removes one of the pieces of the blobfish, then the blobfish eats the food that belongs to the tilapia\nRule8: If something does not steal five points from the phoenix, then it becomes an actual enemy of the tiger\nRule9: If the sheep has more than 6 friends, then it does not steal five points from the phoenix\nRule10: If at least one animal knows the defensive plans of the octopus, then the tilapia does not give a magnifier to the sheep\nRule11: If the hare has a card with a primary color, then it prepares armor for the cheetah\nRule12: If the sheep has a device to connect to the internet, then it does not steal five points from the phoenix\nRule13: If the cheetah gives a magnifying glass to the sheep and the tilapia gives a magnifying glass to the sheep, then the sheep does not knock down the fortress that belongs to the salmon\nRule14: If the hare has a name whose first letter is the same as the first letter of the lion's name, then it prepares armor for the cheetah\nRule15: If the blobfish has a name whose first letter is the same as the first letter of the eagle's name, then it does not eat the food of the tilapia\n\nRule10 is preferred over Rule1\nRule15 is preferred over Rule7\nRule3 is preferred over Rule11\nRule3 is preferred over Rule14\nRule4 is preferred over Rule13\nRule5 is preferred over Rule2\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe baboon removes one of the pieces of the blobfish\nThe blobfish has a bench\nThe blobfish is named Lucy\nThe hare has a card that is white in color\nThe hare is named Lola\nThe lion is named Luna\nThe sheep has 13 friends\nThe sheep has a bench\n\nBased on the game state and the rules and preferences, does the sheep knock down the fortress of the salmon?\nQuestion: Does the sheep knock down the fortress of the salmon?",
        "idx": 169,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the blobfish eats the food of the tilapia, then the tilapia gives a magnifying glass to the sheep\nrule1() = eat_food(blobfish, food_of(tilapia)) => give_magnifying_glass(tilapia, sheep)\n# Rule2: The cheetah unquestionably gives a magnifier to the sheep, in the case where the hare prepares armor for the cheetah\nrule2() = prepare_armor(hare, cheetah) => give_magnifying_glass(cheetah, sheep)\n# Rule3: Regarding the hare, if it has something to carry apples and oranges, then we can conclude that it does not prepare armor for the cheetah\nrule3() = has(hare, something_to_carry_apples_and_oranges) => not prepare_armor(hare, cheetah)\n# Rule4: If you see that something prepares armor for the squirrel and becomes an actual enemy of the tiger, what can you certainly conclude? You can conclude that it also knocks down the fortress of the salmon\nrule4() = prepare_armor(something, squirrel) & enemy(something, tiger) => knock_down_fortress(something, salmon)\n# Rule5: If you are positive that you saw one of the animals burns the warehouse that is in possession of the caterpillar, you can be certain that it will not give a magnifying glass to the sheep\nrule5() = burn(warehouse_of(caterpillar), something) => not give_magnifying_glass(something, sheep)\n# Rule6: If the blobfish has something to drink, then the blobfish does not eat the food that belongs to the tilapia\nrule6() = has(blobfish, something_to_drink) => not eat_food(blobfish, food_of(tilapia))\n# Rule7: If the baboon removes one of the pieces of the blobfish, then the blobfish eats the food that belongs to the tilapia\nrule7() = remove(baboon, piece_of(blobfish)) => eat_food(blobfish, food_of(tilapia))\n# Rule8: If you are positive that one of the animals does not steal five of the points of the phoenix, you can be certain that it will become an actual enemy of the tiger without a doubt\nrule8() = not steal_points(something, 5, phoenix) => become_enemy(something, tiger)\n# Rule9: If the sheep has more than 6 friends, then the sheep does not steal five of the points of the phoenix\nrule9() = friends(sheep) > 6 => not steal_points(sheep, 5, phoenix)\n# Rule10: If at least one animal knows the defensive plans of the octopus, then the tilapia does not give a magnifier to the sheep\nrule10() = knows(defensive_plans_of(octopus), something) => not give_magnifying_glass(tilapia, sheep)\n# Rule11: If the hare has a card with a primary color, then the hare prepares armor for the cheetah\nrule11() = has(hare, card_with(primary_color)) => prepare_armor(hare, cheetah)\n# Rule12: If the sheep has a device to connect to the internet, then the sheep does not steal five points from the phoenix\nrule12() = has(sheep, connect_to_internet(device)) => not steal_points(sheep, 5, phoenix)\n# Rule13: For the sheep, if the belief is that the cheetah gives a magnifying glass to the sheep and the tilapia gives a magnifying glass to the sheep, then you can add that \"the sheep is not going to knock down the fortress that belongs to the salmon\" to your conclusions\nrule13() = believe(give_magnifying_glass(cheetah, sheep)) & believe(give_magnifying_glass(tilapia, sheep)) => not knock_down_fortress(sheep, salmon)\n# Rule14: Regarding the hare, if it has a name whose first letter is the same as the first letter of the lion's name, then we can conclude that it prepares armor for the cheetah\nrule14() = first_letter_of(name(hare)) == first_letter_of(name(lion)) => prepare_armor(hare, cheetah)\n# Rule15: If the blobfish has a name whose first letter is the same as the first letter of the eagle's name, then the blobfish does not eat the food of the tilapia.\nrule15() = first_letter_of(name(blobfish)) == first_letter_of(name(eagle)) => not eat_food(blobfish, food_of(tilapia))\n# Rule10 is preferred over Rule1\norder(rule10) > order(rule1) = True\n# Rule15 is preferred over Rule7\norder(rule15) > order(rule7) = True\n# Rule3 is preferred over Rule11\norder(rule3) > order(rule11) = True\n# Rule3 is preferred over Rule14\norder(rule3) > order(rule14) = True\n# Rule4 is preferred over Rule13\norder(rule4) > order(rule13) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The baboon removes from the board one of the pieces of the blobfish\nremove(baboon, piece_of(blobfish)) = True\n# The blobfish has a bench, and is named Lucy\nhas(blobfish, bench) = True\nname(blobfish, Lucy) = True\n# The hare has a card that is white in color, and is named Lola\nhas(hare, card_with(white_color)) = True\nname(hare, Lola) = True\n# The lion is named Luna\nname(lion, Luna) = True\n# The sheep has 13 friends, and has a bench\nfriends(sheep) = 13\nhas(sheep, bench) = True\n\n# Based on the game state and the rules and preferences, does the sheep knock down the fortress of the salmon?\nquestion = knock_down_fortress(sheep, salmon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grasshopper prepares armor for the hippopotamus, then the hippopotamus raises a flag of peace for the cow\nRule2: If something knows the defensive plans of the halibut and also owes money to the caterpillar, then it does not prepare armor for the hippopotamus\nRule3: If the snail has a device to connect to the internet, then the snail does not show all her cards to the grasshopper\nRule4: If the cat has a musical instrument, then it does not give a magnifier to the grasshopper\nRule5: If the snail has a name whose first letter is the same as the first letter of the sheep's name, then the snail does not show all her cards to the grasshopper\nRule6: If the cat has a high salary, then the cat gives a magnifier to the grasshopper\nRule7: If the grasshopper has more than 1 friend, then it knows the defense plan of the halibut\nRule8: If the cat has something to drink, then it does not give a magnifier to the grasshopper\nRule9: If the snail has a device to connect to the internet, then the snail shows all her cards to the grasshopper\nRule10: If the snail shows all her cards to the grasshopper and the cat does not give a magnifying glass to the grasshopper, then the grasshopper prepares armor for the hippopotamus\n\nRule2 is preferred over Rule10\nRule3 is preferred over Rule9\nRule5 is preferred over Rule9\nRule6 is preferred over Rule4\nRule6 is preferred over Rule8\n\nThe current state of the game is as follows\nThe cat has a cutter\nThe cat has a violin\nThe grasshopper has eleven friends\nThe snail has a cell phone\nThe snail has a knapsack\nThe snail is named Luna\n\nBased on the game state and the rules and preferences, does the hippopotamus raise a peace flag for the cow?\nQuestion: Does the hippopotamus raise a peace flag for the cow?",
        "idx": 170,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grasshopper prepares armor for the hippopotamus, then the hippopotamus raises a flag of peace for the cow\nrule1() = prepare_armor(grasshopper, hippopotamus) => raise_flag_of_peace(hippopotamus, cow)\n# Rule2: Be careful when something knows the defensive plans of the halibut and also owes $$$ to the caterpillar because in this case it will surely not prepare armor for the hippopotamus (this may or may not be problematic)\nrule2(something) = knows(defensive_plans_of(halibut), something) & owes_money_to(something, caterpillar) => not prepare_armor(something, hippopotamus)\n# Rule3: If the snail has a device to connect to the internet, then the snail does not show her cards (all of them) to the grasshopper\nrule3() = has(snail, connect_to_internet(device)) => not show_cards(snail, grasshopper)\n# Rule4: Regarding the cat, if it has a musical instrument, then we can conclude that it does not give a magnifier to the grasshopper\nrule4() = has(cat, musical_instrument) => not give_magnifier(cat, grasshopper)\n# Rule5: Regarding the snail, if it has a name whose first letter is the same as the first letter of the sheep's name, then we can conclude that it does not show all her cards to the grasshopper\nrule5() = first_letter_of(name(snail)) == first_letter_of(name(sheep)) => not show_all_cards(snail, grasshopper)\n# Rule6: If the cat has a high salary, then the cat gives a magnifier to the grasshopper\nrule6() = has_high_salary(cat) => give_magnifier(cat, grasshopper)\n# Rule7: Regarding the grasshopper, if it has more than 1 friend, then we can conclude that it knows the defense plan of the halibut\nrule7() = friends(grasshopper) > 1 => knows(defense_plan_of(halibut), grasshopper)\n# Rule8: Regarding the cat, if it has something to drink, then we can conclude that it does not give a magnifier to the grasshopper\nrule8() = has(cat, drink) => not give_magnifier(cat, grasshopper)\n# Rule9: If the snail has a device to connect to the internet, then the snail shows all her cards to the grasshopper\nrule9() = has(snail, connect_to_internet(device)) => show_all_cards(snail, grasshopper)\n# Rule10: If the snail shows all her cards to the grasshopper and the cat does not give a magnifying glass to the grasshopper, then, inevitably, the grasshopper prepares armor for the hippopotamus.\nrule10() = show_all_cards(snail, grasshopper) & not give_magnifier(cat, grasshopper) => prepare_armor(grasshopper, hippopotamus)\n# Rule2 is preferred over Rule10\norder(rule2) > order(rule10) = True\n# Rule3 is preferred over Rule9\norder(rule3) > order(rule9) = True\n# Rule5 is preferred over Rule9\norder(rule5) > order(rule9) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule6 is preferred over Rule8\norder(rule6) > order(rule8) = True\n\n# The current state of the game is as follows\n# The cat has a cutter, and has a violin\nhas(cat, cutter) = True\nhas(cat, violin) = True\n# The grasshopper has eleven friends\nfriends(grasshopper) = 11\n# The snail has a cell phone, and has a knapsack\nhas(snail, cell_phone) = True\nhas(snail, knapsack) = True\n# The snail is named Luna\nname(snail, Luna) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus raise a peace flag for the cow?\nquestion = raise_flag_of_peace(hippopotamus, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something becomes an enemy of the lion but does not roll the dice for the elephant, then it attacks the green fields owned by the moose\nRule2: If the carp does not sing a victory song for the baboon, then the baboon winks at the panda bear\nRule3: If at least one animal attacks the green fields owned by the moose, then the carp does not sing a victory song for the baboon\nRule4: If the ferret has a name whose first letter is the same as the first letter of the raven's name, then the ferret does not attack the green fields owned by the moose\nRule5: If something does not proceed to the spot right after the spot of the sun bear, then it does not wink at the panda bear\n\nRule4 is preferred over Rule1\nRule5 is preferred over Rule2\n\nThe current state of the game is as follows\nThe ferret becomes an enemy of the lion\nThe ferret is named Lily\nThe ferret does not roll the dice for the elephant\n\nBased on the game state and the rules and preferences, does the baboon wink at the panda bear?\nQuestion: Does the baboon wink at the panda bear?",
        "idx": 171,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something becomes an enemy of the lion but does not roll the dice for the elephant, what can you certainly conclude? You can conclude that it attacks the green fields whose owner is the moose\nrule1() = enemy(something, lion) & not roll_dice(something, elephant) => attack(something, green_fields_owned_by(moose))\n# Rule2: The baboon unquestionably winks at the panda bear, in the case where the carp does not sing a song of victory for the baboon\nrule2() = not sing_song(carp, victory_song_for(baboon)) => wink(baboon, panda_bear)\n# Rule3: The carp does not sing a victory song for the baboon whenever at least one animal attacks the green fields whose owner is the moose\nrule3() = attack(something, green_fields_owned_by(moose)) => not sing_song(carp, victory_song_for(baboon))\n# Rule4: If the ferret has a name whose first letter is the same as the first letter of the raven's name, then the ferret does not attack the green fields whose owner is the moose\nrule4() = first_letter_of(name(ferret)) == first_letter_of(name(raven)) => not attack(ferret, green_fields_owned_by(moose))\n# Rule5: If you are positive that one of the animals does not proceed to the spot right after the sun bear, you can be certain that it will not wink at the panda bear.\nrule5(something) = not proceed(something, spot_right_after(spot_of(sun_bear))) => not wink(something, panda_bear)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n\n# The current state of the game is as follows\n# The ferret becomes an enemy of the lion\nenemy(ferret, lion) = True\n# The ferret is named Lily\nname(ferret, Lily) = True\n# The ferret does not roll the dice for the elephant\nnot roll_dice(ferret, elephant) = True\n\n# Based on the game state and the rules and preferences, does the baboon wink at the panda bear?\nquestion = wink(baboon, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the raven does not burn the warehouse that is in possession of the oscar, then the oscar learns the basics of resource management from the panther\nRule2: If the jellyfish holds an equal number of points as the halibut and the oscar winks at the halibut, then the halibut does not know the defensive plans of the cockroach\nRule3: If at least one animal needs support from the pig, then the salmon respects the jellyfish\nRule4: If something learns elementary resource management from the panther, then it winks at the halibut\nRule5: The jellyfish holds an equal number of points as the halibut, in the case where the salmon respects the jellyfish\nRule6: The jellyfish does not hold an equal number of points as the halibut, in the case where the turtle does not need the support of the jellyfish\n\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe donkey needs support from the pig\nThe oscar gives a magnifier to the swordfish\nThe salmon has 11 friends\nThe salmon is named Lola\nThe squirrel is named Lucy\nThe raven does not burn the warehouse of the oscar\n\nBased on the game state and the rules and preferences, does the halibut know the defensive plans of the cockroach?\nQuestion: Does the halibut know the defensive plans of the cockroach?",
        "idx": 172,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the raven does not burn the warehouse that is in possession of the oscar, then the oscar learns the basics of resource management from the panther\nrule1() = not burn(warehouse_of(oscar), raven) => learn_basics_of_resource_management(oscar, panther)\n# Rule2: For the halibut, if the belief is that the jellyfish holds an equal number of points as the halibut and the oscar winks at the halibut, then you can add that \"the halibut is not going to know the defensive plans of the cockroach\" to your conclusions\nrule2() = points(jellyfish) == points(halibut) & wink(oscar, halibut) => not know_defensive_plans(halibut, cockroach)\n# Rule3: If at least one animal needs support from the pig, then the salmon respects the jellyfish\nrule3() = needs_support(something, pig) => respects(salmon, jellyfish)\n# Rule4: If something learns elementary resource management from the panther, then it winks at the halibut, too\nrule4() = learn_elementary_resource_management(something, panther) => wink(something, halibut)\n# Rule5: The jellyfish unquestionably holds an equal number of points as the halibut, in the case where the salmon respects the jellyfish\nrule5() = respects(salmon, jellyfish) => points(jellyfish) == points(halibut)\n# Rule6: The jellyfish will not hold an equal number of points as the halibut, in the case where the turtle does not need the support of the jellyfish.\nrule6() = not needs_support(turtle, jellyfish) => not points(jellyfish) == points(halibut)\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The donkey needs support from the pig\nneeds_support(donkey, pig) = True\n# The oscar gives a magnifier to the swordfish\ngive(oscar, magnifier, swordfish) = True\n# The salmon has 11 friends\nfriends(salmon) = 11\n# The salmon is named Lola\nname(salmon, Lola) = True\n# The squirrel is named Lucy\nname(squirrel, Lucy) = True\n# The raven does not burn the warehouse of the oscar\nnot burn(warehouse_of(oscar), raven) = True\n\n# Based on the game state and the rules and preferences, does the halibut know the defensive plans of the cockroach?\nquestion = know_defensive_plans(halibut, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal becomes an enemy of the cheetah, then the cricket eats the food that belongs to the salmon\nRule2: If an animal does not prepare armor for the catfish, then it will not eat the food of the salmon\nRule3: If at least one animal rolls the dice for the wolverine, then the moose becomes an enemy of the cheetah\nRule4: If the leopard eats the food that belongs to the bat, then the bat rolls the dice for the wolverine\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe leopard respects the bat\n\nBased on the game state and the rules and preferences, does the cricket eat the food of the salmon?\nQuestion: Does the cricket eat the food of the salmon?",
        "idx": 173,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal becomes an enemy of the cheetah, then the cricket eats the food that belongs to the salmon\nrule1() = enemy_of(something, cheetah) => eat_food(cricket, food_of(salmon))\n# Rule2: If you are positive that one of the animals does not prepare armor for the catfish, you can be certain that it will not eat the food of the salmon\nrule2(something) = not prepare_armor(something, catfish) => not eat_food(something, food_of(salmon))\n# Rule3: If at least one animal rolls the dice for the wolverine, then the moose becomes an enemy of the cheetah\nrule3() = roll_dice(something, wolverine) => enemy_of(moose, cheetah)\n# Rule4: If the leopard eats the food that belongs to the bat, then the bat rolls the dice for the wolverine.\nrule4() = eat_food(leopard, food_of(bat)) => roll_dice(bat, wolverine)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The leopard respects the bat\nrespects(leopard, bat) = True\n\n# Based on the game state and the rules and preferences, does the cricket eat the food of the salmon?\nquestion = eat_food(cricket, food_of(salmon))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus has a name whose first letter is the same as the first letter of the amberjack's name, then the octopus burns the warehouse of the cow\nRule2: If the panther has a device to connect to the internet, then it steals five points from the doctorfish\nRule3: If the mosquito has a name whose first letter is the same as the first letter of the cow's name, then the mosquito rolls the dice for the doctorfish\nRule4: If the doctorfish eats the food that belongs to the wolverine, then the wolverine shows all her cards to the sheep\nRule5: If the raven holds an equal number of points as the panther, then the panther does not steal five points from the doctorfish\nRule6: If the octopus has a musical instrument, then it burns the warehouse of the cow\nRule7: If the mosquito rolls the dice for the doctorfish and the panther steals five points from the doctorfish, then the doctorfish eats the food of the wolverine\n\nRule5 is preferred over Rule2\n\nThe current state of the game is as follows\nThe amberjack is named Tango\nThe cow is named Meadow\nThe mosquito is named Mojo\nThe mosquito published a high-quality paper\nThe octopus has a flute\nThe octopus is named Casper\nThe panther has a computer\n\nBased on the game state and the rules and preferences, does the wolverine show all her cards to the sheep?\nQuestion: Does the wolverine show all her cards to the sheep?",
        "idx": 174,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the octopus has a name whose first letter is the same as the first letter of the amberjack's name, then the octopus burns the warehouse of the cow\nrule1() = first_letter_of(name(octopus)) == first_letter_of(name(amberjack)) => burn(warehouse_of(cow))\n# Rule2: Regarding the panther, if it has a device to connect to the internet, then we can conclude that it steals five points from the doctorfish\nrule2() = has(panther, connect_to_internet(device)) => steal_points(panther, 5, doctorfish)\n# Rule3: If the mosquito has a name whose first letter is the same as the first letter of the cow's name, then the mosquito rolls the dice for the doctorfish\nrule3() = first_letter_of(name(mosquito)) == first_letter_of(name(cow)) => roll_dice(mosquito, doctorfish)\n# Rule4: The wolverine unquestionably shows all her cards to the sheep, in the case where the doctorfish eats the food that belongs to the wolverine\nrule4() = eat_food(doctorfish, food_of(wolverine)) => show_all_cards(wolverine, sheep)\n# Rule5: The panther does not steal five of the points of the doctorfish, in the case where the raven holds an equal number of points as the panther\nrule5() = points(raven) == points(panther) => not steal_points(panther, 5, doctorfish)\n# Rule6: Regarding the octopus, if it has a musical instrument, then we can conclude that it burns the warehouse of the cow\nrule6() = has(octopus, musical_instrument) => burn(warehouse_of(cow))\n# Rule7: If the mosquito rolls the dice for the doctorfish and the panther steals five points from the doctorfish, then the doctorfish eats the food of the wolverine.\nrule7() = roll_dice(mosquito, doctorfish) & steal_points(panther, 5, doctorfish) => eat_food(doctorfish, food_of(wolverine))\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n\n# The current state of the game is as follows\n# The amberjack is named Tango\nname(amberjack, Tango) = True\n# The cow is named Meadow\nname(cow, Meadow) = True\n# The mosquito is named Mojo\nname(mosquito, Mojo) = True\n# The mosquito published a high-quality paper\npublished_high_quality_paper(mosquito) = True\n# The octopus has a flute\nhas(octopus, flute) = True\n# The octopus is named Casper\nname(octopus, Casper) = True\n# The panther has a computer\nhas(panther, computer) = True\n\n# Based on the game state and the rules and preferences, does the wolverine show all her cards to the sheep?\nquestion = show_all_cards(wolverine, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the crocodile has something to sit on, then it shows all her cards to the rabbit\nRule2: If the tiger has something to sit on, then it steals five points from the kudu\nRule3: If the eel has more than ten friends, then it sings a song of victory for the lobster\nRule4: The crocodile shows all her cards to the spider whenever at least one animal learns the basics of resource management from the kiwi\nRule5: The kudu sings a song of victory for the sun bear whenever at least one animal sings a victory song for the lobster\nRule6: If the crocodile has a card whose color appears in the flag of Japan, then it does not show all her cards to the rabbit\nRule7: If the crocodile has a device to connect to the internet, then it does not show all her cards to the rabbit\nRule8: If the kudu sings a song of victory for the sun bear and the crocodile gives a magnifier to the sun bear, then the sun bear does not need support from the hummingbird\nRule9: The crocodile gives a magnifying glass to the sun bear whenever at least one animal eats the food that belongs to the salmon\nRule10: If something shows all her cards to the spider but does not show all her cards to the rabbit, then it does not give a magnifying glass to the sun bear\nRule11: If the eel has a high salary, then it sings a victory song for the lobster\nRule12: If the tiger has a card whose color starts with the letter \"g\", then it steals five points from the kudu\nRule13: If the starfish sings a victory song for the sheep, then the sheep eats the food of the salmon\n\nRule1 is preferred over Rule6\nRule1 is preferred over Rule7\nRule9 is preferred over Rule10\n\nThe current state of the game is as follows\nThe crocodile has a card that is white in color\nThe crocodile has a club chair\nThe eel has 14 friends and has a low-income job\nThe starfish sings a victory song for the sheep\nThe tiger has a banana-strawberry smoothie\nThe tiger has a card that is green in color\nThe whale learns the basics of resource management from the kiwi\n\nBased on the game state and the rules and preferences, does the sun bear need support from the hummingbird?\nQuestion: Does the sun bear need support from the hummingbird?",
        "idx": 175,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the crocodile, if it has something to sit on, then we can conclude that it shows her cards (all of them) to the rabbit\nrule1() = has(crocodile, something_to_sit_on) => show_cards(crocodile, rabbit)\n# Rule2: Regarding the tiger, if it has something to sit on, then we can conclude that it steals five of the points of the kudu\nrule2() = has(tiger, something_to_sit_on) => steal_points(tiger, 5, kudu)\n# Rule3: If the eel has more than ten friends, then the eel sings a song of victory for the lobster\nrule3() = friends(eel) > 10 => sing_song(eel, victory_song_for(lobster))\n# Rule4: The crocodile shows all her cards to the spider whenever at least one animal learns the basics of resource management from the kiwi\nrule4() = learn_basics_of_resource_management(something, kiwi) => show_cards(crocodile, spider)\n# Rule5: The kudu sings a song of victory for the sun bear whenever at least one animal sings a victory song for the lobster\nrule5() = sing_song(something, victory_song_for(lobster)) => sing_song(kudu, victory_song_for(sun_bear))\n# Rule6: If the crocodile has a card whose color appears in the flag of Japan, then the crocodile does not show all her cards to the rabbit\nrule6() = has(crocodile, card_with(color_in_flag_of_Japan)) => not show_cards(crocodile, rabbit)\n# Rule7: Regarding the crocodile, if it has a device to connect to the internet, then we can conclude that it does not show all her cards to the rabbit\nrule7() = has(crocodile, connect_to_internet(device)) => not show_cards(crocodile, rabbit)\n# Rule8: For the sun bear, if the belief is that the kudu sings a song of victory for the sun bear and the crocodile gives a magnifier to the sun bear, then you can add that \"the sun bear is not going to need support from the hummingbird\" to your conclusions\nrule8() = sing_song(kudu, victory_song_for(sun_bear)) & give_magnifying_glass(crocodile, sun_bear) => not need_support(sun_bear, hummingbird)\n# Rule9: The crocodile gives a magnifying glass to the sun bear whenever at least one animal eats the food that belongs to the salmon\nrule9() = eat_food(something, food_of(salmon)) => give_magnifying_glass(crocodile, sun_bear)\n# Rule10: Be careful when something shows all her cards to the spider but does not show all her cards to the rabbit because in this case it will, surely, not give a magnifying glass to the sun bear (this may or may not be problematic)\nrule10() = show_cards(something, spider) & not show_cards(something, rabbit) => not give_magnifying_glass(something, sun_bear)\n# Rule11: If the eel has a high salary, then the eel sings a victory song for the lobster\nrule11() = has_high_salary(eel) => sing_song(eel, victory_song_for(lobster))\n# Rule12: Regarding the tiger, if it has a card whose color starts with the letter \"g\", then we can conclude that it steals five points from the kudu\nrule12() = has(tiger, card_with(color_starting_with(\"g\"))) => steal_points(tiger, 5, kudu)\n# Rule13: If the starfish sings a victory song for the sheep, then the sheep eats the food of the salmon.\nrule13() = sing_song(starfish, victory_song_for(sheep)) => eat_food(sheep, food_of(salmon))\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule9 is preferred over Rule10\norder(rule9) > order(rule10) = True\n\n# The current state of the game is as follows\n# The crocodile has a card that is white in color\nhas(crocodile, card_with(white_color)) = True\n# The crocodile has a club chair\nhas(crocodile, club_chair) = True\n# The eel has 14 friends, and has a low-income job\nfriends(eel) = 14\nhas_low_income_job(eel) = True\n# The starfish sings a victory song for the sheep\nsing_song(starfish, victory_song_for(sheep)) = True\n# The tiger has a banana-strawberry smoothie\nhas(tiger, banana_strawberry_smoothie) = True\n# The tiger has a card that is green in color\nhas(tiger, card_with(green_color)) = True\n# The whale learns the basics of resource management from the kiwi\nlearn_basics_of_resource_management(whale, kiwi) = True\n\n# Based on the game state and the rules and preferences, does the sun bear need support from the hummingbird?\nquestion = need_support(sun_bear, hummingbird)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The black bear will not roll the dice for the cockroach, in the case where the grasshopper does not burn the warehouse that is in possession of the black bear\nRule2: If the meerkat has more than 9 friends, then the meerkat does not give a magnifying glass to the spider\nRule3: If the kudu has more than 5 friends, then the kudu rolls the dice for the tilapia\nRule4: The lobster unquestionably attacks the green fields of the black bear, in the case where the polar bear respects the lobster\nRule5: Regarding the black bear, if it killed the mayor, then it rolls the dice for the cockroach\nRule6: Regarding the polar bear, if it has something to drink, then it respects the lobster\nRule7: If the meerkat has a name whose first letter is the same as the first letter of the cheetah's name, then the meerkat gives a magnifier to the spider\nRule8: If the meerkat becomes an enemy of the spider, then the spider eats the food that belongs to the black bear\nRule9: If the lobster attacks the green fields whose owner is the black bear and the spider eats the food that belongs to the black bear, then the black bear gives a magnifier to the eel\nRule10: If at least one animal rolls the dice for the tilapia, then the black bear sings a victory song for the puffin\nRule11: If something rolls the dice for the cockroach, then it does not sing a victory song for the kudu\nRule12: If the meerkat has a leafy green vegetable, then it does not give a magnifying glass to the spider\nRule13: If the kudu has a device to connect to the internet, then it rolls the dice for the tilapia\nRule14: If the black bear has something to carry apples and oranges, then the black bear rolls the dice for the cockroach\n\nRule1 is preferred over Rule14\nRule1 is preferred over Rule5\nRule7 is preferred over Rule12\nRule7 is preferred over Rule2\n\nThe current state of the game is as follows\nThe black bear assassinated the mayor\nThe black bear has a trumpet\nThe cheetah is named Cinnamon\nThe kudu has 1 wise friend and 1 non-wise friend\nThe kudu has a computer\nThe meerkat has a violin\nThe meerkat is named Charlie\nThe polar bear got a well-paid job\nThe polar bear has a beer\nThe polar bear has a cello\nThe grasshopper does not burn the warehouse of the black bear\n\nBased on the game state and the rules and preferences, does the black bear give a magnifier to the eel?\nQuestion: Does the black bear give a magnifier to the eel?",
        "idx": 176,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The black bear will not roll the dice for the cockroach, in the case where the grasshopper does not burn the warehouse that is in possession of the black bear\nrule1() = not burn(warehouse_of(black_bear), grasshopper) => not roll_dice(black_bear, cockroach)\n# Rule2: If the meerkat has more than 9 friends, then the meerkat does not give a magnifying glass to the spider\nrule2() = friends(meerkat) > 9 => not give_magnifying_glass(meerkat, spider)\n# Rule3: If the kudu has more than 5 friends, then the kudu rolls the dice for the tilapia\nrule3() = friends(kudu) > 5 => roll_dice(kudu, tilapia)\n# Rule4: The lobster unquestionably attacks the green fields of the black bear, in the case where the polar bear respects the lobster\nrule4() = respect(polar_bear, lobster) => attack(lobster, green_fields_of(black_bear))\n# Rule5: Regarding the black bear, if it killed the mayor, then we can conclude that it rolls the dice for the cockroach\nrule5() = killed(black_bear, mayor) => roll_dice(black_bear, cockroach)\n# Rule6: Regarding the polar bear, if it has something to drink, then we can conclude that it respects the lobster\nrule6() = has(polar_bear, drink) => respect(polar_bear, lobster)\n# Rule7: If the meerkat has a name whose first letter is the same as the first letter of the cheetah's name, then the meerkat gives a magnifier to the spider\nrule7() = first_letter_of(name(meerkat)) == first_letter_of(name(cheetah)) => give_magnifier(meerkat, spider)\n# Rule8: If the meerkat becomes an enemy of the spider, then the spider eats the food that belongs to the black bear\nrule8() = enemy(meerkat, spider) => eat_food(spider, food_of(black_bear))\n# Rule9: For the black bear, if the belief is that the lobster attacks the green fields whose owner is the black bear and the spider eats the food that belongs to the black bear, then you can add \"the black bear gives a magnifier to the eel\" to your conclusions\nrule9() = belief(attack(lobster, green_fields_of(black_bear))) & belief(eat_food(spider, food_of(black_bear))) => give_magnifier(black_bear, eel)\n# Rule10: If at least one animal rolls the dice for the tilapia, then the black bear sings a victory song for the puffin\nrule10() = exists_animal(roll_dice(animal, tilapia)) => sing_song(black_bear, victory_song_for(puffin))\n# Rule11: If something rolls the dice for the cockroach, then it does not sing a victory song for the kudu\nrule11(something) = roll_dice(something, cockroach) => not sing_song(something, victory_song_for(kudu))\n# Rule12: Regarding the meerkat, if it has a leafy green vegetable, then we can conclude that it does not give a magnifying glass to the spider\nrule12() = has(meerkat, leafy_green_vegetable) => not give_magnifying_glass(meerkat, spider)\n# Rule13: Regarding the kudu, if it has a device to connect to the internet, then we can conclude that it rolls the dice for the tilapia\nrule13() = has(kudu, connect_to_internet(device)) => roll_dice(kudu, tilapia)\n# Rule14: If the black bear has something to carry apples and oranges, then the black bear rolls the dice for the cockroach.\nrule14() = has(black_bear, carry_apples_and_oranges) => roll_dice(black_bear, cockroach)\n# Rule1 is preferred over Rule14\norder(rule1) > order(rule14) = True\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule7 is preferred over Rule12\norder(rule7) > order(rule12) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n\n# The current state of the game is as follows\n# The black bear assassinated the mayor\nkilled(black_bear, mayor) = True\n# The black bear has a trumpet\nhas(black_bear, trumpet) = True\n# The cheetah is named Cinnamon\nname(cheetah, Cinnamon) = True\n# The kudu has 1 friend that is wise and 1 friend that is not, and has a computer\nfriends(kudu) = 2\nhas(kudu, computer) = True\n# The meerkat has a violin\nhas(meerkat, violin) = True\n# The meerkat is named Charlie\nname(meerkat, Charlie) = True\n# The polar bear got a well-paid job, has a beer, and has a cello\ngot_job(polar_bear, well_paid) = True\nhas(polar_bear, beer) = True\nhas(polar_bear, cello) = True\n# The grasshopper does not burn the warehouse of the black bear\nnot burn(warehouse_of(black_bear), grasshopper) = True\n\n# Based on the game state and the rules and preferences, does the black bear give a magnifier to the eel?\nquestion = give_magnifier(black_bear, eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something does not steal five points from the parrot but knows the defensive plans of the wolverine because in this case it will, surely, attack the green fields of the hippopotamus (this may or may not be problematic)\nRule2: If the meerkat owns a luxury aircraft, then it does not learn the basics of resource management from the moose\nRule3: If at least one animal steals five points from the puffin, then the snail does not attack the green fields whose owner is the hippopotamus\nRule4: The snail does not steal five points from the parrot whenever at least one animal learns the basics of resource management from the moose\nRule5: If the dog offers a job position to the meerkat and the koala steals five points from the meerkat, then the meerkat learns elementary resource management from the moose\nRule6: If at least one animal holds an equal number of points as the salmon, then it will also roll the dice for the snail\nRule7: The snail knows the defense plan of the wolverine, in the case where the whale rolls the dice for the snail\n\nRule2 is preferred over Rule5\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe dog offers a job to the meerkat\nThe koala steals five points from the meerkat\nThe whale holds the same number of points as the salmon\n\nBased on the game state and the rules and preferences, does the snail attack the green fields whose owner is the hippopotamus?\nQuestion: Does the snail attack the green fields whose owner is the hippopotamus?",
        "idx": 177,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not steal five points from the parrot but knows the defensive plans of the wolverine because in this case it will, surely, attack the green fields of the hippopotamus (this may or may not be problematic)\nrule1(something) = not steal_points(something, 5, parrot) & knows(defensive_plans_of(wolverine), something) => attack_green_fields(something, hippopotamus)\n# Rule2: Regarding the meerkat, if it owns a luxury aircraft, then we can conclude that it does not learn the basics of resource management from the moose\nrule2() = owns(meerkat, luxury_aircraft) => not learn_basics_of_resource_management(meerkat, moose)\n# Rule3: If at least one animal steals five points from the puffin, then the snail does not attack the green fields whose owner is the hippopotamus\nrule3() = steal_points(something, 5, puffin) => not attack_green_fields(snail, hippopotamus)\n# Rule4: The snail does not steal five of the points of the parrot whenever at least one animal learns the basics of resource management from the moose\nrule4() = learn_basics_of_resource_management(something, moose) => not steal_points(snail, 5, parrot)\n# Rule5: For the meerkat, if the belief is that the dog offers a job position to the meerkat and the koala steals five of the points of the meerkat, then you can add \"the meerkat learns elementary resource management from the moose\" to your conclusions\nrule5() = offer_job_position(dog, meerkat) & steal_points(koala, 5, meerkat) => learn_elementary_resource_management(meerkat, moose)\n# Rule6: If you are positive that you saw one of the animals holds an equal number of points as the salmon, you can be certain that it will also roll the dice for the snail\nrule6(something) = points(something) == points(salmon) => roll_dice(something, snail)\n# Rule7: The snail unquestionably knows the defense plan of the wolverine, in the case where the whale rolls the dice for the snail.\nrule7() = roll_dice(whale, snail) => knows(defense_plan_of(wolverine), snail)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The dog offers a job to the meerkat\noffer_job_position(dog, meerkat) = True\n# The koala steals five points from the meerkat\nsteal_points(koala, 5, meerkat) = True\n# The whale holds the same number of points as the salmon\npoints(whale) == points(salmon) = True\n\n# Based on the game state and the rules and preferences, does the snail attack the green fields whose owner is the hippopotamus?\nquestion = attack_green_fields(snail, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal eats the food that belongs to the panda bear, then the tiger sings a song of victory for the grizzly bear\nRule2: If the sun bear does not knock down the fortress of the tiger and the cockroach does not eat the food that belongs to the tiger, then the tiger will never become an actual enemy of the cat\nRule3: If the sun bear has more than two friends, then it does not knock down the fortress of the tiger\nRule4: If the pig has something to drink, then it sings a victory song for the tiger\nRule5: If you saw one of the animals steal five points from the zander, then it will also knock down the fortress of the tiger\nRule6: If the pig sings a victory song for the tiger, then the tiger respects the eel\nRule7: If the sun bear has a card with a primary color, then it does not knock down the fortress of the tiger\nRule8: If at least one animal burns the warehouse of the moose, then the tiger becomes an actual enemy of the cat\nRule9: If the pig has fewer than nine friends, then it sings a victory song for the tiger\nRule10: If something does not become an actual enemy of the cat but respects the eel, then it does not sing a victory song for the grizzly bear\nRule11: If at least one animal becomes an enemy of the goldfish, then the cockroach does not eat the food of the tiger\n\nRule1 is preferred over Rule10\nRule5 is preferred over Rule3\nRule5 is preferred over Rule7\nRule8 is preferred over Rule2\n\nThe current state of the game is as follows\nThe pig has 11 friends\nThe pig has a beer\nThe sun bear has 1 kind friend and 5 not kind friends\nThe sun bear has a card that is indigo in color\nThe whale becomes an enemy of the goldfish\n\nBased on the game state and the rules and preferences, does the tiger sing a victory song for the grizzly bear?\nQuestion: Does the tiger sing a victory song for the grizzly bear?",
        "idx": 178,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal eats the food that belongs to the panda bear, then the tiger sings a song of victory for the grizzly bear\nrule1() = eats_food(something, food_of(panda_bear)) => sing_song(tiger, victory_song_for(grizzly_bear))\n# Rule2: If the sun bear does not knock down the fortress of the tiger and the cockroach does not eat the food that belongs to the tiger, then the tiger will never become an actual enemy of the cat\nrule2() = not knock_down(sun_bear, fortress_of(tiger)) & not eats_food(cockroach, food_of(tiger)) => never_become_enemy(tiger, cat)\n# Rule3: Regarding the sun bear, if it has more than two friends, then we can conclude that it does not knock down the fortress of the tiger\nrule3() = friends(sun_bear) > 2 => not knock_down(sun_bear, fortress_of(tiger))\n# Rule4: Regarding the pig, if it has something to drink, then we can conclude that it sings a victory song for the tiger\nrule4() = has(pig, drink) => sing_song(pig, victory_song_for(tiger))\n# Rule5: If you are positive that you saw one of the animals steals five of the points of the zander, you can be certain that it will also knock down the fortress of the tiger\nrule5() = steals_points(something, 5, zander) => knock_down(something, fortress_of(tiger))\n# Rule6: The tiger unquestionably respects the eel, in the case where the pig sings a song of victory for the tiger\nrule6() = sing_song(pig, victory_song_for(tiger)) => respects(tiger, eel)\n# Rule7: If the sun bear has a card with a primary color, then the sun bear does not knock down the fortress of the tiger\nrule7() = has(sun_bear, card_with(primary_color)) => not knock_down(sun_bear, fortress_of(tiger))\n# Rule8: The tiger becomes an actual enemy of the cat whenever at least one animal burns the warehouse of the moose\nrule8() = burn(warehouse_of(moose), something) => become_enemy(tiger, cat)\n# Rule9: If the pig has fewer than nine friends, then the pig sings a song of victory for the tiger\nrule9() = friends(pig) < 9 => sing_song(pig, victory_song_for(tiger))\n# Rule10: Be careful when something does not become an actual enemy of the cat but respects the eel because in this case it certainly does not sing a song of victory for the grizzly bear (this may or may not be problematic)\nrule10(something) = not become_enemy(something, cat) & respects(something, eel) => not sing_song(something, victory_song_for(grizzly_bear))\n# Rule11: If at least one animal becomes an enemy of the goldfish, then the cockroach does not eat the food of the tiger.\nrule11() = become_enemy(something, goldfish) => not eats_food(cockroach, food_of(tiger))\n# Rule1 is preferred over Rule10\norder(rule1) > order(rule10) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule5 is preferred over Rule7\norder(rule5) > order(rule7) = True\n# Rule8 is preferred over Rule2\norder(rule8) > order(rule2) = True\n\n# The current state of the game is as follows\n# The pig has 11 friends\nfriends(pig) = 11\n# The pig has a beer\nhas(pig, beer) = True\n# The sun bear has 1 friend that is kind and five friends that are not\nfriends(sun_bear, kind) = 1\nfriends(sun_bear, not_kind) = 5\n# The sun bear has a card that is indigo in color\nhas(sun_bear, card_with(indigo_color)) = True\n# The whale becomes an enemy of the goldfish\nbecome_enemy(whale, goldfish) = True\n\n# Based on the game state and the rules and preferences, does the tiger sing a victory song for the grizzly bear?\nquestion = sing_song(tiger, victory_song_for(grizzly_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the crocodile steals five points from the amberjack and the grasshopper proceeds to the spot right after the spot of the amberjack, then the amberjack removes one of the pieces of the swordfish\nRule2: If the crocodile has fewer than 9 friends, then it steals five points from the amberjack\nRule3: If the grasshopper has fewer than four friends, then it proceeds to the spot right after the spot of the amberjack\nRule4: If the gecko does not wink at the crocodile, then the crocodile does not steal five points from the amberjack\nRule5: If at least one animal removes one of the pieces of the swordfish, then the sea bass burns the warehouse of the snail\nRule6: If the crocodile has a name whose first letter is the same as the first letter of the kangaroo's name, then the crocodile steals five points from the amberjack\n\nRule2 is preferred over Rule4\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe crocodile has 10 friends\nThe crocodile is named Milo\nThe grasshopper has 12 friends and does not steal five points from the hippopotamus\nThe grasshopper knows the defensive plans of the sheep\nThe kangaroo is named Meadow\n\nBased on the game state and the rules and preferences, does the sea bass burn the warehouse of the snail?\nQuestion: Does the sea bass burn the warehouse of the snail?",
        "idx": 179,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the crocodile steals five of the points of the amberjack and the grasshopper proceeds to the spot that is right after the spot of the amberjack, then the amberjack removes one of the pieces of the swordfish\nrule1() = steal_points(crocodile, 5, amberjack) & proceed(grasshopper, spot_right_after(spot_of(amberjack))) => remove(amberjack, piece_of(swordfish))\n# Rule2: Regarding the crocodile, if it has fewer than 9 friends, then we can conclude that it steals five points from the amberjack\nrule2() = friends(crocodile) < 9 => steal_points(crocodile, 5, amberjack)\n# Rule3: If the grasshopper has fewer than four friends, then the grasshopper proceeds to the spot that is right after the spot of the amberjack\nrule3() = friends(grasshopper) < 4 => proceed(grasshopper, spot_right_after(spot_of(amberjack)))\n# Rule4: If the gecko does not wink at the crocodile, then the crocodile does not steal five of the points of the amberjack\nrule4() = not wink(gecko, crocodile) => not steal_points(crocodile, 5, amberjack)\n# Rule5: If at least one animal removes from the board one of the pieces of the swordfish, then the sea bass burns the warehouse that is in possession of the snail\nrule5(something) = remove(something, piece_of(swordfish)) => burn(warehouse_of(snail))\n# Rule6: If the crocodile has a name whose first letter is the same as the first letter of the kangaroo's name, then the crocodile steals five of the points of the amberjack.\nrule6() = first_letter_of(name(crocodile)) == first_letter_of(name(kangaroo)) => steal_points(crocodile, 5, amberjack)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The crocodile has 10 friends\nfriends(crocodile) = 10\n# The crocodile is named Milo\nname(crocodile, Milo) = True\n# The grasshopper has 12 friends, and does not steal five points from the hippopotamus\nfriends(grasshopper) = 12\nnot steal_points(grasshopper, 5, hippopotamus) = True\n# The grasshopper knows the defensive plans of the sheep\nknows(defensive_plans_of(sheep), grasshopper) = True\n# The kangaroo is named Meadow\nname(kangaroo, Meadow) = True\n\n# Based on the game state and the rules and preferences, does the sea bass burn the warehouse of the snail?\nquestion = burn(warehouse_of(snail))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals owes money to the tilapia, you can be certain that it will not knock down the fortress of the lobster\nRule2: If the spider sings a victory song for the mosquito, then the mosquito sings a victory song for the eel\nRule3: If the caterpillar has something to carry apples and oranges, then it owes money to the tilapia\nRule4: If the mosquito sings a victory song for the eel, then the eel respects the lobster\nRule5: If the caterpillar has a name whose first letter is the same as the first letter of the salmon's name, then it owes money to the tilapia\nRule6: If the caterpillar has something to sit on, then it does not owe money to the tilapia\nRule7: If the eel respects the lobster and the caterpillar does not knock down the fortress of the lobster, then the lobster steals five points from the halibut\n\nRule6 is preferred over Rule3\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe caterpillar has a knapsack\nThe caterpillar is named Beauty\nThe salmon is named Paco\nThe spider sings a victory song for the mosquito\n\nBased on the game state and the rules and preferences, does the lobster steal five points from the halibut?\nQuestion: Does the lobster steal five points from the halibut?",
        "idx": 180,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals owes money to the tilapia, you can be certain that it will not knock down the fortress of the lobster\nrule1() = owes_money_to(something, tilapia) => not knock_down(something, fortress_of(lobster))\n# Rule2: If the spider sings a victory song for the mosquito, then the mosquito sings a victory song for the eel\nrule2() = sing_song(spider, victory_song_for(mosquito)) => sing_song(mosquito, victory_song_for(eel))\n# Rule3: Regarding the caterpillar, if it has something to carry apples and oranges, then we can conclude that it owes $$$ to the tilapia\nrule3() = has(caterpillar, carry_apples_and_oranges) => owes_money_to(caterpillar, tilapia)\n# Rule4: The eel unquestionably respects the lobster, in the case where the mosquito sings a victory song for the eel\nrule4() = sing_song(mosquito, victory_song_for(eel)) => respects(eel, lobster)\n# Rule5: Regarding the caterpillar, if it has a name whose first letter is the same as the first letter of the salmon's name, then we can conclude that it owes money to the tilapia\nrule5() = first_letter_of(name(caterpillar)) == first_letter_of(name(salmon)) => owes_money_to(caterpillar, tilapia)\n# Rule6: If the caterpillar has something to sit on, then the caterpillar does not owe $$$ to the tilapia\nrule6() = has(caterpillar, sit_on_something) => not owes_money_to(caterpillar, tilapia)\n# Rule7: If the eel respects the lobster and the caterpillar does not knock down the fortress of the lobster, then, inevitably, the lobster steals five of the points of the halibut.\nrule7() = respects(eel, lobster) & not knock_down(caterpillar, fortress_of(lobster)) => steal_points(lobster, 5, halibut)\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The caterpillar has a knapsack\nhas(caterpillar, knapsack) = True\n# The caterpillar is named Beauty\nname(caterpillar, Beauty) = True\n# The salmon is named Paco\nname(salmon, Paco) = True\n# The spider sings a victory song for the mosquito\nsing_song(spider, victory_song_for(mosquito)) = True\n\n# Based on the game state and the rules and preferences, does the lobster steal five points from the halibut?\nquestion = steal_points(lobster, 5, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The swordfish burns the warehouse that is in possession of the halibut whenever at least one animal gives a magnifier to the parrot\nRule2: The sun bear attacks the green fields of the amberjack if the eagle shows her cards to the sun bear\nRule3: The sun bear does not offer a job to the swordfish if the elephant gives a magnifier to the sun bear\nRule4: If the sun bear has a name whose first letter is the same as the first letter of the cheetah's name, then the sun bear does not attack the green fields of the amberjack\nRule5: If the doctorfish has a name whose first letter is the same as the first letter of the catfish's name, then the doctorfish becomes an enemy of the wolverine\nRule6: The wolverine removes one of the pieces of the swordfish if at least one animal knocks down the fortress of the parrot\nRule7: If the sun bear does not offer a job to the swordfish and the wolverine does not remove one of the pieces of the swordfish, then the swordfish does not burn the warehouse of the halibut\nRule8: If the pig proceeds to the spot right after the doctorfish, then the doctorfish does not become an enemy of the wolverine\nRule9: If an animal proceeds to the spot right after the dog, then it gives a magnifier to the sun bear\nRule10: The wolverine does not remove one of the pieces of the swordfish if the doctorfish becomes an enemy of the wolverine\nRule11: If at least one animal offers a job position to the viperfish, then the sun bear winks at the eel\nRule12: If the sun bear has something to carry apples and oranges, then the sun bear does not attack the green fields of the amberjack\n\nRule1 is preferred over Rule7\nRule2 is preferred over Rule12\nRule2 is preferred over Rule4\nRule6 is preferred over Rule10\nRule8 is preferred over Rule5\n\nThe current state of the game is as follows\nThe catfish is named Luna\nThe cheetah is named Pablo\nThe doctorfish is named Lucy\nThe elephant proceeds to the spot right after the dog\nThe goldfish offers a job position to the viperfish\nThe sun bear has some spinach\nThe sun bear is named Pashmak\n\nBased on the game state and the rules and preferences, does the swordfish burn the warehouse of the halibut?\nQuestion: Does the swordfish burn the warehouse of the halibut?",
        "idx": 181,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The swordfish burns the warehouse that is in possession of the halibut whenever at least one animal gives a magnifier to the parrot\nrule1() = give_magnifier(animal, parrot) => burn(warehouse_of(halibut))\n# Rule2: The sun bear unquestionably attacks the green fields of the amberjack, in the case where the eagle shows her cards (all of them) to the sun bear\nrule2() = show_cards(eagle, sun_bear) => attack(green_fields_of(amberjack), sun_bear)\n# Rule3: The sun bear does not offer a job to the swordfish, in the case where the elephant gives a magnifier to the sun bear\nrule3() = give_magnifier(elephant, sun_bear) => not offer_job(sun_bear, swordfish)\n# Rule4: If the sun bear has a name whose first letter is the same as the first letter of the cheetah's name, then the sun bear does not attack the green fields whose owner is the amberjack\nrule4() = first_letter_of(name(sun_bear)) == first_letter_of(name(cheetah)) => not attack(green_fields_of(amberjack), sun_bear)\n# Rule5: If the doctorfish has a name whose first letter is the same as the first letter of the catfish's name, then the doctorfish becomes an enemy of the wolverine\nrule5() = first_letter_of(name(doctorfish)) == first_letter_of(name(catfish)) => enemy(doctorfish, wolverine)\n# Rule6: The wolverine removes from the board one of the pieces of the swordfish whenever at least one animal knocks down the fortress that belongs to the parrot\nrule6() = knock_down(fortress_of(parrot), animal) => remove(swordfish, piece_of(swordfish))\n# Rule7: For the swordfish, if the belief is that the sun bear does not offer a job to the swordfish and the wolverine does not remove from the board one of the pieces of the swordfish, then you can add \"the swordfish does not burn the warehouse that is in possession of the halibut\" to your conclusions\nrule7() = not offer_job(sun_bear, swordfish) & not remove(wolverine, piece_of(swordfish)) => not burn(warehouse_of(halibut))\n# Rule8: If the pig proceeds to the spot right after the doctorfish, then the doctorfish is not going to become an enemy of the wolverine\nrule8() = proceed(pig, spot_right_after(spot_of(doctorfish))) => not enemy(doctorfish, wolverine)\n# Rule9: If you are positive that you saw one of the animals proceeds to the spot right after the dog, you can be certain that it will also give a magnifier to the sun bear\nrule9() = proceed(animal, spot_right_after(spot_of(dog))) => give_magnifier(animal, sun_bear)\n# Rule10: The wolverine does not remove one of the pieces of the swordfish, in the case where the doctorfish becomes an enemy of the wolverine\nrule10() = enemy(doctorfish, wolverine) => not remove(wolverine, piece_of(swordfish))\n# Rule11: If at least one animal offers a job position to the viperfish, then the sun bear winks at the eel\nrule11() = offer_job_position(animal, viperfish) => wink(sun_bear, eel)\n# Rule12: If the sun bear has something to carry apples and oranges, then the sun bear does not attack the green fields of the amberjack.\nrule12() = has(sun_bear, carry_apples_and_oranges) => not attack(green_fields_of(amberjack), sun_bear)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule2 is preferred over Rule12\norder(rule2) > order(rule12) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule6 is preferred over Rule10\norder(rule6) > order(rule10) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n\n# The current state of the game is as follows\n# The catfish is named Luna\nname(catfish, Luna) = True\n# The cheetah is named Pablo\nname(cheetah, Pablo) = True\n# The doctorfish is named Lucy\nname(doctorfish, Lucy) = True\n# The elephant proceeds to the spot right after the dog\nproceed(elephant, spot_right_after(spot_of(dog))) = True\n# The goldfish offers a job to the viperfish\noffer_job_position(goldfish, viperfish) = True\n# The sun bear has some spinach\nhas(sun_bear, spinach) = True\n# The sun bear is named Pashmak\nname(sun_bear, Pashmak) = True\n\n# Based on the game state and the rules and preferences, does the swordfish burn the warehouse of the halibut?\nquestion = burn(warehouse_of(halibut))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The polar bear learns elementary resource management from the sun bear, in the case where the sea bass knows the defense plan of the polar bear\nRule2: If the polar bear learns the basics of resource management from the sun bear and the cricket removes one of the pieces of the sun bear, then the sun bear removes from the board one of the pieces of the puffin\nRule3: The sun bear prepares armor for the crocodile whenever at least one animal raises a peace flag for the moose\nRule4: If something owes money to the parrot, then it removes from the board one of the pieces of the sun bear, too\nRule5: If the salmon has difficulty finding food, then it raises a peace flag for the moose\nRule6: If the cricket has a name whose first letter is the same as the first letter of the cow's name, then it sings a song of victory for the bat\nRule7: If the salmon has a card whose color starts with the letter \"n\", then it raises a peace flag for the moose\nRule8: If at least one animal sings a song of victory for the squid, then the sea bass proceeds to the spot right after the polar bear\nRule9: If you are positive that you saw one of the animals gives a magnifier to the cheetah, you can be certain that it will not proceed to the spot that is right after the spot of the polar bear\nRule10: If the oscar does not know the defense plan of the lobster, then the lobster burns the warehouse of the tiger\nRule11: If something prepares armor for the grizzly bear and prepares armor for the crocodile, then it does not remove one of the pieces of the puffin\nRule12: If at least one animal gives a magnifying glass to the blobfish, then the cricket owes money to the parrot\nRule13: If the cricket has fewer than 1 friend, then the cricket sings a victory song for the bat\n\nRule2 is preferred over Rule11\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe buffalo gives a magnifier to the blobfish\nThe cow is named Charlie\nThe cricket has a card that is blue in color and is named Chickpea\nThe cricket has one adventurous friend and 3 non-adventurous friends\nThe lobster dreamed of a luxury aircraft and sings a victory song for the squid\nThe lobster is named Peddi\nThe oscar knows the defensive plans of the lobster\nThe salmon has a card that is indigo in color and struggles to find food\nThe spider rolls the dice for the phoenix\nThe turtle is named Pablo\n\nBased on the game state and the rules and preferences, does the sun bear remove from the board one of the pieces of the puffin?\nQuestion: Does the sun bear remove from the board one of the pieces of the puffin?",
        "idx": 182,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The polar bear unquestionably learns elementary resource management from the sun bear, in the case where the sea bass knows the defense plan of the polar bear\nrule1() = knows(defense_plan_of(polar_bear), sea_bass) => learn_elementary_resource_management(polar_bear, sun_bear)\n# Rule2: If the polar bear learns the basics of resource management from the sun bear and the cricket removes one of the pieces of the sun bear, then the sun bear removes from the board one of the pieces of the puffin\nrule2() = learn_basics_of_resource_management(polar_bear, sun_bear) & remove(cricket, piece_of(sun_bear)) => remove(sun_bear, piece_of(puffin))\n# Rule3: The sun bear prepares armor for the crocodile whenever at least one animal raises a peace flag for the moose\nrule3() = raise_flag_of_peace(something, moose) => prepare_armor(sun_bear, crocodile)\n# Rule4: If something owes $$$ to the parrot, then it removes from the board one of the pieces of the sun bear, too\nrule4() = owes_money_to(something, parrot) => remove(something, piece_of(sun_bear))\n# Rule5: Regarding the salmon, if it has difficulty to find food, then we can conclude that it raises a peace flag for the moose\nrule5() = has_difficulty_finding_food(salmon) => raise_flag_of_peace(salmon, moose)\n# Rule6: Regarding the cricket, if it has a name whose first letter is the same as the first letter of the cow's name, then we can conclude that it sings a song of victory for the bat\nrule6() = first_letter_of(name(cricket)) == first_letter_of(name(cow)) => sing_song(cricket, victory_song_for(bat))\n# Rule7: Regarding the salmon, if it has a card whose color starts with the letter \"n\", then we can conclude that it raises a peace flag for the moose\nrule7() = has(salmon, card_with(color_starting_with(\"n\"))) => raise_flag_of_peace(salmon, moose)\n# Rule8: If at least one animal sings a song of victory for the squid, then the sea bass proceeds to the spot right after the polar bear\nrule8() = sing_song(something, victory_song_for(squid)) => proceed(sea_bass, spot_right_after(spot_of(polar_bear)))\n# Rule9: If you are positive that you saw one of the animals gives a magnifier to the cheetah, you can be certain that it will not proceed to the spot that is right after the spot of the polar bear\nrule9(something) = gives_magnifier(something, cheetah) => not proceed(something, spot_right_after(spot_of(polar_bear)))\n# Rule10: If the oscar does not know the defense plan of the lobster, then the lobster burns the warehouse of the tiger\nrule10() = not knows(defense_plan_of(lobster), oscar) => burn(warehouse_of(tiger), lobster)\n# Rule11: If you see that something prepares armor for the grizzly bear and prepares armor for the crocodile, what can you certainly conclude? You can conclude that it does not remove one of the pieces of the puffin\nrule11() = prepare_armor(something, grizzly_bear) & prepare_armor(something, crocodile) => not remove(something, piece_of(puffin))\n# Rule12: If at least one animal gives a magnifying glass to the blobfish, then the cricket owes money to the parrot\nrule12(something) = gives_magnifying_glass(something, blobfish) => owes_money_to(cricket, parrot)\n# Rule13: If the cricket has fewer than 1 friend, then the cricket sings a victory song for the bat.\nrule13() = friends(cricket) < 1 => sing_song(cricket, victory_song_for(bat))\n# Rule2 is preferred over Rule11\norder(rule2) > order(rule11) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The buffalo gives a magnifier to the blobfish\ngives_magnifier(buffalo, blobfish) = True\n# The cow is named Charlie\nname(cow, Charlie) = True\n# The cricket has a card that is blue in color, and is named Chickpea\nhas(cricket, card_with(blue_color)) = True\nname(cricket, Chickpea) = True\n# The cricket has one friend that is adventurous and 3 friends that are not\nfriends(cricket) = 4\n# The lobster dreamed of a luxury aircraft, and sings a victory song for the squid\ndreams(lobster, luxury_aircraft) = True\nsing_song(lobster, victory_song_for(squid)) = True\n# The lobster is named Peddi\nname(lobster, Peddi) = True\n# The oscar knows the defensive plans of the lobster\nknows(defense_plan_of(lobster), oscar) = True\n# The salmon has a card that is indigo in color\nhas(salmon, card_with(indigo_color)) = True\n# The salmon struggles to find food\nhas_difficulty_finding_food(salmon) = True\n# The spider rolls the dice for the phoenix\nrolls_dice(spider, phoenix) = True\n# The turtle is named Pablo\nname(turtle, Pablo) = True\n\n# Based on the game state and the rules and preferences, does the sun bear remove from the board one of the pieces of the puffin?\nquestion = remove(sun_bear, piece_of(puffin))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the aardvark needs support from the moose and the cow offers a job to the moose, then the moose will not burn the warehouse that is in possession of the halibut\nRule2: If the moose has a musical instrument, then the moose steals five points from the wolverine\nRule3: If at least one animal holds the same number of points as the buffalo, then the sheep learns elementary resource management from the squirrel\nRule4: If the moose created a time machine, then the moose does not steal five points from the wolverine\nRule5: If the moose has a card whose color starts with the letter \"b\", then the moose steals five points from the wolverine\nRule6: If something becomes an enemy of the leopard, then it burns the warehouse of the halibut, too\nRule7: If something does not steal five points from the wolverine but burns the warehouse of the halibut, then it holds an equal number of points as the buffalo\n\nRule1 is preferred over Rule6\nRule2 is preferred over Rule4\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe aardvark needs support from the moose\nThe moose becomes an enemy of the leopard\nThe moose has a knapsack\nThe moose invented a time machine\n\nBased on the game state and the rules and preferences, does the sheep learn elementary resource management from the squirrel?\nQuestion: Does the sheep learn elementary resource management from the squirrel?",
        "idx": 183,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the aardvark needs support from the moose and the cow offers a job to the moose, then the moose will not burn the warehouse that is in possession of the halibut\nrule1() = needs_support(aardvark, moose) & offer_job(cow, moose) => not burn(warehouse_of(halibut), moose)\n# Rule2: If the moose has a musical instrument, then the moose steals five points from the wolverine\nrule2() = has(moose, musical_instrument) => steal_points(moose, 5, wolverine)\n# Rule3: If at least one animal holds the same number of points as the buffalo, then the sheep learns elementary resource management from the squirrel\nrule3(something) = points(something) == points(buffalo) => learn_elementary_resource_management(sheep, squirrel)\n# Rule4: If the moose created a time machine, then the moose does not steal five points from the wolverine\nrule4() = created_time_machine(moose) => not steal_points(moose, 5, wolverine)\n# Rule5: Regarding the moose, if it has a card whose color starts with the letter \"b\", then we can conclude that it steals five points from the wolverine\nrule5() = has(moose, card_with(color_starting_with(\"b\"))) => steal_points(moose, 5, wolverine)\n# Rule6: If something becomes an enemy of the leopard, then it burns the warehouse of the halibut, too\nrule6(something) = enemy(something, leopard) => burn(warehouse_of(halibut), something)\n# Rule7: Be careful when something does not steal five points from the wolverine but burns the warehouse of the halibut because in this case it will, surely, hold an equal number of points as the buffalo (this may or may not be problematic).\nrule7(something) = not steal_points(something, 5, wolverine) & burn(warehouse_of(halibut), something) => points(something) == points(buffalo)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The aardvark needs support from the moose\nneeds_support(aardvark, moose) = True\n# The moose becomes an enemy of the leopard\nenemy(moose, leopard) = True\n# The moose has a knapsack, and invented a time machine\nhas(moose, knapsack) = True\ninvented_time_machine(moose) = True\n\n# Based on the game state and the rules and preferences, does the sheep learn the basics of resource management from the squirrel?\nquestion = learn_elementary_resource_management(sheep, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the swordfish has a card whose color starts with the letter \"i\", then it does not know the defensive plans of the cat\nRule2: If the crocodile does not wink at the swordfish, then the swordfish unquestionably attacks the green fields whose owner is the tilapia\nRule3: If the swordfish has something to drink, then it knows the defensive plans of the cat\nRule4: If at least one animal burns the warehouse that is in possession of the cockroach, then the baboon does not become an enemy of the lobster\nRule5: If the starfish gives a magnifying glass to the hare and the caterpillar does not show all her cards to the hare, then the hare inevitably burns the warehouse that is in possession of the cockroach\nRule6: If the starfish has something to sit on, then it gives a magnifier to the hare\nRule7: If the caterpillar has something to sit on, then it does not show all her cards to the hare\nRule8: If at least one animal eats the food that belongs to the penguin, then the swordfish does not become an actual enemy of the baboon\nRule9: If the swordfish has fewer than 3 friends, then it knows the defense plan of the cat\nRule10: If the caterpillar has fewer than twelve friends, then it does not show all her cards to the hare\nRule11: If the caterpillar has a card whose color starts with the letter \"y\", then it shows all her cards to the hare\nRule12: If something does not know the defensive plans of the cat but it attacks the green fields whose owner is the tilapia, then it also becomes an actual enemy of the baboon\n\nRule10 is preferred over Rule11\nRule3 is preferred over Rule1\nRule7 is preferred over Rule11\nRule8 is preferred over Rule12\nRule9 is preferred over Rule1\n\nThe current state of the game is as follows\nThe caterpillar has a card that is yellow in color\nThe caterpillar has a club chair\nThe caterpillar has ten friends\nThe caterpillar has a cello\nThe starfish has a bench\nThe swordfish has 4 friends that are easy going and one friend that is not\nThe swordfish has a card that is indigo in color\nThe crocodile does not wink at the swordfish\n\nBased on the game state and the rules and preferences, does the baboon become an enemy of the lobster?\nQuestion: Does the baboon become an enemy of the lobster?",
        "idx": 184,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the swordfish, if it has a card whose color starts with the letter \"i\", then we can conclude that it does not know the defensive plans of the cat\nrule1() = starts_with(color(card(swordfish)), \"i\") => not knows_defensive_plans(swordfish, cat)\n# Rule2: The swordfish unquestionably attacks the green fields whose owner is the tilapia, in the case where the crocodile does not wink at the swordfish\nrule2() = not wink(crocodile, swordfish) => attack(swordfish, green_fields_of(tilapia))\n# Rule3: If the swordfish has something to drink, then the swordfish knows the defensive plans of the cat\nrule3() = has(swordfish, drink) => knows_defensive_plans(swordfish, cat)\n# Rule4: If at least one animal burns the warehouse that is in possession of the cockroach, then the baboon does not become an enemy of the lobster\nrule4(something) = burn(warehouse_of(cockroach), something) => not enemy(baboon, lobster)\n# Rule5: If the starfish gives a magnifying glass to the hare and the caterpillar does not show all her cards to the hare, then, inevitably, the hare burns the warehouse that is in possession of the cockroach\nrule5() = give(starfish, magnifying_glass, hare) & not show_all_cards(caterpillar, hare) => burn(warehouse_of(cockroach), hare)\n# Rule6: Regarding the starfish, if it has something to sit on, then we can conclude that it gives a magnifier to the hare\nrule6() = has(starfish, sit_on) => give(starfish, magnifying_glass, hare)\n# Rule7: Regarding the caterpillar, if it has something to sit on, then we can conclude that it does not show her cards (all of them) to the hare\nrule7() = has(caterpillar, sit_on) => not show_all_cards(caterpillar, hare)\n# Rule8: If at least one animal eats the food that belongs to the penguin, then the swordfish does not become an actual enemy of the baboon\nrule8(something) = eat(something, food_of(penguin)) => not actual_enemy(swordfish, baboon)\n# Rule9: Regarding the swordfish, if it has fewer than 3 friends, then we can conclude that it knows the defense plan of the cat\nrule9() = friends(swordfish) < 3 => knows_defense_plan(swordfish, cat)\n# Rule10: Regarding the caterpillar, if it has fewer than twelve friends, then we can conclude that it does not show her cards (all of them) to the hare\nrule10() = friends(caterpillar) < 12 => not show_all_cards(caterpillar, hare)\n# Rule11: If the caterpillar has a card whose color starts with the letter \"y\", then the caterpillar shows all her cards to the hare\nrule11() = starts_with(color(card(caterpillar)), \"y\") => show_all_cards(caterpillar, hare)\n# Rule12: If you see that something does not know the defensive plans of the cat but it attacks the green fields whose owner is the tilapia, what can you certainly conclude? You can conclude that it also becomes an actual enemy of the baboon.\nrule12(something) = not knows_defensive_plans(something, cat) & attack(something, green_fields_of(tilapia)) => actual_enemy(something, baboon)\n# Rule10 is preferred over Rule11\norder(rule10) > order(rule11) = True\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule7 is preferred over Rule11\norder(rule7) > order(rule11) = True\n# Rule8 is preferred over Rule12\norder(rule8) > order(rule12) = True\n# Rule9 is preferred over Rule1\norder(rule9) > order(rule1) = True\n\n# The current state of the game is as follows\n# The caterpillar has a card that is yellow in color, has a club chair, and has ten friends\nhas(caterpillar, card_with(yellow_color)) = True\nhas(caterpillar, club_chair) = True\nfriends(caterpillar) = 10\n# The caterpillar has a cello\nhas(caterpillar, cello) = True\n# The starfish has a bench\nhas(starfish, bench) = True\n# The swordfish has 4 friends that are easy going and one friend that is not, and has a card that is indigo in color\nfriends(swordfish, easy_going) = 4\nfriends(swordfish, not_easy_going) = 1\nhas(swordfish, card_with(indigo_color)) = True\n# The crocodile does not wink at the swordfish\nnot wink(crocodile, swordfish) = True\n\n# Based on the game state and the rules and preferences, does the baboon become an enemy of the lobster?\nquestion = enemy(baboon, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo has a card with a primary color, then it does not owe money to the polar bear\nRule2: If the viperfish has a card whose color is one of the rainbow colors, then the viperfish respects the kangaroo\nRule3: If something does not hold the same number of points as the moose but respects the kangaroo, then it does not raise a peace flag for the wolverine\nRule4: If the viperfish does not raise a peace flag for the wolverine but the polar bear learns elementary resource management from the wolverine, then the wolverine proceeds to the spot right after the panther\nRule5: If the viperfish has a name whose first letter is the same as the first letter of the canary's name, then it does not hold the same number of points as the moose\nRule6: If the buffalo does not owe money to the polar bear, then the polar bear learns the basics of resource management from the wolverine\nRule7: If the buffalo has a name whose first letter is the same as the first letter of the tilapia's name, then it does not owe money to the polar bear\nRule8: If the buffalo has a sharp object, then it owes money to the polar bear\nRule9: If at least one animal becomes an enemy of the gecko, then the viperfish does not respect the kangaroo\n\nRule8 is preferred over Rule1\nRule8 is preferred over Rule7\nRule9 is preferred over Rule2\n\nThe current state of the game is as follows\nThe buffalo has a card that is orange in color\nThe buffalo has a cutter\nThe buffalo is named Cinnamon\nThe buffalo has a guitar\nThe canary is named Lily\nThe tilapia is named Chickpea\nThe viperfish has a card that is blue in color\nThe viperfish is named Lola\n\nBased on the game state and the rules and preferences, does the wolverine proceed to the spot right after the panther?\nQuestion: Does the wolverine proceed to the spot right after the panther?",
        "idx": 185,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the buffalo, if it has a card with a primary color, then we can conclude that it does not owe $$$ to the polar bear\nrule1() = has(buffalo, card_with(primary_color)) => not owes_money_to(buffalo, polar_bear)\n# Rule2: If the viperfish has a card whose color is one of the rainbow colors, then the viperfish respects the kangaroo\nrule2() = has(viperfish, card_with(color_in(rainbow_colors))) => respects(viperfish, kangaroo)\n# Rule3: If you see that something does not hold the same number of points as the moose but it respects the kangaroo, what can you certainly conclude? You can conclude that it is not going to raise a peace flag for the wolverine\nrule3(something) = not holds_same_number_of_points_as(something, moose) & respects(something, kangaroo) => not raise_flag_of_peace(something, wolverine)\n# Rule4: If the viperfish does not raise a peace flag for the wolverine but the polar bear learns elementary resource management from the wolverine, then the wolverine proceeds to the spot right after the panther unavoidably\nrule4() = not raise_flag_of_peace(viperfish, wolverine) & learn_elementary_resource_management(polar_bear, wolverine) => proceed(wolverine, spot_right_after(spot_of(panther)))\n# Rule5: Regarding the viperfish, if it has a name whose first letter is the same as the first letter of the canary's name, then we can conclude that it does not hold the same number of points as the moose\nrule5() = first_letter_of(name(viperfish)) == first_letter_of(name(canary)) => not holds_same_number_of_points_as(viperfish, moose)\n# Rule6: If the buffalo does not owe money to the polar bear, then the polar bear learns the basics of resource management from the wolverine\nrule6() = not owes_money_to(buffalo, polar_bear) => learn_basics_of_resource_management(polar_bear, wolverine)\n# Rule7: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the tilapia's name, then we can conclude that it does not owe $$$ to the polar bear\nrule7() = first_letter_of(name(buffalo)) == first_letter_of(name(tilapia)) => not owes_money_to(buffalo, polar_bear)\n# Rule8: Regarding the buffalo, if it has a sharp object, then we can conclude that it owes money to the polar bear\nrule8() = has(buffalo, sharp_object) => owes_money_to(buffalo, polar_bear)\n# Rule9: If at least one animal becomes an enemy of the gecko, then the viperfish does not respect the kangaroo.\nrule9() = becomes_enemy_of(something, gecko) => not respects(viperfish, kangaroo)\n# Rule8 is preferred over Rule1\norder(rule8) > order(rule1) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n# Rule9 is preferred over Rule2\norder(rule9) > order(rule2) = True\n\n# The current state of the game is as follows\n# The buffalo has a card that is orange in color, has a cutter, and is named Cinnamon\nhas(buffalo, card_with(orange_color)) = True\nhas(buffalo, cutter) = True\nname(buffalo, Cinnamon) = True\n# The buffalo has a guitar\nhas(buffalo, guitar) = True\n# The canary is named Lily\nname(canary, Lily) = True\n# The tilapia is named Chickpea\nname(tilapia, Chickpea) = True\n# The viperfish has a card that is blue in color, and is named Lola\nhas(viperfish, card_with(blue_color)) = True\nname(viperfish, Lola) = True\n\n# Based on the game state and the rules and preferences, does the wolverine proceed to the spot right after the panther?\nquestion = proceed(wolverine, spot_right_after(spot_of(panther)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the phoenix has a card whose color starts with the letter \"g\", then it does not offer a job to the kudu\nRule2: If at least one animal attacks the green fields of the aardvark, then the kudu gives a magnifying glass to the sheep\nRule3: If something does not prepare armor for the jellyfish but respects the dog, then it does not give a magnifying glass to the sheep\nRule4: If something needs the support of the panther, then it respects the dog\nRule5: If the kudu has a card with a primary color, then it does not need support from the panther\nRule6: If the kudu has a name whose first letter is the same as the first letter of the kiwi's name, then it does not need support from the panther\nRule7: If the kangaroo is a fan of Chris Ronaldo, then it sings a victory song for the whale\nRule8: If the kangaroo has a card whose color appears in the flag of Japan, then it sings a victory song for the whale\nRule9: If the phoenix does not offer a job position to the kudu and the koala does not learn the basics of resource management from the kudu, then the kudu does not respect the dog\nRule10: If one of the animals sings a victory song for the whale, then it also attacks the green fields of the aardvark\nRule11: If the leopard winks at the kudu, then the kudu needs the support of the panther\nRule12: If the catfish eats the food of the kangaroo, then the kangaroo does not attack the green fields of the aardvark\n\nRule12 is preferred over Rule10\nRule3 is preferred over Rule2\nRule5 is preferred over Rule11\nRule6 is preferred over Rule11\nRule9 is preferred over Rule4\n\nThe current state of the game is as follows\nThe kangaroo has a card that is green in color\nThe kangaroo supports Chris Ronaldo\nThe kiwi is named Tango\nThe kudu has a card that is white in color\nThe leopard winks at the kudu\nThe phoenix has a card that is green in color\n\nBased on the game state and the rules and preferences, does the kudu give a magnifier to the sheep?\nQuestion: Does the kudu give a magnifying glass to the sheep?",
        "idx": 186,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the phoenix, if it has a card whose color starts with the letter \"g\", then we can conclude that it does not offer a job to the kudu\nrule1() = has(phoenix, card_with(color_starting_with(\"g\"))) => not offer_job(phoenix, kudu)\n# Rule2: If at least one animal attacks the green fields of the aardvark, then the kudu gives a magnifying glass to the sheep\nrule2() = attack_green_fields(something, aardvark) => give_magnifying_glass(kudu, sheep)\n# Rule3: If you see that something does not prepare armor for the jellyfish but it respects the dog, what can you certainly conclude? You can conclude that it is not going to give a magnifying glass to the sheep\nrule3(something) = not prepare_armor(something, jellyfish) & respects(something, dog) => not give_magnifying_glass(something, sheep)\n# Rule4: If something needs the support of the panther, then it respects the dog, too\nrule4(something) = needs_support(something, panther) => respects(something, dog)\n# Rule5: Regarding the kudu, if it has a card with a primary color, then we can conclude that it does not need support from the panther\nrule5() = has(kudu, card_with(primary_color)) => not needs_support(kudu, panther)\n# Rule6: Regarding the kudu, if it has a name whose first letter is the same as the first letter of the kiwi's name, then we can conclude that it does not need support from the panther\nrule6() = first_letter_of(name(kudu)) == first_letter_of(name(kiwi)) => not needs_support(kudu, panther)\n# Rule7: If the kangaroo is a fan of Chris Ronaldo, then the kangaroo sings a victory song for the whale\nrule7() = fan_of(kangaroo, Chris_Ronaldo) => sing_song(kangaroo, victory_song_for(whale))\n# Rule8: If the kangaroo has a card whose color appears in the flag of Japan, then the kangaroo sings a victory song for the whale\nrule8() = has(kangaroo, card_with(color_in_flag_of(Japan))) => sing_song(kangaroo, victory_song_for(whale))\n# Rule9: For the kudu, if the belief is that the phoenix does not offer a job position to the kudu and the koala does not learn the basics of resource management from the kudu, then you can add \"the kudu does not respect the dog\" to your conclusions\nrule9() = not offer_job(phoenix, kudu) & not learn_basics_of_resource_management(koala, kudu) => not respects(kudu, dog)\n# Rule10: If you are positive that you saw one of the animals sings a victory song for the whale, you can be certain that it will also attack the green fields of the aardvark\nrule10(something) = sing_song(something, victory_song_for(whale)) => attack_green_fields(something, aardvark)\n# Rule11: If the leopard winks at the kudu, then the kudu needs the support of the panther\nrule11() = wink(leopard, kudu) => needs_support(kudu, panther)\n# Rule12: If the catfish eats the food of the kangaroo, then the kangaroo is not going to attack the green fields of the aardvark.\nrule12() = eat_food(catfish, food_of(kangaroo)) => not attack_green_fields(kangaroo, aardvark)\n# Rule12 is preferred over Rule10\norder(rule12) > order(rule10) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule5 is preferred over Rule11\norder(rule5) > order(rule11) = True\n# Rule6 is preferred over Rule11\norder(rule6) > order(rule11) = True\n# Rule9 is preferred over Rule4\norder(rule9) > order(rule4) = True\n\n# The current state of the game is as follows\n# The kangaroo has a card that is green in color\nhas(kangaroo, card_with(green_color)) = True\n# The kangaroo supports Chris Ronaldo\nfan_of(kangaroo, Chris_Ronaldo) = True\n# The kiwi is named Tango\nname(kiwi, Tango) = True\n# The kudu has a card that is white in color\nhas(kudu, card_with(white_color)) = True\n# The leopard winks at the kudu\nwink(leopard, kudu) = True\n# The phoenix has a card that is green in color\nhas(phoenix, card_with(green_color)) = True\n\n# Based on the game state and the rules and preferences, does the kudu give a magnifier to the sheep?\nquestion = give_magnifying_glass(kudu, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see one of the animals give a magnifying glass to the kudu, you can be certain that it will also respect the panther\nRule2: If the halibut attacks the green fields of the cockroach, then the cockroach does not burn the warehouse of the parrot\nRule3: If at least one animal knows the defense plan of the bat, then the halibut does not remove one of the pieces of the eagle\nRule4: If the meerkat does not prepare armor for the cockroach, then the cockroach gives a magnifier to the kudu\nRule5: If the wolverine has a card whose color appears in the flag of Belgium, then the wolverine does not attack the green fields of the kudu\nRule6: If you see something knock down the fortress of the doctorfish and respect the panther, you can conclude that it also burns the warehouse of the parrot\nRule7: If the wolverine voted for the mayor, then it does not attack the green fields owned by the kudu\nRule8: If the whale knocks down the fortress of the wolverine, then the wolverine attacks the green fields of the kudu\nRule9: If the black bear does not raise a flag of peace for the halibut, then the halibut will not attack the green fields of the cockroach\nRule10: If you see one of the animals remove one of the pieces of the eagle, you can be certain that it will also attack the green fields owned by the cockroach\nRule11: If the blobfish does not prepare armor for the halibut and the oscar does not remove one of the pieces of the halibut, then the halibut removes one of the pieces of the eagle\n\nRule3 is preferred over Rule11\nRule5 is preferred over Rule8\nRule6 is preferred over Rule2\nRule7 is preferred over Rule8\nRule9 is preferred over Rule10\n\nThe current state of the game is as follows\nThe whale knocks down the fortress of the wolverine\nThe wolverine assassinated the mayor\nThe blobfish does not prepare armor for the halibut\nThe meerkat does not prepare armor for the cockroach\nThe oscar does not remove one of the pieces of the halibut\n\nBased on the game state and the rules and preferences, does the cockroach burn the warehouse of the parrot?\nQuestion: Does the cockroach burn the warehouse of the parrot?",
        "idx": 187,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals gives a magnifying glass to the kudu, you can be certain that it will also respect the panther\nrule1() = give_magnifying_glass(something, kudu) => respect(something, panther)\n# Rule2: The cockroach does not burn the warehouse of the parrot, in the case where the halibut attacks the green fields of the cockroach\nrule2() = attack_green_fields(halibut, cockroach) => not burn(warehouse_of(parrot), cockroach)\n# Rule3: If at least one animal knows the defense plan of the bat, then the halibut does not remove from the board one of the pieces of the eagle\nrule3() = knows(defense_plan_of(bat), something) => not remove(eagle, piece_of(halibut))\n# Rule4: If the meerkat does not prepare armor for the cockroach, then the cockroach gives a magnifier to the kudu\nrule4() = not prepare_armor(meerkat, cockroach) => give_magnifier(cockroach, kudu)\n# Rule5: If the wolverine has a card whose color appears in the flag of Belgium, then the wolverine does not attack the green fields of the kudu\nrule5() = has(wolverine, card_with(color_in_flag_of_belgium)) => not attack_green_fields(wolverine, kudu)\n# Rule6: If you see that something knocks down the fortress of the doctorfish and respects the panther, what can you certainly conclude? You can conclude that it also burns the warehouse of the parrot\nrule6(something) = knock_down(fortress_of(doctorfish), something) & respect(something, panther) => burn(warehouse_of(parrot), something)\n# Rule7: Regarding the wolverine, if it voted for the mayor, then we can conclude that it does not attack the green fields whose owner is the kudu\nrule7() = voted_for(wolverine, mayor) => not attack_green_fields(wolverine, kudu)\n# Rule8: If the whale knocks down the fortress that belongs to the wolverine, then the wolverine attacks the green fields of the kudu\nrule8() = knock_down(fortress_of(wolverine), whale) => attack_green_fields(wolverine, kudu)\n# Rule9: The halibut will not attack the green fields of the cockroach, in the case where the black bear does not raise a flag of peace for the halibut\nrule9() = not raise_flag_of_peace(black_bear, halibut) => not attack_green_fields(halibut, cockroach)\n# Rule10: If you are positive that you saw one of the animals removes from the board one of the pieces of the eagle, you can be certain that it will also attack the green fields whose owner is the cockroach\nrule10() = remove(eagle, piece_of(something)) => attack_green_fields(something, cockroach)\n# Rule11: For the halibut, if the belief is that the blobfish does not prepare armor for the halibut and the oscar does not remove one of the pieces of the halibut, then you can add \"the halibut removes from the board one of the pieces of the eagle\" to your conclusions.\nrule11() = not prepare_armor(blobfish, halibut) & not remove(eagle, piece_of(oscar)) => remove(eagle, piece_of(halibut))\n# Rule3 is preferred over Rule11\norder(rule3) > order(rule11) = True\n# Rule5 is preferred over Rule8\norder(rule5) > order(rule8) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n# Rule7 is preferred over Rule8\norder(rule7) > order(rule8) = True\n# Rule9 is preferred over Rule10\norder(rule9) > order(rule10) = True\n\n# The current state of the game is as follows\n# The whale knocks down the fortress of the wolverine\nknock_down(fortress_of(wolverine), whale) = True\n# The wolverine assassinated the mayor\nassassinated(wolverine, mayor) = True\n# The blobfish does not prepare armor for the halibut\nnot prepare_armor(blobfish, halibut) = True\n# The meerkat does not prepare armor for the cockroach\nnot prepare_armor(meerkat, cockroach) = True\n# The oscar does not remove from the board one of the pieces of the halibut\nnot remove(eagle, piece_of(oscar)) = True\n\n# Based on the game state and the rules and preferences, does the cockroach burn the warehouse of the parrot?\nquestion = burn(warehouse_of(parrot), cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals knocks down the fortress of the donkey, you can be certain that it will also give a magnifier to the raven\nRule2: If at least one animal prepares armor for the donkey, then the pig knocks down the fortress of the donkey\nRule3: If something shows all her cards to the snail, then it does not sing a victory song for the panda bear\nRule4: If the panther does not learn elementary resource management from the pig, then the pig does not show her cards to the snail\nRule5: If the pig has more than nine friends, then the pig does not knock down the fortress of the donkey\nRule6: If the buffalo rolls the dice for the pig and the parrot offers a job position to the pig, then the pig sings a victory song for the panda bear\nRule7: If the sheep steals five points from the buffalo, then the buffalo rolls the dice for the pig\nRule8: If the parrot has a name whose first letter is the same as the first letter of the grasshopper's name, then the parrot offers a job position to the pig\nRule9: If the caterpillar knows the defensive plans of the pig, then the pig shows her cards to the snail\nRule10: If something gives a magnifying glass to the raven and sings a victory song for the panda bear, then it also attacks the green fields whose owner is the baboon\n\nRule2 is preferred over Rule5\nRule3 is preferred over Rule6\nRule4 is preferred over Rule9\n\nThe current state of the game is as follows\nThe buffalo has a love seat sofa and is named Beauty\nThe caterpillar knows the defensive plans of the pig\nThe cricket is named Lola\nThe dog prepares armor for the donkey\nThe grasshopper is named Mojo\nThe parrot has a card that is violet in color\nThe parrot has seven friends and is named Max\nThe sheep steals five points from the buffalo\nThe panther does not learn elementary resource management from the pig\n\nBased on the game state and the rules and preferences, does the pig attack the green fields whose owner is the baboon?\nQuestion: Does the pig attack the green fields whose owner is the baboon?",
        "idx": 188,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals knocks down the fortress of the donkey, you can be certain that it will also give a magnifier to the raven\nrule1() = knock_down(something, fortress_of(donkey)) => give_magnifier(something, raven)\n# Rule2: If at least one animal prepares armor for the donkey, then the pig knocks down the fortress of the donkey\nrule2() = prepare_armor(something, donkey) => knock_down(pig, fortress_of(donkey))\n# Rule3: If something shows all her cards to the snail, then it does not sing a victory song for the panda bear\nrule3(something) = show_cards(something, snail) => not sing_song(something, victory_song_for(panda_bear))\n# Rule4: The pig will not show her cards (all of them) to the snail, in the case where the panther does not learn elementary resource management from the pig\nrule4() = not learn_elementary_resource_management(panther, pig) => not show_cards(pig, snail)\n# Rule5: If the pig has more than nine friends, then the pig does not knock down the fortress of the donkey\nrule5() = friends(pig) > 9 => not knock_down(pig, fortress_of(donkey))\n# Rule6: If the buffalo rolls the dice for the pig and the parrot offers a job position to the pig, then the pig sings a victory song for the panda bear\nrule6() = roll_dice(buffalo, pig) & offer_job_position(parrot, pig) => sing_song(pig, victory_song_for(panda_bear))\n# Rule7: The buffalo unquestionably rolls the dice for the pig, in the case where the sheep steals five points from the buffalo\nrule7() = steal_points(sheep, 5, buffalo) => roll_dice(buffalo, pig)\n# Rule8: Regarding the parrot, if it has a name whose first letter is the same as the first letter of the grasshopper's name, then we can conclude that it offers a job to the pig\nrule8() = first_letter_of(name(parrot)) == first_letter_of(name(grasshopper)) => offer_job_position(parrot, pig)\n# Rule9: If the caterpillar knows the defensive plans of the pig, then the pig shows her cards (all of them) to the snail\nrule9() = knows(defensive_plans_of(pig), caterpillar) => show_cards(pig, snail)\n# Rule10: If you see that something gives a magnifying glass to the raven and sings a song of victory for the panda bear, what can you certainly conclude? You can conclude that it also attacks the green fields whose owner is the baboon.\nrule10(something) = give_magnifier(something, raven) & sing_song(something, victory_song_for(panda_bear)) => attack_green_fields(something, baboon)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n# Rule4 is preferred over Rule9\norder(rule4) > order(rule9) = True\n\n# The current state of the game is as follows\n# The buffalo has a love seat sofa, and is named Beauty\nhas(buffalo, love_seat_sofa) = True\nname(buffalo, Beauty) = True\n# The caterpillar knows the defensive plans of the pig\nknows(defensive_plans_of(pig), caterpillar) = True\n# The cricket is named Lola\nname(cricket, Lola) = True\n# The dog prepares armor for the donkey\nprepare_armor(dog, donkey) = True\n# The grasshopper is named Mojo\nname(grasshopper, Mojo) = True\n# The parrot has a card that is violet in color\nhas(parrot, card_with(violet_color)) = True\n# The parrot has seven friends, and is named Max\nfriends(parrot) = 7\nname(parrot, Max) = True\n# The sheep steals five points from the buffalo\nsteal_points(sheep, 5, buffalo) = True\n# The panther does not learn the basics of resource management from the pig\nnot learn_elementary_resource_management(panther, pig) = True\n\n# Based on the game state and the rules and preferences, does the pig attack the green fields whose owner is the baboon?\nquestion = attack_green_fields(pig, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the aardvark has a leafy green vegetable, then it does not need the support of the meerkat\nRule2: If at least one animal gives a magnifying glass to the grizzly bear, then the octopus does not need support from the grizzly bear\nRule3: If something becomes an enemy of the koala, then it needs support from the grizzly bear\nRule4: If the phoenix does not show all her cards to the lobster, then the lobster will not learn the basics of resource management from the meerkat\nRule5: If you see one of the animals steal five points from the cheetah, then it will also burn the warehouse of the catfish\nRule6: If the aardvark has more than eight friends, then it needs support from the meerkat\nRule7: If the lobster learns the basics of resource management from the meerkat and the aardvark needs support from the meerkat, then the meerkat steals five points from the cheetah\nRule8: The eel raises a flag of peace for the rabbit whenever at least one animal needs support from the grizzly bear\nRule9: If the lobster has a card with a color starting with the letter \"b\", then it learns the basics of resource management from the meerkat\n\nRule1 is preferred over Rule6\nRule2 is preferred over Rule3\nRule4 is preferred over Rule9\n\nThe current state of the game is as follows\nThe aardvark has seventeen friends\nThe lobster has a card that is blue in color\nThe octopus becomes an enemy of the koala\n\nBased on the game state and the rules and preferences, does the meerkat burn the warehouse of the catfish?\nQuestion: Does the meerkat burn the warehouse of the catfish?",
        "idx": 189,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the aardvark, if it has a leafy green vegetable, then we can conclude that it does not need the support of the meerkat\nrule1() = has(aardvark, leafy_green_vegetable) => not needs_support(aardvark, meerkat)\n# Rule2: If at least one animal gives a magnifying glass to the grizzly bear, then the octopus does not need support from the grizzly bear\nrule2() = give(magnifying_glass, grizzly_bear, something) => not needs_support(octopus, grizzly_bear)\n# Rule3: If something becomes an enemy of the koala, then it needs support from the grizzly bear, too\nrule3(something) = enemy(something, koala) => needs_support(something, grizzly_bear)\n# Rule4: The lobster will not learn the basics of resource management from the meerkat, in the case where the phoenix does not show her cards (all of them) to the lobster\nrule4() = not show_cards(phoenix, lobster) => not learn_basics_of_resource_management(lobster, meerkat)\n# Rule5: If you are positive that you saw one of the animals steals five points from the cheetah, you can be certain that it will also burn the warehouse of the catfish\nrule5(something) = steals_points(something, 5, cheetah) => burn(warehouse_of(catfish), something)\n# Rule6: Regarding the aardvark, if it has more than eight friends, then we can conclude that it needs support from the meerkat\nrule6() = friends(aardvark) > 8 => needs_support(aardvark, meerkat)\n# Rule7: If the lobster learns the basics of resource management from the meerkat and the aardvark needs support from the meerkat, then the meerkat steals five points from the cheetah\nrule7() = learn_basics_of_resource_management(lobster, meerkat) & needs_support(aardvark, meerkat) => steals_points(meerkat, 5, cheetah)\n# Rule8: The eel raises a flag of peace for the rabbit whenever at least one animal needs support from the grizzly bear\nrule8() = needs_support(something, grizzly_bear) => raise_flag_of_peace(eel, rabbit)\n# Rule9: Regarding the lobster, if it has a card whose color starts with the letter \"b\", then we can conclude that it learns the basics of resource management from the meerkat.\nrule9() = has(lobster, card_with(color_starting_with(\"b\"))) => learn_basics_of_resource_management(lobster, meerkat)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule9\norder(rule4) > order(rule9) = True\n\n# The current state of the game is as follows\n# The aardvark has seventeen friends\nfriends(aardvark) = 17\n# The lobster has a card that is blue in color\nhas(lobster, card_with(blue_color)) = True\n# The octopus becomes an enemy of the koala\nenemy(octopus, koala) = True\n\n# Based on the game state and the rules and preferences, does the meerkat burn the warehouse of the catfish?\nquestion = burn(warehouse_of(catfish), meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the cat starts with the first letter of the name of the gecko, then the cat does not burn the warehouse of the hummingbird\nRule2: If the cat has fewer than fourteen friends, then the cat does not burn the warehouse of the hummingbird\nRule3: If at least one animal gives a magnifier to the whale, then the cockroach removes one of the pieces of the hummingbird\nRule4: If something offers a job to the penguin, then it does not learn elementary resource management from the cricket\nRule5: The hummingbird offers a job to the penguin, in the case where the cat does not burn the warehouse of the hummingbird\nRule6: If the polar bear has fewer than four friends, then the polar bear knows the defense plan of the cockroach\nRule7: If the polar bear has something to sit on, then it knows the defensive plans of the cockroach\nRule8: The sheep needs the support of the hummingbird whenever at least one animal knows the defense plan of the cockroach\nRule9: If something becomes an actual enemy of the snail and attacks the green fields whose owner is the sun bear, then it gives a magnifying glass to the whale\n\nThe current state of the game is as follows\nThe cat assassinated the mayor\nThe cat has four friends\nThe cat is named Bella\nThe cat has a card that is orange in color\nThe gecko is named Tarzan\nThe polar bear has 3 friends\nThe polar bear has a violin\nThe starfish attacks the green fields whose owner is the sun bear\nThe starfish becomes an enemy of the snail\n\nBased on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the cricket?\nQuestion: Does the hummingbird learn the basics of resource management from the cricket?",
        "idx": 190,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cat has a name whose first letter is the same as the first letter of the gecko's name, then the cat does not burn the warehouse of the hummingbird\nrule1() = first_letter_of(name(cat)) == first_letter_of(name(gecko)) => not burn_warehouse(cat, hummingbird)\n# Rule2: If the cat has fewer than fourteen friends, then the cat does not burn the warehouse of the hummingbird\nrule2() = friends(cat) < 14 => not burn_warehouse(cat, hummingbird)\n# Rule3: If at least one animal gives a magnifier to the whale, then the cockroach removes one of the pieces of the hummingbird\nrule3(something) = give_magnifier(something, whale) => remove_piece(cockroach, hummingbird)\n# Rule4: If something offers a job to the penguin, then it does not learn elementary resource management from the cricket\nrule4(something) = offer_job(something, penguin) => not learn_resource_management(something, cricket)\n# Rule5: The hummingbird unquestionably offers a job to the penguin, in the case where the cat does not burn the warehouse that is in possession of the hummingbird\nrule5() = not burn_warehouse(cat, hummingbird) => offer_job(hummingbird, penguin)\n# Rule6: If the polar bear has fewer than four friends, then the polar bear knows the defense plan of the cockroach\nrule6() = friends(polar_bear) < 4 => knows_defense_plan(polar_bear, cockroach)\n# Rule7: Regarding the polar bear, if it has something to sit on, then we can conclude that it knows the defensive plans of the cockroach\nrule7() = has(polar_bear, something_to_sit_on) => knows_defensive_plans(polar_bear, cockroach)\n# Rule8: The sheep needs the support of the hummingbird whenever at least one animal knows the defense plan of the cockroach\nrule8() = knows_defense_plan(something, cockroach) => needs_support(sheep, hummingbird)\n# Rule9: If you see that something becomes an actual enemy of the snail and attacks the green fields whose owner is the sun bear, what can you certainly conclude? You can conclude that it also gives a magnifying glass to the whale.\nrule9(something) = becomes_enemy(something, snail) & attacks_green_fields(something, owner(sun_bear)) => give_magnifying_glass(something, whale)\n\n# The current state of the game is as follows\n# The cat assassinated the mayor\nassassinated(cat, mayor) = True\n# The cat has four friends\nfriends(cat) = 4\n# The cat is named Bella\nname(cat, Bella) = True\n# The cat has a card that is orange in color\nhas(cat, card_with(orange_color)) = True\n# The gecko is named Tarzan\nname(gecko, Tarzan) = True\n# The polar bear has 3 friends\nfriends(polar_bear) = 3\n# The polar bear has a violin\nhas(polar_bear, violin) = True\n# The starfish attacks the green fields whose owner is the sun bear\nattacks_green_fields(starfish, owner(sun_bear)) = True\n# The starfish becomes an enemy of the snail\nbecomes_enemy(starfish, snail) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the cricket?\nquestion = learn_resource_management(hummingbird, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grasshopper burns the warehouse of the koala, then the koala unquestionably owes money to the polar bear\nRule2: If the buffalo holds the same number of points as the kudu and the goldfish does not proceed to the spot right after the kudu, then the kudu attacks the green fields owned by the snail\nRule3: If the name of the goldfish starts with the same letter as the name of the blobfish, then the goldfish does not proceed to the spot right after the kudu\nRule4: If the koala owes money to the polar bear, then the polar bear raises a flag of peace for the elephant\nRule5: If the grasshopper has difficulty finding food, then it becomes an enemy of the koala\nRule6: If the buffalo has a leafy green vegetable, then the buffalo holds the same number of points as the kudu\n\nThe current state of the game is as follows\nThe blobfish is named Luna\nThe buffalo has romaine lettuce\nThe goldfish is named Lily, raises a peace flag for the oscar, and winks at the hippopotamus\nThe grasshopper struggles to find food\n\nBased on the game state and the rules and preferences, does the polar bear raise a peace flag for the elephant?\nQuestion: Does the polar bear raise a peace flag for the elephant?",
        "idx": 191,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The koala unquestionably owes money to the polar bear, in the case where the grasshopper burns the warehouse that is in possession of the koala\nrule1() = burn(warehouse_of(koala), grasshopper) => owes_money_to(koala, polar_bear)\n# Rule2: For the kudu, if the belief is that the buffalo holds the same number of points as the kudu and the goldfish does not proceed to the spot right after the kudu, then you can add \"the kudu attacks the green fields whose owner is the snail\" to your conclusions\nrule2() = points(belief, buffalo) == points(kudu) & not proceed(goldfish, spot_right_after(spot_of(kudu))) => attack(kudu, green_fields_of(snail))\n# Rule3: Regarding the goldfish, if it has a name whose first letter is the same as the first letter of the blobfish's name, then we can conclude that it does not proceed to the spot that is right after the spot of the kudu\nrule3() = first_letter_of(name(goldfish)) == first_letter_of(name(blobfish)) => not proceed(goldfish, spot_right_after(spot_of(kudu)))\n# Rule4: If the koala owes money to the polar bear, then the polar bear raises a flag of peace for the elephant\nrule4() = owes_money_to(koala, polar_bear) => raise_flag_of_peace(polar_bear, elephant)\n# Rule5: Regarding the grasshopper, if it has difficulty to find food, then we can conclude that it becomes an enemy of the koala\nrule5() = difficulty_finding_food(grasshopper) => enemy(grasshopper, koala)\n# Rule6: If the buffalo has a leafy green vegetable, then the buffalo holds the same number of points as the kudu.\nrule6() = has(buffalo, leafy_green_vegetable) => points(buffalo) == points(kudu)\n\n# The current state of the game is as follows\n# The blobfish is named Luna\nname(blobfish, Luna) = True\n# The buffalo has some romaine lettuce\nhas(buffalo, romaine_lettuce) = True\n# The goldfish is named Lily, raises a peace flag for the oscar, and winks at the hippopotamus\nname(goldfish, Lily) = True\nraise_flag_of_peace(goldfish, oscar) = True\nwink(goldfish, hippopotamus) = True\n# The grasshopper struggles to find food\ndifficulty_finding_food(grasshopper) = True\n\n# Based on the game state and the rules and preferences, does the polar bear raise a peace flag for the elephant?\nquestion = raise_flag_of_peace(polar_bear, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal owes money to the sun bear, then the kiwi proceeds to the spot that is right after the spot of the grasshopper\nRule2: If the kiwi has a card whose color is one of the rainbow colors, then it winks at the starfish\nRule3: If the crocodile needs the support of the squid and the kiwi does not owe money to the squid, then the squid knows the defensive plans of the doctorfish\nRule4: If the kiwi has a leafy green vegetable, then it does not proceed to the spot that is right after the spot of the grasshopper\nRule5: If something shows all her cards to the puffin, then it needs the support of the squid\nRule6: If at least one animal raises a flag of peace for the cricket, then the spider removes one of the pieces of the octopus\nRule7: If the kiwi does not have her keys, then it does not proceed to the spot right after the grasshopper\nRule8: If the crocodile has a name whose first letter is the same as the first letter of the black bear's name, then the crocodile shows her cards to the puffin\nRule9: If at least one animal winks at the raven, then the squid does not know the defensive plans of the doctorfish\nRule10: If something sings a song of victory for the kudu and also eats the food of the elephant, then it does not show all her cards to the puffin\nRule11: If something winks at the starfish, then it does not owe money to the squid\n\nRule10 is preferred over Rule8\nRule4 is preferred over Rule1\nRule7 is preferred over Rule1\nRule9 is preferred over Rule3\n\nThe current state of the game is as follows\nThe black bear is named Lola\nThe cat owes money to the sun bear\nThe crocodile eats the food of the elephant and is named Luna\nThe dog raises a peace flag for the cricket\nThe kiwi has a card that is violet in color and has a cell phone\n\nBased on the game state and the rules and preferences, does the squid know the defensive plans of the doctorfish?\nQuestion: Does the squid know the defensive plans of the doctorfish?",
        "idx": 192,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal owes money to the sun bear, then the kiwi proceeds to the spot that is right after the spot of the grasshopper\nrule1() = owes_money_to(someone, sun_bear) => proceed(kiwi, spot_right_after(spot_of(grasshopper)))\n# Rule2: Regarding the kiwi, if it has a card whose color is one of the rainbow colors, then we can conclude that it winks at the starfish\nrule2() = has(kiwi, card_with(color_in(rainbow_colors))) => wink(kiwi, starfish)\n# Rule3: For the squid, if the belief is that the crocodile needs the support of the squid and the kiwi does not owe $$$ to the squid, then you can add \"the squid knows the defensive plans of the doctorfish\" to your conclusions\nrule3() = believes(crocodile_needs_support(squid)) & not owes_money_to(kiwi, squid) => knows_defensive_plans(squid, doctorfish)\n# Rule4: If the kiwi has a leafy green vegetable, then the kiwi does not proceed to the spot that is right after the spot of the grasshopper\nrule4() = has(kiwi, leafy_green_vegetable) => not proceed(kiwi, spot_right_after(spot_of(grasshopper)))\n# Rule5: If something shows all her cards to the puffin, then it needs the support of the squid, too\nrule5(something) = show_cards(something, puffin) => needs_support(something, squid)\n# Rule6: If at least one animal raises a flag of peace for the cricket, then the spider removes one of the pieces of the octopus\nrule6() = raise_flag_of_peace(someone, cricket) => remove(spider, piece_of(octopus))\n# Rule7: If the kiwi does not have her keys, then the kiwi does not proceed to the spot right after the grasshopper\nrule7() = not has(kiwi, keys) => not proceed(kiwi, spot_right_after(spot_of(grasshopper)))\n# Rule8: If the crocodile has a name whose first letter is the same as the first letter of the black bear's name, then the crocodile shows her cards (all of them) to the puffin\nrule8() = first_letter_of(name(crocodile)) == first_letter_of(name(black_bear)) => show_cards(crocodile, puffin)\n# Rule9: If at least one animal winks at the raven, then the squid does not know the defensive plans of the doctorfish\nrule9() = wink(someone, raven) => not knows_defensive_plans(squid, doctorfish)\n# Rule10: Be careful when something sings a song of victory for the kudu and also eats the food of the elephant because in this case it will surely not show all her cards to the puffin (this may or may not be problematic)\nrule10(something) = sing_song(something, victory_song_for(kudu)) & eat_food(something, elephant) => not show_cards(something, puffin)\n# Rule11: If something winks at the starfish, then it does not owe $$$ to the squid.\nrule11(something) = wink(something, starfish) => not owes_money_to(something, squid)\n# Rule10 is preferred over Rule8\norder(rule10) > order(rule8) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n# Rule9 is preferred over Rule3\norder(rule9) > order(rule3) = True\n\n# The current state of the game is as follows\n# The black bear is named Lola\nname(black_bear, Lola) = True\n# The cat owes money to the sun bear\nowes_money_to(cat, sun_bear) = True\n# The crocodile eats the food of the elephant, and is named Luna\neat_food(crocodile, elephant) = True\nname(crocodile, Luna) = True\n# The dog raises a peace flag for the cricket\nraise_flag_of_peace(dog, cricket) = True\n# The kiwi has a card that is violet in color, and has a cell phone\nhas(kiwi, card_with(violet_color)) = True\nhas(kiwi, cell_phone) = True\n\n# Based on the game state and the rules and preferences, does the squid know the defensive plans of the doctorfish?\nquestion = knows_defensive_plans(squid, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the panda bear starts with the same letter as the name of the cat, then the panda bear becomes an actual enemy of the swordfish\nRule2: If the tiger has a card with a primary color, then it does not need the support of the swordfish\nRule3: If the swordfish steals five points from the hummingbird, then the hummingbird does not roll the dice for the eagle\nRule4: If the panda bear becomes an enemy of the swordfish and the tiger does not need the support of the swordfish, then the swordfish steals five points from the hummingbird\nRule5: If the panda bear has a card with a color that appears in the flag of the Netherlands, then it becomes an enemy of the swordfish\nRule6: If the sheep respects the panda bear, then the panda bear does not become an enemy of the swordfish\n\nRule6 is preferred over Rule1\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cat is named Charlie\nThe panda bear has a card that is indigo in color and is named Casper\nThe tiger has a card that is red in color\nThe tiger has a hot chocolate\nThe tiger has four friends\n\nBased on the game state and the rules and preferences, does the hummingbird roll the dice for the eagle?\nQuestion: Does the hummingbird roll the dice for the eagle?",
        "idx": 193,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the panda bear, if it has a name whose first letter is the same as the first letter of the cat's name, then we can conclude that it becomes an actual enemy of the swordfish\nrule1() = first_letter_of(name(panda_bear)) == first_letter_of(name(cat)) => actual_enemy(panda_bear, swordfish)\n# Rule2: Regarding the tiger, if it has a card with a primary color, then we can conclude that it does not need the support of the swordfish\nrule2() = has(tiger, card_with(primary_color)) => not need_support(tiger, swordfish)\n# Rule3: The hummingbird does not roll the dice for the eagle, in the case where the swordfish steals five points from the hummingbird\nrule3() = steal_points(swordfish, 5, hummingbird) => not roll_dice(hummingbird, eagle)\n# Rule4: If the panda bear becomes an enemy of the swordfish and the tiger does not need the support of the swordfish, then, inevitably, the swordfish steals five of the points of the hummingbird\nrule4() = actual_enemy(panda_bear, swordfish) & not need_support(tiger, swordfish) => steal_points(swordfish, 5, hummingbird)\n# Rule5: Regarding the panda bear, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it becomes an enemy of the swordfish\nrule5() = has(panda_bear, card_with(color_in(flag_of(Netherlands)))) => actual_enemy(panda_bear, swordfish)\n# Rule6: If the sheep respects the panda bear, then the panda bear is not going to become an enemy of the swordfish.\nrule6() = respects(sheep, panda_bear) => not actual_enemy(panda_bear, swordfish)\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cat is named Charlie\nname(cat, Charlie) = True\n# The panda bear has a card that is indigo in color, and is named Casper\nhas(panda_bear, card_with(indigo_color)) = True\nname(panda_bear, Casper) = True\n# The tiger has a card that is red in color\nhas(tiger, card_with(red_color)) = True\n# The tiger has a hot chocolate\nhas(tiger, hot_chocolate) = True\n# The tiger has four friends\nfriends(tiger) = 4\n\n# Based on the game state and the rules and preferences, does the hummingbird roll the dice for the eagle?\nquestion = roll_dice(hummingbird, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not prepare armor for the salmon, then it does not knock down the fortress that belongs to the sea bass\nRule2: If the sea bass does not have her keys, then the sea bass prepares armor for the grasshopper\nRule3: If the black bear learns elementary resource management from the hippopotamus, then the hippopotamus winks at the crocodile\nRule4: If something needs support from the panther and winks at the sheep, then it steals five points from the hippopotamus\nRule5: If the sea bass has a name whose first letter is the same as the first letter of the grizzly bear's name, then the sea bass needs support from the panther\nRule6: The black bear learns elementary resource management from the hippopotamus whenever at least one animal knocks down the fortress that belongs to the sea bass\nRule7: If the sea bass has a card whose color starts with the letter \"i\", then the sea bass needs the support of the panther\nRule8: If the hare respects the hippopotamus and the sea bass steals five of the points of the hippopotamus, then the hippopotamus will not wink at the crocodile\nRule9: The blobfish removes one of the pieces of the black bear whenever at least one animal attacks the green fields of the cheetah\nRule10: If the hummingbird has more than 6 friends, then it knocks down the fortress of the sea bass\nRule11: The black bear does not learn elementary resource management from the hippopotamus, in the case where the blobfish sings a song of victory for the black bear\nRule12: The sea bass winks at the sheep whenever at least one animal raises a peace flag for the baboon\nRule13: If the hummingbird has a card whose color appears in the flag of Japan, then the hummingbird knocks down the fortress of the sea bass\n\nRule1 is preferred over Rule10\nRule1 is preferred over Rule13\nRule6 is preferred over Rule11\nRule8 is preferred over Rule3\n\nThe current state of the game is as follows\nThe dog raises a peace flag for the baboon\nThe eel holds the same number of points as the sea bass\nThe grizzly bear is named Pablo\nThe hummingbird has 4 friends, has a card that is yellow in color, and prepares armor for the salmon\nThe parrot knows the defensive plans of the cheetah\nThe sea bass dreamed of a luxury aircraft and is named Teddy\nThe sea bass has a card that is indigo in color, has a knapsack, and has one friend\n\nBased on the game state and the rules and preferences, does the hippopotamus wink at the crocodile?\nQuestion: Does the hippopotamus wink at the crocodile?",
        "idx": 194,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not prepare armor for the salmon, then it does not knock down the fortress that belongs to the sea bass\nrule1() = not prepare_armor(something, salmon) => not knock_down_fortress(something, fortress_of(sea_bass))\n# Rule2: If the sea bass does not have her keys, then the sea bass prepares armor for the grasshopper\nrule2() = not has(sea_bass, keys) => prepare_armor(sea_bass, grasshopper)\n# Rule3: If the black bear learns elementary resource management from the hippopotamus, then the hippopotamus winks at the crocodile\nrule3() = learn_elementary_resource_management(black_bear, hippopotamus) => wink(hippopotamus, crocodile)\n# Rule4: If you see that something needs support from the panther and winks at the sheep, what can you certainly conclude? You can conclude that it also steals five points from the hippopotamus\nrule4(something) = needs_support(something, panther) & wink(something, sheep) => steal_points(something, 5, hippopotamus)\n# Rule5: If the sea bass has a name whose first letter is the same as the first letter of the grizzly bear's name, then the sea bass needs support from the panther\nrule5() = first_letter_of(name(sea_bass)) == first_letter_of(name(grizzly_bear)) => needs_support(sea_bass, panther)\n# Rule6: The black bear learns elementary resource management from the hippopotamus whenever at least one animal knocks down the fortress that belongs to the sea bass\nrule6() = knock_down_fortress(animal, fortress_of(sea_bass)) => learn_elementary_resource_management(black_bear, hippopotamus)\n# Rule7: If the sea bass has a card whose color starts with the letter \"i\", then the sea bass needs the support of the panther\nrule7() = has(sea_bass, card_with(color_starting_with(\"i\"))) => needs_support(sea_bass, panther)\n# Rule8: If the hare respects the hippopotamus and the sea bass steals five of the points of the hippopotamus, then the hippopotamus will not wink at the crocodile\nrule8() = respects(hare, hippopotamus) & steal_points(sea_bass, 5, hippopotamus) => not wink(hippopotamus, crocodile)\n# Rule9: The blobfish removes from the board one of the pieces of the black bear whenever at least one animal attacks the green fields of the cheetah\nrule9() = attack(animal, green_fields_of(cheetah)) => remove(blobfish, piece_of(black_bear))\n# Rule10: Regarding the hummingbird, if it has more than 6 friends, then we can conclude that it knocks down the fortress of the sea bass\nrule10() = friends(hummingbird) > 6 => knock_down_fortress(hummingbird, fortress_of(sea_bass))\n# Rule11: The black bear does not learn elementary resource management from the hippopotamus, in the case where the blobfish sings a song of victory for the black bear\nrule11() = sing_song(blobfish, victory_song_for(black_bear)) => not learn_elementary_resource_management(black_bear, hippopotamus)\n# Rule12: The sea bass winks at the sheep whenever at least one animal raises a peace flag for the baboon\nrule12() = raise_flag_of_peace(animal, baboon) => wink(sea_bass, sheep)\n# Rule13: If the hummingbird has a card whose color appears in the flag of Japan, then the hummingbird knocks down the fortress of the sea bass.\nrule13() = has(hummingbird, card_with(color_in_flag_of_Japan)) => knock_down_fortress(hummingbird, fortress_of(sea_bass))\n# Rule1 is preferred over Rule10\norder(rule1) > order(rule10) = True\n# Rule1 is preferred over Rule13\norder(rule1) > order(rule13) = True\n# Rule6 is preferred over Rule11\norder(rule6) > order(rule11) = True\n# Rule8 is preferred over Rule3\norder(rule8) > order(rule3) = True\n\n# The current state of the game is as follows\n# The dog raises a peace flag for the baboon\nraise_flag_of_peace(dog, baboon) = True\n# The eel holds the same number of points as the sea bass\npoints(eel) == points(sea_bass) = True\n# The grizzly bear is named Pablo\nname(grizzly_bear, Pablo) = True\n# The hummingbird has 4 friends, has a card that is yellow in color, and prepares armor for the salmon\nfriends(hummingbird) = 4\nhas(hummingbird, card_with(yellow_color)) = True\nprepare_armor(hummingbird, salmon) = True\n# The parrot knows the defensive plans of the cheetah\nknows(defensive_plans_of(cheetah), parrot) = True\n# The sea bass dreamed of a luxury aircraft, and is named Teddy\ndreamed(sea_bass, luxury_aircraft) = True\nname(sea_bass, Teddy) = True\n# The sea bass has a card that is indigo in color, has a knapsack, and has one friend\nhas(sea_bass, card_with(indigo_color)) = True\nhas(sea_bass, knapsack) = True\nfriends(sea_bass) = 1\n\n# Based on the game state and the rules and preferences, does the hippopotamus wink at the crocodile?\nquestion = wink(hippopotamus, crocodile)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tiger shows all her cards to the eel, then the eel removes one of the pieces of the caterpillar\nRule2: If at least one animal removes one of the pieces of the caterpillar, then the salmon rolls the dice for the panther\nRule3: If the squid has a card with a color that is one of the rainbow colors, then the squid removes one of the pieces of the cricket\nRule4: If the cow has more than 9 friends, then the cow does not roll the dice for the baboon\nRule5: If the squid has fewer than nine friends, then it does not remove one of the pieces of the cricket\nRule6: If the squid has a name whose first letter is the same as the first letter of the goldfish's name, then it does not remove one of the pieces of the cricket\nRule7: If the cow does not roll the dice for the baboon, then the baboon offers a job to the panther\nRule8: If the salmon rolls the dice for the panther and the baboon offers a job to the panther, then the panther raises a peace flag for the kudu\n\nRule3 is preferred over Rule5\nRule3 is preferred over Rule6\n\nThe current state of the game is as follows\nThe cow has 16 friends\nThe goldfish is named Lola\nThe squid has 11 friends\nThe squid has a card that is violet in color\nThe squid is named Luna\nThe tiger shows all her cards to the eel\n\nBased on the game state and the rules and preferences, does the panther raise a peace flag for the kudu?\nQuestion: Does the panther raise a peace flag for the kudu?",
        "idx": 195,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the tiger shows all her cards to the eel, then the eel removes from the board one of the pieces of the caterpillar\nrule1() = show_cards(tiger, eel) => remove(eel, piece_of(caterpillar))\n# Rule2: If at least one animal removes one of the pieces of the caterpillar, then the salmon rolls the dice for the panther\nrule2() = remove(something, piece_of(caterpillar)) => roll_dice(salmon, panther)\n# Rule3: If the squid has a card whose color is one of the rainbow colors, then the squid removes one of the pieces of the cricket\nrule3() = has(squid, card_with(color_in(rainbow_colors))) => remove(squid, piece_of(cricket))\n# Rule4: If the cow has more than 9 friends, then the cow does not roll the dice for the baboon\nrule4() = friends(cow) > 9 => not roll_dice(cow, baboon)\n# Rule5: Regarding the squid, if it has fewer than nine friends, then we can conclude that it does not remove from the board one of the pieces of the cricket\nrule5() = friends(squid) < 9 => not remove(squid, piece_of(cricket))\n# Rule6: Regarding the squid, if it has a name whose first letter is the same as the first letter of the goldfish's name, then we can conclude that it does not remove one of the pieces of the cricket\nrule6() = first_letter_of(name(squid)) == first_letter_of(name(goldfish)) => not remove(squid, piece_of(cricket))\n# Rule7: If the cow does not roll the dice for the baboon, then the baboon offers a job to the panther\nrule7() = not roll_dice(cow, baboon) => offer_job(baboon, panther)\n# Rule8: If the salmon rolls the dice for the panther and the baboon offers a job to the panther, then the panther raises a peace flag for the kudu.\nrule8() = roll_dice(salmon, panther) & offer_job(baboon, panther) => raise_flag_of_peace(panther, kudu)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n\n# The current state of the game is as follows\n# The cow has 16 friends\nfriends(cow) = 16\n# The goldfish is named Lola\nname(goldfish, Lola) = True\n# The squid has 11 friends\nfriends(squid) = 11\n# The squid has a card that is violet in color\nhas(squid, card_with(violet_color)) = True\n# The squid is named Luna\nname(squid, Luna) = True\n# The tiger shows all her cards to the eel\nshow_cards(tiger, eel) = True\n\n# Based on the game state and the rules and preferences, does the panther raise a peace flag for the kudu?\nquestion = raise_flag_of_peace(panther, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal removes one of the pieces of the mosquito, then the turtle knows the defense plan of the donkey\nRule2: The lion does not know the defensive plans of the goldfish whenever at least one animal eats the food that belongs to the halibut\nRule3: If the octopus has difficulty finding food, then it gives a magnifier to the squid\nRule4: If something does not raise a peace flag for the baboon, then it rolls the dice for the eagle\nRule5: If the ferret does not have her keys, then she eats the food that belongs to the halibut\nRule6: If at least one animal gives a magnifier to the squid, then the turtle does not become an enemy of the goldfish\nRule7: The turtle does not roll the dice for the eagle whenever at least one animal owes money to the kiwi\nRule8: If the turtle does not become an actual enemy of the goldfish and the lion does not know the defense plan of the goldfish, then the goldfish does not attack the green fields whose owner is the parrot\nRule9: If the octopus has fewer than 7 friends, then it gives a magnifying glass to the squid\nRule10: If the ferret has a name whose first letter is the same as the first letter of the hare's name, then the ferret eats the food of the halibut\n\nRule7 is preferred over Rule4\n\nThe current state of the game is as follows\nThe ferret is named Lucy\nThe ferret is holding her keys\nThe hare is named Lola\nThe octopus has 5 loyal friends and 3 non-loyal friends, and struggles to find food\nThe snail removes from the board one of the pieces of the mosquito\nThe turtle does not raise a peace flag for the baboon\n\nBased on the game state and the rules and preferences, does the goldfish attack the green fields whose owner is the parrot?\nQuestion: Does the goldfish attack the green fields whose owner is the parrot?",
        "idx": 196,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal removes one of the pieces of the mosquito, then the turtle knows the defense plan of the donkey\nrule1() = remove(something, piece_of(mosquito)) => knows(defense_plan_of(donkey), turtle)\n# Rule2: The lion does not know the defensive plans of the goldfish whenever at least one animal eats the food that belongs to the halibut\nrule2() = eats_food(something, food_of(halibut)) => not knows(defensive_plans_of(goldfish), lion)\n# Rule3: Regarding the octopus, if it has difficulty to find food, then we can conclude that it gives a magnifier to the squid\nrule3() = difficulty_finding_food(octopus) => give_magnifier(octopus, squid)\n# Rule4: If something does not raise a flag of peace for the baboon, then it rolls the dice for the eagle\nrule4(something) = not raise_flag_of_peace(something, baboon) => roll_dice(something, eagle)\n# Rule5: If the ferret does not have her keys, then the ferret eats the food that belongs to the halibut\nrule5() = not has(ferret, keys) => eats_food(ferret, food_of(halibut))\n# Rule6: If at least one animal gives a magnifier to the squid, then the turtle does not become an enemy of the goldfish\nrule6() = give_magnifier(something, squid) => not enemy(turtle, goldfish)\n# Rule7: The turtle does not roll the dice for the eagle whenever at least one animal owes money to the kiwi\nrule7() = owes_money_to(something, kiwi) => not roll_dice(turtle, eagle)\n# Rule8: For the goldfish, if the belief is that the turtle does not become an actual enemy of the goldfish and the lion does not know the defense plan of the goldfish, then you can add \"the goldfish does not attack the green fields whose owner is the parrot\" to your conclusions\nrule8() = not enemy(turtle, goldfish) & not knows(defense_plan_of(goldfish), lion) => not attack(goldfish, green_fields_of(parrot))\n# Rule9: Regarding the octopus, if it has fewer than 7 friends, then we can conclude that it gives a magnifying glass to the squid\nrule9() = friends(octopus) < 7 => give_magnifying_glass(octopus, squid)\n# Rule10: If the ferret has a name whose first letter is the same as the first letter of the hare's name, then the ferret eats the food of the halibut.\nrule10() = first_letter_of(name(ferret)) == first_letter_of(name(hare)) => eats_food(ferret, food_of(halibut))\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n\n# The current state of the game is as follows\n# The ferret is named Lucy\nname(ferret, Lucy) = True\n# The ferret is holding her keys\nhas(ferret, keys) = True\n# The hare is named Lola\nname(hare, Lola) = True\n# The octopus has 5 loyal friends and 3 non-loyal friends, and struggles to find food\nfriends(octopus, loyal) = 5\nfriends(octopus, non_loyal) = 3\nstruggles_to_find_food(octopus) = True\n# The snail removes from the board one of the pieces of the mosquito\nremove(snail, piece_of(mosquito)) = True\n# The turtle does not raise a peace flag for the baboon\nnot raise_flag_of_peace(turtle, baboon) = True\n\n# Based on the game state and the rules and preferences, does the goldfish attack the green fields whose owner is the parrot?\nquestion = attack(goldfish, green_fields_of(parrot))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The amberjack unquestionably rolls the dice for the baboon, in the case where the salmon does not sing a victory song for the amberjack\nRule2: If the swordfish holds an equal number of points as the salmon and the elephant holds an equal number of points as the salmon, then the salmon will not sing a victory song for the amberjack\nRule3: If the swordfish has a card whose color starts with the letter \"l\", then the swordfish holds an equal number of points as the salmon\nRule4: If the swordfish has something to carry apples and oranges, then it does not hold the same number of points as the salmon\nRule5: The salmon sings a victory song for the amberjack whenever at least one animal prepares armor for the grasshopper\nRule6: If something does not become an enemy of the bat, then it holds the same number of points as the salmon\nRule7: If the rabbit has a card with a primary color, then the rabbit prepares armor for the grasshopper\nRule8: If the swordfish has a sharp object, then it holds the same number of points as the salmon\nRule9: If the rabbit has a name whose first letter is the same as the first letter of the tilapia's name, then it prepares armor for the grasshopper\n\nRule4 is preferred over Rule3\nRule4 is preferred over Rule8\nRule5 is preferred over Rule2\n\nThe current state of the game is as follows\nThe rabbit has a card that is green in color\nThe rabbit is named Max\nThe swordfish has a card that is black in color\nThe swordfish has a cutter\nThe tilapia is named Peddi\nThe elephant does not become an enemy of the bat\n\nBased on the game state and the rules and preferences, does the amberjack roll the dice for the baboon?\nQuestion: Does the amberjack roll the dice for the baboon?",
        "idx": 197,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The amberjack unquestionably rolls the dice for the baboon, in the case where the salmon does not sing a victory song for the amberjack\nrule1() = not sing_song(salmon, victory_song_for(amberjack)) => roll_dice(amberjack, baboon)\n# Rule2: If the swordfish holds an equal number of points as the salmon and the elephant holds an equal number of points as the salmon, then the salmon will not sing a victory song for the amberjack\nrule2() = points(swordfish) == points(salmon) & points(elephant) == points(salmon) => not sing_song(salmon, victory_song_for(amberjack))\n# Rule3: If the swordfish has a card whose color starts with the letter \"l\", then the swordfish holds an equal number of points as the salmon\nrule3() = has(swordfish, card_with(color_starting_with(\"l\"))) => points(swordfish) == points(salmon)\n# Rule4: Regarding the swordfish, if it has something to carry apples and oranges, then we can conclude that it does not hold the same number of points as the salmon\nrule4() = has(swordfish, something_to_carry(apples, oranges)) => not points(swordfish) == points(salmon)\n# Rule5: The salmon sings a victory song for the amberjack whenever at least one animal prepares armor for the grasshopper\nrule5() = prepare_armor(something, grasshopper) => sing_song(salmon, victory_song_for(amberjack))\n# Rule6: If something does not become an enemy of the bat, then it holds the same number of points as the salmon\nrule6(something) = not enemy(something, bat) => points(something) == points(salmon)\n# Rule7: If the rabbit has a card with a primary color, then the rabbit prepares armor for the grasshopper\nrule7() = has(rabbit, card_with(primary_color)) => prepare_armor(rabbit, grasshopper)\n# Rule8: Regarding the swordfish, if it has a sharp object, then we can conclude that it holds the same number of points as the salmon\nrule8() = has(swordfish, sharp_object) => points(swordfish) == points(salmon)\n# Rule9: Regarding the rabbit, if it has a name whose first letter is the same as the first letter of the tilapia's name, then we can conclude that it prepares armor for the grasshopper.\nrule9() = first_letter_of(name(rabbit)) == first_letter_of(name(tilapia)) => prepare_armor(rabbit, grasshopper)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule4 is preferred over Rule8\norder(rule4) > order(rule8) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n\n# The current state of the game is as follows\n# The rabbit has a card that is green in color, and is named Max\nhas(rabbit, card_with(green_color)) = True\nname(rabbit, Max) = True\n# The swordfish has a card that is black in color\nhas(swordfish, card_with(black_color)) = True\n# The swordfish has a cutter\nhas(swordfish, cutter) = True\n# The tilapia is named Peddi\nname(tilapia, Peddi) = True\n# The elephant does not become an enemy of the bat\nnot enemy(elephant, bat) = True\n\n# Based on the game state and the rules and preferences, does the amberjack roll the dice for the baboon?\nquestion = roll_dice(amberjack, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The catfish knows the defensive plans of the elephant whenever at least one animal shows all her cards to the turtle\nRule2: If something proceeds to the spot that is right after the spot of the hippopotamus, then it eats the food that belongs to the panther, too\nRule3: The catfish burns the warehouse that is in possession of the octopus, in the case where the buffalo rolls the dice for the catfish\nRule4: The buffalo rolls the dice for the catfish, in the case where the salmon knows the defensive plans of the buffalo\nRule5: If the squirrel works fewer hours than before, then it removes one of the pieces of the phoenix\nRule6: If the aardvark prepares armor for the squirrel and the polar bear respects the squirrel, then the squirrel does not remove one of the pieces of the phoenix\nRule7: If the sheep winks at the catfish, then the catfish does not eat the food that belongs to the panther\nRule8: If the grasshopper has something to carry apples and oranges, then the grasshopper rolls the dice for the squirrel\nRule9: If an animal does not eat the food that belongs to the panther, then it offers a job to the buffalo\nRule10: If the grasshopper has a name whose first letter is the same as the first letter of the jellyfish's name, then the grasshopper rolls the dice for the squirrel\nRule11: If the cheetah needs support from the grasshopper, then the grasshopper does not roll the dice for the squirrel\nRule12: The squirrel shows all her cards to the turtle, in the case where the grasshopper rolls the dice for the squirrel\n\nRule11 is preferred over Rule10\nRule11 is preferred over Rule8\nRule2 is preferred over Rule7\nRule5 is preferred over Rule6\n\nThe current state of the game is as follows\nThe aardvark prepares armor for the squirrel\nThe grasshopper has a knapsack\nThe grasshopper is named Tango\nThe jellyfish is named Pashmak\nThe polar bear respects the squirrel\nThe salmon knows the defensive plans of the buffalo\nThe sheep winks at the catfish\n\nBased on the game state and the rules and preferences, does the catfish know the defensive plans of the elephant?\nQuestion: Does the catfish know the defensive plans of the elephant?",
        "idx": 198,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The catfish knows the defensive plans of the elephant whenever at least one animal shows all her cards to the turtle\nrule1() = show_all_cards(something, turtle) => knows(defensive_plans_of(elephant), catfish)\n# Rule2: If something proceeds to the spot that is right after the spot of the hippopotamus, then it eats the food that belongs to the panther, too\nrule2() = proceed(something, spot_right_after(spot_of(hippopotamus))) => eat_food(something, food_of(panther))\n# Rule3: The catfish unquestionably burns the warehouse that is in possession of the octopus, in the case where the buffalo rolls the dice for the catfish\nrule3() = roll_dice(buffalo, catfish) => burn(warehouse_of(octopus), catfish)\n# Rule4: The buffalo unquestionably rolls the dice for the catfish, in the case where the salmon knows the defensive plans of the buffalo\nrule4() = knows(defensive_plans_of(buffalo), salmon) => roll_dice(buffalo, catfish)\n# Rule5: Regarding the squirrel, if it works fewer hours than before, then we can conclude that it removes from the board one of the pieces of the phoenix\nrule5() = reduce_work_hours(squirrel) => remove(squirrel, piece_of(phoenix))\n# Rule6: For the squirrel, if the belief is that the aardvark prepares armor for the squirrel and the polar bear respects the squirrel, then you can add that \"the squirrel is not going to remove one of the pieces of the phoenix\" to your conclusions\nrule6() = prepare_armor(aardvark, squirrel) & respects(polar_bear, squirrel) => not remove(squirrel, piece_of(phoenix))\n# Rule7: If the sheep winks at the catfish, then the catfish is not going to eat the food that belongs to the panther\nrule7() = wink(sheep, catfish) => not eat_food(catfish, food_of(panther))\n# Rule8: If the grasshopper has something to carry apples and oranges, then the grasshopper rolls the dice for the squirrel\nrule8() = has(grasshopper, carry_apples_and_oranges) => roll_dice(grasshopper, squirrel)\n# Rule9: If you are positive that one of the animals does not eat the food that belongs to the panther, you can be certain that it will offer a job to the buffalo without a doubt\nrule9() = not eat_food(something, food_of(panther)) => offer_job(something, buffalo)\n# Rule10: Regarding the grasshopper, if it has a name whose first letter is the same as the first letter of the jellyfish's name, then we can conclude that it rolls the dice for the squirrel\nrule10() = first_letter_of(name(grasshopper)) == first_letter_of(name(jellyfish)) => roll_dice(grasshopper, squirrel)\n# Rule11: If the cheetah needs support from the grasshopper, then the grasshopper is not going to roll the dice for the squirrel\nrule11() = needs_support(cheetah, grasshopper) => not roll_dice(grasshopper, squirrel)\n# Rule12: The squirrel unquestionably shows all her cards to the turtle, in the case where the grasshopper rolls the dice for the squirrel.\nrule12() = roll_dice(grasshopper, squirrel) => show_all_cards(squirrel, turtle)\n# Rule11 is preferred over Rule10\norder(rule11) > order(rule10) = True\n# Rule11 is preferred over Rule8\norder(rule11) > order(rule8) = True\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n\n# The current state of the game is as follows\n# The aardvark prepares armor for the squirrel\nprepare_armor(aardvark, squirrel) = True\n# The grasshopper has a knapsack, and is named Tango\nhas(grasshopper, knapsack) = True\nname(grasshopper, Tango) = True\n# The jellyfish is named Pashmak\nname(jellyfish, Pashmak) = True\n# The polar bear respects the squirrel\nrespects(polar_bear, squirrel) = True\n# The salmon knows the defensive plans of the buffalo\nknows(defensive_plans_of(buffalo), salmon) = True\n# The sheep winks at the catfish\nwink(sheep, catfish) = True\n\n# Based on the game state and the rules and preferences, does the catfish know the defensive plans of the elephant?\nquestion = knows(defensive_plans_of(elephant), catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal burns the warehouse of the hare, then the kiwi winks at the starfish\nRule2: If one of the animals does not attack the green fields of the crocodile, then it will raise a peace flag for the cat\nRule3: If the gecko gives a magnifying glass to the dog and the catfish does not become an actual enemy of the dog, then the dog attacks the green fields of the crocodile\nRule4: If one of the animals does not burn the warehouse of the puffin, then it will sing a victory song for the parrot\nRule5: If an animal raises a peace flag for the cat and sings a victory song for the parrot, then it will not offer a job to the snail\nRule6: If the dog has more than ten friends, then it does not burn the warehouse of the puffin\nRule7: If at least one animal proceeds to the spot right after the caterpillar, then the dog does not attack the green fields of the crocodile\n\nRule3 is preferred over Rule7\n\nThe current state of the game is as follows\nThe canary proceeds to the spot right after the caterpillar\nThe dog has twenty friends\nThe gecko gives a magnifying glass to the dog\nThe jellyfish burns the warehouse of the hare\nThe buffalo does not hold the same number of points as the kiwi\n\nBased on the game state and the rules and preferences, does the dog offer a job to the snail?\nQuestion: Does the dog offer a job to the snail?",
        "idx": 199,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal burns the warehouse of the hare, then the kiwi winks at the starfish\nrule1() = burn(warehouse_of(hare), something) => wink(kiwi, starfish)\n# Rule2: If you are positive that one of the animals does not attack the green fields of the crocodile, you can be certain that it will raise a peace flag for the cat without a doubt\nrule2() = not attack_green_fields(something, crocodile) => raise_flag_of_peace(something, cat)\n# Rule3: For the dog, if the belief is that the gecko gives a magnifying glass to the dog and the catfish does not become an actual enemy of the dog, then you can add \"the dog attacks the green fields of the crocodile\" to your conclusions\nrule3() = give(gecko, magnifying_glass, dog) & not enemy(catfish, dog) => attack_green_fields(dog, crocodile)\n# Rule4: If you are positive that one of the animals does not burn the warehouse that is in possession of the puffin, you can be certain that it will sing a victory song for the parrot without a doubt\nrule4() = not burn(warehouse_of(puffin), something) => sing_song(something, victory_song_for(parrot))\n# Rule5: Be careful when something raises a peace flag for the cat and also sings a victory song for the parrot because in this case it will surely not offer a job to the snail (this may or may not be problematic)\nrule5(something) = raise_flag_of_peace(something, cat) & sing_song(something, victory_song_for(parrot)) => not offer_job(something, snail)\n# Rule6: If the dog has more than ten friends, then the dog does not burn the warehouse of the puffin\nrule6() = friends(dog) > 10 => not burn(warehouse_of(puffin), dog)\n# Rule7: The dog does not attack the green fields whose owner is the crocodile whenever at least one animal proceeds to the spot right after the caterpillar.\nrule7() = proceed(something, spot_right_after(spot_of(caterpillar))) => not attack_green_fields(dog, green_fields_of(crocodile))\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n\n# The current state of the game is as follows\n# The canary proceeds to the spot right after the caterpillar\nproceed(canary, spot_right_after(spot_of(caterpillar))) = True\n# The dog has twenty friends\nfriends(dog) = 20\n# The gecko gives a magnifier to the dog\ngive(gecko, magnifying_glass, dog) = True\n# The jellyfish burns the warehouse of the hare\nburn(warehouse_of(hare), jellyfish) = True\n# The buffalo does not hold the same number of points as the kiwi\npoints(buffalo) != points(kiwi)\n\n# Based on the game state and the rules and preferences, does the dog offer a job to the snail?\nquestion = offer_job(dog, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not give a magnifying glass to the bat, you can be certain that it will learn elementary resource management from the spider without a doubt\nRule2: If the cow has more than 3 friends, then it does not give a magnifier to the bat\nRule3: The dog becomes an enemy of the spider whenever at least one animal owes money to the baboon\nRule4: If the sheep burns the warehouse of the wolverine, then the wolverine becomes an actual enemy of the cow\nRule5: If at least one animal knows the defense plan of the kiwi, then the panda bear removes one of the pieces of the baboon\nRule6: If the cow learns elementary resource management from the spider and the dog becomes an enemy of the spider, then the spider knows the defense plan of the puffin\nRule7: If something removes from the board one of the pieces of the canary and also gives a magnifier to the cheetah, then it does not become an enemy of the cow\n\nRule7 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cow has six friends\nThe hippopotamus knows the defensive plans of the kiwi\nThe sheep burns the warehouse of the wolverine\nThe wolverine removes from the board one of the pieces of the canary\n\nBased on the game state and the rules and preferences, does the spider know the defensive plans of the puffin?\nQuestion: Does the spider know the defensive plans of the puffin?",
        "idx": 200,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not give a magnifying glass to the bat, you can be certain that it will learn elementary resource management from the spider without a doubt\nrule1() = not give_magnifying_glass(something, bat) => learn_elementary_resource_management(something, spider)\n# Rule2: Regarding the cow, if it has more than 3 friends, then we can conclude that it does not give a magnifier to the bat\nrule2() = friends(cow) > 3 => not give_magnifier(cow, bat)\n# Rule3: The dog becomes an enemy of the spider whenever at least one animal owes $$$ to the baboon\nrule3() = owes_money_to(something, baboon) => enemy(dog, spider)\n# Rule4: If the sheep burns the warehouse of the wolverine, then the wolverine becomes an actual enemy of the cow\nrule4() = burn(warehouse_of(wolverine), sheep) => actual_enemy(wolverine, cow)\n# Rule5: If at least one animal knows the defense plan of the kiwi, then the panda bear removes one of the pieces of the baboon\nrule5() = knows(defense_plan_of(kiwi), something) => remove(panda_bear, piece_of(baboon))\n# Rule6: For the spider, if the belief is that the cow learns elementary resource management from the spider and the dog becomes an enemy of the spider, then you can add \"the spider knows the defense plan of the puffin\" to your conclusions\nrule6() = learn_elementary_resource_management(cow, spider) & enemy(dog, spider) => knows(defense_plan_of(puffin), spider)\n# Rule7: Be careful when something removes from the board one of the pieces of the canary and also gives a magnifier to the cheetah because in this case it will surely not become an enemy of the cow (this may or may not be problematic).\nrule7(something) = remove(something, piece_of(canary)) & give_magnifier(something, cheetah) => not enemy(something, cow)\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cow has six friends\nfriends(cow) = 6\n# The hippopotamus knows the defensive plans of the kiwi\nknows(defense_plan_of(kiwi), hippopotamus) = True\n# The sheep burns the warehouse of the wolverine\nburn(warehouse_of(wolverine), sheep) = True\n# The wolverine removes from the board one of the pieces of the canary\nremove(wolverine, piece_of(canary)) = True\n\n# Based on the game state and the rules and preferences, does the spider know the defensive plans of the puffin?\nquestion = knows(defense_plan_of(puffin), spider)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something steals five points from the kudu and offers a job to the hummingbird, then it owes money to the moose\nRule2: If the jellyfish has a device to connect to the internet, then it removes one of the pieces of the aardvark from the board\nRule3: If the snail has high-quality paper, then it does not raise a peace flag for the jellyfish\nRule4: If the squirrel knocks down the fortress of the jellyfish, then the jellyfish steals five points from the kudu\nRule5: If the starfish does not give a magnifier to the squirrel, then the squirrel knocks down the fortress of the jellyfish\nRule6: If something removes one of the pieces of the aardvark, then it also offers a job position to the hummingbird\nRule7: If the oscar shows all her cards to the snail, then the snail raises a peace flag for the jellyfish\n\nRule7 is preferred over Rule3\n\nThe current state of the game is as follows\nThe jellyfish has 6 friends and has a computer\nThe jellyfish has a bench\nThe oscar shows all her cards to the snail\nThe snail has a guitar\nThe snail published a high-quality paper\nThe squirrel has a card that is blue in color\nThe starfish does not give a magnifier to the squirrel\n\nBased on the game state and the rules and preferences, does the jellyfish owe money to the moose?\nQuestion: Does the jellyfish owe money to the moose?",
        "idx": 201,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something steals five of the points of the kudu and offers a job to the hummingbird, what can you certainly conclude? You can conclude that it also owes money to the moose\nrule1() = steal_points(something, 5, kudu) & offer_job(something, hummingbird) => owes_money_to(something, moose)\n# Rule2: Regarding the jellyfish, if it has a device to connect to the internet, then we can conclude that it removes from the board one of the pieces of the aardvark\nrule2() = has(jellyfish, connect_to_internet(device)) => remove(jellyfish, piece_of(aardvark))\n# Rule3: If the snail has a high-quality paper, then the snail does not raise a peace flag for the jellyfish\nrule3() = has(snail, high_quality_paper) => not raise_flag_of_peace(snail, jellyfish)\n# Rule4: If the squirrel knocks down the fortress of the jellyfish, then the jellyfish steals five points from the kudu\nrule4() = knock_down(squirrel, fortress_of(jellyfish)) => steal_points(jellyfish, 5, kudu)\n# Rule5: The squirrel unquestionably knocks down the fortress that belongs to the jellyfish, in the case where the starfish does not give a magnifier to the squirrel\nrule5() = not give(starfish, magnifier, squirrel) => knock_down(squirrel, fortress_of(jellyfish))\n# Rule6: If something removes from the board one of the pieces of the aardvark, then it offers a job position to the hummingbird, too\nrule6(something) = remove(something, piece_of(aardvark)) => offer_job(something, hummingbird)\n# Rule7: If the oscar shows all her cards to the snail, then the snail raises a peace flag for the jellyfish.\nrule7() = show_cards(oscar, snail) => raise_flag_of_peace(snail, jellyfish)\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n\n# The current state of the game is as follows\n# The jellyfish has 6 friends, and has a computer\nfriends(jellyfish) = 6\nhas(jellyfish, computer) = True\n# The jellyfish has a bench\nhas(jellyfish, bench) = True\n# The oscar shows all her cards to the snail\nshow_cards(oscar, snail) = True\n# The snail has a guitar\nhas(snail, guitar) = True\n# The snail published a high-quality paper\nhas(snail, high_quality_paper) = True\n# The squirrel has a card that is blue in color\nhas(squirrel, card_with(blue_color)) = True\n# The starfish does not give a magnifier to the squirrel\nnot give(starfish, magnifier, squirrel) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish owe money to the moose?\nquestion = owes_money_to(jellyfish, moose)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lobster has a name whose first letter is the same as the first letter of the snail's name, then it does not offer a job to the black bear\nRule2: If the amberjack has something to carry apples and oranges, then it does not give a magnifying glass to the canary\nRule3: The kiwi becomes an enemy of the lobster whenever at least one animal raises a peace flag for the octopus\nRule4: If the catfish does not show all her cards to the halibut, then the halibut burns the warehouse of the gecko\nRule5: If the kiwi becomes an enemy of the lobster, then the lobster attacks the green fields of the halibut\nRule6: If at least one animal attacks the green fields whose owner is the goldfish, then the lobster offers a job position to the black bear\nRule7: If the catfish has fewer than six friends, then it does not show her cards (all of them) to the halibut\nRule8: If the amberjack steals five points from the halibut and the lobster attacks the green fields of the halibut, then the halibut will not offer a job to the buffalo\nRule9: If something sings a song of victory for the whale and also holds the same number of points as the blobfish, then it will surely not steal five of the points of the halibut\nRule10: If something does not give a magnifier to the canary, then it steals five points from the halibut\nRule11: If something burns the warehouse that is in possession of the gecko, then it offers a job position to the buffalo, too\nRule12: If the lobster has a card whose color starts with the letter \"l\", then it does not offer a job position to the black bear\nRule13: If the dog learns the basics of resource management from the amberjack, then the amberjack holds the same number of points as the blobfish\nRule14: If one of the animals offers a job to the black bear, then it will not attack the green fields whose owner is the halibut\n\nRule1 is preferred over Rule6\nRule12 is preferred over Rule6\nRule5 is preferred over Rule14\nRule8 is preferred over Rule11\nRule9 is preferred over Rule10\n\nThe current state of the game is as follows\nThe amberjack has a backpack\nThe catfish has three friends\nThe dog learns the basics of resource management from the amberjack\nThe kangaroo attacks the green fields whose owner is the goldfish\nThe lobster has a card that is black in color\nThe mosquito raises a peace flag for the octopus\nThe snail is named Lucy\n\nBased on the game state and the rules and preferences, does the halibut offer a job to the buffalo?\nQuestion: Does the halibut offer a job to the buffalo?",
        "idx": 202,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the lobster, if it has a name whose first letter is the same as the first letter of the snail's name, then we can conclude that it does not offer a job to the black bear\nrule1() = first_letter_of(name(lobster)) == first_letter_of(name(snail)) => not offer_job(lobster, black_bear)\n# Rule2: Regarding the amberjack, if it has something to carry apples and oranges, then we can conclude that it does not give a magnifying glass to the canary\nrule2() = has(amberjack, carry_apples_and_oranges) => not give_magnifying_glass(amberjack, canary)\n# Rule3: The kiwi becomes an enemy of the lobster whenever at least one animal raises a peace flag for the octopus\nrule3() = raise_flag_of_peace(something, octopus) => enemy(kiwi, lobster)\n# Rule4: If the catfish does not show all her cards to the halibut, then the halibut burns the warehouse of the gecko\nrule4() = not show_cards(catfish, halibut) => burn(warehouse_of(gecko), halibut)\n# Rule5: If the kiwi becomes an enemy of the lobster, then the lobster attacks the green fields of the halibut\nrule5() = enemy(kiwi, lobster) => attack_green_fields(lobster, halibut)\n# Rule6: If at least one animal attacks the green fields whose owner is the goldfish, then the lobster offers a job position to the black bear\nrule6() = attack_green_fields(something, goldfish) => offer_job(lobster, black_bear)\n# Rule7: Regarding the catfish, if it has fewer than six friends, then we can conclude that it does not show her cards (all of them) to the halibut\nrule7() = friends(catfish) < 6 => not show_cards(catfish, halibut)\n# Rule8: If the amberjack steals five points from the halibut and the lobster attacks the green fields of the halibut, then the halibut will not offer a job to the buffalo\nrule8() = steal_points(amberjack, halibut, 5) & attack_green_fields(lobster, halibut) => not offer_job(halibut, buffalo)\n# Rule9: Be careful when something sings a song of victory for the whale and also holds the same number of points as the blobfish because in this case it will surely not steal five of the points of the halibut (this may or may not be problematic)\nrule9(something) = sing_song(something, victory_song_for(whale)) & points(something) == points(blobfish) => not steal_points(something, halibut, 5)\n# Rule10: If something does not give a magnifier to the canary, then it steals five points from the halibut\nrule10(something) = not give_magnifier(something, canary) => steal_points(something, halibut, 5)\n# Rule11: If something burns the warehouse that is in possession of the gecko, then it offers a job position to the buffalo, too\nrule11(something) = burn(warehouse_of(gecko), something) => offer_job(something, buffalo)\n# Rule12: Regarding the lobster, if it has a card whose color starts with the letter \"l\", then we can conclude that it does not offer a job position to the black bear\nrule12() = has(lobster, card_with(color_starting_with(\"l\"))) => not offer_job(lobster, black_bear)\n# Rule13: The amberjack unquestionably holds the same number of points as the blobfish, in the case where the dog learns the basics of resource management from the amberjack\nrule13() = learn_basics_of_resource_management(dog, amberjack) => points(amberjack) == points(blobfish)\n# Rule14: If you are positive that you saw one of the animals offers a job to the black bear, you can be certain that it will not attack the green fields whose owner is the halibut.\nrule14(something) = offer_job(something, black_bear) => not attack_green_fields(something, halibut)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule12 is preferred over Rule6\norder(rule12) > order(rule6) = True\n# Rule5 is preferred over Rule14\norder(rule5) > order(rule14) = True\n# Rule8 is preferred over Rule11\norder(rule8) > order(rule11) = True\n# Rule9 is preferred over Rule10\norder(rule9) > order(rule10) = True\n\n# The current state of the game is as follows\n# The amberjack has a backpack\nhas(amberjack, backpack) = True\n# The catfish has three friends\nfriends(catfish) = 3\n# The dog learns the basics of resource management from the amberjack\nlearn_basics_of_resource_management(dog, amberjack) = True\n# The kangaroo attacks the green fields whose owner is the goldfish\nattack_green_fields(kangaroo, goldfish) = True\n# The lobster has a card that is black in color\nhas(lobster, card_with(black_color)) = True\n# The mosquito raises a peace flag for the octopus\nraise_flag_of_peace(mosquito, octopus) = True\n# The snail is named Lucy\nname(snail, Lucy) = True\n\n# Based on the game state and the rules and preferences, does the halibut offer a job to the buffalo?\nquestion = offer_job(halibut, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion has something to sit on, then it shows all her cards to the penguin\nRule2: If the buffalo sings a victory song for the starfish and the penguin does not hold an equal number of points as the starfish, then the starfish knows the defensive plans of the eel\nRule3: If the pig killed the mayor, then it does not give a magnifier to the squirrel\nRule4: If something owes money to the panda bear but does not become an actual enemy of the buffalo, then it does not know the defensive plans of the eel\nRule5: If the blobfish has a card whose color is one of the rainbow colors, then it respects the starfish\nRule6: If the blobfish respects the starfish, then the starfish becomes an enemy of the buffalo\nRule7: If the pig has a card whose color is one of the rainbow colors, then the pig gives a magnifying glass to the squirrel\nRule8: If the buffalo has a name whose first letter is the same as the first letter of the crocodile's name, then the buffalo does not burn the warehouse of the salmon\nRule9: If the pig has a leafy green vegetable, then it does not give a magnifying glass to the squirrel\nRule10: The starfish does not become an enemy of the buffalo whenever at least one animal proceeds to the spot that is right after the spot of the canary\nRule11: If the blobfish created a time machine, then the blobfish respects the starfish\nRule12: The penguin holds the same number of points as the starfish, in the case where the lion shows her cards to the penguin\nRule13: If you are positive that one of the animals proceeds to the spot that is right after the spot of the mosquito, you can be certain that it will not hold an equal number of points as the starfish\nRule14: If the penguin has more than ten friends, then it proceeds to the spot right after the mosquito\nRule15: The tiger does not proceed to the spot that is right after the spot of the canary, in the case where the swordfish prepares armor for the tiger\nRule16: If you are positive that one of the animals does not burn the warehouse of the salmon, you can be certain that it will become an enemy of the starfish without a doubt\nRule17: If the tiger has a card with a primary color, then it proceeds to the spot that is right after the spot of the canary\n\nRule10 is preferred over Rule6\nRule13 is preferred over Rule12\nRule17 is preferred over Rule15\nRule3 is preferred over Rule7\nRule4 is preferred over Rule2\nRule9 is preferred over Rule7\n\nThe current state of the game is as follows\nThe blobfish dreamed of a luxury aircraft\nThe blobfish has a card that is black in color\nThe buffalo is named Teddy\nThe crocodile is named Tango\nThe lion has a couch\nThe penguin has 17 friends\nThe pig has a card that is indigo in color\nThe pig has hot chocolate\nThe swordfish prepares armor for the tiger\nThe tiger has a card that is red in color\n\nBased on the game state and the rules and preferences, does the starfish know the defensive plans of the eel?\nQuestion: Does the starfish know the defensive plans of the eel?",
        "idx": 203,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the lion, if it has something to sit on, then we can conclude that it shows all her cards to the penguin\nrule1() = has(lion, something_to_sit_on) => show_cards(lion, penguin)\n# Rule2: If the buffalo sings a victory song for the starfish and the penguin does not hold an equal number of points as the starfish, then, inevitably, the starfish knows the defensive plans of the eel\nrule2() = sing_song(buffalo, victory_song_for(starfish)) & not equal_points(penguin, starfish) => knows(defensive_plans_of(eel), starfish)\n# Rule3: Regarding the pig, if it killed the mayor, then we can conclude that it does not give a magnifier to the squirrel\nrule3() = killed(pig, mayor) => not give_magnifier(pig, squirrel)\n# Rule4: If you see that something owes money to the panda bear but does not become an actual enemy of the buffalo, what can you certainly conclude? You can conclude that it does not know the defensive plans of the eel\nrule4(something) = owes_money_to(something, panda_bear) & not enemy(something, buffalo) => not knows(defensive_plans_of(eel), something)\n# Rule5: Regarding the blobfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it respects the starfish\nrule5() = has(blobfish, card_with(rainbow_color)) => respects(blobfish, starfish)\n# Rule6: If the blobfish respects the starfish, then the starfish becomes an enemy of the buffalo\nrule6() = respects(blobfish, starfish) => enemy(starfish, buffalo)\n# Rule7: If the pig has a card whose color is one of the rainbow colors, then the pig gives a magnifying glass to the squirrel\nrule7() = has(pig, card_with(rainbow_color)) => give_magnifier(pig, squirrel)\n# Rule8: If the buffalo has a name whose first letter is the same as the first letter of the crocodile's name, then the buffalo does not burn the warehouse of the salmon\nrule8() = first_letter_of(name(buffalo)) == first_letter_of(name(crocodile)) => not burn_warehouse(buffalo, salmon)\n# Rule9: Regarding the pig, if it has a leafy green vegetable, then we can conclude that it does not give a magnifier to the squirrel\nrule9() = has(pig, leafy_green_vegetable) => not give_magnifier(pig, squirrel)\n# Rule10: The starfish does not become an enemy of the buffalo whenever at least one animal proceeds to the spot that is right after the spot of the canary\nrule10() = proceed(something, spot_right_after(spot_of(canary))) => not enemy(starfish, buffalo)\n# Rule11: If the blobfish created a time machine, then the blobfish respects the starfish\nrule11() = created_time_machine(blobfish) => respects(blobfish, starfish)\n# Rule12: The penguin unquestionably holds the same number of points as the starfish, in the case where the lion shows her cards (all of them) to the penguin\nrule12() = show_cards(lion, penguin) => equal_points(penguin, starfish)\n# Rule13: If you are positive that you saw one of the animals proceeds to the spot that is right after the spot of the mosquito, you can be certain that it will not hold an equal number of points as the starfish\nrule13(something) = proceed(something, spot_right_after(spot_of(mosquito))) => not equal_points(something, starfish)\n# Rule14: Regarding the penguin, if it has more than ten friends, then we can conclude that it proceeds to the spot right after the mosquito\nrule14() = friends(penguin) > 10 => proceed(penguin, spot_right_after(spot_of(mosquito)))\n# Rule15: The tiger does not proceed to the spot that is right after the spot of the canary, in the case where the swordfish prepares armor for the tiger\nrule15() = prepare_armor(swordfish, tiger) => not proceed(tiger, spot_right_after(spot_of(canary)))\n# Rule16: If you are positive that one of the animals does not burn the warehouse of the salmon, you can be certain that it will become an enemy of the starfish without a doubt\nrule16(something) = not burn_warehouse(something, salmon) => enemy(starfish, something)\n# Rule17: Regarding the tiger, if it has a card with a primary color, then we can conclude that it proceeds to the spot that is right after the spot of the canary.\nrule17() = has(tiger, card_with(primary_color)) => proceed(tiger, spot_right_after(spot_of(canary)))\n# Rule10 is preferred over Rule6\norder(rule10) > order(rule6) = True\n# Rule13 is preferred over Rule12\norder(rule13) > order(rule12) = True\n# Rule17 is preferred over Rule15\norder(rule17) > order(rule15) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule9 is preferred over Rule7\norder(rule9) > order(rule7) = True\n\n# The current state of the game is as follows\n# The blobfish dreamed of a luxury aircraft\ndreamed(blobfish, luxury_aircraft) = True\n# The blobfish has a card that is black in color\nhas(blobfish, card_with(black_color)) = True\n# The buffalo is named Teddy\nname(buffalo, Teddy) = True\n# The crocodile is named Tango\nname(crocodile, Tango) = True\n# The lion has a couch\nhas(lion, couch) = True\n# The penguin has 17 friends\nfriends(penguin) = 17\n# The pig has a card that is indigo in color\nhas(pig, card_with(indigo_color)) = True\n# The pig has a hot chocolate\nhas(pig, hot_chocolate) = True\n# The swordfish prepares armor for the tiger\nprepare_armor(swordfish, tiger) = True\n# The tiger has a card that is red in color\nhas(tiger, card_with(red_color)) = True\n\n# Based on the game state and the rules and preferences, does the starfish know the defensive plans of the eel?\nquestion = knows(defensive_plans_of(eel), starfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the panda bear starts with the same letter as the name of the hare, then the panda bear gives a magnifier to the tilapia\nRule2: If at least one animal proceeds to the spot right after the spot of the kangaroo, then the kiwi gives a magnifying glass to the squid\nRule3: If an animal gives a magnifier to the tilapia, then it proceeds to the spot right after the spot of the kangaroo\nRule4: If the panda bear has a card with a color that appears in the flag of Italy, then the panda bear gives a magnifier to the tilapia\n\nThe current state of the game is as follows\nThe hare is named Lola\nThe panda bear has a card that is green in color\nThe panda bear is named Milo\n\nBased on the game state and the rules and preferences, does the kiwi give a magnifier to the squid?\nQuestion: Does the kiwi give a magnifier to the squid?",
        "idx": 204,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the panda bear, if it has a name whose first letter is the same as the first letter of the hare's name, then we can conclude that it gives a magnifier to the tilapia\nrule1() = first_letter_of(name(panda_bear)) == first_letter_of(name(hare)) => give_magnifier(panda_bear, tilapia)\n# Rule2: If at least one animal proceeds to the spot that is right after the spot of the kangaroo, then the kiwi gives a magnifying glass to the squid\nrule2() = proceed_to_spot_right_after(spot_of(kangaroo), something) => give_magnifying_glass(kiwi, squid)\n# Rule3: If you are positive that you saw one of the animals gives a magnifier to the tilapia, you can be certain that it will also proceed to the spot that is right after the spot of the kangaroo\nrule3(something) = give_magnifier(something, tilapia) => proceed_to_spot_right_after(spot_of(kangaroo), something)\n# Rule4: If the panda bear has a card whose color appears in the flag of Italy, then the panda bear gives a magnifier to the tilapia.\nrule4() = has(panda_bear, card_with(color)) & color in colors_of_Italy_flag => give_magnifier(panda_bear, tilapia)\n\n# The current state of the game is as follows\n# The hare is named Lola\nname(hare, Lola) = True\n# The panda bear has a card that is green in color\nhas(panda_bear, card_with(green_color)) = True\n# The panda bear is named Milo\nname(panda_bear, Milo) = True\n\n# Based on the game state and the rules and preferences, does the kiwi give a magnifier to the squid?\nquestion = give_magnifier(kiwi, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the phoenix does not roll the dice for the halibut but the leopard winks at the halibut, then the halibut will not sing a victory song for the catfish\nRule2: If the halibut purchased a time machine, then it does not give a magnifier to the gecko\nRule3: If the halibut has something to drink, then it gives a magnifier to the gecko\nRule4: The phoenix rolls the dice for the halibut, in the case where the baboon does not remove one of the pieces of the phoenix\nRule5: The polar bear eats the food that belongs to the oscar whenever at least one animal winks at the puffin\nRule6: The halibut removes from the board one of the pieces of the jellyfish whenever at least one animal holds an equal number of points as the panther\nRule7: The halibut sings a victory song for the catfish whenever at least one animal eats the food that belongs to the caterpillar\nRule8: The halibut does not need support from the canary whenever at least one animal eats the food of the oscar\nRule9: If the starfish has a card whose color starts with the letter \"e\", then the starfish eats the food that belongs to the caterpillar\nRule10: If something sings a victory song for the catfish but does not need support from the canary, then it does not remove from the board one of the pieces of the jellyfish\nRule11: If something proceeds to the spot right after the sun bear, then it does not roll the dice for the halibut\nRule12: If the starfish has a name whose first letter is the same as the first letter of the squirrel's name, then the starfish eats the food that belongs to the caterpillar\n\nRule1 is preferred over Rule7\nRule3 is preferred over Rule2\nRule4 is preferred over Rule11\nRule6 is preferred over Rule10\n\nThe current state of the game is as follows\nThe halibut has a beer and a blade\nThe halibut invented a time machine\nThe mosquito winks at the puffin\nThe phoenix proceeds to the spot right after the sun bear\nThe squirrel is named Casper\nThe starfish has a card that is red in color, is named Cinnamon, and does not learn the basics of resource management from the tiger\n\nBased on the game state and the rules and preferences, does the halibut remove from the board one of the pieces of the jellyfish?\nQuestion: Does the halibut remove from the board one of the pieces of the jellyfish?",
        "idx": 205,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the phoenix does not roll the dice for the halibut however the leopard winks at the halibut, then the halibut will not sing a victory song for the catfish\nrule1() = not roll_dice(phoenix, halibut) & wink(leopard, halibut) => not sing_song(halibut, victory_song_for(catfish))\n# Rule2: If the halibut purchased a time machine, then the halibut does not give a magnifier to the gecko\nrule2() = purchased(halibut, time_machine) => not give(halibut, magnifier, gecko)\n# Rule3: Regarding the halibut, if it has something to drink, then we can conclude that it gives a magnifier to the gecko\nrule3() = has(halibut, drink) => give(halibut, magnifier, gecko)\n# Rule4: The phoenix unquestionably rolls the dice for the halibut, in the case where the baboon does not remove one of the pieces of the phoenix\nrule4() = not remove(baboon, piece_of(phoenix)) => roll_dice(phoenix, halibut)\n# Rule5: The polar bear eats the food that belongs to the oscar whenever at least one animal winks at the puffin\nrule5() = wink(something, puffin) => eat_food(polar_bear, food_of(oscar))\n# Rule6: The halibut removes from the board one of the pieces of the jellyfish whenever at least one animal holds an equal number of points as the panther\nrule6() = holds_equal_points(something, panther) => remove(halibut, piece_of(jellyfish))\n# Rule7: The halibut sings a victory song for the catfish whenever at least one animal eats the food that belongs to the caterpillar\nrule7() = eat_food(something, food_of(caterpillar)) => sing_song(halibut, victory_song_for(catfish))\n# Rule8: The halibut does not need support from the canary whenever at least one animal eats the food of the oscar\nrule8() = eat_food(something, food_of(oscar)) => not need_support(halibut, canary)\n# Rule9: If the starfish has a card whose color starts with the letter \"e\", then the starfish eats the food that belongs to the caterpillar\nrule9() = has(starfish, card_with(color_starting_with(\"e\"))) => eat_food(starfish, food_of(caterpillar))\n# Rule10: If you see that something sings a victory song for the catfish but does not need support from the canary, what can you certainly conclude? You can conclude that it does not remove from the board one of the pieces of the jellyfish\nrule10(something) = sing_song(something, victory_song_for(catfish)) & not need_support(something, canary) => not remove(something, piece_of(jellyfish))\n# Rule11: If something proceeds to the spot right after the sun bear, then it does not roll the dice for the halibut\nrule11(something) = proceed(something, spot_right_after(spot_of(sun_bear))) => not roll_dice(something, halibut)\n# Rule12: If the starfish has a name whose first letter is the same as the first letter of the squirrel's name, then the starfish eats the food that belongs to the caterpillar.\nrule12() = first_letter_of(name(starfish)) == first_letter_of(name(squirrel)) => eat_food(starfish, food_of(caterpillar))\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule4 is preferred over Rule11\norder(rule4) > order(rule11) = True\n# Rule6 is preferred over Rule10\norder(rule6) > order(rule10) = True\n\n# The current state of the game is as follows\n# The halibut has a beer, and has a blade\nhas(halibut, beer) = True\nhas(halibut, blade) = True\n# The halibut invented a time machine\ninvented(halibut, time_machine) = True\n# The mosquito winks at the puffin\nwink(mosquito, puffin) = True\n# The phoenix proceeds to the spot right after the sun bear\nproceed(phoenix, spot_right_after(spot_of(sun_bear))) = True\n# The squirrel is named Casper\nname(squirrel, Casper) = True\n# The starfish has a card that is red in color, is named Cinnamon, and does not learn the basics of resource management from the tiger.\nhas(starfish, card_with(red_color)) = True\nname(starfish, Cinnamon) = True\nnot learn_basics_of_resource_management_from(starfish, tiger) = True\n\n# Based on the game state and the rules and preferences, does the halibut remove from the board one of the pieces of the jellyfish?\nquestion = remove(halibut, piece_of(jellyfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hippopotamus has a card whose color starts with the letter \"r\", then it offers a job position to the halibut\nRule2: If the hippopotamus has more than 10 friends, then it offers a job position to the halibut\nRule3: The halibut unquestionably learns the basics of resource management from the carp, in the case where the whale rolls the dice for the halibut\nRule4: If the hippopotamus offers a job position to the halibut and the rabbit does not know the defensive plans of the halibut, then the halibut shows all her cards to the tiger\nRule5: If an animal does not hold the same number of points as the puffin, then it does not know the defense plan of the halibut\nRule6: If something learns the basics of resource management from the carp, then it attacks the green fields of the hummingbird\nRule7: If something attacks the green fields whose owner is the hummingbird and shows all her cards to the tiger, then it also attacks the green fields of the kangaroo\n\nThe current state of the game is as follows\nThe hippopotamus has a card that is red in color\nThe hippopotamus has one friend\nThe rabbit does not hold the same number of points as the puffin\nThe whale does not roll the dice for the halibut\n\nBased on the game state and the rules and preferences, does the halibut attack the green fields whose owner is the kangaroo?\nQuestion: Does the halibut attack the green fields whose owner is the kangaroo?",
        "idx": 206,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hippopotamus, if it has a card whose color starts with the letter \"r\", then we can conclude that it offers a job position to the halibut\nrule1() = has(hippopotamus, card_with(color_starting_with(\"r\"))) => offer_job_position(hippopotamus, halibut)\n# Rule2: If the hippopotamus has more than 10 friends, then the hippopotamus offers a job to the halibut\nrule2() = friends(hippopotamus) > 10 => offer_job_position(hippopotamus, halibut)\n# Rule3: The halibut unquestionably learns the basics of resource management from the carp, in the case where the whale rolls the dice for the halibut\nrule3() = roll_dice(whale, halibut) => learn_basics_of_resource_management(halibut, carp)\n# Rule4: For the halibut, if the belief is that the hippopotamus offers a job to the halibut and the rabbit does not know the defensive plans of the halibut, then you can add \"the halibut shows all her cards to the tiger\" to your conclusions\nrule4() = offer_job_position(hippopotamus, halibut) & not knows(defensive_plans_of(halibut), rabbit) => show_cards(halibut, tiger)\n# Rule5: If you are positive that one of the animals does not hold the same number of points as the puffin, you can be certain that it will not know the defense plan of the halibut\nrule5(something) = not holds_same_number_of_points_as(something, puffin) => not knows(defense_plan_of(halibut), something)\n# Rule6: If something learns the basics of resource management from the carp, then it attacks the green fields of the hummingbird, too\nrule6(something) = learn_basics_of_resource_management(something, carp) => attack_green_fields(something, hummingbird)\n# Rule7: If you see that something attacks the green fields whose owner is the hummingbird and shows all her cards to the tiger, what can you certainly conclude? You can conclude that it also attacks the green fields of the kangaroo.\nrule7() = attack_green_fields(something, hummingbird) & show_cards(something, tiger) => attack_green_fields(something, kangaroo)\n\n# The current state of the game is as follows\n# The hippopotamus has a card that is red in color\nhas(hippopotamus, card_with(red_color)) = True\n# The hippopotamus has one friend\nfriends(hippopotamus) = 1\n# The rabbit does not hold the same number of points as the puffin\nholds_same_number_of_points_as(rabbit, puffin) = False\n# The whale does not roll the dice for the halibut\nroll_dice(whale, halibut) = False\n\n# Based on the game state and the rules and preferences, does the halibut attack the green fields whose owner is the kangaroo?\nquestion = attack_green_fields(halibut, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tiger has fewer than fifteen friends, then it does not raise a peace flag for the panther\nRule2: If something holds the same number of points as the starfish and shows all her cards to the sheep, then it removes one of the pieces of the jellyfish\nRule3: If the tiger does not raise a peace flag for the panther but the kangaroo respects the panther, then the panther holds the same number of points as the starfish\nRule4: If the mosquito has more than three friends, then it eats the food of the canary\nRule5: If something does not give a magnifier to the salmon, then it does not know the defensive plans of the sheep\nRule6: The canary owes money to the sun bear whenever at least one animal becomes an enemy of the hare\nRule7: If the baboon has a card with a primary color, then it becomes an enemy of the hare\nRule8: If at least one animal holds an equal number of points as the lobster, then the baboon does not become an enemy of the hare\nRule9: If the mosquito has something to carry apples and oranges, then it eats the food of the canary\nRule10: If you see one of the animals attack the green fields owned by the cow, then it knows the defensive plans of the viperfish\nRule11: The kangaroo respects the panther whenever at least one animal owes money to the spider\nRule12: If the tiger does not owe money to the panther, then the panther does not hold the same number of points as the starfish\nRule13: The panther shows all her cards to the sheep whenever at least one animal knows the defense plan of the viperfish\n\nRule12 is preferred over Rule3\nRule8 is preferred over Rule7\n\nThe current state of the game is as follows\nThe baboon has a card that is green in color\nThe crocodile owes money to the spider\nThe meerkat attacks the green fields owned by the cow\nThe mosquito has a cell phone\nThe mosquito has thirteen friends\nThe tiger has 7 wise friends and 1 non-wise friend\nThe panther does not give a magnifier to the salmon\n\nBased on the game state and the rules and preferences, does the panther remove from the board one of the pieces of the jellyfish?\nQuestion: Does the panther remove one of the pieces of the jellyfish?",
        "idx": 207,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the tiger, if it has fewer than fifteen friends, then we can conclude that it does not raise a peace flag for the panther\nrule1() = friends(tiger) < 15 => not raise_flag_of_peace(tiger, panther)\n# Rule2: Be careful when something holds the same number of points as the starfish and also shows all her cards to the sheep because in this case it will surely remove one of the pieces of the jellyfish (this may or may not be problematic)\nrule2(something) = points(something) == points(starfish) & show_cards(something, sheep) => remove(something, piece_of(jellyfish))\n# Rule3: If the tiger does not raise a peace flag for the panther but the kangaroo respects the panther, then the panther holds the same number of points as the starfish unavoidably\nrule3() = not raise_flag_of_peace(tiger, panther) & respects(kangaroo, panther) => points(panther) == points(starfish)\n# Rule4: If the mosquito has more than three friends, then the mosquito eats the food of the canary\nrule4() = friends(mosquito) > 3 => eat_food(mosquito, canary)\n# Rule5: If something does not give a magnifier to the salmon, then it does not know the defensive plans of the sheep\nrule5(something) = not give_magnifier(something, salmon) => not knows_defensive_plans(something, sheep)\n# Rule6: The canary owes money to the sun bear whenever at least one animal becomes an enemy of the hare\nrule6() = enemy(something, hare) => owes_money_to(canary, sun_bear)\n# Rule7: If the baboon has a card with a primary color, then the baboon becomes an enemy of the hare\nrule7() = has(baboon, card_with(primary_color)) => enemy(baboon, hare)\n# Rule8: The baboon does not become an actual enemy of the hare whenever at least one animal holds an equal number of points as the lobster\nrule8() = points(something) == points(lobster) => not enemy(baboon, hare)\n# Rule9: Regarding the mosquito, if it has something to carry apples and oranges, then we can conclude that it eats the food that belongs to the canary\nrule9() = has(mosquito, carrier_of(apples_and_oranges)) => eat_food(mosquito, canary)\n# Rule10: If you are positive that you saw one of the animals attacks the green fields whose owner is the cow, you can be certain that it will also know the defensive plans of the viperfish\nrule10() = attack(green_fields_of(cow), something) => knows_defensive_plans(something, viperfish)\n# Rule11: The kangaroo respects the panther whenever at least one animal owes money to the spider\nrule11() = owes_money_to(something, spider) => respects(kangaroo, panther)\n# Rule12: If the tiger does not owe $$$ to the panther, then the panther does not hold the same number of points as the starfish\nrule12() = not owes_money_to(tiger, panther) => points(panther) != points(starfish)\n# Rule13: The panther shows all her cards to the sheep whenever at least one animal knows the defense plan of the viperfish.\nrule13() = knows_defense_plan(something, viperfish) => show_cards(panther, sheep)\n# Rule12 is preferred over Rule3\norder(rule12) > order(rule3) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n\n# The current state of the game is as follows\n# The baboon has a card that is green in color\nhas(baboon, card_with(green_color)) = True\n# The crocodile owes money to the spider\nowes_money_to(crocodile, spider) = True\n# The meerkat attacks the green fields whose owner is the cow\nattack(green_fields_of(cow), meerkat) = True\n# The mosquito has a cell phone\nhas(mosquito, cell_phone) = True\n# The mosquito has thirteen friends\nfriends(mosquito) = 13\n# The tiger has 7 friends that are wise and 1 friend that is not\nfriends(tiger) = 8\n# The panther does not give a magnifier to the salmon\nnot give_magnifier(panther, salmon) = True\n\n# Based on the game state and the rules and preferences, does the panther remove from the board one of the pieces of the jellyfish?\nquestion = remove(panther, piece_of(jellyfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the spider does not proceed to the spot right after the hare, then the hare does not sing a song of victory for the cat\nRule2: If something rolls the dice for the panda bear, then it winks at the phoenix, too\nRule3: If the black bear attacks the green fields of the hare and the gecko respects the hare, then the hare sings a victory song for the cat\nRule4: If the black bear has a name whose first letter is the same as the first letter of the hippopotamus's name, then the black bear attacks the green fields of the hare\nRule5: If the gecko has fewer than 19 friends, then the gecko respects the hare\nRule6: If something sings a song of victory for the cat and winks at the phoenix, then it does not prepare armor for the carp\nRule7: If one of the animals owes money to the kangaroo, then it rolls the dice for the panda bear\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe black bear is named Beauty\nThe gecko has 9 friends and learns the basics of resource management from the wolverine\nThe hare owes money to the kangaroo\nThe hippopotamus is named Buddy\n\nBased on the game state and the rules and preferences, does the hare prepare armor for the carp?\nQuestion: Does the hare prepare armor for the carp?",
        "idx": 208,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the spider does not proceed to the spot right after the hare, then the hare does not sing a song of victory for the cat\nrule1() = not proceed(spider, spot_right_after(hare)) => not sing_song(hare, victory_song_for(cat))\n# Rule2: If something rolls the dice for the panda bear, then it winks at the phoenix, too\nrule2() = roll_dice_for(something, panda_bear) => wink_at(something, phoenix)\n# Rule3: If the black bear attacks the green fields of the hare and the gecko respects the hare, then the hare sings a victory song for the cat\nrule3() = attack_green_fields(black_bear, hare) & respects(gecko, hare) => sing_song(hare, victory_song_for(cat))\n# Rule4: If the black bear has a name whose first letter is the same as the first letter of the hippopotamus's name, then the black bear attacks the green fields of the hare\nrule4() = first_letter_of(name(black_bear)) == first_letter_of(name(hippopotamus)) => attack_green_fields(black_bear, hare)\n# Rule5: If the gecko has fewer than 19 friends, then the gecko respects the hare\nrule5() = friends(gecko) < 19 => respects(gecko, hare)\n# Rule6: If you see that something sings a song of victory for the cat and winks at the phoenix, what can you certainly conclude? You can conclude that it does not prepare armor for the carp\nrule6(something) = sing_song(something, victory_song_for(cat)) & wink_at(something, phoenix) => not prepare_armor(something, carp)\n# Rule7: If you are positive that you saw one of the animals owes money to the kangaroo, you can be certain that it will also roll the dice for the panda bear.\nrule7() = owes_money_to(something, kangaroo) => roll_dice_for(something, panda_bear)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The black bear is named Beauty\nname(black_bear, Beauty) = True\n# The gecko has 9 friends, and learns the basics of resource management from the wolverine\nfriends(gecko) = 9\nlearn_basics_of_resource_management(gecko, wolverine) = True\n# The hare owes money to the kangaroo\nowes_money_to(hare, kangaroo) = True\n# The hippopotamus is named Buddy\nname(hippopotamus, Buddy) = True\n\n# Based on the game state and the rules and preferences, does the hare prepare armor for the carp?\nquestion = prepare_armor(hare, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The octopus offers a job position to the carp whenever at least one animal needs support from the leopard\nRule2: If the hare has a name whose first letter is the same as the first letter of the panda bear's name, then the hare burns the warehouse that is in possession of the eel\nRule3: If the hare burns the warehouse of the eel, then the eel respects the leopard.\n\nThe current state of the game is as follows\nThe hare is named Blossom\nThe panda bear is named Buddy\nThe eagle does not sing a victory song for the hare\n\nBased on the game state and the rules and preferences, does the octopus offer a job to the carp?\nQuestion: Does the octopus offer a job position to the carp?",
        "idx": 209,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The octopus offers a job position to the carp whenever at least one animal needs support from the leopard\nrule1() = needs_support(something, leopard) => offer_job_position(octopus, carp)\n# Rule2: If the hare has a name whose first letter is the same as the first letter of the panda bear's name, then the hare burns the warehouse that is in possession of the eel\nrule2() = first_letter_of(name(hare)) == first_letter_of(name(panda_bear)) => burn(warehouse_of(eel), hare)\n# Rule3: If the hare burns the warehouse of the eel, then the eel respects the leopard.\nrule3() = burn(warehouse_of(eel), hare) => respects(eel, leopard)\n\n# The current state of the game is as follows\n# The hare is named Blossom\nname(hare, Blossom) = True\n# The panda bear is named Buddy\nname(panda_bear, Buddy) = True\n# The eagle does not sing a victory song for the hare\nnot sing_song(eagle, victory_song_for(hare)) = True\n\n# Based on the game state and the rules and preferences, does the octopus offer a job to the carp?\nquestion = offer_job_position(octopus, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the ferret has a leafy green vegetable, then it does not learn the basics of resource management from the octopus\nRule2: The ferret shows all her cards to the meerkat whenever at least one animal respects the hummingbird\nRule3: The ferret does not show all her cards to the meerkat, in the case where the doctorfish proceeds to the spot right after the ferret\nRule4: If the wolverine killed the mayor, then it offers a job to the squid\nRule5: If the ferret took a bike from the store, then it does not learn elementary resource management from the octopus\nRule6: If the ferret learns the basics of resource management from the jellyfish and the squid attacks the green fields owned by the jellyfish, then the jellyfish rolls the dice for the puffin\nRule7: If the wolverine has fewer than 9 friends, then it offers a job to the squid\nRule8: The squid attacks the green fields owned by the jellyfish, in the case where the wolverine offers a job to the squid\nRule9: If something shows all her cards to the meerkat but does not learn the basics of resource management from the octopus, then it learns the basics of resource management from the jellyfish\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe black bear holds the same number of points as the wolverine\nThe donkey respects the hummingbird\nThe ferret has a backpack\nThe ferret stole a bike from the store\nThe wolverine assassinated the mayor and has 14 friends\n\nBased on the game state and the rules and preferences, does the jellyfish roll the dice for the puffin?\nQuestion: Does the jellyfish roll the dice for the puffin?",
        "idx": 210,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the ferret, if it has a leafy green vegetable, then we can conclude that it does not learn the basics of resource management from the octopus\nrule1() = has(ferret, leafy_green_vegetable) => not learn_basics_of_resource_management(ferret, octopus)\n# Rule2: The ferret shows all her cards to the meerkat whenever at least one animal respects the hummingbird\nrule2() = respects(something, hummingbird) => show_all_cards(ferret, meerkat)\n# Rule3: The ferret does not show all her cards to the meerkat, in the case where the doctorfish proceeds to the spot right after the ferret\nrule3() = proceed(doctorfish, spot_right_after(ferret)) => not show_all_cards(ferret, meerkat)\n# Rule4: Regarding the wolverine, if it killed the mayor, then we can conclude that it offers a job to the squid\nrule4() = killed(wolverine, mayor) => offer_job(wolverine, squid)\n# Rule5: Regarding the ferret, if it took a bike from the store, then we can conclude that it does not learn elementary resource management from the octopus\nrule5() = took(ferret, bike_from(store)) => not learn_elementary_resource_management(ferret, octopus)\n# Rule6: If the ferret learns the basics of resource management from the jellyfish and the squid attacks the green fields whose owner is the jellyfish, then the jellyfish rolls the dice for the puffin\nrule6() = learn_basics_of_resource_management(ferret, jellyfish) & attacks(squid, green_fields_of(jellyfish)) => roll_dice(jellyfish, puffin)\n# Rule7: Regarding the wolverine, if it has fewer than 9 friends, then we can conclude that it offers a job to the squid\nrule7() = friends(wolverine) < 9 => offer_job(wolverine, squid)\n# Rule8: The squid unquestionably attacks the green fields whose owner is the jellyfish, in the case where the wolverine offers a job to the squid\nrule8() = offer_job(wolverine, squid) => attacks(squid, green_fields_of(jellyfish))\n# Rule9: Be careful when something shows all her cards to the meerkat but does not learn the basics of resource management from the octopus because in this case it will, surely, learn the basics of resource management from the jellyfish (this may or may not be problematic).\nrule9() = show_all_cards(something, meerkat) & not learn_basics_of_resource_management(something, octopus) => learn_basics_of_resource_management(something, jellyfish)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The black bear holds the same number of points as the wolverine\npoints(black_bear) == points(wolverine) = True\n# The donkey respects the hummingbird\nrespects(donkey, hummingbird) = True\n# The ferret has a backpack\nhas(ferret, backpack) = True\n# The ferret stole a bike from the store\ntook(ferret, bike_from(store)) = True\n# The wolverine assassinated the mayor, and has 14 friends\nkilled(wolverine, mayor) = True\nfriends(wolverine) == 14 = True\n\n# Based on the game state and the rules and preferences, does the jellyfish roll the dice for the puffin?\nquestion = roll_dice(jellyfish, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal raises a peace flag for the hare, then the pig owes money to the rabbit\nRule2: If the starfish works fewer hours than before, then it does not learn elementary resource management from the hare\nRule3: If the kangaroo learns the basics of resource management from the hare and the starfish learns elementary resource management from the hare, then the hare learns the basics of resource management from the pig\nRule4: If you see one of the animals proceed to the spot right after the wolverine, then it will learn the basics of resource management from the hare\nRule5: If the hare learns elementary resource management from the pig, then the pig does not owe money to the rabbit\nRule6: If something removes one of the pieces of the bat from the board, then it also learns elementary resource management from the hare\n\nRule1 is preferred over Rule5\nRule2 is preferred over Rule6\n\nThe current state of the game is as follows\nThe kangaroo proceeds to the spot right after the wolverine\nThe starfish removes one of the pieces of the bat from the board\n\nBased on the game state and the rules and preferences, does the pig owe money to the rabbit?\nQuestion: Does the pig owe money to the rabbit?",
        "idx": 211,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal raises a peace flag for the hare, then the pig owes $$$ to the rabbit\nrule1() = raise_flag_of_peace(something, hare) => owes_money_to(pig, rabbit)\n# Rule2: Regarding the starfish, if it works fewer hours than before, then we can conclude that it does not learn elementary resource management from the hare\nrule2() = reduce_work_hours(starfish) => not learn(starfish, elementary_resource_management_from(hare))\n# Rule3: If the kangaroo learns the basics of resource management from the hare and the starfish learns elementary resource management from the hare, then the hare learns the basics of resource management from the pig\nrule3() = learn(kangaroo, basics_of_resource_management_from(hare)) & learn(starfish, elementary_resource_management_from(hare)) => learn(hare, basics_of_resource_management_from(pig))\n# Rule4: If you are positive that you saw one of the animals proceeds to the spot right after the wolverine, you can be certain that it will also learn the basics of resource management from the hare\nrule4(something) = proceed(something, spot_right_after(wolverine)) => learn(something, basics_of_resource_management_from(hare))\n# Rule5: The pig does not owe $$$ to the rabbit, in the case where the hare learns elementary resource management from the pig\nrule5() = learn(hare, elementary_resource_management_from(pig)) => not owes_money_to(pig, rabbit)\n# Rule6: If something removes from the board one of the pieces of the bat, then it learns elementary resource management from the hare, too.\nrule6(something) = remove(something, piece_of(bat)) => learn(something, elementary_resource_management_from(hare))\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n\n# The current state of the game is as follows\n# The kangaroo proceeds to the spot right after the wolverine\nproceed(kangaroo, spot_right_after(wolverine)) = True\n# The starfish removes from the board one of the pieces of the bat\nremove(starfish, piece_of(bat)) = True\n\n# Based on the game state and the rules and preferences, does the pig owe money to the rabbit?\nquestion = owes_money_to(pig, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The panther unquestionably learns elementary resource management from the goldfish, in the case where the halibut does not owe money to the panther\nRule2: If the moose does not knock down the fortress that belongs to the baboon, then the baboon removes one of the pieces of the meerkat\nRule3: If at least one animal removes one of the pieces of the meerkat, then the halibut does not owe money to the panther\nRule4: If something does not sing a song of victory for the lobster but becomes an enemy of the whale, then it does not remove one of the pieces of the meerkat\nRule5: If the name of the rabbit starts with the same letter as the name of the cockroach, then the rabbit proceeds to the spot right after the halibut\nRule6: If the rabbit proceeds to the spot right after the halibut and the spider shows all her cards to the halibut, then the halibut owes money to the panther\n\nRule4 is preferred over Rule2\nRule6 is preferred over Rule3\n\nThe current state of the game is as follows\nThe baboon becomes an enemy of the whale\nThe cockroach is named Cinnamon\nThe moose knocks down the fortress of the baboon\nThe rabbit is named Casper\n\nBased on the game state and the rules and preferences, does the panther learn elementary resource management from the goldfish?\nQuestion: Does the panther learn elementary resource management from the goldfish?",
        "idx": 212,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The panther unquestionably learns elementary resource management from the goldfish, in the case where the halibut does not owe $$$ to the panther\nrule1() = not owes_money_to(halibut, panther) => learn_elementary_resource_management(panther, goldfish)\n# Rule2: If the moose does not knock down the fortress that belongs to the baboon, then the baboon removes from the board one of the pieces of the meerkat\nrule2() = not knock_down(moose, fortress_of(baboon)) => remove(baboon, piece_of(meerkat))\n# Rule3: If at least one animal removes one of the pieces of the meerkat, then the halibut does not owe $$$ to the panther\nrule3(something) = remove(something, piece_of(meerkat)) => not owes_money_to(halibut, panther)\n# Rule4: If you see that something does not sing a song of victory for the lobster but it becomes an enemy of the whale, what can you certainly conclude? You can conclude that it is not going to remove from the board one of the pieces of the meerkat\nrule4(something) = not sing_song(something, victory_song_for(lobster)) & enemy(something, whale) => not remove(something, piece_of(meerkat))\n# Rule5: If the rabbit has a name whose first letter is the same as the first letter of the cockroach's name, then the rabbit proceeds to the spot right after the halibut\nrule5() = first_letter_of(name(rabbit)) == first_letter_of(name(cockroach)) => proceed(rabbit, spot_right_after(halibut))\n# Rule6: If the rabbit proceeds to the spot right after the halibut and the spider shows all her cards to the halibut, then the halibut owes money to the panther.\nrule6() = proceed(rabbit, spot_right_after(halibut)) & show_cards(spider, halibut) => owes_money_to(halibut, panther)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n\n# The current state of the game is as follows\n# The baboon becomes an enemy of the whale\nenemy(baboon, whale) = True\n# The cockroach is named Cinnamon\nname(cockroach, Cinnamon) = True\n# The moose knocks down the fortress of the baboon\nknock_down(moose, fortress_of(baboon)) = True\n# The rabbit is named Casper\nname(rabbit, Casper) = True\n\n# Based on the game state and the rules and preferences, does the panther learn the basics of resource management from the goldfish?\nquestion = learn_elementary_resource_management(panther, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The koala steals five points from the salmon, in the case where the turtle burns the warehouse of the koala\nRule2: If something steals five points from the salmon but does not attack the green fields of the baboon, then it rolls the dice for the lion\nRule3: If the name of the turtle starts with the same letter as the name of the panda bear, then the turtle burns the warehouse of the koala\nRule4: If something learns elementary resource management from the grizzly bear, then it does not attack the green fields of the baboon\nRule5: If the sheep holds an equal number of points as the koala and the elephant is not an enemy of the koala, then the koala learns the basics of resource management from the grizzly bear\nRule6: If something holds the same number of points as the black bear, then it does not roll the dice for the lion\n\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe koala has a card that is violet in color\nThe panda bear is named Chickpea\nThe sheep holds the same number of points as the koala\nThe turtle is named Casper\nThe elephant is not an enemy of the koala\n\nBased on the game state and the rules and preferences, does the koala roll the dice for the lion?\nQuestion: Does the koala roll the dice for the lion?",
        "idx": 213,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The koala unquestionably steals five of the points of the salmon, in the case where the turtle burns the warehouse of the koala\nrule1() = burn(warehouse_of(koala), turtle) => steal_points(koala, salmon, 5)\n# Rule2: Be careful when something steals five of the points of the salmon but does not attack the green fields of the baboon because in this case it will, surely, roll the dice for the lion (this may or may not be problematic)\nrule2() = steal_points(something, salmon, 5) & not attack_green_fields(something, baboon) => roll_dice(something, lion)\n# Rule3: If the turtle has a name whose first letter is the same as the first letter of the panda bear's name, then the turtle burns the warehouse that is in possession of the koala\nrule3() = first_letter_of(name(turtle)) == first_letter_of(name(panda_bear)) => burn(warehouse_of(koala), turtle)\n# Rule4: If something learns elementary resource management from the grizzly bear, then it does not attack the green fields of the baboon\nrule4(something) = learn(something, elementary_resource_management_from(grizzly_bear)) => not attack_green_fields(something, baboon)\n# Rule5: If the sheep holds an equal number of points as the koala and the elephant does not become an enemy of the koala, then, inevitably, the koala learns the basics of resource management from the grizzly bear\nrule5() = points(sheep) == points(koala) & not enemy(elephant, koala) => learn_basics_of_resource_management(koala, grizzly_bear)\n# Rule6: If you are positive that you saw one of the animals holds the same number of points as the black bear, you can be certain that it will not roll the dice for the lion.\nrule6(something) = points(something) == points(black_bear) => not roll_dice(something, lion)\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The koala has a card that is violet in color\nhas(koala, card_with(violet_color)) = True\n# The panda bear is named Chickpea\nname(panda_bear, Chickpea) = True\n# The sheep holds the same number of points as the koala\npoints(sheep) == points(koala) = True\n# The turtle is named Casper\nname(turtle, Casper) = True\n# The elephant does not become an enemy of the koala\nnot enemy(elephant, koala) = True\n\n# Based on the game state and the rules and preferences, does the koala roll the dice for the lion?\nquestion = roll_dice(koala, lion)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal offers a job position to the canary, then the oscar does not sing a victory song for the swordfish\nRule2: If at least one animal removes one of the pieces of the lion, then the oscar does not prepare armor for the canary\nRule3: If the black bear has a card with a primary color, then it proceeds to the spot that is right after the spot of the squirrel\nRule4: If the tilapia has a name whose first letter is the same as the first letter of the caterpillar's name, then it does not remove one of the pieces of the lion\nRule5: If at least one animal knows the defensive plans of the cat, then it removes one of the pieces of the lion\nRule6: If the black bear does not proceed to the spot that is right after the spot of the squirrel, then the squirrel offers a job to the canary\nRule7: If the tilapia owns a luxury aircraft, then it does not remove one of the pieces of the lion\nRule8: The black bear does not proceed to the spot right after the squirrel whenever at least one animal shows all her cards to the sea bass\n\nRule3 is preferred over Rule8\nRule4 is preferred over Rule5\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe dog shows all her cards to the sea bass\nThe tilapia dreamed of a luxury aircraft\nThe tilapia is named Max\nThe tilapia knows the defensive plans of the cat\n\nBased on the game state and the rules and preferences, does the oscar sing a victory song for the swordfish?\nQuestion: Does the oscar sing a victory song for the swordfish?",
        "idx": 214,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal offers a job position to the canary, then the oscar does not sing a victory song for the swordfish\nrule1() = offer_job_position(something, canary) => not sing_song(oscar, victory_song_for(swordfish))\n# Rule2: If at least one animal removes one of the pieces of the lion, then the oscar does not prepare armor for the canary\nrule2() = remove(something, piece_of(lion)) => not prepare_armor(oscar, canary)\n# Rule3: Regarding the black bear, if it has a card with a primary color, then we can conclude that it proceeds to the spot that is right after the spot of the squirrel\nrule3() = has(black_bear, card_with(primary_color)) => proceed(black_bear, spot_right_after(spot_of(squirrel)))\n# Rule4: Regarding the tilapia, if it has a name whose first letter is the same as the first letter of the caterpillar's name, then we can conclude that it does not remove from the board one of the pieces of the lion\nrule4() = first_letter_of(name(tilapia)) == first_letter_of(name(caterpillar)) => not remove(tilapia, piece_of(lion))\n# Rule5: If you are positive that you saw one of the animals knows the defensive plans of the cat, you can be certain that it will also remove one of the pieces of the lion\nrule5(something) = knows(defensive_plans_of(cat), something) => remove(something, piece_of(lion))\n# Rule6: If the black bear does not proceed to the spot that is right after the spot of the squirrel, then the squirrel offers a job to the canary\nrule6() = not proceed(black_bear, spot_right_after(spot_of(squirrel))) => offer_job_position(squirrel, canary)\n# Rule7: If the tilapia owns a luxury aircraft, then the tilapia does not remove one of the pieces of the lion\nrule7() = owns(luxury_aircraft, tilapia) => not remove(tilapia, piece_of(lion))\n# Rule8: The black bear does not proceed to the spot right after the squirrel whenever at least one animal shows her cards (all of them) to the sea bass.\nrule8() = show_cards(something, sea_bass) => not proceed(black_bear, spot_right_after(spot_of(squirrel)))\n# Rule3 is preferred over Rule8\norder(rule3) > order(rule8) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The dog shows all her cards to the sea bass\nshow_cards(dog, sea_bass) = True\n# The tilapia dreamed of a luxury aircraft, is named Max, and knows the defensive plans of the cat\ndream(luxury_aircraft, tilapia) = True\nname(tilapia, Max) = True\nknows(defensive_plans_of(cat), tilapia) = True\n\n# Based on the game state and the rules and preferences, does the oscar sing a victory song for the swordfish?\nquestion = sing_song(oscar, victory_song_for(swordfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the polar bear has a card whose color is one of the rainbow colors, then the polar bear burns the warehouse that is in possession of the elephant\nRule2: If at least one animal knows the defense plan of the crocodile, then the parrot removes one of the pieces of the black bear\nRule3: If the polar bear has a sharp object, then it burns the warehouse of the elephant\nRule4: If the wolverine does not have her keys, then it does not eat the food that belongs to the black bear\nRule5: If the wolverine has a name whose first letter is the same as the first letter of the lion's name, then the wolverine does not eat the food that belongs to the black bear\nRule6: If something gives a magnifier to the pig but does not learn elementary resource management from the jellyfish, then it eats the food that belongs to the zander\nRule7: The black bear does not learn the basics of resource management from the jellyfish whenever at least one animal burns the warehouse that is in possession of the elephant\nRule8: If the parrot offers a job to the black bear and the wolverine does not eat the food of the black bear, then the black bear gives a magnifying glass to the pig\nRule9: If something removes one of the pieces of the buffalo, then it eats the food that belongs to the black bear, too.\n\nRule9 is preferred over Rule4\nRule9 is preferred over Rule5\n\nThe current state of the game is as follows\nThe lion is named Paco\nThe panda bear knows the defensive plans of the crocodile\nThe polar bear has a blade\nThe polar bear has a card that is white in color\nThe wolverine is named Tarzan\nThe wolverine lost her keys\n\nBased on the game state and the rules and preferences, does the black bear eat the food of the zander?\nQuestion: Does the black bear eat the food of the zander?",
        "idx": 215,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the polar bear has a card whose color is one of the rainbow colors, then the polar bear burns the warehouse that is in possession of the elephant\nrule1() = has(polar_bear, card_with(color_in(rainbow_colors))) => burn(warehouse_of(elephant))\n# Rule2: If at least one animal knows the defense plan of the crocodile, then the parrot removes one of the pieces of the black bear\nrule2() = knows(defense_plan_of(crocodile), something) => remove(parrot, piece_of(black_bear))\n# Rule3: Regarding the polar bear, if it has a sharp object, then we can conclude that it burns the warehouse of the elephant\nrule3() = has(polar_bear, sharp_object) => burn(warehouse_of(elephant))\n# Rule4: Regarding the wolverine, if it does not have her keys, then we can conclude that it does not eat the food that belongs to the black bear\nrule4() = not has(wolverine, keys) => not eat_food(wolverine, food_of(black_bear))\n# Rule5: If the wolverine has a name whose first letter is the same as the first letter of the lion's name, then the wolverine does not eat the food that belongs to the black bear\nrule5() = first_letter_of(name(wolverine)) == first_letter_of(name(lion)) => not eat_food(wolverine, food_of(black_bear))\n# Rule6: If you see that something gives a magnifier to the pig but does not learn elementary resource management from the jellyfish, what can you certainly conclude? You can conclude that it eats the food that belongs to the zander\nrule6(something) = give(something, magnifier, pig) & not learn(something, elementary_resource_management_from(jellyfish)) => eat_food(something, food_of(zander))\n# Rule7: The black bear does not learn the basics of resource management from the jellyfish whenever at least one animal burns the warehouse that is in possession of the elephant\nrule7() = burn(warehouse_of(elephant), something) => not learn_basics_of_resource_management(black_bear, jellyfish)\n# Rule8: If the parrot offers a job to the black bear and the wolverine does not eat the food of the black bear, then, inevitably, the black bear gives a magnifying glass to the pig\nrule8() = offer_job(parrot, black_bear) & not eat_food(wolverine, food_of(black_bear)) => give(black_bear, magnifying_glass, pig)\n# Rule9: If something removes one of the pieces of the buffalo, then it eats the food that belongs to the black bear, too.\nrule9(something) = remove(something, piece_of(buffalo)) => eat_food(something, food_of(black_bear))\n# Rule9 is preferred over Rule4\norder(rule9) > order(rule4) = True\n# Rule9 is preferred over Rule5\norder(rule9) > order(rule5) = True\n\n# The current state of the game is as follows\n# The lion is named Paco\nname(lion, Paco) = True\n# The panda bear knows the defensive plans of the crocodile\nknows(defensive_plans_of(crocodile), panda_bear) = True\n# The polar bear has a blade, and has a card that is white in color\nhas(polar_bear, blade) = True\nhas(polar_bear, card_with(white_color)) = True\n# The wolverine is named Tarzan\nname(wolverine, Tarzan) = True\n# The wolverine lost her keys\nnot has(wolverine, keys) = True\n\n# Based on the game state and the rules and preferences, does the black bear eat the food of the zander?\nquestion = eat_food(black_bear, food_of(zander))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the koala starts with the first letter of the name of the catfish, then the koala knows the defensive plans of the leopard\nRule2: If the grizzly bear eats the food of the parrot and the squid shows all her cards to the parrot, then the parrot knocks down the fortress of the blobfish\nRule3: If at least one animal knows the defensive plans of the leopard, then the squid shows all her cards to the parrot\nRule4: If the koala has a card whose color appears in the flag of Japan, then it knows the defense plan of the leopard\nRule5: If something offers a job to the turtle, then it eats the food of the parrot as well\nRule6: The grizzly bear offers a job position to the turtle whenever at least one animal becomes an actual enemy of the squid\n\nThe current state of the game is as follows\nThe catfish is named Tarzan\nThe koala has a card that is violet in color\nThe koala is named Tessa\nThe kudu becomes an enemy of the squid\n\nBased on the game state and the rules and preferences, does the parrot knock down the fortress of the blobfish?\nQuestion: Does the parrot knock down the fortress of the blobfish?",
        "idx": 216,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the koala has a name whose first letter is the same as the first letter of the catfish's name, then the koala knows the defensive plans of the leopard\nrule1() = first_letter_of(name(koala)) == first_letter_of(name(catfish)) => knows(defensive_plans_of(leopard), koala)\n# Rule2: For the parrot, if the belief is that the grizzly bear eats the food of the parrot and the squid shows her cards (all of them) to the parrot, then you can add \"the parrot knocks down the fortress of the blobfish\" to your conclusions\nrule2() = belief(grizzly_bear_eats_food_of(parrot)) & show_cards(squid, parrot) => add_conclusion(\"the parrot knocks down the fortress of the blobfish\")\n# Rule3: If at least one animal knows the defensive plans of the leopard, then the squid shows her cards (all of them) to the parrot\nrule3() = knows(defensive_plans_of(leopard), something) => show_cards(squid, parrot)\n# Rule4: Regarding the koala, if it has a card whose color appears in the flag of Japan, then we can conclude that it knows the defense plan of the leopard\nrule4() = has(koala, card_with(color_in_flag_of_Japan)) => knows(defense_plan_of(leopard), koala)\n# Rule5: If something offers a job to the turtle, then it eats the food of the parrot, too\nrule5(something) = offer_job(something, turtle) => eats_food_of(parrot, something)\n# Rule6: The grizzly bear offers a job position to the turtle whenever at least one animal becomes an actual enemy of the squid.\nrule6() = enemy(something, squid) => offer_job(grizzly_bear, turtle)\n\n# The current state of the game is as follows\n# The catfish is named Tarzan\nname(catfish, Tarzan) = True\n# The koala has a card that is violet in color\nhas(koala, card_with(violet_color)) = True\n# The koala is named Tessa\nname(koala, Tessa) = True\n# The kudu becomes an enemy of the squid\nenemy(kudu, squid) = True\n\n# Based on the game state and the rules and preferences, does the parrot knock down the fortress of the blobfish?\nquestion = \"the parrot knocks down the fortress of the blobfish\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the crocodile has a high salary, then it winks at the cat\nRule2: If the blobfish burns the warehouse of the baboon, then the baboon offers a job position to the puffin\nRule3: If the caterpillar does not proceed to the spot right after the baboon, then the baboon does not offer a job position to the puffin\nRule4: If something proceeds to the spot right after the spot of the buffalo, then it respects the baboon\nRule5: If at least one animal winks at the cat, then the baboon steals five points from the leopard\nRule6: If something does not offer a job to the puffin but steals five points from the leopard, then it does not offer a job position to the kudu\nRule7: If the crocodile has a sharp object, then it winks at the cat\nRule8: If the koala holds an equal number of points as the caterpillar, then the caterpillar does not proceed to the spot right after the baboon\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe caterpillar has a trumpet\nThe crocodile got a well-paid job\nThe crocodile has a plastic bag\nThe koala holds the same number of points as the caterpillar\nThe parrot has eight friends, hates Chris Ronaldo, and proceeds to the spot right after the buffalo\n\nBased on the game state and the rules and preferences, does the baboon offer a job to the kudu?\nQuestion: Does the baboon offer a job to the kudu?",
        "idx": 217,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the crocodile, if it has a high salary, then we can conclude that it winks at the cat\nrule1() = has_high_salary(crocodile) => wink(crocodile, cat)\n# Rule2: The baboon unquestionably offers a job position to the puffin, in the case where the blobfish burns the warehouse of the baboon\nrule2() = burn(warehouse_of(baboon), blobfish) => offer_job_position(baboon, puffin)\n# Rule3: If the caterpillar does not proceed to the spot right after the baboon, then the baboon does not offer a job position to the puffin\nrule3() = not proceed(caterpillar, spot_right_after(spot_of(baboon))) => not offer_job_position(baboon, puffin)\n# Rule4: If something proceeds to the spot that is right after the spot of the buffalo, then it respects the baboon, too\nrule4(something) = proceed(something, spot_right_after(spot_of(buffalo))) => respect(something, baboon)\n# Rule5: If at least one animal winks at the cat, then the baboon steals five points from the leopard\nrule5() = wink(something, cat) => steal_points(baboon, 5, leopard)\n# Rule6: Be careful when something does not offer a job to the puffin but steals five of the points of the leopard because in this case it certainly does not offer a job position to the kudu (this may or may not be problematic)\nrule6(something) = not offer_job_position(something, puffin) & steal_points(baboon, 5, leopard) => not offer_job_position(something, kudu)\n# Rule7: Regarding the crocodile, if it has a sharp object, then we can conclude that it winks at the cat\nrule7() = has(crocodile, sharp_object) => wink(crocodile, cat)\n# Rule8: The caterpillar does not proceed to the spot right after the baboon, in the case where the koala holds an equal number of points as the caterpillar.\nrule8() = points(koala) == points(caterpillar) => not proceed(caterpillar, spot_right_after(spot_of(baboon)))\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The caterpillar has a trumpet\nhas(caterpillar, trumpet) = True\n# The crocodile got a well-paid job\nhas_high_salary(crocodile) = True\n# The crocodile has a plastic bag\nhas(crocodile, plastic_bag) = True\n# The koala holds the same number of points as the caterpillar\npoints(koala) == points(caterpillar) = True\n# The parrot has eight friends, hates Chris Ronaldo, and proceeds to the spot right after the buffalo\nfriends(parrot) = 8\nhates(parrot, Chris_Ronaldo) = True\nproceed(parrot, spot_right_after(spot_of(buffalo))) = True\n\n# Based on the game state and the rules and preferences, does the baboon offer a job to the kudu?\nquestion = offer_job_position(baboon, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the crocodile proceeds to the spot right after the spot of the tilapia, then the tilapia respects the octopus\nRule2: If something does not proceed to the spot right after the canary, then it owes money to the turtle\nRule3: If the zander owns a luxury aircraft, then the zander offers a job position to the cow\nRule4: If the tilapia has a device to connect to the internet, then the tilapia becomes an enemy of the hare\nRule5: If something owes money to the turtle and also offers a job to the cow, then it does not offer a job position to the tilapia\nRule6: If something becomes an enemy of the hare, then it does not respect the octopus\nRule7: If the tilapia has a sharp object, then it becomes an actual enemy of the hare\nRule8: If the blobfish holds an equal number of points as the tilapia and the black bear sings a song of victory for the tilapia, then the tilapia does not become an actual enemy of the hare\nRule9: If the zander does not offer a job position to the tilapia, then the tilapia offers a job position to the viperfish\nRule10: If the zander has a name whose first letter is the same as the first letter of the goldfish's name, then the zander does not owe money to the turtle\nRule11: If the zander has a card with a primary color, then the zander offers a job to the cow\n\nRule10 is preferred over Rule2\nRule6 is preferred over Rule1\nRule8 is preferred over Rule4\n\nThe current state of the game is as follows\nThe blobfish sings a victory song for the tilapia\nThe goldfish is named Bella\nThe tilapia has a cell phone and a violin\nThe zander dreamed of a luxury aircraft and is named Bella\nThe zander has a card that is red in color\nThe zander does not proceed to the spot right after the canary\n\nBased on the game state and the rules and preferences, does the tilapia offer a job to the viperfish?\nQuestion: Does the tilapia offer a job position to the viperfish?",
        "idx": 218,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The tilapia unquestionably respects the octopus, in the case where the crocodile proceeds to the spot that is right after the spot of the tilapia\nrule1() = proceed(crocodile, spot_right_after(spot_of(tilapia))) => respects(tilapia, octopus)\n# Rule2: If something does not proceed to the spot right after the canary, then it owes money to the turtle\nrule2() = not proceed(something, spot_right_after(spot_of(canary))) => owes_money_to(something, turtle)\n# Rule3: If the zander owns a luxury aircraft, then the zander offers a job position to the cow\nrule3() = owns(zander, luxury_aircraft) => offer_job_position(zander, cow)\n# Rule4: If the tilapia has a device to connect to the internet, then the tilapia becomes an enemy of the hare\nrule4() = has(tilapia, connect_to_internet(device)) => enemy(tilapia, hare)\n# Rule5: Be careful when something owes money to the turtle and also offers a job to the cow because in this case it will surely not offer a job position to the tilapia (this may or may not be problematic)\nrule5(something) = owes_money_to(something, turtle) & offer_job_position(something, cow) => not offer_job_position(something, tilapia)\n# Rule6: If something becomes an enemy of the hare, then it does not respect the octopus\nrule6() = enemy(something, hare) => not respects(something, octopus)\n# Rule7: Regarding the tilapia, if it has a sharp object, then we can conclude that it becomes an actual enemy of the hare\nrule7() = has(tilapia, sharp_object) => enemy(tilapia, hare)\n# Rule8: For the tilapia, if the belief is that the blobfish holds an equal number of points as the tilapia and the black bear sings a song of victory for the tilapia, then you can add that \"the tilapia is not going to become an actual enemy of the hare\" to your conclusions\nrule8() = points(blobfish) == points(tilapia) & sing_song(black_bear, victory_song_for(tilapia)) => not enemy(tilapia, hare)\n# Rule9: The tilapia unquestionably offers a job to the viperfish, in the case where the zander does not offer a job position to the tilapia\nrule9() = not offer_job_position(zander, tilapia) => offer_job_position(tilapia, viperfish)\n# Rule10: Regarding the zander, if it has a name whose first letter is the same as the first letter of the goldfish's name, then we can conclude that it does not owe money to the turtle\nrule10() = first_letter_of(name(zander)) == first_letter_of(name(goldfish)) => not owes_money_to(zander, turtle)\n# Rule11: If the zander has a card with a primary color, then the zander offers a job to the cow.\nrule11() = has(zander, card_with(primary_color)) => offer_job_position(zander, cow)\n# Rule10 is preferred over Rule2\norder(rule10) > order(rule2) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n# Rule8 is preferred over Rule4\norder(rule8) > order(rule4) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n\n# The current state of the game is as follows\n# The blobfish sings a victory song for the tilapia\nsing_song(blobfish, victory_song_for(tilapia)) = True\n# The goldfish is named Bella\nname(goldfish, Bella) = True\n# The tilapia has a cell phone, and has a violin\nhas(tilapia, cell_phone) = True\nhas(tilapia, violin) = True\n# The zander dreamed of a luxury aircraft, and is named Bella\ndreamed(zander, luxury_aircraft) = True\nname(zander, Bella) = True\n# The zander has a card that is red in color\nhas(zander, card_with(red_color)) = True\n# The zander does not proceed to the spot right after the canary\nnot proceed(zander, spot_right_after(spot_of(canary))) = True\n\n# Based on the game state and the rules and preferences, does the tilapia offer a job to the viperfish?\nquestion = offer_job_position(tilapia, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal learns the basics of resource management from the cricket, then the jellyfish prepares armor for the cricket\nRule2: Be careful when something does not attack the green fields of the blobfish but prepares armor for the cricket because in this case it will surely show all her cards to the polar bear\nRule3: The leopard owes money to the cow whenever at least one animal shows all her cards to the polar bear\nRule4: If the baboon has a leafy green vegetable, then the baboon holds an equal number of points as the jellyfish\nRule5: If the baboon has more than four friends, then the baboon does not hold the same number of points as the jellyfish\nRule6: If the swordfish attacks the green fields of the jellyfish and the polar bear owes money to the jellyfish, then the jellyfish will not attack the green fields of the blobfish\n\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe baboon has arugula\nThe jellyfish has 11 friends\nThe pig learns the basics of resource management from the cricket\nThe polar bear owes money to the jellyfish\nThe swordfish attacks the green fields of the jellyfish\n\nBased on the game state and the rules and preferences, does the leopard owe money to the cow?\nQuestion: Does the leopard owe money to the cow?",
        "idx": 219,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal learns the basics of resource management from the cricket, then the jellyfish prepares armor for the cricket\nrule1() = learn_basics_of_resource_management(something, cricket) => prepare_armor(jellyfish, cricket)\n# Rule2: Be careful when something does not attack the green fields of the blobfish but prepares armor for the cricket because in this case it will, surely, show her cards (all of them) to the polar bear (this may or may not be problematic)\nrule2(something) = not attack_green_fields(something, blobfish) & prepare_armor(something, cricket) => show_cards(something, polar_bear)\n# Rule3: The leopard owes $$$ to the cow whenever at least one animal shows her cards (all of them) to the polar bear\nrule3() = show_cards(something, polar_bear) => owes_money_to(leopard, cow)\n# Rule4: If the baboon has a leafy green vegetable, then the baboon holds an equal number of points as the jellyfish\nrule4() = has(baboon, leafy_green_vegetable) => points(baboon) == points(jellyfish)\n# Rule5: Regarding the baboon, if it has more than four friends, then we can conclude that it does not hold the same number of points as the jellyfish\nrule5() = friends(baboon) > 4 => not_equal_points(baboon, jellyfish)\n# Rule6: If the swordfish attacks the green fields of the jellyfish and the polar bear owes money to the jellyfish, then the jellyfish will not attack the green fields of the blobfish.\nrule6() = attack_green_fields(swordfish, jellyfish) & owes_money_to(polar_bear, jellyfish) => not attack_green_fields(jellyfish, blobfish)\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The baboon has some arugula\nhas(baboon, arugula) = True\n# The jellyfish has 11 friends\nfriends(jellyfish) = 11\n# The pig learns the basics of resource management from the cricket\nlearn_basics_of_resource_management(pig, cricket) = True\n# The polar bear owes money to the jellyfish\nowes_money_to(polar_bear, jellyfish) = True\n# The swordfish attacks the green fields whose owner is the jellyfish\nattack_green_fields(swordfish, green_fields_of(jellyfish)) = True\n\n# Based on the game state and the rules and preferences, does the leopard owe money to the cow?\nquestion = owes_money_to(leopard, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cricket has something to sit on, then the cricket needs support from the amberjack\nRule2: If the grasshopper has a card whose color starts with the letter \"r\", then the grasshopper removes one of the pieces of the lobster\nRule3: If you see one of the animals attack the green fields of the sea bass, then it will not show all its cards to the jellyfish\nRule4: If at least one animal removes one of the pieces of the lobster, then the turtle learns elementary resource management from the starfish\nRule5: Be careful when something gives a magnifier to the mosquito and also learns the basics of resource management from the starfish because in this case it will surely become an actual enemy of the gecko\nRule6: If the panda bear steals five points from the turtle and the hippopotamus removes one of the pieces of the turtle, then the turtle prepares armor for the parrot\nRule7: If something prepares armor for the parrot, then it gives a magnifier to the mosquito\nRule8: If the jellyfish took a bike from the store, then the jellyfish respects the snail\nRule9: If the grasshopper owns a luxury aircraft, then the grasshopper removes one of the pieces of the lobster\nRule10: If at least one animal shows all its cards to the jellyfish, then the turtle does not become an enemy of the gecko\nRule11: If at least one animal winks at the moose, then the jellyfish does not respect the snail\nRule12: If at least one animal respects the snail, then the eel shows all her cards to the jellyfish\nRule13: If the koala sings a victory song for the cricket, then the cricket does not need the support of the amberjack\nRule14: If the cricket has a sharp object, then it needs support from the amberjack\n\nRule1 is preferred over Rule13\nRule10 is preferred over Rule5\nRule11 is preferred over Rule8\nRule14 is preferred over Rule13\nRule3 is preferred over Rule12\n\nThe current state of the game is as follows\nThe cricket has green tea\nThe cricket has a love seat sofa\nThe grasshopper has a card that is green in color\nThe grasshopper owns a luxury aircraft\nThe hippopotamus removes one of the pieces of the turtle\nThe jellyfish stole a bike from the store\nThe koala sings a victory song for the cricket\nThe panda bear steals five points from the turtle\n\nBased on the game state and the rules and preferences, does the turtle become an enemy of the gecko?\nQuestion: Does the turtle become an enemy of the gecko?",
        "idx": 220,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cricket has something to sit on, then the cricket needs support from the amberjack\nrule1() = has(cricket, something_to_sit_on) => needs_support(cricket, amberjack)\n# Rule2: If the grasshopper has a card whose color starts with the letter \"r\", then the grasshopper removes from the board one of the pieces of the lobster\nrule2() = has(grasshopper, card_with(color_starting_with(\"r\"))) => remove(grasshopper, piece_of(lobster))\n# Rule3: If you are positive that you saw one of the animals attacks the green fields of the sea bass, you can be certain that it will not show all her cards to the jellyfish\nrule3(something) = attacks(something, green_fields_of(sea_bass)) => not show_cards(something, jellyfish)\n# Rule4: If at least one animal removes one of the pieces of the lobster, then the turtle learns elementary resource management from the starfish\nrule4() = remove(something, piece_of(lobster)) => learn(turtle, elementary_resource_management_from(starfish))\n# Rule5: Be careful when something gives a magnifier to the mosquito and also learns the basics of resource management from the starfish because in this case it will surely become an actual enemy of the gecko (this may or may not be problematic)\nrule5(something) = give(something, magnifier, mosquito) & learn(something, basics_of_resource_management_from(starfish)) => actual_enemy(something, gecko)\n# Rule6: For the turtle, if the belief is that the panda bear steals five points from the turtle and the hippopotamus removes from the board one of the pieces of the turtle, then you can add \"the turtle prepares armor for the parrot\" to your conclusions\nrule6() = belief(panda_bear, steals_points_from(turtle, 5)) & remove(hippopotamus, piece_of(turtle)) => prepare_armor(turtle, parrot)\n# Rule7: If something prepares armor for the parrot, then it gives a magnifier to the mosquito, too\nrule7() = prepare_armor(something, parrot) => give(something, magnifier, mosquito)\n# Rule8: If the jellyfish took a bike from the store, then the jellyfish respects the snail\nrule8() = took(jellyfish, bike_from(store)) => respects(jellyfish, snail)\n# Rule9: If the grasshopper owns a luxury aircraft, then the grasshopper removes from the board one of the pieces of the lobster\nrule9() = owns(grasshopper, luxury_aircraft) => remove(grasshopper, piece_of(lobster))\n# Rule10: If at least one animal shows her cards (all of them) to the jellyfish, then the turtle does not become an enemy of the gecko\nrule10() = show_cards(something, jellyfish) => not enemy(turtle, gecko)\n# Rule11: If at least one animal winks at the moose, then the jellyfish does not respect the snail\nrule11() = wink(something, moose) => not respects(jellyfish, snail)\n# Rule12: If at least one animal respects the snail, then the eel shows her cards (all of them) to the jellyfish\nrule12() = respects(something, snail) => show_cards(eel, jellyfish)\n# Rule13: If the koala sings a song of victory for the cricket, then the cricket is not going to need the support of the amberjack\nrule13() = sing_song(koala, victory_song_for(cricket)) => not needs_support(cricket, amberjack)\n# Rule14: Regarding the cricket, if it has a sharp object, then we can conclude that it needs support from the amberjack.\nrule14() = has(cricket, sharp_object) => needs_support(cricket, amberjack)\n# Rule1 is preferred over Rule13\norder(rule1) > order(rule13) = True\n# Rule10 is preferred over Rule5\norder(rule10) > order(rule5) = True\n# Rule11 is preferred over Rule8\norder(rule11) > order(rule8) = True\n# Rule14 is preferred over Rule13\norder(rule14) > order(rule13) = True\n# Rule3 is preferred over Rule12\norder(rule3) > order(rule12) = True\n\n# The current state of the game is as follows\n# The cricket has a green tea, and has a love seat sofa\nhas(cricket, green_tea) = True\nhas(cricket, love_seat_sofa) = True\n# The grasshopper has a card that is green in color\nhas(grasshopper, card_with(green_color)) = True\n# The grasshopper purchased a luxury aircraft\nowns(grasshopper, luxury_aircraft) = True\n# The hippopotamus removes from the board one of the pieces of the turtle\nremove(hippopotamus, piece_of(turtle)) = True\n# The jellyfish stole a bike from the store\ntook(jellyfish, bike_from(store)) = True\n# The koala sings a victory song for the cricket\nsing_song(koala, victory_song_for(cricket)) = True\n# The panda bear steals five points from the turtle\nbelief(panda_bear, steals_points_from(turtle, 5)) = True\n\n# Based on the game state and the rules and preferences, does the turtle become an enemy of the gecko?\nquestion = enemy(turtle, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals raise a peace flag for the goldfish, you can be certain that it will also steal five points from the amberjack\nRule2: The whale will not steal five points from the amberjack, in the case where the penguin does not know the defense plan of the whale\nRule3: If the hare owes money to the whale and the snail rolls the dice for the whale, then the whale raises a peace flag for the goldfish\nRule4: If at least one animal steals five points from the amberjack, then the tiger owes money to the cat\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe hare owes money to the whale\nThe snail offers a job to the whale\n\nBased on the game state and the rules and preferences, does the tiger owe money to the cat?\nQuestion: Does the tiger owe money to the cat?",
        "idx": 221,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals raises a peace flag for the goldfish, you can be certain that it will also steal five of the points of the amberjack\nrule1() = raise_flag_of_peace(something, goldfish) => steal_points(something, 5, amberjack)\n# Rule2: The whale will not steal five of the points of the amberjack, in the case where the penguin does not know the defense plan of the whale\nrule2() = not knows(defense_plan_of(whale), penguin) => not steal_points(whale, 5, amberjack)\n# Rule3: For the whale, if the belief is that the hare owes money to the whale and the snail rolls the dice for the whale, then you can add \"the whale raises a flag of peace for the goldfish\" to your conclusions\nrule3() = owes_money_to(hare, whale) & rolls_dice(snail, whale) => raise_flag_of_peace(whale, goldfish)\n# Rule4: If at least one animal steals five of the points of the amberjack, then the tiger owes money to the cat.\nrule4() = steal_points(something, 5, amberjack) => owes_money_to(tiger, cat)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The hare owes money to the whale\nowes_money_to(hare, whale) = True\n# The snail offers a job to the whale\noffers_job(snail, whale) = True\n\n# Based on the game state and the rules and preferences, does the tiger owe money to the cat?\nquestion = owes_money_to(tiger, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The koala eats the food that belongs to the starfish whenever at least one animal attacks the green fields of the panda bear\nRule2: If the baboon voted for the mayor, then it knocks down the fortress of the aardvark\nRule3: If at least one animal knocks down the fortress that belongs to the aardvark, then the koala eats the food that belongs to the buffalo\nRule4: If something eats the food that belongs to the buffalo and also eats the food of the starfish, then it knocks down the fortress that belongs to the hippopotamus\nRule5: If the baboon has more than six friends, then it knocks down the fortress that belongs to the aardvark\nRule6: If something raises a peace flag for the spider, then it raises a peace flag for the zander too\nRule7: If the wolverine holds the same number of points as the koala, then the koala does not eat the food that belongs to the starfish\nRule8: If the polar bear has a card whose color appears in the flag of the Netherlands, then it raises a flag of peace for the spider\nRule9: If the viperfish does not proceed to the spot right after the spot of the koala and the sun bear sings a victory song for the koala, then the koala does not eat the food of the buffalo\nRule10: If the viperfish killed the mayor, then it does not proceed to the spot right after the koala\nRule11: If the viperfish has more than sixteen friends, then it does not proceed to the spot right after the koala\nRule12: If at least one animal sings a song of victory for the tilapia, then the polar bear does not raise a flag of peace for the zander\nRule13: If at least one animal burns the warehouse that is in possession of the moose, then the oscar attacks the green fields of the panda bear\n\nRule12 is preferred over Rule6\nRule7 is preferred over Rule1\nRule9 is preferred over Rule3\n\nThe current state of the game is as follows\nThe baboon assassinated the mayor\nThe baboon has sixteen friends\nThe polar bear has a card that is red in color\nThe tiger burns the warehouse of the moose\nThe viperfish assassinated the mayor and has six friends\nThe oscar does not burn the warehouse of the dog\n\nBased on the game state and the rules and preferences, does the koala knock down the fortress of the hippopotamus?\nQuestion: Does the koala knock down the fortress of the hippopotamus?",
        "idx": 222,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The koala eats the food that belongs to the starfish whenever at least one animal attacks the green fields of the panda bear\nrule1() = attack(green_fields_of(panda_bear), something) => eat_food(koala, food_of(starfish))\n# Rule2: Regarding the baboon, if it voted for the mayor, then we can conclude that it knocks down the fortress of the aardvark\nrule2() = voted_for(baboon, mayor) => knock_down(fortress_of(aardvark))\n# Rule3: If at least one animal knocks down the fortress that belongs to the aardvark, then the koala eats the food that belongs to the buffalo\nrule3() = knock_down(fortress_of(aardvark), something) => eat_food(koala, food_of(buffalo))\n# Rule4: Be careful when something eats the food that belongs to the buffalo and also eats the food of the starfish because in this case it will surely knock down the fortress that belongs to the hippopotamus (this may or may not be problematic)\nrule4(something) = eat_food(something, food_of(buffalo)) & eat_food(something, food_of(starfish)) => knock_down(fortress_of(hippopotamus))\n# Rule5: Regarding the baboon, if it has more than six friends, then we can conclude that it knocks down the fortress that belongs to the aardvark\nrule5() = friends(baboon) > 6 => knock_down(fortress_of(aardvark))\n# Rule6: If something raises a peace flag for the spider, then it raises a peace flag for the zander, too\nrule6() = raise_flag_of_peace(something, spider) => raise_flag_of_peace(something, zander)\n# Rule7: If the wolverine holds the same number of points as the koala, then the koala is not going to eat the food that belongs to the starfish\nrule7() = points(wolverine) == points(koala) => not eat_food(koala, food_of(starfish))\n# Rule8: Regarding the polar bear, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it raises a flag of peace for the spider\nrule8() = has(polar_bear, card_with(color_in_flag_of_Netherlands)) => raise_flag_of_peace(polar_bear, spider)\n# Rule9: If the viperfish does not proceed to the spot that is right after the spot of the koala however the sun bear sings a victory song for the koala, then the koala will not eat the food of the buffalo\nrule9() = not proceed(viperfish, spot_right_after(spot_of(koala))) & sing_song(sun_bear, victory_song_for(koala)) => not eat_food(koala, food_of(buffalo))\n# Rule10: If the viperfish killed the mayor, then the viperfish does not proceed to the spot right after the koala\nrule10() = killed(viperfish, mayor) => not proceed(viperfish, spot_right_after(spot_of(koala)))\n# Rule11: Regarding the viperfish, if it has more than sixteen friends, then we can conclude that it does not proceed to the spot that is right after the spot of the koala\nrule11() = friends(viperfish) > 16 => not proceed(viperfish, spot_right_after(spot_of(koala)))\n# Rule12: If at least one animal sings a song of victory for the tilapia, then the polar bear does not raise a flag of peace for the zander\nrule12() = sing_song(something, victory_song_for(tilapia)) => not raise_flag_of_peace(polar_bear, zander)\n# Rule13: If at least one animal burns the warehouse that is in possession of the moose, then the oscar attacks the green fields of the panda bear.\nrule13() = burn(warehouse_of(moose), something) => attack(green_fields_of(panda_bear), oscar)\n# Rule12 is preferred over Rule6\norder(rule12) > order(rule6) = True\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n# Rule9 is preferred over Rule3\norder(rule9) > order(rule3) = True\n\n# The current state of the game is as follows\n# The baboon assassinated the mayor\nassassinated(baboon, mayor) = True\n# The baboon has sixteen friends\nfriends(baboon) = 16\n# The polar bear has a card that is red in color\nhas(polar_bear, card_with(red_color)) = True\n# The tiger burns the warehouse of the moose\nburn(warehouse_of(moose), tiger) = True\n# The viperfish assassinated the mayor, and has six friends\nassassinated(viperfish, mayor) = True\nfriends(viperfish) = 6\n# The oscar does not burn the warehouse of the dog\nburn(warehouse_of(dog), oscar) = False\n\n# Based on the game state and the rules and preferences, does the koala knock down the fortress of the hippopotamus?\nquestion = knock_down(fortress_of(hippopotamus))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the zander does not roll the dice for the grasshopper, then the grasshopper steals five points from the doctorfish\nRule2: If the grasshopper killed the mayor, then it does not steal five points from the doctorfish\nRule3: If something gives a magnifier to the catfish but does not steal five points from the doctorfish, then it does not need the support of the starfish\nRule4: If the black bear knows the defensive plans of the grasshopper, then the grasshopper needs support from the starfish\nRule5: If the black bear has something to sit on, then it knows the defensive plans of the grasshopper\nRule6: If you see that one of the animals sings a song of victory for the rabbit, then it does not know the defense plan of the grasshopper\nRule7: If you see that one of the animals needs the support of the starfish, then it does not sing a victory song for the snail\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule4\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe black bear has a couch\nThe grasshopper assassinated the mayor\n\nBased on the game state and the rules and preferences, does the grasshopper sing a victory song for the snail?\nQuestion: Does the grasshopper sing a victory song for the snail?",
        "idx": 223,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the zander does not roll the dice for the grasshopper, then the grasshopper steals five of the points of the doctorfish\nrule1() = not roll_dice(zander, grasshopper) => steal_points(grasshopper, 5, doctorfish)\n# Rule2: Regarding the grasshopper, if it killed the mayor, then we can conclude that it does not steal five points from the doctorfish\nrule2() = killed(grasshopper, mayor) => not steal_points(grasshopper, 5, doctorfish)\n# Rule3: If you see that something gives a magnifier to the catfish but does not steal five points from the doctorfish, what can you certainly conclude? You can conclude that it does not need the support of the starfish\nrule3(something) = give_magnifier(something, catfish) & not steal_points(something, 5, doctorfish) => not need_support(something, starfish)\n# Rule4: If the black bear knows the defensive plans of the grasshopper, then the grasshopper needs support from the starfish\nrule4() = knows(defensive_plans_of(grasshopper), black_bear) => needs_support(grasshopper, starfish)\n# Rule5: Regarding the black bear, if it has something to sit on, then we can conclude that it knows the defensive plans of the grasshopper\nrule5() = has(black_bear, something_to_sit_on) => knows(defensive_plans_of(grasshopper), black_bear)\n# Rule6: If you are positive that you saw one of the animals sings a song of victory for the rabbit, you can be certain that it will not know the defense plan of the grasshopper\nrule6(something) = sings_song_of_victory(something, rabbit) => not knows(defense_plan_of(grasshopper), something)\n# Rule7: If you are positive that you saw one of the animals needs the support of the starfish, you can be certain that it will not sing a victory song for the snail.\nrule7(something) = needs_support(something, starfish) => not sings_song_of_victory(something, snail)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The black bear has a couch\nhas(black_bear, couch) = True\n# The grasshopper assassinated the mayor\nkilled(grasshopper, mayor) = True\n\n# Based on the game state and the rules and preferences, does the grasshopper sing a victory song for the snail?\nquestion = sings_song_of_victory(grasshopper, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The spider knocks down the fortress of the octopus whenever at least one animal learns elementary resource management from the kiwi\nRule2: If the jellyfish needs support from the snail and the puffin sings a victory song for the snail, then the snail owes money to the squid\nRule3: If at least one animal rolls the dice for the hummingbird, then the snail does not learn elementary resource management from the kiwi\nRule4: If the snail has a leafy green vegetable, then the snail does not owe money to the squid\nRule5: If at least one animal learns elementary resource management from the meerkat, then the doctorfish rolls the dice for the hummingbird\nRule6: If the snail works fewer hours than before, then the snail does not owe money to the squid\nRule7: If something owes money to the squid, then it learns the basics of resource management from the kiwi\n\nRule4 is preferred over Rule2\nRule6 is preferred over Rule2\nRule7 is preferred over Rule3\n\nThe current state of the game is as follows\nThe doctorfish has a card that is black in color\nThe doctorfish parked her bike in front of the store\nThe jellyfish needs support from the snail\nThe lion learns the basics of resource management from the meerkat\nThe puffin sings a victory song for the snail\nThe snail has a computer\nThe snail reduced her work hours recently\n\nBased on the game state and the rules and preferences, does the spider knock down the fortress of the octopus?\nQuestion: Does the spider knock down the fortress of the octopus?",
        "idx": 224,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The spider knocks down the fortress of the octopus whenever at least one animal learns elementary resource management from the kiwi\nrule1() = learn_elementary_resource_management(something, kiwi) => knock_down(spider, fortress_of(octopus))\n# Rule2: For the snail, if the belief is that the jellyfish needs support from the snail and the puffin sings a victory song for the snail, then you can add \"the snail owes $$$ to the squid\" to your conclusions\nrule2() = needs_support(jellyfish, snail) & sing_song(puffin, victory_song_for(snail)) => owes_money_to(snail, squid)\n# Rule3: If at least one animal rolls the dice for the hummingbird, then the snail does not learn elementary resource management from the kiwi\nrule3() = roll_dice(something, hummingbird) => not learn_elementary_resource_management(snail, kiwi)\n# Rule4: If the snail has a leafy green vegetable, then the snail does not owe $$$ to the squid\nrule4() = has(snail, leafy_green_vegetable) => not owes_money_to(snail, squid)\n# Rule5: If at least one animal learns elementary resource management from the meerkat, then the doctorfish rolls the dice for the hummingbird\nrule5() = learn_elementary_resource_management(something, meerkat) => roll_dice(doctorfish, hummingbird)\n# Rule6: Regarding the snail, if it works fewer hours than before, then we can conclude that it does not owe money to the squid\nrule6() = reduce_work_hours(snail) => not owes_money_to(snail, squid)\n# Rule7: If something owes $$$ to the squid, then it learns the basics of resource management from the kiwi, too.\nrule7(something) = owes_money_to(something, squid) => learn_basics_of_resource_management(something, kiwi)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n\n# The current state of the game is as follows\n# The doctorfish has a card that is black in color, and parked her bike in front of the store\nhas(doctorfish, card_with(black_color)) = True\nparked_bike(doctorfish, in_front_of(store)) = True\n# The jellyfish needs support from the snail\nneeds_support(jellyfish, snail) = True\n# The lion learns the basics of resource management from the meerkat\nlearn_basics_of_resource_management(lion, meerkat) = True\n# The puffin sings a victory song for the snail\nsing_song(puffin, victory_song_for(snail)) = True\n# The snail has a computer, and reduced her work hours recently\nhas(snail, computer) = True\nreduce_work_hours(snail) = True\n\n# Based on the game state and the rules and preferences, does the spider knock down the fortress of the octopus?\nquestion = knock_down(spider, fortress_of(octopus))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The grizzly bear does not steal five points from the pig whenever at least one animal removes one of the pieces of the ferret\nRule2: If the grizzly bear has a card with a color from the rainbow colors, then the grizzly bear steals five points from the pig\nRule3: If at least one animal attacks the green fields of the canary, then the oscar steals five points from the crocodile\nRule4: If the parrot learns the basics of resource management from the oscar, then the oscar does not steal five points from the crocodile\nRule5: The pig attacks the green fields owned by the canary if the octopus is not an actual enemy of the pig\nRule6: If something does not raise a peace flag for the zander, then it does not learn the basics of resource management from the pig\nRule7: If the raven has fewer than seventeen friends, then it learns the basics of resource management from the pig\nRule8: If the octopus has a card with a primary color, then it is not an enemy of the pig\n\nRule1 is preferred over Rule2\nRule4 is preferred over Rule3\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe grizzly bear has a card that is violet in color\nThe octopus has a card that is red in color\nThe raven has one energetic friend and six non-energetic friends\n\nBased on the game state and the rules and preferences, does the oscar steal five points from the crocodile?\nQuestion: Does the oscar steal five points from the crocodile?",
        "idx": 225,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The grizzly bear does not steal five points from the pig whenever at least one animal removes from the board one of the pieces of the ferret\nrule1() = remove(something, piece_of(ferret)) => not steal_points(grizzly_bear, pig, 5)\n# Rule2: If the grizzly bear has a card whose color is one of the rainbow colors, then the grizzly bear steals five points from the pig\nrule2() = has(grizzly_bear, card) and color(card) in rainbow_colors => steal_points(grizzly_bear, pig, 5)\n# Rule3: If at least one animal attacks the green fields of the canary, then the oscar steals five points from the crocodile\nrule3() = attack_green_fields(something, canary) => steal_points(oscar, crocodile, 5)\n# Rule4: If the parrot learns the basics of resource management from the oscar, then the oscar is not going to steal five points from the crocodile\nrule4() = learn_basics_of_resource_management(parrot, oscar) => not steal_points(oscar, crocodile, 5)\n# Rule5: The pig unquestionably attacks the green fields whose owner is the canary, in the case where the octopus does not become an actual enemy of the pig\nrule5() = not enemy(octopus, pig) => attack_green_fields(pig, canary)\n# Rule6: If something does not raise a flag of peace for the zander, then it does not learn the basics of resource management from the pig\nrule6() = not raise_flag_of_peace(something, zander) => not learn_basics_of_resource_management(something, pig)\n# Rule7: Regarding the raven, if it has fewer than seventeen friends, then we can conclude that it learns the basics of resource management from the pig\nrule7() = friends(raven) < 17 => learn_basics_of_resource_management(raven, pig)\n# Rule8: Regarding the octopus, if it has a card with a primary color, then we can conclude that it does not become an enemy of the pig.\nrule8() = has(octopus, card_with(primary_color)) => not enemy(octopus, pig)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The grizzly bear has a card that is violet in color\nhas(grizzly_bear, card_with(violet_color)) = True\n# The octopus has a card that is red in color\nhas(octopus, card_with(red_color)) = True\n# The raven has one friend that is energetic and 6 friends that are not.\nfriends(raven) = 7\nenergetic(friend_of(raven, 1)) = True\nenergetic(friend_of(raven, 2)) = False\nenergetic(friend_of(raven, 3)) = False\nenergetic(friend_of(raven, 4)) = False\nenergetic(friend_of(raven, 5)) = False\nenergetic(friend_of(raven, 6)) = False\nenergetic(friend_of(raven, 7)) = False\n\n# Based on the game state and the rules and preferences, does the oscar steal five points from the crocodile?\nquestion = steal_points(oscar, crocodile, 5)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kudu has a card whose color starts with the letter \"v\", then the kudu offers a job position to the panther\nRule2: If the cricket winks at the lion, then the lion does not need the support of the catfish\nRule3: If the kudu offers a job position to the panther, then the panther does not know the defense plan of the catfish\nRule4: If you see one of the animals remove a piece of the oscar, then it needs the support of the catfish\nRule5: If you see one of the animals prepare armor for the gecko, then it knows the defense plan of the catfish\nRule6: If the lion has a card with a primary color, then it removes a piece of the oscar\nRule7: If the lion has fewer than 3 friends, then it removes a piece of the oscar\nRule8: If the panther does not know the defense plan of the catfish, then the catfish does not raise a peace flag for the cockroach\nRule9: If the lion needs support from the catfish and the grizzly bear removes a piece of the catfish, then the catfish raises a peace flag for the cockroach\n\nRule2 is preferred over Rule4\nRule5 is preferred over Rule3\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe kudu has a card that is violet in color\nThe lion has 5 friends\nThe lion has a card that is red in color\nThe tilapia is not an enemy of the lion\n\nBased on the game state and the rules and preferences, does the catfish raise a peace flag for the cockroach?\nQuestion: Does the catfish raise a peace flag for the cockroach?",
        "idx": 226,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kudu has a card whose color starts with the letter \"v\", then the kudu offers a job position to the panther\nrule1() = has(kudu, card_with(color_starting_with(\"v\"))) => offer_job_position(kudu, panther)\n# Rule2: If the cricket winks at the lion, then the lion is not going to need the support of the catfish\nrule2() = wink(cricket, lion) => not need_support(lion, catfish)\n# Rule3: The panther does not know the defense plan of the catfish, in the case where the kudu offers a job position to the panther\nrule3() = offer_job_position(kudu, panther) => not knows_defense_plan(panther, catfish)\n# Rule4: If you are positive that you saw one of the animals removes one of the pieces of the oscar, you can be certain that it will also need the support of the catfish\nrule4(something) = remove(something, piece_of(oscar)) => need_support(something, catfish)\n# Rule5: If you are positive that you saw one of the animals prepares armor for the gecko, you can be certain that it will also know the defense plan of the catfish\nrule5(something) = prepare_armor(something, gecko) => knows_defense_plan(something, catfish)\n# Rule6: Regarding the lion, if it has a card with a primary color, then we can conclude that it removes from the board one of the pieces of the oscar\nrule6() = has(lion, card_with(primary_color)) => remove(lion, piece_of(oscar))\n# Rule7: If the lion has fewer than 3 friends, then the lion removes one of the pieces of the oscar\nrule7() = friends(lion) < 3 => remove(lion, piece_of(oscar))\n# Rule8: The catfish will not raise a flag of peace for the cockroach, in the case where the panther does not know the defense plan of the catfish\nrule8() = not knows_defense_plan(panther, catfish) => not raise_flag_of_peace(catfish, cockroach)\n# Rule9: If the lion needs support from the catfish and the grizzly bear removes from the board one of the pieces of the catfish, then the catfish raises a peace flag for the cockroach.\nrule9() = need_support(lion, catfish) & remove(grizzly_bear, piece_of(catfish)) => raise_flag_of_peace(catfish, cockroach)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The kudu has a card that is violet in color\nhas(kudu, card_with(violet_color)) = True\n# The lion has 5 friends\nfriends(lion) = 5\n# The lion has a card that is red in color\nhas(lion, card_with(red_color)) = True\n# The tilapia does not become an enemy of the lion\nnot enemy(tilapia, lion) = True\n\n# Based on the game state and the rules and preferences, does the catfish raise a peace flag for the cockroach?\nquestion = raise_flag_of_peace(catfish, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the ferret raises a peace flag for the lion, then the lion does not remove one of the pieces of the squid\nRule2: If the starfish has a musical instrument, then the starfish proceeds to the spot that is right after the spot of the zander\nRule3: If the squirrel has more than 9 friends, then the squirrel does not know the defense plan of the goldfish\nRule4: If the lion does not remove one of the pieces of the squid and the squirrel does not need the support of the squid, then the squid steals five points from the mosquito\nRule5: If something proceeds to the spot that is right after the spot of the zander, then it burns the warehouse of the squid\nRule6: If the squirrel has something to sit on, then it does not know the defensive plans of the goldfish\nRule7: If the ferret has a card with a color that is one of the rainbow colors, then the ferret does not raise a peace flag for the lion\nRule8: If something sings a song of victory for the hummingbird but does not know the defensive plans of the goldfish, then it does not need support from the squid\nRule9: If the parrot prepares armor for the squirrel, then the squirrel does not sing a song of victory for the hummingbird\nRule10: If at least one animal raises a peace flag for the donkey, then the ferret raises a peace flag for the lion\nRule11: If the starfish took a bike from the store, then the starfish proceeds to the spot that is right after the spot of the zander\nRule12: If one of the animals does not knock down the fortress of the sheep, then it removes one of the pieces of the squid\nRule13: If the ferret has fewer than 6 friends, then it does not raise a peace flag for the lion\n\nRule10 is preferred over Rule13\nRule10 is preferred over Rule7\nRule12 is preferred over Rule1\n\nThe current state of the game is as follows\nThe ferret has 14 friends\nThe hare raises a peace flag for the donkey\nThe lobster proceeds to the spot right after the meerkat\nThe parrot prepares armor for the squirrel\nThe squirrel has 12 friends and has some spinach\nThe starfish has some arugula\nThe starfish stole a bike from the store\n\nBased on the game state and the rules and preferences, does the squid steal five points from the mosquito?\nQuestion: Does the squid steal five points from the mosquito?",
        "idx": 227,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the ferret raises a peace flag for the lion, then the lion is not going to remove from the board one of the pieces of the squid\nrule1() = raise_flag_of_peace(ferret, lion) => not remove(lion, piece_of(squid))\n# Rule2: If the starfish has a musical instrument, then the starfish proceeds to the spot that is right after the spot of the zander\nrule2() = has(starfish, musical_instrument) => proceed(starfish, spot_right_after(spot_of(zander)))\n# Rule3: If the squirrel has more than 9 friends, then the squirrel does not know the defense plan of the goldfish\nrule3() = friends(squirrel) > 9 => not knows(defense_plan_of(goldfish), squirrel)\n# Rule4: For the squid, if the belief is that the lion does not remove one of the pieces of the squid and the squirrel does not need the support of the squid, then you can add \"the squid steals five points from the mosquito\" to your conclusions\nrule4() = not remove(lion, piece_of(squid)) & not needs_support(squirrel, squid) => steal_points(squid, 5, mosquito)\n# Rule5: If something proceeds to the spot that is right after the spot of the zander, then it burns the warehouse of the squid, too\nrule5() = proceed(something, spot_right_after(spot_of(zander))) => burn(warehouse_of(squid), something)\n# Rule6: Regarding the squirrel, if it has something to sit on, then we can conclude that it does not know the defensive plans of the goldfish\nrule6() = has(squirrel, something_to_sit_on) => not knows(defensive_plans_of(goldfish), squirrel)\n# Rule7: If the ferret has a card whose color is one of the rainbow colors, then the ferret does not raise a flag of peace for the lion\nrule7() = has(ferret, card) and color(card) in rainbow_colors => not raise_flag_of_peace(ferret, lion)\n# Rule8: If you see that something sings a song of victory for the hummingbird but does not know the defensive plans of the goldfish, what can you certainly conclude? You can conclude that it does not need support from the squid\nrule8(something) = sing_song(something, victory_song_for(hummingbird)) & not knows(defensive_plans_of(goldfish), something) => not needs_support(something, squid)\n# Rule9: If the parrot prepares armor for the squirrel, then the squirrel is not going to sing a song of victory for the hummingbird\nrule9() = prepare_armor(parrot, squirrel) => not sing_song(squirrel, victory_song_for(hummingbird))\n# Rule10: If at least one animal raises a peace flag for the donkey, then the ferret raises a peace flag for the lion\nrule10() = raise_flag_of_peace(something, donkey) => raise_flag_of_peace(ferret, lion)\n# Rule11: If the starfish took a bike from the store, then the starfish proceeds to the spot that is right after the spot of the zander\nrule11() = took_bike(starfish, store) => proceed(starfish, spot_right_after(spot_of(zander)))\n# Rule12: If you are positive that one of the animals does not knock down the fortress of the sheep, you can be certain that it will remove one of the pieces of the squid without a doubt\nrule12() = not knock_down(sheep, fortress) => remove(something, piece_of(squid))\n# Rule13: Regarding the ferret, if it has fewer than 6 friends, then we can conclude that it does not raise a peace flag for the lion.\nrule13() = friends(ferret) < 6 => not raise_flag_of_peace(ferret, lion)\n# Rule10 is preferred over Rule13\norder(rule10) > order(rule13) = True\n# Rule10 is preferred over Rule7\norder(rule10) > order(rule7) = True\n# Rule12 is preferred over Rule1\norder(rule12) > order(rule1) = True\n\n# The current state of the game is as follows\n# The ferret has 14 friends\nfriends(ferret) = 14\n# The hare raises a peace flag for the donkey\nraise_flag_of_peace(hare, donkey) = True\n# The lobster proceeds to the spot right after the meerkat\nproceed(lobster, spot_right_after(spot_of(meerkat))) = True\n# The parrot prepares armor for the squirrel\nprepare_armor(parrot, squirrel) = True\n# The squirrel has 12 friends, and has some spinach\nfriends(squirrel) = 12\nhas(squirrel, spinach) = True\n# The starfish has some arugula\nhas(starfish, arugula) = True\n# The starfish stole a bike from the store\ntook_bike(starfish, store) = True\n\n# Based on the game state and the rules and preferences, does the squid steal five points from the mosquito?\nquestion = steal_points(squid, 5, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The gecko does not learn the basics of resource management from the koala, in the case where the tilapia learns the basics of resource management from the gecko\nRule2: If the tilapia has a high salary, then the tilapia respects the grasshopper\nRule3: If the squirrel has more than 3 friends, then it proceeds to the spot that is right after the spot of the puffin\nRule4: The gecko unquestionably learns elementary resource management from the koala, in the case where the grasshopper steals five points from the gecko\nRule5: If something knocks down the fortress of the snail but does not offer a job position to the meerkat, then it does not proceed to the spot that is right after the spot of the puffin\nRule6: If at least one animal proceeds to the spot that is right after the spot of the puffin, then the grasshopper steals five points from the gecko\nRule7: If the tilapia has a card whose color starts with the letter \"v\", then it does not respect the grasshopper\nRule8: If the first letter of the name of the tilapia is the same as the first letter of the name of the hummingbird, then the tilapia respects the grasshopper\nRule9: If the jellyfish steals five points from the turtle, then the turtle raises a peace flag for the grasshopper\n\nRule1 is preferred over Rule4\nRule5 is preferred over Rule3\nRule7 is preferred over Rule2\nRule7 is preferred over Rule8\n\nThe current state of the game is as follows\nThe hummingbird is named Cinnamon\nThe jellyfish steals five points from the turtle\nThe squirrel has 13 friends and does not offer a job to the meerkat\nThe tilapia has a well-paid job and is named Tango\n\nBased on the game state and the rules and preferences, does the gecko learn the basics of resource management from the koala?\nQuestion: Does the gecko learn the basics of resource management from the koala?",
        "idx": 228,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The gecko does not learn the basics of resource management from the koala, in the case where the tilapia learns the basics of resource management from the gecko\nrule1() = learn_basics_of_resource_management(gecko, koala) & learn_basics_of_resource_management(tilapia, gecko) => not learn_basics_of_resource_management(gecko, koala)\n# Rule2: If the tilapia has a high salary, then the tilapia respects the grasshopper\nrule2() = has_high_salary(tilapia) => respects(tilapia, grasshopper)\n# Rule3: Regarding the squirrel, if it has more than 3 friends, then we can conclude that it proceeds to the spot that is right after the spot of the puffin\nrule3() = friends(squirrel) > 3 => proceed(squirrel, spot_right_after(spot_of(puffin)))\n# Rule4: The gecko unquestionably learns elementary resource management from the koala, in the case where the grasshopper steals five points from the gecko\nrule4() = steal_points(grasshopper, 5, gecko) => learn_elementary_resource_management(gecko, koala)\n# Rule5: Be careful when something knocks down the fortress that belongs to the snail but does not offer a job position to the meerkat because in this case it will, surely, not proceed to the spot that is right after the spot of the puffin (this may or may not be problematic)\nrule5(something) = knock_down(something, fortress_of(snail)) & not offer_job_position(something, meerkat) => not proceed(something, spot_right_after(spot_of(puffin)))\n# Rule6: If at least one animal proceeds to the spot that is right after the spot of the puffin, then the grasshopper steals five points from the gecko\nrule6() = proceed(something, spot_right_after(spot_of(puffin))) => steal_points(grasshopper, 5, gecko)\n# Rule7: Regarding the tilapia, if it has a card whose color starts with the letter \"v\", then we can conclude that it does not respect the grasshopper\nrule7() = has_card_with_color_starting_with(tilapia, \"v\") => not respects(tilapia, grasshopper)\n# Rule8: If the tilapia has a name whose first letter is the same as the first letter of the hummingbird's name, then the tilapia respects the grasshopper\nrule8() = first_letter_of(name(tilapia)) == first_letter_of(name(hummingbird)) => respects(tilapia, grasshopper)\n# Rule9: If the jellyfish steals five of the points of the turtle, then the turtle raises a peace flag for the grasshopper.\nrule9() = steal_points(jellyfish, 5, turtle) => raise_flag_of_peace(turtle, grasshopper)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n# Rule7 is preferred over Rule8\norder(rule7) > order(rule8) = True\n\n# The current state of the game is as follows\n# The hummingbird is named Cinnamon\nname(hummingbird, Cinnamon) = True\n# The jellyfish steals five points from the turtle\nsteal_points(jellyfish, 5, turtle) = True\n# The squirrel has 13 friends, and does not offer a job to the meerkat\nfriends(squirrel) = 13\nnot offer_job_position(squirrel, meerkat) = True\n# The tilapia got a well-paid job, and is named Tango\nhas_well_paid_job(tilapia) = True\nname(tilapia, Tango) = True\n\n# Based on the game state and the rules and preferences, does the gecko learn the basics of resource management from the koala?\nquestion = learn_basics_of_resource_management(gecko, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the black bear is a fan of Chris Ronaldo, then it does not learn the basics of resource management from the leopard\nRule2: If the hummingbird offers a job position to the leopard and the black bear does not learn elementary resource management from the leopard, then the leopard learns elementary resource management from the kiwi\nRule3: If something learns elementary resource management from the kiwi, then it does not roll the dice for the sun bear\nRule4: If something knows the defensive plans of the buffalo, then it needs support from the leopard\nRule5: If the carp proceeds to the spot right after the leopard, then the leopard does not learn elementary resource management from the kiwi\nRule6: If the grizzly bear holds the same number of points as the leopard, then the leopard does not give a magnifying glass to the hummingbird\nRule7: If at least one animal winks at the goldfish, then the grizzly bear holds the same number of points as the leopard\nRule8: If something does not give a magnifying glass to the hummingbird, then it rolls the dice for the sun bear\nRule9: If the grizzly bear has a high salary, then the grizzly bear does not hold the same number of points as the leopard\nRule10: If something winks at the donkey and proceeds to the spot right after the cheetah, then it offers a job position to the leopard\nRule11: If the panther needs support from the leopard, then the leopard gives a magnifying glass to the hummingbird\n\nRule3 is preferred over Rule8\nRule5 is preferred over Rule2\nRule6 is preferred over Rule11\nRule9 is preferred over Rule7\n\nThe current state of the game is as follows\nThe black bear supports Chris Ronaldo\nThe caterpillar becomes an enemy of the jellyfish\nThe hummingbird proceeds to the spot right after the cheetah\nThe hummingbird winks at the donkey\nThe panther knows the defensive plans of the buffalo\nThe starfish winks at the goldfish\n\nBased on the game state and the rules and preferences, does the leopard roll the dice for the sun bear?\nQuestion: Does the leopard roll the dice for the sun bear?",
        "idx": 229,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the black bear, if it is a fan of Chris Ronaldo, then we can conclude that it does not learn the basics of resource management from the leopard\nrule1() = fan_of(black_bear, Chris_Ronaldo) => not learn_basics_of_resource_management(black_bear, leopard)\n# Rule2: If the hummingbird offers a job position to the leopard and the black bear does not learn elementary resource management from the leopard, then, inevitably, the leopard learns elementary resource management from the kiwi\nrule2() = offer_job_position(hummingbird, leopard) & not learn_elementary_resource_management(black_bear, leopard) => learn_elementary_resource_management(leopard, kiwi)\n# Rule3: If something learns elementary resource management from the kiwi, then it does not roll the dice for the sun bear\nrule3(something) = learn_elementary_resource_management(something, kiwi) => not roll_dice(something, sun_bear)\n# Rule4: If something knows the defensive plans of the buffalo, then it needs support from the leopard, too\nrule4(something) = knows(defensive_plans_of(buffalo), something) => needs_support(something, leopard)\n# Rule5: If the carp proceeds to the spot right after the leopard, then the leopard is not going to learn elementary resource management from the kiwi\nrule5() = proceed(carp, spot_right_after(spot_of(leopard))) => not learn_elementary_resource_management(leopard, kiwi)\n# Rule6: If the grizzly bear holds the same number of points as the leopard, then the leopard is not going to give a magnifying glass to the hummingbird\nrule6() = points(grizzly_bear) == points(leopard) => not give_magnifying_glass(leopard, hummingbird)\n# Rule7: If at least one animal winks at the goldfish, then the grizzly bear holds the same number of points as the leopard\nrule7() = winks_at(something, goldfish) => points(grizzly_bear) == points(leopard)\n# Rule8: If something does not give a magnifying glass to the hummingbird, then it rolls the dice for the sun bear\nrule8(something) = not give_magnifying_glass(something, hummingbird) => roll_dice(something, sun_bear)\n# Rule9: If the grizzly bear has a high salary, then the grizzly bear does not hold the same number of points as the leopard\nrule9() = has_high_salary(grizzly_bear) => not points(grizzly_bear) == points(leopard)\n# Rule10: Be careful when something winks at the donkey and also proceeds to the spot that is right after the spot of the cheetah because in this case it will surely offer a job position to the leopard (this may or may not be problematic)\nrule10(something) = winks_at(something, donkey) & proceed(something, spot_right_after(spot_of(cheetah))) => offer_job_position(something, leopard)\n# Rule11: The leopard unquestionably gives a magnifying glass to the hummingbird, in the case where the panther needs support from the leopard.\nrule11() = needs_support(panther, leopard) => give_magnifying_glass(leopard, hummingbird)\n# Rule3 is preferred over Rule8\norder(rule3) > order(rule8) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule6 is preferred over Rule11\norder(rule6) > order(rule11) = True\n# Rule9 is preferred over Rule7\norder(rule9) > order(rule7) = True\n\n# The current state of the game is as follows\n# The black bear supports Chris Ronaldo\nsupports(black_bear, Chris_Ronaldo) = True\n# The caterpillar becomes an enemy of the jellyfish\nenemy(caterpillar, jellyfish) = True\n# The hummingbird proceeds to the spot right after the cheetah\nproceed(hummingbird, spot_right_after(spot_of(cheetah))) = True\n# The hummingbird winks at the donkey\nwinks_at(hummingbird, donkey) = True\n# The panther knows the defensive plans of the buffalo\nknows(defensive_plans_of(buffalo), panther) = True\n# The starfish winks at the goldfish\nwinks_at(starfish, goldfish) = True\n\n# Based on the game state and the rules and preferences, does the leopard roll the dice for the sun bear?\nquestion = roll_dice(leopard, sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something knows the defensive plans of the squirrel and also proceeds to the spot right after the phoenix because in this case it will surely not know the defensive plans of the panther (this may or may not be problematic)\nRule2: If the penguin is a fan of Chris Ronaldo, then it needs support from the halibut\nRule3: If the penguin needs the support of the halibut, then the halibut raises a peace flag for the sun bear\nRule4: If something offers a job position to the catfish, then it knows the defense plan of the panther, too\nRule5: If the baboon has a card with a primary color, then it becomes an enemy of the grizzly bear\nRule6: If something steals five points from the puffin, then it does not roll the dice for the octopus\nRule7: If the black bear voted for the mayor, then it does not offer a job to the catfish\nRule8: If the black bear has something to drink, then it does not offer a job to the catfish\nRule9: If at least one animal becomes an enemy of the grizzly bear, then the whale knows the defensive plans of the panther\nRule10: If the penguin has something to sit on, then it needs the support of the halibut\nRule11: If the zander has a name whose first letter is the same as the first letter of the caterpillar's name, then it raises a flag of peace for the polar bear\nRule12: If at least one animal owes money to the canary, then the zander does not raise a flag of peace for the polar bear\nRule13: If the zander has a device to connect to the internet, then it raises a peace flag for the polar bear\nRule14: If the black bear has a leafy green vegetable, then it offers a job to the catfish\nRule15: If something offers a job to the snail, then it proceeds to the spot that is right after the spot of the phoenix, too\nRule16: If the whale and the black bear know the defense plan of the panther, then the panther knocks down the fortress of the swordfish\n\nRule1 is preferred over Rule9\nRule12 is preferred over Rule11\nRule12 is preferred over Rule13\nRule7 is preferred over Rule14\nRule8 is preferred over Rule14\n\nThe current state of the game is as follows\nThe baboon has a card with orange color\nThe black bear assassinated the mayor\nThe black bear steals five points from the puffin\nThe black bear has romaine lettuce\nThe caterpillar is named Max\nThe penguin has arugula\nThe penguin supports Chris Ronaldo\nThe whale offers a job to the snail\nThe zander has a computer\nThe zander is named Bella\n\nBased on the game state and the rules and preferences, does the panther knock down the fortress of the swordfish?\nQuestion: Does the panther knock down the fortress of the swordfish?",
        "idx": 230,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something knows the defensive plans of the squirrel and also proceeds to the spot right after the phoenix because in this case it will surely not know the defensive plans of the panther (this may or may not be problematic)\nrule1(something) = knows(defensive_plans_of(squirrel), something) & proceed(something, spot_right_after(spot_of(phoenix))) => not knows(defensive_plans_of(panther), something)\n# Rule2: Regarding the penguin, if it is a fan of Chris Ronaldo, then we can conclude that it needs support from the halibut\nrule2() = fan_of(penguin, Chris_Ronaldo) => needs_support(penguin, halibut)\n# Rule3: If the penguin needs the support of the halibut, then the halibut raises a peace flag for the sun bear\nrule3() = needs_support(penguin, halibut) => raise_flag_of_peace(halibut, sun_bear)\n# Rule4: If something offers a job position to the catfish, then it knows the defense plan of the panther, too\nrule4(something) = offer_job_position(something, catfish) => knows(defense_plan_of(panther), something)\n# Rule5: If the baboon has a card with a primary color, then the baboon becomes an enemy of the grizzly bear\nrule5() = has(baboon, card_with(primary_color)) => enemy(baboon, grizzly_bear)\n# Rule6: If something steals five points from the puffin, then it does not roll the dice for the octopus\nrule6(something) = steal_points(something, puffin, 5) => not roll_dice(something, octopus)\n# Rule7: If the black bear voted for the mayor, then the black bear does not offer a job to the catfish\nrule7() = voted(black_bear, mayor) => not offer_job_position(black_bear, catfish)\n# Rule8: If the black bear has something to drink, then the black bear does not offer a job to the catfish\nrule8() = has(black_bear, drink) => not offer_job_position(black_bear, catfish)\n# Rule9: If at least one animal becomes an enemy of the grizzly bear, then the whale knows the defensive plans of the panther\nrule9() = enemy(something, grizzly_bear) => knows(defensive_plans_of(panther), whale)\n# Rule10: If the penguin has something to sit on, then the penguin needs the support of the halibut\nrule10() = has(penguin, something_to_sit_on) => needs_support(penguin, halibut)\n# Rule11: Regarding the zander, if it has a name whose first letter is the same as the first letter of the caterpillar's name, then we can conclude that it raises a flag of peace for the polar bear\nrule11() = first_letter_of(name(zander)) == first_letter_of(name(caterpillar)) => raise_flag_of_peace(zander, polar_bear)\n# Rule12: If at least one animal owes money to the canary, then the zander does not raise a flag of peace for the polar bear\nrule12() = owes_money_to(something, canary) => not raise_flag_of_peace(zander, polar_bear)\n# Rule13: Regarding the zander, if it has a device to connect to the internet, then we can conclude that it raises a peace flag for the polar bear\nrule13() = has(zander, device_to_connect_to_internet) => raise_flag_of_peace(zander, polar_bear)\n# Rule14: If the black bear has a leafy green vegetable, then the black bear offers a job to the catfish\nrule14() = has(black_bear, leafy_green_vegetable) => offer_job_position(black_bear, catfish)\n# Rule15: If something offers a job to the snail, then it proceeds to the spot that is right after the spot of the phoenix, too\nrule15(something) = offer_job_position(something, snail) => proceed(something, spot_right_after(spot_of(phoenix)))\n# Rule16: If the whale knows the defense plan of the panther and the black bear knows the defense plan of the panther, then the panther knocks down the fortress of the swordfish.\nrule16() = knows(defense_plan_of(panther), whale) & knows(defense_plan_of(panther), black_bear) => knock_down(panther, fortress_of(swordfish))\n# Rule1 is preferred over Rule9\norder(rule1) > order(rule9) = True\n# Rule12 is preferred over Rule11\norder(rule12) > order(rule11) = True\n# Rule12 is preferred over Rule13\norder(rule12) > order(rule13) = True\n# Rule7 is preferred over Rule14\norder(rule7) > order(rule14) = True\n# Rule8 is preferred over Rule14\norder(rule8) > order(rule14) = True\n\n# The current state of the game is as follows\n# The baboon has a card that is orange in color\nhas(baboon, card_with(orange_color)) = True\n# The black bear assassinated the mayor, and steals five points from the puffin\nassassinate(black_bear, mayor) = True\nsteal_points(black_bear, puffin, 5) = True\n# The black bear has some romaine lettuce\nhas(black_bear, romaine_lettuce) = True\n# The caterpillar is named Max\nname(caterpillar, Max) = True\n# The penguin has some arugula, and supports Chris Ronaldo\nhas(penguin, arugula) = True\nsupports(penguin, Chris_Ronaldo) = True\n# The whale offers a job to the snail\noffer_job_position(whale, snail) = True\n# The zander has a computer, and is named Bella\nhas(zander, computer) = True\nname(zander, Bella) = True\n\n# Based on the game state and the rules and preferences, does the panther knock down the fortress of the swordfish?\nquestion = knock_down(panther, fortress_of(swordfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal knocks down the fortress that belongs to the puffin, then the grizzly bear respects the hummingbird\nRule2: If at least one animal respects the hummingbird, then the spider offers a job to the tiger\nRule3: If at least one animal needs the support of the salmon, then the jellyfish knocks down the fortress that belongs to the puffin.\n\nThe current state of the game is as follows\nThe squirrel needs support from the salmon\n\nBased on the game state and the rules and preferences, does the spider offer a job to the tiger?\nQuestion: Does the spider offer a job to the tiger?",
        "idx": 231,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal knocks down the fortress that belongs to the puffin, then the grizzly bear respects the hummingbird\nrule1() = knock_down(fortress_of(puffin), something) => respects(grizzly_bear, hummingbird)\n# Rule2: If at least one animal respects the hummingbird, then the spider offers a job to the tiger\nrule2() = respects(something, hummingbird) => offer_job(spider, tiger)\n# Rule3: If at least one animal needs the support of the salmon, then the jellyfish knocks down the fortress that belongs to the puffin.\nrule3() = needs_support(something, salmon) => knock_down(fortress_of(puffin), jellyfish)\n\n# The current state of the game is as follows\n# The squirrel needs support from the salmon\nneeds_support(squirrel, salmon) = True\n\n# Based on the game state and the rules and preferences, does the spider offer a job to the tiger?\nquestion = offer_job(spider, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The oscar will not show all her cards to the octopus, in the case where the whale does not knock down the fortress that belongs to the oscar\nRule2: If at least one animal learns the basics of resource management from the donkey, then the whale offers a job to the swordfish\nRule3: If the name of the whale starts with the same letter as the name of the rabbit, then the whale does not offer a job to the swordfish\nRule4: If the whale created a time machine, then it attacks the green fields of the swordfish\nRule5: If the goldfish does not learn elementary resource management from the whale, then the whale knocks down the fortress that belongs to the oscar\nRule6: If something offers a job to the swordfish and attacks the green fields owned by the swordfish, then it does not knock down the fortress of the oscar\n\nRule3 is preferred over Rule2\nRule5 is preferred over Rule6\n\nThe current state of the game is as follows\nThe catfish learns the basics of resource management from the donkey\nThe whale invented a time machine\nThe whale is named Blossom\n\nBased on the game state and the rules and preferences, does the oscar show all her cards to the octopus?\nQuestion: Does the oscar show all her cards to the octopus?",
        "idx": 232,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The oscar will not show her cards (all of them) to the octopus, in the case where the whale does not knock down the fortress that belongs to the oscar\nrule1() = not knock_down(fortress_of(oscar), whale) => not show_cards(oscar, octopus)\n# Rule2: If at least one animal learns the basics of resource management from the donkey, then the whale offers a job to the swordfish\nrule2() = learns_basics_of_resource_management(something, donkey) => offer_job(whale, swordfish)\n# Rule3: Regarding the whale, if it has a name whose first letter is the same as the first letter of the rabbit's name, then we can conclude that it does not offer a job to the swordfish\nrule3() = first_letter_of(name(whale)) == first_letter_of(name(rabbit)) => not offer_job(whale, swordfish)\n# Rule4: Regarding the whale, if it created a time machine, then we can conclude that it attacks the green fields of the swordfish\nrule4() = created_time_machine(whale) => attack_green_fields(whale, swordfish)\n# Rule5: If the goldfish does not learn elementary resource management from the whale, then the whale knocks down the fortress that belongs to the oscar\nrule5() = not learns_elementary_resource_management(goldfish, whale) => knock_down(fortress_of(oscar), whale)\n# Rule6: If you see that something offers a job to the swordfish and attacks the green fields whose owner is the swordfish, what can you certainly conclude? You can conclude that it does not knock down the fortress of the oscar.\nrule6(something) = offer_job(something, swordfish) & attack_green_fields(swordfish, something) => not knock_down(fortress_of(oscar), something)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n\n# The current state of the game is as follows\n# The catfish learns the basics of resource management from the donkey\nlearns_basics_of_resource_management(catfish, donkey) = True\n# The whale invented a time machine\ncreated_time_machine(whale) = True\n# The whale is named Blossom\nname(whale, Blossom) = True\n\n# Based on the game state and the rules and preferences, does the oscar show all her cards to the octopus?\nquestion = show_cards(oscar, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals raise a flag of peace for the tilapia, you can be certain that it will also eat the food of the penguin\nRule2: If the viperfish has something to drink, then it does not know the defense plan of the moose\nRule3: If the name of the viperfish starts with the same letter as the name of the doctorfish, then the viperfish does not know the defense plan of the moose\nRule4: If the viperfish has a card with a color that is one of the rainbow colors, then it knows the defense plan of the moose\nRule5: If the viperfish removes one of the pieces of the cricket, then the cricket offers a job to the gecko\nRule6: If something knows the defense plans of the moose but does not eat the food of the penguin, then it removes one of the pieces of the cricket\n\nRule2 is preferred over Rule4\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe doctorfish is named Pablo\nThe viperfish has a card that is green in color\nThe viperfish is named Meadow\nThe viperfish raises a peace flag for the tilapia\n\nBased on the game state and the rules and preferences, does the cricket offer a job to the gecko?\nQuestion: Does the cricket offer a job to the gecko?",
        "idx": 233,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals raises a flag of peace for the tilapia, you can be certain that it will also eat the food of the penguin\nrule1() = raise_flag_of_peace(something, tilapia) => eat_food(something, penguin)\n# Rule2: Regarding the viperfish, if it has something to drink, then we can conclude that it does not know the defense plan of the moose\nrule2() = has(viperfish, drink) => not knows(defense_plan_of(moose), viperfish)\n# Rule3: If the viperfish has a name whose first letter is the same as the first letter of the doctorfish's name, then the viperfish does not know the defense plan of the moose\nrule3() = first_letter_of(name(viperfish)) == first_letter_of(name(doctorfish)) => not knows(defense_plan_of(moose), viperfish)\n# Rule4: Regarding the viperfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it knows the defense plan of the moose\nrule4() = has(viperfish, card) and color(card) in rainbow_colors => knows(defense_plan_of(moose), viperfish)\n# Rule5: The cricket unquestionably offers a job to the gecko, in the case where the viperfish removes one of the pieces of the cricket\nrule5() = remove(viperfish, piece_of(cricket)) => offer_job(cricket, gecko)\n# Rule6: If you see that something knows the defensive plans of the moose but does not eat the food of the penguin, what can you certainly conclude? You can conclude that it removes from the board one of the pieces of the cricket.\nrule6(something) = knows(defense_plan_of(moose), something) & not eat_food(something, penguin) => remove(something, piece_of(cricket))\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The doctorfish is named Pablo\nname(doctorfish, Pablo) = True\n# The viperfish has a card that is green in color, is named Meadow, and raises a peace flag for the tilapia\nhas(viperfish, card_with(green_color)) = True\nname(viperfish, Meadow) = True\nraise_flag_of_peace(viperfish, tilapia) = True\n\n# Based on the game state and the rules and preferences, does the cricket offer a job to the gecko?\nquestion = offer_job(cricket, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The black bear does not know the defensive plans of the doctorfish whenever at least one animal eats the food of the phoenix\nRule2: If the parrot has a card with a primary color, then the parrot knocks down the fortress that belongs to the koala\nRule3: If at least one animal knocks down the fortress of the koala, then the aardvark does not need support from the black bear\nRule4: If the oscar eats the food of the amberjack, then the amberjack prepares armor for the black bear\nRule5: If the amberjack has a name whose first letter is the same as the first letter of the phoenix's name, then it steals five points from the squirrel\nRule6: If at least one animal burns the warehouse that is in possession of the buffalo, then the oscar eats the food that belongs to the amberjack\nRule7: If the amberjack has fewer than five friends, then it steals five points from the squirrel\nRule8: If the amberjack does not have her keys, then it steals five points from the eagle\nRule9: If something steals five points from the squirrel and steals five points from the eagle, then it does not prepare armor for the black bear\nRule10: If the parrot has a musical instrument, then the parrot knocks down the fortress of the koala\nRule11: If the amberjack prepares armor for the black bear and the aardvark does not need the support of the black bear, then the black bear knows the defense plan of the doctorfish\nRule12: If the oscar has fewer than fifteen friends, then the oscar does not eat the food of the amberjack\n\nRule1 is preferred over Rule11\nRule4 is preferred over Rule9\nRule6 is preferred over Rule12\n\nThe current state of the game is as follows\nThe amberjack has three friends, one of them is bald and two are not\nThe amberjack is named Lily\nThe amberjack lost her keys\nThe caterpillar burns the warehouse of the buffalo\nThe oscar has eight friends, one of them is kind and seven are not\nThe oscar has a beer\nThe parrot has a card that is black in color\nThe parrot has a violin\nThe phoenix is named Blossom\n\nBased on the game state and the rules and preferences, does the black bear know the defensive plans of the doctorfish?\nQuestion: Does the black bear know the defensive plans of the doctorfish?",
        "idx": 234,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The black bear does not know the defensive plans of the doctorfish whenever at least one animal eats the food of the phoenix\nrule1() = eats_food_of(something, phoenix) => not knows_defensive_plans(black_bear, doctorfish)\n# Rule2: If the parrot has a card with a primary color, then the parrot knocks down the fortress that belongs to the koala\nrule2() = has(parrot, card_with(primary_color)) => knock_down(parrot, fortress_of(koala))\n# Rule3: If at least one animal knocks down the fortress of the koala, then the aardvark does not need support from the black bear\nrule3() = knock_down(something, fortress_of(koala)) => not needs_support(aardvark, black_bear)\n# Rule4: If the oscar eats the food of the amberjack, then the amberjack prepares armor for the black bear\nrule4() = eats_food_of(oscar, amberjack) => prepare_armor(amberjack, black_bear)\n# Rule5: Regarding the amberjack, if it has a name whose first letter is the same as the first letter of the phoenix's name, then we can conclude that it steals five points from the squirrel\nrule5() = first_letter_of(name(amberjack)) == first_letter_of(name(phoenix)) => steal_points(amberjack, 5, squirrel)\n# Rule6: If at least one animal burns the warehouse that is in possession of the buffalo, then the oscar eats the food that belongs to the amberjack\nrule6() = burn(warehouse_of(buffalo), something) => eats_food_of(oscar, amberjack)\n# Rule7: Regarding the amberjack, if it has fewer than five friends, then we can conclude that it steals five of the points of the squirrel\nrule7() = friends(amberjack) < 5 => steal_points(amberjack, 5, squirrel)\n# Rule8: Regarding the amberjack, if it does not have her keys, then we can conclude that it steals five points from the eagle\nrule8() = not has_keys(amberjack) => steal_points(amberjack, 5, eagle)\n# Rule9: If you see that something steals five of the points of the squirrel and steals five points from the eagle, what can you certainly conclude? You can conclude that it does not prepare armor for the black bear\nrule9() = steal_points(something, 5, squirrel) & steal_points(something, 5, eagle) => not prepare_armor(something, black_bear)\n# Rule10: If the parrot has a musical instrument, then the parrot knocks down the fortress of the koala\nrule10() = has(parrot, musical_instrument) => knock_down(parrot, fortress_of(koala))\n# Rule11: For the black bear, if the belief is that the amberjack prepares armor for the black bear and the aardvark does not need the support of the black bear, then you can add \"the black bear knows the defense plan of the doctorfish\" to your conclusions\nrule11() = prepare_armor(amberjack, black_bear) & not needs_support(aardvark, black_bear) => knows_defensive_plans(black_bear, doctorfish)\n# Rule12: If the oscar has fewer than fifteen friends, then the oscar does not eat the food of the amberjack.\nrule12() = friends(oscar) < 15 => not eats_food_of(oscar, amberjack)\n# Rule1 is preferred over Rule11\norder(rule1) > order(rule11) = True\n# Rule4 is preferred over Rule9\norder(rule4) > order(rule9) = True\n# Rule6 is preferred over Rule12\norder(rule6) > order(rule12) = True\n\n# The current state of the game is as follows\n# The amberjack has one friend that is bald and 2 friends that are not\nfriends(amberjack) = 3\nhas(amberjack, bald_friend) = True\nhas(amberjack, non_bald_friend1) = True\nhas(amberjack, non_bald_friend2) = True\n# The amberjack is named Lily\nname(amberjack, Lily) = True\n# The amberjack lost her keys\nhas_keys(amberjack) = False\n# The caterpillar burns the warehouse of the buffalo\nburn(warehouse_of(buffalo), caterpillar) = True\n# The oscar has 1 friend that is kind and 7 friends that are not\nfriends(oscar) = 8\nhas(oscar, kind_friend) = True\nhas(oscar, non_kind_friend1) = True\nhas(oscar, non_kind_friend2) = True\nhas(oscar, non_kind_friend3) = True\nhas(oscar, non_kind_friend4) = True\nhas(oscar, non_kind_friend5) = True\nhas(oscar, non_kind_friend6) = True\nhas(oscar, non_kind_friend7) = True\n# The oscar has a beer\nhas(oscar, beer) = True\n# The parrot has a card that is black in color\nhas(parrot, card_with(black_color)) = True\n# The parrot has a violin\nhas(parrot, violin) = True\n# The phoenix is named Blossom\nname(phoenix, Blossom) = True\n\n# Based on the game state and the rules and preferences, does the black bear know the defensive plans of the doctorfish?\nquestion = knows_defensive_plans(black_bear, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not sing a song of victory for the eel and also does not raise a peace flag for the kudu, then it does not sing a song of victory for the salmon\nRule2: If the kudu works more hours than before, then it holds an equal number of points as the snail\nRule3: If the goldfish rolls the dice for the snail and the kudu holds an equal number of points as the snail, then the snail does not raise a peace flag for the kudu\nRule4: If the goldfish has something to carry apples and oranges, then it rolls the dice for the snail\nRule5: If something needs support from the hare, then it steals five points from the blobfish\nRule6: If the kudu has a card with a color from the rainbow colors, then it holds the same number of points as the snail\nRule7: The snail raises a peace flag for the kudu, in the case where the turtle winks at the snail\nRule8: If something steals five points from the blobfish, then it does not sing a song of victory for the eel\nRule9: If at least one animal owes money to the phoenix, then the snail sings a victory song for the salmon\n\nRule7 is preferred over Rule3\nRule9 is preferred over Rule1\n\nThe current state of the game is as follows\nThe goldfish has a knapsack\nThe kudu has a card that is green in color\nThe kudu reduced her work hours recently\nThe snail needs support from the hare\n\nBased on the game state and the rules and preferences, does the snail sing a victory song for the salmon?\nQuestion: Does the snail sing a victory song for the salmon?",
        "idx": 235,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not sing a song of victory for the eel and also does not raise a peace flag for the kudu, what can you certainly conclude? You can conclude that it also does not sing a song of victory for the salmon\nrule1() = not sing_song(something, victory_song_for(eel)) & not raise_flag_of_peace(something, kudu) => not sing_song(something, victory_song_for(salmon))\n# Rule2: If the kudu works more hours than before, then the kudu holds an equal number of points as the snail\nrule2() = increase_work_hours(kudu) => points(kudu) == points(snail)\n# Rule3: If the goldfish rolls the dice for the snail and the kudu holds an equal number of points as the snail, then the snail will not raise a flag of peace for the kudu\nrule3() = roll_dice(goldfish, snail) & points(kudu) == points(snail) => not raise_flag_of_peace(snail, kudu)\n# Rule4: Regarding the goldfish, if it has something to carry apples and oranges, then we can conclude that it rolls the dice for the snail\nrule4() = has(goldfish, knapsack_with(apples, oranges)) => roll_dice(goldfish, snail)\n# Rule5: If you are positive that you saw one of the animals needs support from the hare, you can be certain that it will also steal five of the points of the blobfish\nrule5(something) = needs_support(something, hare) => steal_points(something, 5, blobfish)\n# Rule6: Regarding the kudu, if it has a card whose color is one of the rainbow colors, then we can conclude that it holds the same number of points as the snail\nrule6() = has(kudu, card_with(color_in(rainbow_colors))) => points(kudu) == points(snail)\n# Rule7: The snail unquestionably raises a peace flag for the kudu, in the case where the turtle winks at the snail\nrule7() = wink(turtle, snail) => raise_flag_of_peace(snail, kudu)\n# Rule8: If you are positive that you saw one of the animals steals five of the points of the blobfish, you can be certain that it will not sing a song of victory for the eel\nrule8(something) = steal_points(something, 5, blobfish) => not sing_song(something, victory_song_for(eel))\n# Rule9: If at least one animal owes $$$ to the phoenix, then the snail sings a victory song for the salmon.\nrule9() = owes_money_to(something, phoenix) => sing_song(snail, victory_song_for(salmon))\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n# Rule9 is preferred over Rule1\norder(rule9) > order(rule1) = True\n\n# The current state of the game is as follows\n# The goldfish has a knapsack\nhas(goldfish, knapsack) = True\n# The kudu has a card that is green in color\nhas(kudu, card_with(green_color)) = True\n# The kudu reduced her work hours recently\nreduce_work_hours(kudu) = True\n# The snail needs support from the hare\nneeds_support(snail, hare) = True\n\n# Based on the game state and the rules and preferences, does the snail sing a victory song for the salmon?\nquestion = sing_song(snail, victory_song_for(salmon))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something owes money to the doctorfish, then it gives a magnifying glass to the octopus, too\nRule2: If the hare gives a magnifying glass to the octopus, then the octopus unquestionably attacks the green fields whose owner is the polar bear\nRule3: If at least one animal attacks the green fields of the amberjack, then the blobfish eats the food that belongs to the polar bear\nRule4: If the phoenix has a sharp object, then it burns the warehouse that is in possession of the goldfish\nRule5: If the halibut has a musical instrument, then the halibut attacks the green fields of the amberjack\nRule6: If the octopus does not attack the green fields whose owner is the polar bear but the lobster burns the warehouse that is in possession of the polar bear, then the polar bear prepares armor for the koala\nRule7: If at least one animal burns the warehouse of the goldfish, then the lobster burns the warehouse of the polar bear\nRule8: If the phoenix took a bike from the store, then the phoenix burns the warehouse that is in possession of the goldfish\n\nThe current state of the game is as follows\nThe halibut has a cello\nThe hare owes money to the doctorfish\nThe phoenix has a cutter and parked her bike in front of the store\n\nBased on the game state and the rules and preferences, does the polar bear prepare armor for the koala?\nQuestion: Does the polar bear prepare armor for the koala?",
        "idx": 236,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something owes money to the doctorfish, then it gives a magnifying glass to the octopus, too\nrule1() = owes_money_to(something, doctorfish) => give(something, magnifying_glass, octopus)\n# Rule2: The octopus unquestionably attacks the green fields whose owner is the polar bear, in the case where the hare gives a magnifying glass to the octopus\nrule2() = give(hare, magnifying_glass, octopus) => attack(octopus, green_fields_of(polar_bear))\n# Rule3: If at least one animal attacks the green fields of the amberjack, then the blobfish eats the food that belongs to the polar bear\nrule3(something) = attack(something, green_fields_of(amberjack)) => eat(blobfish, food_of(polar_bear))\n# Rule4: Regarding the phoenix, if it has a sharp object, then we can conclude that it burns the warehouse that is in possession of the goldfish\nrule4() = has(phoenix, sharp_object) => burn(warehouse_of(goldfish))\n# Rule5: If the halibut has a musical instrument, then the halibut attacks the green fields of the amberjack\nrule5() = has(halibut, musical_instrument) => attack(halibut, green_fields_of(amberjack))\n# Rule6: For the polar bear, if the belief is that the octopus does not attack the green fields whose owner is the polar bear but the lobster burns the warehouse that is in possession of the polar bear, then you can add \"the polar bear prepares armor for the koala\" to your conclusions\nrule6() = not attack(octopus, green_fields_of(polar_bear)) & burn(warehouse_of(lobster), polar_bear) => prepare_armor(polar_bear, koala)\n# Rule7: The lobster burns the warehouse of the polar bear whenever at least one animal burns the warehouse of the goldfish\nrule7() = burn(warehouse_of(goldfish)) => burn(warehouse_of(lobster), polar_bear)\n# Rule8: If the phoenix took a bike from the store, then the phoenix burns the warehouse that is in possession of the goldfish.\nrule8() = took(phoenix, bike, store) => burn(warehouse_of(goldfish))\n\n# The current state of the game is as follows\n# The halibut has a cello\nhas(halibut, cello) = True\n# The hare owes money to the doctorfish\nowes_money_to(hare, doctorfish) = True\n# The phoenix has a cutter, and parked her bike in front of the store\nhas(phoenix, cutter) = True\nparked(phoenix, bike, front_of(store)) = True\n\n# Based on the game state and the rules and preferences, does the polar bear prepare armor for the koala?\nquestion = prepare_armor(polar_bear, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cat learns elementary resource management from the blobfish whenever at least one animal attacks the green fields owned by the grizzly bear\nRule2: The cheetah learns elementary resource management from the mosquito if the koala does not give a magnifier to the cheetah\nRule3: If the spider winks at the cat and the tiger does not become an enemy of the cat, then the cat will never learn the basics of resource management from the blobfish\nRule4: The spider winks at the cat if the cricket respects the spider\nRule5: If the cheetah has a high salary, then the cheetah rolls the dice for the lobster\nRule6: If an animal does not owe money to the squid, then it will respect the spider\nRule7: If something rolls the dice for the lobster and learns the basics of resource management from the mosquito, then it will attack the green fields owned by the grizzly bear\nRule8: The cheetah does not roll the dice for the lobster if at least one animal steals five points from the hippopotamus\n\nRule3 is preferred over Rule1\nRule8 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cheetah has a well-paid job\nThe cheetah has 9 mean friends and 1 friend named Tango\nThe zander is named Teddy\nThe cricket does not owe money to the squid\nThe koala does not give a magnifier to the cheetah\n\nBased on the game state and the rules and preferences, does the cat learn the basics of resource management from the blobfish?\nQuestion: Does the cat learn the basics of resource management from the blobfish?",
        "idx": 237,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cat learns elementary resource management from the blobfish whenever at least one animal attacks the green fields whose owner is the grizzly bear\nrule1() = attack(green_fields_of(grizzly_bear), something) => learn_basics_of_resource_management(cat, blobfish)\n# Rule2: The cheetah unquestionably learns elementary resource management from the mosquito, in the case where the koala does not give a magnifier to the cheetah\nrule2() = not give_magnifier(koala, cheetah) => learn_elementary_resource_management(cheetah, mosquito)\n# Rule3: If the spider winks at the cat and the tiger does not become an enemy of the cat, then the cat will never learn the basics of resource management from the blobfish\nrule3() = wink(spider, cat) & not enemy(tiger, cat) => never_learn_basics_of_resource_management(cat, blobfish)\n# Rule4: The spider unquestionably winks at the cat, in the case where the cricket respects the spider\nrule4() = respects(cricket, spider) => wink(spider, cat)\n# Rule5: If the cheetah has a high salary, then the cheetah rolls the dice for the lobster\nrule5() = has_high_salary(cheetah) => roll_dice(cheetah, lobster)\n# Rule6: If you are positive that one of the animals does not owe money to the squid, you can be certain that it will respect the spider without a doubt\nrule6(something) = not owes_money_to(something, squid) => respect(something, spider)\n# Rule7: Be careful when something rolls the dice for the lobster and also learns the basics of resource management from the mosquito because in this case it will surely attack the green fields whose owner is the grizzly bear (this may or may not be problematic)\nrule7(something) = roll_dice(something, lobster) & learn_basics_of_resource_management(something, mosquito) => attack(green_fields_of(grizzly_bear), something)\n# Rule8: The cheetah does not roll the dice for the lobster whenever at least one animal steals five points from the hippopotamus.\nrule8() = steal_points_from(hippopotamus, something) => not roll_dice(cheetah, lobster)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cheetah got a well-paid job\nhas_high_salary(cheetah) = True\n# The cheetah has 9 friends that are mean and one friend that is not, and is named Tango\nfriends(cheetah) = 9 mean_friends + 1 friend_named(Tango)\n# The zander is named Teddy\nname(zander, Teddy) = True\n# The cricket does not owe money to the squid\nnot owes_money_to(cricket, squid) = True\n# The koala does not give a magnifier to the cheetah\nnot give_magnifier(koala, cheetah) = True\n\n# Based on the game state and the rules and preferences, does the cat learn the basics of resource management from the blobfish?\nquestion = learn_basics_of_resource_management(cat, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the parrot offers a job to the penguin and the buffalo does not raise a peace flag for the penguin, then the penguin does not attack the green fields owned by the doctorfish\nRule2: If the black bear does not sing a victory song for the crocodile, then the crocodile does not become an actual enemy of the koala\nRule3: If something sings a victory song for the halibut, then it raises a peace flag for the penguin\nRule4: If the parrot has a leafy green vegetable, then it offers a job position to the tiger\nRule5: If the cow has a high-quality paper, then it gives a magnifying glass to the dog\nRule6: If something offers a job position to the tiger and offers a job position to the cheetah, then it does not offer a job to the penguin\nRule7: If the parrot has a name whose first letter is the same as the first letter of the viperfish's name, then the parrot does not eat the food that belongs to the jellyfish\nRule8: If the cow has a leafy green vegetable, then it does not give a magnifier to the dog\nRule9: If the kudu has a name whose first letter is the same as the first letter of the leopard's name, then it holds the same number of points as the sheep\nRule10: If at least one animal removes one of the pieces of the aardvark, then the parrot does not offer a job to the tiger\nRule11: If something gives a magnifier to the dog, then it raises a peace flag for the dog\nRule12: If the cockroach attacks the green fields owned by the crocodile, then the crocodile becomes an actual enemy of the koala\nRule13: If the parrot has more than twelve friends, then the parrot eats the food of the jellyfish\nRule14: If the parrot has something to drink, then it does not eat the food that belongs to the jellyfish\nRule15: If the cow has a card with a color from the rainbow colors, then it does not give a magnifier to the dog\nRule16: If at least one animal becomes an enemy of the koala, then the buffalo does not raise a peace flag for the penguin\nRule17: If the parrot has a card with a primary color, then the parrot eats the food that belongs to the jellyfish\nRule18: The buffalo sings a victory song for the halibut, in the case where the meerkat gives a magnifying glass to the buffalo\nRule19: If something eats the food that belongs to the jellyfish, then it offers a job to the penguin\n\nRule10 is preferred over Rule4\nRule12 is preferred over Rule2\nRule14 is preferred over Rule13\nRule14 is preferred over Rule17\nRule15 is preferred over Rule5\nRule16 is preferred over Rule3\nRule6 is preferred over Rule19\nRule7 is preferred over Rule13\nRule7 is preferred over Rule17\nRule8 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cockroach attacks the green fields owned by the crocodile\nThe cow has a cello\nThe cow published a high-quality paper\nThe kudu is named Tango\nThe leopard is named Tessa\nThe meerkat gives a magnifying glass to the buffalo\nThe parrot has a card that is green in color, has a cutter, has some kale, has ten friends, and is named Paco\nThe black bear does not sing a victory song for the crocodile\n\nBased on the game state and the rules and preferences, does the penguin attack the green fields owned by the doctorfish?\nQuestion: Does the penguin attack the green fields owned by the doctorfish?",
        "idx": 238,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the penguin, if the belief is that the parrot offers a job to the penguin and the buffalo does not raise a peace flag for the penguin, then you can add \"the penguin does not attack the green fields whose owner is the doctorfish\" to your conclusions\nrule1() = belief(parrot_offers_job(parrot, penguin)) & not raise_flag(buffalo, peace_flag_for(penguin)) => not attack(penguin, green_fields_owned_by(doctorfish))\n# Rule2: If the black bear does not sing a song of victory for the crocodile, then the crocodile does not become an actual enemy of the koala\nrule2() = not sing_song(black_bear, victory_song_for(crocodile)) => not actual_enemy(crocodile, koala)\n# Rule3: If something sings a victory song for the halibut, then it raises a peace flag for the penguin, too\nrule3(something) = sing_song(something, victory_song_for(halibut)) => raise_flag(something, peace_flag_for(penguin))\n# Rule4: Regarding the parrot, if it has a leafy green vegetable, then we can conclude that it offers a job position to the tiger\nrule4() = has(parrot, leafy_green_vegetable) => offers_job(parrot, tiger)\n# Rule5: If the cow has a high-quality paper, then the cow gives a magnifying glass to the dog\nrule5() = has(cow, high_quality_paper) => gives(cow, magnifying_glass, dog)\n# Rule6: If you see that something offers a job position to the tiger and offers a job position to the cheetah, what can you certainly conclude? You can conclude that it does not offer a job to the penguin\nrule6(something) = offers_job(something, tiger) & offers_job(something, cheetah) => not offers_job(something, penguin)\n# Rule7: If the parrot has a name whose first letter is the same as the first letter of the viperfish's name, then the parrot does not eat the food that belongs to the jellyfish\nrule7() = first_letter_of(name(parrot)) == first_letter_of(name(viperfish)) => not eat(parrot, food_of(jellyfish))\n# Rule8: Regarding the cow, if it has a leafy green vegetable, then we can conclude that it does not give a magnifier to the dog\nrule8() = has(cow, leafy_green_vegetable) => not gives(cow, magnifier, dog)\n# Rule9: Regarding the kudu, if it has a name whose first letter is the same as the first letter of the leopard's name, then we can conclude that it holds the same number of points as the sheep\nrule9() = first_letter_of(name(kudu)) == first_letter_of(name(leopard)) => points(kudu) == points(sheep)\n# Rule10: If at least one animal removes from the board one of the pieces of the aardvark, then the parrot does not offer a job to the tiger\nrule10() = remove(something, piece_of(aardvark)) => not offers_job(parrot, tiger)\n# Rule11: If something gives a magnifier to the dog, then it raises a peace flag for the dog, too\nrule11(something) = gives(something, magnifier, dog) => raise_flag(something, peace_flag_for(dog))\n# Rule12: If the cockroach attacks the green fields whose owner is the crocodile, then the crocodile becomes an actual enemy of the koala\nrule12() = attack(cockroach, green_fields_owned_by(crocodile)) => actual_enemy(crocodile, koala)\n# Rule13: If the parrot has more than twelve friends, then the parrot eats the food of the jellyfish\nrule13() = friends(parrot) > 12 => eat(parrot, food_of(jellyfish))\n# Rule14: If the parrot has something to drink, then the parrot does not eat the food that belongs to the jellyfish\nrule14() = has(parrot, drink) => not eat(parrot, food_of(jellyfish))\n# Rule15: Regarding the cow, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not give a magnifier to the dog\nrule15() = has(cow, card_with(color_in(rainbow_colors))) => not gives(cow, magnifier, dog)\n# Rule16: If at least one animal becomes an enemy of the koala, then the buffalo does not raise a peace flag for the penguin\nrule16() = becomes_enemy(something, koala) => not raise_flag(buffalo, peace_flag_for(penguin))\n# Rule17: If the parrot has a card with a primary color, then the parrot eats the food that belongs to the jellyfish\nrule17() = has(parrot, card_with(primary_color)) => eat(parrot, food_of(jellyfish))\n# Rule18: The buffalo unquestionably sings a victory song for the halibut, in the case where the meerkat gives a magnifying glass to the buffalo\nrule18() = sing_song(buffalo, victory_song_for(halibut)) & gives(meerkat, magnifying_glass, buffalo) => True\n# Rule19: If something eats the food that belongs to the jellyfish, then it offers a job to the penguin, too.\nrule19(something) = eat(something, food_of(jellyfish)) => offers_job(something, penguin)\n# Rule10 is preferred over Rule4\norder(rule10) > order(rule4) = True\n# Rule12 is preferred over Rule2\norder(rule12) > order(rule2) = True\n# Rule14 is preferred over Rule13\norder(rule14) > order(rule13) = True\n# Rule14 is preferred over Rule17\norder(rule14) > order(rule17) = True\n# Rule15 is preferred over Rule5\norder(rule15) > order(rule5) = True\n# Rule16 is preferred over Rule3\norder(rule16) > order(rule3) = True\n# Rule6 is preferred over Rule19\norder(rule6) > order(rule19) = True\n# Rule7 is preferred over Rule13\norder(rule7) > order(rule13) = True\n# Rule7 is preferred over Rule17\norder(rule7) > order(rule17) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cockroach attacks the green fields whose owner is the crocodile\nattack(cockroach, green_fields_owned_by(crocodile)) = True\n# The cow has a cello\nhas(cow, cello) = True\n# The cow published a high-quality paper\npublished(cow, high_quality_paper) = True\n# The kudu is named Tango\nname(kudu, Tango) = True\n# The leopard is named Tessa\nname(leopard, Tessa) = True\n# The meerkat gives a magnifier to the buffalo\ngives(meerkat, magnifier, buffalo) = True\n# The parrot has a card that is green in color, has a cutter, has some kale, has ten friends, and is named Paco\nhas(parrot, card_with(green_color)) = True\nhas(parrot, cutter) = True\nhas(parrot, kale) = True\nfriends(parrot) = 10\nname(parrot, Paco) = True\n# The black bear does not sing a victory song for the crocodile\nnot sing_song(black_bear, victory_song_for(crocodile)) = True\n\n# Based on the game state and the rules and preferences, does the penguin attack the green fields whose owner is the doctorfish?\nquestion = attack(penguin, green_fields_owned_by(doctorfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal removes one of the pieces of the polar bear, then the grasshopper respects the buffalo\nRule2: If at least one animal respects the buffalo, then the sun bear owes money to the hare\nRule3: If the doctorfish learns the basics of resource management from the hare and the sun bear owes money to the hare, then the hare learns the basics of resource management from the wolverine\nRule4: If the viperfish attacks the green fields whose owner is the doctorfish, then the doctorfish learns elementary resource management from the hare\nRule5: If the jellyfish removes from the board one of the pieces of the viperfish, then the viperfish is not going to attack the green fields whose owner is the doctorfish\nRule6: The eagle does not attack the green fields whose owner is the sun bear, in the case where the sea bass steals five points of the eagle\nRule7: The doctorfish does not learn elementary resource management from the hare whenever at least one animal removes from the board one of the pieces of the starfish\nRule8: The viperfish attacks the green fields whose owner is the doctorfish whenever at least one animal raises a flag of peace for the elephant\n\nRule7 is preferred over Rule4\nRule8 is preferred over Rule5\n\nThe current state of the game is as follows\nThe phoenix eats the food of the elephant\nThe sea bass steals five points from the eagle\nThe spider removes from the board one of the pieces of the polar bear\nThe eagle does not respect the leopard\n\nBased on the game state and the rules and preferences, does the hare learn the basics of resource management from the wolverine?\nQuestion: Does the hare learn the basics of resource management from the wolverine?",
        "idx": 239,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal removes one of the pieces of the polar bear, then the grasshopper respects the buffalo\nrule1() = remove(something, piece_of(polar_bear)) => respects(grasshopper, buffalo)\n# Rule2: If at least one animal respects the buffalo, then the sun bear owes money to the hare\nrule2() = respects(something, buffalo) => owes_money_to(sun_bear, hare)\n# Rule3: If the doctorfish learns the basics of resource management from the hare and the sun bear owes money to the hare, then the hare learns the basics of resource management from the wolverine\nrule3() = learn_basics_of_resource_management(doctorfish, hare) & owes_money_to(sun_bear, hare) => learn_basics_of_resource_management(hare, wolverine)\n# Rule4: If the viperfish attacks the green fields whose owner is the doctorfish, then the doctorfish learns elementary resource management from the hare\nrule4() = attack(viperfish, green_fields_of(doctorfish)) => learn_elementary_resource_management(doctorfish, hare)\n# Rule5: If the jellyfish removes from the board one of the pieces of the viperfish, then the viperfish is not going to attack the green fields whose owner is the doctorfish\nrule5() = remove(jellyfish, piece_of(viperfish)) => not attack(viperfish, green_fields_of(doctorfish))\n# Rule6: The eagle does not attack the green fields whose owner is the sun bear, in the case where the sea bass steals five of the points of the eagle\nrule6() = steal_points(sea_bass, 5, eagle) => not attack(eagle, green_fields_of(sun_bear))\n# Rule7: The doctorfish does not learn elementary resource management from the hare whenever at least one animal removes from the board one of the pieces of the starfish\nrule7() = remove(something, piece_of(starfish)) => not learn_elementary_resource_management(doctorfish, hare)\n# Rule8: The viperfish attacks the green fields whose owner is the doctorfish whenever at least one animal raises a flag of peace for the elephant.\nrule8() = raise_flag_of_peace(something, elephant) => attack(viperfish, green_fields_of(doctorfish))\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n\n# The current state of the game is as follows\n# The phoenix eats the food of the elephant\neats(phoenix, food_of(elephant)) = True\n# The sea bass steals five points from the eagle\nsteal_points(sea_bass, 5, eagle) = True\n# The spider removes from the board one of the pieces of the polar bear\nremove(spider, piece_of(polar_bear)) = True\n# The eagle does not respect the leopard\nnot respects(eagle, leopard) = True\n\n# Based on the game state and the rules and preferences, does the hare learn the basics of resource management from the wolverine?\nquestion = learn_basics_of_resource_management(hare, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eagle does not knock down the fortress of the puffin and the canary does not burn the warehouse that is in possession of the puffin, then the puffin gives a magnifying glass to the carp\nRule2: If the ferret owns a luxury aircraft, then the ferret becomes an actual enemy of the eagle\nRule3: If the name of the ferret starts with the same letter as the name of the halibut, then the ferret becomes an enemy of the eagle\nRule4: If the ferret becomes an enemy of the eagle, then the eagle does not knock down the fortress of the puffin\nRule5: The canary does not burn the warehouse of the puffin whenever at least one animal rolls the dice for the buffalo\nRule6: If the tilapia offers a job position to the canary, then the canary burns the warehouse of the puffin\nRule7: If at least one animal needs the support of the kudu, then the eagle knocks down the fortress of the puffin\nRule8: If you see that one of the animals knocks down the fortress of the raven, then you can be certain that it will also roll the dice for the buffalo\n\nRule6 is preferred over Rule5\nRule7 is preferred over Rule4\n\nThe current state of the game is as follows\nThe ferret is named Cinnamon\nThe ferret owns a luxury aircraft\nThe halibut is named Buddy\nThe whale knocks down the fortress of the raven\n\nBased on the game state and the rules and preferences, does the puffin give a magnifying glass to the carp?\nQuestion: Does the puffin give a magnifying glass to the carp?",
        "idx": 240,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eagle does not knock down the fortress of the puffin and the canary does not burn the warehouse that is in possession of the puffin, then the puffin gives a magnifying glass to the carp\nrule1() = not knock_down(eagle, fortress_of(puffin)) & not burn(warehouse_of(puffin), canary) => give(puffin, magnifying_glass, carp)\n# Rule2: If the ferret owns a luxury aircraft, then the ferret becomes an actual enemy of the eagle\nrule2() = owns(ferret, luxury_aircraft) => actual_enemy(ferret, eagle)\n# Rule3: Regarding the ferret, if it has a name whose first letter is the same as the first letter of the halibut's name, then we can conclude that it becomes an enemy of the eagle\nrule3() = first_letter_of(name(ferret)) == first_letter_of(name(halibut)) => enemy(ferret, eagle)\n# Rule4: If the ferret becomes an enemy of the eagle, then the eagle is not going to knock down the fortress that belongs to the puffin\nrule4() = enemy(ferret, eagle) => not knock_down(eagle, fortress_of(puffin))\n# Rule5: The canary does not burn the warehouse of the puffin whenever at least one animal rolls the dice for the buffalo\nrule5() = rolls_dice_for(buffalo, something) => not burn(warehouse_of(puffin), canary)\n# Rule6: If the tilapia offers a job position to the canary, then the canary burns the warehouse of the puffin\nrule6() = offer_job_position(tilapia, canary) => burn(warehouse_of(puffin), canary)\n# Rule7: If at least one animal needs the support of the kudu, then the eagle knocks down the fortress that belongs to the puffin\nrule7() = needs_support(something, kudu) => knock_down(eagle, fortress_of(puffin))\n# Rule8: If you are positive that you saw one of the animals knocks down the fortress that belongs to the raven, you can be certain that it will also roll the dice for the buffalo.\nrule8(something) = knock_down(fortress_of(raven), something) => rolls_dice_for(buffalo, something)\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n\n# The current state of the game is as follows\n# The ferret is named Cinnamon\nname(ferret, Cinnamon) = True\n# The ferret purchased a luxury aircraft\nowns(ferret, luxury_aircraft) = True\n# The halibut is named Buddy\nname(halibut, Buddy) = True\n# The whale knocks down the fortress of the raven\nknock_down(fortress_of(raven), whale) = True\n\n# Based on the game state and the rules and preferences, does the puffin give a magnifier to the carp?\nquestion = give(puffin, magnifying_glass, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The mosquito proceeds to the spot right after the donkey whenever at least one animal becomes an enemy of the snail\nRule2: If the name of the doctorfish starts with the same letter as the name of the puffin, then the doctorfish becomes an enemy of the snail\nRule3: If the blobfish owes money to the mosquito and the gecko offers a job position to the mosquito, then the mosquito knocks down the fortress that belongs to the cockroach\nRule4: If the mosquito has something to sit on, then the mosquito rolls the dice for the ferret\nRule5: If you see one of the animals proceed to the spot right after the donkey, then you can be certain that it will not become an actual enemy of the cricket\n\nThe current state of the game is as follows\nThe blobfish owes money to the mosquito\nThe doctorfish is named Meadow\nThe eel rolls the dice for the mosquito\nThe gecko offers a job position to the mosquito\nThe mosquito has a bench\nThe puffin is named Max\n\nBased on the game state and the rules and preferences, does the mosquito become an enemy of the cricket?\nQuestion: Does the mosquito become an enemy of the cricket?",
        "idx": 241,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The mosquito proceeds to the spot right after the donkey whenever at least one animal becomes an enemy of the snail\nrule1() = enemy(something, snail) => proceed(mosquito, spot_right_after(spot_of(donkey)))\n# Rule2: If the doctorfish has a name whose first letter is the same as the first letter of the puffin's name, then the doctorfish becomes an enemy of the snail\nrule2() = first_letter_of(name(doctorfish)) == first_letter_of(name(puffin)) => enemy(doctorfish, snail)\n# Rule3: If the blobfish owes $$$ to the mosquito and the gecko offers a job position to the mosquito, then the mosquito knocks down the fortress that belongs to the cockroach\nrule3() = owes_money_to(blobfish, mosquito) & offer_job_position(gecko, mosquito) => knock_down(mosquito, fortress_of(cockroach))\n# Rule4: If the mosquito has something to sit on, then the mosquito rolls the dice for the ferret\nrule4() = has(mosquito, something_to_sit_on) => roll_dice(mosquito, ferret)\n# Rule5: If you are positive that you saw one of the animals proceeds to the spot right after the donkey, you can be certain that it will not become an actual enemy of the cricket.\nrule5(something) = proceed(something, spot_right_after(spot_of(donkey))) => not enemy(something, cricket)\n\n# The current state of the game is as follows\n# The blobfish owes money to the mosquito\nowes_money_to(blobfish, mosquito) = True\n# The doctorfish is named Meadow\nname(doctorfish, Meadow) = True\n# The eel rolls the dice for the mosquito\nroll_dice(eel, mosquito) = True\n# The gecko offers a job to the mosquito\noffer_job_position(gecko, mosquito) = True\n# The mosquito has a bench\nhas(mosquito, bench) = True\n# The puffin is named Max\nname(puffin, Max) = True\n\n# Based on the game state and the rules and preferences, does the mosquito become an enemy of the cricket?\nquestion = enemy(mosquito, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the octopus starts with the same letter as the name of the blobfish, then the octopus does not learn elementary resource management from the raven\nRule2: If at least one animal proceeds to the spot right after the eagle, then the octopus learns the basics of resource management from the raven\nRule3: If the catfish rolls the dice for the koala, then the koala does not need the support of the panther\nRule4: If the kudu took a bike from the store, then the kudu owes money to the jellyfish\nRule5: If the cat owes money to the panther and the leopard does not know the defense plan of the panther, then the panther shows all her cards to the halibut\nRule6: If something shows all her cards to the halibut and learns the basics of resource management from the eel, then she holds the same number of points as the pig\nRule7: If at least one animal holds the same number of points as the sea bass, then the cat owes money to the panther\nRule8: The koala needs support from the panther whenever at least one animal learns elementary resource management from the raven\nRule9: If at least one animal owes money to the jellyfish, then the panther learns the basics of resource management from the eel\nRule10: The panther does not hold the same number of points as the pig, in the case where the koala needs support from the panther\nRule11: If one of the animals does not attack the green fields of the oscar, then it does not know the defensive plans of the panther\nRule1 is preferred over Rule2\nRule3 is preferred over Rule8\nRule6 is preferred over Rule10\n\nThe current state of the game is as follows\nThe blobfish is named Paco\nThe blobfish proceeds to the spot right after the eagle\nThe cheetah holds the same number of points as the sea bass\nThe kudu has 2 friends and purchased a luxury aircraft\nThe leopard removes one of the pieces of the amberjack\nThe octopus is named Peddi\nThe leopard does not attack the green fields owned by the oscar\n\nBased on the game state and the rules and preferences, does the panther hold the same number of points as the pig?\nQuestion: Does the panther hold the same number of points as the pig?",
        "idx": 242,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the octopus, if it has a name whose first letter is the same as the first letter of the blobfish's name, then we can conclude that it does not learn elementary resource management from the raven\nrule1() = first_letter_of(name(octopus)) == first_letter_of(name(blobfish)) => not learn_elementary_resource_management(octopus, raven)\n# Rule2: If at least one animal proceeds to the spot right after the eagle, then the octopus learns the basics of resource management from the raven\nrule2() = proceed(something, spot_right_after(spot_of(eagle))) => learn_basics_of_resource_management(octopus, raven)\n# Rule3: If the catfish rolls the dice for the koala, then the koala is not going to need the support of the panther\nrule3() = roll_dice(catfish, koala) => not need_support(koala, panther)\n# Rule4: If the kudu took a bike from the store, then the kudu owes $$$ to the jellyfish\nrule4() = took_bike(kudu, store) => owes_money_to(kudu, jellyfish)\n# Rule5: If the cat owes $$$ to the panther and the leopard does not know the defense plan of the panther, then, inevitably, the panther shows her cards (all of them) to the halibut\nrule5() = owes_money_to(cat, panther) & not knows(defense_plan_of(panther), leopard) => show_cards(panther, halibut)\n# Rule6: Be careful when something shows her cards (all of them) to the halibut and also learns the basics of resource management from the eel because in this case it will surely hold the same number of points as the pig (this may or may not be problematic)\nrule6(something) = show_cards(something, halibut) & learn_basics_of_resource_management(something, eel) => points(something) == points(pig)\n# Rule7: If at least one animal holds the same number of points as the sea bass, then the cat owes $$$ to the panther\nrule7() = points(something) == points(sea_bass) => owes_money_to(cat, panther)\n# Rule8: The koala needs support from the panther whenever at least one animal learns elementary resource management from the raven\nrule8() = learn_elementary_resource_management(something, raven) => need_support(koala, panther)\n# Rule9: If at least one animal owes $$$ to the jellyfish, then the panther learns the basics of resource management from the eel\nrule9() = owes_money_to(something, jellyfish) => learn_basics_of_resource_management(panther, eel)\n# Rule10: The panther does not hold the same number of points as the pig, in the case where the koala needs support from the panther\nrule10() = need_support(koala, panther) => points(panther) != points(pig)\n# Rule11: If you are positive that one of the animals does not attack the green fields of the oscar, you can be certain that it will not know the defensive plans of the panther.\nrule11(something) = not attack_green_fields(something, oscar) => not knows(defense_plan_of(panther), something)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule3 is preferred over Rule8\norder(rule3) > order(rule8) = True\n# Rule6 is preferred over Rule10\norder(rule6) > order(rule10) = True\n\n# The current state of the game is as follows\n# The blobfish is named Paco\nname(blobfish, Paco) = True\n# The blobfish proceeds to the spot right after the eagle\nproceed(blobfish, spot_right_after(spot_of(eagle))) = True\n# The cheetah holds the same number of points as the sea bass\npoints(cheetah) == points(sea_bass) = True\n# The kudu has 2 friends, and purchased a luxury aircraft\nfriends(kudu) = 2\npurchased(kudu, luxury_aircraft) = True\n# The leopard removes from the board one of the pieces of the amberjack\nremove(leopard, piece_of(amberjack)) = True\n# The octopus is named Peddi\nname(octopus, Peddi) = True\n# The leopard does not attack the green fields whose owner is the oscar\nnot attack_green_fields(leopard, green_fields_of(oscar)) = True\n\n# Based on the game state and the rules and preferences, does the panther hold the same number of points as the pig?\nquestion = points(panther) == points(pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The moose offers a job position to the whale, in the case where the ferret raises a flag of peace for the moose\nRule2: If something does not burn the warehouse of the turtle and also does not raise a peace flag for the blobfish, then it prepares armor for the cheetah\nRule3: The ferret raises a peace flag for the moose whenever at least one animal winks at the hummingbird\nRule4: If something proceeds to the spot right after the penguin, then it offers a job position to the snail, too\nRule5: If the moose offers a job position to the whale and the caterpillar gives a magnifier to the whale, then the whale does not offer a job position to the snail\nRule6: If something prepares armor for the cheetah, then it proceeds to the spot right after the spot of the penguin\nRule7: If something needs support from the donkey, then it does not raise a peace flag for the moose\n\nRule5 is preferred over Rule4\nRule7 is preferred over Rule3\n\nThe current state of the game is as follows\nThe tiger winks at the hummingbird\nThe whale does not burn the warehouse of the turtle\nThe whale does not raise a peace flag for the blobfish\n\nBased on the game state and the rules and preferences, does the whale offer a job to the snail?\nQuestion: Does the whale offer a job to the snail?",
        "idx": 243,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The moose unquestionably offers a job position to the whale, in the case where the ferret raises a flag of peace for the moose\nrule1() = raise_flag_of_peace(ferret, moose) => offer_job_position(moose, whale)\n# Rule2: If you see that something does not burn the warehouse that is in possession of the turtle and also does not raise a peace flag for the blobfish, what can you certainly conclude? You can conclude that it also prepares armor for the cheetah\nrule2(something) = not burn(warehouse_of(turtle), something) & not raise_flag_of_peace(something, blobfish) => prepare_armor(something, cheetah)\n# Rule3: The ferret raises a peace flag for the moose whenever at least one animal winks at the hummingbird\nrule3() = winks_at(something, hummingbird) => raise_flag_of_peace(ferret, moose)\n# Rule4: If something proceeds to the spot right after the penguin, then it offers a job position to the snail, too\nrule4(something) = proceed(something, spot_right_after(spot_of(penguin))) => offer_job_position(something, snail)\n# Rule5: For the whale, if the belief is that the moose offers a job position to the whale and the caterpillar gives a magnifier to the whale, then you can add that \"the whale is not going to offer a job position to the snail\" to your conclusions\nrule5() = offer_job_position(moose, whale) & give(caterpillar, magnifier, whale) => not offer_job_position(whale, snail)\n# Rule6: If you are positive that you saw one of the animals prepares armor for the cheetah, you can be certain that it will also proceed to the spot that is right after the spot of the penguin\nrule6(something) = prepare_armor(something, cheetah) => proceed(something, spot_right_after(spot_of(penguin)))\n# Rule7: If you are positive that you saw one of the animals needs support from the donkey, you can be certain that it will not raise a peace flag for the moose.\nrule7(something) = needs_support(something, donkey) => not raise_flag_of_peace(something, moose)\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n\n# The current state of the game is as follows\n# The tiger winks at the hummingbird\nwinks_at(tiger, hummingbird) = True\n# The whale does not burn the warehouse of the turtle\nnot burn(warehouse_of(turtle), whale) = True\n# The whale does not raise a peace flag for the blobfish\nnot raise_flag_of_peace(whale, blobfish) = True\n\n# Based on the game state and the rules and preferences, does the whale offer a job to the snail?\nquestion = offer_job_position(whale, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the caterpillar attacks the green fields owned by the cat, then the cat does not know the defense plan of the squid\nRule2: If at least one animal gives a magnifying glass to the cockroach, then the cat knows the defense plan of the squid\nRule3: If the pig owes money to the squid and the cat knows the defense plan of the squid, then the squid learns elementary resource management from the viperfish\nRule4: If something offers a job to the turtle and attacks the green fields owned by the buffalo, then it also owes money to the squid\nRule5: If at least one animal learns the basics of resource management from the viperfish, then the cow does not give a magnifying glass to the canary\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe leopard gives a magnifier to the cockroach\nThe pig attacks the green fields owned by the buffalo and offers a job to the turtle\n\nBased on the game state and the rules and preferences, does the cow give a magnifier to the canary?\nQuestion: Does the cow give a magnifier to the canary?",
        "idx": 244,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the caterpillar attacks the green fields whose owner is the cat, then the cat is not going to know the defense plan of the squid\nrule1() = attack(caterpillar, green_fields_of(cat)) => not knows_defense_plan(cat, squid)\n# Rule2: If at least one animal gives a magnifying glass to the cockroach, then the cat knows the defense plan of the squid\nrule2() = give_magnifying_glass(something, cockroach) => knows_defense_plan(cat, squid)\n# Rule3: If the pig owes money to the squid and the cat knows the defense plan of the squid, then the squid learns elementary resource management from the viperfish\nrule3() = owes_money_to(pig, squid) & knows_defense_plan(cat, squid) => learn_elementary_resource_management(squid, viperfish)\n# Rule4: If you see that something offers a job to the turtle and attacks the green fields whose owner is the buffalo, what can you certainly conclude? You can conclude that it also owes $$$ to the squid\nrule4(something) = offer_job(something, turtle) & attack(something, green_fields_of(buffalo)) => owes_money_to(something, squid)\n# Rule5: If at least one animal learns the basics of resource management from the viperfish, then the cow does not give a magnifying glass to the canary.\nrule5() = learn_basics_of_resource_management(something, viperfish) => not give_magnifying_glass(cow, canary)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The leopard gives a magnifier to the cockroach\ngive_magnifier(leopard, cockroach) = True\n# The pig attacks the green fields whose owner is the buffalo, and offers a job to the turtle\nattack(pig, green_fields_of(buffalo)) = True\noffer_job(pig, turtle) = True\n\n# Based on the game state and the rules and preferences, does the cow give a magnifier to the canary?\nquestion = give_magnifier(cow, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the ferret has a card whose color starts with the letter \"v\", then it learns the basics of resource management from the cricket\nRule2: If something does not sing a song of victory for the cricket, then it raises a peace flag for the crocodile\nRule3: If something owes money to the leopard and learns elementary resource management from the sea bass, then it holds the same number of points as the meerkat\nRule4: If the lobster shows all her cards to the moose, then the moose holds the same number of points as the crocodile\nRule5: If the black bear has more than four friends, then it rolls the dice for the crocodile\nRule6: If the black bear has a card whose color is one of the rainbow colors, then it rolls the dice for the crocodile\nRule7: If the ferret raises a peace flag for the crocodile, then the crocodile does not hold the same number of points as the meerkat\nRule8: If the koala gives a magnifying glass to the starfish, then the starfish does not proceed to the spot right after the ferret\nRule9: If the black bear rolls the dice for the crocodile and the moose does not hold the same number of points as the crocodile, then the crocodile learns the basics of resource management from the sea bass\nRule10: If the puffin owes money to the crocodile, then the crocodile owes money to the leopard\nRule11: If at least one animal needs the support of the octopus, then the puffin owes money to the crocodile\nRule12: If the ferret created a time machine, then it does not learn elementary resource management from the cricket\n\nRule1 is preferred over Rule12\nRule7 is preferred over Rule3\n\nThe current state of the game is as follows\nThe black bear got a well-paid job\nThe black bear has 1 friend\nThe black bear has a card that is violet in color\nThe black bear has a love seat sofa\nThe ferret invented a time machine\nThe halibut needs support from the octopus\nThe koala gives a magnifier to the starfish\nThe lobster shows all her cards to the moose\nThe starfish has a card that is violet in color\nThe starfish has a couch\n\nBased on the game state and the rules and preferences, does the crocodile hold the same number of points as the meerkat?\nQuestion: Does the crocodile hold the same number of points as the meerkat?",
        "idx": 245,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the ferret, if it has a card whose color starts with the letter \"v\", then we can conclude that it learns the basics of resource management from the cricket\nrule1() = has(ferret, card_with(color_starting_with(\"v\"))) => learn_basics_of_resource_management(ferret, cricket)\n# Rule2: If something does not sing a song of victory for the cricket, then it raises a peace flag for the crocodile\nrule2(something) = not sing_song(something, victory_song_for(cricket)) => raise_flag_of_peace(something, crocodile)\n# Rule3: If you see that something owes $$$ to the leopard and learns elementary resource management from the sea bass, what can you certainly conclude? You can conclude that it also holds the same number of points as the meerkat\nrule3(something) = owes_money_to(something, leopard) & learns_elementary_resource_management_from(something, sea_bass) => holds_same_number_of_points(something, meerkat)\n# Rule4: The moose unquestionably holds the same number of points as the crocodile, in the case where the lobster shows all her cards to the moose\nrule4() = show_cards(lobster, moose) => holds_same_number_of_points(moose, crocodile)\n# Rule5: If the black bear has more than four friends, then the black bear rolls the dice for the crocodile\nrule5() = friends(black_bear) > 4 => roll_dice(black_bear, crocodile)\n# Rule6: Regarding the black bear, if it has a card whose color is one of the rainbow colors, then we can conclude that it rolls the dice for the crocodile\nrule6() = has(black_bear, card_with(color_in(rainbow_colors))) => roll_dice(black_bear, crocodile)\n# Rule7: The crocodile does not hold an equal number of points as the meerkat, in the case where the ferret raises a flag of peace for the crocodile\nrule7() = raise_flag_of_peace(ferret, crocodile) => not holds_same_number_of_points(crocodile, meerkat)\n# Rule8: The starfish does not proceed to the spot right after the ferret, in the case where the koala gives a magnifying glass to the starfish\nrule8() = give(koala, magnifying_glass, starfish) => not proceed(starfish, spot_right_after(ferret))\n# Rule9: If the moose does not hold the same number of points as the crocodile but the black bear rolls the dice for the crocodile, then the crocodile learns the basics of resource management from the sea bass unavoidably\nrule9() = not holds_same_number_of_points(moose, crocodile) & roll_dice(black_bear, crocodile) => learn_basics_of_resource_management(crocodile, sea_bass)\n# Rule10: If the puffin owes money to the crocodile, then the crocodile owes money to the leopard\nrule10() = owes_money_to(puffin, crocodile) => owes_money_to(crocodile, leopard)\n# Rule11: If at least one animal needs the support of the octopus, then the puffin owes $$$ to the crocodile\nrule11() = needs_support(something, octopus) => owes_money_to(puffin, crocodile)\n# Rule12: If the ferret created a time machine, then the ferret does not learn elementary resource management from the cricket.\nrule12() = created_time_machine(ferret) => not learn_elementary_resource_management(ferret, cricket)\n# Rule1 is preferred over Rule12\norder(rule1) > order(rule12) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n\n# The current state of the game is as follows\n# The black bear got a well-paid job\ngot_job(black_bear, well_paid) = True\n# The black bear has 1 friend\nfriends(black_bear) = 1\n# The black bear has a card that is violet in color\nhas(black_bear, card_with(violet_color)) = True\n# The black bear has a love seat sofa\nhas(black_bear, love_seat_sofa) = True\n# The ferret invented a time machine\ncreated_time_machine(ferret) = True\n# The halibut needs support from the octopus\nneeds_support(halibut, octopus) = True\n# The koala gives a magnifier to the starfish\ngive(koala, magnifying_glass, starfish) = True\n# The lobster shows all her cards to the moose\nshow_cards(lobster, moose) = True\n# The starfish has a card that is violet in color\nhas(starfish, card_with(violet_color)) = True\n# The starfish has a couch\nhas(starfish, couch) = True\n\n# Based on the game state and the rules and preferences, does the crocodile hold the same number of points as the meerkat?\nquestion = holds_same_number_of_points(crocodile, meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the penguin has access to an abundance of food, then the penguin shows all her cards to the wolverine\nRule2: If the penguin has a device to connect to the internet, then the penguin shows all her cards to the wolverine\nRule3: If at least one animal holds the same number of points as the turtle, then the pig proceeds to the spot that is right after the spot of the blobfish\nRule4: If something does not knock down the fortress of the kudu but proceeds to the spot that is right after the spot of the blobfish, then it surely knocks down the fortress of the elephant\nRule5: If at least one animal knocks down the fortress of the elephant, then the dog does not give a magnifier to the caterpillar\nRule6: If at least one animal rolls the dice for the cheetah, then the amberjack does not show all her cards to the dog\nRule7: If you see one of the animals show all her cards to the carp, you can be certain that it will also owe money to the dog\nRule8: If the wolverine has a name whose first letter is the same as the first letter of the sea bass's name, then the wolverine shows all her cards to the carp\nRule9: If the buffalo sings a victory song for the pig, then the pig knocks down the fortress of the kudu\nRule10: If something rolls the dice for the hippopotamus, then it does not show all her cards to the carp\nRule11: If the amberjack does not show all her cards to the dog but the wolverine owes money to the dog, then the dog gives a magnifying glass to the caterpillar\nRule12: If at least one animal offers a job position to the elephant, then the aardvark rolls the dice for the cheetah\nRule13: If at least one animal needs support from the panda bear, then the pig does not knock down the fortress of the kudu\nRule14: If the wolverine has fewer than three friends, then the wolverine shows all her cards to the carp\n\nRule10 is preferred over Rule14\nRule10 is preferred over Rule8\nRule11 is preferred over Rule5\nRule9 is preferred over Rule13\n\nThe current state of the game is as follows\nThe hare offers a job position to the elephant\nThe penguin has a tablet\nThe penguin struggles to find food\nThe pig supports Chris Ronaldo\nThe rabbit holds the same number of points as the turtle\nThe sea bass is named Charlie\nThe spider needs support from the panda bear\nThe wolverine has 1 playful friend and 4 non-playful friends\nThe wolverine is named Chickpea\n\nBased on the game state and the rules and preferences, does the dog give a magnifier to the caterpillar?\nQuestion: Does the dog give a magnifier to the caterpillar?",
        "idx": 246,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the penguin has access to an abundance of food, then the penguin shows her cards (all of them) to the wolverine\nrule1() = has_access_to_abundance_of_food(penguin) => show_cards(penguin, wolverine)\n# Rule2: If the penguin has a device to connect to the internet, then the penguin shows all her cards to the wolverine\nrule2() = has(penguin, connect_to_internet(device)) => show_cards(penguin, wolverine)\n# Rule3: If at least one animal holds the same number of points as the turtle, then the pig proceeds to the spot that is right after the spot of the blobfish\nrule3() = holds_same_number_of_points_as(something, turtle) => proceed(pig, spot_right_after(spot_of(blobfish)))\n# Rule4: Be careful when something does not knock down the fortress of the kudu but proceeds to the spot that is right after the spot of the blobfish because in this case it will, surely, knock down the fortress of the elephant (this may or may not be problematic)\nrule4(something) = not knock_down(something, fortress_of(kudu)) & proceed(something, spot_right_after(spot_of(blobfish))) => knock_down(pig, fortress_of(elephant))\n# Rule5: If at least one animal knocks down the fortress of the elephant, then the dog does not give a magnifier to the caterpillar\nrule5() = knock_down(something, fortress_of(elephant)) => not give_magnifier(dog, caterpillar)\n# Rule6: If at least one animal rolls the dice for the cheetah, then the amberjack does not show her cards (all of them) to the dog\nrule6() = rolls_dice_for(something, cheetah) => not show_cards(amberjack, dog)\n# Rule7: If you are positive that you saw one of the animals shows her cards (all of them) to the carp, you can be certain that it will also owe $$$ to the dog\nrule7(something) = show_cards(something, carp) => owes_money_to(something, dog)\n# Rule8: Regarding the wolverine, if it has a name whose first letter is the same as the first letter of the sea bass's name, then we can conclude that it shows her cards (all of them) to the carp\nrule8() = first_letter_of(name(wolverine)) == first_letter_of(name(sea_bass)) => show_cards(wolverine, carp)\n# Rule9: If the buffalo sings a victory song for the pig, then the pig knocks down the fortress of the kudu\nrule9() = sing_victory_song(buffalo, pig) => knock_down(pig, fortress_of(kudu))\n# Rule10: If something rolls the dice for the hippopotamus, then it does not show her cards (all of them) to the carp\nrule10(something) = rolls_dice_for(something, hippopotamus) => not show_cards(something, carp)\n# Rule11: If the amberjack does not show her cards (all of them) to the dog but the wolverine owes money to the dog, then the dog gives a magnifying glass to the caterpillar unavoidably\nrule11() = not show_cards(amberjack, dog) & owes_money_to(wolverine, dog) => give_magnifier(dog, caterpillar)\n# Rule12: If at least one animal offers a job position to the elephant, then the aardvark rolls the dice for the cheetah\nrule12() = offer_job_position(something, elephant) => rolls_dice_for(aardvark, cheetah)\n# Rule13: If at least one animal needs support from the panda bear, then the pig does not knock down the fortress of the kudu\nrule13() = needs_support(something, panda_bear) => not knock_down(pig, fortress_of(kudu))\n# Rule14: Regarding the wolverine, if it has fewer than three friends, then we can conclude that it shows her cards (all of them) to the carp.\nrule14() = friends(wolverine) < 3 => show_cards(wolverine, carp)\n# Rule10 is preferred over Rule14\norder(rule10) > order(rule14) = True\n# Rule10 is preferred over Rule8\norder(rule10) > order(rule8) = True\n# Rule11 is preferred over Rule5\norder(rule11) > order(rule5) = True\n# Rule9 is preferred over Rule13\norder(rule9) > order(rule13) = True\n\n# The current state of the game is as follows\n# The hare offers a job to the elephant\noffer_job_position(hare, elephant) = True\n# The penguin has a tablet\nhas(penguin, tablet) = True\n# The penguin struggles to find food\nstruggles_to_find_food(penguin) = True\n# The pig supports Chris Ronaldo\nsupports(pig, Chris_Ronaldo) = True\n# The rabbit holds the same number of points as the turtle\nholds_same_number_of_points_as(rabbit, turtle) = True\n# The sea bass is named Charlie\nname(sea_bass, Charlie) = True\n# The spider needs support from the panda bear\nneeds_support(spider, panda_bear) = True\n# The wolverine has 1 friend that is playful and 4 friends that are not\nfriends(wolverine, playful) = 1\nfriends(wolverine, not_playful) = 4\n# The wolverine is named Chickpea\nname(wolverine, Chickpea) = True\n\n# Based on the game state and the rules and preferences, does the dog give a magnifier to the caterpillar?\nquestion = give_magnifier(dog, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hummingbird killed the mayor, then it rolls the dice for the dog\nRule2: If the cow knocks down the fortress of the hummingbird and the lion does not offer a job position to the hummingbird, then the hummingbird does not wink at the cow\nRule3: If something does not wink at the cow but rolls the dice for the dog, then it does not raise a flag of peace for the eel\nRule4: If something does not prepare armor for the meerkat, then it does not become an actual enemy of the eel\nRule5: If the hummingbird has a device to connect to the internet, then it rolls the dice for the dog\nRule6: If the catfish does not become an enemy of the eel, then the eel owes money to the squid\nRule7: If the hummingbird does not raise a peace flag for the eel, then the eel does not owe money to the squid\nRule8: If the hummingbird has a name whose first letter is the same as the first letter of the baboon's name, then the hummingbird winks at the cow\nRule9: If the zander does not respect the catfish, then the catfish does not prepare armor for the meerkat\n\nRule2 is preferred over Rule8\nRule7 is preferred over Rule6\n\nThe current state of the game is as follows\nThe baboon is named Tarzan\nThe cow knocks down the fortress of the hummingbird\nThe hummingbird assassinated the mayor\nThe hummingbird has a love seat sofa\nThe hummingbird is named Tango\nThe kudu eats the food of the kiwi\nThe lion does not offer a job to the hummingbird\nThe zander does not respect the catfish\n\nBased on the game state and the rules and preferences, does the eel owe money to the squid?\nQuestion: Does the eel owe money to the squid?",
        "idx": 247,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hummingbird, if it killed the mayor, then we can conclude that it rolls the dice for the dog\nrule1() = killed(hummingbird, mayor) => rolls_dice(hummingbird, dog)\n# Rule2: For the hummingbird, if the belief is that the cow knocks down the fortress of the hummingbird and the lion does not offer a job position to the hummingbird, then you can add \"the hummingbird does not wink at the cow\" to your conclusions\nrule2() = belief(cow_knocks_down_fortress(hummingbird)) & not offer_job(lion, hummingbird) => not wink(hummingbird, cow)\n# Rule3: Be careful when something does not wink at the cow but rolls the dice for the dog because in this case it certainly does not raise a flag of peace for the eel (this may or may not be problematic)\nrule3(something) = not wink(something, cow) & rolls_dice(something, dog) => not raise_flag_of_peace(something, eel)\n# Rule4: If something does not prepare armor for the meerkat, then it does not become an actual enemy of the eel\nrule4(something) = not prepare_armor(something, meerkat) => not actual_enemy(something, eel)\n# Rule5: Regarding the hummingbird, if it has a device to connect to the internet, then we can conclude that it rolls the dice for the dog\nrule5() = has(hummingbird, connect_to_internet(device)) => rolls_dice(hummingbird, dog)\n# Rule6: The eel unquestionably owes money to the squid, in the case where the catfish does not become an enemy of the eel\nrule6() = not actual_enemy(catfish, eel) => owes_money_to(eel, squid)\n# Rule7: If the hummingbird does not raise a peace flag for the eel, then the eel does not owe money to the squid\nrule7() = not raise_flag_of_peace(hummingbird, eel) => not owes_money_to(eel, squid)\n# Rule8: If the hummingbird has a name whose first letter is the same as the first letter of the baboon's name, then the hummingbird winks at the cow\nrule8() = first_letter_of(name(hummingbird)) == first_letter_of(name(baboon)) => wink(hummingbird, cow)\n# Rule9: The catfish will not prepare armor for the meerkat, in the case where the zander does not respect the catfish.\nrule9() = not respect(zander, catfish) => not prepare_armor(catfish, meerkat)\n# Rule2 is preferred over Rule8\norder(rule2) > order(rule8) = True\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n\n# The current state of the game is as follows\n# The baboon is named Tarzan\nname(baboon, Tarzan) = True\n# The cow knocks down the fortress of the hummingbird\ncow_knocks_down_fortress(hummingbird) = True\n# The hummingbird assassinated the mayor\nkilled(hummingbird, mayor) = True\n# The hummingbird has a love seat sofa\nhas(hummingbird, love_seat_sofa) = True\n# The hummingbird is named Tango\nname(hummingbird, Tango) = True\n# The kudu eats the food of the kiwi\neats(kudu, food_of(kiwi)) = True\n# The lion does not offer a job to the hummingbird\nnot offer_job(lion, hummingbird) = True\n# The zander does not respect the catfish\nnot respect(zander, catfish) = True\n\n# Based on the game state and the rules and preferences, does the eel owe money to the squid?\nquestion = owes_money_to(eel, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something eats the food of the kangaroo and also prepares armor for the grizzly bear because in this case it will surely not hold the same number of points as the hippopotamus (this may or may not be problematic)\nRule2: If something removes one of the pieces of the hippopotamus, then it shows all her cards to the gecko, too\nRule3: If the raven knocks down the fortress of the cat and the wolverine rolls the dice for the cat, then the cat holds an equal number of points as the hippopotamus\nRule4: If the cat shows all her cards to the gecko, then the gecko owes money to the grasshopper\nRule5: If at least one animal steals five points from the elephant, then the cat rolls the dice for the salmon\nRule6: If something rolls the dice for the salmon, then it does not show her cards to the gecko\n\nRule2 is preferred over Rule6\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cat eats the food of the kangaroo and prepares armor for the grizzly bear\nThe cat reduced her work hours recently\nThe halibut steals five points from the elephant\nThe raven knocks down the fortress of the cat\nThe wolverine rolls the dice for the cat\n\nBased on the game state and the rules and preferences, does the gecko owe money to the grasshopper?\nQuestion: Does the gecko owe money to the grasshopper?",
        "idx": 248,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something eats the food of the kangaroo and also prepares armor for the grizzly bear because in this case it will surely not hold the same number of points as the hippopotamus (this may or may not be problematic)\nrule1() = eat_food(something, kangaroo) & prepare_armor(something, grizzly_bear) => not hold_same_number_of_points(something, hippopotamus)\n# Rule2: If something removes one of the pieces of the hippopotamus, then it shows all her cards to the gecko, too\nrule2() = remove(something, piece_of(hippopotamus)) => show_cards(something, gecko)\n# Rule3: For the cat, if the belief is that the raven knocks down the fortress of the cat and the wolverine rolls the dice for the cat, then you can add \"the cat holds an equal number of points as the hippopotamus\" to your conclusions\nrule3() = knock_down(raven, fortress_of(cat)) & roll_dice(wolverine, cat) => hold_equal_number_of_points(cat, hippopotamus)\n# Rule4: The gecko unquestionably owes $$$ to the grasshopper, in the case where the cat shows all her cards to the gecko\nrule4() = show_cards(cat, gecko) => owes_money_to(gecko, grasshopper)\n# Rule5: If at least one animal steals five points from the elephant, then the cat rolls the dice for the salmon\nrule5() = steal_points(something, elephant, 5) => roll_dice(cat, salmon)\n# Rule6: If something rolls the dice for the salmon, then it does not show her cards (all of them) to the gecko.\nrule6() = roll_dice(something, salmon) => not show_cards(something, gecko)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cat eats the food of the kangaroo, and prepares armor for the grizzly bear\neat_food(cat, kangaroo) = True\nprepare_armor(cat, grizzly_bear) = True\n# The cat reduced her work hours recently\nreduce_work_hours(cat) = True\n# The halibut steals five points from the elephant\nsteal_points(halibut, elephant, 5) = True\n# The raven knocks down the fortress of the cat\nknock_down(raven, fortress_of(cat)) = True\n# The wolverine rolls the dice for the cat\nroll_dice(wolverine, cat) = True\n\n# Based on the game state and the rules and preferences, does the gecko owe money to the grasshopper?\nquestion = owes_money_to(gecko, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cat will not need the support of the gecko, in the case where the grizzly bear does not respect the cat\nRule2: If the hummingbird does not knock down the fortress of the mosquito, then the mosquito sings a song of victory for the wolverine\nRule3: The mosquito does not sing a song of victory for the wolverine whenever at least one animal knows the defense plan of the carp\nRule4: If something sings a victory song for the halibut and sings a song of victory for the wolverine, then it becomes an actual enemy of the cat\nRule5: If something gives a magnifying glass to the jellyfish, then it does not sing a victory song for the halibut\nRule6: If something holds the same number of points as the hare, then it also respects the cat\nRule7: The mosquito does not become an enemy of the cat whenever at least one animal prepares armor for the halibut\nRule8: If the mosquito becomes an enemy of the cat and the lion respects the cat, then the cat needs the support of the gecko\nRule9: If the mosquito has a card with a primary color, then the mosquito sings a song of victory for the halibut\nRule10: If something attacks the green fields of the oscar, then it holds the same number of points as the hare\n\nRule1 is preferred over Rule8\nRule3 is preferred over Rule2\nRule5 is preferred over Rule9\nRule7 is preferred over Rule4\n\nThe current state of the game is as follows\nThe lion attacks the green fields whose owner is the oscar\nThe mosquito has a card that is green in color\nThe goldfish does not burn the warehouse of the lion\nThe hummingbird does not knock down the fortress of the mosquito\n\nBased on the game state and the rules and preferences, does the cat need support from the gecko?\nQuestion: Does the cat need support from the gecko?",
        "idx": 249,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cat will not need the support of the gecko, in the case where the grizzly bear does not respect the cat\nrule1() = not respects(grizzly_bear, cat) => not need_support(cat, gecko)\n# Rule2: If the hummingbird does not knock down the fortress of the mosquito, then the mosquito sings a song of victory for the wolverine\nrule2() = not knock_down(hummingbird, fortress_of(mosquito)) => sing_song(mosquito, victory_song_for(wolverine))\n# Rule3: The mosquito does not sing a song of victory for the wolverine whenever at least one animal knows the defense plan of the carp\nrule3() = knows(defense_plan_of(carp), something) => not sing_song(mosquito, victory_song_for(wolverine))\n# Rule4: If you see that something sings a victory song for the halibut and sings a song of victory for the wolverine, what can you certainly conclude? You can conclude that it also becomes an actual enemy of the cat\nrule4(something) = sing_song(something, victory_song_for(halibut)) & sing_song(something, victory_song_for(wolverine)) => enemy(something, cat)\n# Rule5: If you are positive that you saw one of the animals gives a magnifying glass to the jellyfish, you can be certain that it will not sing a victory song for the halibut\nrule5() = gives_magnifying_glass(something, jellyfish) => not sing_song(something, victory_song_for(halibut))\n# Rule6: If you are positive that you saw one of the animals holds the same number of points as the hare, you can be certain that it will also respect the cat\nrule6() = holds_same_points_as(something, hare) => respects(something, cat)\n# Rule7: The mosquito does not become an enemy of the cat whenever at least one animal prepares armor for the halibut\nrule7() = prepare_armor(something, halibut) => not enemy(mosquito, cat)\n# Rule8: For the cat, if the belief is that the mosquito becomes an enemy of the cat and the lion respects the cat, then you can add \"the cat needs the support of the gecko\" to your conclusions\nrule8() = enemy(mosquito, cat) & respects(lion, cat) => need_support(cat, gecko)\n# Rule9: If the mosquito has a card with a primary color, then the mosquito sings a song of victory for the halibut\nrule9() = has(mosquito, card_with(primary_color)) => sing_song(mosquito, victory_song_for(halibut))\n# Rule10: If you are positive that you saw one of the animals attacks the green fields of the oscar, you can be certain that it will also hold the same number of points as the hare.\nrule10() = attacks_green_fields(something, oscar) => holds_same_points_as(something, hare)\n# Rule1 is preferred over Rule8\norder(rule1) > order(rule8) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule5 is preferred over Rule9\norder(rule5) > order(rule9) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n\n# The current state of the game is as follows\n# The lion attacks the green fields whose owner is the oscar\nattacks_green_fields(lion, oscar) = True\n# The mosquito has a card that is green in color\nhas(mosquito, card_with(green_color)) = True\n# The goldfish does not burn the warehouse of the lion\nnot burn(warehouse_of(lion), goldfish) = True\n# The hummingbird does not knock down the fortress of the mosquito\nnot knock_down(hummingbird, fortress_of(mosquito)) = True\n\n# Based on the game state and the rules and preferences, does the cat need support from the gecko?\nquestion = need_support(cat, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something raises a flag of peace for the kiwi, then it removes one of the pieces of the polar bear\nRule2: If something does not attack the green fields of the halibut, then it burns the warehouse of the octopus\nRule3: If the salmon holds the same number of points as the aardvark, then the aardvark raises a peace flag for the kiwi\nRule4: If at least one animal removes one of the pieces of the polar bear, then the catfish does not burn the warehouse of the octopus\n\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe salmon holds the same number of points as the aardvark\n\nBased on the game state and the rules and preferences, does the catfish burn the warehouse of the octopus?\nQuestion: Does the catfish burn the warehouse of the octopus?",
        "idx": 250,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something raises a flag of peace for the kiwi, then it removes one of the pieces of the polar bear, too\nrule1() = raise_flag_of_peace(something, kiwi) => remove(something, piece_of(polar_bear))\n# Rule2: If something does not attack the green fields of the halibut, then it burns the warehouse of the octopus\nrule2() = not attack_green_fields(something, halibut) => burn(warehouse_of(octopus))\n# Rule3: If the salmon holds the same number of points as the aardvark, then the aardvark raises a peace flag for the kiwi\nrule3() = points(salmon) == points(aardvark) => raise_flag_of_peace(aardvark, kiwi)\n# Rule4: If at least one animal removes from the board one of the pieces of the polar bear, then the catfish does not burn the warehouse of the octopus.\nrule4() = remove(something, piece_of(polar_bear)) => not burn(warehouse_of(octopus))\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The salmon holds the same number of points as the aardvark\npoints(salmon) == points(aardvark) = True\n\n# Based on the game state and the rules and preferences, does the catfish burn the warehouse of the octopus?\nquestion = burn(warehouse_of(octopus))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panda bear has a card whose color starts with the letter \"w\", then it steals five points from the aardvark\nRule2: If the koala owes money to the aardvark and the panda bear steals five points from the aardvark, then the aardvark owes $$$ to the dog\nRule3: If the panda bear has a device to connect to the internet, then it steals five points from the aardvark\nRule4: If the hippopotamus rolls the dice for the koala, then the koala owes money to the aardvark\nRule5: If something owes $$$ to the dog, then it knows the defense plan of the cricket\n\nThe current state of the game is as follows\nThe hippopotamus rolls the dice for the koala\nThe panda bear has a card that is red in color\nThe panda bear has some arugula\n\nBased on the game state and the rules and preferences, does the aardvark know the defensive plans of the cricket?\nQuestion: Does the aardvark know the defensive plans of the cricket?",
        "idx": 251,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the panda bear, if it has a card whose color starts with the letter \"w\", then we can conclude that it steals five points from the aardvark\nrule1() = has(panda_bear, card_with(color_starting_with(\"w\"))) => steal_points(panda_bear, 5, aardvark)\n# Rule2: For the aardvark, if the belief is that the koala owes money to the aardvark and the panda bear steals five points from the aardvark, then you can add \"the aardvark owes $$$ to the dog\" to your conclusions\nrule2() = owes_money_to(koala, aardvark) & steal_points(panda_bear, 5, aardvark) => add_conclusion(\"the aardvark owes $$$ to the dog\")\n# Rule3: If the panda bear has a device to connect to the internet, then the panda bear steals five points from the aardvark\nrule3() = has(panda_bear, connect_to_internet(device)) => steal_points(panda_bear, 5, aardvark)\n# Rule4: If the hippopotamus rolls the dice for the koala, then the koala owes money to the aardvark\nrule4() = roll_dice(hippopotamus, koala) => owes_money_to(koala, aardvark)\n# Rule5: If something owes $$$ to the dog, then it knows the defense plan of the cricket, too.\nrule5(something) = owes_money_to(something, dog) => knows_defense_plan(something, cricket)\n\n# The current state of the game is as follows\n# The hippopotamus rolls the dice for the koala\nroll_dice(hippopotamus, koala) = True\n# The panda bear has a card that is red in color, and has some arugula\nhas(panda_bear, card_with(red_color)) = True\nhas(panda_bear, arugula) = True\n\n# Based on the game state and the rules and preferences, does the aardvark know the defensive plans of the cricket?\nquestion = knows_defense_plan(aardvark, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grizzly bear has a card whose color is one of the rainbow colors, then the grizzly bear eats the food that belongs to the cricket\nRule2: The polar bear proceeds to the spot right after the whale whenever at least one animal eats the food that belongs to the cricket\nRule3: If the pig prepares armor for the penguin and the dog prepares armor for the penguin, then the penguin offers a job to the polar bear\nRule4: If the grizzly bear has a device to connect to the internet, then it eats the food of the cricket\nRule5: The hippopotamus offers a job to the carp whenever at least one animal proceeds to the spot that is right after the spot of the whale\nRule6: If something proceeds to the spot that is right after the spot of the starfish and gives a magnifier to the squid, then it does not eat the food that belongs to the cricket\nRule7: If the penguin has a name whose first letter is the same as the first letter of the tiger's name, then the penguin does not offer a job position to the polar bear\n\nRule1 is preferred over Rule6\nRule3 is preferred over Rule7\nRule4 is preferred over Rule6\n\nThe current state of the game is as follows\nThe grizzly bear gives a magnifier to the squid\nThe grizzly bear has a card that is black in color\nThe grizzly bear has a tablet\nThe grizzly bear proceeds to the spot right after the starfish\nThe penguin is named Casper\nThe pig prepares armor for the penguin\nThe tiger is named Charlie\n\nBased on the game state and the rules and preferences, does the hippopotamus offer a job to the carp?\nQuestion: Does the hippopotamus offer a job to the carp?",
        "idx": 252,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grizzly bear has a card whose color is one of the rainbow colors, then the grizzly bear eats the food that belongs to the cricket\nrule1() = has(grizzly_bear, card) and color(card) in rainbow_colors => eat_food(grizzly_bear, food_of(cricket))\n# Rule2: The polar bear proceeds to the spot right after the whale whenever at least one animal eats the food that belongs to the cricket\nrule2() = eat_food(something, food_of(cricket)) => proceed(polar_bear, spot_right_after(spot_of(whale)))\n# Rule3: For the penguin, if the belief is that the pig prepares armor for the penguin and the dog prepares armor for the penguin, then you can add \"the penguin offers a job to the polar bear\" to your conclusions\nrule3() = prepare_armor(pig, penguin) & prepare_armor(dog, penguin) => offer_job(penguin, polar_bear)\n# Rule4: Regarding the grizzly bear, if it has a device to connect to the internet, then we can conclude that it eats the food of the cricket\nrule4() = has(grizzly_bear, connect_to_internet(device)) => eat_food(grizzly_bear, food_of(cricket))\n# Rule5: The hippopotamus offers a job to the carp whenever at least one animal proceeds to the spot that is right after the spot of the whale\nrule5() = proceed(something, spot_right_after(spot_of(whale))) => offer_job(hippopotamus, carp)\n# Rule6: If you see that something proceeds to the spot that is right after the spot of the starfish and gives a magnifier to the squid, what can you certainly conclude? You can conclude that it does not eat the food that belongs to the cricket\nrule6() = proceed(something, spot_right_after(spot_of(starfish))) & give(something, magnifier, squid) => not eat_food(something, food_of(cricket))\n# Rule7: If the penguin has a name whose first letter is the same as the first letter of the tiger's name, then the penguin does not offer a job position to the polar bear.\nrule7() = first_letter_of(name(penguin)) == first_letter_of(name(tiger)) => not offer_job(penguin, polar_bear)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n\n# The current state of the game is as follows\n# The grizzly bear gives a magnifier to the squid, and has a card that is black in color\ngive(grizzly_bear, magnifier, squid) = True\nhas(grizzly_bear, card_with(black_color)) = True\n# The grizzly bear has a tablet\nhas(grizzly_bear, tablet) = True\n# The grizzly bear proceeds to the spot right after the starfish\nproceed(grizzly_bear, spot_right_after(spot_of(starfish))) = True\n# The penguin is named Casper\nname(penguin, Casper) = True\n# The pig prepares armor for the penguin\nprepare_armor(pig, penguin) = True\n# The tiger is named Charlie\nname(tiger, Charlie) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus offer a job to the carp?\nquestion = offer_job(hippopotamus, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the raven has a card whose color is one of the rainbow colors, then the raven prepares armor for the grizzly bear\nRule2: If the raven prepares armor for the grizzly bear, then the grizzly bear does not owe money to the dog\nRule3: If the baboon has a name whose first letter is the same as the first letter of the doctorfish's name, then the baboon eats the food that belongs to the oscar\nRule4: If the raven has a musical instrument, then the raven prepares armor for the grizzly bear\nRule5: If the goldfish prepares armor for the dog, then the dog does not knock down the fortress of the snail\nRule6: If the baboon has a card whose color is one of the rainbow colors, then the baboon eats the food that belongs to the oscar\nRule7: If at least one animal eats the food of the oscar, then the dog does not become an enemy of the grizzly bear\nRule8: If the grizzly bear does not owe money to the dog, then the dog does not offer a job position to the canary\nRule9: If the leopard does not burn the warehouse of the goldfish and the lion does not hold the same number of points as the goldfish, then the goldfish does not prepare armor for the dog\nRule10: If something does not become an actual enemy of the grizzly bear and also does not knock down the fortress of the snail, then it will offer a job position to the canary\nRule11: If the goldfish has a musical instrument, then it prepares armor for the dog\nRule12: If the goldfish has a high-quality paper, then it prepares armor for the dog\n\nRule8 is preferred over Rule10\nRule9 is preferred over Rule11\nRule9 is preferred over Rule12\n\nThe current state of the game is as follows\nThe baboon has a card that is white in color\nThe baboon is named Bella\nThe doctorfish is named Blossom\nThe goldfish has a tablet\nThe goldfish published a high-quality paper\nThe raven has 1 bald friend and 2 friends that are not bald\nThe raven has a basket\nThe raven has a card that is violet in color\nThe lion does not hold the same number of points as the goldfish\n\nBased on the game state and the rules and preferences, does the dog offer a job to the canary?\nQuestion: Does the dog offer a job position to the canary?",
        "idx": 253,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the raven has a card whose color is one of the rainbow colors, then the raven prepares armor for the grizzly bear\nrule1() = has(raven, card) and color(card) in rainbow_colors => prepare_armor(raven, grizzly_bear)\n# Rule2: The grizzly bear does not owe money to the dog, in the case where the raven prepares armor for the grizzly bear\nrule2() = prepare_armor(raven, grizzly_bear) => not owes_money_to(grizzly_bear, dog)\n# Rule3: Regarding the baboon, if it has a name whose first letter is the same as the first letter of the doctorfish's name, then we can conclude that it eats the food that belongs to the oscar\nrule3() = first_letter_of(name(baboon)) == first_letter_of(name(doctorfish)) => eats_food(baboon, food_of(oscar))\n# Rule4: If the raven has a musical instrument, then the raven prepares armor for the grizzly bear\nrule4() = has(raven, musical_instrument) => prepare_armor(raven, grizzly_bear)\n# Rule5: The dog does not knock down the fortress of the snail, in the case where the goldfish prepares armor for the dog\nrule5() = prepare_armor(goldfish, dog) => not knock_down(dog, fortress_of(snail))\n# Rule6: If the baboon has a card whose color is one of the rainbow colors, then the baboon eats the food that belongs to the oscar\nrule6() = has(baboon, card) and color(card) in rainbow_colors => eats_food(baboon, food_of(oscar))\n# Rule7: If at least one animal eats the food of the oscar, then the dog does not become an enemy of the grizzly bear\nrule7(something) = eats_food(something, food_of(oscar)) => not enemy(dog, grizzly_bear)\n# Rule8: If the grizzly bear does not owe $$$ to the dog, then the dog does not offer a job position to the canary\nrule8() = not owes_money_to(grizzly_bear, dog) => not offer_job_position(dog, canary)\n# Rule9: For the goldfish, if the belief is that the leopard does not burn the warehouse of the goldfish and the lion does not hold the same number of points as the goldfish, then you can add \"the goldfish does not prepare armor for the dog\" to your conclusions\nrule9() = not burn(warehouse_of(goldfish), leopard) and not points(lion) == points(goldfish) => not prepare_armor(goldfish, dog)\n# Rule10: Be careful when something does not become an actual enemy of the grizzly bear and also does not knock down the fortress of the snail because in this case it will surely offer a job to the canary (this may or may not be problematic)\nrule10(something) = not enemy(something, grizzly_bear) and not knock_down(something, fortress_of(snail)) => offer_job_position(something, canary)\n# Rule11: Regarding the goldfish, if it has a musical instrument, then we can conclude that it prepares armor for the dog\nrule11() = has(goldfish, musical_instrument) => prepare_armor(goldfish, dog)\n# Rule12: If the goldfish has a high-quality paper, then the goldfish prepares armor for the dog.\nrule12() = has(goldfish, high_quality_paper) => prepare_armor(goldfish, dog)\n# Rule8 is preferred over Rule10\norder(rule8) > order(rule10) = True\n# Rule9 is preferred over Rule11\norder(rule9) > order(rule11) = True\n# Rule9 is preferred over Rule12\norder(rule9) > order(rule12) = True\n\n# The current state of the game is as follows\n# The baboon has a card that is white in color, and is named Bella\nhas(baboon, card_with(white_color)) = True\nname(baboon, Bella) = True\n# The doctorfish is named Blossom\nname(doctorfish, Blossom) = True\n# The goldfish has a tablet, and published a high-quality paper\nhas(goldfish, tablet) = True\nhas(goldfish, high_quality_paper) = True\n# The raven has 1 friend that is bald and two friends that are not, and has a basket\nfriends(raven) = 1 bald, 2 not_bald\nhas(raven, basket) = True\n# The raven has a card that is violet in color\nhas(raven, card_with(violet_color)) = True\n# The lion does not hold the same number of points as the goldfish\npoints(lion) != points(goldfish) = True\n\n# Based on the game state and the rules and preferences, does the dog offer a job to the canary?\nquestion = offer_job_position(dog, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the caterpillar has a card whose color starts with the letter \"g\", then it does not learn elementary resource management from the whale\nRule2: If the puffin learns the basics of resource management from the squirrel, then the squirrel does not owe money to the lobster\nRule3: If at least one animal learns the basics of resource management from the whale, then the buffalo steals five points from the lobster\nRule4: If the squirrel has fewer than 14 friends, then it learns the basics of resource management from the aardvark\nRule5: If something does not owe money to the spider, then it learns elementary resource management from the squirrel\nRule6: If the caterpillar has a sharp object, then it does not learn elementary resource management from the whale\nRule7: If the squirrel does not owe money to the lobster and the buffalo does not steal five points from the lobster, then the lobster learns elementary resource management from the doctorfish\nRule8: If the caterpillar has more than six friends, then it learns elementary resource management from the whale\nRule9: If at least one animal becomes an enemy of the raven, then the squirrel does not prepare armor for the meerkat\nRule10: If the name of the caterpillar starts with the same letter as the name of the polar bear, then the caterpillar learns elementary resource management from the whale\n\nRule1 is preferred over Rule10\nRule1 is preferred over Rule8\nRule6 is preferred over Rule10\nRule6 is preferred over Rule8\n\nThe current state of the game is as follows\nThe caterpillar has 15 friends\nThe caterpillar has a violin\nThe caterpillar is named Tango\nThe parrot becomes an enemy of the raven\nThe polar bear is named Cinnamon\nThe squid owes money to the jellyfish\nThe squirrel has five friends\nThe puffin does not owe money to the spider\n\nBased on the game state and the rules and preferences, does the lobster learn the basics of resource management from the doctorfish?\nQuestion: Does the lobster learn the basics of resource management from the doctorfish?",
        "idx": 254,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the caterpillar, if it has a card whose color starts with the letter \"g\", then we can conclude that it does not learn elementary resource management from the whale\nrule1() = has(caterpillar, card_with(color_starting_with(\"g\"))) => not learn_elementary_resource_management(caterpillar, whale)\n# Rule2: The squirrel does not owe $$$ to the lobster, in the case where the puffin learns the basics of resource management from the squirrel\nrule2() = learn_basics_of_resource_management(puffin, squirrel) => not owes_money_to(squirrel, lobster)\n# Rule3: The buffalo steals five of the points of the lobster whenever at least one animal learns the basics of resource management from the whale\nrule3() = learn_basics_of_resource_management(something, whale) => steal_points(buffalo, 5, lobster)\n# Rule4: Regarding the squirrel, if it has fewer than 14 friends, then we can conclude that it learns the basics of resource management from the aardvark\nrule4() = friends(squirrel) < 14 => learn_basics_of_resource_management(squirrel, aardvark)\n# Rule5: If something does not owe money to the spider, then it learns elementary resource management from the squirrel\nrule5(something) = not owes_money_to(something, spider) => learn_elementary_resource_management(something, squirrel)\n# Rule6: If the caterpillar has a sharp object, then the caterpillar does not learn elementary resource management from the whale\nrule6() = has(caterpillar, sharp_object) => not learn_elementary_resource_management(caterpillar, whale)\n# Rule7: If the squirrel does not owe money to the lobster and the buffalo does not steal five of the points of the lobster, then the lobster learns elementary resource management from the doctorfish\nrule7() = not owes_money_to(squirrel, lobster) & not steal_points(buffalo, 5, lobster) => learn_elementary_resource_management(lobster, doctorfish)\n# Rule8: Regarding the caterpillar, if it has more than six friends, then we can conclude that it learns elementary resource management from the whale\nrule8() = friends(caterpillar) > 6 => learn_elementary_resource_management(caterpillar, whale)\n# Rule9: The squirrel does not prepare armor for the meerkat whenever at least one animal becomes an enemy of the raven\nrule9() = enemy(something, raven) => not prepare_armor(squirrel, meerkat)\n# Rule10: If the caterpillar has a name whose first letter is the same as the first letter of the polar bear's name, then the caterpillar learns elementary resource management from the whale.\nrule10() = first_letter_of(name(caterpillar)) == first_letter_of(name(polar_bear)) => learn_elementary_resource_management(caterpillar, whale)\n# Rule1 is preferred over Rule10\norder(rule1) > order(rule10) = True\n# Rule1 is preferred over Rule8\norder(rule1) > order(rule8) = True\n# Rule6 is preferred over Rule10\norder(rule6) > order(rule10) = True\n# Rule6 is preferred over Rule8\norder(rule6) > order(rule8) = True\n\n# The current state of the game is as follows\n# The caterpillar has 15 friends, and has a violin\nfriends(caterpillar) = 15\nhas(caterpillar, violin) = True\n# The caterpillar is named Tango\nname(caterpillar, Tango) = True\n# The parrot becomes an enemy of the raven\nenemy(parrot, raven) = True\n# The polar bear is named Cinnamon\nname(polar_bear, Cinnamon) = True\n# The squid owes money to the jellyfish\nowes_money_to(squid, jellyfish) = True\n# The squirrel has five friends\nfriends(squirrel) = 5\n# The puffin does not owe money to the spider\nnot owes_money_to(puffin, spider) = True\n\n# Based on the game state and the rules and preferences, does the lobster learn the basics of resource management from the doctorfish?\nquestion = learn_basics_of_resource_management(lobster, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something respects the dog and knocks down the fortress that belongs to the elephant, then you can conclude that it also holds an equal number of points as the raven\nRule2: If the cheetah rolls the dice for the eel, then the eel respects the spider\nRule3: If something does not knock down the fortress of the oscar, then it does not respect the spider\nRule4: If the caterpillar holds the same number of points as the raven, then the raven does not eat the food of the spider\nRule5: If the raven does not eat the food of the spider but the eel respects the spider, then the spider shows all her cards to the buffalo\nRule6: If the cheetah has a name whose first letter is the same as the first letter of the sea bass's name, then the cheetah rolls the dice for the eel\nRule7: If the squirrel sings a victory song for the raven, then the raven eats the food that belongs to the spider\n\nRule3 is preferred over Rule2\nRule7 is preferred over Rule4\n\nThe current state of the game is as follows\nThe caterpillar knocks down the fortress of the elephant and respects the dog\nThe cheetah is named Luna\nThe sea bass is named Lucy\n\nBased on the game state and the rules and preferences, does the spider show all her cards to the buffalo?\nQuestion: Does the spider show all her cards to the buffalo?",
        "idx": 255,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something respects the dog and knocks down the fortress that belongs to the elephant, what can you certainly conclude? You can conclude that it also holds an equal number of points as the raven\nrule1() = respects(something, dog) & knock_down(fortress_of(elephant), something) => points(something) == points(raven)\n# Rule2: If the cheetah rolls the dice for the eel, then the eel respects the spider\nrule2() = rolls_dice(cheetah, eel) => respects(eel, spider)\n# Rule3: If something does not knock down the fortress of the oscar, then it does not respect the spider\nrule3() = not knock_down(fortress_of(oscar), something) => not respects(something, spider)\n# Rule4: If the caterpillar holds the same number of points as the raven, then the raven is not going to eat the food of the spider\nrule4() = points(caterpillar) == points(raven) => not eat_food(raven, spider)\n# Rule5: If the raven does not eat the food of the spider but the eel respects the spider, then the spider shows all her cards to the buffalo unavoidably\nrule5() = not eat_food(raven, spider) & respects(eel, spider) => show_cards(spider, buffalo)\n# Rule6: Regarding the cheetah, if it has a name whose first letter is the same as the first letter of the sea bass's name, then we can conclude that it rolls the dice for the eel\nrule6() = first_letter_of(name(cheetah)) == first_letter_of(name(sea_bass)) => rolls_dice(cheetah, eel)\n# Rule7: If the squirrel sings a victory song for the raven, then the raven eats the food that belongs to the spider.\nrule7() = sing_song(squirrel, victory_song_for(raven)) => eat_food(raven, spider)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n\n# The current state of the game is as follows\n# The caterpillar knocks down the fortress of the elephant, and respects the dog\nknock_down(fortress_of(elephant), caterpillar) = True\nrespects(caterpillar, dog) = True\n# The cheetah is named Luna\nname(cheetah, Luna) = True\n# The sea bass is named Lucy\nname(sea_bass, Lucy) = True\n\n# Based on the game state and the rules and preferences, does the spider show all her cards to the buffalo?\nquestion = show_cards(spider, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something removes one of the pieces of the squid, then it does not roll the dice for the hare\nRule2: If something does not burn the warehouse of the pig and also does not respect the zander, then it does not remove one of the pieces of the squid\nRule3: If the black bear owes money to the swordfish, then the swordfish does not wink at the caterpillar\nRule4: If one of the animals eats the food of the zander, then it does not burn the warehouse of the pig\nRule5: If the swordfish does not wink at the caterpillar, then the caterpillar removes one of the pieces of the squid\n\nRule2 is preferred over Rule5\n\nThe current state of the game is as follows\nThe black bear owes money to the swordfish\nThe caterpillar eats the food of the zander\n\nBased on the game state and the rules and preferences, does the caterpillar roll the dice for the hare?\nQuestion: Does the caterpillar roll the dice for the hare?",
        "idx": 256,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something removes one of the pieces of the squid, then it does not roll the dice for the hare\nrule1() = remove(something, piece_of(squid)) => not roll_dice(something, hare)\n# Rule2: If you see that something does not burn the warehouse of the pig and also does not respect the zander, what can you certainly conclude? You can conclude that it also does not remove from the board one of the pieces of the squid\nrule2() = not burn(warehouse_of(pig), something) & not respects(something, zander) => not remove(something, piece_of(squid))\n# Rule3: The swordfish does not wink at the caterpillar, in the case where the black bear owes $$$ to the swordfish\nrule3() = owes_money_to(black_bear, swordfish) => not wink(swordfish, caterpillar)\n# Rule4: If you are positive that you saw one of the animals eats the food that belongs to the zander, you can be certain that it will not burn the warehouse of the pig\nrule4() = eats_food_of(something, zander) => not burn(warehouse_of(pig), something)\n# Rule5: The caterpillar unquestionably removes one of the pieces of the squid, in the case where the swordfish does not wink at the caterpillar.\nrule5() = not wink(swordfish, caterpillar) => remove(caterpillar, piece_of(squid))\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n\n# The current state of the game is as follows\n# The black bear owes money to the swordfish\nowes_money_to(black_bear, swordfish) = True\n# The caterpillar eats the food of the zander\neats_food_of(caterpillar, zander) = True\n\n# Based on the game state and the rules and preferences, does the caterpillar roll the dice for the hare?\nquestion = roll_dice(caterpillar, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose does not burn the warehouse that is in possession of the squirrel, then the squirrel shows all her cards to the doctorfish\nRule2: If the moose has something to drink, then the moose does not need the support of the swordfish\nRule3: If something rolls the dice for the whale, then it proceeds to the spot that is right after the spot of the squirrel, too\nRule4: If one of the animals raises a flag of peace for the swordfish, then it will not burn the warehouse that is in possession of the squirrel\nRule5: If something needs support from the carp, then it does not steal five points from the kangaroo\nRule6: If one of the animals raises a peace flag for the phoenix, then it will not roll the dice for the squirrel\nRule7: If the moose does not have her keys, then the moose does not need support from the swordfish\nRule8: If the moose has a name whose first letter is the same as the first letter of the kudu's name, then the moose needs support from the swordfish\nRule9: If one of the animals sings a song of victory for the koala, then the squirrel steals five points from the kangaroo\nRule10: If the wolverine does not proceed to the spot right after the squirrel but the rabbit rolls the dice for the squirrel, then the squirrel attacks the green fields whose owner is the whale\nRule11: If something does not owe money to the tilapia, then it rolls the dice for the squirrel\nRule12: If one of the animals steals five points from the kangaroo, then it prepares armor for the sun bear\n\nRule5 is preferred over Rule9\nRule6 is preferred over Rule11\nRule8 is preferred over Rule2\nRule8 is preferred over Rule7\n\nThe current state of the game is as follows\nThe kudu is named Pashmak\nThe lion sings a victory song for the koala\nThe moose has a piano\nThe moose is named Peddi\nThe wolverine gives a magnifier to the whale\nThe rabbit does not owe money to the tilapia\n\nBased on the game state and the rules and preferences, does the squirrel show all her cards to the doctorfish?\nQuestion: Does the squirrel show all her cards to the doctorfish?",
        "idx": 257,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the moose does not burn the warehouse that is in possession of the squirrel, then the squirrel shows all her cards to the doctorfish\nrule1() = not burn(warehouse_of(squirrel)) => show_cards(squirrel, doctorfish)\n# Rule2: If the moose has something to drink, then the moose does not need the support of the swordfish\nrule2() = has(moose, drink) => not needs_support(moose, swordfish)\n# Rule3: If something rolls the dice for the whale, then it proceeds to the spot that is right after the spot of the squirrel, too\nrule3(something) = roll_dice_for(whale, something) => proceed(something, spot_right_after(spot_of(squirrel)))\n# Rule4: If you are positive that you saw one of the animals raises a flag of peace for the swordfish, you can be certain that it will not burn the warehouse that is in possession of the squirrel\nrule4(something) = raise_flag_of_peace(something, swordfish) => not burn(warehouse_of(squirrel))\n# Rule5: If something needs support from the carp, then it does not steal five of the points of the kangaroo\nrule5(something) = needs_support(something, carp) => not steal_points(something, 5, kangaroo)\n# Rule6: If you are positive that you saw one of the animals raises a peace flag for the phoenix, you can be certain that it will not roll the dice for the squirrel\nrule6(something) = raise_flag_of_peace(something, phoenix) => not roll_dice_for(something, squirrel)\n# Rule7: If the moose does not have her keys, then the moose does not need support from the swordfish\nrule7() = not has(moose, keys) => not needs_support(moose, swordfish)\n# Rule8: If the moose has a name whose first letter is the same as the first letter of the kudu's name, then the moose needs support from the swordfish\nrule8() = first_letter_of(name(moose)) == first_letter_of(name(kudu)) => needs_support(moose, swordfish)\n# Rule9: If at least one animal sings a song of victory for the koala, then the squirrel steals five of the points of the kangaroo\nrule9(something) = sing_song(something, victory_song_for(koala)) => steal_points(squirrel, 5, kangaroo)\n# Rule10: For the squirrel, if the belief is that the wolverine does not proceed to the spot right after the squirrel but the rabbit rolls the dice for the squirrel, then you can add \"the squirrel attacks the green fields whose owner is the whale\" to your conclusions\nrule10() = not proceed(wolverine, spot_right_after(spot_of(squirrel))) & roll_dice_for(rabbit, squirrel) => add_conclusion(\"the squirrel attacks the green fields whose owner is the whale\")\n# Rule11: If something does not owe money to the tilapia, then it rolls the dice for the squirrel\nrule11(something) = not owes_money_to(something, tilapia) => roll_dice_for(something, squirrel)\n# Rule12: If you are positive that you saw one of the animals steals five points from the kangaroo, you can be certain that it will also prepare armor for the sun bear.\nrule12(something) = steal_points(something, 5, kangaroo) => prepare_armor(something, sun_bear)\n# Rule5 is preferred over Rule9\norder(rule5) > order(rule9) = True\n# Rule6 is preferred over Rule11\norder(rule6) > order(rule11) = True\n# Rule8 is preferred over Rule2\norder(rule8) > order(rule2) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n\n# The current state of the game is as follows\n# The kudu is named Pashmak\nname(kudu, Pashmak) = True\n# The lion sings a victory song for the koala\nsing_song(lion, victory_song_for(koala)) = True\n# The moose has a piano, and is named Peddi\nhas(moose, piano) = True\nname(moose, Peddi) = True\n# The wolverine gives a magnifier to the whale\ngive(wolverine, magnifier, whale) = True\n# The rabbit does not owe money to the tilapia\nowes_money_to(rabbit, tilapia) = False\n\n# Based on the game state and the rules and preferences, does the squirrel show all her cards to the doctorfish?\nquestion = show_cards(squirrel, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see one of the animals sings a victory song for the baboon, then it will not steal five points from the caterpillar\nRule2: If you see one of the animals steals five points from the lobster, then it will also eat the food of the blobfish\nRule3: If you see one of the animals eats the food of the blobfish, then it will also respect the blobfish\nRule4: The carp does not respect the blobfish whenever at least one animal respects the viperfish\nRule5: The turtle knocks down the fortress of the panther, in the case where the ferret does not attack the green fields owned by the turtle\nRule6: If the turtle knocks down the fortress of the panther and the snail burns the warehouse of the panther, then the panther proceeds to the spot right after the donkey\nRule7: If you see something needs the support of the hare but does not steal five points from the caterpillar, then it burns the warehouse of the panther\nRule8: If something sings a victory song for the swordfish, then it does not knock down the fortress of the panther\nRule9: If the ferret has a high-quality paper, then it does not attack the green fields owned by the turtle\nRule10: If you see one of the animals does not attack the green fields owned by the kudu, then it will need the support of the hare\nRule11: If the snail has a card with a color that appears in the flag of Belgium, then it steals five points from the caterpillar\n\nRule11 is preferred over Rule1\nRule4 is preferred over Rule3\nRule8 is preferred over Rule5\n\nThe current state of the game is as follows\nThe carp steals five points from the lobster\nThe ferret published a high-quality paper\nThe snail sings a victory song for the baboon but does not attack the green fields owned by the kudu\n\nBased on the game state and the rules and preferences, does the panther proceed to the spot right after the donkey?\nQuestion: Does the panther proceed to the spot right after the donkey?",
        "idx": 258,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals sings a victory song for the baboon, you can be certain that it will not steal five points from the caterpillar\nrule1() = sing_song(something, victory_song_for(baboon)) => not steal_points(something, 5, caterpillar)\n# Rule2: If you are positive that you saw one of the animals steals five points from the lobster, you can be certain that it will also eat the food of the blobfish\nrule2() = steal_points(something, 5, lobster) => eat_food(something, blobfish)\n# Rule3: If you are positive that you saw one of the animals eats the food of the blobfish, you can be certain that it will also respect the blobfish\nrule3() = eat_food(something, blobfish) => respect(something, blobfish)\n# Rule4: The carp does not respect the blobfish whenever at least one animal respects the viperfish\nrule4() = respects(something, viperfish) => not respect(carp, blobfish)\n# Rule5: The turtle unquestionably knocks down the fortress of the panther, in the case where the ferret does not attack the green fields whose owner is the turtle\nrule5() = not attack(ferret, green_fields_owned_by(turtle)) => knock_down(turtle, fortress_of(panther))\n# Rule6: If the turtle knocks down the fortress that belongs to the panther and the snail burns the warehouse that is in possession of the panther, then the panther proceeds to the spot that is right after the spot of the donkey\nrule6() = knock_down(turtle, fortress_of(panther)) & burn(warehouse_of(panther), snail) => proceed(panther, spot_right_after(spot_of(donkey)))\n# Rule7: If you see that something needs the support of the hare but does not steal five points from the caterpillar, what can you certainly conclude? You can conclude that it burns the warehouse of the panther\nrule7() = needs_support(something, hare) & not steal_points(something, 5, caterpillar) => burn(warehouse_of(panther), something)\n# Rule8: If something sings a song of victory for the swordfish, then it does not knock down the fortress of the panther\nrule8() = sing_song(something, victory_song_for(swordfish)) => not knock_down(something, fortress_of(panther))\n# Rule9: Regarding the ferret, if it has a high-quality paper, then we can conclude that it does not attack the green fields whose owner is the turtle\nrule9() = has(ferret, high_quality_paper) => not attack(ferret, green_fields_owned_by(turtle))\n# Rule10: If you are positive that one of the animals does not attack the green fields whose owner is the kudu, you can be certain that it will need the support of the hare without a doubt\nrule10() = not attack(something, green_fields_owned_by(kudu)) => needs_support(something, hare)\n# Rule11: Regarding the snail, if it has a card whose color appears in the flag of Belgium, then we can conclude that it steals five of the points of the caterpillar.\nrule11() = has(snail, card_with(color_in_flag_of_belgium)) => steal_points(snail, 5, caterpillar)\n# Rule11 is preferred over Rule1\norder(rule11) > order(rule1) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n\n# The current state of the game is as follows\n# The carp steals five points from the lobster\nsteal_points(carp, 5, lobster) = True\n# The ferret published a high-quality paper\nhas(ferret, high_quality_paper) = True\n# The snail sings a victory song for the baboon but does not attack the green fields whose owner is the kudu\nsing_song(snail, victory_song_for(baboon)) = True\nnot attack(snail, green_fields_owned_by(kudu)) = True\n\n# Based on the game state and the rules and preferences, does the panther proceed to the spot right after the donkey?\nquestion = proceed(panther, spot_right_after(spot_of(donkey)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The donkey does not offer a job to the squid, in the case where the starfish steals five points from the donkey\nRule2: If the name of the jellyfish starts with the same letter as the name of the phoenix, then the jellyfish does not sing a victory song for the starfish\nRule3: If the jellyfish has a card with a color that starts with the letter \"i\", then the jellyfish does not sing a victory song for the starfish\nRule4: The starfish does not steal five points from the donkey whenever at least one animal becomes an enemy of the sun bear\nRule5: If the kangaroo burns the warehouse of the starfish and the jellyfish does not sing a victory song for the starfish, then the starfish steals five points from the donkey\nRule6: If the kangaroo has a card with a primary color, then it burns the warehouse of the starfish\nRule7: If the kangaroo has a sharp object, then it burns the warehouse of the starfish\nRule8: If the phoenix does not hold an equal number of points as the donkey, then the donkey offers a job position to the squid\n\nRule4 is preferred over Rule5\nRule8 is preferred over Rule1\n\nThe current state of the game is as follows\nThe jellyfish has a card with indigo color\nThe jellyfish has four friends\nThe jellyfish is named Cinnamon\nThe kangaroo has a blade\nThe kangaroo has a card with white color\nThe phoenix is named Tango\n\nBased on the game state and the rules and preferences, does the donkey offer a job to the squid?\nQuestion: Does the donkey offer a job to the squid?",
        "idx": 259,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The donkey does not offer a job to the squid, in the case where the starfish steals five of the points of the donkey\nrule1() = steal_points(starfish, 5, donkey) => not offer_job(donkey, squid)\n# Rule2: If the jellyfish has a name whose first letter is the same as the first letter of the phoenix's name, then the jellyfish does not sing a victory song for the starfish\nrule2() = first_letter_of(name(jellyfish)) == first_letter_of(name(phoenix)) => not sing_song(jellyfish, victory_song_for(starfish))\n# Rule3: If the jellyfish has a card whose color starts with the letter \"i\", then the jellyfish does not sing a victory song for the starfish\nrule3() = color_starts_with(jellyfish, \"i\") => not sing_song(jellyfish, victory_song_for(starfish))\n# Rule4: The starfish does not steal five points from the donkey whenever at least one animal becomes an enemy of the sun bear\nrule4() = enemy(something, sun_bear) => not steal_points(starfish, 5, donkey)\n# Rule5: If the kangaroo burns the warehouse of the starfish and the jellyfish does not sing a victory song for the starfish, then, inevitably, the starfish steals five points from the donkey\nrule5() = burn(warehouse_of(starfish), kangaroo) & not sing_song(jellyfish, victory_song_for(starfish)) => steal_points(starfish, 5, donkey)\n# Rule6: Regarding the kangaroo, if it has a card with a primary color, then we can conclude that it burns the warehouse of the starfish\nrule6() = has(kangaroo, card_with(primary_color)) => burn(warehouse_of(starfish), kangaroo)\n# Rule7: Regarding the kangaroo, if it has a sharp object, then we can conclude that it burns the warehouse that is in possession of the starfish\nrule7() = has(kangaroo, sharp_object) => burn(warehouse_of(starfish), kangaroo)\n# Rule8: If the phoenix does not hold an equal number of points as the donkey, then the donkey offers a job position to the squid.\nrule8() = points(phoenix) != points(donkey) => offer_job(donkey, squid)\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n# Rule8 is preferred over Rule1\norder(rule8) > order(rule1) = True\n\n# The current state of the game is as follows\n# The jellyfish has a card that is indigo in color, has four friends, and is named Cinnamon\nhas(jellyfish, card_with(indigo_color)) = True\nfriends(jellyfish) = 4\nname(jellyfish, Cinnamon) = True\n# The kangaroo has a blade\nhas(kangaroo, blade) = True\n# The kangaroo has a card that is white in color\nhas(kangaroo, card_with(white_color)) = True\n# The phoenix is named Tango\nname(phoenix, Tango) = True\n\n# Based on the game state and the rules and preferences, does the donkey offer a job to the squid?\nquestion = offer_job(donkey, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the parrot removes one of the pieces of the amberjack and the tilapia does not wink at the amberjack, then the amberjack does not give a magnifier to the cat\nRule2: If the amberjack gives a magnifying glass to the cat, then the cat attacks the green fields owned by the cricket\nRule3: If something gives a magnifying glass to the gecko, then it shows all her cards to the snail\nRule4: The amberjack gives a magnifying glass to the cat whenever at least one animal raises a peace flag for the catfish\nRule5: If the doctorfish steals five points from the cat, then the cat does not attack the green fields owned by the gecko\nRule6: If at least one animal becomes an enemy of the kangaroo, then the cat attacks the green fields owned by the gecko\nRule7: If something attacks the green fields of the cricket and shows all her cards to the snail, then it holds the same number of points as the lion\nRule8: If an animal does not know the defensive plans of the hummingbird, then it does not attack the green fields owned by the cricket\n\nRule1 is preferred over Rule4\nRule5 is preferred over Rule6\nRule8 is preferred over Rule2\n\nThe current state of the game is as follows\nThe hippopotamus becomes an enemy of the kangaroo\nThe parrot removes one of the pieces of the amberjack\nThe sheep raises a peace flag for the catfish\n\nBased on the game state and the rules and preferences, does the cat hold the same number of points as the lion?\nQuestion: Does the cat hold the same number of points as the lion?",
        "idx": 260,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the amberjack, if the belief is that the parrot removes from the board one of the pieces of the amberjack and the tilapia does not wink at the amberjack, then you can add \"the amberjack does not give a magnifier to the cat\" to your conclusions\nrule1() = remove(parrot, piece_of(amberjack)) & not wink(tilapia, amberjack) => not give(amberjack, magnifier, cat)\n# Rule2: If the amberjack gives a magnifying glass to the cat, then the cat attacks the green fields whose owner is the cricket\nrule2() = give(amberjack, magnifying_glass, cat) => attack(cat, green_fields_of(cricket))\n# Rule3: If something gives a magnifying glass to the gecko, then it shows her cards (all of them) to the snail, too\nrule3(something) = give(something, magnifying_glass, gecko) => show_cards(something, snail)\n# Rule4: The amberjack gives a magnifying glass to the cat whenever at least one animal raises a flag of peace for the catfish\nrule4() = raise_flag_of_peace(something, catfish) => give(amberjack, magnifying_glass, cat)\n# Rule5: If the doctorfish steals five points from the cat, then the cat is not going to attack the green fields whose owner is the gecko\nrule5() = steal_points(doctorfish, 5, cat) => not attack(cat, green_fields_of(gecko))\n# Rule6: If at least one animal becomes an enemy of the kangaroo, then the cat attacks the green fields whose owner is the gecko\nrule6() = enemy(something, kangaroo) => attack(cat, green_fields_of(gecko))\n# Rule7: If you see that something attacks the green fields of the cricket and shows her cards (all of them) to the snail, what can you certainly conclude? You can conclude that it also holds the same number of points as the lion\nrule7(something) = attack(something, green_fields_of(cricket)) & show_cards(something, snail) => points(something) == points(lion)\n# Rule8: If you are positive that one of the animals does not know the defensive plans of the hummingbird, you can be certain that it will not attack the green fields whose owner is the cricket.\nrule8(something) = not knows(defensive_plans_of(hummingbird), something) => not attack(something, green_fields_of(cricket))\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n# Rule8 is preferred over Rule2\norder(rule8) > order(rule2) = True\n\n# The current state of the game is as follows\n# The hippopotamus becomes an enemy of the kangaroo\nenemy(hippopotamus, kangaroo) = True\n# The parrot removes from the board one of the pieces of the amberjack\nremove(parrot, piece_of(amberjack)) = True\n# The sheep raises a peace flag for the catfish\nraise_flag_of_peace(sheep, catfish) = True\n\n# Based on the game state and the rules and preferences, does the cat hold the same number of points as the lion?\nquestion = points(cat) == points(lion)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job position to the salmon, then it gives a magnifying glass to the snail, too\nRule2: If the buffalo gives a magnifying glass to the snail, then the snail knows the defensive plans of the turtle\nRule3: The buffalo offers a job position to the salmon whenever at least one animal knows the defensive plans of the sun bear\nRule4: If at least one animal needs support from the carp, then the snail does not know the defense plan of the turtle.\n\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe pig knows the defensive plans of the sun bear\n\nBased on the game state and the rules and preferences, does the snail know the defensive plans of the turtle?\nQuestion: Does the snail know the defensive plans of the turtle?",
        "idx": 261,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something offers a job position to the salmon, then it gives a magnifying glass to the snail, too\nrule1() = offer_job_position(something, salmon) => give_magnifying_glass(something, snail)\n# Rule2: If the buffalo gives a magnifying glass to the snail, then the snail knows the defensive plans of the turtle\nrule2() = give_magnifying_glass(buffalo, snail) => knows(defensive_plans_of(turtle), snail)\n# Rule3: The buffalo offers a job position to the salmon whenever at least one animal knows the defensive plans of the sun bear\nrule3() = knows(defensive_plans_of(sun_bear), something) => offer_job_position(buffalo, salmon)\n# Rule4: If at least one animal needs support from the carp, then the snail does not know the defense plan of the turtle.\nrule4() = needs_support(something, carp) => not knows(defense_plan_of(turtle), snail)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The pig knows the defensive plans of the sun bear\nknows(defensive_plans_of(sun_bear), pig) = True\n\n# Based on the game state and the rules and preferences, does the snail know the defensive plans of the turtle?\nquestion = knows(defensive_plans_of(turtle), snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale has a card whose color is one of the rainbow colors, then it does not burn the warehouse that is in possession of the sun bear\nRule2: If the kangaroo rolls the dice for the whale, then the whale burns the warehouse of the sun bear\nRule3: If the leopard has something to carry apples and oranges, then the leopard rolls the dice for the oscar\nRule4: If the whale does not sing a song of victory for the zander and the oscar does not attack the green fields of the zander, then the zander will never know the defensive plans of the lion\nRule5: If the kiwi winks at the oscar, then the oscar sings a song of victory for the mosquito\nRule6: If the oscar has access to an abundance of food, then it respects the penguin\nRule7: If something does not burn the warehouse of the sun bear, then it does not sing a victory song for the zander\nRule8: If the oscar has fewer than ten friends, then it does not respect the penguin\nRule9: If the oscar has a sharp object, then it respects the penguin\nRule10: If the oscar has a name whose first letter is the same as the first letter of the turtle's name, then the oscar does not respect the penguin\nRule11: The oscar does not attack the green fields whose owner is the zander, in the case where the leopard rolls the dice for the oscar\n\nRule10 is preferred over Rule6\nRule10 is preferred over Rule9\nRule2 is preferred over Rule1\nRule8 is preferred over Rule6\nRule8 is preferred over Rule9\n\nThe current state of the game is as follows\nThe kiwi winks at the oscar\nThe leopard has a plastic bag\nThe oscar has a knife\nThe oscar is named Teddy\nThe oscar does not sing a victory song for the starfish\nThe oscar struggles to find food\nThe turtle is named Milo\nThe whale has a card that is indigo in color\n\nBased on the game state and the rules and preferences, does the zander know the defensive plans of the lion?\nQuestion: Does the zander know the defensive plans of the lion?",
        "idx": 262,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the whale, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not burn the warehouse that is in possession of the sun bear\nrule1() = has(whale, card) and color(card) in rainbow_colors => not burn(warehouse_of(sun_bear))\n# Rule2: If the kangaroo rolls the dice for the whale, then the whale burns the warehouse of the sun bear\nrule2() = roll_dice(kangaroo, whale) => burn(warehouse_of(sun_bear))\n# Rule3: If the leopard has something to carry apples and oranges, then the leopard rolls the dice for the oscar\nrule3() = has(leopard, carrying_apples_and_oranges) => roll_dice(leopard, oscar)\n# Rule4: If the whale does not sing a song of victory for the zander and the oscar does not attack the green fields of the zander, then the zander will never know the defensive plans of the lion\nrule4() = not sing_song(whale, victory_song_for(zander)) & not attack(green_fields_of(zander), oscar) => never_know_defensive_plans(zander, lion)\n# Rule5: If the kiwi winks at the oscar, then the oscar sings a song of victory for the mosquito\nrule5() = wink(kiwi, oscar) => sing_song(oscar, victory_song_for(mosquito))\n# Rule6: Regarding the oscar, if it has access to an abundance of food, then we can conclude that it respects the penguin\nrule6() = has_access_to_abundance_of_food(oscar) => respects(oscar, penguin)\n# Rule7: If something does not burn the warehouse of the sun bear, then it does not sing a victory song for the zander\nrule7(something) = not burn(warehouse_of(sun_bear)) => not sing_song(something, victory_song_for(zander))\n# Rule8: Regarding the oscar, if it has fewer than ten friends, then we can conclude that it does not respect the penguin\nrule8() = friends(oscar) < 10 => not respects(oscar, penguin)\n# Rule9: If the oscar has a sharp object, then the oscar respects the penguin\nrule9() = has(oscar, sharp_object) => respects(oscar, penguin)\n# Rule10: If the oscar has a name whose first letter is the same as the first letter of the turtle's name, then the oscar does not respect the penguin\nrule10() = first_letter_of(name(oscar)) == first_letter_of(name(turtle)) => not respects(oscar, penguin)\n# Rule11: The oscar does not attack the green fields whose owner is the zander, in the case where the leopard rolls the dice for the oscar.\nrule11() = roll_dice(leopard, oscar) => not attack(green_fields_of(zander), oscar)\n# Rule10 is preferred over Rule6\norder(rule10) > order(rule6) = True\n# Rule10 is preferred over Rule9\norder(rule10) > order(rule9) = True\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule8 is preferred over Rule6\norder(rule8) > order(rule6) = True\n# Rule8 is preferred over Rule9\norder(rule8) > order(rule9) = True\n\n# The current state of the game is as follows\n# The kiwi winks at the oscar\nwink(kiwi, oscar) = True\n# The leopard has a plastic bag\nhas(leopard, plastic_bag) = True\n# The oscar has a knife, is named Teddy, and does not sing a victory song for the starfish\nhas(oscar, knife) = True\nname(oscar, Teddy) = True\nnot sing_song(oscar, victory_song_for(starfish)) = True\n# The oscar struggles to find food\nstruggles_to_find_food(oscar) = True\n# The turtle is named Milo\nname(turtle, Milo) = True\n# The whale has a card that is indigo in color\nhas(whale, card_with(indigo_color)) = True\n\n# Based on the game state and the rules and preferences, does the zander know the defensive plans of the lion?\nquestion = know_defensive_plans(zander, lion)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eel has a card with a primary color, then the eel winks at the donkey\nRule2: If you saw one of the animals wink at the donkey, then that animal will also roll the dice for the koala\nRule3: The koala raises a flag of peace for the eagle, if the eel does not roll the dice for the koala\nRule4: If the eel has a name whose first letter is the same as the first letter of the cheetah's name, then the eel winks at the donkey\n\nThe current state of the game is as follows\nThe cheetah is named Chickpea\nThe eel has a card that is blue in color and is named Mojo\n\nBased on the game state and the rules and preferences, does the koala raise a peace flag for the eagle?\nQuestion: Does the koala raise a peace flag for the eagle?",
        "idx": 263,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eel has a card with a primary color, then the eel winks at the donkey\nrule1() = has(eel, card_with(primary_color)) => wink(eel, donkey)\n# Rule2: If you are positive that you saw one of the animals winks at the donkey, you can be certain that it will also roll the dice for the koala\nrule2(something) = wink(something, donkey) => roll_dice(something, koala)\n# Rule3: The koala unquestionably raises a flag of peace for the eagle, in the case where the eel does not roll the dice for the koala\nrule3() = not roll_dice(eel, koala) => raise_flag_of_peace(koala, eagle)\n# Rule4: If the eel has a name whose first letter is the same as the first letter of the cheetah's name, then the eel winks at the donkey.\nrule4() = first_letter_of(name(eel)) == first_letter_of(name(cheetah)) => wink(eel, donkey)\n\n# The current state of the game is as follows\n# The cheetah is named Chickpea\nname(cheetah, Chickpea) = True\n# The eel has a card that is blue in color, and is named Mojo\nhas(eel, card_with(blue_color)) = True\nname(eel, Mojo) = True\n\n# Based on the game state and the rules and preferences, does the koala raise a peace flag for the eagle?\nquestion = raise_flag_of_peace(koala, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the halibut has a card whose color is one of the rainbow colors, then the halibut does not roll the dice for the cat\nRule2: If you saw one of the animals proceed to the spot right after the amberjack, then it will also attack the green fields of the amberjack\nRule3: If at least one animal learns the basics of resource management from the viperfish, then the buffalo does not raise a peace flag for the octopus\nRule4: If the moose winks at the kangaroo, then the kangaroo does not learn elementary resource management from the buffalo\nRule5: If something does not roll the dice for the cat, then it learns the basics of resource management from the viperfish\nRule6: If the kangaroo learns elementary resource management from the buffalo and the squirrel does not hold an equal number of points as the buffalo, then the buffalo raises a peace flag for the octopus\nRule7: The squirrel does not hold an equal number of points as the buffalo whenever at least one animal attacks the green fields of the amberjack\nRule8: If at least one animal winks at the cockroach, then the kangaroo learns elementary resource management from the buffalo\nRule9: If the halibut has more than 8 friends, then the halibut does not roll the dice for the cat\nRule10: If the penguin has something to drink, then the penguin winks at the cockroach\n\nRule4 is preferred over Rule8\nRule6 is preferred over Rule3\n\nThe current state of the game is as follows\nThe goldfish is named Lily\nThe halibut has a card that is black in color\nThe halibut has one smart friend and nine friends that are not smart\nThe halibut is named Mojo\nThe penguin has a beer\nThe sheep is named Milo\nThe viperfish is named Lola and proceeds to the spot right after the amberjack\n\nBased on the game state and the rules and preferences, does the buffalo raise a peace flag for the octopus?\nQuestion: Does the buffalo raise a peace flag for the octopus?",
        "idx": 264,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the halibut has a card whose color is one of the rainbow colors, then the halibut does not roll the dice for the cat\nrule1() = has(halibut, card) and color(card) in rainbow_colors => not roll_dice(halibut, cat)\n# Rule2: If you are positive that you saw one of the animals proceeds to the spot right after the amberjack, you can be certain that it will also attack the green fields of the amberjack\nrule2(something) = proceed(something, spot_right_after(amberjack)) => attack(something, green_fields_of(amberjack))\n# Rule3: If at least one animal learns the basics of resource management from the viperfish, then the buffalo does not raise a peace flag for the octopus\nrule3() = learns_basics_of_resource_management(something, viperfish) => not raise_flag_of_peace(buffalo, octopus)\n# Rule4: If the moose winks at the kangaroo, then the kangaroo is not going to learn elementary resource management from the buffalo\nrule4() = wink(moose, kangaroo) => not learn_elementary_resource_management(kangaroo, buffalo)\n# Rule5: If something does not roll the dice for the cat, then it learns the basics of resource management from the viperfish\nrule5(something) = not roll_dice(something, cat) => learns_basics_of_resource_management(something, viperfish)\n# Rule6: For the buffalo, if the belief is that the kangaroo learns elementary resource management from the buffalo and the squirrel does not hold an equal number of points as the buffalo, then you can add \"the buffalo raises a flag of peace for the octopus\" to your conclusions\nrule6() = learns_elementary_resource_management(kangaroo, buffalo) & not equal_points(squirrel, buffalo) => raise_flag_of_peace(buffalo, octopus)\n# Rule7: The squirrel does not hold an equal number of points as the buffalo whenever at least one animal attacks the green fields of the amberjack\nrule7() = attack(something, green_fields_of(amberjack)) => not equal_points(squirrel, buffalo)\n# Rule8: If at least one animal winks at the cockroach, then the kangaroo learns elementary resource management from the buffalo\nrule8() = wink(something, cockroach) => learn_elementary_resource_management(kangaroo, buffalo)\n# Rule9: If the halibut has more than 8 friends, then the halibut does not roll the dice for the cat\nrule9() = friends(halibut) > 8 => not roll_dice(halibut, cat)\n# Rule10: If the penguin has something to drink, then the penguin winks at the cockroach.\nrule10() = has(penguin, drink) => wink(penguin, cockroach)\n# Rule4 is preferred over Rule8\norder(rule4) > order(rule8) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n\n# The current state of the game is as follows\n# The goldfish is named Lily\nname(goldfish, Lily) = True\n# The halibut has a card that is black in color, and has one friend that is smart and nine friends that are not\nhas(halibut, card_with(black_color)) = True\nfriends(halibut) = 10\nhas(halibut, smart_friend) = True\nhas(halibut, not_smart_friend) = True\n# The halibut is named Mojo\nname(halibut, Mojo) = True\n# The penguin has a beer\nhas(penguin, beer) = True\n# The sheep is named Milo\nname(sheep, Milo) = True\n# The viperfish is named Lola, and proceeds to the spot right after the amberjack\nname(viperfish, Lola) = True\nproceed(viperfish, spot_right_after(amberjack)) = True\n\n# Based on the game state and the rules and preferences, does the buffalo raise a peace flag for the octopus?\nquestion = raise_flag_of_peace(buffalo, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo has more than twelve friends, then it does not remove one of the pieces of the hippopotamus\nRule2: If an animal prepares armor for the cheetah, then it learns elementary resource management from the hummingbird\nRule3: If the hummingbird has a name whose first letter is the same as the first letter of the tilapia's name, then the hummingbird gives a magnifier to the baboon\nRule4: If at least one animal needs the support of the caterpillar, then the kangaroo removes one of the pieces of the hippopotamus\nRule5: If something prepares armor for the phoenix, then it does not hold the same number of points as the grasshopper\nRule6: If the gecko knows the defense plan of the kangaroo and the donkey gives a magnifier to the kangaroo, then the kangaroo prepares armor for the cheetah\nRule7: If an animal removes one of the pieces of the hippopotamus, then it does not offer a job position to the viperfish\nRule8: If something holds the same number of points as the grasshopper but does not offer a job position to the viperfish, then it does not give a magnifier to the kudu\nRule9: If the hummingbird has more than six friends, then it gives a magnifying glass to the baboon\nRule10: The kangaroo holds an equal number of points as the grasshopper whenever at least one animal gives a magnifying glass to the baboon\nRule11: The kangaroo offers a job to the viperfish whenever at least one animal knocks down the fortress that belongs to the eel\nRule12: If the kangaroo does not have her keys, then it does not remove one of the pieces of the hippopotamus\n\nRule1 is preferred over Rule4\nRule11 is preferred over Rule7\nRule12 is preferred over Rule4\nRule5 is preferred over Rule10\n\nThe current state of the game is as follows\nThe donkey gives a magnifier to the kangaroo\nThe gecko knows the defensive plans of the kangaroo\nThe hummingbird has two friends, one energetic and one not, and is named Meadow\nThe kangaroo has four friends\nThe polar bear needs support from the caterpillar\nThe tilapia is named Milo\n\nBased on the game state and the rules and preferences, does the kangaroo give a magnifier to the kudu?\nQuestion: Does the kangaroo give a magnifier to the kudu?",
        "idx": 265,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kangaroo, if it has more than twelve friends, then we can conclude that it does not remove one of the pieces of the hippopotamus\nrule1() = friends(kangaroo) > 12 => not remove(kangaroo, piece_of(hippopotamus))\n# Rule2: If you are positive that you saw one of the animals prepares armor for the cheetah, you can be certain that it will also learn elementary resource management from the hummingbird\nrule2(something) = prepare_armor(something, cheetah) => learn(something, elementary_resource_management_from(hummingbird))\n# Rule3: If the hummingbird has a name whose first letter is the same as the first letter of the tilapia's name, then the hummingbird gives a magnifier to the baboon\nrule3() = first_letter_of(name(hummingbird)) == first_letter_of(name(tilapia)) => give_magnifier(hummingbird, baboon)\n# Rule4: If at least one animal needs the support of the caterpillar, then the kangaroo removes one of the pieces of the hippopotamus\nrule4() = needs_support(something, caterpillar) => remove(kangaroo, piece_of(hippopotamus))\n# Rule5: If something prepares armor for the phoenix, then it does not hold the same number of points as the grasshopper\nrule5(something) = prepare_armor(something, phoenix) => not holds_same_number_of_points(something, grasshopper)\n# Rule6: If the gecko knows the defense plan of the kangaroo and the donkey gives a magnifier to the kangaroo, then the kangaroo prepares armor for the cheetah\nrule6() = knows(defense_plan_of(kangaroo), gecko) & give_magnifier(donkey, kangaroo) => prepare_armor(kangaroo, cheetah)\n# Rule7: If you are positive that you saw one of the animals removes one of the pieces of the hippopotamus, you can be certain that it will not offer a job position to the viperfish\nrule7(something) = remove(something, piece_of(hippopotamus)) => not offer_job_position(something, viperfish)\n# Rule8: Be careful when something holds the same number of points as the grasshopper but does not offer a job position to the viperfish because in this case it will, surely, not give a magnifier to the kudu (this may or may not be problematic)\nrule8(something) = holds_same_number_of_points(something, grasshopper) & not offer_job_position(something, viperfish) => not give_magnifier(something, kudu)\n# Rule9: Regarding the hummingbird, if it has more than six friends, then we can conclude that it gives a magnifying glass to the baboon\nrule9() = friends(hummingbird) > 6 => give_magnifying_glass(hummingbird, baboon)\n# Rule10: The kangaroo holds an equal number of points as the grasshopper whenever at least one animal gives a magnifying glass to the baboon\nrule10() = give_magnifying_glass(something, baboon) => holds_same_number_of_points(kangaroo, grasshopper)\n# Rule11: The kangaroo offers a job to the viperfish whenever at least one animal knocks down the fortress that belongs to the eel\nrule11() = knock_down(something, fortress_of(eel)) => offer_job_position(kangaroo, viperfish)\n# Rule12: Regarding the kangaroo, if it does not have her keys, then we can conclude that it does not remove one of the pieces of the hippopotamus.\nrule12() = not has(kangaroo, keys) => not remove(kangaroo, piece_of(hippopotamus))\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule11 is preferred over Rule7\norder(rule11) > order(rule7) = True\n# Rule12 is preferred over Rule4\norder(rule12) > order(rule4) = True\n# Rule5 is preferred over Rule10\norder(rule5) > order(rule10) = True\n\n# The current state of the game is as follows\n# The donkey gives a magnifier to the kangaroo\ngive_magnifier(donkey, kangaroo) = True\n# The gecko knows the defensive plans of the kangaroo\nknows(defensive_plans_of(kangaroo), gecko) = True\n# The hummingbird has one friend that is energetic and 1 friend that is not, and is named Meadow\nfriends(hummingbird) = 2\nhas_friend(hummingbird, energetic) = True\nhas_friend(hummingbird, not_energetic) = True\nname(hummingbird, Meadow) = True\n# The kangaroo has 4 friends\nfriends(kangaroo) = 4\n# The polar bear needs support from the caterpillar\nneeds_support(polar_bear, caterpillar) = True\n# The tilapia is named Milo\nname(tilapia, Milo) = True\n\n# Based on the game state and the rules and preferences, does the kangaroo give a magnifier to the kudu?\nquestion = give_magnifier(kangaroo, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the spider knows the defensive plans of the ferret, then the ferret does not wink at the kangaroo\nRule2: If the goldfish has a card with a primary color, then the goldfish needs support from the amberjack\nRule3: If something owes money to the grasshopper but does not wink at the kangaroo, then it knows the defense plan of the swordfish\nRule4: The bat does not knock down the fortress that belongs to the swordfish whenever at least one animal needs support from the amberjack\nRule5: If the goldfish owns a luxury aircraft, then the goldfish needs support from the amberjack\nRule6: If the ferret has a card whose color appears in the flag of France, then the ferret owes money to the grasshopper\nRule7: If the ferret knows the defensive plans of the swordfish and the bat does not knock down the fortress that belongs to the swordfish, then the swordfish owes money to the aardvark\nRule8: If the panther does not respect the swordfish, then the swordfish does not owe money to the aardvark\nRule9: The ferret winks at the kangaroo whenever at least one animal offers a job position to the cow\n\nRule7 is preferred over Rule8\nRule9 is preferred over Rule1\n\nThe current state of the game is as follows\nThe ferret has a card that is blue in color\nThe goldfish has a card that is yellow in color and lost her keys\nThe spider knows the defensive plans of the ferret\nThe turtle does not roll the dice for the goldfish\n\nBased on the game state and the rules and preferences, does the swordfish owe money to the aardvark?\nQuestion: Does the swordfish owe money to the aardvark?",
        "idx": 266,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the spider knows the defensive plans of the ferret, then the ferret is not going to wink at the kangaroo\nrule1() = knows(defensive_plans_of(ferret), spider) => not wink(ferret, kangaroo)\n# Rule2: If the goldfish has a card with a primary color, then the goldfish needs support from the amberjack\nrule2() = has(goldfish, card_with(primary_color)) => needs_support(goldfish, amberjack)\n# Rule3: Be careful when something owes money to the grasshopper but does not wink at the kangaroo because in this case it will, surely, know the defense plan of the swordfish (this may or may not be problematic)\nrule3(something) = owes_money_to(something, grasshopper) & not wink(something, kangaroo) => knows(defense_plan_of(swordfish), something)\n# Rule4: The bat does not knock down the fortress that belongs to the swordfish whenever at least one animal needs support from the amberjack\nrule4() = needs_support(something, amberjack) => not knock_down(bat, fortress_of(swordfish))\n# Rule5: If the goldfish owns a luxury aircraft, then the goldfish needs support from the amberjack\nrule5() = owns(goldfish, luxury_aircraft) => needs_support(goldfish, amberjack)\n# Rule6: Regarding the ferret, if it has a card whose color appears in the flag of France, then we can conclude that it owes money to the grasshopper\nrule6() = color_of(card(ferret)) in colors_of(flag_of(France)) => owes_money_to(ferret, grasshopper)\n# Rule7: For the swordfish, if the belief is that the ferret knows the defensive plans of the swordfish and the bat does not knock down the fortress that belongs to the swordfish, then you can add \"the swordfish owes money to the aardvark\" to your conclusions\nrule7() = knows(defensive_plans_of(swordfish), ferret) & not knock_down(bat, fortress_of(swordfish)) => owes_money_to(swordfish, aardvark)\n# Rule8: If the panther does not respect the swordfish, then the swordfish does not owe $$$ to the aardvark\nrule8() = not respects(panther, swordfish) => not owes_money_to(swordfish, aardvark)\n# Rule9: The ferret winks at the kangaroo whenever at least one animal offers a job position to the cow.\nrule9() = offers_job_position(something, cow) => wink(ferret, kangaroo)\n# Rule7 is preferred over Rule8\norder(rule7) > order(rule8) = True\n# Rule9 is preferred over Rule1\norder(rule9) > order(rule1) = True\n\n# The current state of the game is as follows\n# The ferret has a card that is blue in color\nhas(ferret, card_with(blue_color)) = True\n# The goldfish has a card that is yellow in color, and lost her keys\nhas(goldfish, card_with(yellow_color)) = True\nlost_keys(goldfish) = True\n# The spider knows the defensive plans of the ferret\nknows(defensive_plans_of(ferret), spider) = True\n# The turtle does not roll the dice for the goldfish\nnot roll_dice(turtle, goldfish) = True\n\n# Based on the game state and the rules and preferences, does the swordfish owe money to the aardvark?\nquestion = owes_money_to(swordfish, aardvark)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something prepares armor for the cat but does not know the defensive plans of the elephant, then it becomes an actual enemy of the spider\nRule2: If something does not attack the green fields owned by the aardvark, then it learns elementary resource management from the lion\nRule3: If the crocodile works fewer hours than before, then it does not learn the basics of resource management from the lion\nRule4: If the dog has a card with a primary color, then it knows the defense plan of the lion\nRule5: If the cricket steals five points from the lion, then the lion does not become an enemy of the spider\nRule6: If the puffin has fewer than fourteen friends, then it proceeds to the spot right after the lion\nRule7: The raven becomes an enemy of the lion whenever at least one animal gives a magnifying glass to the pig\nRule8: If the dog has more than fifteen friends, then it knows the defensive plans of the lion\nRule9: If the dog knows the defense plan of the lion, then the lion does not know the defense plan of the elephant\nRule10: If the raven becomes an actual enemy of the lion and the crocodile learns the basics of resource management from the lion, then the lion prepares armor for the cat\n\nRule3 is preferred over Rule2\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe dog has a card that is red in color and has ten friends\nThe puffin has four smart friends and one non-smart friend\nThe tiger gives a magnifier to the pig\nThe crocodile does not attack the green fields owned by the aardvark\n\nBased on the game state and the rules and preferences, does the lion become an enemy of the spider?\nQuestion: Does the lion become an enemy of the spider?",
        "idx": 267,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something prepares armor for the cat but does not know the defensive plans of the elephant because in this case it will, surely, become an actual enemy of the spider (this may or may not be problematic)\nrule1(something) = prepare_armor(something, cat) & not knows(defensive_plans_of(elephant), something) => actual_enemy(something, spider)\n# Rule2: If something does not attack the green fields whose owner is the aardvark, then it learns elementary resource management from the lion\nrule2(something) = not attack(green_fields_of(aardvark), something) => learn_elementary_resource_management(something, lion)\n# Rule3: If the crocodile works fewer hours than before, then the crocodile does not learn the basics of resource management from the lion\nrule3() = reduce_work_hours(crocodile) => not learn_basics_of_resource_management(crocodile, lion)\n# Rule4: If the dog has a card with a primary color, then the dog knows the defense plan of the lion\nrule4() = has(dog, card_with(primary_color)) => knows(defense_plan_of(lion), dog)\n# Rule5: If the cricket steals five of the points of the lion, then the lion is not going to become an enemy of the spider\nrule5() = steal_points(cricket, 5, lion) => not enemy(lion, spider)\n# Rule6: Regarding the puffin, if it has fewer than fourteen friends, then we can conclude that it proceeds to the spot right after the lion\nrule6() = friends(puffin) < 14 => proceed(puffin, spot_right_after(lion))\n# Rule7: The raven becomes an enemy of the lion whenever at least one animal gives a magnifying glass to the pig\nrule7() = give_magnifying_glass(animal, pig) => enemy(raven, lion)\n# Rule8: If the dog has more than fifteen friends, then the dog knows the defensive plans of the lion\nrule8() = friends(dog) > 15 => knows(defensive_plans_of(lion), dog)\n# Rule9: The lion does not know the defense plan of the elephant, in the case where the dog knows the defense plan of the lion\nrule9() = knows(defense_plan_of(lion), dog) => not knows(defense_plan_of(elephant), lion)\n# Rule10: If the raven becomes an actual enemy of the lion and the crocodile learns the basics of resource management from the lion, then the lion prepares armor for the cat.\nrule10() = actual_enemy(raven, lion) & learn_basics_of_resource_management(crocodile, lion) => prepare_armor(lion, cat)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The dog has a card that is red in color, and has ten friends\nhas(dog, card_with(red_color)) = True\nfriends(dog) = 10\n# The puffin has four friends that are smart and 1 friend that is not\nfriends(puffin) = 4\n# The tiger gives a magnifier to the pig\ngive_magnifying_glass(tiger, pig) = True\n# The crocodile does not attack the green fields whose owner is the aardvark\nnot attack(green_fields_of(aardvark), crocodile) = True\n\n# Based on the game state and the rules and preferences, does the lion become an enemy of the spider?\nquestion = enemy(lion, spider)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the meerkat has a device to connect to the internet, then it does not become an enemy of the hummingbird\nRule2: If the viperfish attacks the green fields owned by the meerkat, then the meerkat knows the defense plan of the leopard\nRule3: If the meerkat has a card with a color that appears in the flag of Belgium, then it does not become an enemy of the hummingbird\nRule4: If the name of the meerkat starts with the same letter as the name of the moose, then the meerkat does not know the defense plan of the leopard\nRule5: If something becomes an actual enemy of the hummingbird and knows the defense plan of the leopard, then it does not roll the dice for the halibut\nRule6: If the cockroach shows all her cards to the meerkat and the ferret knocks down the fortress of the meerkat, then the meerkat becomes an enemy of the hummingbird\nRule7: If something does not roll the dice for the halibut, then it does not hold the same number of points as the hippopotamus\n\nRule1 is preferred over Rule6\nRule3 is preferred over Rule6\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cockroach shows all her cards to the meerkat\nThe ferret knocks down the fortress of the meerkat\nThe meerkat has a harmonica\nThe moose is named Teddy\nThe viperfish attacks the green fields owned by the meerkat\n\nBased on the game state and the rules and preferences, does the meerkat hold the same number of points as the hippopotamus?\nQuestion: Does the meerkat hold the same number of points as the hippopotamus?",
        "idx": 268,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the meerkat, if it has a device to connect to the internet, then we can conclude that it does not become an enemy of the hummingbird\nrule1() = has(meerkat, connect_to_internet(device)) => not enemy(meerkat, hummingbird)\n# Rule2: If the viperfish attacks the green fields whose owner is the meerkat, then the meerkat knows the defense plan of the leopard\nrule2() = attacks(viperfish, green_fields_of(meerkat)) => knows(defense_plan_of(leopard), meerkat)\n# Rule3: Regarding the meerkat, if it has a card whose color appears in the flag of Belgium, then we can conclude that it does not become an enemy of the hummingbird\nrule3() = has(meerkat, card_with(color)) & color in colors_of(flag_of(Belgium)) => not enemy(meerkat, hummingbird)\n# Rule4: If the meerkat has a name whose first letter is the same as the first letter of the moose's name, then the meerkat does not know the defense plan of the leopard\nrule4() = first_letter_of(name(meerkat)) == first_letter_of(name(moose)) => not knows(defense_plan_of(leopard), meerkat)\n# Rule5: If you see that something becomes an actual enemy of the hummingbird and knows the defense plan of the leopard, what can you certainly conclude? You can conclude that it does not roll the dice for the halibut\nrule5(something) = enemy(something, hummingbird) & knows(defense_plan_of(leopard), something) => not roll_dice(something, halibut)\n# Rule6: For the meerkat, if the belief is that the cockroach shows her cards (all of them) to the meerkat and the ferret knocks down the fortress of the meerkat, then you can add \"the meerkat becomes an enemy of the hummingbird\" to your conclusions\nrule6() = show_cards(cockroach, meerkat) & knock_down(ferret, fortress_of(meerkat)) => enemy(meerkat, hummingbird)\n# Rule7: If something does not roll the dice for the halibut, then it does not hold the same number of points as the hippopotamus.\nrule7(something) = not roll_dice(something, halibut) => not same_number_of_points(something, hippopotamus)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cockroach shows all her cards to the meerkat\nshow_cards(cockroach, meerkat) = True\n# The ferret knocks down the fortress of the meerkat\nknock_down(ferret, fortress_of(meerkat)) = True\n# The meerkat has a harmonica\nhas(meerkat, harmonica) = True\n# The moose is named Teddy\nname(moose, Teddy) = True\n# The viperfish attacks the green fields whose owner is the meerkat\nattacks(viperfish, green_fields_of(meerkat)) = True\n\n# Based on the game state and the rules and preferences, does the meerkat hold the same number of points as the hippopotamus?\nquestion = same_number_of_points(meerkat, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the ferret has a device to connect to the internet, then it burns the warehouse that is in possession of the panda bear\nRule2: If the lobster offers a job to the ferret, then the ferret rolls the dice for the panda bear\nRule3: If the starfish has something to drink, then it does not knock down the fortress that belongs to the eel\nRule4: If an animal owes money to the gecko, then it will also attack the green fields whose owner is the sea bass\nRule5: If the halibut does not raise a peace flag for the lobster, then the lobster offers a job to the ferret\nRule6: If the carp raises a peace flag for the lobster, then the lobster does not offer a job position to the ferret\nRule7: If at least one animal knocks down the fortress of the eel, then the ferret owes money to the gecko\nRule8: If an animal burns the warehouse that is in possession of the panda bear, then it will not roll the dice for the panda bear\nRule9: If the starfish has something to carry apples and oranges, then it does not knock down the fortress of the eel\nRule10: If an animal steals five points from the tilapia and rolls the dice for the panda bear, then it does not attack the green fields of the sea bass\nRule11: If the lion knocks down the fortress of the starfish and the amberjack becomes an enemy of the starfish, then the starfish knocks down the fortress that belongs to the eel\n\nRule10 is preferred over Rule4\nRule11 is preferred over Rule3\nRule11 is preferred over Rule9\nRule6 is preferred over Rule5\nRule8 is preferred over Rule2\n\nThe current state of the game is as follows\nThe amberjack becomes an enemy of the starfish\nThe ferret has a computer\nThe lion burns the warehouse of the starfish\nThe starfish has a cello\nThe halibut does not raise a peace flag for the lobster\n\nBased on the game state and the rules and preferences, does the ferret attack the green fields whose owner is the sea bass?\nQuestion: Does the ferret attack the green fields whose owner is the sea bass?",
        "idx": 269,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the ferret, if it has a device to connect to the internet, then we can conclude that it burns the warehouse that is in possession of the panda bear\nrule1() = has(ferret, connect_to_internet(device)) => burn(warehouse_of(panda_bear))\n# Rule2: The ferret unquestionably rolls the dice for the panda bear, in the case where the lobster offers a job to the ferret\nrule2() = offer_job(lobster, ferret) => roll_dice(ferret, panda_bear)\n# Rule3: Regarding the starfish, if it has something to drink, then we can conclude that it does not knock down the fortress that belongs to the eel\nrule3() = has(starfish, drink) => not knock_down(fortress_of(eel))\n# Rule4: If you are positive that you saw one of the animals owes money to the gecko, you can be certain that it will also attack the green fields whose owner is the sea bass\nrule4(something) = owes_money_to(something, gecko) => attack_green_fields(something, sea_bass)\n# Rule5: The lobster unquestionably offers a job to the ferret, in the case where the halibut does not raise a peace flag for the lobster\nrule5() = not raise_flag_of_peace(halibut, lobster) => offer_job(lobster, ferret)\n# Rule6: The lobster does not offer a job position to the ferret, in the case where the carp raises a peace flag for the lobster\nrule6() = raise_flag_of_peace(carp, lobster) => not offer_job(lobster, ferret)\n# Rule7: If at least one animal knocks down the fortress of the eel, then the ferret owes money to the gecko\nrule7(something) = knock_down(fortress_of(eel), something) => owes_money_to(ferret, gecko)\n# Rule8: If you are positive that you saw one of the animals burns the warehouse that is in possession of the panda bear, you can be certain that it will not roll the dice for the panda bear\nrule8(something) = burn(warehouse_of(panda_bear), something) => not roll_dice(something, panda_bear)\n# Rule9: If the starfish has something to carry apples and oranges, then the starfish does not knock down the fortress of the eel\nrule9() = has(starfish, carry_apples_and_oranges) => not knock_down(fortress_of(eel))\n# Rule10: If you see that something steals five of the points of the tilapia and rolls the dice for the panda bear, what can you certainly conclude? You can conclude that it does not attack the green fields of the sea bass\nrule10(something) = steal_points(something, 5, tilapia) & roll_dice(something, panda_bear) => not attack_green_fields(something, sea_bass)\n# Rule11: For the starfish, if the belief is that the lion knocks down the fortress of the starfish and the amberjack becomes an enemy of the starfish, then you can add \"the starfish knocks down the fortress that belongs to the eel\" to your conclusions.\nrule11() = knock_down(fortress_of(starfish), lion) & enemy(amberjack, starfish) => knock_down(fortress_of(eel), starfish)\n# Rule10 is preferred over Rule4\norder(rule10) > order(rule4) = True\n# Rule11 is preferred over Rule3\norder(rule11) > order(rule3) = True\n# Rule11 is preferred over Rule9\norder(rule11) > order(rule9) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n# Rule8 is preferred over Rule2\norder(rule8) > order(rule2) = True\n\n# The current state of the game is as follows\n# The amberjack becomes an enemy of the starfish\nenemy(amberjack, starfish) = True\n# The ferret has a computer\nhas(ferret, computer) = True\n# The lion burns the warehouse of the starfish\nburn(warehouse_of(starfish), lion) = True\n# The starfish has a cello\nhas(starfish, cello) = True\n# The halibut does not raise a peace flag for the lobster\nnot raise_flag_of_peace(halibut, lobster) = True\n\n# Based on the game state and the rules and preferences, does the ferret attack the green fields whose owner is the sea bass?\nquestion = attack_green_fields(ferret, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something holds an equal number of points as the buffalo but does not attack the green fields of the kiwi, then it proceeds to the spot that is right after the spot of the viperfish\nRule2: If something proceeds to the spot that is right after the spot of the viperfish, then it rolls the dice for the sea bass\nRule3: If the spider has a card with a color from the rainbow colors, then it does not burn the warehouse of the hummingbird\nRule4: If the swordfish has a sharp object, then it does not attack the green fields of the kiwi\nRule5: The turtle becomes an enemy of the hummingbird if at least one animal needs support from the caterpillar\nRule6: If something proceeds to the spot right after the phoenix, then it burns the warehouse of the hummingbird\nRule7: If at least one animal learns the basics of resource management from the penguin, then the hummingbird does not proceed to the spot right after the halibut\nRule8: If the swordfish has a card with a color from the rainbow colors, then it holds an equal number of points as the buffalo\nRule9: If the spider burns the warehouse of the hummingbird and the turtle becomes an enemy of the hummingbird, then the hummingbird proceeds to the spot that is right after the spot of the halibut\nRule10: If the turtle created a time machine, then it does not become an enemy of the hummingbird\n\nRule5 is preferred over Rule10\nRule6 is preferred over Rule3\nRule7 is preferred over Rule9\n\nThe current state of the game is as follows\nThe penguin is named Pashmak\nThe polar bear is named Beauty\nThe spider has a yellow card and is named Cinnamon\nThe spider proceeds to the spot right after the phoenix\nThe starfish needs support from the caterpillar\nThe swordfish has 4 easy-going friends and 2 not-easy-going friends, has an orange card, and is holding her keys\nThe swordfish has a cutter\nThe turtle invented a time machine and is named Luna\n\nBased on the game state and the rules and preferences, does the swordfish roll the dice for the sea bass?\nQuestion: Does the swordfish roll the dice for the sea bass?",
        "idx": 270,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something holds an equal number of points as the buffalo but does not attack the green fields of the kiwi because in this case it will, surely, proceed to the spot that is right after the spot of the viperfish (this may or may not be problematic)\nrule1(something) = points(something) == points(buffalo) & not attack(something, green_fields_of(kiwi)) => proceed(something, spot_right_after(spot_of(viperfish)))\n# Rule2: If you are positive that you saw one of the animals proceeds to the spot that is right after the spot of the viperfish, you can be certain that it will also roll the dice for the sea bass\nrule2() = proceed(something, spot_right_after(spot_of(viperfish))) => roll_dice(something, sea_bass)\n# Rule3: Regarding the spider, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not burn the warehouse of the hummingbird\nrule3() = has(spider, card_with(color_in(rainbow_colors))) => not burn(warehouse_of(hummingbird))\n# Rule4: Regarding the swordfish, if it has a sharp object, then we can conclude that it does not attack the green fields of the kiwi\nrule4() = has(swordfish, sharp_object) => not attack(swordfish, green_fields_of(kiwi))\n# Rule5: The turtle becomes an enemy of the hummingbird whenever at least one animal needs support from the caterpillar\nrule5() = needs_support(something, caterpillar) => enemy(turtle, hummingbird)\n# Rule6: If something proceeds to the spot right after the phoenix, then it burns the warehouse of the hummingbird, too\nrule6(something) = proceed(something, spot_right_after(spot_of(phoenix))) => burn(warehouse_of(hummingbird))\n# Rule7: If at least one animal learns the basics of resource management from the penguin, then the hummingbird does not proceed to the spot right after the halibut\nrule7() = learns_basics_of_resource_management(something, penguin) => not proceed(hummingbird, spot_right_after(spot_of(halibut)))\n# Rule8: Regarding the swordfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it holds an equal number of points as the buffalo\nrule8() = has(swordfish, card_with(color_in(rainbow_colors))) => points(swordfish) == points(buffalo)\n# Rule9: If the spider burns the warehouse that is in possession of the hummingbird and the turtle becomes an enemy of the hummingbird, then the hummingbird proceeds to the spot that is right after the spot of the halibut\nrule9() = burn(warehouse_of(hummingbird), spider) & enemy(turtle, hummingbird) => proceed(hummingbird, spot_right_after(spot_of(halibut)))\n# Rule10: Regarding the turtle, if it created a time machine, then we can conclude that it does not become an enemy of the hummingbird.\nrule10() = created_time_machine(turtle) => not enemy(turtle, hummingbird)\n# Rule5 is preferred over Rule10\norder(rule5) > order(rule10) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n# Rule7 is preferred over Rule9\norder(rule7) > order(rule9) = True\n\n# The current state of the game is as follows\n# The penguin is named Pashmak\nname(penguin, Pashmak) = True\n# The polar bear is named Beauty\nname(polar_bear, Beauty) = True\n# The spider has a card that is yellow in color, and is named Cinnamon\nhas(spider, card_with(yellow_color)) = True\nname(spider, Cinnamon) = True\n# The spider proceeds to the spot right after the phoenix\nproceed(spider, spot_right_after(spot_of(phoenix))) = True\n# The starfish needs support from the caterpillar\nneeds_support(starfish, caterpillar) = True\n# The swordfish has 4 friends that are easy going and two friends that are not, has a card that is orange in color, and is holding her keys\nfriends(swordfish) = 4 easy_going_friends + 2 not_easy_going_friends\nhas(swordfish, card_with(orange_color)) = True\nhas(swordfish, keys) = True\n# The swordfish has a cutter\nhas(swordfish, cutter) = True\n# The turtle invented a time machine, and is named Luna\ninvented_time_machine(turtle) = True\nname(turtle, Luna) = True\n\n# Based on the game state and the rules and preferences, does the swordfish roll the dice for the sea bass?\nquestion = roll_dice(swordfish, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the turtle has a leafy green vegetable, then the turtle does not raise a flag of peace for the grasshopper\nRule2: The starfish does not remove from the board one of the pieces of the polar bear whenever at least one animal offers a job position to the lion\nRule3: If the sun bear has more than 7 friends, then the sun bear steals five of the points of the phoenix\nRule4: If at least one animal removes from the board one of the pieces of the whale, then the raven does not give a magnifying glass to the black bear\nRule5: The raven unquestionably gives a magnifying glass to the black bear, in the case where the salmon does not sing a victory song for the raven\nRule6: If something raises a peace flag for the doctorfish and sings a victory song for the panda bear, then it does not offer a job position to the lion\nRule7: If something does not give a magnifier to the black bear, then it offers a job position to the lion\nRule8: If the sun bear has a device to connect to the internet, then it does not steal five of the points of the phoenix\nRule9: If something does not steal five points from the phoenix, then it does not knock down the fortress of the starfish\nRule10: If the squid does not become an enemy of the kudu, then the kudu does not become an actual enemy of the starfish\nRule11: The kudu becomes an actual enemy of the starfish whenever at least one animal raises a peace flag for the grasshopper\nRule12: If something does not proceed to the spot right after the cat, then it raises a peace flag for the doctorfish\nRule13: If the turtle has a musical instrument, then it does not raise a flag of peace for the grasshopper\nRule14: The turtle unquestionably raises a peace flag for the grasshopper, in the case where the koala shows all her cards to the turtle.\n\nRule1 is preferred over Rule14\nRule10 is preferred over Rule11\nRule13 is preferred over Rule14\nRule5 is preferred over Rule4\nRule6 is preferred over Rule7\nRule8 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cheetah removes from the board one of the pieces of the whale\nThe koala shows all her cards to the turtle\nThe raven sings a victory song for the caterpillar but does not proceed to the spot right after the cat\nThe sun bear has a computer\nThe sun bear has fourteen friends\nThe turtle has a beer\n\nBased on the game state and the rules and preferences, does the starfish remove from the board one of the pieces of the polar bear?\nQuestion: Does the starfish remove from the board one of the pieces of the polar bear?",
        "idx": 271,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the turtle has a leafy green vegetable, then the turtle does not raise a flag of peace for the grasshopper\nrule1() = has(turtle, leafy_green_vegetable) => not raise_flag_of_peace(turtle, grasshopper)\n# Rule2: The starfish does not remove from the board one of the pieces of the polar bear whenever at least one animal offers a job position to the lion\nrule2() = offer_job_position(something, lion) => not remove(starfish, piece_of(polar_bear))\n# Rule3: If the sun bear has more than 7 friends, then the sun bear steals five of the points of the phoenix\nrule3() = friends(sun_bear) > 7 => steal_points(sun_bear, 5, phoenix)\n# Rule4: If at least one animal removes from the board one of the pieces of the whale, then the raven does not give a magnifying glass to the black bear\nrule4() = remove(something, piece_of(whale)) => not give_magnifying_glass(raven, black_bear)\n# Rule5: The raven unquestionably gives a magnifying glass to the black bear, in the case where the salmon does not sing a victory song for the raven\nrule5() = not sing_song(salmon, victory_song_for(raven)) => give_magnifying_glass(raven, black_bear)\n# Rule6: If you see that something raises a peace flag for the doctorfish and sings a victory song for the panda bear, what can you certainly conclude? You can conclude that it does not offer a job to the lion\nrule6(something) = raise_flag_of_peace(something, doctorfish) & sing_song(something, victory_song_for(panda_bear)) => not offer_job_position(something, lion)\n# Rule7: If you are positive that one of the animals does not give a magnifier to the black bear, you can be certain that it will offer a job position to the lion without a doubt\nrule7(something) = not give_magnifying_glass(something, black_bear) => offer_job_position(something, lion)\n# Rule8: Regarding the sun bear, if it has a device to connect to the internet, then we can conclude that it does not steal five of the points of the phoenix\nrule8() = has(sun_bear, device_to_connect_to_internet) => not steal_points(sun_bear, 5, phoenix)\n# Rule9: If something does not steal five points from the phoenix, then it does not knock down the fortress of the starfish\nrule9(something) = not steal_points(something, 5, phoenix) => not knock_down(fortress_of(starfish))\n# Rule10: If the squid does not become an enemy of the kudu, then the kudu does not become an actual enemy of the starfish\nrule10() = not enemy(squid, kudu) => not actual_enemy(kudu, starfish)\n# Rule11: The kudu becomes an actual enemy of the starfish whenever at least one animal raises a peace flag for the grasshopper\nrule11() = raise_flag_of_peace(something, grasshopper) => actual_enemy(kudu, starfish)\n# Rule12: If something does not proceed to the spot right after the cat, then it raises a peace flag for the doctorfish\nrule12(something) = not proceed(something, spot_right_after(spot_of(cat))) => raise_flag_of_peace(something, doctorfish)\n# Rule13: Regarding the turtle, if it has a musical instrument, then we can conclude that it does not raise a flag of peace for the grasshopper\nrule13() = has(turtle, musical_instrument) => not raise_flag_of_peace(turtle, grasshopper)\n# Rule14: The turtle unquestionably raises a peace flag for the grasshopper, in the case where the koala shows all her cards to the turtle.\nrule14() = show_all_cards(koala, turtle) => raise_flag_of_peace(turtle, grasshopper)\n# Rule1 is preferred over Rule14\norder(rule1) > order(rule14) = True\n# Rule10 is preferred over Rule11\norder(rule10) > order(rule11) = True\n# Rule13 is preferred over Rule14\norder(rule13) > order(rule14) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n# Rule8 is preferred over Rule3\norder(rule8) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cheetah removes from the board one of the pieces of the whale\nremove(cheetah, piece_of(whale)) = True\n# The koala shows all her cards to the turtle\nshow_all_cards(koala, turtle) = True\n# The raven sings a victory song for the caterpillar but does not proceed to the spot right after the cat\nsing_song(raven, victory_song_for(caterpillar)) = True\nnot proceed(raven, spot_right_after(spot_of(cat))) = True\n# The sun bear has a computer\nhas(sun_bear, computer) = True\n# The sun bear has fourteen friends\nfriends(sun_bear) = 14\n# The turtle has a beer\nhas(turtle, beer) = True\n\n# Based on the game state and the rules and preferences, does the starfish remove from the board one of the pieces of the polar bear?\nquestion = remove(starfish, piece_of(polar_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the aardvark has a card with a primary color, then the aardvark becomes an enemy of the parrot\nRule2: If something does not attack the green fields owned by the black bear and becomes an actual enemy of the parrot, then it does not show all its cards to the dog\nRule3: If the sea bass has a card with a color that starts with the letter \"l\", then it does not raise a flag of peace for the aardvark\nRule4: If one of the animals does not know the defense plan of the leopard, then it does not become an actual enemy of the parrot\nRule5: If the aardvark does not show all its cards to the dog, then the dog prepares armor for the kiwi\nRule6: If one of the animals does not steal five points from the cat, then it does not attack the green fields owned by the black bear\nRule7: If the sea bass has more than 4 friends, then it does not raise a flag of peace for the aardvark\nRule8: If the sea bass does not raise a flag of peace for the aardvark and the lion learns the basics of resource management from the aardvark, then the aardvark shows all its cards to the dog\nRule9: If the aardvark has something to carry apples and oranges, then it becomes an actual enemy of the parrot\n\nRule1 is preferred over Rule4\nRule8 is preferred over Rule2\nRule9 is preferred over Rule4\n\nThe current state of the game is as follows\nThe aardvark has a backpack\nThe aardvark has a card that is blue in color\nThe aardvark steals five points from the cat\nThe sea bass has 14 friends\nThe sea bass has a card that is blue in color\nThe aardvark does not know the defensive plans of the leopard\n\nBased on the game state and the rules and preferences, does the dog prepare armor for the kiwi?\nQuestion: Does the dog prepare armor for the kiwi?",
        "idx": 272,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the aardvark has a card with a primary color, then the aardvark becomes an enemy of the parrot\nrule1() = has(aardvark, card_with(primary_color)) => enemy(aardvark, parrot)\n# Rule2: If you see that something does not attack the green fields whose owner is the black bear but it becomes an actual enemy of the parrot, what can you certainly conclude? You can conclude that it is not going to show her cards (all of them) to the dog\nrule2(something) = not attack(green_fields_of(black_bear)) & enemy(something, parrot) => not show_cards(something, dog)\n# Rule3: Regarding the sea bass, if it has a card whose color starts with the letter \"l\", then we can conclude that it does not raise a flag of peace for the aardvark\nrule3() = color_starts_with(sea_bass, card, \"l\") => not raise_flag_of_peace(sea_bass, aardvark)\n# Rule4: If you are positive that one of the animals does not know the defense plan of the leopard, you can be certain that it will not become an actual enemy of the parrot\nrule4(something) = not knows(defense_plan_of(leopard), something) => not enemy(something, parrot)\n# Rule5: If the aardvark does not show all her cards to the dog, then the dog prepares armor for the kiwi\nrule5() = not show_cards(aardvark, dog) => prepare_armor(dog, kiwi)\n# Rule6: If you are positive that one of the animals does not steal five points from the cat, you can be certain that it will not attack the green fields whose owner is the black bear\nrule6(something) = not steals_points_from(something, cat, 5) => not attack(green_fields_of(black_bear))\n# Rule7: If the sea bass has more than 4 friends, then the sea bass does not raise a peace flag for the aardvark\nrule7() = friends(sea_bass) > 4 => not raise_flag_of_peace(sea_bass, aardvark)\n# Rule8: For the aardvark, if the belief is that the sea bass does not raise a flag of peace for the aardvark but the lion learns the basics of resource management from the aardvark, then you can add \"the aardvark shows her cards (all of them) to the dog\" to your conclusions\nrule8() = not raise_flag_of_peace(sea_bass, aardvark) & learn_basics_of_resource_management(lion, aardvark) => show_cards(aardvark, dog)\n# Rule9: Regarding the aardvark, if it has something to carry apples and oranges, then we can conclude that it becomes an actual enemy of the parrot.\nrule9() = has(aardvark, something_to_carry_apples_and_oranges) => enemy(aardvark, parrot)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule8 is preferred over Rule2\norder(rule8) > order(rule2) = True\n# Rule9 is preferred over Rule4\norder(rule9) > order(rule4) = True\n\n# The current state of the game is as follows\n# The aardvark has a backpack, has a card that is blue in color, and steals five points from the cat\nhas(aardvark, backpack) = True\nhas(aardvark, card_with(blue_color)) = True\nsteals_points_from(aardvark, cat, 5) = True\n# The sea bass has 14 friends\nfriends(sea_bass) = 14\n# The sea bass has a card that is blue in color\nhas(sea_bass, card_with(blue_color)) = True\n# The aardvark does not know the defensive plans of the leopard\nknows(defensive_plans_of(leopard), aardvark) = False\n\n# Based on the game state and the rules and preferences, does the dog prepare armor for the kiwi?\nquestion = prepare_armor(dog, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the salmon owns a luxury aircraft, then it does not learn elementary resource management from the squid\nRule2: If the name of the salmon starts with the same letter as the name of the sheep, then the salmon does not learn the basics of resource management from the squid\nRule3: If the hare becomes an actual enemy of the salmon and the kangaroo does not steal five points from the salmon, then the salmon does not show all her cards to the leopard\nRule4: If the salmon has something to carry apples and oranges, then it learns elementary resource management from the squid\nRule5: If the salmon has fewer than five friends, then it steals five points from the kudu\nRule6: If the salmon has a sharp object, then it shows all her cards to the leopard\nRule7: The tiger proceeds to the spot right after the panda bear whenever at least one animal raises a peace flag for the eel\nRule8: If the salmon has something to carry apples and oranges, then it shows all her cards to the leopard\nRule9: If the cheetah does not need the support of the salmon, then the salmon does not steal five points from the kudu\nRule10: If the salmon has a card with a color that appears in the flag of France, then it steals five points from the kudu\nRule11: If an animal steals five points from the kudu, then it raises a peace flag for the eel\n\nRule10 is preferred over Rule9\nRule3 is preferred over Rule6\nRule3 is preferred over Rule8\nRule4 is preferred over Rule1\nRule4 is preferred over Rule2\nRule5 is preferred over Rule9\n\nThe current state of the game is as follows\nThe salmon dreamed of a luxury aircraft\nThe salmon is named Charlie\nThe salmon has a card that is blue in color\nThe salmon has a cutter\nThe salmon has thirteen friends\nThe salmon has some romaine lettuce\nThe sheep is named Cinnamon\nThe cheetah does not need support from the salmon\nThe kangaroo does not steal five points from the salmon\n\nBased on the game state and the rules and preferences, does the tiger proceed to the spot right after the panda bear?\nQuestion: Does the tiger proceed to the spot right after the panda bear?",
        "idx": 273,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the salmon, if it owns a luxury aircraft, then we can conclude that it does not learn elementary resource management from the squid\nrule1() = owns(salmon, luxury_aircraft) => not learn_elementary_resource_management(salmon, squid)\n# Rule2: Regarding the salmon, if it has a name whose first letter is the same as the first letter of the sheep's name, then we can conclude that it does not learn the basics of resource management from the squid\nrule2() = first_letter_of(name(salmon)) == first_letter_of(name(sheep)) => not learn_basics_of_resource_management(salmon, squid)\n# Rule3: For the salmon, if the belief is that the hare becomes an actual enemy of the salmon and the kangaroo does not steal five points from the salmon, then you can add \"the salmon does not show her cards (all of them) to the leopard\" to your conclusions\nrule3() = becomes_actual_enemy(hare, salmon) & not steal_points(kangaroo, 5, salmon) => not show_cards(salmon, leopard)\n# Rule4: If the salmon has something to carry apples and oranges, then the salmon learns elementary resource management from the squid\nrule4() = has(salmon, carry_apples_and_oranges) => learn_elementary_resource_management(salmon, squid)\n# Rule5: Regarding the salmon, if it has fewer than five friends, then we can conclude that it steals five of the points of the kudu\nrule5() = friends(salmon) < 5 => steal_points(salmon, 5, kudu)\n# Rule6: Regarding the salmon, if it has a sharp object, then we can conclude that it shows all her cards to the leopard\nrule6() = has(salmon, sharp_object) => show_cards(salmon, leopard)\n# Rule7: The tiger proceeds to the spot right after the panda bear whenever at least one animal raises a flag of peace for the eel\nrule7() = raise_flag_of_peace(something, eel) => proceed(tiger, spot_right_after(spot_of(panda_bear)))\n# Rule8: If the salmon has something to carry apples and oranges, then the salmon shows all her cards to the leopard\nrule8() = has(salmon, carry_apples_and_oranges) => show_cards(salmon, leopard)\n# Rule9: The salmon will not steal five of the points of the kudu, in the case where the cheetah does not need the support of the salmon\nrule9() = not need_support(cheetah, salmon) => not steal_points(salmon, 5, kudu)\n# Rule10: Regarding the salmon, if it has a card whose color appears in the flag of France, then we can conclude that it steals five of the points of the kudu\nrule10() = has(salmon, card_with(color_in_flag_of_france)) => steal_points(salmon, 5, kudu)\n# Rule11: If you are positive that you saw one of the animals steals five of the points of the kudu, you can be certain that it will also raise a peace flag for the eel.\nrule11() = steal_points(something, 5, kudu) => raise_flag_of_peace(something, eel)\n# Rule10 is preferred over Rule9\norder(rule10) > order(rule9) = True\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n# Rule3 is preferred over Rule8\norder(rule3) > order(rule8) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule5 is preferred over Rule9\norder(rule5) > order(rule9) = True\n\n# The current state of the game is as follows\n# The salmon dreamed of a luxury aircraft, and is named Charlie\ndreamed(salmon, luxury_aircraft) = True\nname(salmon, Charlie) = True\n# The salmon has a card that is blue in color, has a cutter, and has thirteen friends\nhas(salmon, card_with(blue_color)) = True\nhas(salmon, cutter) = True\nfriends(salmon) = 13\n# The salmon has some romaine lettuce\nhas(salmon, romaine_lettuce) = True\n# The sheep is named Cinnamon\nname(sheep, Cinnamon) = True\n# The cheetah does not need support from the salmon\nnot need_support(cheetah, salmon) = True\n# The kangaroo does not steal five points from the salmon\nnot steal_points(kangaroo, 5, salmon) = True\n\n# Based on the game state and the rules and preferences, does the tiger proceed to the spot right after the panda bear?\nquestion = proceed(tiger, spot_right_after(spot_of(panda_bear)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion rolls the dice for the tilapia and the kudu does not roll the dice for the tilapia, then the tilapia will never proceed to the spot right after the sea bass\nRule2: If something does not know the defensive plans of the squid but learns elementary resource management from the panda bear, then it also rolls the dice for the tilapia\nRule3: If the kudu has something to sit on, then it becomes an enemy of the wolverine\nRule4: If the kudu has a name whose first letter is the same as the first letter of the wolverine's name, then the kudu does not become an enemy of the wolverine\nRule5: If something winks at the raven, then it also learns elementary resource management from the panda bear\nRule6: If one of the animals becomes an actual enemy of the wolverine, then it will not roll the dice for the tilapia\nRule7: If something does not hold an equal number of points as the ferret, then it does not know the defense plan of the squid\nRule8: If one of the animals owes money to the panther, then it will not show all her cards to the kudu\nRule9: The lion does not learn elementary resource management from the panda bear whenever one of the animals removes one of the pieces of the caterpillar\nRule10: If the kudu has a card whose color starts with the letter \"i\", then it becomes an enemy of the wolverine\nRule11: If the cricket has something to carry apples and oranges, then it shows all her cards to the kudu\n\nRule10 is preferred over Rule4\nRule11 is preferred over Rule8\nRule3 is preferred over Rule4\nRule5 is preferred over Rule9\n\nThe current state of the game is as follows\nThe cricket owes money to the panther\nThe kudu has a card that is indigo in color\nThe kudu is named Mojo\nThe kudu has a computer\nThe lion has a blade, struggles to find food, winks at the raven, and does not hold the same number of points as the ferret\nThe penguin removes from the board one of the pieces of the caterpillar\nThe wolverine is named Max\n\nBased on the game state and the rules and preferences, does the tilapia proceed to the spot right after the sea bass?\nQuestion: Does the tilapia proceed to the spot right after the sea bass?",
        "idx": 274,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lion rolls the dice for the tilapia and the kudu does not roll the dice for the tilapia, then the tilapia will never proceed to the spot right after the sea bass\nrule1() = roll_dice(lion, tilapia) & not roll_dice(kudu, tilapia) => never_proceed(tilapia, spot_right_after(sea_bass))\n# Rule2: If you see that something does not know the defensive plans of the squid but it learns elementary resource management from the panda bear, what can you certainly conclude? You can conclude that it also rolls the dice for the tilapia\nrule2(something) = not knows(defensive_plans_of(squid), something) & learn_elementary_resource_management(something, panda_bear) => roll_dice(something, tilapia)\n# Rule3: If the kudu has something to sit on, then the kudu becomes an enemy of the wolverine\nrule3() = has(kudu, something_to_sit_on) => enemy(kudu, wolverine)\n# Rule4: If the kudu has a name whose first letter is the same as the first letter of the wolverine's name, then the kudu does not become an enemy of the wolverine\nrule4() = first_letter_of(name(kudu)) == first_letter_of(name(wolverine)) => not enemy(kudu, wolverine)\n# Rule5: If something winks at the raven, then it learns elementary resource management from the panda bear, too\nrule5(something) = wink(something, raven) => learn_elementary_resource_management(something, panda_bear)\n# Rule6: If you are positive that you saw one of the animals becomes an actual enemy of the wolverine, you can be certain that it will not roll the dice for the tilapia\nrule6(something) = actual_enemy(something, wolverine) => not roll_dice(something, tilapia)\n# Rule7: If something does not hold an equal number of points as the ferret, then it does not know the defense plan of the squid\nrule7(something) = not equal_points(something, ferret) => not knows(defense_plan_of(squid), something)\n# Rule8: If you are positive that you saw one of the animals owes $$$ to the panther, you can be certain that it will not show her cards (all of them) to the kudu\nrule8(something) = owes_money_to(something, panther) => not show_cards(something, kudu)\n# Rule9: The lion does not learn elementary resource management from the panda bear whenever at least one animal removes one of the pieces of the caterpillar\nrule9() = remove(something, piece_of(caterpillar)) => not learn_elementary_resource_management(lion, panda_bear)\n# Rule10: Regarding the kudu, if it has a card whose color starts with the letter \"i\", then we can conclude that it becomes an enemy of the wolverine\nrule10() = has(kudu, card_with(color_starting_with(\"i\"))) => enemy(kudu, wolverine)\n# Rule11: If the cricket has something to carry apples and oranges, then the cricket shows all her cards to the kudu.\nrule11() = has(cricket, something_to_carry_apples_and_oranges) => show_cards(cricket, kudu)\n# Rule10 is preferred over Rule4\norder(rule10) > order(rule4) = True\n# Rule11 is preferred over Rule8\norder(rule11) > order(rule8) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule5 is preferred over Rule9\norder(rule5) > order(rule9) = True\n\n# The current state of the game is as follows\n# The cricket owes money to the panther\nowes_money_to(cricket, panther) = True\n# The kudu has a card that is indigo in color, and is named Mojo\nhas(kudu, card_with(indigo_color)) = True\nname(kudu, Mojo) = True\n# The kudu has a computer\nhas(kudu, computer) = True\n# The lion has a blade, struggles to find food, winks at the raven, and does not hold the same number of points as the ferret\nhas(lion, blade) = True\nstruggles_to_find_food(lion) = True\nwink(lion, raven) = True\nnot equal_points(lion, ferret) = True\n# The penguin removes from the board one of the pieces of the caterpillar\nremove(penguin, piece_of(caterpillar)) = True\n# The wolverine is named Max\nname(wolverine, Max) = True\n\n# Based on the game state and the rules and preferences, does the tilapia proceed to the spot right after the sea bass?\nquestion = proceed(tilapia, spot_right_after(sea_bass))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal proceeds to the spot that is right after the spot of the moose, then the crocodile does not owe money to the lobster\nRule2: If something does not owe money to the lobster and also does not attack the green fields of the hummingbird, then it rolls the dice for the halibut\nRule3: The grizzly bear knows the defensive plans of the elephant whenever at least one animal rolls the dice for the halibut\nRule4: The crocodile attacks the green fields whose owner is the hummingbird whenever at least one animal knocks down the fortress that belongs to the panda bear\nRule5: If the crocodile has a name whose first letter is the same as the first letter of the tilapia's name, then the crocodile does not attack the green fields of the hummingbird\nRule6: If the crocodile has a sharp object, then it does not attack the green fields whose owner is the hummingbird\n\nRule5 is preferred over Rule4\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe crocodile has a beer\nThe crocodile is named Charlie\nThe rabbit sings a victory song for the moose\nThe tilapia is named Charlie\n\nBased on the game state and the rules and preferences, does the grizzly bear know the defensive plans of the elephant?\nQuestion: Does the grizzly bear know the defensive plans of the elephant?",
        "idx": 275,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal proceeds to the spot that is right after the spot of the moose, then the crocodile does not owe money to the lobster\nrule1() = proceed_to_spot_right_after(spot_of(moose), something) => not owe_money_to(crocodile, lobster)\n# Rule2: If you see that something does not owe $$$ to the lobster and also does not attack the green fields of the hummingbird, what can you certainly conclude? You can conclude that it also rolls the dice for the halibut\nrule2(something) = not owe_money_to(something, lobster) & not attack_green_fields(something, hummingbird) => roll_dice(something, halibut)\n# Rule3: The grizzly bear knows the defensive plans of the elephant whenever at least one animal rolls the dice for the halibut\nrule3() = roll_dice(something, halibut) => knows_defensive_plans(grizzly_bear, elephant)\n# Rule4: The crocodile attacks the green fields whose owner is the hummingbird whenever at least one animal knocks down the fortress that belongs to the panda bear\nrule4() = knock_down_fortress(something, fortress_of(panda_bear)) => attack_green_fields(crocodile, hummingbird)\n# Rule5: If the crocodile has a name whose first letter is the same as the first letter of the tilapia's name, then the crocodile does not attack the green fields of the hummingbird\nrule5() = first_letter_of(name(crocodile)) == first_letter_of(name(tilapia)) => not attack_green_fields(crocodile, hummingbird)\n# Rule6: Regarding the crocodile, if it has a sharp object, then we can conclude that it does not attack the green fields whose owner is the hummingbird.\nrule6() = has(crocodile, sharp_object) => not attack_green_fields(crocodile, hummingbird)\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The crocodile has a beer, and is named Charlie\nhas(crocodile, beer) = True\nname(crocodile, Charlie) = True\n# The rabbit sings a victory song for the moose\nsing_song(rabbit, victory_song_for(moose)) = True\n# The tilapia is named Charlie\nname(tilapia, Charlie) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear know the defensive plans of the elephant?\nquestion = knows_defensive_plans(grizzly_bear, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cheetah is a fan of Chris Ronaldo, then it knocks down the fortress that belongs to the sun bear\nRule2: Be careful when something does not knock down the fortress that belongs to the whale but respects the moose because in this case it will, surely, attack the green fields whose owner is the snail\nRule3: If the cheetah has a name whose first letter is the same as the first letter of the kangaroo's name, then the cheetah knocks down the fortress of the sun bear\nRule4: If something does not offer a job to the sun bear, then it does not prepare armor for the hippopotamus\nRule5: If the viperfish has a leafy green vegetable, then the viperfish knocks down the fortress that belongs to the kiwi\nRule6: If one of the animals does not become an actual enemy of the koala, then it will not knock down the fortress that belongs to the whale\nRule7: If the viperfish has a card with a primary color, then it knocks down the fortress of the kiwi\nRule8: If the catfish has a name whose first letter is the same as the first letter of the leopard's name, then the catfish respects the moose\nRule9: The cheetah learns the basics of resource management from the snail whenever at least one animal knocks down the fortress of the kiwi\nRule10: If the cheetah learns elementary resource management from the snail and the catfish attacks the green fields whose owner is the snail, then the snail prepares armor for the hippopotamus\nRule11: If the catfish has a card whose color starts with the letter \"w\", then the catfish respects the moose\nRule12: The goldfish steals five points from the catfish in the case where the eagle owes money to the goldfish\nRule13: If the cheetah has a card whose color is one of the rainbow colors, then it does not knock down the fortress of the sun bear\n\nRule1 is preferred over Rule13\nRule3 is preferred over Rule13\nRule4 is preferred over Rule10\n\nThe current state of the game is as follows\nThe catfish has a card that is white in color\nThe catfish is named Chickpea\nThe cheetah has 1 friend that is bald and nine friends that are not, has a card that is black in color, and is named Luna\nThe cheetah supports Chris Ronaldo\nThe eagle owes money to the goldfish\nThe kangaroo is named Milo\nThe leopard is named Max\nThe phoenix removes one of the pieces of the whale\nThe viperfish has a card that is green in color and has a guitar\nThe catfish does not become an enemy of the koala\n\nBased on the game state and the rules and preferences, does the snail prepare armor for the hippopotamus?\nQuestion: Does the snail prepare armor for the hippopotamus?",
        "idx": 276,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cheetah, if it is a fan of Chris Ronaldo, then we can conclude that it knocks down the fortress that belongs to the sun bear\nrule1() = supports(cheetah, Chris_Ronaldo) => knock_down(cheetah, fortress_of(sun_bear))\n# Rule2: Be careful when something does not knock down the fortress that belongs to the whale but respects the moose because in this case it will, surely, attack the green fields whose owner is the snail (this may or may not be problematic)\nrule2(something) = not knock_down(something, fortress_of(whale)) & respects(something, moose) => attack(something, green_fields_of(snail))\n# Rule3: If the cheetah has a name whose first letter is the same as the first letter of the kangaroo's name, then the cheetah knocks down the fortress of the sun bear\nrule3() = first_letter_of(name(cheetah)) == first_letter_of(name(kangaroo)) => knock_down(cheetah, fortress_of(sun_bear))\n# Rule4: If something does not offer a job to the sun bear, then it does not prepare armor for the hippopotamus\nrule4(something) = not offer_job(something, sun_bear) => not prepare_armor(something, hippopotamus)\n# Rule5: If the viperfish has a leafy green vegetable, then the viperfish knocks down the fortress that belongs to the kiwi\nrule5() = has(viperfish, leafy_green_vegetable) => knock_down(viperfish, fortress_of(kiwi))\n# Rule6: If you are positive that one of the animals does not become an actual enemy of the koala, you can be certain that it will not knock down the fortress that belongs to the whale\nrule6(something) = not enemy(something, koala) => not knock_down(something, fortress_of(whale))\n# Rule7: Regarding the viperfish, if it has a card with a primary color, then we can conclude that it knocks down the fortress of the kiwi\nrule7() = has(viperfish, card_with(primary_color)) => knock_down(viperfish, fortress_of(kiwi))\n# Rule8: If the catfish has a name whose first letter is the same as the first letter of the leopard's name, then the catfish respects the moose\nrule8() = first_letter_of(name(catfish)) == first_letter_of(name(leopard)) => respects(catfish, moose)\n# Rule9: The cheetah learns the basics of resource management from the snail whenever at least one animal knocks down the fortress of the kiwi\nrule9() = knock_down(animal, fortress_of(kiwi)) => learn_basics_of_resource_management(cheetah, snail)\n# Rule10: For the snail, if the belief is that the cheetah learns elementary resource management from the snail and the catfish attacks the green fields whose owner is the snail, then you can add \"the snail prepares armor for the hippopotamus\" to your conclusions\nrule10() = learn_elementary_resource_management(cheetah, snail) & attack(catfish, green_fields_of(snail)) => prepare_armor(snail, hippopotamus)\n# Rule11: If the catfish has a card whose color starts with the letter \"w\", then the catfish respects the moose\nrule11() = has(catfish, card_with(color_starting_with(\"w\"))) => respects(catfish, moose)\n# Rule12: The goldfish unquestionably steals five of the points of the catfish, in the case where the eagle owes $$$ to the goldfish\nrule12() = owes_money_to(eagle, goldfish) => steal_points(goldfish, 5, catfish)\n# Rule13: Regarding the cheetah, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not knock down the fortress of the sun bear.\nrule13() = has(cheetah, card_with(color_in(rainbow_colors))) => not knock_down(cheetah, fortress_of(sun_bear))\n# Rule1 is preferred over Rule13\norder(rule1) > order(rule13) = True\n# Rule3 is preferred over Rule13\norder(rule3) > order(rule13) = True\n# Rule4 is preferred over Rule10\norder(rule4) > order(rule10) = True\n\n# The current state of the game is as follows\n# The catfish has a card that is white in color, and is named Chickpea\nhas(catfish, card_with(white_color)) = True\nname(catfish, Chickpea) = True\n# The cheetah has 1 friend that is bald and nine friends that are not, has a card that is black in color, and is named Luna\nhas(cheetah, friend(bald)) = True\nhas(cheetah, friend(not_bald)) = 9\nhas(cheetah, card_with(black_color)) = True\nname(cheetah, Luna) = True\n# The cheetah supports Chris Ronaldo\nsupports(cheetah, Chris_Ronaldo) = True\n# The eagle owes money to the goldfish\nowes_money_to(eagle, goldfish) = True\n# The kangaroo is named Milo\nname(kangaroo, Milo) = True\n# The leopard is named Max\nname(leopard, Max) = True\n# The phoenix removes from the board one of the pieces of the whale\nremove(phoenix, piece_of(whale)) = True\n# The viperfish has a card that is green in color, and has a guitar\nhas(viperfish, card_with(green_color)) = True\nhas(viperfish, guitar) = True\n# The catfish does not become an enemy of the koala\nnot enemy(catfish, koala) = True\n\n# Based on the game state and the rules and preferences, does the snail prepare armor for the hippopotamus?\nquestion = prepare_armor(snail, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal owes money to the kudu, then the kiwi does not show all her cards to the zander\nRule2: If the mosquito has fewer than sixteen friends, then it attacks the green fields of the koala\nRule3: If one of the animals does not respect the kangaroo, then it does not attack the green fields owned by the koala\nRule4: If the mosquito has a leafy green vegetable, then it attacks the green fields owned by the koala\nRule5: If the kangaroo has more than 10 friends, then it does not learn elementary resource management from the koala\nRule6: If the kangaroo has a name whose first letter is the same as the first letter of the starfish's name, then it does not learn the basics of resource management from the koala\nRule7: If the mosquito attacks the green fields of the koala and the kangaroo does not learn elementary resource management from the koala, then the koala owes money to the kudu\n\nRule3 is preferred over Rule2\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe kangaroo has 20 friends\nThe kangaroo is named Tarzan\nThe kangaroo shows all her cards to the cockroach\nThe mosquito has a club chair\nThe mosquito has six friends\nThe starfish is named Blossom\n\nBased on the game state and the rules and preferences, does the kiwi show all her cards to the zander?\nQuestion: Does the kiwi show all her cards to the zander?",
        "idx": 277,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal owes money to the kudu, then the kiwi does not show her cards (all of them) to the zander\nrule1() = owes_money_to(something, kudu) => not show_cards(kiwi, zander)\n# Rule2: Regarding the mosquito, if it has fewer than sixteen friends, then we can conclude that it attacks the green fields of the koala\nrule2() = friends(mosquito) < 16 => attack_green_fields(mosquito, koala)\n# Rule3: If you are positive that one of the animals does not respect the kangaroo, you can be certain that it will not attack the green fields whose owner is the koala\nrule3(something) = not respects(something, kangaroo) => not attack_green_fields(something, koala)\n# Rule4: If the mosquito has a leafy green vegetable, then the mosquito attacks the green fields whose owner is the koala\nrule4() = has(mosquito, leafy_green_vegetable) => attack_green_fields(mosquito, koala)\n# Rule5: Regarding the kangaroo, if it has more than 10 friends, then we can conclude that it does not learn elementary resource management from the koala\nrule5() = friends(kangaroo) > 10 => not learn_elementary_resource_management(kangaroo, koala)\n# Rule6: If the kangaroo has a name whose first letter is the same as the first letter of the starfish's name, then the kangaroo does not learn the basics of resource management from the koala\nrule6() = first_letter_of(name(kangaroo)) == first_letter_of(name(starfish)) => not learn_basics_of_resource_management(kangaroo, koala)\n# Rule7: If the mosquito attacks the green fields of the koala and the kangaroo does not learn elementary resource management from the koala, then, inevitably, the koala owes $$$ to the kudu.\nrule7() = attack_green_fields(mosquito, koala) & not learn_elementary_resource_management(kangaroo, koala) => owes_money_to(koala, kudu)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The kangaroo has 20 friends, is named Tarzan, and shows all her cards to the cockroach\nfriends(kangaroo) = 20\nname(kangaroo, Tarzan) = True\nshow_cards(kangaroo, cockroach) = True\n# The mosquito has a club chair, and has six friends\nhas(mosquito, club_chair) = True\nfriends(mosquito) = 6\n# The starfish is named Blossom\nname(starfish, Blossom) = True\n\n# Based on the game state and the rules and preferences, does the kiwi show all her cards to the zander?\nquestion = show_cards(kiwi, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the spider has a musical instrument, then the spider burns the warehouse that is in possession of the buffalo\nRule2: If you see that one of the animals attacks the green fields of the panther, then you can be certain that it will also roll the dice for the hippopotamus\nRule3: If you see that something does not eat the food that belongs to the bat but it rolls the dice for the hippopotamus, then you can conclude that it also respects the elephant\nRule4: If the spider winks at the buffalo, then the buffalo does not eat the food that belongs to the bat\nRule5: If the spider has a card with a primary color, then the spider burns the warehouse that is in possession of the buffalo\nRule6: If the buffalo created a time machine, then the buffalo attacks the green fields owned by the panther\nRule7: If the spider does not have her keys, then the spider does not burn the warehouse of the buffalo\n\nRule1 is preferred over Rule7\nRule5 is preferred over Rule7\n\nThe current state of the game is as follows\nThe buffalo has a harmonica\nThe buffalo is named Peddi\nThe buffalo invented a time machine\nThe dog is named Casper\nThe spider has a card that is blue in color\nThe spider has a cutter\nThe spider has a knapsack\nThe spider lost her keys\n\nBased on the game state and the rules and preferences, does the buffalo respect the elephant?\nQuestion: Does the buffalo respect the elephant?",
        "idx": 278,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the spider has a musical instrument, then the spider burns the warehouse that is in possession of the buffalo\nrule1() = has(spider, musical_instrument) => burn(warehouse_of(buffalo))\n# Rule2: If you are positive that you saw one of the animals attacks the green fields of the panther, you can be certain that it will also roll the dice for the hippopotamus\nrule2(something) = attacks(something, green_fields_of(panther)) => roll_dice(something, hippopotamus)\n# Rule3: If you see that something does not eat the food that belongs to the bat but it rolls the dice for the hippopotamus, what can you certainly conclude? You can conclude that it also respects the elephant\nrule3(something) = not eat_food(something, food_of(bat)) & roll_dice(something, hippopotamus) => respects(something, elephant)\n# Rule4: The buffalo does not eat the food that belongs to the bat, in the case where the spider winks at the buffalo\nrule4() = wink(spider, buffalo) => not eat_food(buffalo, food_of(bat))\n# Rule5: If the spider has a card with a primary color, then the spider burns the warehouse that is in possession of the buffalo\nrule5() = has(spider, card_with(primary_color)) => burn(warehouse_of(buffalo))\n# Rule6: If the buffalo created a time machine, then the buffalo attacks the green fields whose owner is the panther\nrule6() = created_time_machine(buffalo) => attacks(buffalo, green_fields_of(panther))\n# Rule7: If the spider does not have her keys, then the spider does not burn the warehouse of the buffalo.\nrule7() = not has(spider, keys) => not burn(warehouse_of(buffalo))\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule5 is preferred over Rule7\norder(rule5) > order(rule7) = True\n\n# The current state of the game is as follows\n# The buffalo has a harmonica, and is named Peddi\nhas(buffalo, harmonica) = True\nname(buffalo, Peddi) = True\n# The buffalo invented a time machine\ncreated_time_machine(buffalo) = True\n# The dog is named Casper\nname(dog, Casper) = True\n# The spider has a card that is blue in color, has a cutter, and has a knapsack\nhas(spider, card_with(blue_color)) = True\nhas(spider, cutter) = True\nhas(spider, knapsack) = True\n# The spider lost her keys\nnot has(spider, keys) = True\n\n# Based on the game state and the rules and preferences, does the buffalo respect the elephant?\nquestion = respects(buffalo, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squid holds an equal number of points as the hummingbird, then the hummingbird removes one of the pieces of the lobster\nRule2: If the doctorfish offers a job position to the hummingbird, then the hummingbird does not remove one of the pieces of the lobster\nRule3: If at least one animal steals five points from the jellyfish, then the hummingbird attacks the green fields of the snail\nRule4: If the penguin winks at the doctorfish, then the doctorfish offers a job position to the hummingbird\nRule5: If something does not remove one of the pieces of the lobster and also does not eat the food of the mosquito, then it learns the basics of resource management from the amberjack\nRule6: If something attacks the green fields whose owner is the snail, then it does not eat the food that belongs to the mosquito\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe grizzly bear steals five points from the jellyfish\nThe hummingbird has a card that is indigo in color and has a knife\nThe penguin winks at the doctorfish\n\nBased on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the amberjack?\nQuestion: Does the hummingbird learn the basics of resource management from the amberjack?",
        "idx": 279,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squid holds an equal number of points as the hummingbird, then the hummingbird removes one of the pieces of the lobster\nrule1() = points(squid) == points(hummingbird) => remove(hummingbird, piece_of(lobster))\n# Rule2: The hummingbird does not remove from the board one of the pieces of the lobster, in the case where the doctorfish offers a job position to the hummingbird\nrule2() = offer_job_position(doctorfish, hummingbird) => not remove(hummingbird, piece_of(lobster))\n# Rule3: If at least one animal steals five of the points of the jellyfish, then the hummingbird attacks the green fields of the snail\nrule3() = steals_points(something, jellyfish, 5) => attack(hummingbird, green_fields_of(snail))\n# Rule4: The doctorfish unquestionably offers a job position to the hummingbird, in the case where the penguin winks at the doctorfish\nrule4() = wink(penguin, doctorfish) => offer_job_position(doctorfish, hummingbird)\n# Rule5: Be careful when something does not remove one of the pieces of the lobster and also does not eat the food of the mosquito because in this case it will surely learn the basics of resource management from the amberjack (this may or may not be problematic)\nrule5(something) = not remove(something, piece_of(lobster)) & not eat_food(something, food_of(mosquito)) => learn_basics_of_resource_management(something, amberjack)\n# Rule6: If you are positive that you saw one of the animals attacks the green fields whose owner is the snail, you can be certain that it will not eat the food that belongs to the mosquito.\nrule6(something) = attack(something, green_fields_of(snail)) => not eat_food(something, food_of(mosquito))\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The grizzly bear steals five points from the jellyfish\nsteals_points(grizzly_bear, jellyfish, 5) = True\n# The hummingbird has a card that is indigo in color, and has a knife\nhas(hummingbird, card_with(indigo_color)) = True\nhas(hummingbird, knife) = True\n# The penguin winks at the doctorfish\nwink(penguin, doctorfish) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the amberjack?\nquestion = learn_basics_of_resource_management(hummingbird, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the meerkat burns the warehouse of the blobfish and the lobster eats the food of the blobfish, then the blobfish gives a magnifier to the elephant\nRule2: If the blobfish gives a magnifying glass to the elephant, then the elephant does not attack the green fields owned by the sheep\nRule3: If something rolls the dice for the cow and shows all their cards to the phoenix, then they do not give a magnifying glass to the elephant\nRule4: If something owes money to the koala, then they also roll the dice for the cow\nRule5: If the meerkat is a fan of Chris Ronaldo, then the meerkat burns the warehouse of the blobfish\nRule6: If the lobster has a musical instrument, then it eats the food of the blobfish\nRule7: If the meerkat has a card with a color from the rainbow, then the meerkat burns the warehouse of the blobfish\nRule8: If something prepares armor for the hummingbird, then they also show all their cards to the phoenix\nRule9: If the halibut needs the support of the blobfish, then the blobfish does not show all their cards to the phoenix\nRule10: If the lobster does not have their keys, then it eats the food of the blobfish\n\nRule1 is preferred over Rule3\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe blobfish owes money to the koala\nThe blobfish prepares armor for the hummingbird\nThe lobster has romaine lettuce\nThe lobster lost their keys\nThe meerkat has a card with red color\nThe meerkat hates Chris Ronaldo\n\nBased on the game state and the rules and preferences, does the elephant attack the green fields owned by the sheep?\nQuestion: Does the elephant attack the green fields owned by the sheep?",
        "idx": 280,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the meerkat burns the warehouse that is in possession of the blobfish and the lobster eats the food of the blobfish, then the blobfish gives a magnifier to the elephant\nrule1() = burn(warehouse_of(blobfish), meerkat) & eat_food(lobster, blobfish) => give_magnifier(blobfish, elephant)\n# Rule2: If the blobfish gives a magnifying glass to the elephant, then the elephant is not going to attack the green fields of the sheep\nrule2() = give_magnifying_glass(blobfish, elephant) => not attack_green_fields(elephant, sheep)\n# Rule3: If you see that something rolls the dice for the cow and shows her cards (all of them) to the phoenix, what can you certainly conclude? You can conclude that it does not give a magnifying glass to the elephant\nrule3(something) = roll_dice_for(something, cow) & show_cards(something, phoenix) => not give_magnifying_glass(something, elephant)\n# Rule4: If something owes $$$ to the koala, then it rolls the dice for the cow, too\nrule4(something) = owes_money_to(something, koala) => roll_dice_for(something, cow)\n# Rule5: If the meerkat is a fan of Chris Ronaldo, then the meerkat burns the warehouse of the blobfish\nrule5() = fan_of(meerkat, Chris_Ronaldo) => burn(warehouse_of(blobfish), meerkat)\n# Rule6: Regarding the lobster, if it has a musical instrument, then we can conclude that it eats the food of the blobfish\nrule6() = has(lobster, musical_instrument) => eat_food(lobster, blobfish)\n# Rule7: Regarding the meerkat, if it has a card whose color is one of the rainbow colors, then we can conclude that it burns the warehouse that is in possession of the blobfish\nrule7() = has(meerkat, card_with(rainbow_color)) => burn(warehouse_of(blobfish), meerkat)\n# Rule8: If something prepares armor for the hummingbird, then it shows all her cards to the phoenix, too\nrule8(something) = prepare_armor(something, hummingbird) => show_cards(something, phoenix)\n# Rule9: The blobfish does not show all her cards to the phoenix, in the case where the halibut needs the support of the blobfish\nrule9() = needs_support(halibut, blobfish) => not show_cards(blobfish, phoenix)\n# Rule10: Regarding the lobster, if it does not have her keys, then we can conclude that it eats the food of the blobfish.\nrule10() = not has(lobster, keys) => eat_food(lobster, blobfish)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The blobfish owes money to the koala\nowes_money_to(blobfish, koala) = True\n# The blobfish prepares armor for the hummingbird\nprepare_armor(blobfish, hummingbird) = True\n# The lobster has some romaine lettuce\nhas(lobster, romaine_lettuce) = True\n# The lobster lost her keys\nnot has(lobster, keys) = True\n# The meerkat has a card that is red in color\nhas(meerkat, card_with(red_color)) = True\n# The meerkat hates Chris Ronaldo\nhates(meerkat, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the elephant attack the green fields whose owner is the sheep?\nquestion = attack_green_fields(elephant, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the zander raises a flag of peace for the cheetah, then the cheetah does not knock down the fortress of the kangaroo\nRule2: If the octopus has more than seven friends, then the octopus does not prepare armor for the snail\nRule3: The cheetah knocks down the fortress of the kangaroo, in the case where the snail eats the food that belongs to the cheetah\nRule4: The octopus prepares armor for the snail, in the case where the tiger does not steal five points from the octopus\nRule5: If at least one animal winks at the lion, then the meerkat does not give a magnifier to the snail\nRule6: The snail does not eat the food that belongs to the cheetah whenever at least one animal gives a magnifying glass to the swordfish\nRule7: If the octopus does not prepare armor for the snail and the meerkat does not give a magnifying glass to the snail, then the snail eats the food of the cheetah.\n\nRule3 is preferred over Rule1\nRule4 is preferred over Rule2\nRule7 is preferred over Rule6\n\nThe current state of the game is as follows\nThe meerkat has six friends\nThe octopus has fourteen friends\nThe cat does not wink at the lion\n\nBased on the game state and the rules and preferences, does the cheetah knock down the fortress of the kangaroo?\nQuestion: Does the cheetah knock down the fortress of the kangaroo?",
        "idx": 281,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the zander raises a flag of peace for the cheetah, then the cheetah is not going to knock down the fortress of the kangaroo\nrule1() = raise_flag_of_peace(zander, cheetah) => not knock_down_fortress(cheetah, kangaroo)\n# Rule2: If the octopus has more than seven friends, then the octopus does not prepare armor for the snail\nrule2() = friends(octopus) > 7 => not prepare_armor(octopus, snail)\n# Rule3: The cheetah unquestionably knocks down the fortress of the kangaroo, in the case where the snail eats the food that belongs to the cheetah\nrule3() = eat_food(snail, food_of(cheetah)) => knock_down_fortress(cheetah, kangaroo)\n# Rule4: The octopus unquestionably prepares armor for the snail, in the case where the tiger does not steal five points from the octopus\nrule4() = not steal_points(tiger, 5, octopus) => prepare_armor(octopus, snail)\n# Rule5: If at least one animal winks at the lion, then the meerkat does not give a magnifier to the snail\nrule5() = wink_at(animal, lion) => not give_magnifier(meerkat, snail)\n# Rule6: The snail does not eat the food that belongs to the cheetah whenever at least one animal gives a magnifying glass to the swordfish\nrule6() = give_magnifying_glass(animal, swordfish) => not eat_food(snail, food_of(cheetah))\n# Rule7: If the octopus does not prepare armor for the snail and the meerkat does not give a magnifying glass to the snail, then the snail eats the food of the cheetah.\nrule7() = not prepare_armor(octopus, snail) & not give_magnifying_glass(meerkat, snail) => eat_food(snail, food_of(cheetah))\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n\n# The current state of the game is as follows\n# The meerkat has six friends\nfriends(meerkat) = 6\n# The octopus has fourteen friends\nfriends(octopus) = 14\n# The cat does not wink at the lion\nwink_at(cat, lion) = False\n\n# Based on the game state and the rules and preferences, does the cheetah knock down the fortress of the kangaroo?\nquestion = knock_down_fortress(cheetah, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the donkey has fewer than 6 friends, then the donkey respects the grizzly bear\nRule2: If the name of the donkey starts with the same letter as the name of the kiwi, then the donkey does not respect the grizzly bear\nRule3: The cat will not burn the warehouse that is in possession of the moose, if the lobster does not owe money to the cat\nRule4: If the name of the oscar starts with the same letter as the name of the salmon, then the oscar does not knock down the fortress that belongs to the cat\nRule5: If the grasshopper does not attack the green fields of the donkey and the crocodile holds the same number of points as the donkey, then the donkey offers a job to the pig\nRule6: If the oscar does not knock down the fortress that belongs to the cat, then the cat burns the warehouse that is in possession of the moose\nRule7: If one of the animals burns the warehouse that is in possession of the moose, then it does not need the support of the whale\nRule8: If something offers a job to the pig and also respects the grizzly bear, then it gives a magnifier to the kudu\nRule9: If at least one animal gives a magnifier to the kudu, then the cat needs the support of the whale\n\nRule2 is preferred over Rule1\nRule3 is preferred over Rule6\nRule9 is preferred over Rule7\n\nThe current state of the game is as follows\nThe catfish respects the donkey\nThe crocodile holds the same number of points as the donkey\nThe donkey has three friends\nThe kiwi is named Pablo\nThe oscar is named Lucy\nThe salmon is named Luna\nThe grasshopper does not attack the green fields of the donkey\n\nBased on the game state and the rules and preferences, does the cat need support from the whale?\nQuestion: Does the cat need support from the whale?",
        "idx": 282,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the donkey has fewer than 6 friends, then the donkey respects the grizzly bear\nrule1() = friends(donkey) < 6 => respects(donkey, grizzly_bear)\n# Rule2: Regarding the donkey, if it has a name whose first letter is the same as the first letter of the kiwi's name, then we can conclude that it does not respect the grizzly bear\nrule2() = first_letter_of(name(donkey)) == first_letter_of(name(kiwi)) => not respects(donkey, grizzly_bear)\n# Rule3: The cat will not burn the warehouse that is in possession of the moose, in the case where the lobster does not owe $$$ to the cat\nrule3() = not owes_money_to(lobster, cat) => not burn(warehouse_of(moose), cat)\n# Rule4: Regarding the oscar, if it has a name whose first letter is the same as the first letter of the salmon's name, then we can conclude that it does not knock down the fortress that belongs to the cat\nrule4() = first_letter_of(name(oscar)) == first_letter_of(name(salmon)) => not knock_down(fortress_of(cat), oscar)\n# Rule5: If the grasshopper does not attack the green fields of the donkey but the crocodile holds the same number of points as the donkey, then the donkey offers a job to the pig unavoidably\nrule5() = not attack(grasshopper, green_fields_of(donkey)) & points(crocodile) == points(donkey) => offer_job(donkey, pig)\n# Rule6: If the oscar does not knock down the fortress that belongs to the cat, then the cat burns the warehouse that is in possession of the moose\nrule6() = not knock_down(fortress_of(cat), oscar) => burn(warehouse_of(moose), cat)\n# Rule7: If you are positive that you saw one of the animals burns the warehouse that is in possession of the moose, you can be certain that it will not need the support of the whale\nrule7(something) = burn(warehouse_of(moose), something) => not need_support(something, whale)\n# Rule8: Be careful when something offers a job to the pig and also respects the grizzly bear because in this case it will surely give a magnifier to the kudu (this may or may not be problematic)\nrule8(something) = offer_job(something, pig) & respects(something, grizzly_bear) => give_magnifier(something, kudu)\n# Rule9: If at least one animal gives a magnifier to the kudu, then the cat needs the support of the whale.\nrule9() = give_magnifier(something, kudu) => need_support(cat, whale)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n# Rule9 is preferred over Rule7\norder(rule9) > order(rule7) = True\n\n# The current state of the game is as follows\n# The catfish respects the donkey\nrespects(catfish, donkey) = True\n# The crocodile holds the same number of points as the donkey\npoints(crocodile) == points(donkey) = True\n# The donkey has three friends\nfriends(donkey) = 3\n# The kiwi is named Pablo\nname(kiwi, Pablo) = True\n# The oscar is named Lucy\nname(oscar, Lucy) = True\n# The salmon is named Luna\nname(salmon, Luna) = True\n# The grasshopper does not attack the green fields whose owner is the donkey\nnot attack(grasshopper, green_fields_of(donkey)) = True\n\n# Based on the game state and the rules and preferences, does the cat need support from the whale?\nquestion = need_support(cat, whale)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the dog has something to sit on, then the dog does not steal five points from the raven\nRule2: The dog steals five points from the raven whenever at least one animal sings a victory song for the swordfish\nRule3: Be careful when something steals five points from the raven but does not sing a victory song for the pig because in this case it will need the support of the wolverine\nRule4: If the kudu becomes an actual enemy of the dog and the lobster steals five points from the dog, then the dog will not sing a song of victory for the pig\nRule5: If at least one animal needs support from the wolverine, then the koala does not prepare armor for the zander\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe kudu becomes an enemy of the dog\nThe lobster steals five points from the dog\nThe oscar sings a victory song for the swordfish\n\nBased on the game state and the rules and preferences, does the koala prepare armor for the zander?\nQuestion: Does the koala prepare armor for the zander?",
        "idx": 283,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the dog has something to sit on, then the dog does not steal five of the points of the raven\nrule1() = has(dog, something_to_sit_on) => not steal_points(dog, 5, raven)\n# Rule2: The dog steals five points from the raven whenever at least one animal sings a victory song for the swordfish\nrule2() = sing_song(something, victory_song_for(swordfish)) => steal_points(dog, 5, raven)\n# Rule3: Be careful when something steals five of the points of the raven but does not sing a victory song for the pig because in this case it will, surely, need the support of the wolverine (this may or may not be problematic)\nrule3(something) = steal_points(something, 5, raven) & not sing_song(something, victory_song_for(pig)) => needs_support(something, wolverine)\n# Rule4: If the kudu becomes an actual enemy of the dog and the lobster steals five of the points of the dog, then the dog will not sing a song of victory for the pig\nrule4() = enemy(kudu, dog) & steal_points(lobster, 5, dog) => not sing_song(dog, victory_song_for(pig))\n# Rule5: If at least one animal needs support from the wolverine, then the koala does not prepare armor for the zander.\nrule5() = needs_support(something, wolverine) => not prepare_armor(koala, zander)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The kudu becomes an enemy of the dog\nenemy(kudu, dog) = True\n# The lobster steals five points from the dog\nsteal_points(lobster, 5, dog) = True\n# The oscar sings a victory song for the swordfish\nsing_song(oscar, victory_song_for(swordfish)) = True\n\n# Based on the game state and the rules and preferences, does the koala prepare armor for the zander?\nquestion = prepare_armor(koala, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not need the support of the jellyfish, then it rolls the dice for the sheep\nRule2: If the crocodile has a high-quality paper, then the crocodile holds the same number of points as the koala\nRule3: If the name of the crocodile starts with the same letter as the name of the amberjack, then the crocodile rolls the dice for the elephant\nRule4: If the crocodile has fewer than eight friends, then the crocodile does not roll the dice for the elephant\nRule5: If at least one animal sings a victory song for the ferret, then the crocodile does not roll the dice for the sheep\nRule6: If something rolls the dice for the elephant and holds an equal number of points as the koala, then it needs the support of the jellyfish\nRule7: If the crocodile has a card whose color starts with the letter \"r\", then the crocodile rolls the dice for the elephant\n\nRule4 is preferred over Rule3\nRule4 is preferred over Rule7\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe amberjack is named Lucy\nThe crocodile has a card that is red in color\nThe crocodile is named Casper\nThe crocodile published a high-quality paper\n\nBased on the game state and the rules and preferences, does the crocodile roll the dice for the sheep?\nQuestion: Does the crocodile roll the dice for the sheep?",
        "idx": 284,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not need the support of the jellyfish, then it rolls the dice for the sheep\nrule1() = not needs_support(something, jellyfish) => roll_dice(something, sheep)\n# Rule2: If the crocodile has a high-quality paper, then the crocodile holds the same number of points as the koala\nrule2() = has(crocodile, high_quality_paper) => points(crocodile) == points(koala)\n# Rule3: Regarding the crocodile, if it has a name whose first letter is the same as the first letter of the amberjack's name, then we can conclude that it rolls the dice for the elephant\nrule3() = first_letter_of(name(crocodile)) == first_letter_of(name(amberjack)) => roll_dice(crocodile, elephant)\n# Rule4: If the crocodile has fewer than eight friends, then the crocodile does not roll the dice for the elephant\nrule4() = friends(crocodile) < 8 => not roll_dice(crocodile, elephant)\n# Rule5: If at least one animal sings a victory song for the ferret, then the crocodile does not roll the dice for the sheep\nrule5() = sing_song(something, victory_song_for(ferret)) => not roll_dice(crocodile, sheep)\n# Rule6: If you see that something rolls the dice for the elephant and holds an equal number of points as the koala, what can you certainly conclude? You can conclude that it also needs the support of the jellyfish\nrule6(something) = roll_dice(something, elephant) & points(something) == points(koala) => needs_support(something, jellyfish)\n# Rule7: If the crocodile has a card whose color starts with the letter \"r\", then the crocodile rolls the dice for the elephant.\nrule7() = has(crocodile, card_with(color_starting_with(\"r\"))) => roll_dice(crocodile, elephant)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule4 is preferred over Rule7\norder(rule4) > order(rule7) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The amberjack is named Lucy\nname(amberjack, Lucy) = True\n# The crocodile has a card that is red in color, and is named Casper\nhas(crocodile, card_with(red_color)) = True\nname(crocodile, Casper) = True\n# The crocodile published a high-quality paper\nhas(crocodile, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the crocodile roll the dice for the sheep?\nquestion = roll_dice(crocodile, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal prepares armor for the kangaroo, then the hare gives a magnifier to the doctorfish\nRule2: If something does not prepare armor for the spider, then it knows the defensive plans of the cricket\nRule3: The sun bear does not learn the basics of resource management from the caterpillar whenever at least one animal eats the food of the kiwi\nRule4: If the mosquito has a high-quality paper, then it sings a song of victory for the ferret\nRule5: If something gives a magnifier to the doctorfish, then it respects the halibut\nRule6: If the sun bear has a name whose first letter is the same as the first letter of the squirrel's name, then it learns elementary resource management from the caterpillar\nRule7: If something knows the defensive plans of the cricket and sings a victory song for the ferret, then it needs the support of the halibut\nRule8: If at least one animal eats the food of the raven, then the mosquito does not sing a song of victory for the ferret\nRule9: The mosquito does not need support from the halibut whenever at least one animal becomes an enemy of the cricket\nRule10: If the hare has fewer than twelve friends, then it does not give a magnifier to the doctorfish\nRule11: If the grasshopper holds the same number of points as the mosquito, then the mosquito does not know the defensive plans of the cricket\nRule12: If at least one animal learns elementary resource management from the caterpillar, then the panther learns the basics of resource management from the koala\nRule13: If at least one animal learns the basics of resource management from the koala, then the halibut proceeds to the spot right after the cow\n\nRule10 is preferred over Rule1\nRule11 is preferred over Rule2\nRule6 is preferred over Rule3\nRule8 is preferred over Rule4\nRule9 is preferred over Rule7\n\nThe current state of the game is as follows\nThe carp eats the food of the kiwi\nThe mosquito published a high-quality paper\nThe mosquito does not prepare armor for the spider\nThe squirrel is named Teddy\nThe sun bear is named Tango\nThe turtle prepares armor for the kangaroo\n\nBased on the game state and the rules and preferences, does the halibut proceed to the spot right after the cow?\nQuestion: Does the halibut proceed to the spot right after the cow?",
        "idx": 285,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal prepares armor for the kangaroo, then the hare gives a magnifier to the doctorfish\nrule1() = prepare_armor(something, kangaroo) => give_magnifier(hare, doctorfish)\n# Rule2: If something does not prepare armor for the spider, then it knows the defensive plans of the cricket\nrule2() = not prepare_armor(something, spider) => knows_defensive_plans(something, cricket)\n# Rule3: The sun bear does not learn the basics of resource management from the caterpillar whenever at least one animal eats the food of the kiwi\nrule3() = eats_food_of(something, kiwi) => not learn_basics_of_resource_management(sun_bear, caterpillar)\n# Rule4: Regarding the mosquito, if it has a high-quality paper, then we can conclude that it sings a song of victory for the ferret\nrule4() = has(mosquito, high_quality_paper) => sing_song(mosquito, victory_song_for(ferret))\n# Rule5: If you are positive that you saw one of the animals gives a magnifier to the doctorfish, you can be certain that it will also respect the halibut\nrule5() = give_magnifier(something, doctorfish) => respect(something, halibut)\n# Rule6: Regarding the sun bear, if it has a name whose first letter is the same as the first letter of the squirrel's name, then we can conclude that it learns elementary resource management from the caterpillar\nrule6() = first_letter_of(name(sun_bear)) == first_letter_of(name(squirrel)) => learn_elementary_resource_management(sun_bear, caterpillar)\n# Rule7: Be careful when something knows the defense plan of the cricket and also sings a victory song for the ferret because in this case it will surely need the support of the halibut (this may or may not be problematic)\nrule7(something) = knows_defensive_plans(something, cricket) & sing_song(something, victory_song_for(ferret)) => need_support(something, halibut)\n# Rule8: If at least one animal eats the food of the raven, then the mosquito does not sing a song of victory for the ferret\nrule8() = eats_food_of(something, raven) => not sing_song(mosquito, victory_song_for(ferret))\n# Rule9: The mosquito does not need support from the halibut whenever at least one animal becomes an enemy of the cricket\nrule9() = enemy(something, cricket) => not need_support(mosquito, halibut)\n# Rule10: If the hare has fewer than twelve friends, then the hare does not give a magnifier to the doctorfish\nrule10() = friends(hare) < 12 => not give_magnifier(hare, doctorfish)\n# Rule11: If the grasshopper holds the same number of points as the mosquito, then the mosquito is not going to know the defensive plans of the cricket\nrule11() = points(grasshopper) == points(mosquito) => not knows_defensive_plans(mosquito, cricket)\n# Rule12: If at least one animal learns elementary resource management from the caterpillar, then the panther learns the basics of resource management from the koala\nrule12() = learn_elementary_resource_management(something, caterpillar) => learn_basics_of_resource_management(panther, koala)\n# Rule13: If at least one animal learns the basics of resource management from the koala, then the halibut proceeds to the spot that is right after the spot of the cow.\nrule13() = learn_basics_of_resource_management(something, koala) => proceed(halibut, spot_right_after(spot_of(cow)))\n# Rule10 is preferred over Rule1\norder(rule10) > order(rule1) = True\n# Rule11 is preferred over Rule2\norder(rule11) > order(rule2) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n# Rule8 is preferred over Rule4\norder(rule8) > order(rule4) = True\n# Rule9 is preferred over Rule7\norder(rule9) > order(rule7) = True\n\n# The current state of the game is as follows\n# The carp eats the food of the kiwi\neats_food_of(carp, kiwi) = True\n# The mosquito published a high-quality paper, and does not prepare armor for the spider\nhas(mosquito, high_quality_paper) = True\nnot prepare_armor(mosquito, spider) = True\n# The squirrel is named Teddy\nname(squirrel, Teddy) = True\n# The sun bear is named Tango\nname(sun_bear, Tango) = True\n# The turtle prepares armor for the kangaroo\nprepare_armor(turtle, kangaroo) = True\n\n# Based on the game state and the rules and preferences, does the halibut proceed to the spot right after the cow?\nquestion = proceed(halibut, spot_right_after(spot_of(cow)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the swordfish offers a job position to the catfish, then the catfish proceeds to the spot that is right after the spot of the goldfish\nRule2: If the swordfish has something to carry apples and oranges, then it offers a job position to the catfish\nRule3: If the catfish has something to sit on, then it becomes an actual enemy of the sea bass\nRule4: If one of the animals does not sing a victory song for the tilapia, then it prepares armor for the wolverine\nRule5: If something becomes an enemy of the sea bass and knows the defense plan of the octopus, then it does not proceed to the spot that is right after the spot of the goldfish\nRule6: If at least one animal prepares armor for the wolverine, then the meerkat does not offer a job position to the goldfish\nRule7: If the catfish has a name whose first letter is the same as the first letter of the dog's name, then the catfish becomes an enemy of the sea bass\nRule8: If the swordfish has something to sit on, then it does not offer a job position to the catfish\nRule9: If at least one animal shows all her cards to the bat, then the spider does not prepare armor for the wolverine\nRule10: If the catfish proceeds to the spot that is right after the spot of the goldfish and the meerkat does not offer a job position to the goldfish, then the goldfish does not hold the same number of points as the puffin\n\nRule5 is preferred over Rule1\nRule8 is preferred over Rule2\nRule9 is preferred over Rule4\n\nThe current state of the game is as follows\nThe catfish has a harmonica\nThe catfish is named Blossom\nThe dog is named Buddy\nThe swordfish has a basket\nThe spider does not sing a victory song for the tilapia\n\nBased on the game state and the rules and preferences, does the goldfish hold the same number of points as the puffin?\nQuestion: Does the goldfish hold the same number of points as the puffin?",
        "idx": 286,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the swordfish offers a job position to the catfish, then the catfish proceeds to the spot that is right after the spot of the goldfish\nrule1() = offer_job_position(swordfish, catfish) => proceed(catfish, spot_right_after(spot_of(goldfish)))\n# Rule2: Regarding the swordfish, if it has something to carry apples and oranges, then we can conclude that it offers a job to the catfish\nrule2() = has(swordfish, carry_apples_and_oranges) => offer_job_position(swordfish, catfish)\n# Rule3: Regarding the catfish, if it has something to sit on, then we can conclude that it becomes an actual enemy of the sea bass\nrule3() = has(catfish, sit_on_something) => actual_enemy(catfish, sea_bass)\n# Rule4: If you are positive that one of the animals does not sing a victory song for the tilapia, you can be certain that it will prepare armor for the wolverine without a doubt\nrule4(something) = not sing_song(something, victory_song_for(tilapia)) => prepare_armor(something, wolverine)\n# Rule5: If you see that something becomes an enemy of the sea bass and knows the defense plan of the octopus, what can you certainly conclude? You can conclude that it does not proceed to the spot that is right after the spot of the goldfish\nrule5(something) = enemy(something, sea_bass) & knows(defense_plan_of(octopus), something) => not proceed(something, spot_right_after(spot_of(goldfish)))\n# Rule6: If at least one animal prepares armor for the wolverine, then the meerkat does not offer a job position to the goldfish\nrule6() = prepare_armor(something, wolverine) => not offer_job_position(meerkat, goldfish)\n# Rule7: If the catfish has a name whose first letter is the same as the first letter of the dog's name, then the catfish becomes an enemy of the sea bass\nrule7() = first_letter_of(name(catfish)) == first_letter_of(name(dog)) => enemy(catfish, sea_bass)\n# Rule8: Regarding the swordfish, if it has something to sit on, then we can conclude that it does not offer a job to the catfish\nrule8() = has(swordfish, sit_on_something) => not offer_job_position(swordfish, catfish)\n# Rule9: The spider does not prepare armor for the wolverine whenever at least one animal shows all her cards to the bat\nrule9() = show_all_cards(something, bat) => not prepare_armor(spider, wolverine)\n# Rule10: For the goldfish, if the belief is that the catfish proceeds to the spot that is right after the spot of the goldfish and the meerkat does not offer a job position to the goldfish, then you can add \"the goldfish does not hold the same number of points as the puffin\" to your conclusions.\nrule10() = proceed(catfish, spot_right_after(spot_of(goldfish))) & not offer_job_position(meerkat, goldfish) => not same_number_of_points(goldfish, puffin)\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule8 is preferred over Rule2\norder(rule8) > order(rule2) = True\n# Rule9 is preferred over Rule4\norder(rule9) > order(rule4) = True\n\n# The current state of the game is as follows\n# The catfish has a harmonica\nhas(catfish, harmonica) = True\n# The catfish is named Blossom\nname(catfish, Blossom) = True\n# The dog is named Buddy\nname(dog, Buddy) = True\n# The swordfish has a basket\nhas(swordfish, basket) = True\n# The spider does not sing a victory song for the tilapia\nnot sing_song(spider, victory_song_for(tilapia)) = True\n\n# Based on the game state and the rules and preferences, does the goldfish hold the same number of points as the puffin?\nquestion = same_number_of_points(goldfish, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale killed the mayor, then the whale removes one of the pieces of the leopard\nRule2: The squirrel steals five points from the amberjack whenever at least one animal offers a job to the caterpillar\nRule3: If something removes one of the pieces of the leopard, then it offers a job position to the caterpillar as well\nRule4: If the name of the whale starts with the same letter as the name of the moose, then the whale removes one of the pieces of the leopard\n\nThe current state of the game is as follows\nThe moose is named Casper\nThe whale dreamed of a luxury aircraft and is named Lily\n\nBased on the game state and the rules and preferences, does the squirrel steal five points from the amberjack?\nQuestion: Does the squirrel steal five points from the amberjack?",
        "idx": 287,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the whale killed the mayor, then the whale removes one of the pieces of the leopard\nrule1() = killed(mayor, whale) => remove(whale, piece_of(leopard))\n# Rule2: The squirrel steals five of the points of the amberjack whenever at least one animal offers a job to the caterpillar\nrule2() = offer_job(something, caterpillar) => steal_points(squirrel, 5, amberjack)\n# Rule3: If something removes one of the pieces of the leopard, then it offers a job position to the caterpillar, too\nrule3(something) = remove(something, piece_of(leopard)) => offer_job(something, caterpillar)\n# Rule4: Regarding the whale, if it has a name whose first letter is the same as the first letter of the moose's name, then we can conclude that it removes one of the pieces of the leopard.\nrule4() = first_letter_of(name(whale)) == first_letter_of(name(moose)) => remove(whale, piece_of(leopard))\n\n# The current state of the game is as follows\n# The moose is named Casper\nname(moose, Casper) = True\n# The whale dreamed of a luxury aircraft, and is named Lily\nname(whale, Lily) = True\n\n# Based on the game state and the rules and preferences, does the squirrel steal five points from the amberjack?\nquestion = steal_points(squirrel, 5, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the starfish needs the support of the sun bear, then the sun bear attacks the green fields whose owner is the mosquito\nRule2: If the ferret has a card whose color starts with the letter \"g\", then the ferret rolls the dice for the squirrel\nRule3: If something learns elementary resource management from the octopus and eats the food that belongs to the penguin, then it does not attack the green fields of the mosquito\nRule4: If something attacks the green fields whose owner is the mosquito, then it learns elementary resource management from the cow\nRule5: The kiwi learns elementary resource management from the squirrel, in the case where the tiger does not proceed to the spot that is right after the spot of the kiwi\nRule6: The sun bear does not learn the basics of resource management from the cow whenever at least one animal steals five points from the phoenix\nRule7: If the starfish has a leafy green vegetable, then it needs the support of the sun bear\nRule8: If the sun bear has a card with a primary color, then it learns elementary resource management from the octopus\nRule9: If at least one animal learns the basics of resource management from the ferret, then the squirrel does not steal five points from the phoenix\nRule10: If the ferret rolls the dice for the squirrel and the kiwi learns elementary resource management from the squirrel, then the squirrel steals five points from the phoenix\nRule11: If the starfish has a card whose color is one of the rainbow colors, then it needs support from the sun bear\nRule12: The sun bear will not eat the food of the penguin, in the case where the zander does not sing a song of victory for the sun bear\nRule13: The sun bear eats the food that belongs to the penguin whenever at least one animal respects the sea bass\nRule14: If the sun bear has a musical instrument, then it learns the basics of resource management from the octopus\n\nRule1 is preferred over Rule3\nRule12 is preferred over Rule13\nRule4 is preferred over Rule6\nRule9 is preferred over Rule10\n\nThe current state of the game is as follows\nThe ferret has a card that is green in color\nThe snail respects the sea bass\nThe starfish has a card that is white in color\nThe starfish has some spinach\nThe sun bear has a card that is violet in color\nThe sun bear has a guitar\nThe tiger does not proceed to the spot right after the kiwi\n\nBased on the game state and the rules and preferences, does the sun bear learn the basics of resource management from the cow?\nQuestion: Does the sun bear learn the basics of resource management from the cow?",
        "idx": 288,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the starfish needs the support of the sun bear, then the sun bear attacks the green fields whose owner is the mosquito\nrule1() = needs_support(starfish, sun_bear) => attack_green_fields(sun_bear, owner_is(mosquito))\n# Rule2: If the ferret has a card whose color starts with the letter \"g\", then the ferret rolls the dice for the squirrel\nrule2() = has(ferret, card_with(color_starting_with(\"g\"))) => roll_dice(ferret, squirrel)\n# Rule3: If you see that something learns elementary resource management from the octopus and eats the food that belongs to the penguin, what can you certainly conclude? You can conclude that it does not attack the green fields of the mosquito\nrule3(something) = learn(something, elementary_resource_management_from(octopus)) & eat_food(something, owner_is(penguin)) => not attack_green_fields(something, owner_is(mosquito))\n# Rule4: If something attacks the green fields whose owner is the mosquito, then it learns elementary resource management from the cow, too\nrule4(something) = attack_green_fields(something, owner_is(mosquito)) => learn(something, elementary_resource_management_from(cow))\n# Rule5: The kiwi unquestionably learns elementary resource management from the squirrel, in the case where the tiger does not proceed to the spot that is right after the spot of the kiwi\nrule5() = not proceed(tiger, spot_right_after(spot_of(kiwi))) => learn(kiwi, elementary_resource_management_from(squirrel))\n# Rule6: The sun bear does not learn the basics of resource management from the cow whenever at least one animal steals five points from the phoenix\nrule6() = steals_points_from(animal, phoenix, 5) => not learn_basics_of_resource_management(sun_bear, cow)\n# Rule7: Regarding the starfish, if it has a leafy green vegetable, then we can conclude that it needs the support of the sun bear\nrule7() = has(starfish, leafy_green_vegetable) => needs_support(starfish, sun_bear)\n# Rule8: If the sun bear has a card with a primary color, then the sun bear learns elementary resource management from the octopus\nrule8() = has(sun_bear, card_with(primary_color)) => learn(sun_bear, elementary_resource_management_from(octopus))\n# Rule9: If at least one animal learns the basics of resource management from the ferret, then the squirrel does not steal five of the points of the phoenix\nrule9() = learn_basics_of_resource_management(animal, ferret) => not steals_points(squirrel, phoenix, 5)\n# Rule10: If the ferret rolls the dice for the squirrel and the kiwi learns elementary resource management from the squirrel, then the squirrel steals five points from the phoenix\nrule10() = roll_dice(ferret, squirrel) & learn(kiwi, elementary_resource_management_from(squirrel)) => steals_points(squirrel, phoenix, 5)\n# Rule11: Regarding the starfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it needs support from the sun bear\nrule11() = has(starfish, card_with(color_in(rainbow_colors))) => needs_support(starfish, sun_bear)\n# Rule12: The sun bear will not eat the food of the penguin, in the case where the zander does not sing a song of victory for the sun bear\nrule12() = not sing_song(zander, victory_song_for(sun_bear)) => not eat_food(sun_bear, owner_is(penguin))\n# Rule13: The sun bear eats the food that belongs to the penguin whenever at least one animal respects the sea bass\nrule13() = respects(animal, sea_bass) => eat_food(sun_bear, owner_is(penguin))\n# Rule14: If the sun bear has a musical instrument, then the sun bear learns the basics of resource management from the octopus.\nrule14() = has(sun_bear, musical_instrument) => learn_basics_of_resource_management(sun_bear, octopus)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule12 is preferred over Rule13\norder(rule12) > order(rule13) = True\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n# Rule9 is preferred over Rule10\norder(rule9) > order(rule10) = True\n\n# The current state of the game is as follows\n# The ferret has a card that is green in color\nhas(ferret, card_with(green_color)) = True\n# The snail respects the sea bass\nrespects(snail, sea_bass) = True\n# The starfish has a card that is white in color\nhas(starfish, card_with(white_color)) = True\n# The starfish has some spinach\nhas(starfish, spinach) = True\n# The sun bear has a card that is violet in color\nhas(sun_bear, card_with(violet_color)) = True\n# The sun bear has a guitar\nhas(sun_bear, guitar) = True\n# The tiger does not proceed to the spot right after the kiwi\nnot proceed(tiger, spot_right_after(spot_of(kiwi))) = True\n\n# Based on the game state and the rules and preferences, does the sun bear learn the basics of resource management from the cow?\nquestion = learn_basics_of_resource_management(sun_bear, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the leopard works more hours than before, then it does not eat the food of the penguin\nRule2: If the leopard does not eat the food that belongs to the penguin, then the penguin will not raise a flag of peace for the sheep\nRule3: If the mosquito becomes an enemy of the penguin, then the penguin unquestionably respects the kangaroo\nRule4: If the leopard has something to sit on, then it does not eat the food that belongs to the penguin\nRule5: If something does not raise a peace flag for the sheep but respects the kangaroo, then it will not proceed to the spot right after the spot of the panda bear\nRule6: If something does not roll the dice for the dog, then it will not respect the kangaroo\nRule7: If the mosquito has a device to connect to the internet, then it becomes an enemy of the penguin\n\nRule6 is preferred over Rule3\n\nThe current state of the game is as follows\nThe leopard has a beer\nThe leopard has a love seat sofa\nThe leopard reduced her work hours recently\nThe mosquito has a cell phone\n\nBased on the game state and the rules and preferences, does the penguin proceed to the spot right after the panda bear?\nQuestion: Does the penguin proceed to the spot right after the panda bear?",
        "idx": 289,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the leopard, if it works more hours than before, then we can conclude that it does not eat the food of the penguin\nrule1() = work_hours(leopard) > previous_work_hours(leopard) => not eat_food(leopard, food_of(penguin))\n# Rule2: The penguin will not raise a flag of peace for the sheep, in the case where the leopard does not eat the food that belongs to the penguin\nrule2() = not eat_food(leopard, food_of(penguin)) => not raise_flag_of_peace(penguin, sheep)\n# Rule3: The penguin unquestionably respects the kangaroo, in the case where the mosquito becomes an enemy of the penguin\nrule3() = enemy(mosquito, penguin) => respects(penguin, kangaroo)\n# Rule4: If the leopard has something to sit on, then the leopard does not eat the food that belongs to the penguin\nrule4() = has(leopard, something_to_sit_on) => not eat_food(leopard, food_of(penguin))\n# Rule5: If you see that something does not raise a peace flag for the sheep but it respects the kangaroo, what can you certainly conclude? You can conclude that it is not going to proceed to the spot that is right after the spot of the panda bear\nrule5(something) = not raise_flag_of_peace(something, sheep) & respects(something, kangaroo) => not proceed(something, spot_right_after(spot_of(panda_bear)))\n# Rule6: If you are positive that one of the animals does not roll the dice for the dog, you can be certain that it will not respect the kangaroo\nrule6(something) = not roll_dice(something, dog) => not respects(something, kangaroo)\n# Rule7: Regarding the mosquito, if it has a device to connect to the internet, then we can conclude that it becomes an enemy of the penguin.\nrule7(device) = has(mosquito, connect_to_internet(device)) => enemy(mosquito, penguin)\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n\n# The current state of the game is as follows\n# The leopard has a beer, has a love seat sofa, and reduced her work hours recently\nhas(leopard, beer) = True\nhas(leopard, love_seat_sofa) = True\nreduce_work_hours(leopard) = True\n# The mosquito has a cell phone\nhas(mosquito, cell_phone) = True\n\n# Based on the game state and the rules and preferences, does the penguin proceed to the spot right after the panda bear?\nquestion = proceed(penguin, spot_right_after(spot_of(panda_bear)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the rabbit starts with the same letter as the name of the cow, then the rabbit removes one of the pieces of the viperfish from the board\nRule2: If something knows the defensive plans of the moose, then it does not burn the warehouse of the caterpillar\nRule3: If the rabbit has fewer than six friends, then it removes one of the pieces of the viperfish from the board\nRule4: If you see one of the animals give a magnifier to the polar bear, then you can be certain that it respects the cricket\nRule5: If you see something sing a victory song for the black bear and remove one of the pieces of the viperfish, then you can conclude that it does not respect the cricket\nRule6: The rabbit unquestionably sings a victory song for the black bear, in the case where the oscar eats the food that belongs to the rabbit\nRule7: If the rabbit works fewer hours than before, then it does not sing a victory song for the black bear\nRule8: If something respects the cricket, then it burns the warehouse of the caterpillar\nRule9: If the elephant does not steal five points from the rabbit, then the rabbit does not remove one of the pieces of the viperfish\nRule10: If the viperfish knocks down the fortress of the rabbit, then the rabbit gives a magnifier to the polar bear\nRule11: If the rabbit has a device to connect to the internet, then it does not sing a victory song for the black bear\n\nRule1 is preferred over Rule9\nRule11 is preferred over Rule6\nRule2 is preferred over Rule8\nRule3 is preferred over Rule9\nRule5 is preferred over Rule4\nRule7 is preferred over Rule6\n\nThe current state of the game is as follows\nThe cow is named Lily\nThe oscar eats the food of the rabbit\nThe rabbit has a flute\nThe rabbit has four friends and is named Beauty\nThe viperfish knocks down the fortress of the rabbit\nThe elephant does not owe money to the rabbit\n\nBased on the game state and the rules and preferences, does the rabbit burn the warehouse of the caterpillar?\nQuestion: Does the rabbit burn the warehouse of the caterpillar?",
        "idx": 290,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the rabbit has a name whose first letter is the same as the first letter of the cow's name, then the rabbit removes from the board one of the pieces of the viperfish\nrule1() = first_letter_of(name(rabbit)) == first_letter_of(name(cow)) => remove(rabbit, piece_of(viperfish))\n# Rule2: If something knows the defensive plans of the moose, then it does not burn the warehouse that is in possession of the caterpillar\nrule2(something) = knows(defensive_plans_of(moose), something) => not burn(warehouse_of(caterpillar), something)\n# Rule3: Regarding the rabbit, if it has fewer than six friends, then we can conclude that it removes from the board one of the pieces of the viperfish\nrule3() = friends(rabbit) < 6 => remove(rabbit, piece_of(viperfish))\n# Rule4: If you are positive that you saw one of the animals gives a magnifier to the polar bear, you can be certain that it will also respect the cricket\nrule4(something) = give_magnifier(something, polar_bear) => respect(something, cricket)\n# Rule5: If you see that something sings a victory song for the black bear and removes one of the pieces of the viperfish, what can you certainly conclude? You can conclude that it does not respect the cricket\nrule5(something) = sing_song(something, victory_song_for(black_bear)) & remove(something, piece_of(viperfish)) => not respect(something, cricket)\n# Rule6: The rabbit unquestionably sings a song of victory for the black bear, in the case where the oscar eats the food that belongs to the rabbit\nrule6() = eat_food(oscar, food_of(rabbit)) => sing_song(rabbit, victory_song_for(black_bear))\n# Rule7: Regarding the rabbit, if it works fewer hours than before, then we can conclude that it does not sing a victory song for the black bear\nrule7() = reduce_work_hours(rabbit) => not sing_song(rabbit, victory_song_for(black_bear))\n# Rule8: If something respects the cricket, then it burns the warehouse that is in possession of the caterpillar, too\nrule8(something) = respect(something, cricket) => burn(warehouse_of(caterpillar), something)\n# Rule9: If the elephant does not steal five of the points of the rabbit, then the rabbit does not remove one of the pieces of the viperfish\nrule9() = not steal_points(elephant, 5, rabbit) => not remove(rabbit, piece_of(viperfish))\n# Rule10: If the viperfish knocks down the fortress that belongs to the rabbit, then the rabbit gives a magnifier to the polar bear\nrule10() = knock_down(viperfish, fortress_of(rabbit)) => give_magnifier(rabbit, polar_bear)\n# Rule11: Regarding the rabbit, if it has a device to connect to the internet, then we can conclude that it does not sing a song of victory for the black bear.\nrule11() = has(rabbit, connect_to_internet(device)) => not sing_song(rabbit, victory_song_for(black_bear))\n# Rule1 is preferred over Rule9\norder(rule1) > order(rule9) = True\n# Rule11 is preferred over Rule6\norder(rule11) > order(rule6) = True\n# Rule2 is preferred over Rule8\norder(rule2) > order(rule8) = True\n# Rule3 is preferred over Rule9\norder(rule3) > order(rule9) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n\n# The current state of the game is as follows\n# The cow is named Lily\nname(cow, Lily) = True\n# The oscar eats the food of the rabbit\neat_food(oscar, food_of(rabbit)) = True\n# The rabbit has a flute\nhas(rabbit, flute) = True\n# The rabbit has four friends, and is named Beauty\nfriends(rabbit) = 4\nname(rabbit, Beauty) = True\n# The viperfish knocks down the fortress of the rabbit\nknock_down(viperfish, fortress_of(rabbit)) = True\n# The elephant does not owe money to the rabbit\nnot owe_money_to(elephant, rabbit) = True\n\n# Based on the game state and the rules and preferences, does the rabbit burn the warehouse of the caterpillar?\nquestion = burn(warehouse_of(caterpillar), rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal rolls the dice for the oscar, then the eagle respects the starfish\nRule2: The blobfish rolls the dice for the oscar whenever at least one animal steals five points from the swordfish\nRule3: If something offers a job to the squirrel and also steals five points from the carp, then it will surely steal five points from the swordfish\n\nThe current state of the game is as follows\nThe kudu offers a job to the squirrel and steals five points from the carp\n\nBased on the game state and the rules and preferences, does the eagle respect the starfish?\nQuestion: Does the eagle respect the starfish?",
        "idx": 291,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal rolls the dice for the oscar, then the eagle respects the starfish\nrule1() = roll_dice_for(oscar, something) => respects(eagle, starfish)\n# Rule2: The blobfish rolls the dice for the oscar whenever at least one animal steals five of the points of the swordfish\nrule2() = steal_points(something, 5, swordfish) => roll_dice_for(oscar, blobfish)\n# Rule3: Be careful when something offers a job to the squirrel and also steals five of the points of the carp because in this case it will surely steal five points from the swordfish (this may or may not be problematic).\nrule3(something) = offer_job(something, squirrel) & steal_points(something, 5, carp) => steal_points(something, 5, swordfish)\n\n# The current state of the game is as follows\n# The kudu offers a job to the squirrel, and steals five points from the carp.\noffer_job(kudu, squirrel) = True\nsteal_points(kudu, 5, carp) = True\n\n# Based on the game state and the rules and preferences, does the eagle respect the starfish?\nquestion = respects(eagle, starfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the carp has a card whose color is one of the rainbow colors, then the carp shows all her cards to the kiwi\nRule2: If the carp has a name whose first letter is the same as the first letter of the octopus's name, then the carp shows all her cards to the kiwi\nRule3: The jellyfish sings a song of victory for the grasshopper whenever at least one animal burns the warehouse of the wolverine\nRule4: The meerkat raises a peace flag for the jellyfish whenever at least one animal shows all their cards to the kiwi\nRule5: The jellyfish does not sing a song of victory for the grasshopper, in the case where the meerkat raises a peace flag for the jellyfish\n\nRule3 is preferred over Rule5\n\nThe current state of the game is as follows\nThe carp has a card that is white in color\nThe carp is named Tango\nThe octopus is named Tessa\n\nBased on the game state and the rules and preferences, does the jellyfish sing a victory song for the grasshopper?\nQuestion: Does the jellyfish sing a victory song for the grasshopper?",
        "idx": 292,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the carp has a card whose color is one of the rainbow colors, then the carp shows her cards (all of them) to the kiwi\nrule1() = has(carp, card_with(color_in(rainbow_colors))) => show_cards(carp, kiwi)\n# Rule2: If the carp has a name whose first letter is the same as the first letter of the octopus's name, then the carp shows all her cards to the kiwi\nrule2() = first_letter_of(name(carp)) == first_letter_of(name(octopus)) => show_cards(carp, kiwi)\n# Rule3: The jellyfish sings a song of victory for the grasshopper whenever at least one animal burns the warehouse of the wolverine\nrule3() = burn(warehouse_of(wolverine), something) => sing_song(jellyfish, victory_song_for(grasshopper))\n# Rule4: The meerkat raises a peace flag for the jellyfish whenever at least one animal shows her cards (all of them) to the kiwi\nrule4() = show_cards(something, kiwi) => raise_flag_of_peace(meerkat, jellyfish)\n# Rule5: The jellyfish does not sing a song of victory for the grasshopper, in the case where the meerkat raises a peace flag for the jellyfish.\nrule5() = raise_flag_of_peace(meerkat, jellyfish) => not sing_song(jellyfish, victory_song_for(grasshopper))\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n\n# The current state of the game is as follows\n# The carp has a card that is white in color, and is named Tango\nhas(carp, card_with(white_color)) = True\nname(carp, Tango) = True\n# The octopus is named Tessa\nname(octopus, Tessa) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish sing a victory song for the grasshopper?\nquestion = sing_song(jellyfish, victory_song_for(grasshopper))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The dog knocks down the fortress of the parrot whenever at least one animal steals five points from the wolverine\nRule2: Be careful when something does not offer a job position to the leopard but proceeds to the spot that is right after the spot of the tiger because in this case it will, surely, burn the warehouse that is in possession of the ferret (this may or may not be problematic)\nRule3: If the parrot has a device to connect to the internet, then the parrot does not offer a job to the leopard\nRule4: If the parrot has a card whose color starts with the letter \"y\", then it offers a job to the leopard\nRule5: If the parrot has a musical instrument, then the parrot proceeds to the spot right after the tiger\nRule6: If the hippopotamus has a name whose first letter is the same as the first letter of the penguin's name, then it steals five points from the parrot\nRule7: If at least one animal burns the warehouse of the ferret, then the donkey eats the food of the rabbit\nRule8: If the hippopotamus has more than one friend, then it steals five points from the parrot\nRule9: The donkey respects the aardvark, in the case where the elephant winks at the donkey\nRule10: The elephant eats the food of the donkey whenever at least one animal becomes an enemy of the panda bear\nRule11: If something shows all her cards to the starfish, then it does not knock down the fortress that belongs to the parrot\nRule12: If the elephant has something to drink, then it does not eat the food of the donkey\n\nRule11 is preferred over Rule1\nRule12 is preferred over Rule10\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe caterpillar steals five points from the wolverine\nThe elephant has a beer\nThe hippopotamus has 1 lazy friend and 6 non-lazy friends\nThe hippopotamus is named Charlie\nThe parrot has a yellow card\nThe parrot hates Chris Ronaldo\nThe parrot has a flute and a tablet\nThe penguin is named Max\nThe pig becomes an enemy of the panda bear\n\nBased on the game state and the rules and preferences, does the donkey eat the food of the rabbit?\nQuestion: Does the donkey eat the food of the rabbit?",
        "idx": 293,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The dog knocks down the fortress of the parrot whenever at least one animal steals five points from the wolverine\nrule1() = steal_points(something, 5, wolverine) => knock_down(dog, fortress_of(parrot))\n# Rule2: Be careful when something does not offer a job position to the leopard but proceeds to the spot that is right after the spot of the tiger because in this case it will, surely, burn the warehouse that is in possession of the ferret (this may or may not be problematic)\nrule2(something) = not offer_job_position(something, leopard) & proceed(something, spot_right_after(spot_of(tiger))) => burn(warehouse_of(ferret), something)\n# Rule3: If the parrot has a device to connect to the internet, then the parrot does not offer a job to the leopard\nrule3() = has(parrot, connect_to_internet(device)) => not offer_job_position(parrot, leopard)\n# Rule4: Regarding the parrot, if it has a card whose color starts with the letter \"y\", then we can conclude that it offers a job to the leopard\nrule4() = has(parrot, card_with(color_starting_with(\"y\"))) => offer_job_position(parrot, leopard)\n# Rule5: If the parrot has a musical instrument, then the parrot proceeds to the spot right after the tiger\nrule5() = has(parrot, musical_instrument) => proceed(parrot, spot_right_after(spot_of(tiger)))\n# Rule6: Regarding the hippopotamus, if it has a name whose first letter is the same as the first letter of the penguin's name, then we can conclude that it steals five of the points of the parrot\nrule6() = first_letter_of(name(hippopotamus)) == first_letter_of(name(penguin)) => steal_points(hippopotamus, 5, parrot)\n# Rule7: If at least one animal burns the warehouse of the ferret, then the donkey eats the food of the rabbit\nrule7(something) = burn(warehouse_of(ferret), something) => eat_food(donkey, food_of(rabbit))\n# Rule8: If the hippopotamus has more than one friend, then the hippopotamus steals five of the points of the parrot\nrule8() = friends(hippopotamus) > 1 => steal_points(hippopotamus, 5, parrot)\n# Rule9: The donkey unquestionably respects the aardvark, in the case where the elephant winks at the donkey\nrule9() = wink(elephant, donkey) => respects(donkey, aardvark)\n# Rule10: The elephant eats the food of the donkey whenever at least one animal becomes an enemy of the panda bear\nrule10() = enemy(something, panda_bear) => eat_food(elephant, food_of(donkey))\n# Rule11: If something shows her cards (all of them) to the starfish, then it does not knock down the fortress that belongs to the parrot\nrule11(something) = show_cards(something, starfish) => not knock_down(dog, fortress_of(parrot))\n# Rule12: Regarding the elephant, if it has something to drink, then we can conclude that it does not eat the food of the donkey.\nrule12() = has(elephant, drink) => not eat_food(elephant, food_of(donkey))\n# Rule11 is preferred over Rule1\norder(rule11) > order(rule1) = True\n# Rule12 is preferred over Rule10\norder(rule12) > order(rule10) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The caterpillar steals five points from the wolverine\nsteal_points(caterpillar, 5, wolverine) = True\n# The elephant has a beer\nhas(elephant, beer) = True\n# The hippopotamus has 1 friend that is lazy and six friends that are not, and is named Charlie\nfriends(hippopotamus) = 7\nhas_friend(hippopotamus, lazy_friend) = True\nname(hippopotamus, Charlie) = True\n# The parrot has a card that is yellow in color, and hates Chris Ronaldo\nhas(parrot, card_with(yellow_color)) = True\nhates(parrot, Chris_Ronaldo) = True\n# The parrot has a flute, and has a tablet\nhas(parrot, flute) = True\nhas(parrot, tablet) = True\n# The penguin is named Max\nname(penguin, Max) = True\n# The pig becomes an enemy of the panda bear\nenemy(pig, panda_bear) = True\n\n# Based on the game state and the rules and preferences, does the donkey eat the food of the rabbit?\nquestion = eat_food(donkey, food_of(rabbit))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the crocodile needs the support of the carp and the goldfish steals five points from the carp, then the carp burns the warehouse that is in possession of the whale\nRule2: If the phoenix has a leafy green vegetable, then the phoenix raises a peace flag for the carp\nRule3: If something holds the same number of points as the cricket and burns the warehouse that is in possession of the whale, then it offers a job to the rabbit\nRule4: If the goldfish has more than 10 friends, then it steals five points from the carp\nRule5: If the phoenix has a name whose first letter is the same as the first letter of the grasshopper's name, then the phoenix does not raise a peace flag for the carp\nRule6: If the phoenix has more than 9 friends, then the phoenix does not raise a peace flag for the carp\nRule7: If one of the animals becomes an actual enemy of the kudu, then it knows the defensive plans of the leopard\nRule8: If at least one animal needs support from the moose, then the carp does not hold the same number of points as the cricket\nRule9: If the baboon knows the defensive plans of the crocodile, then the crocodile needs support from the carp\nRule10: If the phoenix does not raise a peace flag for the carp, then the carp holds an equal number of points as the cricket\nRule11: If the halibut learns the basics of resource management from the carp, then the carp does not offer a job position to the rabbit\n\nRule11 is preferred over Rule3\nRule5 is preferred over Rule2\nRule6 is preferred over Rule2\nRule8 is preferred over Rule10\n\nThe current state of the game is as follows\nThe baboon knows the defensive plans of the crocodile\nThe gecko becomes an enemy of the kudu\nThe gecko has a backpack\nThe gecko has a card that is red in color\nThe goldfish has sixteen friends\nThe grasshopper is named Peddi\nThe phoenix has a trumpet\nThe phoenix is named Bella\nThe phoenix has nineteen friends\nThe phoenix has some kale\n\nBased on the game state and the rules and preferences, does the carp offer a job to the rabbit?\nQuestion: Does the carp offer a job to the rabbit?",
        "idx": 294,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the crocodile needs the support of the carp and the goldfish steals five of the points of the carp, then the carp burns the warehouse that is in possession of the whale\nrule1() = needs_support(crocodile, carp) & steal_points(goldfish, 5, carp) => burn(warehouse_of(whale), carp)\n# Rule2: If the phoenix has a leafy green vegetable, then the phoenix raises a peace flag for the carp\nrule2() = has(phoenix, leafy_green_vegetable) => raise_flag_of_peace(phoenix, carp)\n# Rule3: If you see that something holds the same number of points as the cricket and burns the warehouse that is in possession of the whale, what can you certainly conclude? You can conclude that it also offers a job to the rabbit\nrule3(something) = points(something) == points(cricket) & burn(warehouse_of(whale), something) => offer_job(something, rabbit)\n# Rule4: Regarding the goldfish, if it has more than 10 friends, then we can conclude that it steals five points from the carp\nrule4() = friends(goldfish) > 10 => steal_points(goldfish, 5, carp)\n# Rule5: If the phoenix has a name whose first letter is the same as the first letter of the grasshopper's name, then the phoenix does not raise a peace flag for the carp\nrule5() = first_letter_of(name(phoenix)) == first_letter_of(name(grasshopper)) => not raise_flag_of_peace(phoenix, carp)\n# Rule6: If the phoenix has more than 9 friends, then the phoenix does not raise a peace flag for the carp\nrule6() = friends(phoenix) > 9 => not raise_flag_of_peace(phoenix, carp)\n# Rule7: If you are positive that you saw one of the animals becomes an actual enemy of the kudu, you can be certain that it will also know the defensive plans of the leopard\nrule7(something) = enemy(something, kudu) => knows(defensive_plans_of(leopard), something)\n# Rule8: The carp does not hold the same number of points as the cricket whenever at least one animal needs support from the moose\nrule8() = needs_support(something, moose) => not points(carp) == points(cricket)\n# Rule9: If the baboon knows the defensive plans of the crocodile, then the crocodile needs support from the carp\nrule9() = knows(defensive_plans_of(crocodile), baboon) => needs_support(crocodile, carp)\n# Rule10: If the phoenix does not raise a peace flag for the carp, then the carp holds an equal number of points as the cricket\nrule10() = not raise_flag_of_peace(phoenix, carp) => points(carp) == points(cricket)\n# Rule11: The carp does not offer a job position to the rabbit, in the case where the halibut learns the basics of resource management from the carp.\nrule11() = learn_basics_of_resource_management(halibut, carp) => not offer_job(carp, rabbit)\n# Rule11 is preferred over Rule3\norder(rule11) > order(rule3) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n# Rule8 is preferred over Rule10\norder(rule8) > order(rule10) = True\n\n# The current state of the game is as follows\n# The baboon knows the defensive plans of the crocodile\nknows(defensive_plans_of(crocodile), baboon) = True\n# The gecko becomes an enemy of the kudu, has a backpack, and has a card that is red in color\nenemy(gecko, kudu) = True\nhas(gecko, backpack) = True\nhas(gecko, card_with(red_color)) = True\n# The goldfish has sixteen friends\nfriends(goldfish) = 16\n# The grasshopper is named Peddi\nname(grasshopper, Peddi) = True\n# The phoenix has a trumpet, and is named Bella\nhas(phoenix, trumpet) = True\nname(phoenix, Bella) = True\n# The phoenix has nineteen friends\nfriends(phoenix) = 19\n# The phoenix has some kale\nhas(phoenix, kale) = True\n\n# Based on the game state and the rules and preferences, does the carp offer a job to the rabbit?\nquestion = offer_job(carp, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals winks at the squirrel, you can be certain that it will also knock down the fortress of the hippopotamus\nRule2: If the kiwi has a sharp object, then the kiwi attacks the green fields of the hippopotamus\nRule3: If the swordfish killed the mayor, then it does not knock down the fortress of the hippopotamus\nRule4: If the kiwi has a device to connect to the internet, then it does not attack the green fields of the hippopotamus\nRule5: The aardvark does not need support from the hippopotamus whenever at least one animal rolls the dice for the penguin\nRule6: If the swordfish has fewer than one friend, then it does not knock down the fortress of the hippopotamus\nRule7: If at least one animal burns the warehouse of the swordfish, then the viperfish does not roll the dice for the parrot\nRule8: If the aardvark does not need support from the hippopotamus, then the hippopotamus burns the warehouse that is in possession of the swordfish\nRule9: If the kiwi attacks the green fields whose owner is the hippopotamus and the swordfish knocks down the fortress that belongs to the hippopotamus, then the hippopotamus is not going to burn the warehouse that is in possession of the swordfish\nRule10: If the kiwi has a card whose color appears in the flag of France, then the kiwi attacks the green fields of the hippopotamus\n\nRule10 is preferred over Rule4\nRule2 is preferred over Rule4\nRule3 is preferred over Rule1\nRule6 is preferred over Rule1\nRule8 is preferred over Rule9\n\nThe current state of the game is as follows\nThe aardvark becomes an enemy of the hummingbird\nThe hummingbird rolls the dice for the penguin\nThe kiwi has a card that is violet in color\nThe kiwi has a couch\nThe kiwi has a knife\nThe kiwi has eight friends\nThe swordfish has nine friends\nThe swordfish winks at the squirrel\n\nBased on the game state and the rules and preferences, does the viperfish roll the dice for the parrot?\nQuestion: Does the viperfish roll the dice for the parrot?",
        "idx": 295,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals winks at the squirrel, you can be certain that it will also knock down the fortress of the hippopotamus\nrule1() = winks_at(something, squirrel) => knock_down_fortress(something, hippopotamus)\n# Rule2: If the kiwi has a sharp object, then the kiwi attacks the green fields of the hippopotamus\nrule2() = has(kiwi, sharp_object) => attack_green_fields(kiwi, hippopotamus)\n# Rule3: Regarding the swordfish, if it killed the mayor, then we can conclude that it does not knock down the fortress of the hippopotamus\nrule3() = killed(swordfish, mayor) => not knock_down_fortress(swordfish, hippopotamus)\n# Rule4: Regarding the kiwi, if it has a device to connect to the internet, then we can conclude that it does not attack the green fields of the hippopotamus\nrule4(device) = has(kiwi, connect_to_internet(device)) => not attack_green_fields(kiwi, hippopotamus)\n# Rule5: The aardvark does not need support from the hippopotamus whenever at least one animal rolls the dice for the penguin\nrule5() = rolls_dice_for(something, penguin) => not need_support(aardvark, hippopotamus)\n# Rule6: If the swordfish has fewer than one friend, then the swordfish does not knock down the fortress of the hippopotamus\nrule6() = friends(swordfish) < 1 => not knock_down_fortress(swordfish, hippopotamus)\n# Rule7: If at least one animal burns the warehouse of the swordfish, then the viperfish does not roll the dice for the parrot\nrule7(something) = burn(warehouse_of(swordfish), something) => not rolls_dice_for(viperfish, parrot)\n# Rule8: If the aardvark does not need support from the hippopotamus, then the hippopotamus burns the warehouse that is in possession of the swordfish\nrule8() = not need_support(aardvark, hippopotamus) => burn(warehouse_of(swordfish), hippopotamus)\n# Rule9: For the hippopotamus, if the belief is that the kiwi attacks the green fields whose owner is the hippopotamus and the swordfish knocks down the fortress that belongs to the hippopotamus, then you can add that \"the hippopotamus is not going to burn the warehouse that is in possession of the swordfish\" to your conclusions\nrule9() = attack_green_fields(kiwi, hippopotamus) & knock_down_fortress(swordfish, hippopotamus) => not burn(warehouse_of(swordfish), hippopotamus)\n# Rule10: If the kiwi has a card whose color appears in the flag of France, then the kiwi attacks the green fields of the hippopotamus.\nrule10() = has(kiwi, card_with(color_in_flag_of_france)) => attack_green_fields(kiwi, hippopotamus)\n# Rule10 is preferred over Rule4\norder(rule10) > order(rule4) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n# Rule8 is preferred over Rule9\norder(rule8) > order(rule9) = True\n\n# The current state of the game is as follows\n# The aardvark becomes an enemy of the hummingbird\nenemy(aardvark, hummingbird) = True\n# The hummingbird rolls the dice for the penguin\nrolls_dice_for(hummingbird, penguin) = True\n# The kiwi has a card that is violet in color\nhas(kiwi, card_with(violet_color)) = True\n# The kiwi has a couch\nhas(kiwi, couch) = True\n# The kiwi has a knife\nhas(kiwi, knife) = True\n# The kiwi has eight friends\nfriends(kiwi) = 8\n# The swordfish has 9 friends\nfriends(swordfish) = 9\n# The swordfish winks at the squirrel\nwinks_at(swordfish, squirrel) = True\n\n# Based on the game state and the rules and preferences, does the viperfish roll the dice for the parrot?\nquestion = rolls_dice_for(viperfish, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The turtle removes one of the pieces of the blobfish, in the case where the lion knocks down the fortress that belongs to the turtle\nRule2: If the turtle took a bike from the store, then it learns elementary resource management from the mosquito\nRule3: The spider holds an equal number of points as the hummingbird whenever at least one animal removes one of the pieces of the blobfish\nRule4: If something learns the basics of resource management from the mosquito, then it holds the same number of points as the spider, too\nRule5: If something offers a job to the cow, then it prepares armor for the lobster, too\nRule6: If the kudu prepares armor for the pig, then the pig rolls the dice for the dog\nRule7: If the turtle has fewer than 9 friends, then it does not learn the basics of resource management from the mosquito\nRule8: If the turtle has a name whose first letter is the same as the first letter of the grizzly bear's name, then the turtle respects the meerkat\nRule9: If the turtle has something to carry apples and oranges, then it learns the basics of resource management from the mosquito\nRule10: If the lion owns a luxury aircraft, then the lion does not learn elementary resource management from the turtle\nRule11: If the turtle has a card whose color starts with the letter \"b\", then the turtle does not learn the basics of resource management from the mosquito\nRule12: If the sea bass is not going to owe money to the spider but the turtle holds the same number of points as the spider, then the spider does not hold the same number of points as the hummingbird\nRule13: The lion learns the basics of resource management from the turtle, in the case where the tiger attacks the green fields whose owner is the lion.\n\nRule11 is preferred over Rule2\nRule11 is preferred over Rule9\nRule12 is preferred over Rule3\nRule13 is preferred over Rule10\nRule7 is preferred over Rule2\nRule7 is preferred over Rule9\n\nThe current state of the game is as follows\nThe grizzly bear is named Buddy\nThe kudu prepares armor for the pig\nThe lion purchased a luxury aircraft\nThe tiger attacks the green fields whose owner is the lion\nThe turtle has a green tea\nThe turtle has fourteen friends\nThe turtle is named Beauty\nThe turtle offers a job to the cow\nThe turtle stole a bike from the store\nThe carp does not learn the basics of resource management from the turtle\n\nBased on the game state and the rules and preferences, does the spider hold the same number of points as the hummingbird?\nQuestion: Does the spider hold the same number of points as the hummingbird?",
        "idx": 296,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The turtle unquestionably removes one of the pieces of the blobfish, in the case where the lion knocks down the fortress that belongs to the turtle\nrule1() = knock_down(lion, fortress_of(turtle)) => remove(turtle, piece_of(blobfish))\n# Rule2: If the turtle took a bike from the store, then the turtle learns elementary resource management from the mosquito\nrule2() = took_bike(turtle, store) => learn_elementary_resource_management(turtle, mosquito)\n# Rule3: The spider holds an equal number of points as the hummingbird whenever at least one animal removes one of the pieces of the blobfish\nrule3() = remove(something, piece_of(blobfish)) => points(spider) == points(hummingbird)\n# Rule4: If something learns the basics of resource management from the mosquito, then it holds the same number of points as the spider, too\nrule4(something) = learn_basics_of_resource_management(something, mosquito) => points(something) == points(spider)\n# Rule5: If something offers a job to the cow, then it prepares armor for the lobster, too\nrule5(something) = offer_job(something, cow) => prepare_armor(something, lobster)\n# Rule6: If the kudu prepares armor for the pig, then the pig rolls the dice for the dog\nrule6() = prepare_armor(kudu, pig) => roll_dice(pig, dog)\n# Rule7: Regarding the turtle, if it has fewer than 9 friends, then we can conclude that it does not learn the basics of resource management from the mosquito\nrule7() = friends(turtle) < 9 => not learn_basics_of_resource_management(turtle, mosquito)\n# Rule8: If the turtle has a name whose first letter is the same as the first letter of the grizzly bear's name, then the turtle respects the meerkat\nrule8() = first_letter_of(name(turtle)) == first_letter_of(name(grizzly_bear)) => respects(turtle, meerkat)\n# Rule9: If the turtle has something to carry apples and oranges, then the turtle learns the basics of resource management from the mosquito\nrule9() = has(turtle, carry_apples_and_oranges) => learn_basics_of_resource_management(turtle, mosquito)\n# Rule10: If the lion owns a luxury aircraft, then the lion does not learn elementary resource management from the turtle\nrule10() = owns(lion, luxury_aircraft) => not learn_elementary_resource_management(lion, turtle)\n# Rule11: If the turtle has a card whose color starts with the letter \"b\", then the turtle does not learn the basics of resource management from the mosquito\nrule11() = has(turtle, card_with(color_starting_with(\"b\"))) => not learn_basics_of_resource_management(turtle, mosquito)\n# Rule12: For the spider, if the belief is that the sea bass is not going to owe $$$ to the spider but the turtle holds the same number of points as the spider, then you can add that \"the spider is not going to hold the same number of points as the hummingbird\" to your conclusions\nrule12() = not owes_money_to(sea_bass, spider) & points(turtle) == points(spider) => not hold_same_number_of_points(spider, hummingbird)\n# Rule13: The lion unquestionably learns the basics of resource management from the turtle, in the case where the tiger attacks the green fields whose owner is the lion.\nrule13() = attack(tiger, green_fields_of(lion)) => learn_basics_of_resource_management(lion, turtle)\n# Rule11 is preferred over Rule2\norder(rule11) > order(rule2) = True\n# Rule11 is preferred over Rule9\norder(rule11) > order(rule9) = True\n# Rule12 is preferred over Rule3\norder(rule12) > order(rule3) = True\n# Rule13 is preferred over Rule10\norder(rule13) > order(rule10) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n# Rule7 is preferred over Rule9\norder(rule7) > order(rule9) = True\n\n# The current state of the game is as follows\n# The grizzly bear is named Buddy\nname(grizzly_bear, Buddy) = True\n# The kudu prepares armor for the pig\nprepare_armor(kudu, pig) = True\n# The lion purchased a luxury aircraft\nowns(lion, luxury_aircraft) = True\n# The tiger attacks the green fields whose owner is the lion\nattack(tiger, green_fields_of(lion)) = True\n# The turtle has a green tea, has fourteen friends, and is named Beauty\nhas(turtle, green_tea) = True\nfriends(turtle) = 14\nname(turtle, Beauty) = True\n# The turtle offers a job to the cow\noffer_job(turtle, cow) = True\n# The turtle stole a bike from the store\ntook_bike(turtle, store) = True\n# The carp does not learn the basics of resource management from the turtle\nnot learn_basics_of_resource_management(carp, turtle) = True\n\n# Based on the game state and the rules and preferences, does the spider hold the same number of points as the hummingbird?\nquestion = hold_same_number_of_points(spider, hummingbird)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal knows the defensive plans of the tilapia, then the blobfish offers a job to the amberjack\nRule2: The pig does not know the defensive plans of the tilapia whenever at least one animal offers a job position to the cricket\nRule3: If the rabbit has a name whose first letter is the same as the first letter of the sheep's name, then the rabbit becomes an enemy of the pig\nRule4: If the ferret has a card whose color appears in the flag of Netherlands, then it proceeds to the spot that is right after the spot of the pig\nRule5: If the rabbit becomes an enemy of the pig and the ferret proceeds to the spot that is right after the spot of the pig, then the pig knows the defense plan of the tilapia\nRule6: If the rabbit has a card whose color starts with the letter \"g\", then the rabbit becomes an enemy of the pig\nRule7: If the ferret has a name whose first letter is the same as the first letter of the kangaroo's name, then it proceeds to the spot right after the pig\n\nRule2 is preferred over Rule5\n\nThe current state of the game is as follows\nThe ferret has a card that is white in color\nThe ferret is named Tarzan\nThe kangaroo is named Lily\nThe rabbit has a card that is green in color\nThe rabbit is named Blossom\nThe sheep is named Pashmak\n\nBased on the game state and the rules and preferences, does the blobfish offer a job to the amberjack?\nQuestion: Does the blobfish offer a job to the amberjack?",
        "idx": 297,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal knows the defensive plans of the tilapia, then the blobfish offers a job to the amberjack\nrule1() = knows(defensive_plans_of(tilapia), something) => offer_job(blobfish, amberjack)\n# Rule2: The pig does not know the defensive plans of the tilapia whenever at least one animal offers a job position to the cricket\nrule2() = offer_job_position(something, cricket) => not knows(defensive_plans_of(tilapia), pig)\n# Rule3: If the rabbit has a name whose first letter is the same as the first letter of the sheep's name, then the rabbit becomes an enemy of the pig\nrule3() = first_letter_of(name(rabbit)) == first_letter_of(name(sheep)) => enemy(rabbit, pig)\n# Rule4: Regarding the ferret, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it proceeds to the spot that is right after the spot of the pig\nrule4() = color_of(card(ferret)) in colors_of(flag_of(Netherlands)) => proceed(ferret, spot_right_after(spot_of(pig)))\n# Rule5: For the pig, if the belief is that the rabbit becomes an enemy of the pig and the ferret proceeds to the spot that is right after the spot of the pig, then you can add \"the pig knows the defense plan of the tilapia\" to your conclusions\nrule5() = enemy(rabbit, pig) & proceed(ferret, spot_right_after(spot_of(pig))) => knows(defensive_plans_of(tilapia), pig)\n# Rule6: If the rabbit has a card whose color starts with the letter \"g\", then the rabbit becomes an enemy of the pig\nrule6() = color_of(card(rabbit)) starts_with \"g\" => enemy(rabbit, pig)\n# Rule7: Regarding the ferret, if it has a name whose first letter is the same as the first letter of the kangaroo's name, then we can conclude that it proceeds to the spot right after the pig.\nrule7() = first_letter_of(name(ferret)) == first_letter_of(name(kangaroo)) => proceed(ferret, spot_right_after(spot_of(pig)))\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n\n# The current state of the game is as follows\n# The ferret has a card that is white in color\ncolor_of(card(ferret)) = white\n# The ferret is named Tarzan\nname(ferret, Tarzan) = True\n# The kangaroo is named Lily\nname(kangaroo, Lily) = True\n# The rabbit has a card that is green in color\ncolor_of(card(rabbit)) = green\n# The rabbit is named Blossom\nname(rabbit, Blossom) = True\n# The sheep is named Pashmak\nname(sheep, Pashmak) = True\n\n# Based on the game state and the rules and preferences, does the blobfish offer a job to the amberjack?\nquestion = offer_job(blobfish, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the aardvark has more than 8 friends, then the aardvark shows all her cards to the hare\nRule2: If the squirrel knows the defensive plans of the koala, then the koala removes one of the pieces of the grizzly bear\nRule3: If something winks at the whale, then it also attacks the green fields of the wolverine\nRule4: If at least one animal shows all her cards to the hare, then the blobfish does not attack the green fields of the wolverine\nRule5: If something does not attack the green fields of the wolverine but respects the wolverine, then it does not owe money to the oscar\nRule6: If the sun bear knocks down the fortress of the koala, then the koala does not remove one of the pieces of the grizzly bear\nRule7: If at least one animal removes one of the pieces of the grizzly bear, then the blobfish respects the wolverine\n\nRule2 is preferred over Rule6\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe aardvark has 10 friends\nThe squirrel knows the defensive plans of the koala\nThe sun bear knocks down the fortress of the koala\n\nBased on the game state and the rules and preferences, does the blobfish owe money to the oscar?\nQuestion: Does the blobfish owe money to the oscar?",
        "idx": 298,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the aardvark has more than 8 friends, then the aardvark shows her cards (all of them) to the hare\nrule1() = friends(aardvark) > 8 => show_cards(aardvark, hare)\n# Rule2: The koala unquestionably removes one of the pieces of the grizzly bear, in the case where the squirrel knows the defense plan of the koala\nrule2() = knows(defense_plan_of(koala), squirrel) => remove(koala, piece_of(grizzly_bear))\n# Rule3: If something winks at the whale, then it attacks the green fields of the wolverine, too\nrule3(something) = wink(something, whale) => attack(something, green_fields_of(wolverine))\n# Rule4: If at least one animal shows all her cards to the hare, then the blobfish does not attack the green fields of the wolverine\nrule4() = show_all_cards(something, hare) => not attack(blobfish, green_fields_of(wolverine))\n# Rule5: Be careful when something does not attack the green fields of the wolverine but respects the wolverine because in this case it certainly does not owe $$$ to the oscar (this may or may not be problematic)\nrule5(something) = not attack(something, green_fields_of(wolverine)) & respects(something, wolverine) => not owe(something, money, oscar)\n# Rule6: If the sun bear knocks down the fortress that belongs to the koala, then the koala is not going to remove one of the pieces of the grizzly bear\nrule6() = knock_down(sun_bear, fortress_of(koala)) => not remove(koala, piece_of(grizzly_bear))\n# Rule7: If at least one animal removes from the board one of the pieces of the grizzly bear, then the blobfish respects the wolverine.\nrule7(something) = remove(something, piece_of(grizzly_bear)) => respects(blobfish, wolverine)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The aardvark has 10 friends\nfriends(aardvark) = 10\n# The squirrel knows the defensive plans of the koala\nknows(defense_plan_of(koala), squirrel) = True\n# The sun bear knocks down the fortress of the koala\nknock_down(sun_bear, fortress_of(koala)) = True\n\n# Based on the game state and the rules and preferences, does the blobfish owe money to the oscar?\nquestion = owe(blobfish, money, oscar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that one of the animals offers a job to the snail, you can be certain that it will also burn the warehouse that is in possession of the gecko\nRule2: If you see that something rolls the dice for the starfish and burns the warehouse of the gecko, then you can conclude that it also knocks down the fortress of the amberjack\nRule3: If you see that one of the animals learns the basics of resource management from the hippopotamus, you can be certain that it will also knock down the fortress that belongs to the tiger\nRule4: If at least one animal knocks down the fortress that belongs to the panther, then the phoenix offers a job position to the snail\nRule5: If at least one animal offers a job to the tiger, then the phoenix rolls the dice for the starfish\n\nThe current state of the game is as follows\nThe cheetah knocks down the fortress of the panther\nThe moose learns the basics of resource management from the hippopotamus\n\nBased on the game state and the rules and preferences, does the phoenix knock down the fortress of the amberjack?\nQuestion: Does the phoenix knock down the fortress of the amberjack?",
        "idx": 299,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals offers a job to the snail, you can be certain that it will also burn the warehouse that is in possession of the gecko\nrule1(something) = offers_job(something, snail) => burn(warehouse_of(gecko), something)\n# Rule2: If you see that something rolls the dice for the starfish and burns the warehouse of the gecko, what can you certainly conclude? You can conclude that it also knocks down the fortress of the amberjack\nrule2(something) = rolls_dice_for(something, starfish) & burn(warehouse_of(gecko), something) => knock_down(fortress_of(amberjack), something)\n# Rule3: If you are positive that you saw one of the animals learns the basics of resource management from the hippopotamus, you can be certain that it will also knock down the fortress that belongs to the tiger\nrule3(something) = learns_basics_of_resource_management(something, hippopotamus) => knock_down(fortress_of(tiger), something)\n# Rule4: If at least one animal knocks down the fortress that belongs to the panther, then the phoenix offers a job position to the snail\nrule4(something) = knock_down(fortress_of(panther), something) => offers_job(phoenix, snail)\n# Rule5: If at least one animal offers a job to the tiger, then the phoenix rolls the dice for the starfish.\nrule5(something) = offers_job(something, tiger) => rolls_dice_for(phoenix, starfish)\n\n# The current state of the game is as follows\n# The cheetah knocks down the fortress of the panther\nknock_down(fortress_of(panther), cheetah) = True\n# The moose learns the basics of resource management from the hippopotamus\nlearns_basics_of_resource_management(moose, hippopotamus) = True\n\n# Based on the game state and the rules and preferences, does the phoenix knock down the fortress of the amberjack?\nquestion = knock_down(fortress_of(amberjack), phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the wolverine knows the defensive plans of the mosquito and the grizzly bear winks at the mosquito, then the mosquito raises a flag of peace for the dog\nRule2: If the viperfish has something to drink, then it owes money to the mosquito\nRule3: The hummingbird shows all her cards to the donkey, in the case where the mosquito rolls the dice for the hummingbird\nRule4: The mosquito rolls the dice for the hummingbird, in the case where the viperfish owes money to the mosquito\nRule5: If something raises a peace flag for the dog and also rolls the dice for the cockroach, then it does not roll the dice for the hummingbird\nRule6: If the viperfish has a musical instrument, then it owes money to the mosquito\nRule7: If the mosquito has fewer than 10 friends, then it rolls the dice for the cockroach\nRule8: If the mosquito has something to carry apples and oranges, then it rolls the dice for the cockroach\nRule9: If the parrot learns the basics of resource management from the viperfish, then the viperfish does not owe money to the mosquito\nRule10: The mosquito does not roll the dice for the cockroach whenever at least one animal respects the rabbit\n\nRule2 is preferred over Rule9\nRule4 is preferred over Rule5\nRule6 is preferred over Rule9\nRule7 is preferred over Rule10\nRule8 is preferred over Rule10\n\nThe current state of the game is as follows\nThe blobfish respects the rabbit\nThe grizzly bear winks at the mosquito\nThe mosquito has a trumpet\nThe mosquito has four friends\nThe parrot learns the basics of resource management from the viperfish\nThe viperfish has a blade\nThe viperfish has a violin\nThe wolverine knows the defensive plans of the mosquito\n\nBased on the game state and the rules and preferences, does the hummingbird show all her cards to the donkey?\nQuestion: Does the hummingbird show all her cards to the donkey?",
        "idx": 300,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the wolverine knows the defensive plans of the mosquito and the grizzly bear winks at the mosquito, then the mosquito raises a flag of peace for the dog\nrule1() = knows(defensive_plans_of(mosquito), wolverine) & winks(grizzly_bear, mosquito) => raise_flag_of_peace(mosquito, dog)\n# Rule2: Regarding the viperfish, if it has something to drink, then we can conclude that it owes money to the mosquito\nrule2() = has(viperfish, drink) => owes_money_to(viperfish, mosquito)\n# Rule3: The hummingbird unquestionably shows all her cards to the donkey, in the case where the mosquito rolls the dice for the hummingbird\nrule3() = rolls_dice(mosquito, hummingbird) => show_cards(hummingbird, donkey)\n# Rule4: The mosquito unquestionably rolls the dice for the hummingbird, in the case where the viperfish owes money to the mosquito\nrule4() = owes_money_to(viperfish, mosquito) => rolls_dice(mosquito, hummingbird)\n# Rule5: Be careful when something raises a peace flag for the dog and also rolls the dice for the cockroach because in this case it will surely not roll the dice for the hummingbird (this may or may not be problematic)\nrule5(something) = raise_flag_of_peace(something, dog) & rolls_dice(something, cockroach) => not rolls_dice(something, hummingbird)\n# Rule6: Regarding the viperfish, if it has a musical instrument, then we can conclude that it owes money to the mosquito\nrule6() = has(viperfish, musical_instrument) => owes_money_to(viperfish, mosquito)\n# Rule7: Regarding the mosquito, if it has fewer than 10 friends, then we can conclude that it rolls the dice for the cockroach\nrule7() = friends(mosquito) < 10 => rolls_dice(mosquito, cockroach)\n# Rule8: Regarding the mosquito, if it has something to carry apples and oranges, then we can conclude that it rolls the dice for the cockroach\nrule8() = has(mosquito, carry_apples_and_oranges) => rolls_dice(mosquito, cockroach)\n# Rule9: If the parrot learns the basics of resource management from the viperfish, then the viperfish is not going to owe $$$ to the mosquito\nrule9() = learn_basics_of_resource_management(parrot, viperfish) => not owes_money_to(viperfish, mosquito)\n# Rule10: The mosquito does not roll the dice for the cockroach whenever at least one animal respects the rabbit.\nrule10() = respects(something, rabbit) => not rolls_dice(mosquito, cockroach)\n# Rule2 is preferred over Rule9\norder(rule2) > order(rule9) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n# Rule7 is preferred over Rule10\norder(rule7) > order(rule10) = True\n# Rule8 is preferred over Rule10\norder(rule8) > order(rule10) = True\n\n# The current state of the game is as follows\n# The blobfish respects the rabbit\nrespects(blobfish, rabbit) = True\n# The grizzly bear winks at the mosquito\nwinks(grizzly_bear, mosquito) = True\n# The mosquito has a trumpet\nhas(mosquito, trumpet) = True\n# The mosquito has four friends\nfriends(mosquito) = 4\n# The parrot learns the basics of resource management from the viperfish\nlearn_basics_of_resource_management(parrot, viperfish) = True\n# The viperfish has a blade\nhas(viperfish, blade) = True\n# The viperfish has a violin\nhas(viperfish, violin) = True\n# The wolverine knows the defensive plans of the mosquito\nknows(defensive_plans_of(mosquito), wolverine) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird show all her cards to the donkey?\nquestion = show_cards(hummingbird, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal sings a song of victory for the lion, then the hippopotamus does not burn the warehouse that is in possession of the hare\nRule2: If an animal does not learn elementary resource management from the tiger, then it will knock down the fortress of the parrot\nRule3: If something attacks the green fields owned by the cricket, then it also burns the warehouse that is in possession of the hare\nRule4: If the hippopotamus has a leafy green vegetable, then it attacks the green fields owned by the cricket\nRule5: If the donkey does not attack the green fields of the blobfish and the eel does not knock down the fortress of the blobfish, then the blobfish does not learn elementary resource management from the tiger\nRule6: If the hippopotamus burns the warehouse that is in possession of the hare, then the hare does not need support from the cheetah\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe gecko attacks the green fields owned by the pig\nThe hippopotamus has romaine lettuce\nThe donkey does not attack the green fields owned by the blobfish\nThe eel does not knock down the fortress of the blobfish\n\nBased on the game state and the rules and preferences, does the hare need support from the cheetah?\nQuestion: Does the hare need support from the cheetah?",
        "idx": 301,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal sings a song of victory for the lion, then the hippopotamus does not burn the warehouse that is in possession of the hare\nrule1() = sing_song(something, victory_song_for(lion)) => not burn(warehouse_of(hare))\n# Rule2: If you are positive that one of the animals does not learn elementary resource management from the tiger, you can be certain that it will knock down the fortress of the parrot without a doubt\nrule2(something) = not learn_elementary_resource_management_from(something, tiger) => knock_down(fortress_of(parrot))\n# Rule3: If something attacks the green fields whose owner is the cricket, then it burns the warehouse that is in possession of the hare, too\nrule3(something) = attack(green_fields_of(cricket), something) => burn(warehouse_of(hare))\n# Rule4: If the hippopotamus has a leafy green vegetable, then the hippopotamus attacks the green fields whose owner is the cricket\nrule4() = has(hippopotamus, leafy_green_vegetable) => attack(green_fields_of(cricket), hippopotamus)\n# Rule5: For the blobfish, if the belief is that the donkey does not attack the green fields of the blobfish and the eel does not knock down the fortress of the blobfish, then you can add \"the blobfish does not learn elementary resource management from the tiger\" to your conclusions\nrule5() = not attack(green_fields_of(blobfish), donkey) & not knock_down(fortress_of(blobfish), eel) => not learn_elementary_resource_management_from(blobfish, tiger)\n# Rule6: If the hippopotamus burns the warehouse that is in possession of the hare, then the hare is not going to need support from the cheetah.\nrule6() = burn(warehouse_of(hare), hippopotamus) => not need_support(hare, cheetah)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The gecko attacks the green fields whose owner is the pig\nattack(green_fields_of(pig), gecko) = True\n# The hippopotamus has some romaine lettuce\nhas(hippopotamus, romaine_lettuce) = True\n# The donkey does not attack the green fields whose owner is the blobfish\nnot attack(green_fields_of(blobfish), donkey) = True\n# The eel does not knock down the fortress of the blobfish\nnot knock_down(fortress_of(blobfish), eel) = True\n\n# Based on the game state and the rules and preferences, does the hare need support from the cheetah?\nquestion = need_support(hare, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the snail learns the basics of resource management from the sea bass and the sheep rolls the dice for the sea bass, then the sea bass does not show all her cards to the dog\nRule2: If the snail has fewer than four friends, then the snail proceeds to the spot that is right after the spot of the viperfish\nRule3: The cheetah removes one of the pieces of the sheep whenever at least one animal eats the food that belongs to the ferret\nRule4: The sheep rolls the dice for the sea bass whenever the cheetah removes one of the pieces of the sheep\nRule5: If the sea bass has more than 2 friends, then the sea bass owes money to the spider\nRule6: If an animal proceeds to the spot that is right after the spot of the viperfish, then it learns elementary resource management from the sea bass\nRule7: If the snail has a name whose first letter is the same as the first letter of the aardvark's name, then the snail proceeds to the spot that is right after the spot of the viperfish\nRule8: If the polar bear has a name whose first letter is the same as the first letter of the donkey's name, then the polar bear does not need the support of the sheep\nRule9: If an animal owes money to the catfish, then it eats the food of the squirrel\nRule10: If something does not roll the dice for the whale, then it does not show all her cards to the salmon\nRule11: If something offers a job to the panther, then it does not owe money to the catfish\nRule12: If the cheetah has a card with a primary color, then it does not remove one of the pieces of the sheep\nRule13: If something eats the food of the squirrel and shows all her cards to the salmon, then it also shows all her cards to the dog\nRule14: If an animal owes money to the spider, then it shows all her cards to the salmon\nRule15: If the cheetah purchased a time machine, then it does not remove one of the pieces of the sheep\nRule16: If the polar bear does not need support from the sheep, then the sheep does not roll the dice for the sea bass\nRule17: If something raises a peace flag for the sheep, then it does not owe money to the spider\n\nRule10 is preferred over Rule14\nRule12 is preferred over Rule3\nRule13 is preferred over Rule1\nRule15 is preferred over Rule3\nRule16 is preferred over Rule4\nRule17 is preferred over Rule5\n\nThe current state of the game is as follows\nThe aardvark is named Milo\nThe cheetah invented a time machine\nThe donkey is named Teddy\nThe polar bear is named Tessa\nThe raven eats the food of the ferret\nThe sea bass has seven friends and does not offer a job to the panther\nThe snail has four adventurous friends and one non-adventurous friend\nThe snail is named Max\n\nBased on the game state and the rules and preferences, does the sea bass show all her cards to the dog?\nQuestion: Does the sea bass show all her cards to the dog?",
        "idx": 302,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the sea bass, if the belief is that the snail learns the basics of resource management from the sea bass and the sheep rolls the dice for the sea bass, then you can add that \"the sea bass is not going to show all her cards to the dog\" to your conclusions\nrule1() = learn_basics_of_resource_management(snail, sea_bass) & roll_dice(sheep, sea_bass) => not show_all_cards(sea_bass, dog)\n# Rule2: If the snail has fewer than four friends, then the snail proceeds to the spot that is right after the spot of the viperfish\nrule2() = friends(snail) < 4 => proceed(snail, spot_right_after(spot_of(viperfish)))\n# Rule3: The cheetah removes from the board one of the pieces of the sheep whenever at least one animal eats the food that belongs to the ferret\nrule3() = eat_food(animal, food_of(ferret)) => remove(cheetah, piece_of(sheep))\n# Rule4: The sheep unquestionably rolls the dice for the sea bass, in the case where the cheetah removes one of the pieces of the sheep\nrule4() = remove(cheetah, piece_of(sheep)) => roll_dice(sheep, sea_bass)\n# Rule5: If the sea bass has more than 2 friends, then the sea bass owes $$$ to the spider\nrule5() = friends(sea_bass) > 2 => owes_money_to(sea_bass, spider)\n# Rule6: If you are positive that you saw one of the animals proceeds to the spot that is right after the spot of the viperfish, you can be certain that it will also learn elementary resource management from the sea bass\nrule6(something) = proceed(something, spot_right_after(spot_of(viperfish))) => learn_elementary_resource_management(something, sea_bass)\n# Rule7: Regarding the snail, if it has a name whose first letter is the same as the first letter of the aardvark's name, then we can conclude that it proceeds to the spot that is right after the spot of the viperfish\nrule7() = first_letter_of(name(snail)) == first_letter_of(name(aardvark)) => proceed(snail, spot_right_after(spot_of(viperfish)))\n# Rule8: Regarding the polar bear, if it has a name whose first letter is the same as the first letter of the donkey's name, then we can conclude that it does not need the support of the sheep\nrule8() = first_letter_of(name(polar_bear)) == first_letter_of(name(donkey)) => not need_support(polar_bear, sheep)\n# Rule9: If you are positive that you saw one of the animals owes $$$ to the catfish, you can be certain that it will also eat the food of the squirrel\nrule9(something) = owes_money_to(something, catfish) => eat_food(something, food_of(squirrel))\n# Rule10: If something does not roll the dice for the whale, then it does not show her cards (all of them) to the salmon\nrule10(something) = not roll_dice(something, whale) => not show_all_cards(something, salmon)\n# Rule11: If something offers a job to the panther, then it does not owe money to the catfish\nrule11(something) = offer_job(something, panther) => not owes_money_to(something, catfish)\n# Rule12: Regarding the cheetah, if it has a card with a primary color, then we can conclude that it does not remove one of the pieces of the sheep\nrule12() = has(cheetah, card_with(primary_color)) => not remove(cheetah, piece_of(sheep))\n# Rule13: If you see that something eats the food that belongs to the squirrel and shows her cards (all of them) to the salmon, what can you certainly conclude? You can conclude that it also shows all her cards to the dog\nrule13(something) = eat_food(something, food_of(squirrel)) & show_all_cards(something, salmon) => show_all_cards(something, dog)\n# Rule14: If you are positive that you saw one of the animals owes $$$ to the spider, you can be certain that it will also show all her cards to the salmon\nrule14(something) = owes_money_to(something, spider) => show_all_cards(something, salmon)\n# Rule15: If the cheetah purchased a time machine, then the cheetah does not remove one of the pieces of the sheep\nrule15() = purchased_time_machine(cheetah) => not remove(cheetah, piece_of(sheep))\n# Rule16: The sheep will not roll the dice for the sea bass, in the case where the polar bear does not need support from the sheep\nrule16() = not need_support(polar_bear, sheep) => not roll_dice(sheep, sea_bass)\n# Rule17: If something raises a peace flag for the sheep, then it does not owe $$$ to the spider.\nrule17(something) = raise_flag_of_peace(something, sheep) => not owes_money_to(something, spider)\n# Rule10 is preferred over Rule14\norder(rule10) > order(rule14) = True\n# Rule12 is preferred over Rule3\norder(rule12) > order(rule3) = True\n# Rule13 is preferred over Rule1\norder(rule13) > order(rule1) = True\n# Rule15 is preferred over Rule3\norder(rule15) > order(rule3) = True\n# Rule16 is preferred over Rule4\norder(rule16) > order(rule4) = True\n# Rule17 is preferred over Rule5\norder(rule17) > order(rule5) = True\n\n# The current state of the game is as follows\n# The aardvark is named Milo\nname(aardvark, Milo) = True\n# The cheetah invented a time machine\npurchased_time_machine(cheetah) = True\n# The donkey is named Teddy\nname(donkey, Teddy) = True\n# The polar bear is named Tessa\nname(polar_bear, Tessa) = True\n# The raven eats the food of the ferret\neat_food(raven, food_of(ferret)) = True\n# The sea bass has seven friends, and does not offer a job to the panther\nfriends(sea_bass) = 7\nnot offer_job(sea_bass, panther) = True\n# The snail has four friends that are adventurous and one friend that is not\nfriends(snail) = 4 adventurous + 1 not adventurous\n# The snail is named Max\nname(snail, Max) = True\n\n# Based on the game state and the rules and preferences, does the sea bass show all her cards to the dog?\nquestion = show_all_cards(sea_bass, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not proceed to the spot that is right after the spot of the panther, then it eats the food that belongs to the caterpillar\nRule2: If the eagle has a card with a primary color, then it respects the halibut\nRule3: If the eagle owns a luxury aircraft, then it does not respect the halibut\nRule4: If something does not respect the halibut and also does not learn the basics of resource management from the parrot, then it does not proceed to the spot that is right after the spot of the panther\nRule5: If the name of the eagle starts with the same letter as the name of the bat, then the eagle respects the halibut\nRule6: If at least one animal winks at the cheetah, then the eagle does not learn elementary resource management from the parrot\n\nRule2 is preferred over Rule3\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe bat is named Max\nThe doctorfish winks at the cheetah\nThe eagle has a card that is black in color\nThe eagle purchased a luxury aircraft\n\nBased on the game state and the rules and preferences, does the eagle eat the food of the caterpillar?\nQuestion: Does the eagle eat the food of the caterpillar?",
        "idx": 303,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not proceed to the spot that is right after the spot of the panther, then it eats the food that belongs to the caterpillar\nrule1() = not proceed(something, spot_right_after(spot_of(panther))) => eat_food(something, food_of(caterpillar))\n# Rule2: Regarding the eagle, if it has a card with a primary color, then we can conclude that it respects the halibut\nrule2() = has(eagle, card_with(primary_color)) => respects(eagle, halibut)\n# Rule3: Regarding the eagle, if it owns a luxury aircraft, then we can conclude that it does not respect the halibut\nrule3() = owns(eagle, luxury_aircraft) => not respects(eagle, halibut)\n# Rule4: Be careful when something does not respect the halibut and also does not learn the basics of resource management from the parrot because in this case it will surely not proceed to the spot that is right after the spot of the panther (this may or may not be problematic)\nrule4(something) = not respects(something, halibut) & not learn_basics_of_resource_management(something, parrot) => not proceed(something, spot_right_after(spot_of(panther)))\n# Rule5: If the eagle has a name whose first letter is the same as the first letter of the bat's name, then the eagle respects the halibut\nrule5() = first_letter_of(name(eagle)) == first_letter_of(name(bat)) => respects(eagle, halibut)\n# Rule6: The eagle does not learn elementary resource management from the parrot whenever at least one animal winks at the cheetah.\nrule6() = winks_at(animal, cheetah) => not learn_elementary_resource_management(eagle, parrot)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The bat is named Max\nname(bat, Max) = True\n# The doctorfish winks at the cheetah\nwinks_at(doctorfish, cheetah) = True\n# The eagle has a card that is black in color\nhas(eagle, card_with(black_color)) = True\n# The eagle purchased a luxury aircraft\nowns(eagle, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the eagle eat the food of the caterpillar?\nquestion = eat_food(eagle, food_of(caterpillar))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the starfish knocks down the fortress that belongs to the parrot, then the parrot offers a job position to the oscar\nRule2: If the parrot offers a job position to the oscar, then the oscar does not steal five points from the kudu\nRule3: If the oscar has a card whose color starts with the letter \"o\", then it does not burn the warehouse that is in possession of the hippopotamus\nRule4: If the oscar has a name whose first letter is the same as the first letter of the canary's name, then it knocks down the fortress that belongs to the lion\nRule5: If the hummingbird learns the basics of resource management from the grizzly bear, then the grizzly bear does not learn the basics of resource management from the oscar\nRule6: If the puffin has something to sit on, then it becomes an enemy of the oscar\nRule7: If the mosquito shows her cards to the oscar and the grizzly bear does not learn elementary resource management from the oscar, then the oscar will never roll the dice for the carp\nRule8: If the oscar has a leafy green vegetable, then it burns the warehouse of the hippopotamus\nRule9: If the oscar does not have her keys, then it knocks down the fortress that belongs to the lion\nRule10: If something rolls the dice for the carp, then it does not roll the dice for the doctorfish\nRule11: The oscar does not roll the dice for the goldfish, in the case where the puffin becomes an enemy of the oscar\nRule12: If one of the animals knocks down the fortress of the lion, then it will also roll the dice for the carp\nRule13: If the oscar has something to carry apples and oranges, then it does not knock down the fortress of the lion\nRule14: If the oscar has something to drink, then it does not burn the warehouse of the hippopotamus\n\nRule14 is preferred over Rule8\nRule3 is preferred over Rule8\nRule4 is preferred over Rule13\nRule7 is preferred over Rule12\nRule9 is preferred over Rule13\n\nThe current state of the game is as follows\nThe canary is named Beauty\nThe hummingbird learns the basics of resource management from the grizzly bear\nThe oscar has 13 friends, a backpack, a card that is orange in color, some arugula, and is named Lucy\nThe oscar has a basket\nThe oscar lost her keys\nThe puffin has a bench\nThe starfish knocks down the fortress of the parrot\n\nBased on the game state and the rules and preferences, does the oscar roll the dice for the doctorfish?\nQuestion: Does the oscar roll the dice for the doctorfish?",
        "idx": 304,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the starfish knocks down the fortress that belongs to the parrot, then the parrot offers a job position to the oscar\nrule1() = knock_down(fortress_of(parrot), starfish) => offer_job_position(parrot, oscar)\n# Rule2: If the parrot offers a job position to the oscar, then the oscar is not going to steal five of the points of the kudu\nrule2() = offer_job_position(parrot, oscar) => not steal_points(oscar, 5, kudu)\n# Rule3: Regarding the oscar, if it has a card whose color starts with the letter \"o\", then we can conclude that it does not burn the warehouse that is in possession of the hippopotamus\nrule3() = has(oscar, card_with(color_starting_with(\"o\"))) => not burn(warehouse_of(hippopotamus))\n# Rule4: Regarding the oscar, if it has a name whose first letter is the same as the first letter of the canary's name, then we can conclude that it knocks down the fortress that belongs to the lion\nrule4() = first_letter_of(name(oscar)) == first_letter_of(name(canary)) => knock_down(fortress_of(lion), oscar)\n# Rule5: If the hummingbird learns the basics of resource management from the grizzly bear, then the grizzly bear is not going to learn the basics of resource management from the oscar\nrule5() = learn_basics_of_resource_management(hummingbird, grizzly_bear) => not learn_basics_of_resource_management(grizzly_bear, oscar)\n# Rule6: If the puffin has something to sit on, then the puffin becomes an enemy of the oscar\nrule6() = has(puffin, something_to_sit_on) => enemy(puffin, oscar)\n# Rule7: If the mosquito shows her cards (all of them) to the oscar and the grizzly bear does not learn elementary resource management from the oscar, then the oscar will never roll the dice for the carp\nrule7() = show_cards(mosquito, oscar) & not learn_elementary_resource_management(grizzly_bear, oscar) => never_roll_dice(oscar, carp)\n# Rule8: Regarding the oscar, if it has a leafy green vegetable, then we can conclude that it burns the warehouse of the hippopotamus\nrule8() = has(oscar, leafy_green_vegetable) => burn(warehouse_of(hippopotamus))\n# Rule9: Regarding the oscar, if it does not have her keys, then we can conclude that it knocks down the fortress that belongs to the lion\nrule9() = not has(oscar, keys) => knock_down(fortress_of(lion), oscar)\n# Rule10: If something rolls the dice for the carp, then it does not roll the dice for the doctorfish\nrule10(something) = roll_dice(something, carp) => not roll_dice(something, doctorfish)\n# Rule11: The oscar does not roll the dice for the goldfish, in the case where the puffin becomes an enemy of the oscar\nrule11() = enemy(puffin, oscar) => not roll_dice(oscar, goldfish)\n# Rule12: If you are positive that you saw one of the animals knocks down the fortress of the lion, you can be certain that it will also roll the dice for the carp\nrule12(something) = knock_down(fortress_of(lion), something) => roll_dice(something, carp)\n# Rule13: Regarding the oscar, if it has something to carry apples and oranges, then we can conclude that it does not knock down the fortress of the lion\nrule13() = has(oscar, something_to_carry_apples_and_oranges) => not knock_down(fortress_of(lion), oscar)\n# Rule14: If the oscar has something to drink, then the oscar does not burn the warehouse that is in possession of the hippopotamus.\nrule14() = has(oscar, something_to_drink) => not burn(warehouse_of(hippopotamus))\n# Rule14 is preferred over Rule8\norder(rule14) > order(rule8) = True\n# Rule3 is preferred over Rule8\norder(rule3) > order(rule8) = True\n# Rule4 is preferred over Rule13\norder(rule4) > order(rule13) = True\n# Rule7 is preferred over Rule12\norder(rule7) > order(rule12) = True\n# Rule9 is preferred over Rule13\norder(rule9) > order(rule13) = True\n\n# The current state of the game is as follows\n# The canary is named Beauty\nname(canary, Beauty) = True\n# The hummingbird learns the basics of resource management from the grizzly bear\nlearn_basics_of_resource_management(hummingbird, grizzly_bear) = True\n# The oscar has 13 friends, has a backpack, has a card that is orange in color, has some arugula, and is named Lucy\nfriends(oscar) = 13\nhas(oscar, backpack) = True\nhas(oscar, card_with(orange_color)) = True\nhas(oscar, arugula) = True\nname(oscar, Lucy) = True\n# The oscar has a basket\nhas(oscar, basket) = True\n# The oscar lost her keys\nnot has(oscar, keys) = True\n# The puffin has a bench\nhas(puffin, bench) = True\n# The starfish knocks down the fortress of the parrot\nknock_down(fortress_of(parrot), starfish) = True\n\n# Based on the game state and the rules and preferences, does the oscar roll the dice for the doctorfish?\nquestion = roll_dice(oscar, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo has a card whose color starts with the letter \"l\", then the buffalo sings a song of victory for the zander\nRule2: If the halibut has a card whose color appears in the flag of Belgium, then the halibut does not sing a song of victory for the canary\nRule3: If the halibut does not sing a song of victory for the canary, then the canary steals five points from the cricket\nRule4: If at least one animal respects the cheetah, then the cricket does not respect the cat\nRule5: If the buffalo sings a victory song for the zander, then the zander gives a magnifier to the cricket\nRule6: If something steals five points from the penguin but does not burn the warehouse of the sheep, then it does not sing a song of victory for the zander\nRule7: If the canary steals five points from the cricket and the zander gives a magnifier to the cricket, then the cricket respects the cat\nRule8: If the buffalo created a time machine, then the buffalo sings a song of victory for the zander\n\nRule1 is preferred over Rule6\nRule4 is preferred over Rule7\nRule8 is preferred over Rule6\n\nThe current state of the game is as follows\nThe buffalo has a card that is orange in color and has invented a time machine\nThe buffalo steals five points from the penguin\nThe catfish sings a victory song for the swordfish\nThe halibut has a card that is indigo in color\n\nBased on the game state and the rules and preferences, does the cricket respect the cat?\nQuestion: Does the cricket respect the cat?",
        "idx": 305,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the buffalo has a card whose color starts with the letter \"l\", then the buffalo sings a song of victory for the zander\nrule1() = starts_with(color(card_of(buffalo)), \"l\") => sing_song(buffalo, victory_song_for(zander))\n# Rule2: If the halibut has a card whose color appears in the flag of Belgium, then the halibut does not sing a song of victory for the canary\nrule2() = color(card_of(halibut)) in colors_of(flag_of(Belgium)) => not sing_song(halibut, victory_song_for(canary))\n# Rule3: If the halibut does not sing a song of victory for the canary, then the canary steals five of the points of the cricket\nrule3() = not sing_song(halibut, victory_song_for(canary)) => steal_points(canary, 5, cricket)\n# Rule4: If at least one animal respects the cheetah, then the cricket does not respect the cat\nrule4() = respects(something, cheetah) => not respect(cricket, cat)\n# Rule5: If the buffalo sings a victory song for the zander, then the zander gives a magnifier to the cricket\nrule5() = sing_song(buffalo, victory_song_for(zander)) => give(zander, magnifier, cricket)\n# Rule6: Be careful when something steals five of the points of the penguin but does not burn the warehouse of the sheep because in this case it will, surely, not sing a song of victory for the zander (this may or may not be problematic)\nrule6(something) = steal_points(something, 5, penguin) & not burn(warehouse_of(sheep)) => not sing_song(something, victory_song_for(zander))\n# Rule7: For the cricket, if the belief is that the canary steals five points from the cricket and the zander gives a magnifier to the cricket, then you can add \"the cricket respects the cat\" to your conclusions\nrule7() = belief(steal_points(canary, 5, cricket) & give(zander, magnifier, cricket)) => respect(cricket, cat)\n# Rule8: If the buffalo created a time machine, then the buffalo sings a song of victory for the zander.\nrule8() = created_time_machine(buffalo) => sing_song(buffalo, victory_song_for(zander))\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule4 is preferred over Rule7\norder(rule4) > order(rule7) = True\n# Rule8 is preferred over Rule6\norder(rule8) > order(rule6) = True\n\n# The current state of the game is as follows\n# The buffalo has a card that is orange in color, and invented a time machine\nhas(buffalo, card_with(orange_color)) = True\ninvented_time_machine(buffalo) = True\n# The buffalo steals five points from the penguin\nsteal_points(buffalo, 5, penguin) = True\n# The catfish sings a victory song for the swordfish\nsing_song(catfish, victory_song_for(swordfish)) = True\n# The halibut has a card that is indigo in color\nhas(halibut, card_with(indigo_color)) = True\n\n# Based on the game state and the rules and preferences, does the cricket respect the cat?\nquestion = respect(cricket, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the jellyfish starts with the same letter as the name of the elephant, then the jellyfish raises a flag of peace for the hare\nRule2: If you saw one of the animals offer a job to the pig, then it will also eat the food of the amberjack\nRule3: If something raises a flag of peace for the hare, then it also offers a job position to the pig\nRule4: If the jellyfish has fewer than eight friends, then it raises a flag of peace for the hare\n\nThe current state of the game is as follows\nThe elephant is named Peddi\nThe jellyfish has 15 friends\nThe jellyfish is named Pashmak\n\nBased on the game state and the rules and preferences, does the jellyfish eat the food of the amberjack?\nQuestion: Does the jellyfish eat the food of the amberjack?",
        "idx": 306,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the jellyfish has a name whose first letter is the same as the first letter of the elephant's name, then the jellyfish raises a flag of peace for the hare\nrule1() = first_letter_of(name(jellyfish)) == first_letter_of(name(elephant)) => raise_flag_of_peace(jellyfish, hare)\n# Rule2: If you are positive that you saw one of the animals offers a job to the pig, you can be certain that it will also eat the food of the amberjack\nrule2(something) = offer_job_position(something, pig) => eat_food(something, amberjack)\n# Rule3: If something raises a peace flag for the hare, then it offers a job position to the pig, too\nrule3(something) = raise_flag_of_peace(something, hare) => offer_job_position(something, pig)\n# Rule4: Regarding the jellyfish, if it has fewer than eight friends, then we can conclude that it raises a flag of peace for the hare.\nrule4() = friends(jellyfish) < 8 => raise_flag_of_peace(jellyfish, hare)\n\n# The current state of the game is as follows\n# The elephant is named Peddi\nname(elephant, Peddi) = True\n# The jellyfish has 15 friends\nfriends(jellyfish) = 15\n# The jellyfish is named Pashmak\nname(jellyfish, Pashmak) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish eat the food of the amberjack?\nquestion = eat_food(jellyfish, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The phoenix eats the food of the penguin whenever at least one animal shows all her cards to the penguin\nRule2: If the snail needs the support of the dog, then the dog shows all her cards to the penguin\nRule3: If at least one animal eats the food of the penguin, then the lion does not proceed to the spot right after the spot of the eel.\n\nThe current state of the game is as follows\nThe dog recently reduced her work hours\nThe snail needs support from the dog\n\nBased on the game state and the rules and preferences, does the lion proceed to the spot right after the eel?\nQuestion: Does the lion proceed to the spot right after the eel?",
        "idx": 307,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The phoenix eats the food of the penguin whenever at least one animal shows her cards (all of them) to the penguin\nrule1() = show_cards(something, penguin) => eat_food(phoenix, penguin)\n# Rule2: If the snail needs the support of the dog, then the dog shows her cards (all of them) to the penguin\nrule2() = needs_support(snail, dog) => show_cards(dog, penguin)\n# Rule3: If at least one animal eats the food of the penguin, then the lion does not proceed to the spot that is right after the spot of the eel.\nrule3() = eat_food(something, penguin) => not proceed(lion, spot_right_after(spot_of(eel)))\n\n# The current state of the game is as follows\n# The dog reduced her work hours recently\nreduce_work_hours(dog) = True\n# The snail needs support from the dog\nneeds_support(snail, dog) = True\n\n# Based on the game state and the rules and preferences, does the lion proceed to the spot right after the eel?\nquestion = proceed(lion, spot_right_after(spot_of(eel)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not burn the warehouse that is in possession of the donkey, then it proceeds to the spot that is right after the spot of the rabbit\nRule2: If at least one animal knows the defense plan of the whale, then the koala does not burn the warehouse that is in possession of the donkey\nRule3: The koala does not proceed to the spot right after the rabbit whenever at least one animal removes from the board one of the pieces of the elephant\nRule4: If something owes money to the puffin, then it knows the defensive plans of the whale as well\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe eel removes from the board one of the pieces of the puffin\n\nBased on the game state and the rules and preferences, does the koala proceed to the spot right after the rabbit?\nQuestion: Does the koala proceed to the spot right after the rabbit?",
        "idx": 308,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not burn the warehouse that is in possession of the donkey, then it proceeds to the spot that is right after the spot of the rabbit\nrule1() = not burn(warehouse_of(donkey), something) => proceed(something, spot_right_after(spot_of(rabbit)))\n# Rule2: If at least one animal knows the defense plan of the whale, then the koala does not burn the warehouse that is in possession of the donkey\nrule2() = knows(defense_plan_of(whale), something) => not burn(warehouse_of(donkey), koala)\n# Rule3: The koala does not proceed to the spot right after the rabbit whenever at least one animal removes from the board one of the pieces of the elephant\nrule3() = remove(something, piece_of(elephant)) => not proceed(koala, spot_right_after(spot_of(rabbit)))\n# Rule4: If something owes $$$ to the puffin, then it knows the defensive plans of the whale, too.\nrule4(something) = owes_money_to(something, puffin) => knows(defensive_plans_of(whale), something)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The eel removes from the board one of the pieces of the puffin\nremove(eel, piece_of(puffin)) = True\n\n# Based on the game state and the rules and preferences, does the koala proceed to the spot right after the rabbit?\nquestion = proceed(koala, spot_right_after(spot_of(rabbit)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the crocodile does not give a magnifier to the lion, then the lion knocks down the fortress of the zander\nRule2: If at least one animal attacks the green fields owned by the moose, then the crocodile does not give a magnifier to the lion\nRule3: If you are positive that you saw one of the animals knock down the fortress of the zander, you can be certain that it will also sing a victory song for the wolverine\nRule4: If something does not steal five points from the tiger, then it does not knock down the fortress that belongs to the zander\n\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe phoenix attacks the green fields owned by the moose\nThe panda bear does not steal five points from the crocodile\n\nBased on the game state and the rules and preferences, does the lion sing a victory song for the wolverine?\nQuestion: Does the lion sing a victory song for the wolverine?",
        "idx": 309,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the crocodile does not give a magnifier to the lion, then the lion knocks down the fortress of the zander\nrule1() = not give_magnifier(crocodile, lion) => knock_down_fortress(lion, zander)\n# Rule2: If at least one animal attacks the green fields whose owner is the moose, then the crocodile does not give a magnifier to the lion\nrule2() = attack_green_fields(something, moose) => not give_magnifier(crocodile, lion)\n# Rule3: If you are positive that you saw one of the animals knocks down the fortress of the zander, you can be certain that it will also sing a victory song for the wolverine\nrule3(something) = knock_down_fortress(something, zander) => sing_song(something, victory_song_for(wolverine))\n# Rule4: If something does not steal five of the points of the tiger, then it does not knock down the fortress that belongs to the zander.\nrule4() = not steal_points(something, 5, tiger) => not knock_down_fortress(something, zander)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The phoenix attacks the green fields whose owner is the moose\nattack_green_fields(phoenix, moose) = True\n# The panda bear does not steal five points from the crocodile\nnot steal_points(panda_bear, 5, crocodile) = True\n\n# Based on the game state and the rules and preferences, does the lion sing a victory song for the wolverine?\nquestion = sing_song(lion, victory_song_for(wolverine))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The blobfish sings a victory song for the sun bear, in the case where the zander eats the food that belongs to the blobfish\nRule2: If the blobfish has published a high-quality paper, then it does not prepare armor for the dog\nRule3: The zander eats the food that belongs to the blobfish whenever at least one animal holds the same number of points as the bat\nRule4: If the snail has a leafy green vegetable, then it attacks the green fields of the blobfish\nRule5: If at least one animal eats the food of the carp, then the dog sings a victory song for the blobfish\nRule6: If something rolls the dice for the swordfish, then it sings a song of victory for the sea bass, too\nRule7: If the dog sings a victory song for the blobfish, then the blobfish needs the support of the zander\nRule8: If something sings a song of victory for the sea bass, then it respects the kiwi, too\nRule9: The zander will not eat the food of the blobfish, in the case where the oscar does not raise a peace flag for the zander\nRule10: If the snail does not attack the green fields whose owner is the blobfish and the meerkat does not wink at the blobfish, then the blobfish will never sing a victory song for the sun bear\nRule11: If the blobfish has a card whose color is one of the rainbow colors, then it prepares armor for the dog\nRule12: If something prepares armor for the dog, then it does not need support from the zander\nRule13: If something does not knock down the fortress of the pig, then it does not attack the green fields of the blobfish\nRule14: If at least one animal respects the kiwi, then it does not knock down the fortress that belongs to the baboon\nRule15: If the blobfish has something to drink, then it does not prepare armor for the dog\n\nRule10 is preferred over Rule1\nRule13 is preferred over Rule4\nRule15 is preferred over Rule11\nRule2 is preferred over Rule11\nRule7 is preferred over Rule12\nRule9 is preferred over Rule3\n\nThe current state of the game is as follows\nThe blobfish has a card that is yellow in color\nThe blobfish recently read a high-quality paper\nThe blobfish rolls the dice for the swordfish\nThe polar bear holds the same number of points as the bat\nThe puffin eats the food of the carp\nThe snail has one playful friend and eight non-playful friends\nThe snail has kale\nThe snail does not knock down the fortress of the pig\n\nBased on the game state and the rules and preferences, does the blobfish knock down the fortress of the baboon?\nQuestion: Does the blobfish knock down the fortress of the baboon?",
        "idx": 310,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The blobfish unquestionably sings a victory song for the sun bear, in the case where the zander eats the food that belongs to the blobfish\nrule1() = eat_food(zander, food_of(blobfish)) => sing_song(blobfish, victory_song_for(sun_bear))\n# Rule2: If the blobfish has published a high-quality paper, then the blobfish does not prepare armor for the dog\nrule2() = published_high_quality_paper(blobfish) => not prepare_armor(blobfish, dog)\n# Rule3: The zander eats the food that belongs to the blobfish whenever at least one animal holds the same number of points as the bat\nrule3() = holds_same_points_as(something, bat) => eat_food(zander, food_of(blobfish))\n# Rule4: If the snail has a leafy green vegetable, then the snail attacks the green fields of the blobfish\nrule4() = has(snail, leafy_green_vegetable) => attack_green_fields(snail, green_fields_of(blobfish))\n# Rule5: If at least one animal eats the food of the carp, then the dog sings a victory song for the blobfish\nrule5() = eat_food(something, food_of(carp)) => sing_song(dog, victory_song_for(blobfish))\n# Rule6: If something rolls the dice for the swordfish, then it sings a song of victory for the sea bass, too\nrule6(something) = roll_dice(something, swordfish) => sing_song(something, victory_song_for(sea_bass))\n# Rule7: If the dog sings a victory song for the blobfish, then the blobfish needs the support of the zander\nrule7() = sing_song(dog, victory_song_for(blobfish)) => needs_support(blobfish, zander)\n# Rule8: If something sings a song of victory for the sea bass, then it respects the kiwi, too\nrule8(something) = sing_song(something, victory_song_for(sea_bass)) => respects(something, kiwi)\n# Rule9: The zander will not eat the food of the blobfish, in the case where the oscar does not raise a peace flag for the zander\nrule9() = not raise_flag_of_peace(oscar, zander) => not eat_food(zander, food_of(blobfish))\n# Rule10: If the snail does not attack the green fields whose owner is the blobfish and the meerkat does not wink at the blobfish, then the blobfish will never sing a victory song for the sun bear\nrule10() = not attack_green_fields(snail, green_fields_of(blobfish)) & not wink(meerkat, blobfish) => never_sing_song(blobfish, victory_song_for(sun_bear))\n# Rule11: Regarding the blobfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it prepares armor for the dog\nrule11() = has(blobfish, card_with(rainbow_color)) => prepare_armor(blobfish, dog)\n# Rule12: If something prepares armor for the dog, then it does not need support from the zander\nrule12() = prepare_armor(something, dog) => not needs_support(something, zander)\n# Rule13: If something does not knock down the fortress of the pig, then it does not attack the green fields of the blobfish\nrule13() = not knock_down(something, fortress_of(pig)) => not attack_green_fields(something, green_fields_of(blobfish))\n# Rule14: If you are positive that you saw one of the animals respects the kiwi, you can be certain that it will not knock down the fortress that belongs to the baboon\nrule14(something) = respects(something, kiwi) => not knock_down(something, fortress_of(baboon))\n# Rule15: Regarding the blobfish, if it has something to drink, then we can conclude that it does not prepare armor for the dog.\nrule15() = has(blobfish, drink) => not prepare_armor(blobfish, dog)\n# Rule10 is preferred over Rule1\norder(rule10) > order(rule1) = True\n# Rule13 is preferred over Rule4\norder(rule13) > order(rule4) = True\n# Rule15 is preferred over Rule11\norder(rule15) > order(rule11) = True\n# Rule2 is preferred over Rule11\norder(rule2) > order(rule11) = True\n# Rule7 is preferred over Rule12\norder(rule7) > order(rule12) = True\n# Rule9 is preferred over Rule3\norder(rule9) > order(rule3) = True\n\n# The current state of the game is as follows\n# The blobfish has a card that is yellow in color\nhas(blobfish, card_with(yellow_color)) = True\n# The blobfish recently read a high-quality paper, and rolls the dice for the swordfish\nrecently_read_high_quality_paper(blobfish) = True\nroll_dice(blobfish, swordfish) = True\n# The polar bear holds the same number of points as the bat\nholds_same_points_as(polar_bear, bat) = True\n# The puffin eats the food of the carp\neat_food(puffin, food_of(carp)) = True\n# The snail has one friend that is playful and eight friends that are not, has some kale, and does not knock down the fortress of the pig\nfriends(snail) == 1 & not friends(snail) == 8 & has(snail, kale) & not knock_down(snail, fortress_of(pig)) = True\n\n# Based on the game state and the rules and preferences, does the blobfish knock down the fortress of the baboon?\nquestion = knock_down(blobfish, fortress_of(baboon))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the bat removes one of the pieces of the black bear, then the black bear proceeds to the spot right after the moose\nRule2: If at least one animal steals five points from the turtle, then the moose does not proceed to the spot right after the puffin\nRule3: If one of the animals winks at the hare, it will not become an enemy of the baboon\nRule4: If something sings a victory song for the starfish, it becomes an enemy of the cockroach\nRule5: If the grasshopper rolls the dice for the hippopotamus, the hippopotamus does not become an enemy of the cockroach\nRule6: If the kudu needs the support of the moose, the moose holds the same number of points as the squirrel\nRule7: If one of the animals does not proceed to the spot right after the puffin, it will remove one of the pieces of the caterpillar\nRule8: If one of the animals winks at the oscar, it will also steal five points from the pig\nRule9: If one of the animals holds an equal number of points as the kangaroo, it will also need support from the moose\nRule10: The moose becomes an actual enemy of the baboon whenever at least one animal steals five points from the pig\nRule11: If the tiger is a fan of Chris Ronaldo, it offers a job position to the moose\nRule12: The moose does not remove one of the pieces of the caterpillar whenever at least one animal becomes an actual enemy of the cockroach\nRule13: If something proceeds to the spot right after the spot of the baboon and holds an equal number of points as the squirrel, it will give a magnifier to the elephant\n\nRule3 is preferred over Rule10\nRule5 is preferred over Rule4\nRule7 is preferred over Rule12\n\nThe current state of the game is as follows\nThe bat removes one of the pieces of the black bear\nThe buffalo has a knapsack\nThe buffalo winks at the oscar\nThe catfish steals five points from the turtle\nThe hippopotamus sings a victory song for the starfish\nThe kudu holds the same number of points as the kangaroo\nThe kudu is named Peddi\nThe phoenix owes money to the black bear\nThe tiger is named Pablo\nThe tiger supports Chris Ronaldo\n\nBased on the game state and the rules and preferences, does the moose give a magnifier to the elephant?\nQuestion: Does the moose give a magnifier to the elephant?",
        "idx": 311,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the bat removes one of the pieces of the black bear, then the black bear proceeds to the spot right after the moose\nrule1() = remove(bat, piece_of(black_bear)) => proceed(black_bear, spot_right_after(spot_of(moose)))\n# Rule2: If at least one animal steals five points from the turtle, then the moose does not proceed to the spot right after the puffin\nrule2() = steal_points(something, turtle, 5) => not proceed(moose, spot_right_after(spot_of(puffin)))\n# Rule3: If you are positive that you saw one of the animals winks at the hare, you can be certain that it will not become an enemy of the baboon\nrule3(something) = winks_at(something, hare) => not enemy(something, baboon)\n# Rule4: If something sings a victory song for the starfish, then it becomes an enemy of the cockroach, too\nrule4(something) = sing_song(something, victory_song_for(starfish)) => enemy(something, cockroach)\n# Rule5: If the grasshopper rolls the dice for the hippopotamus, then the hippopotamus is not going to become an enemy of the cockroach\nrule5() = roll_dice(grasshopper, hippopotamus) => not enemy(hippopotamus, cockroach)\n# Rule6: The moose unquestionably holds the same number of points as the squirrel, in the case where the kudu needs the support of the moose\nrule6() = needs_support(kudu, moose) => points(moose) == points(squirrel)\n# Rule7: If you are positive that one of the animals does not proceed to the spot right after the puffin, you can be certain that it will remove from the board one of the pieces of the caterpillar without a doubt\nrule7(something) = not proceed(something, spot_right_after(spot_of(puffin))) => remove(something, piece_of(caterpillar))\n# Rule8: If you are positive that you saw one of the animals winks at the oscar, you can be certain that it will also steal five points from the pig\nrule8(something) = winks_at(something, oscar) => steal_points(something, pig, 5)\n# Rule9: If you are positive that you saw one of the animals holds an equal number of points as the kangaroo, you can be certain that it will also need support from the moose\nrule9(something) = points(something) == points(kangaroo) => needs_support(something, moose)\n# Rule10: The moose becomes an actual enemy of the baboon whenever at least one animal steals five points from the pig\nrule10() = steal_points(something, pig, 5) => enemy(moose, baboon)\n# Rule11: Regarding the tiger, if it is a fan of Chris Ronaldo, then we can conclude that it offers a job position to the moose\nrule11() = fan_of(tiger, Chris_Ronaldo) => offer_job_position(tiger, moose)\n# Rule12: The moose does not remove from the board one of the pieces of the caterpillar whenever at least one animal becomes an actual enemy of the cockroach\nrule12() = enemy(something, cockroach) => not remove(moose, piece_of(caterpillar))\n# Rule13: Be careful when something proceeds to the spot that is right after the spot of the baboon and also holds an equal number of points as the squirrel because in this case it will surely give a magnifier to the elephant (this may or may not be problematic).\nrule13(something) = proceed(something, spot_right_after(spot_of(baboon))) & points(something) == points(squirrel) => give(something, magnifier, elephant)\n# Rule3 is preferred over Rule10\norder(rule3) > order(rule10) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n# Rule7 is preferred over Rule12\norder(rule7) > order(rule12) = True\n\n# The current state of the game is as follows\n# The bat removes from the board one of the pieces of the black bear\nremove(bat, piece_of(black_bear)) = True\n# The buffalo has a knapsack, and winks at the oscar\nhas(buffalo, knapsack) = True\nwinks_at(buffalo, oscar) = True\n# The catfish steals five points from the turtle\nsteal_points(catfish, turtle, 5) = True\n# The hippopotamus sings a victory song for the starfish\nsing_song(hippopotamus, victory_song_for(starfish)) = True\n# The kudu holds the same number of points as the kangaroo, and is named Peddi\npoints(kudu) == points(kangaroo) = True\nname(kudu, Peddi) = True\n# The phoenix owes money to the black bear\nowes_money_to(phoenix, black_bear) = True\n# The tiger is named Pablo\nname(tiger, Pablo) = True\n# The tiger supports Chris Ronaldo\nsupports(tiger, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the moose give a magnifier to the elephant?\nquestion = give(moose, magnifier, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the spider has a card whose color starts with the letter \"h\", then the spider does not give a magnifier to the goldfish\nRule2: If the tiger has a sharp object, then the tiger does not owe money to the spider\nRule3: If something raises a peace flag for the bat, then it knows the defensive plans of the kiwi, too\nRule4: If the canary rolls the dice for the spider and the tiger does not owe money to the spider, then the spider raises a peace flag for the bat\nRule5: If the spider has a name whose first letter is the same as the first letter of the eel's name, then it gives a magnifier to the goldfish\nRule6: If an animal does not learn elementary resource management from the ferret, then it will roll the dice for the spider\nRule7: If the tiger has more than ten friends, then it does not owe money to the spider\n\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe eel is named Lucy\nThe spider has a card that is white in color\nThe spider is named Luna\nThe spider lost her keys\nThe tiger has 1 friend and has a blade\nThe canary does not learn elementary resource management from the ferret\n\nBased on the game state and the rules and preferences, does the spider know the defensive plans of the kiwi?\nQuestion: Does the spider know the defensive plans of the kiwi?",
        "idx": 312,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the spider has a card whose color starts with the letter \"h\", then the spider does not give a magnifier to the goldfish\nrule1() = has(spider, card_with(color_starting_with(\"h\"))) => not give_magnifier(spider, goldfish)\n# Rule2: If the tiger has a sharp object, then the tiger does not owe money to the spider\nrule2() = has(tiger, sharp_object) => not owes_money_to(tiger, spider)\n# Rule3: If something raises a peace flag for the bat, then it knows the defensive plans of the kiwi, too\nrule3(something) = raise_flag_of_peace(something, bat) => knows_defensive_plans(something, kiwi)\n# Rule4: For the spider, if the belief is that the canary rolls the dice for the spider and the tiger does not owe $$$ to the spider, then you can add \"the spider raises a peace flag for the bat\" to your conclusions\nrule4() = belief(canary_rolls_dice_for(spider)) & not owes_money_to(tiger, spider) => raise_flag_of_peace(spider, bat)\n# Rule5: Regarding the spider, if it has a name whose first letter is the same as the first letter of the eel's name, then we can conclude that it gives a magnifier to the goldfish\nrule5() = first_letter_of(name(spider)) == first_letter_of(name(eel)) => give_magnifier(spider, goldfish)\n# Rule6: If you are positive that one of the animals does not learn elementary resource management from the ferret, you can be certain that it will roll the dice for the spider without a doubt\nrule6(something) = not learn_elementary_resource_management_from(something, ferret) => roll_dice_for(something, spider)\n# Rule7: Regarding the tiger, if it has more than ten friends, then we can conclude that it does not owe $$$ to the spider.\nrule7() = friends(tiger) > 10 => not owes_money_to(tiger, spider)\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The eel is named Lucy\nname(eel, Lucy) = True\n# The spider has a card that is white in color\nhas(spider, card_with(white_color)) = True\n# The spider is named Luna\nname(spider, Luna) = True\n# The spider lost her keys\nlost_keys(spider) = True\n# The tiger has 1 friend, and has a blade\nfriends(tiger) = 1\nhas(tiger, blade) = True\n# The canary does not learn the basics of resource management from the ferret\nlearn_elementary_resource_management_from(canary, ferret) = False\n\n# Based on the game state and the rules and preferences, does the spider know the defensive plans of the kiwi?\nquestion = knows_defensive_plans(spider, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The carp does not prepare armor for the kiwi whenever at least one animal offers a job position to the buffalo\nRule2: If one of the animals does not know the defensive plans of the aardvark, it will prepare armor for the kiwi without a doubt\nRule3: If at least one animal prepares armor for the kiwi, then the donkey eats the food that belongs to the polar bear\nRule4: If at least one animal eats the food of the polar bear, then the moose does not hold the same number of points as the salmon\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe carp does not know the defensive plans of the aardvark\n\nBased on the game state and the rules and preferences, does the moose hold the same number of points as the salmon?\nQuestion: Does the moose hold the same number of points as the salmon?",
        "idx": 313,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The carp does not prepare armor for the kiwi whenever at least one animal offers a job position to the buffalo\nrule1() = offer_job_position(something, buffalo) => not prepare_armor(carp, kiwi)\n# Rule2: If you are positive that one of the animals does not know the defensive plans of the aardvark, you can be certain that it will prepare armor for the kiwi without a doubt\nrule2(something) = not knows(defensive_plans_of(aardvark), something) => prepare_armor(something, kiwi)\n# Rule3: If at least one animal prepares armor for the kiwi, then the donkey eats the food that belongs to the polar bear\nrule3() = prepare_armor(something, kiwi) => eat_food(donkey, food_of(polar_bear))\n# Rule4: If at least one animal eats the food of the polar bear, then the moose does not hold an equal number of points as the salmon.\nrule4() = eat_food(something, food_of(polar_bear)) => not equal_points(moose, salmon)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The carp does not know the defensive plans of the aardvark\nknows(defensive_plans_of(aardvark), carp) = False\n\n# Based on the game state and the rules and preferences, does the moose hold the same number of points as the salmon?\nquestion = equal_points(moose, salmon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the snail winks at the amberjack and the kudu raises a peace flag for the amberjack, then the amberjack knows the defensive plans of the cat\nRule2: If the name of the snail starts with the same letter as the name of the cat, then the snail winks at the amberjack\nRule3: If the snail created a time machine, then the snail does not wink at the amberjack\nRule4: If the snail has a device to connect to the internet, then the snail winks at the amberjack\nRule5: If the kudu has more than 6 friends, then the kudu raises a peace flag for the amberjack\nRule6: If something respects the raven and rolls the dice for the canary, then it does not raise a peace flag for the amberjack\nRule7: If the kudu has a leafy green vegetable, then the kudu raises a peace flag for the amberjack\nRule8: If at least one animal knows the defensive plans of the cat, then the panther owes money to the carp\n\nRule2 is preferred over Rule3\nRule4 is preferred over Rule3\nRule6 is preferred over Rule5\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe cat is named Tarzan\nThe kudu has a cello\nThe kudu respects the raven\nThe kudu has two lazy friends and five non-lazy friends\nThe snail has a trumpet\nThe snail is named Luna\n\nBased on the game state and the rules and preferences, does the panther owe money to the carp?\nQuestion: Does the panther owe money to the carp?",
        "idx": 314,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the amberjack, if the belief is that the snail winks at the amberjack and the kudu raises a peace flag for the amberjack, then you can add \"the amberjack knows the defensive plans of the cat\" to your conclusions\nrule1() = wink(snail, amberjack) & raise_flag(kudu, peace_flag, amberjack) => knows_defensive_plans(amberjack, cat)\n# Rule2: Regarding the snail, if it has a name whose first letter is the same as the first letter of the cat's name, then we can conclude that it winks at the amberjack\nrule2() = first_letter_of(name(snail)) == first_letter_of(name(cat)) => wink(snail, amberjack)\n# Rule3: If the snail created a time machine, then the snail does not wink at the amberjack\nrule3() = created_time_machine(snail) => not wink(snail, amberjack)\n# Rule4: If the snail has a device to connect to the internet, then the snail winks at the amberjack\nrule4() = has(snail, connect_to_internet(device)) => wink(snail, amberjack)\n# Rule5: Regarding the kudu, if it has more than 6 friends, then we can conclude that it raises a flag of peace for the amberjack\nrule5() = friends(kudu) > 6 => raise_flag(kudu, peace_flag, amberjack)\n# Rule6: If you see that something respects the raven and rolls the dice for the canary, what can you certainly conclude? You can conclude that it does not raise a peace flag for the amberjack\nrule6(something) = respects(something, raven) & rolls_dice(something, canary) => not raise_flag(something, peace_flag, amberjack)\n# Rule7: Regarding the kudu, if it has a leafy green vegetable, then we can conclude that it raises a flag of peace for the amberjack\nrule7() = has(kudu, leafy_green_vegetable) => raise_flag(kudu, peace_flag, amberjack)\n# Rule8: The panther owes $$$ to the carp whenever at least one animal knows the defensive plans of the cat.\nrule8() = knows_defensive_plans(something, cat) => owes_money_to(panther, carp)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The cat is named Tarzan\nname(cat, Tarzan) = True\n# The kudu has a cello, and respects the raven\nhas(kudu, cello) = True\nrespects(kudu, raven) = True\n# The kudu has two friends that are lazy and five friends that are not\nfriends(kudu) = 7\n# The snail has a trumpet, and is named Luna\nhas(snail, trumpet) = True\nname(snail, Luna) = True\n\n# Based on the game state and the rules and preferences, does the panther owe money to the carp?\nquestion = owes_money_to(panther, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something winks at the phoenix, then it also rolls the dice for the cat\nRule2: If the squid has a card whose color appears in the flag of France, then the squid winks at the phoenix\nRule3: If the parrot has a card whose color is one of the rainbow colors, then the parrot holds an equal number of points as the lion\nRule4: The puffin does not steal five points from the cat whenever at least one animal holds an equal number of points as the lion\nRule5: If the squid rolls the dice for the cat and the puffin does not steal five points from the cat, then the cat raises a peace flag for the catfish\nRule6: If the name of the parrot starts with the same letter as the name of the kiwi, then the parrot holds an equal number of points as the lion\n\nThe current state of the game is as follows\nThe kiwi is named Cinnamon\nThe parrot has a card that is black in color\nThe parrot is named Charlie\nThe squid has a card that is red in color\n\nBased on the game state and the rules and preferences, does the cat raise a peace flag for the catfish?\nQuestion: Does the cat raise a peace flag for the catfish?",
        "idx": 315,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something winks at the phoenix, then it rolls the dice for the cat, too\nrule1() = wink(something, phoenix) => roll_dice(something, cat)\n# Rule2: If the squid has a card whose color appears in the flag of France, then the squid winks at the phoenix\nrule2() = has(squid, card_with(color_in_flag_of_france)) => wink(squid, phoenix)\n# Rule3: If the parrot has a card whose color is one of the rainbow colors, then the parrot holds an equal number of points as the lion\nrule3() = has(parrot, card_with(color_in_rainbow_colors)) => points(parrot) == points(lion)\n# Rule4: The puffin does not steal five of the points of the cat whenever at least one animal holds an equal number of points as the lion\nrule4() = exists(animal) such that points(animal) == points(lion) => not steal(puffin, 5_points, cat)\n# Rule5: For the cat, if the belief is that the squid rolls the dice for the cat and the puffin does not steal five points from the cat, then you can add \"the cat raises a flag of peace for the catfish\" to your conclusions\nrule5() = belief(squid_rolls_dice_for(cat)) & not steal(puffin, 5_points, cat) => raise_flag_of_peace(cat, catfish)\n# Rule6: Regarding the parrot, if it has a name whose first letter is the same as the first letter of the kiwi's name, then we can conclude that it holds an equal number of points as the lion.\nrule6() = first_letter_of(name(parrot)) == first_letter_of(name(kiwi)) => points(parrot) == points(lion)\n\n# The current state of the game is as follows\n# The kiwi is named Cinnamon\nname(kiwi, Cinnamon) = True\n# The parrot has a card that is black in color\nhas(parrot, card_with(black_color)) = True\n# The parrot is named Charlie\nname(parrot, Charlie) = True\n# The squid has a card that is red in color\nhas(squid, card_with(red_color)) = True\n\n# Based on the game state and the rules and preferences, does the cat raise a peace flag for the catfish?\nquestion = raise_flag_of_peace(cat, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the gecko has fewer than seven friends, then it raises a flag of peace for the sheep\nRule2: If the swordfish does not respect the cat, then the cat does not prepare armor for the panther\nRule3: If the cockroach does not learn the basics of resource management from the swordfish, then the swordfish does not hold the same number of points as the tiger\nRule4: If the rabbit has access to an abundance of food, then it winks at the baboon\nRule5: If the gecko removes one of the pieces of the cat and the koala steals five points from the cat, then the cat prepares armor for the panther\nRule6: If the koala has a musical instrument, then it does not offer a job position to the baboon\nRule7: If the penguin does not need the support of the koala, then the koala offers a job position to the baboon\nRule8: If something does not hold the same number of points as the tiger, then it does not respect the cat\nRule9: If something offers a job position to the baboon, then it steals five points from the cat\nRule10: If the koala has a device to connect to the internet, then it does not offer a job position to the baboon\nRule11: If at least one animal winks at the baboon, then the koala does not steal five points from the cat\nRule12: If at least one animal raises a flag of peace for the sheep, then it removes one of the pieces of the cat\nRule13: If the rabbit has something to carry apples and oranges, then it winks at the baboon\nRule14: If at least one animal raises a flag of peace for the koala, then the swordfish holds the same number of points as the tiger\nRule15: If the gecko has a card with a color from the rainbow, then it raises a peace flag for the sheep\n\nRule10 is preferred over Rule7\nRule2 is preferred over Rule5\nRule3 is preferred over Rule14\nRule6 is preferred over Rule7\nRule9 is preferred over Rule11\n\nThe current state of the game is as follows\nThe gecko has 13 friends\nThe gecko has a card that is blue in color\nThe hare raises a peace flag for the koala\nThe koala has a cappuccino\nThe rabbit has a plastic bag and struggles to find food\nThe cockroach does not learn the basics of resource management from the swordfish\nThe penguin does not need support from the koala\n\nBased on the game state and the rules and preferences, does the cat prepare armor for the panther?\nQuestion: Does the cat prepare armor for the panther?",
        "idx": 316,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the gecko, if it has fewer than seven friends, then we can conclude that it raises a flag of peace for the sheep\nrule1() = friends(gecko) < 7 => raise_flag_of_peace(gecko, sheep)\n# Rule2: The cat will not prepare armor for the panther, in the case where the swordfish does not respect the cat\nrule2() = not respect(swordfish, cat) => not prepare_armor(cat, panther)\n# Rule3: If the cockroach does not learn the basics of resource management from the swordfish, then the swordfish does not hold the same number of points as the tiger\nrule3() = not learn_basics_of_resource_management(cockroach, swordfish) => not holds_same_number_of_points(swordfish, tiger)\n# Rule4: If the rabbit has access to an abundance of food, then the rabbit winks at the baboon\nrule4() = has_access_to_abundance_of_food(rabbit) => wink(rabbit, baboon)\n# Rule5: If the gecko removes one of the pieces of the cat and the koala steals five points from the cat, then the cat prepares armor for the panther\nrule5() = remove(gecko, piece_of(cat)) & steal_points(koala, 5, cat) => prepare_armor(cat, panther)\n# Rule6: Regarding the koala, if it has a musical instrument, then we can conclude that it does not offer a job position to the baboon\nrule6() = has(koala, musical_instrument) => not offer_job_position(koala, baboon)\n# Rule7: If the penguin does not need the support of the koala, then the koala offers a job position to the baboon\nrule7() = not needs_support(penguin, koala) => offer_job_position(koala, baboon)\n# Rule8: If something does not hold the same number of points as the tiger, then it does not respect the cat\nrule8(something) = not holds_same_number_of_points(something, tiger) => not respect(something, cat)\n# Rule9: If something offers a job to the baboon, then it steals five points from the cat, too\nrule9(something) = offer_job_position(something, baboon) => steal_points(something, 5, cat)\n# Rule10: If the koala has a device to connect to the internet, then the koala does not offer a job position to the baboon\nrule10() = has(koala, connect_to_internet(device)) => not offer_job_position(koala, baboon)\n# Rule11: If at least one animal winks at the baboon, then the koala does not steal five of the points of the cat\nrule11() = wink(something, baboon) => not steal_points(koala, 5, cat)\n# Rule12: If you are positive that you saw one of the animals raises a flag of peace for the sheep, you can be certain that it will also remove one of the pieces of the cat\nrule12() = raise_flag_of_peace(something, sheep) => remove(something, piece_of(cat))\n# Rule13: If the rabbit has something to carry apples and oranges, then the rabbit winks at the baboon\nrule13() = has(rabbit, carry_apples_and_oranges(something)) => wink(rabbit, baboon)\n# Rule14: The swordfish holds an equal number of points as the tiger whenever at least one animal raises a flag of peace for the koala\nrule14() = raise_flag_of_peace(something, koala) => holds_same_number_of_points(swordfish, tiger)\n# Rule15: If the gecko has a card whose color is one of the rainbow colors, then the gecko raises a peace flag for the sheep.\nrule15() = has(gecko, card_with(color)) and color in rainbow_colors => raise_flag_of_peace(gecko, sheep)\n# Rule10 is preferred over Rule7\norder(rule10) > order(rule7) = True\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule3 is preferred over Rule14\norder(rule3) > order(rule14) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n# Rule9 is preferred over Rule11\norder(rule9) > order(rule11) = True\n\n# The current state of the game is as follows\n# The gecko has 13 friends\nfriends(gecko) = 13\n# The gecko has a card that is blue in color\nhas(gecko, card_with(blue_color)) = True\n# The hare raises a peace flag for the koala\nraise_flag_of_peace(hare, koala) = True\n# The koala has a cappuccino\nhas(koala, cappuccino) = True\n# The rabbit has a plastic bag, and struggles to find food\nhas(rabbit, plastic_bag) = True\nstruggles_to_find_food(rabbit) = True\n# The cockroach does not learn the basics of resource management from the swordfish\nnot learn_basics_of_resource_management(cockroach, swordfish) = True\n# The penguin does not need support from the koala\nnot needs_support(penguin, koala) = True\n\n# Based on the game state and the rules and preferences, does the cat prepare armor for the panther?\nquestion = prepare_armor(cat, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not show all her cards to the cheetah, you can be certain that it will wink at the halibut without a doubt\nRule2: Be careful when something prepares armor for the leopard but does not knock down the fortress of the hippopotamus because in this case it will surely not eat the food of the swordfish\nRule3: The swordfish unquestionably respects the grizzly bear, in the case where the halibut eats the food that belongs to the swordfish\nRule4: If the kangaroo winks at the halibut, then the halibut eats the food that belongs to the swordfish\nRule5: If at least one animal attacks the green fields whose owner is the viperfish, then the halibut knocks down the fortress that belongs to the hippopotamus\n\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe kangaroo does not attack the green fields whose owner is the cheetah\nThe zander does not attack the green fields whose owner is the viperfish\n\nBased on the game state and the rules and preferences, does the swordfish respect the grizzly bear?\nQuestion: Does the swordfish respect the grizzly bear?",
        "idx": 317,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not show all her cards to the cheetah, you can be certain that it will wink at the halibut without a doubt\nrule1(something) = not show_all_cards(something, cheetah) => wink(something, halibut)\n# Rule2: Be careful when something prepares armor for the leopard but does not knock down the fortress of the hippopotamus because in this case it will, surely, not eat the food of the swordfish (this may or may not be problematic)\nrule2(something) = prepare_armor(something, leopard) & not knock_down(fortress_of(hippopotamus), something) => not eat_food(something, swordfish)\n# Rule3: The swordfish unquestionably respects the grizzly bear, in the case where the halibut eats the food that belongs to the swordfish\nrule3() = eat_food(halibut, food_of(swordfish)) => respects(swordfish, grizzly_bear)\n# Rule4: If the kangaroo winks at the halibut, then the halibut eats the food that belongs to the swordfish\nrule4() = wink(kangaroo, halibut) => eat_food(halibut, food_of(swordfish))\n# Rule5: If at least one animal attacks the green fields whose owner is the viperfish, then the halibut knocks down the fortress that belongs to the hippopotamus.\nrule5(something) = attack(green_fields_of(viperfish), something) => knock_down(fortress_of(hippopotamus), halibut)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The kangaroo does not attack the green fields whose owner is the cheetah\nnot attack(green_fields_of(cheetah), kangaroo) = True\n# The zander does not attack the green fields whose owner is the viperfish\nnot attack(green_fields_of(viperfish), zander) = True\n\n# Based on the game state and the rules and preferences, does the swordfish respect the grizzly bear?\nquestion = respects(swordfish, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lobster owes money to the buffalo and the snail does not burn the warehouse that is in possession of the buffalo, then the buffalo will never proceed to the spot that is right after the spot of the canary\nRule2: If something removes one of the pieces of the panda bear but does not give a magnifying glass to the hummingbird, then it will knock down the fortress that belongs to the catfish\nRule3: If something knocks down the fortress that belongs to the catfish, then it does not attack the green fields of the sun bear\nRule4: If something does not proceed to the spot that is right after the spot of the canary, then it will attack the green fields whose owner is the sun bear\nRule5: If the lobster has more than 5 friends, then it owes money to the buffalo\nRule6: If the buffalo has a leafy green vegetable, then it does not give a magnifier to the hummingbird\nRule7: If the buffalo works fewer hours than before, then it removes one of the pieces of the panda bear\nRule8: If at least one animal owes money to the squirrel, then the snail does not burn the warehouse that is in possession of the buffalo\n\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe buffalo has kale\nThe buffalo reduced her work hours recently\nThe lobster has fourteen friends\nThe mosquito owes money to the squirrel\n\nBased on the game state and the rules and preferences, does the buffalo attack the green fields whose owner is the sun bear?\nQuestion: Does the buffalo attack the green fields whose owner is the sun bear?",
        "idx": 318,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lobster owes money to the buffalo and the snail does not burn the warehouse that is in possession of the buffalo, then the buffalo will never proceed to the spot that is right after the spot of the canary\nrule1() = owes_money_to(lobster, buffalo) & not burn(warehouse_of(buffalo), snail) => never_proceed(buffalo, spot_right_after(spot_of(canary)))\n# Rule2: Be careful when something removes one of the pieces of the panda bear but does not give a magnifying glass to the hummingbird because in this case it will, surely, knock down the fortress that belongs to the catfish (this may or may not be problematic)\nrule2(something) = remove(something, piece_of(panda_bear)) & not give_magnifying_glass(something, hummingbird) => knock_down(fortress_of(catfish), something)\n# Rule3: If something knocks down the fortress that belongs to the catfish, then it does not attack the green fields of the sun bear\nrule3(something) = knock_down(fortress_of(catfish), something) => not attack_green_fields(something, sun_bear)\n# Rule4: If you are positive that one of the animals does not proceed to the spot that is right after the spot of the canary, you can be certain that it will attack the green fields whose owner is the sun bear without a doubt\nrule4(something) = not proceed(something, spot_right_after(spot_of(canary))) => attack_green_fields(something, sun_bear)\n# Rule5: Regarding the lobster, if it has more than 5 friends, then we can conclude that it owes $$$ to the buffalo\nrule5() = friends(lobster) > 5 => owes_money_to(lobster, buffalo)\n# Rule6: If the buffalo has a leafy green vegetable, then the buffalo does not give a magnifier to the hummingbird\nrule6() = has(buffalo, leafy_green_vegetable) => not give_magnifying_glass(buffalo, hummingbird)\n# Rule7: Regarding the buffalo, if it works fewer hours than before, then we can conclude that it removes from the board one of the pieces of the panda bear\nrule7() = reduce_work_hours(buffalo) => remove(buffalo, piece_of(panda_bear))\n# Rule8: If at least one animal owes money to the squirrel, then the snail does not burn the warehouse that is in possession of the buffalo.\nrule8(something) = owes_money_to(something, squirrel) => not burn(warehouse_of(buffalo), snail)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The buffalo has some kale, and reduced her work hours recently\nhas(buffalo, kale) = True\nreduce_work_hours(buffalo) = True\n# The lobster has fourteen friends\nfriends(lobster) = 14\n# The mosquito owes money to the squirrel\nowes_money_to(mosquito, squirrel) = True\n\n# Based on the game state and the rules and preferences, does the buffalo attack the green fields whose owner is the sun bear?\nquestion = attack_green_fields(buffalo, sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The salmon learns elementary resource management from the eagle whenever at least one animal offers a job position to the viperfish\nRule2: If the donkey has a card whose color appears in the flag of Netherlands, then it eats the food of the gecko\nRule3: If the cheetah prepares armor for the polar bear, then the polar bear does not owe money to the salmon\nRule4: If the donkey eats the food that belongs to the gecko, then the gecko becomes an enemy of the salmon\nRule5: If the gecko becomes an enemy of the salmon, then the salmon does not respect the koala\nRule6: If the caterpillar has something to drink, then it does not offer a job position to the viperfish\nRule7: If something learns elementary resource management from the eagle and knows the defensive plans of the squid, then it respects the koala\nRule8: If the caterpillar has something to drink, then it does not offer a job position to the viperfish\nRule9: If the caterpillar has more than sixteen friends, then it offers a job position to the viperfish\nRule10: If the caterpillar created a time machine, then it offers a job position to the viperfish\nRule11: If an animal offers a job position to the sheep, then it owes money to the salmon\nRule12: If the donkey took a bike from the store, then it eats the food of the gecko\nRule13: If the cheetah rolls the dice for the salmon and the polar bear owes money to the salmon, then the salmon does not learn the basics of resource management from the eagle\n\nRule13 is preferred over Rule1\nRule3 is preferred over Rule11\nRule6 is preferred over Rule10\nRule6 is preferred over Rule9\nRule7 is preferred over Rule5\nRule8 is preferred over Rule10\nRule8 is preferred over Rule9\n\nThe current state of the game is as follows\nThe caterpillar has 8 smart friends and 1 non-smart friend\nThe caterpillar has kale\nThe caterpillar invented a time machine\nThe donkey has a cappuccino\nThe donkey has a card that is yellow in color\nThe donkey stole a bike from the store\nThe polar bear offers a job position to the sheep\n\nBased on the game state and the rules and preferences, does the salmon respect the koala?\nQuestion: Does the salmon respect the koala?",
        "idx": 319,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The salmon learns elementary resource management from the eagle whenever at least one animal offers a job position to the viperfish\nrule1() = offer_job_position(something, viperfish) => learn_elementary_resource_management(salmon, eagle)\n# Rule2: Regarding the donkey, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it eats the food of the gecko\nrule2() = has(donkey, card_with(color_in_flag_of_Netherlands)) => eat_food(donkey, food_of(gecko))\n# Rule3: If the cheetah prepares armor for the polar bear, then the polar bear is not going to owe money to the salmon\nrule3() = prepare_armor(cheetah, polar_bear) => not owe_money_to(polar_bear, salmon)\n# Rule4: If the donkey eats the food that belongs to the gecko, then the gecko becomes an enemy of the salmon\nrule4() = eat_food(donkey, food_of(gecko)) => enemy(gecko, salmon)\n# Rule5: If the gecko becomes an enemy of the salmon, then the salmon is not going to respect the koala\nrule5() = enemy(gecko, salmon) => not respect(salmon, koala)\n# Rule6: Regarding the caterpillar, if it has something to drink, then we can conclude that it does not offer a job position to the viperfish\nrule6() = has(caterpillar, drink) => not offer_job_position(caterpillar, viperfish)\n# Rule7: Be careful when something learns elementary resource management from the eagle and also knows the defensive plans of the squid because in this case it will surely respect the koala (this may or may not be problematic)\nrule7(something) = learn_elementary_resource_management(something, eagle) & knows(defensive_plans_of(squid), something) => respect(something, koala)\n# Rule8: Regarding the caterpillar, if it has something to drink, then we can conclude that it does not offer a job position to the viperfish\nrule8() = has(caterpillar, drink) => not offer_job_position(caterpillar, viperfish)\n# Rule9: Regarding the caterpillar, if it has more than sixteen friends, then we can conclude that it offers a job position to the viperfish\nrule9() = friends(caterpillar) > 16 => offer_job_position(caterpillar, viperfish)\n# Rule10: If the caterpillar created a time machine, then the caterpillar offers a job to the viperfish\nrule10() = created_time_machine(caterpillar) => offer_job_position(caterpillar, viperfish)\n# Rule11: If you are positive that you saw one of the animals offers a job to the sheep, you can be certain that it will also owe money to the salmon\nrule11() = offer_job_position(something, sheep) => owes_money_to(something, salmon)\n# Rule12: Regarding the donkey, if it took a bike from the store, then we can conclude that it eats the food of the gecko\nrule12() = took_bike(donkey, store) => eat_food(donkey, food_of(gecko))\n# Rule13: If the cheetah rolls the dice for the salmon and the polar bear owes money to the salmon, then the salmon will not learn the basics of resource management from the eagle.\nrule13() = roll_dice(cheetah, salmon) & owe_money_to(polar_bear, salmon) => not learn_basics_of_resource_management(salmon, eagle)\n# Rule13 is preferred over Rule1\norder(rule13) > order(rule1) = True\n# Rule3 is preferred over Rule11\norder(rule3) > order(rule11) = True\n# Rule6 is preferred over Rule10\norder(rule6) > order(rule10) = True\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n# Rule8 is preferred over Rule10\norder(rule8) > order(rule10) = True\n# Rule8 is preferred over Rule9\norder(rule8) > order(rule9) = True\n\n# The current state of the game is as follows\n# The caterpillar has 8 friends that are smart and one friend that is not, and has some kale\nfriends(caterpillar) = 8\nhas(caterpillar, kale) = True\n# The caterpillar invented a time machine\ncreated_time_machine(caterpillar) = True\n# The donkey has a cappuccino, has a card that is yellow in color, and stole a bike from the store\nhas(donkey, cappuccino) = True\nhas(donkey, card_with(yellow_color)) = True\nstole_bike(donkey, store) = True\n# The polar bear offers a job to the sheep\noffer_job_position(polar_bear, sheep) = True\n\n# Based on the game state and the rules and preferences, does the salmon respect the koala?\nquestion = respect(salmon, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the squirrel starts with the first letter of the name of the elephant, then the squirrel offers a job to the cat\nRule2: If something does not attack the green fields of the pig, then it respects the caterpillar\nRule3: If something respects the caterpillar and also rolls the dice for the puffin, then it becomes an actual enemy of the canary\nRule4: If at least one animal rolls the dice for the buffalo, then the baboon rolls the dice for the puffin\nRule5: If the cat does not eat the food of the canary and the baboon does not become an actual enemy of the canary, then the canary needs support from the cheetah\nRule6: If one of the animals attacks the green fields owned by the hippopotamus, then it eats the food that belongs to the canary\nRule7: If the squirrel offers a job to the cat, then the cat does not eat the food of the canary\n\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe elephant is named Milo\nThe lobster knocks down the fortress of the kangaroo\nThe phoenix rolls the dice for the buffalo\nThe squirrel is named Meadow\nThe baboon does not attack the green fields owned by the pig\n\nBased on the game state and the rules and preferences, does the canary need support from the cheetah?\nQuestion: Does the canary need support from the cheetah?",
        "idx": 320,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the squirrel, if it has a name whose first letter is the same as the first letter of the elephant's name, then we can conclude that it offers a job to the cat\nrule1() = first_letter_of(name(squirrel)) == first_letter_of(name(elephant)) => offer_job(squirrel, cat)\n# Rule2: If something does not attack the green fields of the pig, then it respects the caterpillar\nrule2(something) = not attack(green_fields_of(pig), something) => respects(something, caterpillar)\n# Rule3: Be careful when something respects the caterpillar and also rolls the dice for the puffin because in this case it will surely become an actual enemy of the canary (this may or may not be problematic)\nrule3(something) = respects(something, caterpillar) & rolls_dice_for(puffin) => actual_enemy(something, canary)\n# Rule4: If at least one animal rolls the dice for the buffalo, then the baboon rolls the dice for the puffin\nrule4() = rolls_dice_for(buffalo) => rolls_dice_for(baboon, puffin)\n# Rule5: If the cat does not eat the food that belongs to the canary and the baboon does not become an actual enemy of the canary, then the canary needs support from the cheetah\nrule5() = not eat_food_of(cat, canary) & not actual_enemy(baboon, canary) => needs_support(canary, cheetah)\n# Rule6: If you are positive that you saw one of the animals attacks the green fields whose owner is the hippopotamus, you can be certain that it will also eat the food that belongs to the canary\nrule6(something) = attack(green_fields_of(hippopotamus), something) => eat_food_of(something, canary)\n# Rule7: The cat does not eat the food of the canary, in the case where the squirrel offers a job to the cat.\nrule7() = offer_job(squirrel, cat) => not eat_food_of(cat, canary)\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The elephant is named Milo\nname(elephant, Milo) = True\n# The lobster knocks down the fortress of the kangaroo\nknock_down(lobster, fortress_of(kangaroo)) = True\n# The phoenix rolls the dice for the buffalo\nrolls_dice_for(phoenix, buffalo) = True\n# The squirrel is named Meadow\nname(squirrel, Meadow) = True\n# The baboon does not attack the green fields whose owner is the pig\nnot attack(green_fields_of(pig), baboon) = True\n\n# Based on the game state and the rules and preferences, does the canary need support from the cheetah?\nquestion = needs_support(canary, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the mosquito has a card whose color is one of the rainbow colors, then the mosquito removes one of the pieces of the grizzly bear\nRule2: If an animal does not learn elementary resource management from the spider, then it will not remove one of the pieces of the grizzly bear\nRule3: If something proceeds to the spot that is right after the spot of the panther, then it respects the whale\nRule4: If at least one animal removes one of the pieces of the grizzly bear, then the black bear rolls the dice for the spider\nRule5: If the panda bear becomes an actual enemy of the ferret, then the ferret does not sing a victory song for the black bear\nRule6: If the ferret does not sing a victory song for the black bear but the turtle respects the black bear, then the black bear will not roll the dice for the spider\nRule7: If the mosquito has fewer than 9 friends, then the mosquito removes one of the pieces of the grizzly bear\nRule8: If something rolls the dice for the spider but does not need the support of the moose, then it sings a victory song for the hummingbird\nRule9: If at least one animal respects the whale, then the black bear does not need support from the moose\n\nRule2 is preferred over Rule1\nRule2 is preferred over Rule7\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe mosquito has 13 friends\nThe mosquito has a card that is red in color\nThe panda bear becomes an enemy of the ferret\nThe snail proceeds to the spot right after the panther\n\nBased on the game state and the rules and preferences, does the black bear sing a victory song for the hummingbird?\nQuestion: Does the black bear sing a victory song for the hummingbird?",
        "idx": 321,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the mosquito has a card whose color is one of the rainbow colors, then the mosquito removes one of the pieces of the grizzly bear\nrule1() = has(mosquito, card) and color(card) in rainbow_colors => remove(mosquito, piece_of(grizzly_bear))\n# Rule2: If you are positive that one of the animals does not learn elementary resource management from the spider, you can be certain that it will not remove from the board one of the pieces of the grizzly bear\nrule2(something) = not learn(something, elementary_resource_management_from(spider)) => not remove(something, piece_of(grizzly_bear))\n# Rule3: If something proceeds to the spot that is right after the spot of the panther, then it respects the whale, too\nrule3(something) = proceed(something, spot_right_after(spot_of(panther))) => respects(something, whale)\n# Rule4: If at least one animal removes from the board one of the pieces of the grizzly bear, then the black bear rolls the dice for the spider\nrule4() = remove(something, piece_of(grizzly_bear)) => roll_dice(black_bear, spider)\n# Rule5: The ferret does not sing a victory song for the black bear, in the case where the panda bear becomes an actual enemy of the ferret\nrule5() = enemy(panda_bear, ferret) => not sing_song(ferret, victory_song_for(black_bear))\n# Rule6: If the ferret does not sing a song of victory for the black bear however the turtle respects the black bear, then the black bear will not roll the dice for the spider\nrule6() = not sing_song(ferret, victory_song_for(black_bear)) & respects(turtle, black_bear) => not roll_dice(black_bear, spider)\n# Rule7: Regarding the mosquito, if it has fewer than 9 friends, then we can conclude that it removes one of the pieces of the grizzly bear\nrule7() = friends(mosquito) < 9 => remove(mosquito, piece_of(grizzly_bear))\n# Rule8: Be careful when something rolls the dice for the spider but does not need the support of the moose because in this case it will, surely, sing a song of victory for the hummingbird (this may or may not be problematic)\nrule8(something) = roll_dice(something, spider) & not needs_support(something, moose) => sing_song(something, victory_song_for(hummingbird))\n# Rule9: The black bear does not need support from the moose whenever at least one animal respects the whale.\nrule9() = respects(something, whale) => not needs_support(black_bear, moose)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The mosquito has 13 friends\nfriends(mosquito) = 13\n# The mosquito has a card that is red in color\nhas(mosquito, card_with(red_color)) = True\n# The panda bear becomes an enemy of the ferret\nenemy(panda_bear, ferret) = True\n# The snail proceeds to the spot right after the panther\nproceed(snail, spot_right_after(spot_of(panther))) = True\n\n# Based on the game state and the rules and preferences, does the black bear sing a victory song for the hummingbird?\nquestion = sing_song(black_bear, victory_song_for(hummingbird))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale has more than nine friends, then the whale eats the food that belongs to the raven\nRule2: If the grizzly bear has more than four friends, then the grizzly bear does not proceed to the spot that is right after the spot of the raven\nRule3: If the grizzly bear does not proceed to the spot right after the raven and the whale eats the food that belongs to the raven, then the raven sings a song of victory for the pig\nRule4: If the caterpillar sings a victory song for the wolverine, then the wolverine raises a peace flag for the squirrel\nRule5: If at least one animal sings a victory song for the pig, then the wolverine does not raise a peace flag for the squirrel\nRule6: If the grizzly bear has something to carry apples and oranges, then the grizzly bear does not proceed to the spot right after the raven\n\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe grizzly bear has 5 friends that are mean and 3 friends that are not, proceeds to the spot right after the bat, and respects the sheep\nThe grizzly bear has some arugula\nThe whale has eleven friends\n\nBased on the game state and the rules and preferences, does the wolverine raise a peace flag for the squirrel?\nQuestion: Does the wolverine raise a peace flag for the squirrel?",
        "idx": 322,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the whale has more than nine friends, then the whale eats the food that belongs to the raven\nrule1() = friends(whale) > 9 => eat_food(whale, food_of(raven))\n# Rule2: If the grizzly bear has more than four friends, then the grizzly bear does not proceed to the spot that is right after the spot of the raven\nrule2() = friends(grizzly_bear) > 4 => not proceed(grizzly_bear, spot_right_after(spot_of(raven)))\n# Rule3: For the raven, if the belief is that the grizzly bear does not proceed to the spot right after the raven but the whale eats the food that belongs to the raven, then you can add \"the raven sings a song of victory for the pig\" to your conclusions\nrule3() = not proceed(grizzly_bear, spot_right_after(spot_of(raven))) & eat_food(whale, food_of(raven)) => sing_song(raven, victory_song_for(pig))\n# Rule4: The wolverine unquestionably raises a peace flag for the squirrel, in the case where the caterpillar sings a victory song for the wolverine\nrule4() = sing_song(caterpillar, victory_song_for(wolverine)) => raise_flag_of_peace(wolverine, squirrel)\n# Rule5: If at least one animal sings a victory song for the pig, then the wolverine does not raise a peace flag for the squirrel\nrule5() = sing_song(something, victory_song_for(pig)) => not raise_flag_of_peace(wolverine, squirrel)\n# Rule6: If the grizzly bear has something to carry apples and oranges, then the grizzly bear does not proceed to the spot right after the raven.\nrule6() = has(grizzly_bear, carry_apples_and_oranges) => not proceed(grizzly_bear, spot_right_after(spot_of(raven)))\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The grizzly bear has 5 friends that are mean and three friends that are not, proceeds to the spot right after the bat, and respects the sheep\nfriends(grizzly_bear) = 5 + 3\nproceed(grizzly_bear, spot_right_after(spot_of(bat))) = True\nrespects(grizzly_bear, sheep) = True\n# The grizzly bear has some arugula\nhas(grizzly_bear, arugula) = True\n# The whale has eleven friends\nfriends(whale) = 11\n\n# Based on the game state and the rules and preferences, does the wolverine raise a peace flag for the squirrel?\nquestion = raise_flag_of_peace(wolverine, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something shows all her cards to the phoenix and also rolls the dice for the sun bear, then it holds an equal number of points as the viperfish\nRule2: If you see one of the animals roll the dice for the caterpillar, then it knows the defensive plans of the zander\nRule3: If the oscar purchased a time machine, then it raises a flag of peace for the raven\nRule4: If the oscar raises a flag of peace for the raven, then the raven does not roll the dice for the caterpillar\nRule5: If the raven has a sharp object, then it attacks the green fields owned by the snail\nRule6: If the oscar has something to carry apples and oranges, then it raises a flag of peace for the raven\nRule7: If the blobfish attacks the green fields of the goldfish, then the goldfish attacks the green fields owned by the turtle\nRule8: If the hippopotamus does not sing a victory song for the raven and the cricket holds an equal number of points as the raven, then the raven does not know the defensive plans of the zander\nRule9: If one of the animals holds an equal number of points as the viperfish, then it does not sing a victory song for the raven\nRule10: If the raven has a name whose first letter is the same as the first letter of the octopus's name, then the raven attacks the green fields owned by the snail\n\nRule8 is preferred over Rule2\n\nThe current state of the game is as follows\nThe blobfish attacks the green fields owned by the goldfish\nThe hippopotamus rolls the dice for the sun bear and shows all her cards to the phoenix\nThe octopus is named Tessa\nThe oscar has a backpack and struggles to find food\nThe raven has a tablet and is named Tango\n\nBased on the game state and the rules and preferences, does the raven know the defensive plans of the zander?\nQuestion: Does the raven know the defensive plans of the zander?",
        "idx": 323,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something shows her cards (all of them) to the phoenix and also rolls the dice for the sun bear because in this case it will surely hold an equal number of points as the viperfish (this may or may not be problematic)\nrule1(something) = show_cards(something, phoenix) & roll_dice(something, sun_bear) => points(something) == points(viperfish)\n# Rule2: If you are positive that you saw one of the animals rolls the dice for the caterpillar, you can be certain that it will also know the defensive plans of the zander\nrule2() = roll_dice(something, caterpillar) => knows(defensive_plans_of(zander), something)\n# Rule3: If the oscar purchased a time machine, then the oscar raises a flag of peace for the raven\nrule3() = purchased(oscar, time_machine) => raise_flag_of_peace(oscar, raven)\n# Rule4: If the oscar raises a flag of peace for the raven, then the raven is not going to roll the dice for the caterpillar\nrule4() = raise_flag_of_peace(oscar, raven) => not roll_dice(raven, caterpillar)\n# Rule5: Regarding the raven, if it has a sharp object, then we can conclude that it attacks the green fields whose owner is the snail\nrule5() = has(raven, sharp_object) => attack_green_fields(raven, snail)\n# Rule6: If the oscar has something to carry apples and oranges, then the oscar raises a flag of peace for the raven\nrule6() = has(oscar, carry_apples_and_oranges) => raise_flag_of_peace(oscar, raven)\n# Rule7: If the blobfish attacks the green fields of the goldfish, then the goldfish attacks the green fields whose owner is the turtle\nrule7() = attack_green_fields(blobfish, green_fields_of(goldfish)) => attack_green_fields(goldfish, green_fields_of(turtle))\n# Rule8: For the raven, if the belief is that the hippopotamus is not going to sing a victory song for the raven but the cricket holds an equal number of points as the raven, then you can add that \"the raven is not going to know the defense plan of the zander\" to your conclusions\nrule8() = not sing_song(hippopotamus, victory_song_for(raven)) & points(cricket) == points(raven) => not knows(defensive_plans_of(zander), raven)\n# Rule9: If you are positive that you saw one of the animals holds an equal number of points as the viperfish, you can be certain that it will not sing a victory song for the raven\nrule9() = points(something) == points(viperfish) => not sing_song(something, victory_song_for(raven))\n# Rule10: If the raven has a name whose first letter is the same as the first letter of the octopus's name, then the raven attacks the green fields of the snail.\nrule10() = first_letter_of(name(raven)) == first_letter_of(name(octopus)) => attack_green_fields(raven, green_fields_of(snail))\n# Rule8 is preferred over Rule2\norder(rule8) > order(rule2) = True\n\n# The current state of the game is as follows\n# The blobfish attacks the green fields whose owner is the goldfish\nattack_green_fields(blobfish, green_fields_of(goldfish)) = True\n# The hippopotamus rolls the dice for the sun bear, and shows all her cards to the phoenix\nroll_dice(hippopotamus, sun_bear) = True\nshow_cards(hippopotamus, phoenix) = True\n# The octopus is named Tessa\nname(octopus, Tessa) = True\n# The oscar has a backpack, and struggles to find food\nhas(oscar, backpack) = True\nstruggles_to_find_food(oscar) = True\n# The raven has a tablet, and is named Tango\nhas(raven, tablet) = True\nname(raven, Tango) = True\n\n# Based on the game state and the rules and preferences, does the raven know the defensive plans of the zander?\nquestion = knows(defensive_plans_of(zander), raven)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kudu has fewer than three friends, then it steals five points from the meerkat\nRule2: If something steals five points from the meerkat and sings a victory song for the salmon, then it becomes an enemy of the whale\nRule3: If the name of the kudu starts with the same letter as the name of the penguin, then it steals five points from the meerkat\nRule4: If at least one animal becomes an enemy of the whale, then the jellyfish knows the defensive plans of the cockroach\nRule5: If the kudu created a time machine, then it sings a victory song for the salmon\nRule6: If something holds an equal number of points as the viperfish, then it does not know the defensive plans of the cockroach\nRule7: If the kudu has a card with a color that appears in the flag of Belgium, then it sings a victory song for the salmon\n\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe kudu has 7 friends\nThe kudu is named Lola\nThe kudu has a card that is green in color\nThe kudu invented a time machine\nThe penguin is named Luna\n\nBased on the game state and the rules and preferences, does the jellyfish know the defensive plans of the cockroach?\nQuestion: Does the jellyfish know the defensive plans of the cockroach?",
        "idx": 324,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kudu, if it has fewer than three friends, then we can conclude that it steals five of the points of the meerkat\nrule1() = friends(kudu) < 3 => steal_points(kudu, 5, meerkat)\n# Rule2: If you see that something steals five points from the meerkat and sings a victory song for the salmon, what can you certainly conclude? You can conclude that it also becomes an enemy of the whale\nrule2() = steal_points(something, 5, meerkat) & sing_song(something, victory_song_for(salmon)) => enemy(something, whale)\n# Rule3: Regarding the kudu, if it has a name whose first letter is the same as the first letter of the penguin's name, then we can conclude that it steals five of the points of the meerkat\nrule3() = first_letter_of(name(kudu)) == first_letter_of(name(penguin)) => steal_points(kudu, 5, meerkat)\n# Rule4: If at least one animal becomes an enemy of the whale, then the jellyfish knows the defensive plans of the cockroach\nrule4() = enemy(something, whale) => knows(defensive_plans_of(cockroach), jellyfish)\n# Rule5: Regarding the kudu, if it created a time machine, then we can conclude that it sings a song of victory for the salmon\nrule5() = created_time_machine(kudu) => sing_song(kudu, victory_song_for(salmon))\n# Rule6: If something holds an equal number of points as the viperfish, then it does not know the defensive plans of the cockroach\nrule6(something) = points(something) == points(viperfish) => not knows(defensive_plans_of(cockroach), something)\n# Rule7: Regarding the kudu, if it has a card whose color appears in the flag of Belgium, then we can conclude that it sings a song of victory for the salmon.\nrule7() = has(kudu, card_with(color_in_flag_of_belgium)) => sing_song(kudu, victory_song_for(salmon))\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The kudu has 7 friends, and is named Lola\nfriends(kudu) = 7\nname(kudu, Lola) = True\n# The kudu has a card that is green in color\nhas(kudu, card_with(green_color)) = True\n# The kudu invented a time machine\ncreated_time_machine(kudu) = True\n# The penguin is named Luna\nname(penguin, Luna) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish know the defensive plans of the cockroach?\nquestion = knows(defensive_plans_of(cockroach), jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sheep has more than fourteen friends, then the sheep attacks the green fields of the baboon\nRule2: If something does not eat the food of the turtle, then it proceeds to the spot that is right after the spot of the catfish\nRule3: If at least one animal attacks the green fields of the panther, then the sheep does not attack the green fields of the baboon\nRule4: If you are positive that you saw one of the animals eats the food that belongs to the snail, you can be certain that it will not learn elementary resource management from the catfish\nRule5: If the sheep has a leafy green vegetable, then it attacks the green fields whose owner is the baboon\nRule6: If the catfish does not learn the basics of resource management from the caterpillar, then the caterpillar does not attack the green fields whose owner is the kiwi\nRule7: If something rolls the dice for the whale, then it does not proceed to the spot right after the catfish\nRule8: If the tiger has fewer than 12 friends, then it holds the same number of points as the catfish\nRule9: If the sheep does not attack the green fields whose owner is the baboon, then the baboon knows the defensive plans of the aardvark\nRule10: If the mosquito learns elementary resource management from the catfish, then the catfish learns the basics of resource management from the caterpillar\nRule11: If something does not sing a song of victory for the canary and also does not respect the tilapia, then it learns the basics of resource management from the catfish\nRule12: If the buffalo does not proceed to the spot right after the catfish and the tiger holds an equal number of points as the catfish, then the catfish does not learn elementary resource management from the caterpillar\n\nRule1 is preferred over Rule3\nRule12 is preferred over Rule10\nRule2 is preferred over Rule7\nRule4 is preferred over Rule11\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe buffalo rolls the dice for the whale\nThe donkey attacks the green fields whose owner is the panther\nThe sheep has 1 bald friend and 5 non-bald friends\nThe tiger has 10 friends\nThe mosquito does not respect the tilapia\nThe mosquito does not sing a victory song for the canary\n\nBased on the game state and the rules and preferences, does the caterpillar attack the green fields whose owner is the kiwi?\nQuestion: Does the caterpillar attack the green fields whose owner is the kiwi?",
        "idx": 325,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sheep has more than fourteen friends, then the sheep attacks the green fields of the baboon\nrule1() = friends(sheep) > 14 => attack_green_fields(sheep, baboon)\n# Rule2: If something does not eat the food of the turtle, then it proceeds to the spot that is right after the spot of the catfish\nrule2(something) = not eat_food(something, turtle) => proceed(something, spot_right_after(spot_of(catfish)))\n# Rule3: If at least one animal attacks the green fields of the panther, then the sheep does not attack the green fields of the baboon\nrule3() = attack_green_fields(something, panther) => not attack_green_fields(sheep, baboon)\n# Rule4: If you are positive that you saw one of the animals eats the food that belongs to the snail, you can be certain that it will not learn elementary resource management from the catfish\nrule4(something) = eat_food(something, snail) => not learn_elementary_resource_management(something, catfish)\n# Rule5: Regarding the sheep, if it has a leafy green vegetable, then we can conclude that it attacks the green fields whose owner is the baboon\nrule5() = has(sheep, leafy_green_vegetable) => attack_green_fields(sheep, baboon)\n# Rule6: If the catfish does not learn the basics of resource management from the caterpillar, then the caterpillar does not attack the green fields whose owner is the kiwi\nrule6() = not learn_basics_of_resource_management(catfish, caterpillar) => not attack_green_fields(caterpillar, kiwi)\n# Rule7: If something rolls the dice for the whale, then it does not proceed to the spot right after the catfish\nrule7(something) = roll_dice(something, whale) => not proceed(something, spot_right_after(spot_of(catfish)))\n# Rule8: Regarding the tiger, if it has fewer than 12 friends, then we can conclude that it holds the same number of points as the catfish\nrule8() = friends(tiger) < 12 => points(tiger) == points(catfish)\n# Rule9: The baboon unquestionably knows the defensive plans of the aardvark, in the case where the sheep does not attack the green fields whose owner is the baboon\nrule9() = not attack_green_fields(sheep, baboon) => knows(defensive_plans_of(aardvark), baboon)\n# Rule10: If the mosquito learns elementary resource management from the catfish, then the catfish learns the basics of resource management from the caterpillar\nrule10() = learn_elementary_resource_management(mosquito, catfish) => learn_basics_of_resource_management(catfish, caterpillar)\n# Rule11: If you see that something does not sing a song of victory for the canary and also does not respect the tilapia, what can you certainly conclude? You can conclude that it also learns the basics of resource management from the catfish\nrule11(something) = not sing_song(something, victory_song_for(canary)) & not respects(something, tilapia) => learn_basics_of_resource_management(something, catfish)\n# Rule12: For the catfish, if the belief is that the buffalo is not going to proceed to the spot that is right after the spot of the catfish but the tiger holds an equal number of points as the catfish, then you can add that \"the catfish is not going to learn elementary resource management from the caterpillar\" to your conclusions.\nrule12() = not proceed(buffalo, spot_right_after(spot_of(catfish))) & points(tiger) == points(catfish) => not learn_elementary_resource_management(catfish, caterpillar)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule12 is preferred over Rule10\norder(rule12) > order(rule10) = True\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule4 is preferred over Rule11\norder(rule4) > order(rule11) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The buffalo rolls the dice for the whale\nroll_dice(buffalo, whale) = True\n# The donkey attacks the green fields whose owner is the panther\nattack_green_fields(donkey, panther) = True\n# The sheep has 1 friend that is bald and five friends that are not\nfriends(sheep) = 6\n# The tiger has ten friends\nfriends(tiger) = 10\n# The mosquito does not respect the tilapia\nrespects(mosquito, tilapia) = False\n# The mosquito does not sing a victory song for the canary\nsing_song(mosquito, victory_song_for(canary)) = False\n\n# Based on the game state and the rules and preferences, does the caterpillar attack the green fields whose owner is the kiwi?\nquestion = attack_green_fields(caterpillar, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The bat does not sing a victory song for the raven whenever at least one animal rolls the dice for the pig\nRule2: If the donkey does not have her keys, then the donkey eats the food that belongs to the cockroach\nRule3: The cockroach unquestionably attacks the green fields of the raven, in the case where the donkey eats the food that belongs to the cockroach\nRule4: The caterpillar does not need support from the hummingbird whenever at least one animal proceeds to the spot that is right after the spot of the tilapia\nRule5: Regarding the bat, if it has a card with a primary color, then it respects the amberjack\nRule6: If the crocodile proceeds to the spot that is right after the spot of the cockroach, then the cockroach is not going to attack the green fields whose owner is the raven\nRule7: If the donkey has a card whose color appears in the flag of France, then the donkey eats the food that belongs to the cockroach\nRule8: If the bat has a name whose first letter is the same as the first letter of the snail's name, then the bat respects the amberjack\nRule9: If at least one animal needs support from the mosquito, then the crocodile gives a magnifying glass to the cockroach\nRule10: If the cockroach does not attack the green fields of the raven, then the raven does not hold an equal number of points as the hare\nRule11: Regarding the caterpillar, if it has a name whose first letter is the same as the first letter of the phoenix's name, then it needs the support of the hummingbird\nRule12: If something does not need the support of the hummingbird, then it raises a peace flag for the raven\nRule13: If the bat sings a victory song for the raven and the caterpillar raises a flag of peace for the raven, then the raven holds the same number of points as the hare\nRule14: If something respects the amberjack, then it sings a song of victory for the raven, too\nRule15: If the caterpillar has more than 1 friend, then the caterpillar needs the support of the hummingbird.\n\nRule1 is preferred over Rule14\nRule13 is preferred over Rule10\nRule4 is preferred over Rule11\nRule4 is preferred over Rule15\nRule6 is preferred over Rule3\n\nThe current state of the game is as follows\nThe bat has a card that is violet in color\nThe bat is named Bella\nThe caterpillar is named Lucy\nThe donkey has a card that is white in color\nThe donkey is holding her keys\nThe jellyfish proceeds to the spot right after the tilapia\nThe panda bear needs support from the mosquito\nThe phoenix is named Pablo\nThe snail is named Tango\n\nBased on the game state and the rules and preferences, does the raven hold the same number of points as the hare?\nQuestion: Does the raven hold the same number of points as the hare?",
        "idx": 326,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The bat does not sing a victory song for the raven whenever at least one animal rolls the dice for the pig\nrule1() = roll_dice(pig, _) => not sing_song(bat, victory_song_for(raven))\n# Rule2: If the donkey does not have her keys, then the donkey eats the food that belongs to the cockroach\nrule2() = not has_keys(donkey) => eat_food(donkey, food_of(cockroach))\n# Rule3: The cockroach unquestionably attacks the green fields of the raven, in the case where the donkey eats the food that belongs to the cockroach\nrule3() = eat_food(donkey, food_of(cockroach)) => attack_green_fields(cockroach, green_fields_of(raven))\n# Rule4: The caterpillar does not need support from the hummingbird whenever at least one animal proceeds to the spot that is right after the spot of the tilapia\nrule4() = proceed(_, spot_right_after(spot_of(tilapia))) => not needs_support(caterpillar, hummingbird)\n# Rule5: Regarding the bat, if it has a card with a primary color, then we can conclude that it respects the amberjack\nrule5() = has(bat, card_with(primary_color)) => respects(bat, amberjack)\n# Rule6: If the crocodile proceeds to the spot that is right after the spot of the cockroach, then the cockroach is not going to attack the green fields whose owner is the raven\nrule6() = proceed(crocodile, spot_right_after(spot_of(cockroach))) => not attack_green_fields(cockroach, green_fields_of(raven))\n# Rule7: If the donkey has a card whose color appears in the flag of France, then the donkey eats the food that belongs to the cockroach\nrule7() = has(donkey, card_with(color_in_flag_of_france)) => eat_food(donkey, food_of(cockroach))\n# Rule8: If the bat has a name whose first letter is the same as the first letter of the snail's name, then the bat respects the amberjack\nrule8() = first_letter_of(name(bat)) == first_letter_of(name(snail)) => respects(bat, amberjack)\n# Rule9: If at least one animal needs support from the mosquito, then the crocodile gives a magnifying glass to the cockroach\nrule9() = needs_support(_, mosquito) => give_magnifying_glass(crocodile, cockroach)\n# Rule10: If the cockroach does not attack the green fields of the raven, then the raven does not hold an equal number of points as the hare\nrule10() = not attack_green_fields(cockroach, green_fields_of(raven)) => not holds_equal_points(raven, hare)\n# Rule11: Regarding the caterpillar, if it has a name whose first letter is the same as the first letter of the phoenix's name, then we can conclude that it needs the support of the hummingbird\nrule11() = first_letter_of(name(caterpillar)) == first_letter_of(name(phoenix)) => needs_support(caterpillar, hummingbird)\n# Rule12: If something does not need the support of the hummingbird, then it raises a peace flag for the raven\nrule12(something) = not needs_support(something, hummingbird) => raise_flag_of_peace(something, raven)\n# Rule13: If the bat sings a victory song for the raven and the caterpillar raises a flag of peace for the raven, then the raven holds the same number of points as the hare\nrule13() = sing_song(bat, victory_song_for(raven)) & raise_flag_of_peace(caterpillar, raven) => holds_equal_points(raven, hare)\n# Rule14: If something respects the amberjack, then it sings a song of victory for the raven, too\nrule14(something) = respects(something, amberjack) => sing_song(something, victory_song_for(raven))\n# Rule15: If the caterpillar has more than 1 friend, then the caterpillar needs the support of the hummingbird.\nrule15() = friends(caterpillar) > 1 => needs_support(caterpillar, hummingbird)\n# Rule1 is preferred over Rule14\norder(rule1) > order(rule14) = True\n# Rule13 is preferred over Rule10\norder(rule13) > order(rule10) = True\n# Rule4 is preferred over Rule11\norder(rule4) > order(rule11) = True\n# Rule4 is preferred over Rule15\norder(rule4) > order(rule15) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n\n# The current state of the game is as follows\n# The bat has a card that is violet in color, and is named Bella\nhas(bat, card_with(violet_color)) = True\nname(bat, Bella) = True\n# The caterpillar is named Lucy\nname(caterpillar, Lucy) = True\n# The donkey has a card that is white in color\nhas(donkey, card_with(white_color)) = True\n# The donkey is holding her keys\nhas_keys(donkey) = True\n# The jellyfish proceeds to the spot right after the tilapia\nproceed(jellyfish, spot_right_after(spot_of(tilapia))) = True\n# The panda bear needs support from the mosquito\nneeds_support(panda_bear, mosquito) = True\n# The phoenix is named Pablo\nname(phoenix, Pablo) = True\n# The snail is named Tango\nname(snail, Tango) = True\n\n# Based on the game state and the rules and preferences, does the raven hold the same number of points as the hare?\nquestion = holds_equal_points(raven, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something prepares armor for the sheep, then it burns the warehouse of the polar bear\nRule2: If the meerkat has a name whose first letter is the same as the first letter of the baboon's name, then it shows her cards (all of them) to the polar bear\nRule3: If the elephant works more hours than before, then it prepares armor for the sheep\nRule4: If the meerkat has a card whose color starts with the letter \"n\", then it shows her cards (all of them) to the polar bear\nRule5: If the elephant burns the warehouse of the polar bear and the starfish holds the same number of points as the polar bear, then the polar bear steals five of the points of the leopard\nRule6: If the puffin does not know the defensive plans of the starfish, then the starfish holds an equal number of points as the polar bear\nRule7: If the elephant has a card whose color appears in the flag of the Netherlands, then it prepares armor for the sheep\nRule8: If the meerkat shows her cards (all of them) to the polar bear, then the polar bear does not steal five of the points of the jellyfish\nRule9: If the puffin has a name whose first letter is the same as the first letter of the buffalo's name, then the puffin does not know the defense plan of the starfish\nRule10: If the puffin has a device to connect to the internet, then the puffin does not know the defense plan of the starfish\nRule11: If something does not steal five of the points of the jellyfish, then it does not steal five of the points of the leopard\n\nRule5 is preferred over Rule11\n\nThe current state of the game is as follows\nThe baboon is named Pashmak\nThe buffalo is named Mojo\nThe elephant has a card that is white in color\nThe elephant reduced her work hours recently\nThe meerkat has a card that is indigo in color and is named Pablo\nThe puffin has a banana-strawberry smoothie\nThe puffin is named Max\n\nBased on the game state and the rules and preferences, does the polar bear steal five points from the leopard?\nQuestion: Does the polar bear steal five points from the leopard?",
        "idx": 327,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something prepares armor for the sheep, then it burns the warehouse of the polar bear, too\nrule1() = prepare_armor(something, sheep) => burn(warehouse_of(polar_bear))\n# Rule2: Regarding the meerkat, if it has a name whose first letter is the same as the first letter of the baboon's name, then we can conclude that it shows her cards (all of them) to the polar bear\nrule2() = first_letter_of(name(meerkat)) == first_letter_of(name(baboon)) => show_cards(meerkat, polar_bear)\n# Rule3: If the elephant works more hours than before, then the elephant prepares armor for the sheep\nrule3() = increase_work_hours(elephant) => prepare_armor(elephant, sheep)\n# Rule4: If the meerkat has a card whose color starts with the letter \"n\", then the meerkat shows her cards (all of them) to the polar bear\nrule4() = has(meerkat, card_with(color_starting_with(\"n\"))) => show_cards(meerkat, polar_bear)\n# Rule5: For the polar bear, if the belief is that the elephant burns the warehouse of the polar bear and the starfish holds the same number of points as the polar bear, then you can add \"the polar bear steals five of the points of the leopard\" to your conclusions\nrule5() = burn(warehouse_of(polar_bear), elephant) & points(starfish) == points(polar_bear) => steal_points(polar_bear, 5, leopard)\n# Rule6: The starfish unquestionably holds an equal number of points as the polar bear, in the case where the puffin does not know the defensive plans of the starfish\nrule6() = not knows(defensive_plans_of(starfish), puffin) => points(starfish) == points(polar_bear)\n# Rule7: Regarding the elephant, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it prepares armor for the sheep\nrule7() = has(elephant, card_with(color_in(flag_of_Netherlands))) => prepare_armor(elephant, sheep)\n# Rule8: The polar bear does not steal five of the points of the jellyfish, in the case where the meerkat shows her cards (all of them) to the polar bear\nrule8() = show_cards(meerkat, polar_bear) => not steal_points(polar_bear, 5, jellyfish)\n# Rule9: If the puffin has a name whose first letter is the same as the first letter of the buffalo's name, then the puffin does not know the defense plan of the starfish\nrule9() = first_letter_of(name(puffin)) == first_letter_of(name(buffalo)) => not knows(defense_plan_of(starfish), puffin)\n# Rule10: If the puffin has a device to connect to the internet, then the puffin does not know the defense plan of the starfish\nrule10() = has(puffin, device_to_connect_to_internet) => not knows(defense_plan_of(starfish), puffin)\n# Rule11: If you are positive that one of the animals does not steal five of the points of the jellyfish, you can be certain that it will not steal five of the points of the leopard.\nrule11() = not steal_points(something, 5, jellyfish) => not steal_points(something, 5, leopard)\n# Rule5 is preferred over Rule11\norder(rule5) > order(rule11) = True\n\n# The current state of the game is as follows\n# The baboon is named Pashmak\nname(baboon, Pashmak) = True\n# The buffalo is named Mojo\nname(buffalo, Mojo) = True\n# The elephant has a card that is white in color\nhas(elephant, card_with(white_color)) = True\n# The elephant reduced her work hours recently\nreduce_work_hours(elephant) = True\n# The meerkat has a card that is indigo in color, and is named Pablo\nhas(meerkat, card_with(indigo_color)) = True\nname(meerkat, Pablo) = True\n# The puffin has a banana-strawberry smoothie\nhas(puffin, banana_strawberry_smoothie) = True\n# The puffin is named Max\nname(puffin, Max) = True\n\n# Based on the game state and the rules and preferences, does the polar bear steal five points from the leopard?\nquestion = steal_points(polar_bear, 5, leopard)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tilapia does not prepare armor for the zander, then the zander removes one of the pieces of the rabbit\nRule2: If you see that one of the animals needs support from the phoenix, then it will not knock down the fortress of the black bear\nRule3: If the lion has a device to connect to the internet, then it learns the basics of resource management from the goldfish\nRule4: If the lion learns elementary resource management from the goldfish and the halibut prepares armor for the goldfish, then the goldfish needs support from the phoenix\nRule5: If something removes one of the pieces of the rabbit, then it becomes an actual enemy of the goldfish\nRule6: If you see that one of the animals winks at the puffin, then it prepares armor for the goldfish\nRule7: If you see that something rolls the dice for the aardvark and respects the buffalo, then it does not prepare armor for the goldfish\nRule8: If at least one animal needs the support of the squirrel, then the goldfish does not need the support of the phoenix\n\nRule6 is preferred over Rule7\nRule8 is preferred over Rule4\n\nThe current state of the game is as follows\nThe halibut respects the buffalo and rolls the dice for the aardvark\nThe halibut winks at the puffin\nThe lion has a computer\nThe lion does not sing a victory song for the eagle\nThe tilapia does not prepare armor for the zander\n\nBased on the game state and the rules and preferences, does the goldfish knock down the fortress of the black bear?\nQuestion: Does the goldfish knock down the fortress of the black bear?",
        "idx": 328,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the tilapia does not prepare armor for the zander, then the zander removes from the board one of the pieces of the rabbit\nrule1() = not prepare_armor(tilapia, zander) => remove(zander, piece_of(rabbit))\n# Rule2: If you are positive that you saw one of the animals needs support from the phoenix, you can be certain that it will not knock down the fortress that belongs to the black bear\nrule2(something) = needs_support(something, phoenix) => not knock_down(fortress_of(black_bear))\n# Rule3: Regarding the lion, if it has a device to connect to the internet, then we can conclude that it learns the basics of resource management from the goldfish\nrule3() = has(lion, connect_to_internet(device)) => learn_basics_of_resource_management(lion, goldfish)\n# Rule4: If the lion learns elementary resource management from the goldfish and the halibut prepares armor for the goldfish, then the goldfish needs support from the phoenix\nrule4() = learn(lion, elementary_resource_management_from(goldfish)) & prepare_armor(halibut, goldfish) => needs_support(goldfish, phoenix)\n# Rule5: If something removes from the board one of the pieces of the rabbit, then it becomes an actual enemy of the goldfish, too\nrule5(something) = remove(something, piece_of(rabbit)) => enemy(something, goldfish)\n# Rule6: If you are positive that you saw one of the animals winks at the puffin, you can be certain that it will also prepare armor for the goldfish\nrule6(something) = winks_at(something, puffin) => prepare_armor(something, goldfish)\n# Rule7: If you see that something rolls the dice for the aardvark and respects the buffalo, what can you certainly conclude? You can conclude that it does not prepare armor for the goldfish\nrule7(something) = rolls_dice_for(something, aardvark) & respects(something, buffalo) => not prepare_armor(something, goldfish)\n# Rule8: If at least one animal needs the support of the squirrel, then the goldfish does not need the support of the phoenix.\nrule8() = needs_support(something, squirrel) => not needs_support(goldfish, phoenix)\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n# Rule8 is preferred over Rule4\norder(rule8) > order(rule4) = True\n\n# The current state of the game is as follows\n# The halibut respects the buffalo, and rolls the dice for the aardvark\nrespects(halibut, buffalo) = True\nrolls_dice_for(halibut, aardvark) = True\n# The halibut winks at the puffin\nwinks_at(halibut, puffin) = True\n# The lion has a computer\nhas(lion, computer) = True\n# The lion does not sing a victory song for the eagle\nsing_song(lion, victory_song_for(eagle)) = False\n# The tilapia does not prepare armor for the zander\nnot prepare_armor(tilapia, zander) = True\n\n# Based on the game state and the rules and preferences, does the goldfish knock down the fortress of the black bear?\nquestion = knock_down(fortress_of(black_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus has a name whose first letter is the same as the first letter of the hippopotamus's name, then the octopus knocks down the fortress of the hare\nRule2: If the octopus has something to carry apples and oranges, then it does not knock down the fortress that belongs to the hare\nRule3: If at least one animal raises a peace flag for the kudu, then the lion proceeds to the spot that is right after the spot of the oscar\nRule4: If something proceeds to the spot right after the oscar and needs the support of the buffalo, then it does not eat the food of the penguin\nRule5: If something does not eat the food of the penguin, then it sings a song of victory for the koala\nRule6: If at least one animal knocks down the fortress that belongs to the hare, then the raven rolls the dice for the lion\nRule7: If the octopus has a card whose color starts with the letter \"n\", then it knocks down the fortress that belongs to the hare\nRule8: If the catfish does not attack the green fields whose owner is the lion and the raven rolls the dice for the lion, then the lion will not sing a song of victory for the koala\nRule9: If something does not steal five points from the meerkat, then it eats the food of the penguin\nRule10: If the lion has more than 11 friends, then it needs support from the buffalo\nRule11: If the lion has a name whose first letter is the same as the first letter of the kangaroo's name, then it needs the support of the buffalo\n\nRule2 is preferred over Rule1\nRule2 is preferred over Rule7\nRule5 is preferred over Rule8\nRule9 is preferred over Rule4\n\nThe current state of the game is as follows\nThe gecko raises a peace flag for the kudu\nThe hippopotamus is named Beauty\nThe kangaroo is named Milo\nThe lion has seven friends and is named Pashmak\nThe octopus has a card that is indigo in color\nThe octopus is named Bella\n\nBased on the game state and the rules and preferences, does the lion sing a victory song for the koala?\nQuestion: Does the lion sing a victory song for the koala?",
        "idx": 329,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the octopus has a name whose first letter is the same as the first letter of the hippopotamus's name, then the octopus knocks down the fortress of the hare\nrule1() = first_letter_of(name(octopus)) == first_letter_of(name(hippopotamus)) => knock_down(fortress_of(hare))\n# Rule2: If the octopus has something to carry apples and oranges, then the octopus does not knock down the fortress that belongs to the hare\nrule2() = has(octopus, carry_apples_and_oranges) => not knock_down(fortress_of(hare))\n# Rule3: If at least one animal raises a peace flag for the kudu, then the lion proceeds to the spot that is right after the spot of the oscar\nrule3() = raise_flag_of_peace(something, kudu) => proceed(lion, spot_right_after(spot_of(oscar)))\n# Rule4: If you see that something proceeds to the spot right after the oscar and needs the support of the buffalo, what can you certainly conclude? You can conclude that it does not eat the food of the penguin\nrule4(something) = proceed(something, spot_right_after(spot_of(oscar))) & needs_support(something, buffalo) => not eat_food_of(something, penguin)\n# Rule5: If something does not eat the food of the penguin, then it sings a song of victory for the koala\nrule5(something) = not eat_food_of(something, penguin) => sing_song(something, victory_song_for(koala))\n# Rule6: If at least one animal knocks down the fortress that belongs to the hare, then the raven rolls the dice for the lion\nrule6() = knock_down(fortress_of(hare)) => roll_dice(raven, lion)\n# Rule7: If the octopus has a card whose color starts with the letter \"n\", then the octopus knocks down the fortress that belongs to the hare\nrule7() = has(octopus, card_with(color_starting_with(\"n\"))) => knock_down(fortress_of(hare))\n# Rule8: If the catfish does not attack the green fields whose owner is the lion however the raven rolls the dice for the lion, then the lion will not sing a song of victory for the koala\nrule8() = not attack(catfish, green_fields_owned_by(lion)) & roll_dice(raven, lion) => not sing_song(lion, victory_song_for(koala))\n# Rule9: If something does not steal five of the points of the meerkat, then it eats the food of the penguin\nrule9(something) = not steal_points(something, 5, meerkat) => eat_food_of(something, penguin)\n# Rule10: If the lion has more than 11 friends, then the lion needs support from the buffalo\nrule10() = friends(lion) > 11 => needs_support(lion, buffalo)\n# Rule11: Regarding the lion, if it has a name whose first letter is the same as the first letter of the kangaroo's name, then we can conclude that it needs the support of the buffalo.\nrule11() = first_letter_of(name(lion)) == first_letter_of(name(kangaroo)) => needs_support(lion, buffalo)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule5 is preferred over Rule8\norder(rule5) > order(rule8) = True\n# Rule9 is preferred over Rule4\norder(rule9) > order(rule4) = True\n\n# The current state of the game is as follows\n# The gecko raises a peace flag for the kudu\nraise_flag_of_peace(gecko, kudu) = True\n# The hippopotamus is named Beauty\nname(hippopotamus, Beauty) = True\n# The kangaroo is named Milo\nname(kangaroo, Milo) = True\n# The lion has seven friends, and is named Pashmak\nfriends(lion) = 7\nname(lion, Pashmak) = True\n# The octopus has a card that is indigo in color\nhas(octopus, card_with(indigo_color)) = True\n# The octopus is named Bella\nname(octopus, Bella) = True\n\n# Based on the game state and the rules and preferences, does the lion sing a victory song for the koala?\nquestion = sing_song(lion, victory_song_for(koala))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the oscar does not hold an equal number of points as the halibut and the parrot does not give a magnifying glass to the halibut, then the halibut gives a magnifier to the gecko\nRule2: If something eats the food of the squirrel, then it does not become an actual enemy of the cow\nRule3: If the oscar created a time machine, then it does not know the defense plan of the baboon\nRule4: If something does not need the support of the buffalo, then it does not raise a peace flag for the leopard\nRule5: The parrot does not give a magnifier to the halibut whenever at least one animal becomes an enemy of the cow\nRule6: If the cockroach owes money to the oscar, then the oscar raises a peace flag for the leopard\nRule7: If something does not know the defense plan of the baboon and also does not raise a flag of peace for the leopard, then it does not hold the same number of points as the halibut\nRule8: If one of the animals shows all her cards to the cow, then she becomes an actual enemy of the cow\n\nRule2 is preferred over Rule8\nRule4 is preferred over Rule6\n\nThe current state of the game is as follows\nThe cockroach owes money to the oscar\nThe grizzly bear winks at the oscar\nThe oscar invented a time machine\nThe panda bear shows all her cards to the cow\nThe oscar does not need support from the buffalo\n\nBased on the game state and the rules and preferences, does the halibut give a magnifier to the gecko?\nQuestion: Does the halibut give a magnifier to the gecko?",
        "idx": 330,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the oscar does not hold an equal number of points as the halibut and the parrot does not give a magnifying glass to the halibut, then the halibut gives a magnifier to the gecko\nrule1() = not equal_points(oscar, halibut) & not give(parrot, magnifying_glass, halibut) => give(halibut, magnifier, gecko)\n# Rule2: If something eats the food of the squirrel, then it does not become an actual enemy of the cow\nrule2() = eat_food(something, squirrel) => not actual_enemy(something, cow)\n# Rule3: Regarding the oscar, if it created a time machine, then we can conclude that it does not know the defense plan of the baboon\nrule3() = created(oscar, time_machine) => not knows(defense_plan_of(baboon), oscar)\n# Rule4: If something does not need the support of the buffalo, then it does not raise a peace flag for the leopard\nrule4() = not needs_support(something, buffalo) => not raise_flag_of_peace(something, leopard)\n# Rule5: The parrot does not give a magnifier to the halibut whenever at least one animal becomes an enemy of the cow\nrule5() = enemy(animal, cow) => not give(parrot, magnifier, halibut)\n# Rule6: If the cockroach owes money to the oscar, then the oscar raises a peace flag for the leopard\nrule6() = owes_money_to(cockroach, oscar) => raise_flag_of_peace(oscar, leopard)\n# Rule7: Be careful when something does not know the defense plan of the baboon and also does not raise a flag of peace for the leopard because in this case it will surely not hold the same number of points as the halibut (this may or may not be problematic)\nrule7(something) = not knows(defense_plan_of(baboon), something) & not raise_flag_of_peace(something, leopard) => not equal_points(something, halibut)\n# Rule8: If you are positive that you saw one of the animals shows her cards (all of them) to the cow, you can be certain that it will also become an actual enemy of the cow.\nrule8() = show_cards(animal, cow) => actual_enemy(animal, cow)\n# Rule2 is preferred over Rule8\norder(rule2) > order(rule8) = True\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n\n# The current state of the game is as follows\n# The cockroach owes money to the oscar\nowes_money_to(cockroach, oscar) = True\n# The grizzly bear winks at the oscar\nwinks_at(grizzly_bear, oscar) = True\n# The oscar invented a time machine\ncreated(oscar, time_machine) = True\n# The panda bear shows all her cards to the cow\nshow_cards(panda_bear, cow) = True\n# The oscar does not need support from the buffalo\nnot needs_support(oscar, buffalo) = True\n\n# Based on the game state and the rules and preferences, does the halibut give a magnifier to the gecko?\nquestion = give(halibut, magnifier, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals gives a magnifying glass to the phoenix, you can be certain that it will not give a magnifying glass to the ferret\nRule2: If the baboon has a name whose first letter is the same as the first letter of the donkey's name, then the baboon does not sing a song of victory for the ferret\nRule3: If the squid has a card whose color starts with the letter \"h\", then the squid does not become an actual enemy of the tilapia\nRule4: If the lobster is not going to give a magnifier to the ferret but the baboon sings a victory song for the ferret, then it can be concluded that the ferret is not going to wink at the carp\nRule5: If at least one animal becomes an enemy of the tilapia, then the jellyfish does not become an actual enemy of the ferret\nRule6: The ferret will not prepare armor for the salmon if the jellyfish does not become an actual enemy of the ferret\nRule7: If the squid has a high salary, then it does not become an actual enemy of the tilapia\nRule8: The squid becomes an actual enemy of the tilapia if at least one animal eats the food that belongs to the cat\nRule9: If something owes money to the oscar, then it sings a song of victory for the ferret\nRule10: If you are positive that you saw one of the animals gives a magnifying glass to the cockroach, you can be certain that it will also wink at the carp\n\nRule10 is preferred over Rule4\nRule2 is preferred over Rule9\nRule3 is preferred over Rule8\nRule7 is preferred over Rule8\n\nThe current state of the game is as follows\nThe baboon is named Lola and owes money to the oscar\nThe catfish eats the food of the cat\nThe lobster gives a magnifier to the phoenix\nThe squid has a card that is white in color\n\nBased on the game state and the rules and preferences, does the ferret prepare armor for the salmon?\nQuestion: Does the ferret prepare armor for the salmon?",
        "idx": 331,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals gives a magnifying glass to the phoenix, you can be certain that it will not give a magnifying glass to the ferret\nrule1() = give_magnifying_glass(something, phoenix) => not give_magnifying_glass(something, ferret)\n# Rule2: If the baboon has a name whose first letter is the same as the first letter of the donkey's name, then the baboon does not sing a song of victory for the ferret\nrule2() = first_letter_of(name(baboon)) == first_letter_of(name(donkey)) => not sing_song(baboon, victory_song_for(ferret))\n# Rule3: If the squid has a card whose color starts with the letter \"h\", then the squid does not become an actual enemy of the tilapia\nrule3() = color_starts_with(card(squid), \"h\") => not actual_enemy(squid, tilapia)\n# Rule4: For the ferret, if the belief is that the lobster is not going to give a magnifier to the ferret but the baboon sings a victory song for the ferret, then you can add that \"the ferret is not going to wink at the carp\" to your conclusions\nrule4() = not give_magnifier(lobster, ferret) & sing_song(baboon, victory_song_for(ferret)) => add_conclusion(\"the ferret is not going to wink at the carp\")\n# Rule5: If at least one animal becomes an enemy of the tilapia, then the jellyfish does not become an actual enemy of the ferret\nrule5() = enemy(something, tilapia) => not actual_enemy(jellyfish, ferret)\n# Rule6: The ferret will not prepare armor for the salmon, in the case where the jellyfish does not become an actual enemy of the ferret\nrule6() = not actual_enemy(jellyfish, ferret) => not prepare_armor(ferret, salmon)\n# Rule7: Regarding the squid, if it has a high salary, then we can conclude that it does not become an actual enemy of the tilapia\nrule7() = has_high_salary(squid) => not actual_enemy(squid, tilapia)\n# Rule8: The squid becomes an actual enemy of the tilapia whenever at least one animal eats the food that belongs to the cat\nrule8() = eats_food(something, cat) => actual_enemy(squid, tilapia)\n# Rule9: If something owes money to the oscar, then it sings a song of victory for the ferret, too\nrule9() = owes_money_to(something, oscar) => sing_song(something, victory_song_for(ferret))\n# Rule10: If you are positive that you saw one of the animals gives a magnifying glass to the cockroach, you can be certain that it will also wink at the carp.\nrule10() = give_magnifying_glass(something, cockroach) => wink(something, carp)\n# Rule10 is preferred over Rule4\norder(rule10) > order(rule4) = True\n# Rule2 is preferred over Rule9\norder(rule2) > order(rule9) = True\n# Rule3 is preferred over Rule8\norder(rule3) > order(rule8) = True\n# Rule7 is preferred over Rule8\norder(rule7) > order(rule8) = True\n\n# The current state of the game is as follows\n# The baboon is named Lola, and owes money to the oscar\nname(baboon, Lola) = True\nowes_money_to(baboon, oscar) = True\n# The catfish eats the food of the cat\neats_food(catfish, cat) = True\n# The lobster gives a magnifier to the phoenix\ngive_magnifier(lobster, phoenix) = True\n# The squid has a card that is white in color\ncard(squid, white_color) = True\n\n# Based on the game state and the rules and preferences, does the ferret prepare armor for the salmon?\nquestion = prepare_armor(ferret, salmon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job position to the octopus, then it becomes an enemy of the bat, too\nRule2: If the koala has a device to connect to the internet, then it does not learn elementary resource management from the eagle\nRule3: If the koala learns the basics of resource management from the eagle, then the eagle offers a job position to the octopus\nRule4: If the koala has a card whose color starts with the letter \"o\", then it does not learn elementary resource management from the eagle\nRule5: If the sheep proceeds to the spot that is right after the spot of the koala and the leopard attacks the green fields of the koala, then the koala learns the basics of resource management from the eagle\n\nRule2 is preferred over Rule5\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe koala has some spinach\nThe leopard attacks the green fields of the koala\nThe sheep does not proceed to the spot right after the koala\n\nBased on the game state and the rules and preferences, does the eagle become an enemy of the bat?\nQuestion: Does the eagle become an enemy of the bat?",
        "idx": 332,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something offers a job position to the octopus, then it becomes an enemy of the bat, too\nrule1(something) = offer_job_position(something, octopus) => enemy(something, bat)\n# Rule2: Regarding the koala, if it has a device to connect to the internet, then we can conclude that it does not learn elementary resource management from the eagle\nrule2() = has(koala, connect_to_internet(device)) => not learn_elementary_resource_management(koala, eagle)\n# Rule3: The eagle unquestionably offers a job to the octopus, in the case where the koala learns the basics of resource management from the eagle\nrule3() = learn_basics_of_resource_management(koala, eagle) => offer_job_position(eagle, octopus)\n# Rule4: If the koala has a card whose color starts with the letter \"o\", then the koala does not learn elementary resource management from the eagle\nrule4() = has(koala, card_with(color_starting_with(\"o\"))) => not learn_elementary_resource_management(koala, eagle)\n# Rule5: If the sheep proceeds to the spot that is right after the spot of the koala and the leopard attacks the green fields of the koala, then the koala learns the basics of resource management from the eagle.\nrule5() = proceed(sheep, spot_right_after(spot_of(koala))) & attack(leopard, green_fields_of(koala)) => learn_basics_of_resource_management(koala, eagle)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The koala has some spinach\nhas(koala, spinach) = True\n# The leopard attacks the green fields whose owner is the koala\nattack(leopard, green_fields_of(koala)) = True\n# The sheep does not proceed to the spot right after the koala\nnot proceed(sheep, spot_right_after(spot_of(koala))) = True\n\n# Based on the game state and the rules and preferences, does the eagle become an enemy of the bat?\nquestion = enemy(eagle, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the puffin starts with the same letter as the name of the hummingbird, then the puffin attacks the green fields owned by the grizzly bear\nRule2: If an animal attacks the green fields owned by the grizzly bear, then it sings a victory song for the zander\nRule3: If an animal sings a victory song for the zander, then it knows the defensive plans of the cockroach\nRule4: If the puffin reduces her work hours, then she attacks the green fields owned by the grizzly bear\n\nThe current state of the game is as follows\nThe hummingbird is named Luna\nThe puffin is named Meadow\nThe puffin recently reduced her work hours\n\nBased on the game state and the rules and preferences, does the puffin know the defensive plans of the cockroach?\nQuestion: Does the puffin know the defensive plans of the cockroach?",
        "idx": 333,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the puffin, if it has a name whose first letter is the same as the first letter of the hummingbird's name, then we can conclude that it attacks the green fields whose owner is the grizzly bear\nrule1() = first_letter_of(name(puffin)) == first_letter_of(name(hummingbird)) => attack_green_fields(puffin, owner(grizzly_bear))\n# Rule2: If you are positive that you saw one of the animals attacks the green fields whose owner is the grizzly bear, you can be certain that it will also sing a song of victory for the zander\nrule2() = attacks_green_fields(something, owner(grizzly_bear)) => sing_song(something, victory_song_for(zander))\n# Rule3: If you are positive that you saw one of the animals sings a victory song for the zander, you can be certain that it will also know the defensive plans of the cockroach\nrule3() = sings_victory_song(something, zander) => knows_defensive_plans(something, cockroach)\n# Rule4: Regarding the puffin, if it works fewer hours than before, then we can conclude that it attacks the green fields whose owner is the grizzly bear.\nrule4() = reduce_work_hours(puffin) => attack_green_fields(puffin, owner(grizzly_bear))\n\n# The current state of the game is as follows\n# The hummingbird is named Luna\nname(hummingbird, Luna) = True\n# The puffin is named Meadow\nname(puffin, Meadow) = True\n# The puffin reduced her work hours recently\nreduce_work_hours(puffin) = True\n\n# Based on the game state and the rules and preferences, does the puffin know the defensive plans of the cockroach?\nquestion = knows_defensive_plans(puffin, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The grizzly bear does not wink at the swordfish, in the case where the parrot shows all her cards to the grizzly bear\nRule2: If the jellyfish does not hold an equal number of points as the parrot, then the parrot does not show all her cards to the grizzly bear\nRule3: If the raven does not hold the same number of points as the parrot, then the parrot shows all her cards to the grizzly bear\nRule4: If the sea bass created a time machine, then it removes one of the pieces of the phoenix\nRule5: If at least one animal removes one of the pieces of the phoenix from the board, then the carp rolls the dice for the octopus\nRule6: If the raven has a card whose color starts with the letter \"y\", then it does not hold an equal number of points as the parrot\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe raven has a card that is yellow in color\nThe sea bass invented a time machine\n\nBased on the game state and the rules and preferences, does the grizzly bear wink at the swordfish?\nQuestion: Does the grizzly bear wink at the swordfish?",
        "idx": 334,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The grizzly bear does not wink at the swordfish, in the case where the parrot shows her cards (all of them) to the grizzly bear\nrule1() = show_cards(parrot, grizzly_bear) => not wink(grizzly_bear, swordfish)\n# Rule2: If the jellyfish does not hold an equal number of points as the parrot, then the parrot does not show her cards (all of them) to the grizzly bear\nrule2() = points(jellyfish) != points(parrot) => not show_cards(parrot, grizzly_bear)\n# Rule3: If the raven does not hold the same number of points as the parrot, then the parrot shows all her cards to the grizzly bear\nrule3() = points(raven) != points(parrot) => show_cards(parrot, grizzly_bear)\n# Rule4: Regarding the sea bass, if it created a time machine, then we can conclude that it removes one of the pieces of the phoenix\nrule4() = created_time_machine(sea_bass) => remove(sea_bass, piece_of(phoenix))\n# Rule5: If at least one animal removes from the board one of the pieces of the phoenix, then the carp rolls the dice for the octopus\nrule5() = remove(something, piece_of(phoenix)) => roll_dice(carp, octopus)\n# Rule6: Regarding the raven, if it has a card whose color starts with the letter \"y\", then we can conclude that it does not hold an equal number of points as the parrot.\nrule6() = color_starts_with(raven, \"y\") => points(raven) != points(parrot)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The raven has a card that is yellow in color\nhas(raven, card_with(yellow_color)) = True\n# The sea bass invented a time machine\ninvented_time_machine(sea_bass) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear wink at the swordfish?\nquestion = wink(grizzly_bear, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tilapia has a sharp object, then it offers a job position to the cat\nRule2: If the tilapia does not have her keys, then it does not offer a job position to the cat\nRule3: If the canary becomes an actual enemy of the cat, then the cat does not knock down the fortress of the gecko\nRule4: If the eel took a bike from the store, then it does not burn the warehouse that belongs to the cat\nRule5: If an animal attacks the green fields owned by the ferret, then it knocks down the fortress of the gecko\nRule6: If the hummingbird does not prepare armor for the puffin, then the puffin learns the basics of resource management from the squid\nRule7: If at least one animal learns the basics of resource management from the squid, then the cat burns the warehouse that belongs to the ferret\nRule8: If the tilapia has a card whose color starts with the letter \"i\", then it offers a job position to the cat\nRule9: If the eel does not burn the warehouse of the cat and the tilapia offers a job to the cat, then the cat does not burn the warehouse that belongs to the ferret\nRule10: If the tilapia has something to carry apples and oranges, then it does not offer a job position to the cat\n\nRule10 is preferred over Rule1\nRule10 is preferred over Rule8\nRule2 is preferred over Rule1\nRule2 is preferred over Rule8\nRule3 is preferred over Rule5\nRule7 is preferred over Rule9\n\nThe current state of the game is as follows\nThe eel has a card that is green in color\nThe eel is named Cinnamon\nThe eel stole a bike from the store\nThe rabbit is named Teddy\nThe tilapia has a card that is indigo in color\nThe tilapia has a harmonica\nThe tilapia is holding her keys\nThe hummingbird does not prepare armor for the puffin\n\nBased on the game state and the rules and preferences, does the cat knock down the fortress of the gecko?\nQuestion: Does the cat knock down the fortress of the gecko?",
        "idx": 335,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the tilapia, if it has a sharp object, then we can conclude that it offers a job position to the cat\nrule1() = has(tilapia, sharp_object) => offer_job_position(tilapia, cat)\n# Rule2: If the tilapia does not have her keys, then the tilapia does not offer a job to the cat\nrule2() = not has(tilapia, keys) => not offer_job_position(tilapia, cat)\n# Rule3: If the canary becomes an actual enemy of the cat, then the cat is not going to knock down the fortress that belongs to the gecko\nrule3() = actual_enemy(canary, cat) => not knock_down_fortress(cat, fortress_of(gecko))\n# Rule4: If the eel took a bike from the store, then the eel does not burn the warehouse that is in possession of the cat\nrule4() = took_bike(eel, store) => not burn_warehouse(eel, warehouse_of(cat))\n# Rule5: If you are positive that you saw one of the animals attacks the green fields whose owner is the ferret, you can be certain that it will also knock down the fortress of the gecko\nrule5() = attacks_green_fields(something, owner(ferret)) => knock_down_fortress(something, fortress_of(gecko))\n# Rule6: If the hummingbird does not prepare armor for the puffin, then the puffin learns the basics of resource management from the squid\nrule6() = not prepare_armor(hummingbird, puffin) => learn_basics_of_resource_management(puffin, squid)\n# Rule7: If at least one animal learns the basics of resource management from the squid, then the cat burns the warehouse that is in possession of the ferret\nrule7() = learns_basics_of_resource_management(something, squid) => burn_warehouse(cat, warehouse_of(ferret))\n# Rule8: If the tilapia has a card whose color starts with the letter \"i\", then the tilapia offers a job position to the cat\nrule8() = has(tilapia, card_with(color_starting_with(\"i\"))) => offer_job_position(tilapia, cat)\n# Rule9: For the cat, if the belief is that the eel is not going to burn the warehouse of the cat but the tilapia offers a job to the cat, then you can add that \"the cat is not going to burn the warehouse that is in possession of the ferret\" to your conclusions\nrule9() = not burn_warehouse(eel, warehouse_of(cat)) & offer_job_position(tilapia, cat) => not burn_warehouse(cat, warehouse_of(ferret))\n# Rule10: Regarding the tilapia, if it has something to carry apples and oranges, then we can conclude that it does not offer a job position to the cat.\nrule10() = has(tilapia, something_to_carry_apples_and_oranges) => not offer_job_position(tilapia, cat)\n# Rule10 is preferred over Rule1\norder(rule10) > order(rule1) = True\n# Rule10 is preferred over Rule8\norder(rule10) > order(rule8) = True\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule2 is preferred over Rule8\norder(rule2) > order(rule8) = True\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule7 is preferred over Rule9\norder(rule7) > order(rule9) = True\n\n# The current state of the game is as follows\n# The eel has a card that is green in color\nhas(eel, card_with(green_color)) = True\n# The eel is named Cinnamon, and stole a bike from the store\nname(eel, Cinnamon) = True\nstole_bike(eel, store) = True\n# The rabbit is named Teddy\nname(rabbit, Teddy) = True\n# The tilapia has a card that is indigo in color, has a harmonica, and is holding her keys\nhas(tilapia, card_with(indigo_color)) = True\nhas(tilapia, harmonica) = True\nholding(tilapia, keys) = True\n# The hummingbird does not prepare armor for the puffin\nnot prepare_armor(hummingbird, puffin) = True\n\n# Based on the game state and the rules and preferences, does the cat knock down the fortress of the gecko?\nquestion = knock_down_fortress(cat, fortress_of(gecko))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The sun bear sings a song of victory for the salmon whenever at least one animal knows the defensive plans of the blobfish\nRule2: If the mosquito eats the food that belongs to the sun bear, then the sun bear removes one of the pieces of the viperfish\nRule3: If the starfish has fewer than 12 friends, then it knows the defense plan of the blobfish\nRule4: If something sings a song of victory for the salmon but does not roll the dice for the tilapia, then it sings a victory song for the cow\nRule5: If something removes one of the pieces of the viperfish, then it does not roll the dice for the tilapia\nRule6: If the starfish has a card whose color starts with the letter \"b\", then it does not know the defense plan of the blobfish\nRule7: If the kiwi does not steal five points from the sun bear but the amberjack proceeds to the spot right after the spot of the sun bear, then the sun bear rolls the dice for the tilapia\nRule8: If the kiwi has more than seven friends, then it does not steal five points from the sun bear\nRule9: If the starfish has a name whose first letter is the same as the first letter of the oscar's name, then the starfish does not know the defense plan of the blobfish\n\nRule6 is preferred over Rule3\nRule7 is preferred over Rule5\nRule9 is preferred over Rule3\n\nThe current state of the game is as follows\nThe kiwi has nine friends\nThe mosquito eats the food of the sun bear\nThe oscar is named Max\nThe starfish has 1 easy-going friend and 8 not-easy-going friends\nThe starfish is named Lily\n\nBased on the game state and the rules and preferences, does the sun bear sing a victory song for the cow?\nQuestion: Does the sun bear sing a victory song for the cow?",
        "idx": 336,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The sun bear sings a song of victory for the salmon whenever at least one animal knows the defensive plans of the blobfish\nrule1() = knows(defensive_plans_of(blobfish), something) => sing_song(sun_bear, victory_song_for(salmon))\n# Rule2: If the mosquito eats the food that belongs to the sun bear, then the sun bear removes one of the pieces of the viperfish\nrule2() = eats_food(mosquito, food_of(sun_bear)) => remove(sun_bear, piece_of(viperfish))\n# Rule3: Regarding the starfish, if it has fewer than 12 friends, then we can conclude that it knows the defense plan of the blobfish\nrule3() = friends(starfish) < 12 => knows(defensive_plans_of(blobfish), starfish)\n# Rule4: If you see that something sings a song of victory for the salmon but does not roll the dice for the tilapia, what can you certainly conclude? You can conclude that it sings a victory song for the cow\nrule4(something) = sing_song(something, victory_song_for(salmon)) & not roll_dice(something, tilapia) => sing_song(something, victory_song_for(cow))\n# Rule5: If something removes one of the pieces of the viperfish, then it does not roll the dice for the tilapia\nrule5() = remove(something, piece_of(viperfish)) => not roll_dice(something, tilapia)\n# Rule6: Regarding the starfish, if it has a card whose color starts with the letter \"b\", then we can conclude that it does not know the defense plan of the blobfish\nrule6() = has(starfish, card_with(color_starting_with(\"b\"))) => not knows(defensive_plans_of(blobfish), starfish)\n# Rule7: For the sun bear, if the belief is that the kiwi does not steal five of the points of the sun bear but the amberjack proceeds to the spot that is right after the spot of the sun bear, then you can add \"the sun bear rolls the dice for the tilapia\" to your conclusions\nrule7() = not steal_points(kiwi, 5, sun_bear) & proceed(amberjack, spot_right_after(spot_of(sun_bear))) => roll_dice(sun_bear, tilapia)\n# Rule8: If the kiwi has more than seven friends, then the kiwi does not steal five of the points of the sun bear\nrule8() = friends(kiwi) > 7 => not steal_points(kiwi, 5, sun_bear)\n# Rule9: If the starfish has a name whose first letter is the same as the first letter of the oscar's name, then the starfish does not know the defense plan of the blobfish.\nrule9() = first_letter_of(name(starfish)) == first_letter_of(name(oscar)) => not knows(defensive_plans_of(blobfish), starfish)\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n# Rule9 is preferred over Rule3\norder(rule9) > order(rule3) = True\n\n# The current state of the game is as follows\n# The kiwi has nine friends\nfriends(kiwi) = 9\n# The mosquito eats the food of the sun bear\neats_food(mosquito, food_of(sun_bear)) = True\n# The oscar is named Max\nname(oscar, Max) = True\n# The starfish has 1 friend that is easy going and 8 friends that are not, and is named Lily\nfriends(starfish) = 1 easy_going_friend + 8 not_easy_going_friends\nname(starfish, Lily) = True\n\n# Based on the game state and the rules and preferences, does the sun bear sing a victory song for the cow?\nquestion = sing_song(sun_bear, victory_song_for(cow))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal prepares armor for the kudu, then the lobster does not owe money to the black bear\nRule2: If at least one animal eats the food of the rabbit, then the cow does not become an enemy of the squid\nRule3: The squid does not wink at the grasshopper, in the case where the zander proceeds to the spot right after the squid\nRule4: If the hare has a name whose first letter is the same as the first letter of the cat's name, then the hare eats the food of the rabbit\nRule5: If the octopus rolls the dice for the jellyfish, then the jellyfish steals five points from the black bear\nRule6: If the hare has fewer than 12 friends, then it does not eat the food that belongs to the rabbit\nRule7: The black bear will not know the defensive plans of the squid, in the case where the lobster does not owe money to the black bear\nRule8: If one of the animals does not roll the dice for the moose, then it will proceed to the spot right after the koala\nRule9: If the sun bear needs support from the zander, then the zander raises a flag of peace for the whale\nRule10: If something does not wink at the catfish but raises a peace flag for the whale, then it does not proceed to the spot right after the squid\nRule11: If the oscar burns the warehouse of the zander, then the zander does not proceed to the spot right after the koala\nRule12: If something burns the warehouse of the raven, then it owes money to the black bear\nRule13: If one of the animals proceeds to the spot right after the koala, then it will also proceed to the spot right after the squid\n\nRule10 is preferred over Rule13\nRule12 is preferred over Rule1\nRule6 is preferred over Rule4\nRule8 is preferred over Rule11\n\nThe current state of the game is as follows\nThe cat is named Chickpea\nThe dog prepares armor for the kudu\nThe hare is named Cinnamon\nThe octopus rolls the dice for the jellyfish\nThe oscar burns the warehouse of the zander\nThe sun bear needs support from the zander\nThe zander does not roll the dice for the moose\n\nBased on the game state and the rules and preferences, does the squid wink at the grasshopper?\nQuestion: Does the squid wink at the grasshopper?",
        "idx": 337,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal prepares armor for the kudu, then the lobster does not owe money to the black bear\nrule1() = prepare_armor(something, kudu) => not owes_money_to(lobster, black_bear)\n# Rule2: If at least one animal eats the food of the rabbit, then the cow does not become an enemy of the squid\nrule2() = eat_food(something, rabbit) => not enemy(cow, squid)\n# Rule3: The squid does not wink at the grasshopper, in the case where the zander proceeds to the spot right after the squid\nrule3() = proceed(zander, spot_right_after(spot_of(squid))) => not wink(squid, grasshopper)\n# Rule4: If the hare has a name whose first letter is the same as the first letter of the cat's name, then the hare eats the food of the rabbit\nrule4() = first_letter_of(name(hare)) == first_letter_of(name(cat)) => eat_food(hare, rabbit)\n# Rule5: If the octopus rolls the dice for the jellyfish, then the jellyfish steals five points from the black bear\nrule5() = roll_dice(octopus, jellyfish) => steal_points(jellyfish, 5, black_bear)\n# Rule6: Regarding the hare, if it has fewer than 12 friends, then we can conclude that it does not eat the food that belongs to the rabbit\nrule6() = friends(hare) < 12 => not eat_food(hare, rabbit)\n# Rule7: The black bear will not know the defensive plans of the squid, in the case where the lobster does not owe $$$ to the black bear\nrule7() = not owes_money_to(lobster, black_bear) => not knows(defensive_plans_of(squid), black_bear)\n# Rule8: If you are positive that one of the animals does not roll the dice for the moose, you can be certain that it will proceed to the spot right after the koala without a doubt\nrule8(something) = not roll_dice(something, moose) => proceed(something, spot_right_after(spot_of(koala)))\n# Rule9: If the sun bear needs support from the zander, then the zander raises a flag of peace for the whale\nrule9() = needs_support(sun_bear, zander) => raise_flag_of_peace(zander, whale)\n# Rule10: Be careful when something does not wink at the catfish but raises a peace flag for the whale because in this case it certainly does not proceed to the spot that is right after the spot of the squid (this may or may not be problematic)\nrule10(something) = not wink(something, catfish) & raise_flag_of_peace(something, whale) => not proceed(something, spot_right_after(spot_of(squid)))\n# Rule11: If the oscar burns the warehouse that is in possession of the zander, then the zander is not going to proceed to the spot right after the koala\nrule11() = burn(warehouse_of(zander), oscar) => not proceed(zander, spot_right_after(spot_of(koala)))\n# Rule12: If something burns the warehouse of the raven, then it owes $$$ to the black bear, too\nrule12(something) = burn(warehouse_of(raven), something) => owes_money_to(something, black_bear)\n# Rule13: If you are positive that you saw one of the animals proceeds to the spot right after the koala, you can be certain that it will also proceed to the spot right after the squid.\nrule13(something) = proceed(something, spot_right_after(spot_of(koala))) => proceed(something, spot_right_after(spot_of(squid)))\n# Rule10 is preferred over Rule13\norder(rule10) > order(rule13) = True\n# Rule12 is preferred over Rule1\norder(rule12) > order(rule1) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule8 is preferred over Rule11\norder(rule8) > order(rule11) = True\n\n# The current state of the game is as follows\n# The cat is named Chickpea\nname(cat, Chickpea) = True\n# The dog prepares armor for the kudu\nprepare_armor(dog, kudu) = True\n# The hare is named Cinnamon\nname(hare, Cinnamon) = True\n# The octopus rolls the dice for the jellyfish\nroll_dice(octopus, jellyfish) = True\n# The oscar burns the warehouse of the zander\nburn(warehouse_of(zander), oscar) = True\n# The sun bear needs support from the zander\nneeds_support(sun_bear, zander) = True\n# The zander does not roll the dice for the moose\nnot roll_dice(zander, moose) = True\n\n# Based on the game state and the rules and preferences, does the squid wink at the grasshopper?\nquestion = wink(squid, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the tiger starts with the first letter of the name of the pig, then the tiger owes money to the wolverine\nRule2: If something does not owe money to the wolverine and also does not offer a job to the viperfish, then it does not attack the green fields owned by the lion\nRule3: If something sings a victory song for the lion, then it becomes an enemy of the panther\nRule4: If at least one animal raises a flag of peace for the lobster, then the tiger attacks the green fields owned by the lion\nRule5: If the tiger took a bike from the store, then the tiger owes money to the wolverine\nRule6: If the zander knocks down the fortress of the crocodile, then the crocodile raises a peace flag for the lobster\n\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe pig is named Lola\nThe tiger is named Lola\nThe tiger lost her keys\nThe zander knocks down the fortress of the crocodile\n\nBased on the game state and the rules and preferences, does the tiger become an enemy of the panther?\nQuestion: Does the tiger become an enemy of the panther?",
        "idx": 338,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the tiger, if it has a name whose first letter is the same as the first letter of the pig's name, then we can conclude that it owes money to the wolverine\nrule1() = first_letter_of(name(tiger)) == first_letter_of(name(pig)) => owes_money_to(tiger, wolverine)\n# Rule2: Be careful when something does not owe money to the wolverine and also does not offer a job to the viperfish because in this case it will surely not attack the green fields whose owner is the lion (this may or may not be problematic)\nrule2(something) = not owes_money_to(something, wolverine) & not offer_job(something, viperfish) => not attack(green_fields_of(lion))\n# Rule3: If something sings a victory song for the lion, then it becomes an enemy of the panther, too\nrule3(something) = sing_song(something, victory_song_for(lion)) => enemy(something, panther)\n# Rule4: The tiger attacks the green fields of the lion whenever at least one animal raises a flag of peace for the lobster\nrule4() = raise_flag_of_peace(something, lobster) => attack(green_fields_of(lion), tiger)\n# Rule5: If the tiger took a bike from the store, then the tiger owes $$$ to the wolverine\nrule5() = took_bike(tiger, store) => owes_money_to(tiger, wolverine)\n# Rule6: If the zander knocks down the fortress of the crocodile, then the crocodile raises a peace flag for the lobster.\nrule6() = knock_down(fortress_of(crocodile), zander) => raise_flag_of_peace(crocodile, lobster)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The pig is named Lola\nname(pig, Lola) = True\n# The tiger is named Lola\nname(tiger, Lola) = True\n# The tiger lost her keys\nlost_keys(tiger) = True\n# The zander knocks down the fortress of the crocodile\nknock_down(fortress_of(crocodile), zander) = True\n\n# Based on the game state and the rules and preferences, does the tiger become an enemy of the panther?\nquestion = enemy(tiger, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo has a high salary, then it respects the goldfish\nRule2: If something respects the goldfish, then it does not raise a flag of peace for the cockroach\nRule3: If the kudu proceeds to the spot that is right after the spot of the cockroach, then the cockroach does not roll the dice for the turtle\nRule4: If the buffalo does not raise a peace flag for the cockroach, then the cockroach rolls the dice for the turtle\nRule5: If the buffalo has fewer than five friends, then it respects the goldfish\n\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe buffalo got a well-paid job\nThe buffalo has 15 friends\n\nBased on the game state and the rules and preferences, does the cockroach roll the dice for the turtle?\nQuestion: Does the cockroach roll the dice for the turtle?",
        "idx": 339,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the buffalo, if it has a high salary, then we can conclude that it respects the goldfish\nrule1() = has_high_salary(buffalo) => respects(buffalo, goldfish)\n# Rule2: If something respects the goldfish, then it does not raise a flag of peace for the cockroach\nrule2() = respects(something, goldfish) => not raise_flag_of_peace(something, cockroach)\n# Rule3: The cockroach does not roll the dice for the turtle, in the case where the kudu proceeds to the spot that is right after the spot of the cockroach\nrule3() = proceed(kudu, spot_right_after(spot_of(cockroach))) => not roll_dice(cockroach, turtle)\n# Rule4: If the buffalo does not raise a peace flag for the cockroach, then the cockroach rolls the dice for the turtle\nrule4() = not raise_flag_of_peace(buffalo, cockroach) => roll_dice(cockroach, turtle)\n# Rule5: Regarding the buffalo, if it has fewer than five friends, then we can conclude that it respects the goldfish.\nrule5() = friends(buffalo) < 5 => respects(buffalo, goldfish)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The buffalo got a well-paid job\nhas_high_salary(buffalo) = True\n# The buffalo has 15 friends\nfriends(buffalo) = 15\n\n# Based on the game state and the rules and preferences, does the cockroach roll the dice for the turtle?\nquestion = roll_dice(cockroach, turtle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hummingbird eats the food of the octopus and the crocodile eats the food of the octopus, then the octopus prepares armor for the spider\nRule2: If the octopus does not prepare armor for the spider, then the spider knocks down the fortress of the mosquito\nRule3: If the halibut respects the octopus, then the octopus does not prepare armor for the spider\nRule4: If the grasshopper proceeds to the spot right after the spider, then the spider shows her cards to the raven\nRule5: If something knocks down the fortress of the mosquito and shows her cards to the raven, then it does not eat the food that belongs to the koala\nRule6: If the squid does not proceed to the spot right after the grasshopper, then the grasshopper proceeds to the spot right after the spider\nRule7: If at least one animal offers a job to the aardvark, then the spider does not knock down the fortress of the mosquito\n\nRule1 is preferred over Rule3\nRule7 is preferred over Rule2\n\nThe current state of the game is as follows\nThe crocodile eats the food of the octopus\nThe halibut respects the octopus\nThe squid does not proceed to the spot right after the grasshopper\n\nBased on the game state and the rules and preferences, does the spider eat the food of the koala?\nQuestion: Does the spider eat the food of the koala?",
        "idx": 340,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the octopus, if the belief is that the hummingbird eats the food of the octopus and the crocodile eats the food of the octopus, then you can add \"the octopus prepares armor for the spider\" to your conclusions\nrule1() = belief(octopus, hummingbird_eats_food_of(octopus)) & belief(octopus, crocodile_eats_food_of(octopus)) => add_conclusion(\"the octopus prepares armor for the spider\")\n# Rule2: The spider unquestionably knocks down the fortress of the mosquito, in the case where the octopus does not prepare armor for the spider\nrule2() = not prepare_armor(octopus, spider) => knock_down(spider, fortress_of(mosquito))\n# Rule3: The octopus does not prepare armor for the spider, in the case where the halibut respects the octopus\nrule3() = respects(halibut, octopus) => not prepare_armor(octopus, spider)\n# Rule4: If the grasshopper proceeds to the spot that is right after the spot of the spider, then the spider shows her cards (all of them) to the raven\nrule4() = proceed(grasshopper, spot_right_after(spot_of(spider))) => show_cards(spider, raven)\n# Rule5: If you see that something knocks down the fortress that belongs to the mosquito and shows her cards (all of them) to the raven, what can you certainly conclude? You can conclude that it does not eat the food that belongs to the koala\nrule5(something) = knock_down(something, fortress_of(mosquito)) & show_cards(something, raven) => not eat_food_of(something, koala)\n# Rule6: The grasshopper unquestionably proceeds to the spot right after the spider, in the case where the squid does not proceed to the spot that is right after the spot of the grasshopper\nrule6() = not proceed(squid, spot_right_after(spot_of(grasshopper))) => proceed(grasshopper, spot_right_after(spot_of(spider)))\n# Rule7: The spider does not knock down the fortress that belongs to the mosquito whenever at least one animal offers a job to the aardvark.\nrule7() = offer_job_to(aardvark, something) => not knock_down(spider, fortress_of(mosquito))\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n\n# The current state of the game is as follows\n# The crocodile eats the food of the octopus\nbelief(octopus, crocodile_eats_food_of(octopus)) = True\n# The halibut respects the octopus\nrespects(halibut, octopus) = True\n# The squid does not proceed to the spot right after the grasshopper\nnot proceed(squid, spot_right_after(spot_of(grasshopper))) = True\n\n# Based on the game state and the rules and preferences, does the spider eat the food of the koala?\nquestion = eat_food_of(spider, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the carp has a name whose first letter is the same as the first letter of the bat's name, then it does not sing a song of victory for the grizzly bear\nRule2: If something does not raise a flag of peace for the grizzly bear, then it does not sing a victory song for the grizzly bear\nRule3: If the grizzly bear raises a flag of peace for the cat, then the cat owes money to the gecko\nRule4: The grizzly bear raises a flag of peace for the cat whenever at least one animal needs the support of the kiwi\nRule5: If one of the animals does not need the support of the lobster, then it will sing a victory song for the grizzly bear without a doubt\nRule6: If the kudu killed the mayor, then it does not respect the wolverine\nRule7: If at least one animal proceeds to the spot that is right after the spot of the wolverine, then the cat knows the defense plan of the sun bear\nRule8: If the kudu has a leafy green vegetable, then it respects the wolverine\nRule9: If the black bear removes one of the pieces of the mosquito, then the mosquito attacks the green fields whose owner is the black bear\nRule10: The sea bass sings a victory song for the grizzly bear whenever at least one animal attacks the green fields of the pig\nRule11: If something burns the warehouse of the moose, then it needs the support of the kiwi\nRule12: The mosquito does not attack the green fields of the black bear whenever at least one animal becomes an enemy of the black bear\nRule13: If the kudu has more than twelve friends, then it does not respect the wolverine\nRule14: The cat removes one of the pieces of the snail whenever at least one animal knocks down the fortress that belongs to the black bear\nRule15: If the carp has a card with a primary color, then it does not sing a victory song for the grizzly bear\n\nRule1 is preferred over Rule5\nRule12 is preferred over Rule9\nRule13 is preferred over Rule8\nRule15 is preferred over Rule5\nRule2 is preferred over Rule10\nRule6 is preferred over Rule8\n\nThe current state of the game is as follows\nThe amberjack winks at the moose\nThe bat is named Charlie\nThe black bear removes one of the pieces of the mosquito\nThe carp has a card that is orange in color\nThe carp needs support from the lobster\nThe dog becomes an enemy of the black bear\nThe kudu has 2 friends\nThe kudu has some spinach\nThe phoenix attacks the green fields whose owner is the pig\nThe sea bass raises a peace flag for the grizzly bear\n\nBased on the game state and the rules and preferences, does the cat owe money to the gecko?\nQuestion: Does the cat owe money to the gecko?",
        "idx": 341,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the carp, if it has a name whose first letter is the same as the first letter of the bat's name, then we can conclude that it does not sing a song of victory for the grizzly bear\nrule1() = first_letter_of(name(carp)) == first_letter_of(name(bat)) => not sing_song(carp, victory_song_for(grizzly_bear))\n# Rule2: If something does not raise a flag of peace for the grizzly bear, then it does not sing a victory song for the grizzly bear\nrule2(something) = not raise_flag_of_peace(something, grizzly_bear) => not sing_song(something, victory_song_for(grizzly_bear))\n# Rule3: If the grizzly bear raises a flag of peace for the cat, then the cat owes $$$ to the gecko\nrule3() = raise_flag_of_peace(grizzly_bear, cat) => owes_money_to(cat, gecko)\n# Rule4: The grizzly bear raises a flag of peace for the cat whenever at least one animal needs the support of the kiwi\nrule4() = needs_support(something, kiwi) => raise_flag_of_peace(grizzly_bear, cat)\n# Rule5: If you are positive that one of the animals does not need the support of the lobster, you can be certain that it will sing a victory song for the grizzly bear without a doubt\nrule5(something) = not needs_support(something, lobster) => sing_song(something, victory_song_for(grizzly_bear))\n# Rule6: Regarding the kudu, if it killed the mayor, then we can conclude that it does not respect the wolverine\nrule6() = killed(kudu, mayor) => not respects(kudu, wolverine)\n# Rule7: If at least one animal proceeds to the spot that is right after the spot of the wolverine, then the cat knows the defense plan of the sun bear\nrule7() = proceed(something, spot_right_after(spot_of(wolverine))) => knows(defense_plan_of(sun_bear), cat)\n# Rule8: Regarding the kudu, if it has a leafy green vegetable, then we can conclude that it respects the wolverine\nrule8() = has(kudu, leafy_green_vegetable) => respects(kudu, wolverine)\n# Rule9: If the black bear removes one of the pieces of the mosquito, then the mosquito attacks the green fields whose owner is the black bear\nrule9() = remove(black_bear, piece_of(mosquito)) => attack_green_fields(mosquito, owner_is(black_bear))\n# Rule10: The sea bass sings a victory song for the grizzly bear whenever at least one animal attacks the green fields of the pig\nrule10() = attack_green_fields(something, owner_is(pig)) => sing_song(sea_bass, victory_song_for(grizzly_bear))\n# Rule11: If something burns the warehouse of the moose, then it needs the support of the kiwi, too\nrule11(something) = burn(warehouse_of(moose), something) => needs_support(something, kiwi)\n# Rule12: The mosquito does not attack the green fields of the black bear whenever at least one animal becomes an enemy of the black bear\nrule12() = enemy(something, black_bear) => not attack_green_fields(mosquito, owner_is(black_bear))\n# Rule13: Regarding the kudu, if it has more than twelve friends, then we can conclude that it does not respect the wolverine\nrule13() = friends(kudu) > 12 => not respects(kudu, wolverine)\n# Rule14: The cat removes one of the pieces of the snail whenever at least one animal knocks down the fortress that belongs to the black bear\nrule14() = knock_down(something, fortress_of(black_bear)) => remove(cat, piece_of(snail))\n# Rule15: Regarding the carp, if it has a card with a primary color, then we can conclude that it does not sing a victory song for the grizzly bear.\nrule15() = has(carp, card_with(primary_color)) => not sing_song(carp, victory_song_for(grizzly_bear))\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule12 is preferred over Rule9\norder(rule12) > order(rule9) = True\n# Rule13 is preferred over Rule8\norder(rule13) > order(rule8) = True\n# Rule15 is preferred over Rule5\norder(rule15) > order(rule5) = True\n# Rule2 is preferred over Rule10\norder(rule2) > order(rule10) = True\n# Rule6 is preferred over Rule8\norder(rule6) > order(rule8) = True\n\n# The current state of the game is as follows\n# The amberjack winks at the moose\nwinks(amberjack, moose) = True\n# The bat is named Charlie\nname(bat, Charlie) = True\n# The black bear removes from the board one of the pieces of the mosquito\nremove(black_bear, piece_of(mosquito)) = True\n# The carp has a card that is orange in color\nhas(carp, card_with(orange_color)) = True\n# The carp needs support from the lobster\nneeds_support(carp, lobster) = True\n# The dog becomes an enemy of the black bear\nenemy(dog, black_bear) = True\n# The kudu has 2 friends\nfriends(kudu) = 2\n# The kudu has some spinach\nhas(kudu, spinach) = True\n# The phoenix attacks the green fields whose owner is the pig\nattack_green_fields(phoenix, owner_is(pig)) = True\n# The sea bass raises a peace flag for the grizzly bear\nraise_flag_of_peace(sea_bass, grizzly_bear) = True\n\n# Based on the game state and the rules and preferences, does the cat owe money to the gecko?\nquestion = owes_money_to(cat, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something burns the warehouse of the sun bear and gives a magnifying glass to the bat, then it does not roll the dice for the parrot\nRule2: If the raven offers a job position to the amberjack, then the amberjack does not prepare armor for the koala\nRule3: If something prepares armor for the koala, then it needs the support of the parrot\nRule4: If the lobster has something to drink, then it does not burn the warehouse of the sun bear\nRule5: If the canary has something to carry apples and oranges, then the canary shows all her cards to the lobster\nRule6: If the tilapia has fewer than 8 friends, then the tilapia becomes an actual enemy of the lobster\nRule7: If the name of the lobster starts with the same letter as the name of the penguin, then the lobster burns the warehouse of the sun bear\nRule8: If the blobfish holds an equal number of points as the tilapia, then the tilapia does not become an enemy of the lobster\nRule9: If the amberjack needs support from the parrot, then the parrot shows all her cards to the meerkat\nRule10: If the amberjack has something to carry apples and oranges, then the amberjack prepares armor for the koala\nRule11: If the tilapia has a card with a color starting with the letter \"i\", then the tilapia becomes an actual enemy of the lobster\nRule12: If the tilapia becomes an actual enemy of the lobster and the canary shows all her cards to the lobster, then the lobster rolls the dice for the parrot\n\nRule1 is preferred over Rule12\nRule11 is preferred over Rule8\nRule2 is preferred over Rule10\nRule6 is preferred over Rule8\nRule7 is preferred over Rule4\n\nThe current state of the game is as follows\nThe amberjack has a knapsack\nThe blobfish holds the same number of points as the tilapia\nThe canary has a knapsack\nThe lobster has hot chocolate and is named Peddi\nThe penguin is named Pablo\nThe tilapia has a card that is violet in color and has two friends\n\nBased on the game state and the rules and preferences, does the parrot show all her cards to the meerkat?\nQuestion: Does the parrot show all her cards to the meerkat?",
        "idx": 342,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something burns the warehouse of the sun bear and gives a magnifying glass to the bat, what can you certainly conclude? You can conclude that it does not roll the dice for the parrot\nrule1() = burn(warehouse_of(sun_bear), something) & give(something, magnifying_glass, bat) => not roll_dice(parrot)\n# Rule2: The amberjack does not prepare armor for the koala, in the case where the raven offers a job position to the amberjack\nrule2() = offer_job_position(raven, amberjack) => not prepare_armor(amberjack, koala)\n# Rule3: If something prepares armor for the koala, then it needs the support of the parrot, too\nrule3(something) = prepare_armor(something, koala) => needs_support(something, parrot)\n# Rule4: If the lobster has something to drink, then the lobster does not burn the warehouse of the sun bear\nrule4() = has(lobster, drink) => not burn(warehouse_of(sun_bear))\n# Rule5: If the canary has something to carry apples and oranges, then the canary shows all her cards to the lobster\nrule5() = has(canary, carry_apples_and_oranges) => show_cards(canary, lobster)\n# Rule6: If the tilapia has fewer than 8 friends, then the tilapia becomes an actual enemy of the lobster\nrule6() = friends(tilapia) < 8 => actual_enemy(tilapia, lobster)\n# Rule7: Regarding the lobster, if it has a name whose first letter is the same as the first letter of the penguin's name, then we can conclude that it burns the warehouse of the sun bear\nrule7() = first_letter_of(name(lobster)) == first_letter_of(name(penguin)) => burn(warehouse_of(sun_bear))\n# Rule8: The tilapia does not become an enemy of the lobster, in the case where the blobfish holds an equal number of points as the tilapia\nrule8() = points(blobfish) == points(tilapia) => not enemy(tilapia, lobster)\n# Rule9: If the amberjack needs support from the parrot, then the parrot shows her cards (all of them) to the meerkat\nrule9() = needs_support(amberjack, parrot) => show_cards(parrot, meerkat)\n# Rule10: Regarding the amberjack, if it has something to carry apples and oranges, then we can conclude that it prepares armor for the koala\nrule10() = has(amberjack, carry_apples_and_oranges) => prepare_armor(amberjack, koala)\n# Rule11: Regarding the tilapia, if it has a card whose color starts with the letter \"i\", then we can conclude that it becomes an actual enemy of the lobster\nrule11() = has(tilapia, card_with(color_starting_with(\"i\"))) => actual_enemy(tilapia, lobster)\n# Rule12: For the lobster, if the belief is that the tilapia becomes an actual enemy of the lobster and the canary shows her cards (all of them) to the lobster, then you can add \"the lobster rolls the dice for the parrot\" to your conclusions.\nrule12() = actual_enemy(tilapia, lobster) & show_cards(canary, lobster) => roll_dice(lobster, parrot)\n# Rule1 is preferred over Rule12\norder(rule1) > order(rule12) = True\n# Rule11 is preferred over Rule8\norder(rule11) > order(rule8) = True\n# Rule2 is preferred over Rule10\norder(rule2) > order(rule10) = True\n# Rule6 is preferred over Rule8\norder(rule6) > order(rule8) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n\n# The current state of the game is as follows\n# The amberjack has a knapsack\nhas(amberjack, knapsack) = True\n# The blobfish holds the same number of points as the tilapia\npoints(blobfish) == points(tilapia) = True\n# The canary has a knapsack\nhas(canary, knapsack) = True\n# The lobster has a hot chocolate, and is named Peddi\nhas(lobster, hot_chocolate) = True\nname(lobster, Peddi) = True\n# The penguin is named Pablo\nname(penguin, Pablo) = True\n# The tilapia has a card that is violet in color, and has two friends\nhas(tilapia, card_with(violet_color)) = True\nfriends(tilapia) = 2\n\n# Based on the game state and the rules and preferences, does the parrot show all her cards to the meerkat?\nquestion = show_cards(parrot, meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see one of the animals wink at the parrot, it will also steal five points from the catfish\nRule2: If something attacks the green fields of the zander and learns the basics of resource management from the sheep, it will wink at the parrot\nRule3: If you see one of the animals steal five points from the catfish, it will not burn the warehouse that belongs to the cat\n\nThe current state of the game is as follows\nThe sun bear attacks the green fields owned by the zander and has a trumpet\nThe sun bear learns the basics of resource management from the sheep and recently read a high-quality paper\n\nBased on the game state and the rules and preferences, does the sun bear burn the warehouse of the cat?\nQuestion: Does the sun bear burn the warehouse of the cat?",
        "idx": 343,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals winks at the parrot, you can be certain that it will also steal five points from the catfish\nrule1() = wink(something, parrot) => steal_points(something, 5, catfish)\n# Rule2: Be careful when something attacks the green fields of the zander and also learns the basics of resource management from the sheep because in this case it will surely wink at the parrot (this may or may not be problematic)\nrule2(something) = attack(something, green_fields_of(zander)) & learn_basics_of_resource_management(something, sheep) => wink(something, parrot)\n# Rule3: If you are positive that you saw one of the animals steals five points from the catfish, you can be certain that it will not burn the warehouse that is in possession of the cat.\nrule3() = steal_points(something, 5, catfish) => not burn(warehouse_of(cat), something)\n\n# The current state of the game is as follows\n# The sun bear attacks the green fields whose owner is the zander, and has a trumpet\nattack(sun_bear, green_fields_of(zander)) = True\nhas(sun_bear, trumpet) = True\n# The sun bear learns the basics of resource management from the sheep, and recently read a high-quality paper.\nlearn_basics_of_resource_management(sun_bear, sheep) = True\nrecently_read(sun_bear, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the sun bear burn the warehouse of the cat?\nquestion = burn(warehouse_of(cat), sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the crocodile has a card with a primary color, then it proceeds to the spot right after the sun bear\nRule2: If the snail learns elementary resource management from the sun bear, then the sun bear does not need support from the baboon\nRule3: If the crocodile proceeds to the spot right after the sun bear and the cow sings a victory song for the sun bear, then the sun bear will not wink at the phoenix\nRule4: If the crocodile has a name whose first letter is the same as the first letter of the halibut's name, then the crocodile does not proceed to the spot right after the sun bear\nRule5: The sun bear winks at the phoenix whenever at least one animal raises a peace flag for the dog\nRule6: If the crocodile has fewer than one friend, then it proceeds to the spot right after the sun bear\nRule7: If the crocodile has a musical instrument, then it does not proceed to the spot right after the sun bear\nRule8: If something offers a job to the jellyfish but does not wink at the phoenix, then it needs support from the baboon\nRule9: If something does not show all her cards to the kangaroo, then it attacks the green fields of the jellyfish\nRule10: If the sun bear has a name whose first letter is the same as the first letter of the moose's name, then the sun bear does not show all her cards to the kangaroo\nRule11: If the sun bear has a sharp object, then the sun bear does not show all her cards to the kangaroo\nRule12: If the turtle gives a magnifier to the cow, then the cow sings a victory song for the sun bear\n\nRule1 is preferred over Rule4\nRule1 is preferred over Rule7\nRule5 is preferred over Rule3\nRule6 is preferred over Rule4\nRule6 is preferred over Rule7\nRule8 is preferred over Rule2\n\nThe current state of the game is as follows\nThe crocodile has a card that is green in color\nThe crocodile has five friends that are kind and two friends that are not kind\nThe crocodile is named Tessa\nThe halibut is named Lily\nThe moose is named Tarzan\nThe sun bear has a cutter\nThe sun bear is named Teddy\nThe turtle gives a magnifier to the cow\n\nBased on the game state and the rules and preferences, does the sun bear need support from the baboon?\nQuestion: Does the sun bear need support from the baboon?",
        "idx": 344,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the crocodile, if it has a card with a primary color, then we can conclude that it proceeds to the spot right after the sun bear\nrule1() = has(crocodile, card_with(primary_color)) => proceed(crocodile, spot_right_after(spot_of(sun_bear)))\n# Rule2: The sun bear does not need support from the baboon, in the case where the snail learns elementary resource management from the sun bear\nrule2() = learn(snail, elementary_resource_management_from(sun_bear)) => not need_support(sun_bear, baboon)\n# Rule3: If the crocodile proceeds to the spot right after the sun bear and the cow sings a song of victory for the sun bear, then the sun bear will not wink at the phoenix\nrule3() = proceed(crocodile, spot_right_after(spot_of(sun_bear))) & sing_song(cow, victory_song_for(sun_bear)) => not wink(sun_bear, phoenix)\n# Rule4: If the crocodile has a name whose first letter is the same as the first letter of the halibut's name, then the crocodile does not proceed to the spot that is right after the spot of the sun bear\nrule4() = first_letter_of(name(crocodile)) == first_letter_of(name(halibut)) => not proceed(crocodile, spot_right_after(spot_of(sun_bear)))\n# Rule5: The sun bear winks at the phoenix whenever at least one animal raises a peace flag for the dog\nrule5() = raise_flag_of_peace(something, dog) => wink(sun_bear, phoenix)\n# Rule6: If the crocodile has fewer than one friend, then the crocodile proceeds to the spot that is right after the spot of the sun bear\nrule6() = friends(crocodile) < 1 => proceed(crocodile, spot_right_after(spot_of(sun_bear)))\n# Rule7: If the crocodile has a musical instrument, then the crocodile does not proceed to the spot that is right after the spot of the sun bear\nrule7() = has(crocodile, musical_instrument) => not proceed(crocodile, spot_right_after(spot_of(sun_bear)))\n# Rule8: Be careful when something offers a job to the jellyfish but does not wink at the phoenix because in this case it will, surely, need support from the baboon (this may or may not be problematic)\nrule8(something) = offer_job(something, jellyfish) & not wink(something, phoenix) => need_support(something, baboon)\n# Rule9: If something does not show all her cards to the kangaroo, then it attacks the green fields whose owner is the jellyfish\nrule9(something) = not show_cards(something, kangaroo) => attack(something, green_fields_of(jellyfish))\n# Rule10: If the sun bear has a name whose first letter is the same as the first letter of the moose's name, then the sun bear does not show her cards (all of them) to the kangaroo\nrule10() = first_letter_of(name(sun_bear)) == first_letter_of(name(moose)) => not show_cards(sun_bear, kangaroo)\n# Rule11: If the sun bear has a sharp object, then the sun bear does not show her cards (all of them) to the kangaroo\nrule11() = has(sun_bear, sharp_object) => not show_cards(sun_bear, kangaroo)\n# Rule12: The cow unquestionably sings a victory song for the sun bear, in the case where the turtle gives a magnifier to the cow.\nrule12() = give(turtle, magnifier, cow) => sing_song(cow, victory_song_for(sun_bear))\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n# Rule8 is preferred over Rule2\norder(rule8) > order(rule2) = True\n\n# The current state of the game is as follows\n# The crocodile has a card that is green in color, and has five friends that are kind and two friends that are not\nhas(crocodile, card_with(green_color)) = True\nfriends(crocodile, kind) = 5\nfriends(crocodile, not_kind) = 2\n# The crocodile is named Tessa\nname(crocodile, Tessa) = True\n# The halibut is named Lily\nname(halibut, Lily) = True\n# The moose is named Tarzan\nname(moose, Tarzan) = True\n# The sun bear has a cutter\nhas(sun_bear, cutter) = True\n# The sun bear is named Teddy\nname(sun_bear, Teddy) = True\n# The turtle gives a magnifier to the cow\ngive(turtle, magnifier, cow) = True\n\n# Based on the game state and the rules and preferences, does the sun bear need support from the baboon?\nquestion = need_support(sun_bear, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the pig has a leafy green vegetable, then the pig learns elementary resource management from the jellyfish\nRule2: If the jellyfish has a device to connect to the internet, then it eats the food that belongs to the kudu\nRule3: The polar bear respects the kiwi, in the case where the blobfish proceeds to the spot right after the polar bear\nRule4: If the jellyfish has a name whose first letter is the same as the first letter of the panda bear's name, then the jellyfish does not eat the food that belongs to the kudu\nRule5: If at least one animal sings a victory song for the canary, then the blobfish proceeds to the spot right after the polar bear\nRule6: If the mosquito becomes an enemy of the jellyfish and the pig learns elementary resource management from the jellyfish, then the jellyfish raises a flag of peace for the polar bear\nRule7: If something learns the basics of resource management from the jellyfish and respects the kiwi, then it does not learn elementary resource management from the elephant\nRule8: The mosquito becomes an enemy of the jellyfish, in the case where the bat does not respect the mosquito\nRule9: If the blobfish does not have her keys, then it does not proceed to the spot right after the polar bear\nRule10: If the blobfish has a card with a color from the rainbow, then it does not proceed to the spot right after the polar bear\nRule11: If the jellyfish has something to drink, then it does not eat the food that belongs to the kudu\nRule12: If the jellyfish has a card whose color starts with the letter \"r\", then it eats the food of the kudu\nRule13: If the jellyfish raises a flag of peace for the polar bear, then the polar bear learns the basics of resource management from the elephant\n\nRule10 is preferred over Rule5\nRule11 is preferred over Rule12\nRule11 is preferred over Rule2\nRule4 is preferred over Rule12\nRule4 is preferred over Rule2\nRule7 is preferred over Rule13\nRule9 is preferred over Rule5\n\nThe current state of the game is as follows\nThe blobfish is holding her keys\nThe jellyfish has a card that is green in color\nThe jellyfish has a computer\nThe jellyfish is named Lucy\nThe jellyfish has a cutter\nThe pig has some spinach\nThe tilapia sings a victory song for the canary\nThe bat does not respect the mosquito\n\nBased on the game state and the rules and preferences, does the polar bear learn the basics of resource management from the elephant?\nQuestion: Does the polar bear learn the basics of resource management from the elephant?",
        "idx": 345,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the pig has a leafy green vegetable, then the pig learns elementary resource management from the jellyfish\nrule1() = has(pig, leafy_green_vegetable) => learn_elementary_resource_management(pig, jellyfish)\n# Rule2: Regarding the jellyfish, if it has a device to connect to the internet, then we can conclude that it eats the food that belongs to the kudu\nrule2() = has(jellyfish, connect_to_internet(device)) => eat_food(jellyfish, food_of(kudu))\n# Rule3: The polar bear unquestionably respects the kiwi, in the case where the blobfish proceeds to the spot that is right after the spot of the polar bear\nrule3() = proceed(blobfish, spot_right_after(spot_of(polar_bear))) => respects(polar_bear, kiwi)\n# Rule4: If the jellyfish has a name whose first letter is the same as the first letter of the panda bear's name, then the jellyfish does not eat the food that belongs to the kudu\nrule4() = first_letter_of(name(jellyfish)) == first_letter_of(name(panda_bear)) => not eat_food(jellyfish, food_of(kudu))\n# Rule5: If at least one animal sings a victory song for the canary, then the blobfish proceeds to the spot right after the polar bear\nrule5() = sing_song(some_animal, victory_song_for(canary)) => proceed(blobfish, spot_right_after(spot_of(polar_bear)))\n# Rule6: For the jellyfish, if the belief is that the mosquito becomes an enemy of the jellyfish and the pig learns elementary resource management from the jellyfish, then you can add \"the jellyfish raises a flag of peace for the polar bear\" to your conclusions\nrule6() = enemy(mosquito, jellyfish) & learn_elementary_resource_management(pig, jellyfish) => raise_flag_of_peace(jellyfish, polar_bear)\n# Rule7: If you see that something learns the basics of resource management from the jellyfish and respects the kiwi, what can you certainly conclude? You can conclude that it does not learn elementary resource management from the elephant\nrule7(something) = learn_basics_of_resource_management(something, jellyfish) & respects(something, kiwi) => not learn_elementary_resource_management(something, elephant)\n# Rule8: The mosquito unquestionably becomes an enemy of the jellyfish, in the case where the bat does not respect the mosquito\nrule8() = not respects(bat, mosquito) => enemy(mosquito, jellyfish)\n# Rule9: Regarding the blobfish, if it does not have her keys, then we can conclude that it does not proceed to the spot right after the polar bear\nrule9() = not has(blobfish, keys) => not proceed(blobfish, spot_right_after(spot_of(polar_bear)))\n# Rule10: Regarding the blobfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not proceed to the spot that is right after the spot of the polar bear\nrule10() = has(blobfish, card_with(color)) & color in rainbow_colors => not proceed(blobfish, spot_right_after(spot_of(polar_bear)))\n# Rule11: Regarding the jellyfish, if it has something to drink, then we can conclude that it does not eat the food that belongs to the kudu\nrule11() = has(jellyfish, drink) => not eat_food(jellyfish, food_of(kudu))\n# Rule12: If the jellyfish has a card whose color starts with the letter \"r\", then the jellyfish eats the food of the kudu\nrule12() = has(jellyfish, card_with(color)) & starts_with(color, \"r\") => eat_food(jellyfish, food_of(kudu))\n# Rule13: If the jellyfish raises a flag of peace for the polar bear, then the polar bear learns the basics of resource management from the elephant.\nrule13() = raise_flag_of_peace(jellyfish, polar_bear) => learn_basics_of_resource_management(polar_bear, elephant)\n# Rule10 is preferred over Rule5\norder(rule10) > order(rule5) = True\n# Rule11 is preferred over Rule12\norder(rule11) > order(rule12) = True\n# Rule11 is preferred over Rule2\norder(rule11) > order(rule2) = True\n# Rule4 is preferred over Rule12\norder(rule4) > order(rule12) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule7 is preferred over Rule13\norder(rule7) > order(rule13) = True\n# Rule9 is preferred over Rule5\norder(rule9) > order(rule5) = True\n\n# The current state of the game is as follows\n# The blobfish is holding her keys\nhas(blobfish, keys) = True\n# The jellyfish has a card that is green in color\nhas(jellyfish, card_with(green_color)) = True\n# The jellyfish has a computer, and is named Lucy\nhas(jellyfish, computer) = True\nname(jellyfish, Lucy) = True\n# The jellyfish has a cutter\nhas(jellyfish, cutter) = True\n# The pig has some spinach\nhas(pig, spinach) = True\n# The tilapia sings a victory song for the canary\nsing_song(tilapia, victory_song_for(canary)) = True\n# The bat does not respect the mosquito\nnot respects(bat, mosquito) = True\n\n# Based on the game state and the rules and preferences, does the polar bear learn the basics of resource management from the elephant?\nquestion = learn_basics_of_resource_management(polar_bear, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the parrot has a high salary, then it prepares armor for the doctorfish\nRule2: The sheep does not roll the dice for the meerkat whenever at least one animal becomes an enemy of the puffin\nRule3: If none of the animals steal five points from the hummingbird, then they raise a peace flag for the donkey\nRule4: If the parrot prepares armor for the doctorfish, then the doctorfish does not attack the green fields of the viperfish\nRule5: If any animal winks at the canary, then it does not attack the green fields of the polar bear\nRule6: If the sheep has a name whose first letter is the same as the first letter of the dog's name, then it attacks the green fields of the polar bear\nRule7: If the kiwi owes money to the sheep, then the sheep rolls the dice for the meerkat\nRule8: If an animal does not attack the green fields of the polar bear but rolls the dice for the meerkat, then it does not give a magnifying glass to the viperfish\nRule9: If the sheep has a device to connect to the internet, then it attacks the green fields of the polar bear\nRule10: If the sheep does not give a magnifying glass to the viperfish and the doctorfish does not attack the green fields of the viperfish, then the viperfish will never raise a peace flag for the donkey\n\nRule2 is preferred over Rule7\nRule3 is preferred over Rule10\nRule6 is preferred over Rule5\nRule9 is preferred over Rule5\n\nThe current state of the game is as follows\nThe kiwi owes money to the sheep\nThe parrot has a high salary\nThe sheep has a cappuccino and winks at the canary\nThe sheep is named Luna\n\nBased on the game state and the rules and preferences, does the viperfish raise a peace flag for the donkey?\nQuestion: Does the viperfish raise a peace flag for the donkey?",
        "idx": 346,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the parrot, if it has a high salary, then we can conclude that it prepares armor for the doctorfish\nrule1() = has_high_salary(parrot) => prepare_armor(parrot, doctorfish)\n# Rule2: The sheep does not roll the dice for the meerkat whenever at least one animal becomes an enemy of the puffin\nrule2() = not enemy(puffin, something) => not roll_dice(sheep, meerkat)\n# Rule3: If you are positive that one of the animals does not steal five points from the hummingbird, you can be certain that it will raise a peace flag for the donkey without a doubt\nrule3() = not steal_points(something, hummingbird, 5) => raise_flag_of_peace(something, donkey)\n# Rule4: If the parrot prepares armor for the doctorfish, then the doctorfish is not going to attack the green fields of the viperfish\nrule4() = prepare_armor(parrot, doctorfish) => not attack_green_fields(doctorfish, viperfish)\n# Rule5: If you are positive that you saw one of the animals winks at the canary, you can be certain that it will not attack the green fields of the polar bear\nrule5() = winks_at(something, canary) => not attack_green_fields(something, polar_bear)\n# Rule6: Regarding the sheep, if it has a name whose first letter is the same as the first letter of the dog's name, then we can conclude that it attacks the green fields of the polar bear\nrule6() = first_letter_of(name(sheep)) == first_letter_of(name(dog)) => attack_green_fields(sheep, polar_bear)\n# Rule7: If the kiwi owes $$$ to the sheep, then the sheep rolls the dice for the meerkat\nrule7() = owes_money_to(kiwi, sheep) => roll_dice(sheep, meerkat)\n# Rule8: Be careful when something does not attack the green fields whose owner is the polar bear but rolls the dice for the meerkat because in this case it certainly does not give a magnifying glass to the viperfish (this may or may not be problematic)\nrule8(something) = not attack_green_fields(something, polar_bear) & roll_dice(something, meerkat) => not give_magnifying_glass(something, viperfish)\n# Rule9: Regarding the sheep, if it has a device to connect to the internet, then we can conclude that it attacks the green fields whose owner is the polar bear\nrule9() = has(sheep, connect_to_internet(device)) => attack_green_fields(sheep, polar_bear)\n# Rule10: If the sheep does not give a magnifying glass to the viperfish and the doctorfish does not attack the green fields of the viperfish, then the viperfish will never raise a flag of peace for the donkey.\nrule10() = not give_magnifying_glass(sheep, viperfish) & not attack_green_fields(doctorfish, viperfish) => never_raise_flag_of_peace(viperfish, donkey)\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule3 is preferred over Rule10\norder(rule3) > order(rule10) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n# Rule9 is preferred over Rule5\norder(rule9) > order(rule5) = True\n\n# The current state of the game is as follows\n# The kiwi owes money to the sheep\nowes_money_to(kiwi, sheep) = True\n# The parrot got a well-paid job\nhas_high_salary(parrot) = True\n# The sheep has a cappuccino, and winks at the canary\nhas(sheep, cappuccino) = True\nwinks_at(sheep, canary) = True\n# The sheep is named Luna\nname(sheep, Luna) = True\n\n# Based on the game state and the rules and preferences, does the viperfish raise a peace flag for the donkey?\nquestion = raise_flag_of_peace(viperfish, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The sun bear eats the food that belongs to the wolverine, in the case where the koala raises a flag of peace for the sun bear\nRule2: If the koala has difficulty finding food, then it does not raise a peace flag for the sun bear\nRule3: If you see one of the animals eat the food of the wolverine, then it will also remove one of the pieces of the caterpillar from the board\nRule4: If the koala has a card whose color appears in the flag of Netherlands, then it does not raise a peace flag for the sun bear\nRule5: If at least one animal gives a magnifier to the sea bass, then the koala raises a flag of peace for the sun bear\nRule6: The sun bear does not eat the food that belongs to the wolverine, in the case where the doctorfish gives a magnifier to the sun bear\n\nRule2 is preferred over Rule5\nRule4 is preferred over Rule5\nRule6 is preferred over Rule1\n\nThe current state of the game is as follows\nThe koala has a card that is yellow in color\nThe sheep proceeds to the spot right after the sea bass\n\nBased on the game state and the rules and preferences, does the sun bear remove one of the pieces of the caterpillar from the board?\nQuestion: Does the sun bear remove one of the pieces of the caterpillar from the board?",
        "idx": 347,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The sun bear unquestionably eats the food that belongs to the wolverine, in the case where the koala raises a flag of peace for the sun bear\nrule1() = raise_flag_of_peace(koala, sun_bear) => eat_food(sun_bear, food_of(wolverine))\n# Rule2: If the koala has difficulty to find food, then the koala does not raise a peace flag for the sun bear\nrule2() = has_difficulty_finding_food(koala) => not raise_flag_of_peace(koala, sun_bear)\n# Rule3: If you are positive that you saw one of the animals eats the food of the wolverine, you can be certain that it will also remove from the board one of the pieces of the caterpillar\nrule3(something) = eat_food(something, food_of(wolverine)) => remove(something, piece_of(caterpillar))\n# Rule4: Regarding the koala, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it does not raise a peace flag for the sun bear\nrule4() = has(koala, card_with(color_in_flag_of_Netherlands)) => not raise_flag_of_peace(koala, sun_bear)\n# Rule5: If at least one animal gives a magnifier to the sea bass, then the koala raises a flag of peace for the sun bear\nrule5(something) = give_magnifier(something, sea_bass) => raise_flag_of_peace(koala, sun_bear)\n# Rule6: The sun bear does not eat the food that belongs to the wolverine, in the case where the doctorfish gives a magnifier to the sun bear.\nrule6() = give_magnifier(doctorfish, sun_bear) => not eat_food(sun_bear, food_of(wolverine))\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n\n# The current state of the game is as follows\n# The koala has a card that is yellow in color\nhas(koala, card_with(yellow_color)) = True\n# The sheep proceeds to the spot right after the sea bass\nproceed(sheep, spot_right_after(spot_of(sea_bass))) = True\n\n# Based on the game state and the rules and preferences, does the sun bear remove from the board one of the pieces of the caterpillar?\nquestion = remove(sun_bear, piece_of(caterpillar))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The kudu does not hold an equal number of points as the caterpillar, in the case where the grizzly bear becomes an enemy of the kudu\nRule2: If something proceeds to the spot right after the polar bear but does not offer a job to the tilapia, then it proceeds to the spot right after the parrot\nRule3: If the cockroach rolls the dice for the caterpillar and the kudu does not hold the same number of points as the caterpillar, then the caterpillar will never offer a job to the tilapia\nRule4: If you see that something respects the cricket, you can be certain that it will also roll the dice for the caterpillar\nRule5: If the ferret attacks the green fields of the caterpillar, then the caterpillar shows all her cards to the bat\nRule6: The caterpillar proceeds to the spot right after the spot of the polar bear, in the case where the black bear sings a victory song for the caterpillar\nRule7: The black bear sings a victory song for the caterpillar, in the case where the sheep learns the basics of resource management from the black bear\n\nThe current state of the game is as follows\nThe cockroach respects the cricket\nThe ferret attacks the green fields of the caterpillar\nThe grizzly bear becomes an enemy of the kudu\nThe kudu becomes an enemy of the raven\nThe panther learns the basics of resource management from the caterpillar\nThe sheep learns the basics of resource management from the black bear\n\nBased on the game state and the rules and preferences, does the caterpillar proceed to the spot right after the parrot?\nQuestion: Does the caterpillar proceed to the spot right after the parrot?",
        "idx": 348,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The kudu does not hold an equal number of points as the caterpillar, in the case where the grizzly bear becomes an enemy of the kudu\nrule1() = enemy(grizzly_bear, kudu) => points(kudu) != points(caterpillar)\n# Rule2: If you see that something proceeds to the spot right after the polar bear but does not offer a job to the tilapia, what can you certainly conclude? You can conclude that it proceeds to the spot right after the parrot\nrule2(something) = proceed(something, spot_right_after(spot_of(polar_bear))) & not offer_job(something, tilapia) => proceed(something, spot_right_after(spot_of(parrot)))\n# Rule3: If the cockroach rolls the dice for the caterpillar and the kudu does not hold the same number of points as the caterpillar, then the caterpillar will never offer a job to the tilapia\nrule3() = roll_dice(cockroach, caterpillar) & points(kudu) != points(caterpillar) => never_offer_job(caterpillar, tilapia)\n# Rule4: If you are positive that you saw one of the animals respects the cricket, you can be certain that it will also roll the dice for the caterpillar\nrule4(something) = respects(something, cricket) => roll_dice(something, caterpillar)\n# Rule5: If the ferret attacks the green fields of the caterpillar, then the caterpillar shows her cards (all of them) to the bat\nrule5() = attack(ferret, green_fields_of(caterpillar)) => show_cards(caterpillar, bat)\n# Rule6: The caterpillar unquestionably proceeds to the spot that is right after the spot of the polar bear, in the case where the black bear sings a victory song for the caterpillar\nrule6() = sing_song(black_bear, victory_song_for(caterpillar)) => proceed(caterpillar, spot_right_after(spot_of(polar_bear)))\n# Rule7: The black bear unquestionably sings a song of victory for the caterpillar, in the case where the sheep learns the basics of resource management from the black bear.\nrule7() = learn_basics_of_resource_management(sheep, black_bear) => sing_song(black_bear, victory_song_for(caterpillar))\n\n# The current state of the game is as follows\n# The cockroach respects the cricket\nrespects(cockroach, cricket) = True\n# The ferret attacks the green fields whose owner is the caterpillar\nattack(ferret, green_fields_of(caterpillar)) = True\n# The grizzly bear becomes an enemy of the kudu\nenemy(grizzly_bear, kudu) = True\n# The kudu becomes an enemy of the raven\nenemy(kudu, raven) = True\n# The panther learns the basics of resource management from the caterpillar\nlearn_basics_of_resource_management(panther, caterpillar) = True\n# The sheep learns the basics of resource management from the black bear\nlearn_basics_of_resource_management(sheep, black_bear) = True\n\n# Based on the game state and the rules and preferences, does the caterpillar proceed to the spot right after the parrot?\nquestion = proceed(caterpillar, spot_right_after(spot_of(parrot)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon has something to carry apples and oranges, then the baboon respects the aardvark\nRule2: If something attacks the green fields owned by the tiger, then it does not eat the food that belongs to the black bear\nRule3: If the leopard eats the food that belongs to the aardvark and the baboon respects the aardvark, then the aardvark attacks the green fields of the tiger\nRule4: If the baboon has more than 9 friends, then the baboon respects the aardvark\nRule5: The aardvark unquestionably rolls the dice for the raven, in the case where the polar bear rolls the dice for the aardvark\nRule6: If the grasshopper has a device to connect to the internet, then it proceeds to the spot right after the kiwi\nRule7: If at least one animal proceeds to the spot right after the kiwi, then the aardvark does not roll the dice for the raven\nRule8: If the grasshopper has fewer than 11 friends, then it does not proceed to the spot right after the kiwi\nRule9: If the leopard has a leafy green vegetable, then the leopard eats the food that belongs to the aardvark\nRule10: If the kangaroo prepares armor for the polar bear, then the polar bear does not roll the dice for the aardvark\nRule11: If something rolls the dice for the raven and winks at the eagle, then it also eats the food of the black bear\nRule12: If at least one animal sings a victory song for the kiwi, then the polar bear rolls the dice for the aardvark\nRule13: The baboon does not respect the aardvark, in the case where the cat does not roll the dice for the baboon\nRule14: If at least one animal raises a flag of peace for the squirrel, then the aardvark does not attack the green fields owned by the tiger\n\nRule10 is preferred over Rule12\nRule11 is preferred over Rule2\nRule13 is preferred over Rule1\nRule13 is preferred over Rule4\nRule14 is preferred over Rule3\nRule5 is preferred over Rule7\nRule8 is preferred over Rule6\n\nThe current state of the game is as follows\nThe baboon has 15 friends\nThe baboon has a knife\nThe grasshopper has a cell phone\nThe leopard has some kale\nThe moose sings a victory song for the kiwi\n\nBased on the game state and the rules and preferences, does the aardvark eat the food of the black bear?\nQuestion: Does the aardvark eat the food of the black bear?",
        "idx": 349,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the baboon has something to carry apples and oranges, then the baboon respects the aardvark\nrule1() = has(baboon, carry_apples_and_oranges) => respects(baboon, aardvark)\n# Rule2: If something attacks the green fields whose owner is the tiger, then it does not eat the food that belongs to the black bear\nrule2(something) = attack(green_fields_of(tiger), something) => not eat_food_of(something, black_bear)\n# Rule3: If the leopard eats the food that belongs to the aardvark and the baboon respects the aardvark, then the aardvark attacks the green fields of the tiger\nrule3() = eat_food_of(leopard, aardvark) & respects(baboon, aardvark) => attack(green_fields_of(tiger), aardvark)\n# Rule4: If the baboon has more than 9 friends, then the baboon respects the aardvark\nrule4() = friends(baboon) > 9 => respects(baboon, aardvark)\n# Rule5: The aardvark unquestionably rolls the dice for the raven, in the case where the polar bear rolls the dice for the aardvark\nrule5() = roll_dice(aardvark, raven) if roll_dice(polar_bear, aardvark)\n# Rule6: Regarding the grasshopper, if it has a device to connect to the internet, then we can conclude that it proceeds to the spot right after the kiwi\nrule6() = has(grasshopper, connect_to_internet(device)) => proceed(grasshopper, spot_right_after(spot_of(kiwi)))\n# Rule7: If at least one animal proceeds to the spot that is right after the spot of the kiwi, then the aardvark does not roll the dice for the raven\nrule7() = proceed(something, spot_right_after(spot_of(kiwi))) => not roll_dice(aardvark, raven)\n# Rule8: Regarding the grasshopper, if it has fewer than 11 friends, then we can conclude that it does not proceed to the spot right after the kiwi\nrule8() = friends(grasshopper) < 11 => not proceed(grasshopper, spot_right_after(spot_of(kiwi)))\n# Rule9: If the leopard has a leafy green vegetable, then the leopard eats the food that belongs to the aardvark\nrule9() = has(leopard, leafy_green_vegetable) => eat_food_of(leopard, aardvark)\n# Rule10: If the kangaroo prepares armor for the polar bear, then the polar bear is not going to roll the dice for the aardvark\nrule10() = prepare_armor(kangaroo, polar_bear) => not roll_dice(polar_bear, aardvark)\n# Rule11: If you see that something rolls the dice for the raven and winks at the eagle, what can you certainly conclude? You can conclude that it also eats the food of the black bear\nrule11(something) = roll_dice(something, raven) & wink_at(something, eagle) => eat_food_of(something, black_bear)\n# Rule12: If at least one animal sings a victory song for the kiwi, then the polar bear rolls the dice for the aardvark\nrule12() = sing_song(something, victory_song_for(kiwi)) => roll_dice(polar_bear, aardvark)\n# Rule13: The baboon will not respect the aardvark, in the case where the cat does not roll the dice for the baboon\nrule13() = not roll_dice(cat, baboon) => not respects(baboon, aardvark)\n# Rule14: If at least one animal raises a flag of peace for the squirrel, then the aardvark does not attack the green fields whose owner is the tiger.\nrule14() = raise_flag_of_peace(something, squirrel) => not attack(green_fields_of(tiger), aardvark)\n# Rule10 is preferred over Rule12\norder(rule10) > order(rule12) = True\n# Rule11 is preferred over Rule2\norder(rule11) > order(rule2) = True\n# Rule13 is preferred over Rule1\norder(rule13) > order(rule1) = True\n# Rule13 is preferred over Rule4\norder(rule13) > order(rule4) = True\n# Rule14 is preferred over Rule3\norder(rule14) > order(rule3) = True\n# Rule5 is preferred over Rule7\norder(rule5) > order(rule7) = True\n# Rule8 is preferred over Rule6\norder(rule8) > order(rule6) = True\n\n# The current state of the game is as follows\n# The baboon has 15 friends\nfriends(baboon) = 15\n# The baboon has a knife\nhas(baboon, knife) = True\n# The grasshopper has a cell phone\nhas(grasshopper, cell_phone) = True\n# The leopard has some kale\nhas(leopard, kale) = True\n# The moose sings a victory song for the kiwi\nsing_song(moose, victory_song_for(kiwi)) = True\n\n# Based on the game state and the rules and preferences, does the aardvark eat the food of the black bear?\nquestion = eat_food_of(aardvark, black_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the pig does not respect the eagle, then the eagle does not become an actual enemy of the sea bass\nRule2: If the rabbit prepares armor for the polar bear and the goldfish shows all her cards to the polar bear, then the polar bear needs the support of the eagle\nRule3: If something holds an equal number of points as the cockroach but does not become an actual enemy of the sea bass, then it does not knock down the fortress that belongs to the hare\nRule4: If the polar bear has a card with a primary color, then the polar bear attacks the green fields of the carp\nRule5: If something respects the salmon, then it does not respect the eagle\nRule6: If the rabbit has more than 2 friends, then it prepares armor for the polar bear\nRule7: If the polar bear does not need the support of the eagle, then the eagle knocks down the fortress that belongs to the hare\nRule8: If something holds the same number of points as the carp, then it does not need the support of the eagle\n\nRule2 is preferred over Rule8\nRule3 is preferred over Rule7\n\nThe current state of the game is as follows\nThe cockroach is named Milo\nThe pig respects the salmon\nThe polar bear has a card that is red in color and is named Meadow\nThe rabbit has 2 friends that are kind and 7 friends that are not\n\nBased on the game state and the rules and preferences, does the eagle knock down the fortress of the hare?\nQuestion: Does the eagle knock down the fortress of the hare?",
        "idx": 350,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the pig does not respect the eagle, then the eagle does not become an actual enemy of the sea bass\nrule1() = not respects(pig, eagle) => not actual_enemy(eagle, sea_bass)\n# Rule2: For the polar bear, if the belief is that the rabbit prepares armor for the polar bear and the goldfish shows all her cards to the polar bear, then you can add \"the polar bear needs the support of the eagle\" to your conclusions\nrule2() = belief(prepare_armor(rabbit, polar_bear)) & show_cards(goldfish, polar_bear) => add_conclusion(polar_bear_needs_support(eagle))\n# Rule3: If you see that something holds an equal number of points as the cockroach but does not become an actual enemy of the sea bass, what can you certainly conclude? You can conclude that it does not knock down the fortress that belongs to the hare\nrule3(something) = points(something) == points(cockroach) & not actual_enemy(something, sea_bass) => conclude(not knock_down_fortress(something, hare))\n# Rule4: If the polar bear has a card with a primary color, then the polar bear attacks the green fields of the carp\nrule4() = has(polar_bear, card_with(primary_color)) => attack(polar_bear, green_fields_of(carp))\n# Rule5: If something respects the salmon, then it does not respect the eagle\nrule5(something) = respects(something, salmon) => not respects(something, eagle)\n# Rule6: Regarding the rabbit, if it has more than 2 friends, then we can conclude that it prepares armor for the polar bear\nrule6() = friends(rabbit) > 2 => prepare_armor(rabbit, polar_bear)\n# Rule7: If the polar bear does not need the support of the eagle, then the eagle knocks down the fortress that belongs to the hare\nrule7() = not polar_bear_needs_support(eagle) => knock_down_fortress(eagle, hare)\n# Rule8: If something holds the same number of points as the carp, then it does not need the support of the eagle.\nrule8(something) = points(something) == points(carp) => not needs_support(something, eagle)\n# Rule2 is preferred over Rule8\norder(rule2) > order(rule8) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n\n# The current state of the game is as follows\n# The cockroach is named Milo\nname(cockroach, Milo) = True\n# The pig respects the salmon\nrespects(pig, salmon) = True\n# The polar bear has a card that is red in color, and is named Meadow\nhas(polar_bear, card_with(red_color)) = True\nname(polar_bear, Meadow) = True\n# The rabbit has 2 friends that are kind and seven friends that are not.\nfriends(rabbit, kind) = 2\nfriends(rabbit, not_kind) = 7\n\n# Based on the game state and the rules and preferences, does the eagle knock down the fortress of the hare?\nquestion = knock_down_fortress(eagle, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the viperfish starts with the same letter as the name of the kangaroo, then the viperfish does not show all her cards to the carp\nRule2: If the hare has fewer than 7 friends, then the hare learns the basics of resource management from the panther\nRule3: The viperfish shows all her cards to the carp whenever at least one animal owes money to the pig\nRule4: If the spider gives a magnifier to the polar bear, then the polar bear does not attack the green fields owned by the parrot\nRule5: If you see one of the animals show all her cards to the jellyfish, then you can be certain that she will not learn elementary resource management from the panther\nRule6: If the ferret does not need support from the polar bear and the donkey does not offer a job to the polar bear, then the polar bear attacks the green fields owned by the parrot\nRule7: If the hare has a card with a color that appears in the flag of France, then the hare learns elementary resource management from the panther\nRule8: If you see one of the animals remove a piece from the board that belongs to the mosquito, then you can be certain that she holds an equal number of points as the sun bear\nRule9: If one of the animals does not show all her cards to the carp, then she will burn the warehouse owned by the grizzly bear\nRule10: If the polar bear does not attack the green fields owned by the parrot, then the parrot removes a piece from the board that belongs to the mosquito\n\nRule2 is preferred over Rule5\nRule3 is preferred over Rule1\nRule6 is preferred over Rule4\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe hare has 10 friends\nThe hare has a card that is red in color\nThe hare shows all her cards to the jellyfish\nThe kangaroo is named Tarzan\nThe spider gives a magnifier to the polar bear\nThe viperfish is named Teddy\nThe donkey does not offer a job to the polar bear\n\nBased on the game state and the rules and preferences, does the parrot hold the same number of points as the sun bear?\nQuestion: Does the parrot hold the same number of points as the sun bear?",
        "idx": 351,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the viperfish has a name whose first letter is the same as the first letter of the kangaroo's name, then the viperfish does not show all her cards to the carp\nrule1() = first_letter_of(name(viperfish)) == first_letter_of(name(kangaroo)) => not show_cards(viperfish, carp)\n# Rule2: If the hare has fewer than 7 friends, then the hare learns the basics of resource management from the panther\nrule2() = friends(hare) < 7 => learn_basics_of_resource_management(hare, panther)\n# Rule3: The viperfish shows her cards (all of them) to the carp whenever at least one animal owes $$$ to the pig\nrule3() = owes_money_to(something, pig) => show_cards(viperfish, carp)\n# Rule4: If the spider gives a magnifier to the polar bear, then the polar bear is not going to attack the green fields whose owner is the parrot\nrule4() = give(spider, magnifier, polar_bear) => not attack(polar_bear, green_fields_of(parrot))\n# Rule5: If you are positive that you saw one of the animals shows her cards (all of them) to the jellyfish, you can be certain that it will not learn elementary resource management from the panther\nrule5(something) = show_cards(something, jellyfish) => not learn_elementary_resource_management(something, panther)\n# Rule6: For the polar bear, if the belief is that the ferret does not need support from the polar bear and the donkey does not offer a job to the polar bear, then you can add \"the polar bear attacks the green fields of the parrot\" to your conclusions\nrule6() = not needs_support(ferret, polar_bear) & not offer_job(donkey, polar_bear) => attack(polar_bear, green_fields_of(parrot))\n# Rule7: If the hare has a card whose color appears in the flag of France, then the hare learns elementary resource management from the panther\nrule7() = has(hare, card_with(color_in_flag_of_france)) => learn_elementary_resource_management(hare, panther)\n# Rule8: If you are positive that you saw one of the animals removes from the board one of the pieces of the mosquito, you can be certain that it will also hold an equal number of points as the sun bear\nrule8(something) = remove(something, piece_of(mosquito)) => points(something) == points(sun_bear)\n# Rule9: If you are positive that one of the animals does not show all her cards to the carp, you can be certain that it will burn the warehouse that is in possession of the grizzly bear without a doubt\nrule9(something) = not show_cards(something, carp) => burn(warehouse_of(grizzly_bear))\n# Rule10: If the polar bear does not attack the green fields of the parrot, then the parrot removes one of the pieces of the mosquito.\nrule10() = not attack(polar_bear, green_fields_of(parrot)) => remove(parrot, piece_of(mosquito))\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The hare has 10 friends\nfriends(hare) = 10\n# The hare has a card that is red in color\nhas(hare, card_with(red_color)) = True\n# The hare shows all her cards to the jellyfish\nshow_cards(hare, jellyfish) = True\n# The kangaroo is named Tarzan\nname(kangaroo, Tarzan) = True\n# The spider gives a magnifier to the polar bear\ngive(spider, magnifier, polar_bear) = True\n# The viperfish is named Teddy\nname(viperfish, Teddy) = True\n# The donkey does not offer a job to the polar bear\nnot offer_job(donkey, polar_bear) = True\n\n# Based on the game state and the rules and preferences, does the parrot hold the same number of points as the sun bear?\nquestion = points(parrot) == points(sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not remove one of the pieces of the raven, then it does not give a magnifier to the koala\nRule2: If the dog attacks the green fields owned by the hippopotamus, then the hippopotamus removes one of the pieces of the raven\nRule3: The penguin shows all her cards to the hippopotamus whenever at least one animal prepares armor for the grasshopper\nRule4: The hippopotamus does not remove one of the pieces of the raven if the penguin shows all her cards to the hippopotamus\nRule5: If an animal shows all her cards to the cheetah, then she does not learn elementary resource management from the parrot\nRule6: If the dog has fewer than 13 friends, then the dog attacks the green fields of the hippopotamus\nRule7: If the hippopotamus has a device to connect to the internet, then she shows all her cards to the cheetah\nRule8: If an animal sings a victory song for the canary, then she does not show all her cards to the cheetah\nRule9: If the dog has a high salary, then the dog attacks the green fields owned by the hippopotamus\n\nRule4 is preferred over Rule2\nRule8 is preferred over Rule7\n\nThe current state of the game is as follows\nThe dog has 8 friends\nThe dog has a low-income job\nThe donkey prepares armor for the grasshopper\nThe hippopotamus has a cell phone\n\nBased on the game state and the rules and preferences, does the hippopotamus give a magnifier to the koala?\nQuestion: Does the hippopotamus give a magnifier to the koala?",
        "idx": 352,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not remove one of the pieces of the raven, then it does not give a magnifier to the koala\nrule1() = not remove(something, piece_of(raven)) => not give(something, magnifier, koala)\n# Rule2: If the dog attacks the green fields whose owner is the hippopotamus, then the hippopotamus removes from the board one of the pieces of the raven\nrule2() = attack(dog, green_fields_of(hippopotamus)) => remove(hippopotamus, piece_of(raven))\n# Rule3: The penguin shows her cards (all of them) to the hippopotamus whenever at least one animal prepares armor for the grasshopper\nrule3() = prepare_armor(something, grasshopper) => show_cards(penguin, hippopotamus)\n# Rule4: The hippopotamus does not remove one of the pieces of the raven, in the case where the penguin shows her cards (all of them) to the hippopotamus\nrule4() = show_cards(penguin, hippopotamus) => not remove(hippopotamus, piece_of(raven))\n# Rule5: If you are positive that you saw one of the animals shows her cards (all of them) to the cheetah, you can be certain that it will not learn elementary resource management from the parrot\nrule5() = show_cards(something, cheetah) => not learn(something, elementary_resource_management_from(parrot))\n# Rule6: If the dog has fewer than 13 friends, then the dog attacks the green fields of the hippopotamus\nrule6() = friends(dog) < 13 => attack(dog, green_fields_of(hippopotamus))\n# Rule7: Regarding the hippopotamus, if it has a device to connect to the internet, then we can conclude that it shows her cards (all of them) to the cheetah\nrule7() = has(hippopotamus, connect_to_internet(device)) => show_cards(hippopotamus, cheetah)\n# Rule8: If you are positive that you saw one of the animals sings a song of victory for the canary, you can be certain that it will not show all her cards to the cheetah\nrule8() = sing_song(something, victory_song_for(canary)) => not show_cards(something, cheetah)\n# Rule9: If the dog has a high salary, then the dog attacks the green fields whose owner is the hippopotamus.\nrule9() = has_high_salary(dog) => attack(dog, green_fields_of(hippopotamus))\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n\n# The current state of the game is as follows\n# The dog has 8 friends\nfriends(dog) = 8\n# The dog has a low-income job\nhas_low_income_job(dog) = True\n# The donkey prepares armor for the grasshopper\nprepare_armor(donkey, grasshopper) = True\n# The hippopotamus has a cell phone\nhas(hippopotamus, cell_phone) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus give a magnifier to the koala?\nquestion = give(hippopotamus, magnifier, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knows the defense plan of the moose, then it owes money to the penguin, too\nRule2: If the blobfish has a card whose color appears in the flag of Italy, then the blobfish shows all her cards to the catfish\nRule3: If the donkey has a name whose first letter is the same as the first letter of the moose's name, then the donkey steals five of the points of the moose\nRule4: The meerkat gives a magnifier to the penguin whenever at least one animal shows all her cards to the catfish\nRule5: If the donkey has a sharp object, then the donkey steals five points from the moose\nRule6: If something respects the crocodile, then it does not give a magnifying glass to the penguin\nRule7: The penguin does not show her cards (all of them) to the panda bear whenever at least one animal owes money to the elephant\nRule8: If the donkey owes money to the penguin and the meerkat gives a magnifying glass to the penguin, then the penguin shows her cards (all of them) to the panda bear.\n\nRule6 is preferred over Rule4\nRule7 is preferred over Rule8\n\nThe current state of the game is as follows\nThe blobfish has a card that is white in color\nThe donkey has a cutter\nThe donkey is named Teddy\nThe moose is named Paco\n\nBased on the game state and the rules and preferences, does the penguin show all her cards to the panda bear?\nQuestion: Does the penguin show all her cards to the panda bear?",
        "idx": 353,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something knows the defense plan of the moose, then it owes money to the penguin, too\nrule1() = knows(defense_plan_of(moose), something) => owes_money_to(something, penguin)\n# Rule2: If the blobfish has a card whose color appears in the flag of Italy, then the blobfish shows all her cards to the catfish\nrule2() = has(blobfish, card_with(color_in_flag_of_Italy)) => show_cards(blobfish, catfish)\n# Rule3: If the donkey has a name whose first letter is the same as the first letter of the moose's name, then the donkey steals five of the points of the moose\nrule3() = first_letter_of(name(donkey)) == first_letter_of(name(moose)) => steal_points(donkey, 5, moose)\n# Rule4: The meerkat gives a magnifier to the penguin whenever at least one animal shows all her cards to the catfish\nrule4() = show_cards(something, catfish) => give_magnifier(meerkat, penguin)\n# Rule5: If the donkey has a sharp object, then the donkey steals five points from the moose\nrule5() = has(donkey, sharp_object) => steal_points(donkey, 5, moose)\n# Rule6: If something respects the crocodile, then it does not give a magnifying glass to the penguin\nrule6(something) = respects(something, crocodile) => not give_magnifying_glass(something, penguin)\n# Rule7: The penguin does not show her cards (all of them) to the panda bear whenever at least one animal owes money to the elephant\nrule7() = owes_money_to(something, elephant) => not show_cards(penguin, panda_bear)\n# Rule8: If the donkey owes money to the penguin and the meerkat gives a magnifying glass to the penguin, then the penguin shows her cards (all of them) to the panda bear.\nrule8() = owes_money_to(donkey, penguin) & give_magnifying_glass(meerkat, penguin) => show_cards(penguin, panda_bear)\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule7 is preferred over Rule8\norder(rule7) > order(rule8) = True\n\n# The current state of the game is as follows\n# The blobfish has a card that is white in color\nhas(blobfish, card_with(white_color)) = True\n# The donkey has a cutter\nhas(donkey, cutter) = True\n# The donkey is named Teddy\nname(donkey, Teddy) = True\n# The moose is named Paco\nname(moose, Paco) = True\n\n# Based on the game state and the rules and preferences, does the penguin show all her cards to the panda bear?\nquestion = show_cards(penguin, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose has a sharp object, then it does not attack the green fields of the kangaroo\nRule2: If the tilapia learns the basics of resource management from the moose, then the moose rolls the dice for the baboon\nRule3: The wolverine eats the food that belongs to the puffin whenever at least one animal gives a magnifying glass to the raven\nRule4: If the moose has a device to connect to the internet, then it does not attack the green fields of the kangaroo\nRule5: If the moose has a card with a primary color, then it does not roll the dice for the baboon\nRule6: If something does not give a magnifier to the whale, then it does not give a magnifying glass to the raven\nRule7: If something offers a job position to the sun bear, then it does not eat the food that belongs to the puffin\nRule8: If something rolls the dice for the baboon but does not attack the green fields of the kangaroo, then it gives a magnifier to the raven\nRule9: If the moose has fewer than 4 friends, then it does not roll the dice for the baboon\n\nRule2 is preferred over Rule5\nRule2 is preferred over Rule9\nRule6 is preferred over Rule8\nRule7 is preferred over Rule3\n\nThe current state of the game is as follows\nThe moose has a card that is green in color\nThe moose has a cutter\nThe moose has a trumpet\nThe moose has six friends\nThe tilapia learns the basics of resource management from the moose\n\nBased on the game state and the rules and preferences, does the wolverine eat the food of the puffin?\nQuestion: Does the wolverine eat the food of the puffin?",
        "idx": 354,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the moose, if it has a sharp object, then we can conclude that it does not attack the green fields of the kangaroo\nrule1() = has(moose, sharp_object) => not attack(moose, green_fields_of(kangaroo))\n# Rule2: The moose unquestionably rolls the dice for the baboon, in the case where the tilapia learns the basics of resource management from the moose\nrule2() = learn_basics_of_resource_management(tilapia, moose) => roll_dice(moose, baboon)\n# Rule3: The wolverine eats the food that belongs to the puffin whenever at least one animal gives a magnifying glass to the raven\nrule3() = give_magnifying_glass(something, raven) => eat_food(wolverine, food_of(puffin))\n# Rule4: Regarding the moose, if it has a device to connect to the internet, then we can conclude that it does not attack the green fields of the kangaroo\nrule4() = has(moose, connect_to_internet(device)) => not attack(moose, green_fields_of(kangaroo))\n# Rule5: If the moose has a card with a primary color, then the moose does not roll the dice for the baboon\nrule5() = has(moose, card_with(primary_color)) => not roll_dice(moose, baboon)\n# Rule6: If something does not give a magnifier to the whale, then it does not give a magnifying glass to the raven\nrule6() = not give_magnifier(something, whale) => not give_magnifying_glass(something, raven)\n# Rule7: If something offers a job position to the sun bear, then it does not eat the food that belongs to the puffin\nrule7() = offer_job_position(something, sun_bear) => not eat_food(something, food_of(puffin))\n# Rule8: Be careful when something rolls the dice for the baboon but does not attack the green fields of the kangaroo because in this case it will, surely, give a magnifier to the raven (this may or may not be problematic)\nrule8() = roll_dice(something, baboon) & not attack(something, green_fields_of(kangaroo)) => give_magnifier(something, raven)\n# Rule9: Regarding the moose, if it has fewer than 4 friends, then we can conclude that it does not roll the dice for the baboon.\nrule9() = friends(moose) < 4 => not roll_dice(moose, baboon)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule2 is preferred over Rule9\norder(rule2) > order(rule9) = True\n# Rule6 is preferred over Rule8\norder(rule6) > order(rule8) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n\n# The current state of the game is as follows\n# The moose has a card that is green in color, has a cutter, has a trumpet, and has six friends\nhas(moose, card_with(green_color)) = True\nhas(moose, cutter) = True\nhas(moose, trumpet) = True\nfriends(moose) = 6\n# The tilapia learns the basics of resource management from the moose\nlearn_basics_of_resource_management(tilapia, moose) = True\n\n# Based on the game state and the rules and preferences, does the wolverine eat the food of the puffin?\nquestion = eat_food(wolverine, food_of(puffin))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The kudu will not roll the dice for the kangaroo, in the case where the grizzly bear does not need support from the kudu\nRule2: The kangaroo does not wink at the ferret, in the case where the pig shows all her cards to the kangaroo\nRule3: The ferret does not show all her cards to the octopus, in the case where the kangaroo winks at the ferret\nRule4: If the kudu rolls the dice for the kangaroo and the puffin shows all her cards to the kangaroo, then the kangaroo winks at the ferret\nRule5: If the name of the kudu starts with the same letter as the name of the kiwi, then the kudu rolls the dice for the kangaroo\nRule6: The puffin shows all her cards to the kangaroo whenever at least one animal gives a magnifier to the cockroach\n\nRule2 is preferred over Rule4\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe grasshopper gives a magnifier to the cockroach\nThe kiwi is named Meadow\nThe kudu is named Mojo\nThe grizzly bear does not need support from the kudu\n\nBased on the game state and the rules and preferences, does the ferret show all her cards to the octopus?\nQuestion: Does the ferret show all her cards to the octopus?",
        "idx": 355,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The kudu will not roll the dice for the kangaroo, in the case where the grizzly bear does not need support from the kudu\nrule1() = not need_support(grizzly_bear, kudu) => not roll_dice(kudu, kangaroo)\n# Rule2: The kangaroo does not wink at the ferret, in the case where the pig shows all her cards to the kangaroo\nrule2() = show_cards(pig, kangaroo) => not wink(kangaroo, ferret)\n# Rule3: The ferret does not show all her cards to the octopus, in the case where the kangaroo winks at the ferret\nrule3() = wink(kangaroo, ferret) => not show_cards(ferret, octopus)\n# Rule4: For the kangaroo, if the belief is that the kudu rolls the dice for the kangaroo and the puffin shows her cards (all of them) to the kangaroo, then you can add \"the kangaroo winks at the ferret\" to your conclusions\nrule4() = roll_dice(kudu, kangaroo) & show_cards(puffin, kangaroo) => wink(kangaroo, ferret)\n# Rule5: If the kudu has a name whose first letter is the same as the first letter of the kiwi's name, then the kudu rolls the dice for the kangaroo\nrule5() = first_letter_of(name(kudu)) == first_letter_of(name(kiwi)) => roll_dice(kudu, kangaroo)\n# Rule6: The puffin shows her cards (all of them) to the kangaroo whenever at least one animal gives a magnifier to the cockroach.\nrule6() = give_magnifier(some_animal, cockroach) => show_cards(puffin, kangaroo)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The grasshopper gives a magnifier to the cockroach\ngive_magnifier(grasshopper, cockroach) = True\n# The kiwi is named Meadow\nname(kiwi, Meadow) = True\n# The kudu is named Mojo\nname(kudu, Mojo) = True\n# The grizzly bear does not need support from the kudu\nnot need_support(grizzly_bear, kudu) = True\n\n# Based on the game state and the rules and preferences, does the ferret show all her cards to the octopus?\nquestion = show_cards(ferret, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job to the sun bear, then it owes money to the squirrel, too\nRule2: If something shows all her cards to the cow, then it does not offer a job to the sun bear\nRule3: If the turtle has something to sit on, then the turtle respects the tiger\nRule4: If the turtle took a bike from the store, then it respects the tiger\nRule5: If the name of the turtle starts with the same letter as the name of the cockroach, then the turtle shows all her cards to the cow\n\nThe current state of the game is as follows\nThe cockroach is named Luna\nThe turtle has a tablet\nThe turtle is named Lola\nThe turtle stole a bike from the store\n\nBased on the game state and the rules and preferences, does the turtle owe money to the squirrel?\nQuestion: Does the turtle owe money to the squirrel?",
        "idx": 356,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something offers a job to the sun bear, then it owes money to the squirrel, too\nrule1() = offer_job(something, sun_bear) => owes_money_to(something, squirrel)\n# Rule2: If something shows all her cards to the cow, then it does not offer a job to the sun bear\nrule2() = show_all_cards(something, cow) => not offer_job(something, sun_bear)\n# Rule3: If the turtle has something to sit on, then the turtle respects the tiger\nrule3() = has(turtle, something_to_sit_on) => respects(turtle, tiger)\n# Rule4: Regarding the turtle, if it took a bike from the store, then we can conclude that it respects the tiger\nrule4() = took_bike_from_store(turtle) => respects(turtle, tiger)\n# Rule5: Regarding the turtle, if it has a name whose first letter is the same as the first letter of the cockroach's name, then we can conclude that it shows all her cards to the cow.\nrule5() = first_letter_of(name(turtle)) == first_letter_of(name(cockroach)) => show_all_cards(turtle, cow)\n\n# The current state of the game is as follows\n# The cockroach is named Luna\nname(cockroach, Luna) = True\n# The turtle has a tablet\nhas(turtle, tablet) = True\n# The turtle is named Lola\nname(turtle, Lola) = True\n# The turtle stole a bike from the store\ntook_bike_from_store(turtle) = True\n\n# Based on the game state and the rules and preferences, does the turtle owe money to the squirrel?\nquestion = owes_money_to(turtle, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the jellyfish has fewer than eight friends, then it does not roll the dice for the mosquito\nRule2: If the name of the jellyfish starts with the same letter as the name of the lion, then the jellyfish does not roll the dice for the mosquito\nRule3: If an animal does not roll the dice for the mosquito, then it does not eat the food of the kangaroo\nRule4: If an animal does not eat the food of the kangaroo, then it knows the defensive plans of the wolverine\n\nThe current state of the game is as follows\nThe jellyfish has eleven friends and is named Max\nThe lion is named Milo\n\nBased on the game state and the rules and preferences, does the jellyfish know the defensive plans of the wolverine?\nQuestion: Does the jellyfish know the defensive plans of the wolverine?",
        "idx": 357,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the jellyfish, if it has fewer than eight friends, then we can conclude that it does not roll the dice for the mosquito\nrule1() = friends(jellyfish) < 8 => not roll_dice(jellyfish, mosquito)\n# Rule2: If the jellyfish has a name whose first letter is the same as the first letter of the lion's name, then the jellyfish does not roll the dice for the mosquito\nrule2() = first_letter_of(name(jellyfish)) == first_letter_of(name(lion)) => not roll_dice(jellyfish, mosquito)\n# Rule3: If you are positive that one of the animals does not roll the dice for the mosquito, you can be certain that it will not eat the food that belongs to the kangaroo\nrule3(something) = not roll_dice(something, mosquito) => not eat_food(something, food_of(kangaroo))\n# Rule4: If something does not eat the food of the kangaroo, then it knows the defensive plans of the wolverine.\nrule4(something) = not eat_food(something, food_of(kangaroo)) => knows(defensive_plans_of(wolverine), something)\n\n# The current state of the game is as follows\n# The jellyfish has eleven friends, and is named Max\nfriends(jellyfish) = 11\nname(jellyfish, Max) = True\n# The lion is named Milo\nname(lion, Milo) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish know the defensive plans of the wolverine?\nquestion = knows(defensive_plans_of(wolverine), jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The starfish burns the warehouse of the squirrel if the salmon shows all her cards to the starfish\nRule2: If at least one animal needs support from the bat, then the squirrel does not owe money to the buffalo\nRule3: If the lion does not roll the dice for the squirrel, then the squirrel owes money to the buffalo\nRule4: If the black bear has fewer than sixteen friends, then the black bear needs support from the bat\nRule5: The carp does not roll the dice for the squirrel if the eel holds an equal number of points as the carp\nRule6: If one of the animals offers a job to the elephant, then it does not need support from the bat\nRule7: If the starfish is not going to burn the warehouse of the squirrel but the carp rolls the dice for the squirrel, then the squirrel does not show all her cards to the doctorfish\nRule8: If the starfish has more than 7 friends, then it does not burn the warehouse of the squirrel\nRule9: If the penguin attacks the green fields owned by the carp, then the carp rolls the dice for the squirrel\nRule10: If something does not owe money to the buffalo and does not show all her cards to the doctorfish, then it does not prepare armor for the mosquito\n\nRule3 is preferred over Rule2\nRule6 is preferred over Rule4\nRule8 is preferred over Rule1\nRule9 is preferred over Rule5\n\nThe current state of the game is as follows\nThe black bear has 3 adventurous friends and 3 non-adventurous friends\nThe eel holds the same number of points as the carp\nThe penguin attacks the green fields owned by the carp\nThe salmon shows all her cards to the starfish\nThe starfish has 15 friends\n\nBased on the game state and the rules and preferences, does the squirrel prepare armor for the mosquito?\nQuestion: Does the squirrel prepare armor for the mosquito?",
        "idx": 358,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The starfish unquestionably burns the warehouse that is in possession of the squirrel, in the case where the salmon shows her cards (all of them) to the starfish\nrule1() = show_cards(salmon, starfish) => burn(warehouse_of(squirrel), starfish)\n# Rule2: If at least one animal needs support from the bat, then the squirrel does not owe $$$ to the buffalo\nrule2() = needs_support(something, bat) => not owes_money_to(squirrel, buffalo)\n# Rule3: If the lion does not roll the dice for the squirrel, then the squirrel owes money to the buffalo\nrule3() = not roll_dice(lion, squirrel) => owes_money_to(squirrel, buffalo)\n# Rule4: If the black bear has fewer than sixteen friends, then the black bear needs support from the bat\nrule4() = friends(black_bear) < 16 => needs_support(black_bear, bat)\n# Rule5: The carp does not roll the dice for the squirrel, in the case where the eel holds an equal number of points as the carp\nrule5() = points(eel) == points(carp) => not roll_dice(carp, squirrel)\n# Rule6: If you are positive that you saw one of the animals offers a job to the elephant, you can be certain that it will not need support from the bat\nrule6(something) = offer_job(something, elephant) => not needs_support(something, bat)\n# Rule7: For the squirrel, if the belief is that the starfish is not going to burn the warehouse of the squirrel but the carp rolls the dice for the squirrel, then you can add that \"the squirrel is not going to show all her cards to the doctorfish\" to your conclusions\nrule7() = not burn(warehouse_of(squirrel), starfish) & roll_dice(carp, squirrel) => not show_all_cards(squirrel, doctorfish)\n# Rule8: If the starfish has more than 7 friends, then the starfish does not burn the warehouse that is in possession of the squirrel\nrule8() = friends(starfish) > 7 => not burn(warehouse_of(squirrel), starfish)\n# Rule9: If the penguin attacks the green fields whose owner is the carp, then the carp rolls the dice for the squirrel\nrule9() = attack(penguin, green_fields_of(carp)) => roll_dice(carp, squirrel)\n# Rule10: Be careful when something does not owe $$$ to the buffalo and also does not show all her cards to the doctorfish because in this case it will surely not prepare armor for the mosquito (this may or may not be problematic).\nrule10(something) = not owes_money_to(something, buffalo) & not show_all_cards(something, doctorfish) => not prepare_armor(something, mosquito)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule8 is preferred over Rule1\norder(rule8) > order(rule1) = True\n# Rule9 is preferred over Rule5\norder(rule9) > order(rule5) = True\n\n# The current state of the game is as follows\n# The black bear has 3 adventurous friends and 3 non-adventurous friends\nfriends(black_bear, adventurous) = 3\nfriends(black_bear, not_adventurous) = 3\n# The eel holds the same number of points as the carp\npoints(eel) == points(carp) = True\n# The penguin attacks the green fields whose owner is the carp\nattack(penguin, green_fields_of(carp)) = True\n# The salmon shows all her cards to the starfish\nshow_cards(salmon, starfish) = True\n# The starfish has 15 friends\nfriends(starfish) = 15\n\n# Based on the game state and the rules and preferences, does the squirrel prepare armor for the mosquito?\nquestion = prepare_armor(squirrel, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The goldfish winks at the squirrel whenever at least one animal removes one of the pieces of the cockroach\nRule2: The lion eats the food that belongs to the panda bear whenever at least one animal winks at the squirrel\nRule3: If at least one animal learns the basics of resource management from the black bear, then the panda bear does not eat the food of the cat\nRule4: If the kangaroo does not become an enemy of the snail, then the snail knocks down the fortress that belongs to the lobster\nRule5: If an animal knocks down the fortress that belongs to the lobster, then it does not offer a job to the panda bear\nRule6: If something gives a magnifier to the lobster and offers a job position to the carp, then it does not knock down the fortress of the lobster\nRule7: If the lion eats the food that belongs to the panda bear and the snail does not offer a job position to the panda bear, then the panda bear eats the food that belongs to the cat\n\nRule4 is preferred over Rule6\nRule7 is preferred over Rule3\n\nThe current state of the game is as follows\nThe eel holds the same number of points as the cockroach\nThe snail offers a job to the carp\nThe kangaroo does not become an enemy of the snail\n\nBased on the game state and the rules and preferences, does the panda bear eat the food of the cat?\nQuestion: Does the panda bear eat the food of the cat?",
        "idx": 359,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The goldfish winks at the squirrel whenever at least one animal removes from the board one of the pieces of the cockroach\nrule1() = remove(animal, piece_of(cockroach)) => wink(goldfish, squirrel)\n# Rule2: The lion eats the food that belongs to the panda bear whenever at least one animal winks at the squirrel\nrule2() = wink(animal, squirrel) => eat_food(lion, food_of(panda_bear))\n# Rule3: If at least one animal learns the basics of resource management from the black bear, then the panda bear does not eat the food of the cat\nrule3() = learn_basics_of_resource_management(animal, black_bear) => not eat_food(panda_bear, food_of(cat))\n# Rule4: If the kangaroo does not become an enemy of the snail, then the snail knocks down the fortress that belongs to the lobster\nrule4() = not enemy(kangaroo, snail) => knock_down(snail, fortress_of(lobster))\n# Rule5: If you are positive that you saw one of the animals knocks down the fortress that belongs to the lobster, you can be certain that it will not offer a job to the panda bear\nrule5(animal) = knock_down(animal, fortress_of(lobster)) => not offer_job_position(animal, panda_bear)\n# Rule6: Be careful when something gives a magnifier to the lobster and also offers a job position to the carp because in this case it will surely not knock down the fortress of the lobster (this may or may not be problematic)\nrule6(something) = give_magnifier(something, lobster) & offer_job_position(something, carp) => not knock_down(lobster, fortress_of(lobster))\n# Rule7: If the lion eats the food that belongs to the panda bear and the snail does not offer a job position to the panda bear, then, inevitably, the panda bear eats the food that belongs to the cat.\nrule7() = eat_food(lion, food_of(panda_bear)) & not offer_job_position(snail, panda_bear) => eat_food(panda_bear, food_of(cat))\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n\n# The current state of the game is as follows\n# The eel holds the same number of points as the cockroach\npoints(eel) == points(cockroach) = True\n# The snail offers a job to the carp\noffer_job_position(snail, carp) = True\n# The kangaroo does not become an enemy of the snail\nnot enemy(kangaroo, snail) = True\n\n# Based on the game state and the rules and preferences, does the panda bear eat the food of the cat?\nquestion = eat_food(panda_bear, food_of(cat))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose has a card with a primary color, then it knocks down the fortress of the amberjack\nRule2: If the moose has a sharp object, then it knocks down the fortress of the amberjack\nRule3: If at least one animal steals five points from the mosquito, then the moose does not knock down the fortress that belongs to the amberjack\nRule4: If you see one of the animals prepares armor for the squirrel, then it will also steal five points from the caterpillar\nRule5: If something knocks down the fortress that belongs to the amberjack, then it prepares armor for the squirrel\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe moose has a card that is red in color and has a cello\n\nBased on the game state and the rules and preferences, does the moose steal five points from the caterpillar?\nQuestion: Does the moose steal five points from the caterpillar?",
        "idx": 360,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the moose, if it has a card with a primary color, then we can conclude that it knocks down the fortress of the amberjack\nrule1() = has(moose, card_with(primary_color)) => knock_down_fortress(moose, amberjack)\n# Rule2: Regarding the moose, if it has a sharp object, then we can conclude that it knocks down the fortress of the amberjack\nrule2() = has(moose, sharp_object) => knock_down_fortress(moose, amberjack)\n# Rule3: If at least one animal steals five of the points of the mosquito, then the moose does not knock down the fortress that belongs to the amberjack\nrule3() = steal_points(something, 5, mosquito) => not knock_down_fortress(moose, amberjack)\n# Rule4: If you are positive that you saw one of the animals prepares armor for the squirrel, you can be certain that it will also steal five of the points of the caterpillar\nrule4(something) = prepare_armor(something, squirrel) => steal_points(something, 5, caterpillar)\n# Rule5: If something knocks down the fortress that belongs to the amberjack, then it prepares armor for the squirrel, too.\nrule5(something) = knock_down_fortress(something, amberjack) => prepare_armor(something, squirrel)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The moose has a card that is red in color, and has a cello.\nhas(moose, card_with(red_color)) = True\nhas(moose, cello) = True\n\n# Based on the game state and the rules and preferences, does the moose steal five points from the caterpillar?\nquestion = steal_points(moose, 5, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the penguin has fewer than 5 friends, then it does not knock down the fortress of the squirrel\nRule2: If something offers a job to the moose but does not knock down the fortress of the moose, then it does not hold the same number of points as the cow\nRule3: If the cricket has a name whose first letter is the same as the first letter of the grizzly bear's name, then it does not become an enemy of the rabbit\nRule4: The polar bear offers a job to the gecko, in the case where the pig offers a job position to the polar bear\nRule5: If the salmon has a musical instrument, then it eats the food of the buffalo\nRule6: If the cricket has a leafy green vegetable, then it does not become an actual enemy of the rabbit\nRule7: If something does not become an enemy of the rabbit, then it does not knock down the fortress of the moose\nRule8: If the penguin has something to carry apples and oranges, then it knocks down the fortress of the squirrel\nRule9: The raven does not remove one of the pieces of the cricket whenever at least one animal offers a job position to the gecko\nRule10: If the salmon has a musical instrument, then it eats the food that belongs to the buffalo\nRule11: If the panda bear does not eat the food that belongs to the cricket and the raven does not remove one of the pieces of the cricket, then the cricket holds an equal number of points as the cow\nRule12: The cricket offers a job position to the moose whenever at least one animal knocks down the fortress that belongs to the squirrel\n\nRule1 is preferred over Rule8\nRule11 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cricket has a couch\nThe cricket is named Lucy\nThe cricket knocks down the fortress of the carp\nThe grizzly bear is named Lily\nThe penguin has a plastic bag\nThe pig offers a job to the polar bear\nThe polar bear has eighteen friends\nThe polar bear is named Tarzan\nThe salmon has a love seat sofa\nThe salmon has a saxophone\nThe zander is named Blossom\n\nBased on the game state and the rules and preferences, does the cricket hold the same number of points as the cow?\nQuestion: Does the cricket hold the same number of points as the cow?",
        "idx": 361,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the penguin has fewer than 5 friends, then the penguin does not knock down the fortress of the squirrel\nrule1() = friends(penguin) < 5 => not knock_down(squirrel, fortress)\n# Rule2: If you see that something offers a job to the moose but does not knock down the fortress of the moose, what can you certainly conclude? You can conclude that it does not hold the same number of points as the cow\nrule2(something) = offer_job(something, moose) & not knock_down(something, fortress_of(moose)) => not same_number_of_points(something, cow)\n# Rule3: Regarding the cricket, if it has a name whose first letter is the same as the first letter of the grizzly bear's name, then we can conclude that it does not become an enemy of the rabbit\nrule3() = first_letter_of(name(cricket)) == first_letter_of(name(grizzly_bear)) => not enemy(cricket, rabbit)\n# Rule4: The polar bear unquestionably offers a job to the gecko, in the case where the pig offers a job position to the polar bear\nrule4() = offer_job(pig, polar_bear) => offer_job(polar_bear, gecko)\n# Rule5: If the salmon has a musical instrument, then the salmon eats the food of the buffalo\nrule5() = has(salmon, musical_instrument) => eats(salmon, food_of(buffalo))\n# Rule6: Regarding the cricket, if it has a leafy green vegetable, then we can conclude that it does not become an actual enemy of the rabbit\nrule6() = has(cricket, leafy_green_vegetable) => not actual_enemy(cricket, rabbit)\n# Rule7: If something does not become an enemy of the rabbit, then it does not knock down the fortress that belongs to the moose\nrule7(something) = not enemy(something, rabbit) => not knock_down(something, fortress_of(moose))\n# Rule8: If the penguin has something to carry apples and oranges, then the penguin knocks down the fortress of the squirrel\nrule8() = has(penguin, carry_apples_and_oranges) => knock_down(squirrel, fortress)\n# Rule9: The raven does not remove from the board one of the pieces of the cricket whenever at least one animal offers a job position to the gecko\nrule9() = offer_job(something, gecko) => not remove(raven, piece_of(cricket))\n# Rule10: Regarding the salmon, if it has a musical instrument, then we can conclude that it eats the food that belongs to the buffalo\nrule10() = has(salmon, musical_instrument) => eats(salmon, food_of(buffalo))\n# Rule11: If the panda bear does not eat the food that belongs to the cricket and the raven does not remove one of the pieces of the cricket, then the cricket holds an equal number of points as the cow\nrule11() = not eats(panda_bear, food_of(cricket)) & not remove(raven, piece_of(cricket)) => same_number_of_points(cricket, cow)\n# Rule12: The cricket offers a job position to the moose whenever at least one animal knocks down the fortress that belongs to the squirrel.\nrule12() = knock_down(something, fortress_of(squirrel)) => offer_job(cricket, moose)\n# Rule1 is preferred over Rule8\norder(rule1) > order(rule8) = True\n# Rule11 is preferred over Rule2\norder(rule11) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cricket has a couch, is named Lucy, and knocks down the fortress of the carp\nhas(cricket, couch) = True\nname(cricket, Lucy) = True\nknock_down(cricket, fortress_of(carp)) = True\n# The grizzly bear is named Lily\nname(grizzly_bear, Lily) = True\n# The penguin has a plastic bag\nhas(penguin, plastic_bag) = True\n# The pig offers a job to the polar bear\noffer_job(pig, polar_bear) = True\n# The polar bear has eighteen friends, and is named Tarzan\nfriends(polar_bear) = 18\nname(polar_bear, Tarzan) = True\n# The salmon has a love seat sofa, and has a saxophone\nhas(salmon, love_seat_sofa) = True\nhas(salmon, saxophone) = True\n# The zander is named Blossom\nname(zander, Blossom) = True\n\n# Based on the game state and the rules and preferences, does the cricket hold the same number of points as the cow?\nquestion = same_number_of_points(cricket, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish has something to drink, then the blobfish raises a peace flag for the kangaroo\nRule2: If you are positive that you saw one of the animals prepares armor for the raven, you can be certain that it will not raise a peace flag for the kangaroo\nRule3: If the blobfish has a musical instrument, then it does not burn the warehouse of the carp\nRule4: If the rabbit has fewer than 3 friends, then it does not offer a job position to the crocodile\nRule5: If the blobfish killed the mayor, then it burns the warehouse of the carp\nRule6: If the blobfish offers a job position to the donkey and the rabbit knocks down the fortress that belongs to the donkey, then the donkey winks at the mosquito\nRule7: If the rabbit has a name whose first letter is the same as the first letter of the canary's name, then it does not offer a job to the crocodile\nRule8: If you are positive that you saw one of the animals offers a job position to the crocodile, you can be certain that it will also knock down the fortress that belongs to the donkey\nRule9: If the rabbit has a high-quality paper, then it offers a job to the crocodile\nRule10: If the blobfish has a name whose first letter is the same as the first letter of the grasshopper's name, then it burns the warehouse of the carp\nRule11: Be careful when something raises a peace flag for the kangaroo and also burns the warehouse that is in possession of the carp because in this case it will surely offer a job position to the donkey\nRule12: If the blobfish has something to carry apples and oranges, then it raises a flag of peace for the kangaroo\n\nRule1 is preferred over Rule2\nRule12 is preferred over Rule2\nRule3 is preferred over Rule10\nRule3 is preferred over Rule5\nRule4 is preferred over Rule9\nRule7 is preferred over Rule9\n\nThe current state of the game is as follows\nThe blobfish assassinated the mayor\nThe blobfish has a knapsack\nThe blobfish is named Meadow\nThe blobfish has romaine lettuce\nThe canary is named Paco\nThe grasshopper is named Cinnamon\nThe rabbit is named Lola\nThe rabbit reduced her work hours recently\n\nBased on the game state and the rules and preferences, does the donkey wink at the mosquito?\nQuestion: Does the donkey wink at the mosquito?",
        "idx": 362,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the blobfish has something to drink, then the blobfish raises a peace flag for the kangaroo\nrule1() = has(blobfish, drink) => raise_flag_of_peace(blobfish, kangaroo)\n# Rule2: If you are positive that you saw one of the animals prepares armor for the raven, you can be certain that it will not raise a peace flag for the kangaroo\nrule2(something) = prepares_armor(something, raven) => not raise_flag_of_peace(something, kangaroo)\n# Rule3: Regarding the blobfish, if it has a musical instrument, then we can conclude that it does not burn the warehouse of the carp\nrule3() = has(blobfish, musical_instrument) => not burn(warehouse_of(carp), blobfish)\n# Rule4: Regarding the rabbit, if it has fewer than 3 friends, then we can conclude that it does not offer a job position to the crocodile\nrule4() = friends(rabbit) < 3 => not offer_job_position(rabbit, crocodile)\n# Rule5: Regarding the blobfish, if it killed the mayor, then we can conclude that it burns the warehouse of the carp\nrule5() = killed(blobfish, mayor) => burn(warehouse_of(carp), blobfish)\n# Rule6: If the blobfish offers a job position to the donkey and the rabbit knocks down the fortress that belongs to the donkey, then the donkey winks at the mosquito\nrule6() = offer_job_position(blobfish, donkey) & knock_down(rabbit, fortress_of(donkey)) => wink(donkey, mosquito)\n# Rule7: Regarding the rabbit, if it has a name whose first letter is the same as the first letter of the canary's name, then we can conclude that it does not offer a job to the crocodile\nrule7() = first_letter_of(name(rabbit)) == first_letter_of(name(canary)) => not offer_job_position(rabbit, crocodile)\n# Rule8: If you are positive that you saw one of the animals offers a job position to the crocodile, you can be certain that it will also knock down the fortress that belongs to the donkey\nrule8(something) = offer_job_position(something, crocodile) => knock_down(something, fortress_of(donkey))\n# Rule9: If the rabbit has a high-quality paper, then the rabbit offers a job to the crocodile\nrule9() = has(rabbit, high_quality_paper) => offer_job_position(rabbit, crocodile)\n# Rule10: Regarding the blobfish, if it has a name whose first letter is the same as the first letter of the grasshopper's name, then we can conclude that it burns the warehouse of the carp\nrule10() = first_letter_of(name(blobfish)) == first_letter_of(name(grasshopper)) => burn(warehouse_of(carp), blobfish)\n# Rule11: Be careful when something raises a peace flag for the kangaroo and also burns the warehouse that is in possession of the carp because in this case it will surely offer a job position to the donkey (this may or may not be problematic)\nrule11(something) = raise_flag_of_peace(something, kangaroo) & burn(warehouse_of(carp), something) => offer_job_position(something, donkey)\n# Rule12: If the blobfish has something to carry apples and oranges, then the blobfish raises a flag of peace for the kangaroo.\nrule12() = has(blobfish, carry_apples_and_oranges) => raise_flag_of_peace(blobfish, kangaroo)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule12 is preferred over Rule2\norder(rule12) > order(rule2) = True\n# Rule3 is preferred over Rule10\norder(rule3) > order(rule10) = True\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule4 is preferred over Rule9\norder(rule4) > order(rule9) = True\n# Rule7 is preferred over Rule9\norder(rule7) > order(rule9) = True\n\n# The current state of the game is as follows\n# The blobfish assassinated the mayor, has a knapsack, and is named Meadow\nassassinated(blobfish, mayor) = True\nhas(blobfish, knapsack) = True\nname(blobfish, Meadow) = True\n# The blobfish has some romaine lettuce\nhas(blobfish, romaine_lettuce) = True\n# The canary is named Paco\nname(canary, Paco) = True\n# The grasshopper is named Cinnamon\nname(grasshopper, Cinnamon) = True\n# The rabbit is named Lola\nname(rabbit, Lola) = True\n# The rabbit reduced her work hours recently\nreduce_work_hours(rabbit) = True\n\n# Based on the game state and the rules and preferences, does the donkey wink at the mosquito?\nquestion = wink(donkey, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something eats the food that belongs to the donkey, then it winks at the swordfish, too\nRule2: If something does not show all her cards to the salmon, then it does not need support from the lobster\nRule3: If the halibut knows the defense plan of the cockroach and the gecko removes one of the pieces of the cockroach, then the cockroach burns the warehouse of the buffalo\nRule4: If something burns the warehouse of the tilapia but does not become an enemy of the carp, then it needs support from the lobster\nRule5: If the hummingbird needs support from the lobster, then the lobster eats the food that belongs to the donkey\nRule6: If at least one animal burns the warehouse of the buffalo, then the lobster does not eat the food of the donkey\n\nRule2 is preferred over Rule4\nRule5 is preferred over Rule6\n\nThe current state of the game is as follows\nThe gecko removes one of the pieces of the cockroach\nThe halibut knows the defensive plans of the cockroach\nThe hummingbird burns the warehouse of the tilapia but does not become an enemy of the carp\n\nBased on the game state and the rules and preferences, does the lobster wink at the swordfish?\nQuestion: Does the lobster wink at the swordfish?",
        "idx": 363,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something eats the food that belongs to the donkey, then it winks at the swordfish, too\nrule1() = eat_food(something, donkey) => wink_at(something, swordfish)\n# Rule2: If something does not show her cards (all of them) to the salmon, then it does not need support from the lobster\nrule2() = not show_cards(something, salmon) => not need_support(something, lobster)\n# Rule3: If the halibut knows the defense plan of the cockroach and the gecko removes one of the pieces of the cockroach, then the cockroach burns the warehouse of the buffalo\nrule3() = knows(defense_plan_of(cockroach), halibut) & remove(gecko, piece_of(cockroach)) => burn(warehouse_of(buffalo), cockroach)\n# Rule4: Be careful when something burns the warehouse of the tilapia but does not become an enemy of the carp because in this case it will, surely, need support from the lobster (this may or may not be problematic)\nrule4(something) = burn(warehouse_of(tilapia), something) & not enemy(something, carp) => need_support(something, lobster)\n# Rule5: If the hummingbird needs support from the lobster, then the lobster eats the food that belongs to the donkey\nrule5() = need_support(hummingbird, lobster) => eat_food(lobster, donkey)\n# Rule6: If at least one animal burns the warehouse that is in possession of the buffalo, then the lobster does not eat the food of the donkey.\nrule6(something) = burn(warehouse_of(buffalo), something) => not eat_food(lobster, donkey)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n\n# The current state of the game is as follows\n# The gecko removes from the board one of the pieces of the cockroach\nremove(gecko, piece_of(cockroach)) = True\n# The halibut knows the defensive plans of the cockroach\nknows(defensive_plans_of(cockroach), halibut) = True\n# The hummingbird burns the warehouse of the tilapia but does not become an enemy of the carp\nburn(warehouse_of(tilapia), hummingbird) = True\nnot enemy(hummingbird, carp) = True\n\n# Based on the game state and the rules and preferences, does the lobster wink at the swordfish?\nquestion = wink_at(lobster, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not burn the warehouse that is in possession of the donkey, you can be certain that it will respect the lion without a doubt\nRule2: The cow will not wink at the cat, in the case where the grasshopper does not roll the dice for the cow\nRule3: The grasshopper does not roll the dice for the cow whenever at least one animal respects the lion.\n\nThe current state of the game is as follows\nThe baboon does not burn the warehouse of the donkey.\n\nBased on the game state and the rules and preferences, does the cow wink at the cat?\nQuestion: Does the cow wink at the cat?",
        "idx": 364,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not burn the warehouse that is in possession of the donkey, you can be certain that it will respect the lion without a doubt\nrule1(something) = not burn(warehouse_of(donkey), something) => respect(something, lion)\n# Rule2: The cow will not wink at the cat, in the case where the grasshopper does not roll the dice for the cow\nrule2() = not roll_dice(grasshopper, cow) => not wink(cow, cat)\n# Rule3: The grasshopper does not roll the dice for the cow whenever at least one animal respects the lion.\nrule3() = respects(something, lion) => not roll_dice(grasshopper, cow)\n\n# The current state of the game is as follows\n# The baboon does not burn the warehouse of the donkey.\nnot burn(warehouse_of(donkey), baboon) = True\n\n# Based on the game state and the rules and preferences, does the cow wink at the cat?\nquestion = wink(cow, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cat does not wink at the tiger, then the tiger winks at the hare\nRule2: The tiger learns the basics of resource management from the cheetah, in the case where the meerkat prepares armor for the tiger\nRule3: If something shows all her cards to the hippopotamus, then it winks at the tiger, too\nRule4: If the cat has a sharp object, then the cat does not wink at the tiger\nRule5: If something winks at the hare and learns the basics of resource management from the cheetah, then it also needs the support of the donkey\nRule6: If something burns the warehouse of the moose, then it holds an equal number of points as the tiger, too\nRule7: The meerkat does not hold the same number of points as the tiger whenever at least one animal becomes an actual enemy of the koala\n\nRule4 is preferred over Rule3\nRule7 is preferred over Rule6\n\nThe current state of the game is as follows\nThe cat has a blade\nThe cat shows all her cards to the hippopotamus\nThe meerkat burns the warehouse of the moose\n\nBased on the game state and the rules and preferences, does the tiger need support from the donkey?\nQuestion: Does the tiger need support from the donkey?",
        "idx": 365,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cat does not wink at the tiger, then the tiger winks at the hare\nrule1() = not wink(cat, tiger) => wink(tiger, hare)\n# Rule2: The tiger unquestionably learns the basics of resource management from the cheetah, in the case where the meerkat prepares armor for the tiger\nrule2() = prepare_armor(meerkat, tiger) => learn_basics_of_resource_management(tiger, cheetah)\n# Rule3: If something shows all her cards to the hippopotamus, then it winks at the tiger, too\nrule3(something) = show_cards(something, hippopotamus) => wink(something, tiger)\n# Rule4: If the cat has a sharp object, then the cat does not wink at the tiger\nrule4() = has(cat, sharp_object) => not wink(cat, tiger)\n# Rule5: If you see that something winks at the hare and learns the basics of resource management from the cheetah, what can you certainly conclude? You can conclude that it also needs the support of the donkey\nrule5(something) = wink(something, hare) & learn_basics_of_resource_management(something, cheetah) => needs_support(something, donkey)\n# Rule6: If something burns the warehouse that is in possession of the moose, then it holds an equal number of points as the tiger, too\nrule6(something) = burn(warehouse_of(moose), something) => points(something) == points(tiger)\n# Rule7: The meerkat does not hold the same number of points as the tiger whenever at least one animal becomes an actual enemy of the koala.\nrule7() = enemy(something, koala) => not same_points(meerkat, tiger)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n\n# The current state of the game is as follows\n# The cat has a blade\nhas(cat, blade) = True\n# The cat shows all her cards to the hippopotamus\nshow_cards(cat, hippopotamus) = True\n# The meerkat burns the warehouse of the moose\nburn(warehouse_of(moose), meerkat) = True\n\n# Based on the game state and the rules and preferences, does the tiger need support from the donkey?\nquestion = needs_support(tiger, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see one of the animals learn elementary resource management from the catfish, you can be certain that it will also hold the same number of points as the oscar\nRule2: If you see one of the animals hold the same number of points as the oscar, you can be certain that it will also offer a job position to the rabbit\nRule3: If the blobfish respects the rabbit, then the rabbit respects the polar bear\nRule4: If the blobfish offers a job to the rabbit and the phoenix gives a magnifier to the rabbit, then the rabbit will not respect the polar bear\nRule5: The phoenix proceeds to the spot right after the kangaroo, in the case where the whale does not wink at the phoenix\nRule6: If the phoenix has a card with a primary color, then it burns the warehouse that is in possession of the swordfish\nRule7: If the phoenix has a name whose first letter is the same as the first letter of the penguin's name, then the phoenix burns the warehouse of the swordfish\nRule8: If you see one of the animals burn the warehouse that is in possession of the swordfish, you can be certain that it will also give a magnifying glass to the rabbit\nRule9: If at least one animal respects the raven, then the blobfish respects the rabbit\nRule10: If the pig does not sing a victory song for the blobfish, then the blobfish does not hold the same number of points as the oscar\nRule11: If the sea bass has a name whose first letter is the same as the first letter of the caterpillar's name, then it respects the raven\n\nRule10 is preferred over Rule1\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe blobfish learns the basics of resource management from the catfish\nThe caterpillar is named Milo\nThe penguin is named Peddi\nThe phoenix has a card that is orange in color\nThe phoenix is named Pashmak\nThe sea bass is named Max\nThe whale does not wink at the phoenix\n\nBased on the game state and the rules and preferences, does the rabbit respect the polar bear?\nQuestion: Does the rabbit respect the polar bear?",
        "idx": 366,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals learns elementary resource management from the catfish, you can be certain that it will also hold the same number of points as the oscar\nrule1() = learns_resource_management(something, catfish) => holds_same_points(something, oscar)\n# Rule2: If you are positive that you saw one of the animals holds the same number of points as the oscar, you can be certain that it will also offer a job position to the rabbit\nrule2() = holds_same_points(something, oscar) => offer_job_position(something, rabbit)\n# Rule3: If the blobfish respects the rabbit, then the rabbit respects the polar bear\nrule3() = respects(blobfish, rabbit) => respects(rabbit, polar_bear)\n# Rule4: If the blobfish offers a job to the rabbit and the phoenix gives a magnifier to the rabbit, then the rabbit will not respect the polar bear\nrule4() = offer_job_position(blobfish, rabbit) & give_magnifier(phoenix, rabbit) => not respects(rabbit, polar_bear)\n# Rule5: The phoenix unquestionably proceeds to the spot right after the kangaroo, in the case where the whale does not wink at the phoenix\nrule5() = not wink(whale, phoenix) => proceed(phoenix, spot_right_after(kangaroo))\n# Rule6: Regarding the phoenix, if it has a card with a primary color, then we can conclude that it burns the warehouse that is in possession of the swordfish\nrule6() = has(phoenix, card_with(primary_color)) => burn(warehouse_of(swordfish), phoenix)\n# Rule7: If the phoenix has a name whose first letter is the same as the first letter of the penguin's name, then the phoenix burns the warehouse of the swordfish\nrule7() = first_letter_of(name(phoenix)) == first_letter_of(name(penguin)) => burn(warehouse_of(swordfish), phoenix)\n# Rule8: If you are positive that you saw one of the animals burns the warehouse that is in possession of the swordfish, you can be certain that it will also give a magnifying glass to the rabbit\nrule8() = burns(warehouse_of(swordfish), something) => give_magnifying_glass(something, rabbit)\n# Rule9: If at least one animal respects the raven, then the blobfish respects the rabbit\nrule9() = respects(something, raven) => respects(blobfish, rabbit)\n# Rule10: If the pig does not sing a song of victory for the blobfish, then the blobfish does not hold the same number of points as the oscar\nrule10() = not sing_song(pig, victory_song_for(blobfish)) => not holds_same_points(blobfish, oscar)\n# Rule11: Regarding the sea bass, if it has a name whose first letter is the same as the first letter of the caterpillar's name, then we can conclude that it respects the raven.\nrule11() = first_letter_of(name(sea_bass)) == first_letter_of(name(caterpillar)) => respects(sea_bass, raven)\n# Rule10 is preferred over Rule1\norder(rule10) > order(rule1) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The blobfish learns the basics of resource management from the catfish\nlearns_resource_management(blobfish, catfish) = True\n# The caterpillar is named Milo\nname(caterpillar, Milo) = True\n# The penguin is named Peddi\nname(penguin, Peddi) = True\n# The phoenix has a card that is orange in color\nhas(phoenix, card_with(orange_color)) = True\n# The phoenix is named Pashmak\nname(phoenix, Pashmak) = True\n# The sea bass is named Max\nname(sea_bass, Max) = True\n# The whale does not wink at the phoenix\nnot wink(whale, phoenix) = True\n\n# Based on the game state and the rules and preferences, does the rabbit respect the polar bear?\nquestion = respects(rabbit, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the mosquito does not roll the dice for the sea bass, then the sea bass owes money to the halibut\nRule2: If the ferret has a name whose first letter is the same as the first letter of the cow's name, then it does not wink at the sea bass\nRule3: If an animal does not steal five points from the tiger, then it will roll the dice for the tilapia\nRule4: If an animal gives a magnifier to the penguin, then it will wink at the sea bass\nRule5: If the crocodile has a musical instrument, then it burns the warehouse that belongs to the sea bass\nRule6: If an animal needs support from the starfish, then the sea bass does not sing a victory song for the meerkat\nRule7: If an animal respects the hippopotamus, then it holds the same number of points as the blobfish\nRule8: If an animal sings a victory song for the meerkat, then it does not need support from the whale\nRule9: If the ferret has more than ten friends, then it does not wink at the sea bass\nRule10: If the sea bass has fewer than twelve friends, then it does not steal five points from the tiger\nRule11: If the squirrel does not proceed to the spot right after the crocodile and the caterpillar does not remove one of the pieces of the crocodile, then the crocodile does not burn the warehouse that belongs to the sea bass\nRule12: If the crocodile does not burn the warehouse that belongs to the sea bass, then the sea bass respects the hippopotamus\nRule13: If the crocodile has a device to connect to the internet, then it burns the warehouse that belongs to the sea bass\nRule14: If an animal prepares armor for the kangaroo, then it does not remove one of the pieces of the phoenix\nRule15: If the ferret winks at the sea bass, then the sea bass needs support from the whale\nRule16: If the sea bass has a sharp object, then it sings a victory song for the meerkat\nRule17: If an animal needs support from the whale and rolls the dice for the tilapia, then it does not hold the same number of points as the blobfish\n\nRule13 is preferred over Rule11\nRule15 is preferred over Rule8\nRule17 is preferred over Rule7\nRule4 is preferred over Rule2\nRule4 is preferred over Rule9\nRule5 is preferred over Rule11\nRule6 is preferred over Rule16\n\nThe current state of the game is as follows\nThe cow is named Bella\nThe crocodile has a cappuccino\nThe ferret gives a magnifier to the penguin\nThe ferret has 18 friends\nThe ferret is named Max\nThe sea bass has 2 loyal friends and 1 disloyal friend, and prepares armor for the kangaroo\nThe sea bass has a blade and a love seat sofa\nThe caterpillar does not remove one of the pieces of the crocodile\nThe mosquito does not roll the dice for the sea bass\nThe squirrel does not proceed to the spot right after the crocodile\n\nBased on the game state and the rules and preferences, does the sea bass hold the same number of points as the blobfish?\nQuestion: Does the sea bass hold the same number of points as the blobfish?",
        "idx": 367,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the mosquito does not roll the dice for the sea bass, then the sea bass owes $$$ to the halibut\nrule1() = not roll_dice(mosquito, sea_bass) => owes_money_to(sea_bass, halibut)\n# Rule2: Regarding the ferret, if it has a name whose first letter is the same as the first letter of the cow's name, then we can conclude that it does not wink at the sea bass\nrule2() = first_letter_of(name(ferret)) == first_letter_of(name(cow)) => not wink_at(ferret, sea_bass)\n# Rule3: If you are positive that one of the animals does not steal five points from the tiger, you can be certain that it will roll the dice for the tilapia without a doubt\nrule3() = not steal_points(something, tiger) => roll_dice(something, tilapia)\n# Rule4: If you are positive that you saw one of the animals gives a magnifier to the penguin, you can be certain that it will also wink at the sea bass\nrule4() = give_magnifier(something, penguin) => wink_at(something, sea_bass)\n# Rule5: Regarding the crocodile, if it has a musical instrument, then we can conclude that it burns the warehouse that is in possession of the sea bass\nrule5() = has(crocodile, musical_instrument) => burn(warehouse_of(sea_bass))\n# Rule6: If at least one animal needs support from the starfish, then the sea bass does not sing a victory song for the meerkat\nrule6() = needs_support(something, starfish) => not sing_song(sea_bass, victory_song_for(meerkat))\n# Rule7: If something respects the hippopotamus, then it holds the same number of points as the blobfish, too\nrule7(something) = respects(something, hippopotamus) => points(something) == points(blobfish)\n# Rule8: If you are positive that you saw one of the animals sings a song of victory for the meerkat, you can be certain that it will not need support from the whale\nrule8() = sing_song(something, victory_song_for(meerkat)) => not needs_support(something, whale)\n# Rule9: Regarding the ferret, if it has more than ten friends, then we can conclude that it does not wink at the sea bass\nrule9() = friends(ferret) > 10 => not wink_at(ferret, sea_bass)\n# Rule10: Regarding the sea bass, if it has fewer than twelve friends, then we can conclude that it does not steal five points from the tiger\nrule10() = friends(sea_bass) < 12 => not steal_points(sea_bass, tiger)\n# Rule11: For the crocodile, if the belief is that the squirrel does not proceed to the spot right after the crocodile and the caterpillar does not remove from the board one of the pieces of the crocodile, then you can add \"the crocodile does not burn the warehouse that is in possession of the sea bass\" to your conclusions\nrule11() = not proceed(squirrel, spot_right_after(spot_of(crocodile))) & not remove(caterpillar, piece_of(crocodile)) => not burn(warehouse_of(sea_bass))\n# Rule12: If the crocodile does not burn the warehouse that is in possession of the sea bass, then the sea bass respects the hippopotamus\nrule12() = not burn(warehouse_of(sea_bass)) => respects(sea_bass, hippopotamus)\n# Rule13: Regarding the crocodile, if it has a device to connect to the internet, then we can conclude that it burns the warehouse of the sea bass\nrule13(device) = has(crocodile, connect_to_internet(device)) => burn(warehouse_of(sea_bass))\n# Rule14: If you are positive that you saw one of the animals prepares armor for the kangaroo, you can be certain that it will not remove one of the pieces of the phoenix\nrule14() = prepare_armor(something, kangaroo) => not remove(something, piece_of(phoenix))\n# Rule15: The sea bass unquestionably needs support from the whale, in the case where the ferret winks at the sea bass\nrule15() = wink_at(ferret, sea_bass) => needs_support(sea_bass, whale)\n# Rule16: If the sea bass has a sharp object, then the sea bass sings a victory song for the meerkat\nrule16() = has(sea_bass, sharp_object) => sing_song(sea_bass, victory_song_for(meerkat))\n# Rule17: If you see that something needs the support of the whale and rolls the dice for the tilapia, what can you certainly conclude? You can conclude that it does not hold the same number of points as the blobfish.\nrule17(something) = needs_support(something, whale) & roll_dice(something, tilapia) => not points(something) == points(blobfish)\n# Rule13 is preferred over Rule11\norder(rule13) > order(rule11) = True\n# Rule15 is preferred over Rule8\norder(rule15) > order(rule8) = True\n# Rule17 is preferred over Rule7\norder(rule17) > order(rule7) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule4 is preferred over Rule9\norder(rule4) > order(rule9) = True\n# Rule5 is preferred over Rule11\norder(rule5) > order(rule11) = True\n# Rule6 is preferred over Rule16\norder(rule6) > order(rule16) = True\n\n# The current state of the game is as follows\n# The cow is named Bella\nname(cow, Bella) = True\n# The crocodile has a cappuccino\nhas(crocodile, cappuccino) = True\n# The ferret gives a magnifier to the penguin\ngive_magnifier(ferret, penguin) = True\n# The ferret has 18 friends\nfriends(ferret) = 18\n# The ferret is named Max\nname(ferret, Max) = True\n# The sea bass has 2 loyal friends and 1 disloyal friend, and prepares armor for the kangaroo\nfriends(sea_bass) = 2 loyal, 1 disloyal\nprepare_armor(sea_bass, kangaroo) = True\n# The sea bass has a blade and a love seat sofa\nhas(sea_bass, blade) = True\nhas(sea_bass, love_seat_sofa) = True\n# The caterpillar does not remove from the board one of the pieces of the crocodile\nnot remove(caterpillar, piece_of(crocodile)) = True\n# The mosquito does not roll the dice for the sea bass\nnot roll_dice(mosquito, sea_bass) = True\n# The squirrel does not proceed to the spot right after the crocodile\nnot proceed(squirrel, spot_right_after(spot_of(crocodile))) = True\n\n# Based on the game state and the rules and preferences, does the sea bass hold the same number of points as the blobfish?\nquestion = points(sea_bass) == points(blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the carp, then it burns the warehouse that is in possession of the turtle\nRule2: If something does not burn the warehouse that is in possession of the crocodile, then it will roll the dice for the carp\nRule3: If something burns the warehouse that is in possession of the turtle, then it rolls the dice for the puffin\nRule4: If something owes money to the leopard, then it sings a song of victory for the cat\nRule5: If the black bear has a leafy green vegetable, then it knows the defense plan of the hippopotamus\nRule6: If the polar bear attacks the green fields of the hippopotamus, then the hippopotamus does not sing a victory song for the cat\nRule7: If the dog rolls the dice for the mosquito, then the mosquito knocks down the fortress of the hippopotamus\nRule8: If the black bear has difficulty finding food, then it knows the defensive plans of the hippopotamus\nRule9: If the mosquito knocks down the fortress of the hippopotamus and the black bear knows the defense plan of the hippopotamus, then the hippopotamus becomes an enemy of the kiwi\nRule10: If the black bear has a card with a color that is one of the rainbow colors, then it does not know the defense plan of the hippopotamus\nRule11: If the meerkat winks at the hippopotamus, then the hippopotamus does not become an enemy of the kiwi\nRule12: If at least one animal eats the food of the ferret, then the hippopotamus owes money to the leopard\nRule13: If the mosquito has a card with a color that appears in the flag of the Netherlands, then it does not knock down the fortress of the hippopotamus\nRule14: If something sings a victory song for the spider, then it does not owe money to the leopard\n\nRule13 is preferred over Rule7\nRule14 is preferred over Rule12\nRule5 is preferred over Rule10\nRule6 is preferred over Rule4\nRule8 is preferred over Rule10\nRule9 is preferred over Rule11\n\nThe current state of the game is as follows\nThe black bear has a trumpet and is holding her keys\nThe snail removes one of the pieces of the ferret from the board\nThe dog does not roll the dice for the mosquito\nThe hippopotamus does not roll the dice for the crocodile\n\nBased on the game state and the rules and preferences, does the hippopotamus roll the dice for the puffin?\nQuestion: Does the hippopotamus roll the dice for the puffin?",
        "idx": 368,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something rolls the dice for the carp, then it burns the warehouse that is in possession of the turtle, too\nrule1() = roll_dice(something, carp) => burn(warehouse_of(turtle), something)\n# Rule2: If you are positive that one of the animals does not burn the warehouse that is in possession of the crocodile, you can be certain that it will roll the dice for the carp without a doubt\nrule2(something) = not burn(warehouse_of(crocodile), something) => roll_dice(something, carp)\n# Rule3: If something burns the warehouse that is in possession of the turtle, then it rolls the dice for the puffin, too\nrule3() = burn(warehouse_of(turtle), something) => roll_dice(something, puffin)\n# Rule4: If something owes $$$ to the leopard, then it sings a song of victory for the cat, too\nrule4() = owes_money_to(something, leopard) => sing_song(something, victory_song_for(cat))\n# Rule5: Regarding the black bear, if it has a leafy green vegetable, then we can conclude that it knows the defense plan of the hippopotamus\nrule5() = has(black_bear, leafy_green_vegetable) => knows(defense_plan_of(hippopotamus), black_bear)\n# Rule6: If the polar bear attacks the green fields whose owner is the hippopotamus, then the hippopotamus is not going to sing a victory song for the cat\nrule6() = attack(polar_bear, green_fields_of(hippopotamus)) => not sing_song(hippopotamus, victory_song_for(cat))\n# Rule7: If the dog rolls the dice for the mosquito, then the mosquito knocks down the fortress of the hippopotamus\nrule7() = roll_dice(dog, mosquito) => knock_down(fortress_of(hippopotamus), mosquito)\n# Rule8: If the black bear has difficulty to find food, then the black bear knows the defensive plans of the hippopotamus\nrule8() = has_difficulty_finding_food(black_bear) => knows(defensive_plans_of(hippopotamus), black_bear)\n# Rule9: If the mosquito knocks down the fortress that belongs to the hippopotamus and the black bear knows the defense plan of the hippopotamus, then the hippopotamus becomes an enemy of the kiwi\nrule9() = knock_down(fortress_of(hippopotamus), mosquito) & knows(defense_plan_of(hippopotamus), black_bear) => enemy(hippopotamus, kiwi)\n# Rule10: Regarding the black bear, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not know the defense plan of the hippopotamus\nrule10() = has(black_bear, card) and color(card) in rainbow_colors => not knows(defense_plan_of(hippopotamus), black_bear)\n# Rule11: The hippopotamus does not become an actual enemy of the kiwi, in the case where the meerkat winks at the hippopotamus\nrule11() = wink(meerkat, hippopotamus) => not enemy(hippopotamus, kiwi)\n# Rule12: If at least one animal eats the food of the ferret, then the hippopotamus owes money to the leopard\nrule12() = eat_food_of(something, ferret) => owes_money_to(hippopotamus, leopard)\n# Rule13: If the mosquito has a card whose color appears in the flag of Netherlands, then the mosquito does not knock down the fortress of the hippopotamus\nrule13() = has(mosquito, card) and color(card) in colors_of(flag_of(Netherlands)) => not knock_down(fortress_of(hippopotamus), mosquito)\n# Rule14: If you are positive that you saw one of the animals sings a victory song for the spider, you can be certain that it will not owe $$$ to the leopard.\nrule14(something) = sing_song(something, victory_song_for(spider)) => not owes_money_to(something, leopard)\n# Rule13 is preferred over Rule7\norder(rule13) > order(rule7) = True\n# Rule14 is preferred over Rule12\norder(rule14) > order(rule12) = True\n# Rule5 is preferred over Rule10\norder(rule5) > order(rule10) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule8 is preferred over Rule10\norder(rule8) > order(rule10) = True\n# Rule9 is preferred over Rule11\norder(rule9) > order(rule11) = True\n\n# The current state of the game is as follows\n# The black bear has a trumpet, and is holding her keys\nhas(black_bear, trumpet) = True\nholding(black_bear, keys) = True\n# The snail removes from the board one of the pieces of the ferret\nremove(snail, piece_of(ferret)) = True\n# The dog does not roll the dice for the mosquito\nnot roll_dice(dog, mosquito) = True\n# The hippopotamus does not roll the dice for the crocodile\nnot roll_dice(hippopotamus, crocodile) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus roll the dice for the puffin?\nquestion = roll_dice(hippopotamus, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not need the support of the rabbit, you can be certain that it will not burn the warehouse of the pig\nRule2: The wolverine unquestionably gives a magnifier to the starfish, in the case where the cockroach sings a song of victory for the wolverine\nRule3: If at least one animal gives a magnifier to the starfish, then the lobster burns the warehouse that is in possession of the pig\nRule4: The cockroach sings a song of victory for the wolverine whenever at least one animal holds an equal number of points as the koala.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe mosquito holds the same number of points as the koala\n\nBased on the game state and the rules and preferences, does the lobster burn the warehouse of the pig?\nQuestion: Does the lobster burn the warehouse of the pig?",
        "idx": 369,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not need the support of the rabbit, you can be certain that it will not burn the warehouse of the pig\nrule1(something) = not needs_support(something, rabbit) => not burn(warehouse_of(pig))\n# Rule2: The wolverine unquestionably gives a magnifier to the starfish, in the case where the cockroach sings a song of victory for the wolverine\nrule2() = sing_song(cockroach, victory_song_for(wolverine)) => give(wolverine, magnifier, starfish)\n# Rule3: If at least one animal gives a magnifier to the starfish, then the lobster burns the warehouse that is in possession of the pig\nrule3(something) = give(something, magnifier, starfish) => burn(warehouse_of(pig))\n# Rule4: The cockroach sings a song of victory for the wolverine whenever at least one animal holds an equal number of points as the koala.\nrule4() = holds_equal_points(something, koala) => sing_song(cockroach, victory_song_for(wolverine))\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The mosquito holds the same number of points as the koala\nholds_equal_points(mosquito, koala) = True\n\n# Based on the game state and the rules and preferences, does the lobster burn the warehouse of the pig?\nquestion = burn(warehouse_of(pig))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the carp offers a job to the kiwi and the kangaroo does not give a magnifier to the kiwi, then the kiwi holds an equal number of points as the grasshopper\nRule2: If the swordfish has a name whose first letter is the same as the first letter of the halibut's name, then it steals five points from the koala\nRule3: If something attacks the green fields of the hippopotamus and also steals five points from the starfish, then it does not offer a job position to the caterpillar\nRule4: If the parrot has fewer than seven friends, then it gives a magnifying glass to the viperfish\nRule5: If the whale took a bike from the store, then it rolls the dice for the carp\nRule6: The carp offers a job to the kiwi whenever at least one animal steals five points from the koala\nRule7: If at least one animal offers a job position to the caterpillar, then the kiwi does not hold an equal number of points as the grasshopper\nRule8: If the viperfish has a name whose first letter is the same as the first letter of the whale's name, then it does not steal five points from the starfish\nRule9: If the tiger burns the warehouse of the viperfish, then the viperfish steals five points from the starfish\nRule10: If the swordfish has a card whose color starts with the letter \"b\", then it steals five points from the koala\nRule11: The viperfish offers a job to the caterpillar in the case where the parrot gives a magnifier to the viperfish\nRule12: If the whale has more than twelve friends, then it rolls the dice for the carp\nRule13: If the parrot does not have her keys, then it gives a magnifying glass to the viperfish\nRule14: If the viperfish has a card whose color appears in the flag of France, then it does not steal five points from the starfish\n\nRule1 is preferred over Rule7\nRule14 is preferred over Rule9\nRule3 is preferred over Rule11\nRule8 is preferred over Rule9\n\nThe current state of the game is as follows\nThe halibut is named Tango\nThe parrot has 13 friends and lost her keys\nThe swordfish has a card that is black in color, has a club chair, and is named Peddi\nThe swordfish has 2 energetic friends and 6 friends that are not energetic\nThe tiger burns the warehouse of the viperfish\nThe viperfish has a card that is indigo in color and is named Meadow\nThe whale has 9 friends and has some kale\nThe whale stole a bike from the store\n\nBased on the game state and the rules and preferences, does the kiwi hold the same number of points as the grasshopper?\nQuestion: Does the kiwi hold the same number of points as the grasshopper?",
        "idx": 370,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the carp offers a job to the kiwi and the kangaroo does not give a magnifier to the kiwi, then, inevitably, the kiwi holds an equal number of points as the grasshopper\nrule1() = offer_job(carp, kiwi) & not give_magnifier(kangaroo, kiwi) => points(kiwi) == points(grasshopper)\n# Rule2: Regarding the swordfish, if it has a name whose first letter is the same as the first letter of the halibut's name, then we can conclude that it steals five points from the koala\nrule2() = first_letter_of(name(swordfish)) == first_letter_of(name(halibut)) => steal_points(swordfish, 5, koala)\n# Rule3: Be careful when something attacks the green fields of the hippopotamus and also steals five points from the starfish because in this case it will surely not offer a job position to the caterpillar (this may or may not be problematic)\nrule3(something) = attack_green_fields(something, hippopotamus) & steal_points(something, 5, starfish) => not offer_job_position(something, caterpillar)\n# Rule4: If the parrot has fewer than seven friends, then the parrot gives a magnifying glass to the viperfish\nrule4() = friends(parrot) < 7 => give_magnifying_glass(parrot, viperfish)\n# Rule5: Regarding the whale, if it took a bike from the store, then we can conclude that it rolls the dice for the carp\nrule5() = took_bike_from_store(whale) => roll_dice(whale, carp)\n# Rule6: The carp offers a job to the kiwi whenever at least one animal steals five of the points of the koala\nrule6() = steal_points(something, 5, koala) => offer_job(carp, kiwi)\n# Rule7: If at least one animal offers a job position to the caterpillar, then the kiwi does not hold an equal number of points as the grasshopper\nrule7() = offer_job_position(something, caterpillar) => not points(kiwi) == points(grasshopper)\n# Rule8: If the viperfish has a name whose first letter is the same as the first letter of the whale's name, then the viperfish does not steal five of the points of the starfish\nrule8() = first_letter_of(name(viperfish)) == first_letter_of(name(whale)) => not steal_points(viperfish, 5, starfish)\n# Rule9: If the tiger burns the warehouse of the viperfish, then the viperfish steals five of the points of the starfish\nrule9() = burn_warehouse(tiger, viperfish) => steal_points(viperfish, 5, starfish)\n# Rule10: Regarding the swordfish, if it has a card whose color starts with the letter \"b\", then we can conclude that it steals five of the points of the koala\nrule10() = color_starts_with(card(swordfish), \"b\") => steal_points(swordfish, 5, koala)\n# Rule11: The viperfish unquestionably offers a job to the caterpillar, in the case where the parrot gives a magnifier to the viperfish\nrule11() = give_magnifier(parrot, viperfish) => offer_job(viperfish, caterpillar)\n# Rule12: Regarding the whale, if it has more than twelve friends, then we can conclude that it rolls the dice for the carp\nrule12() = friends(whale) > 12 => roll_dice(whale, carp)\n# Rule13: Regarding the parrot, if it does not have her keys, then we can conclude that it gives a magnifier to the viperfish\nrule13() = not has_keys(parrot) => give_magnifier(parrot, viperfish)\n# Rule14: If the viperfish has a card whose color appears in the flag of France, then the viperfish does not steal five points from the starfish.\nrule14() = color_in_flag_of_france(card(viperfish)) => not steal_points(viperfish, 5, starfish)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule14 is preferred over Rule9\norder(rule14) > order(rule9) = True\n# Rule3 is preferred over Rule11\norder(rule3) > order(rule11) = True\n# Rule8 is preferred over Rule9\norder(rule8) > order(rule9) = True\n\n# The current state of the game is as follows\n# The halibut is named Tango\nname(halibut, Tango) = True\n# The parrot has 13 friends, and lost her keys\nfriends(parrot) = 13\nlost_keys(parrot) = True\n# The swordfish has a card that is black in color, has a club chair, and is named Peddi\nhas(swordfish, card_with(black_color)) = True\nhas(swordfish, club_chair) = True\nname(swordfish, Peddi) = True\n# The swordfish has two friends that are energetic and 6 friends that are not\nfriends(swordfish, energetic) = 2\nfriends(swordfish, not_energetic) = 6\n# The tiger burns the warehouse of the viperfish\nburn_warehouse(tiger, viperfish) = True\n# The viperfish has a card that is indigo in color, and is named Meadow\nhas(viperfish, card_with(indigo_color)) = True\nname(viperfish, Meadow) = True\n# The whale has 9 friends, and has some kale\nfriends(whale) = 9\nhas(whale, kale) = True\n# The whale stole a bike from the store\nstole_bike_from_store(whale) = True\n\n# Based on the game state and the rules and preferences, does the kiwi hold the same number of points as the grasshopper?\nquestion = points(kiwi) == points(grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the puffin starts with the same letter as the name of the sun bear, then the puffin does not learn elementary resource management from the lion\nRule2: If an animal does not learn the basics of resource management from the lion, then it will attack the green fields owned by the sun bear\nRule3: If an animal attacks the green fields of the sun bear, then it proceeds to the spot right after the spot of the black bear\n\nThe current state of the game is as follows\nThe puffin is named Beauty\nThe sun bear is named Lucy\n\nBased on the game state and the rules and preferences, does the puffin proceed to the spot right after the black bear?\nQuestion: Does the puffin proceed to the spot right after the black bear?",
        "idx": 371,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the puffin has a name whose first letter is the same as the first letter of the sun bear's name, then the puffin does not learn elementary resource management from the lion\nrule1() = first_letter_of(name(puffin)) == first_letter_of(name(sun_bear)) => not learn_elementary_resource_management(puffin, lion)\n# Rule2: If you are positive that one of the animals does not learn the basics of resource management from the lion, you can be certain that it will attack the green fields whose owner is the sun bear without a doubt\nrule2(something) = not learn_basics_of_resource_management(something, lion) => attack_green_fields(something, owner(sun_bear))\n# Rule3: If something attacks the green fields of the sun bear, then it proceeds to the spot that is right after the spot of the black bear, too.\nrule3(something) = attack_green_fields(something, owner(sun_bear)) => proceed(something, spot_right_after(spot_of(black_bear)))\n\n# The current state of the game is as follows\n# The puffin is named Beauty\nname(puffin, Beauty) = True\n# The sun bear is named Lucy\nname(sun_bear, Lucy) = True\n\n# Based on the game state and the rules and preferences, does the puffin proceed to the spot right after the black bear?\nquestion = proceed(puffin, spot_right_after(spot_of(black_bear)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something holds the same number of points as the turtle, then it raises a flag of peace for the bat, too\nRule2: If one of the animals does not respect the turtle, then it will remove one of the pieces of the buffalo from the board\nRule3: The buffalo holds the same number of points as the turtle, in the case where the wolverine removes one of the pieces of the buffalo\n\nThe current state of the game is as follows\nThe blobfish burns the warehouse of the cockroach\nThe wolverine does not respect the turtle\n\nBased on the game state and the rules and preferences, does the buffalo raise a peace flag for the bat?\nQuestion: Does the buffalo raise a peace flag for the bat?",
        "idx": 372,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something holds the same number of points as the turtle, then it raises a flag of peace for the bat, too\nrule1(something) = points(something) == points(turtle) => raise_flag_of_peace(something, bat)\n# Rule2: If you are positive that one of the animals does not respect the turtle, you can be certain that it will remove from the board one of the pieces of the buffalo without a doubt\nrule2(something) = not respects(something, turtle) => remove(something, piece_of(buffalo))\n# Rule3: The buffalo unquestionably holds the same number of points as the turtle, in the case where the wolverine removes from the board one of the pieces of the buffalo.\nrule3() = remove(wolverine, piece_of(buffalo)) => points(buffalo) == points(turtle)\n\n# The current state of the game is as follows\n# The blobfish burns the warehouse of the cockroach\nburn(blobfish, warehouse_of(cockroach)) = True\n# The wolverine does not respect the turtle\nrespects(wolverine, turtle) = False\n\n# Based on the game state and the rules and preferences, does the buffalo raise a peace flag for the bat?\nquestion = raise_flag_of_peace(buffalo, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals show all her cards to the parrot, you can be certain that it will also give a magnifying glass to the viperfish\nRule2: If the lion has more than nine friends, then the lion shows her cards to the parrot\nRule3: If the lion gives a magnifier to the viperfish and the kudu eats the food of the viperfish, then the viperfish is not going to learn the basics of resource management from the tiger\nRule4: If the kudu has a card whose color appears in the flag of the Netherlands, then the kudu gives a magnifying glass to the carp\nRule5: If something gives a magnifier to the carp, then it eats the food that belongs to the viperfish\n\nThe current state of the game is as follows\nThe kudu has a card that is blue in color\nThe lion has 13 friends\n\nBased on the game state and the rules and preferences, does the viperfish learn the basics of resource management from the tiger?\nQuestion: Does the viperfish learn the basics of resource management from the tiger?",
        "idx": 373,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals shows all her cards to the parrot, you can be certain that it will also give a magnifying glass to the viperfish\nrule1() = show_all_cards(someone, parrot) => give_magnifying_glass(someone, viperfish)\n# Rule2: If the lion has more than nine friends, then the lion shows her cards (all of them) to the parrot\nrule2() = friends(lion) > 9 => show_all_cards(lion, parrot)\n# Rule3: For the viperfish, if the belief is that the lion gives a magnifier to the viperfish and the kudu eats the food of the viperfish, then you can add that \"the viperfish is not going to learn the basics of resource management from the tiger\" to your conclusions\nrule3() = belief(lion_gives_magnifier_to(viperfish)) & kudu_eats_food_of(viperfish) => not learn_basics_of_resource_management(viperfish, tiger)\n# Rule4: Regarding the kudu, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it gives a magnifying glass to the carp\nrule4() = has(kudu, card_with(color_in_flag_of_Netherlands)) => give_magnifying_glass(kudu, carp)\n# Rule5: If something gives a magnifier to the carp, then it eats the food that belongs to the viperfish, too.\nrule5(something) = give_magnifying_glass(something, carp) => eats_food_of(something, viperfish)\n\n# The current state of the game is as follows\n# The kudu has a card that is blue in color\nhas(kudu, card_with(blue_color)) = True\n# The lion has 13 friends\nfriends(lion) = 13\n\n# Based on the game state and the rules and preferences, does the viperfish learn the basics of resource management from the tiger?\nquestion = learn_basics_of_resource_management(viperfish, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal learns the basics of resource management from the kudu, then the sheep does not respect the whale\nRule2: If the carp burns the warehouse of the whale, then the whale does not prepare armor for the blobfish\nRule3: The whale shows all her cards to the tilapia, in the case where the phoenix eats the food of the whale\nRule4: If you saw one of the animals winks at the amberjack, then it will also eat the food of the pig\nRule5: If the tiger is a fan of Chris Ronaldo, then the tiger gives a magnifier to the whale\nRule6: If the whale has something to sit on, then the whale does not eat the food of the pig\nRule7: If you saw one of the animals eats the food that belongs to the pig, then it will also prepare armor for the blobfish\nRule8: If something shows all her cards to the tilapia and also rolls the dice for the gecko, then it will burn the warehouse of the canary\nRule9: The canary proceeds to the spot right after the spot of the cat, in the case where the whale burns the warehouse of the canary\nRule10: If the whale has a high salary, then the whale does not roll the dice for the gecko\nRule11: If something does not sing a victory song for the jellyfish, then it rolls the dice for the gecko\n\nRule10 is preferred over Rule11\nRule2 is preferred over Rule7\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cricket holds the same number of points as the tiger\nThe penguin learns the basics of resource management from the kudu\nThe phoenix knows the defensive plans of the whale\nThe tiger supports Chris Ronaldo\nThe whale holds the same number of points as the octopus and winks at the amberjack\nThe whale does not sing a victory song for the jellyfish\n\nBased on the game state and the rules and preferences, does the canary proceed to the spot right after the cat?\nQuestion: Does the canary proceed to the spot right after the cat?",
        "idx": 374,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal learns the basics of resource management from the kudu, then the sheep does not respect the whale\nrule1() = learns_basics_of_resource_management(something, kudu) => not respects(sheep, whale)\n# Rule2: If the carp burns the warehouse of the whale, then the whale is not going to prepare armor for the blobfish\nrule2() = burn(warehouse_of(whale), carp) => not prepare_armor(whale, blobfish)\n# Rule3: The whale unquestionably shows her cards (all of them) to the tilapia, in the case where the phoenix eats the food of the whale\nrule3() = eat_food(phoenix, whale) => show_cards(whale, tilapia)\n# Rule4: If you are positive that you saw one of the animals winks at the amberjack, you can be certain that it will also eat the food of the pig\nrule4(something) = winks_at(something, amberjack) => eat_food(something, pig)\n# Rule5: If the tiger is a fan of Chris Ronaldo, then the tiger gives a magnifier to the whale\nrule5() = fan_of(tiger, Chris_Ronaldo) => give(tiger, magnifier, whale)\n# Rule6: If the whale has something to sit on, then the whale does not eat the food of the pig\nrule6() = has(whale, something_to_sit_on) => not eat_food(whale, pig)\n# Rule7: If you are positive that you saw one of the animals eats the food that belongs to the pig, you can be certain that it will also prepare armor for the blobfish\nrule7(something) = eat_food(something, pig) => prepare_armor(something, blobfish)\n# Rule8: Be careful when something shows her cards (all of them) to the tilapia and also rolls the dice for the gecko because in this case it will surely burn the warehouse of the canary (this may or may not be problematic)\nrule8(something) = show_cards(something, tilapia) & roll_dice(something, gecko) => burn(warehouse_of(canary), something)\n# Rule9: The canary unquestionably proceeds to the spot that is right after the spot of the cat, in the case where the whale burns the warehouse of the canary\nrule9() = burn(warehouse_of(canary), whale) => proceed(canary, spot_right_after(spot_of(cat)))\n# Rule10: If the whale has a high salary, then the whale does not roll the dice for the gecko\nrule10() = has_high_salary(whale) => not roll_dice(whale, gecko)\n# Rule11: If something does not sing a victory song for the jellyfish, then it rolls the dice for the gecko.\nrule11(something) = not sing_song(something, victory_song_for(jellyfish)) => roll_dice(something, gecko)\n# Rule10 is preferred over Rule11\norder(rule10) > order(rule11) = True\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cricket holds the same number of points as the tiger\npoints(cricket) == points(tiger) = True\n# The penguin learns the basics of resource management from the kudu\nlearns_basics_of_resource_management(penguin, kudu) = True\n# The phoenix knows the defensive plans of the whale\nknows(defensive_plans_of(whale), phoenix) = True\n# The tiger supports Chris Ronaldo\nfan_of(tiger, Chris_Ronaldo) = True\n# The whale holds the same number of points as the octopus, and winks at the amberjack\npoints(whale) == points(octopus) = True\nwinks_at(whale, amberjack) = True\n# The whale does not sing a victory song for the jellyfish\nnot sing_song(whale, victory_song_for(jellyfish)) = True\n\n# Based on the game state and the rules and preferences, does the canary proceed to the spot right after the cat?\nquestion = proceed(canary, spot_right_after(spot_of(cat)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The panther raises a peace flag for the gecko, in the case where the mosquito does not need the support of the panther\nRule2: If at least one animal holds the same number of points as the viperfish, then the panther does not learn elementary resource management from the dog\nRule3: If the black bear does not raise a peace flag for the mosquito however the viperfish learns elementary resource management from the mosquito, then the mosquito will not need support from the panther\nRule4: The turtle knocks down the fortress that belongs to the panther, in the case where the cockroach gives a magnifier to the turtle\nRule5: If the turtle knocks down the fortress of the panther, then the panther prepares armor for the sea bass\nRule6: If something raises a peace flag for the gecko and prepares armor for the sea bass, then it learns elementary resource management from the dog\n\nRule2 is preferred over Rule6\n\nThe current state of the game is as follows\nThe cockroach gives a magnifier to the turtle\nThe mosquito steals five points from the kudu\nThe viperfish learns elementary resource management from the mosquito\nThe black bear does not raise a peace flag for the mosquito\n\nBased on the game state and the rules and preferences, does the panther learn elementary resource management from the dog?\nQuestion: Does the panther learn elementary resource management from the dog?",
        "idx": 375,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The panther unquestionably raises a peace flag for the gecko, in the case where the mosquito does not need the support of the panther\nrule1() = not needs_support(mosquito, panther) => raise_flag_of_peace(panther, gecko)\n# Rule2: If at least one animal holds the same number of points as the viperfish, then the panther does not learn elementary resource management from the dog\nrule2() = holds_same_points_as(something, viperfish) => not learn_elementary_resource_management(panther, dog)\n# Rule3: If the black bear does not raise a flag of peace for the mosquito however the viperfish learns elementary resource management from the mosquito, then the mosquito will not need support from the panther\nrule3() = not raise_flag_of_peace(black_bear, mosquito) & learn_elementary_resource_management(viperfish, mosquito) => not needs_support(mosquito, panther)\n# Rule4: The turtle unquestionably knocks down the fortress that belongs to the panther, in the case where the cockroach gives a magnifier to the turtle\nrule4() = give_magnifier(cockroach, turtle) => knock_down_fortress(turtle, panther)\n# Rule5: If the turtle knocks down the fortress of the panther, then the panther prepares armor for the sea bass\nrule5() = knock_down_fortress(turtle, panther) => prepare_armor(panther, sea_bass)\n# Rule6: If you see that something raises a peace flag for the gecko and prepares armor for the sea bass, what can you certainly conclude? You can conclude that it also learns elementary resource management from the dog.\nrule6() = raise_flag_of_peace(something, gecko) & prepare_armor(something, sea_bass) => learn_elementary_resource_management(something, dog)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n\n# The current state of the game is as follows\n# The cockroach gives a magnifier to the turtle\ngive_magnifier(cockroach, turtle) = True\n# The mosquito steals five points from the kudu\nsteal_points(mosquito, kudu, 5) = True\n# The viperfish learns the basics of resource management from the mosquito\nlearn_elementary_resource_management(viperfish, mosquito) = True\n# The black bear does not raise a peace flag for the mosquito\nnot raise_flag_of_peace(black_bear, mosquito) = True\n\n# Based on the game state and the rules and preferences, does the panther learn the basics of resource management from the dog?\nquestion = learn_elementary_resource_management(panther, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals respects the phoenix, you can be certain that it will not steal five of the points of the moose\nRule2: If the hummingbird does not hold an equal number of points as the blobfish however the elephant steals five points from the blobfish, then the blobfish will not owe money to the koala\nRule3: If the blobfish does not owe money to the koala, then the koala respects the phoenix\nRule4: If at least one animal becomes an enemy of the whale, then the blobfish owes money to the koala.\n\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe elephant steals five points from the blobfish\nThe hummingbird does not hold the same number of points as the blobfish\n\nBased on the game state and the rules and preferences, does the koala steal five points from the moose?\nQuestion: Does the koala steal five points from the moose?",
        "idx": 376,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals respects the phoenix, you can be certain that it will not steal five of the points of the moose\nrule1() = respects(something, phoenix) => not steal_points(something, moose, 5)\n# Rule2: If the hummingbird does not hold an equal number of points as the blobfish however the elephant steals five points from the blobfish, then the blobfish will not owe $$$ to the koala\nrule2() = not equal_points(hummingbird, blobfish) & steal_points(elephant, blobfish, 5) => not owes_money_to(blobfish, koala)\n# Rule3: If the blobfish does not owe $$$ to the koala, then the koala respects the phoenix\nrule3() = not owes_money_to(blobfish, koala) => respects(koala, phoenix)\n# Rule4: If at least one animal becomes an enemy of the whale, then the blobfish owes $$$ to the koala.\nrule4(something) = enemy(something, whale) => owes_money_to(blobfish, koala)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The elephant steals five points from the blobfish\nsteal_points(elephant, blobfish, 5) = True\n# The hummingbird does not hold the same number of points as the blobfish\nequal_points(hummingbird, blobfish) = False\n\n# Based on the game state and the rules and preferences, does the koala steal five points from the moose?\nquestion = steal_points(koala, moose, 5)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the blobfish starts with the first letter of the name of the spider, then the blobfish removes one of the pieces of the buffalo\nRule2: If an animal does not steal five points from the pig, then it does not give a magnifier to the kangaroo\nRule3: If something owes money to the elephant, then it sings a song of victory for the canary\nRule4: If something burns the warehouse of the sun bear and holds the same number of points as the hare, then it gives a magnifying glass to the kangaroo\nRule5: If the blobfish does not remove one of the pieces of the buffalo and the salmon does not roll the dice for the buffalo, then the buffalo holds the same number of points as the hare\nRule6: If at least one animal sings a song of victory for the canary, then the buffalo burns the warehouse of the sun bear\nRule7: If the blobfish has a card with a color that appears in the flag of Belgium, then the blobfish removes one of the pieces of the buffalo\nRule8: If the viperfish eats the food of the salmon, then the salmon does not roll the dice for the buffalo\n\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe blobfish has a card with orange color\nThe blobfish is named Mojo\nThe meerkat has eleven friends\nThe meerkat owes money to the elephant\nThe moose is named Mojo\nThe salmon is named Milo\nThe spider is named Max\nThe viperfish eats the food of the salmon\n\nBased on the game state and the rules and preferences, does the buffalo give a magnifier to the kangaroo?\nQuestion: Does the buffalo give a magnifier to the kangaroo?",
        "idx": 377,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the blobfish has a name whose first letter is the same as the first letter of the spider's name, then the blobfish removes one of the pieces of the buffalo\nrule1() = first_letter_of(name(blobfish)) == first_letter_of(name(spider)) => remove(blobfish, piece_of(buffalo))\n# Rule2: If you are positive that one of the animals does not steal five of the points of the pig, you can be certain that it will not give a magnifier to the kangaroo\nrule2() = not steal_points(something, pig, 5) => not give_magnifier(something, kangaroo)\n# Rule3: If something owes $$$ to the elephant, then it sings a song of victory for the canary, too\nrule3(something) = owes_money_to(something, elephant) => sing_song(something, victory_song_for(canary))\n# Rule4: Be careful when something burns the warehouse that is in possession of the sun bear and also holds the same number of points as the hare because in this case it will surely give a magnifying glass to the kangaroo (this may or may not be problematic)\nrule4(something) = burn(warehouse_of(sun_bear), something) & points(something) == points(hare) => give_magnifying_glass(something, kangaroo)\n# Rule5: For the buffalo, if the belief is that the blobfish does not remove from the board one of the pieces of the buffalo and the salmon does not roll the dice for the buffalo, then you can add \"the buffalo holds the same number of points as the hare\" to your conclusions\nrule5() = not remove(blobfish, piece_of(buffalo)) & not roll_dice(salmon, buffalo) => points(buffalo) == points(hare)\n# Rule6: If at least one animal sings a song of victory for the canary, then the buffalo burns the warehouse that is in possession of the sun bear\nrule6() = sing_song(something, victory_song_for(canary)) => burn(warehouse_of(sun_bear), buffalo)\n# Rule7: If the blobfish has a card whose color appears in the flag of Belgium, then the blobfish removes from the board one of the pieces of the buffalo\nrule7() = has(blobfish, card_with(color_in_flag_of_belgium)) => remove(blobfish, piece_of(buffalo))\n# Rule8: The salmon does not roll the dice for the buffalo, in the case where the viperfish eats the food of the salmon.\nrule8() = eat_food(viperfish, salmon) => not roll_dice(salmon, buffalo)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The blobfish has a card that is orange in color, and is named Mojo\nhas(blobfish, card_with(orange_color)) = True\nname(blobfish, Mojo) = True\n# The meerkat has eleven friends\nfriends(meerkat) = 11\n# The meerkat owes money to the elephant\nowes_money_to(meerkat, elephant) = True\n# The moose is named Mojo\nname(moose, Mojo) = True\n# The salmon is named Milo\nname(salmon, Milo) = True\n# The spider is named Max\nname(spider, Max) = True\n# The viperfish eats the food of the salmon\neat_food(viperfish, salmon) = True\n\n# Based on the game state and the rules and preferences, does the buffalo give a magnifier to the kangaroo?\nquestion = give_magnifier(buffalo, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grizzly bear has a card with a primary color, then it rolls the dice for the kudu\nRule2: If the grizzly bear has a high salary, then it rolls the dice for the kudu\nRule3: If one of the animals does not burn the warehouse of the snail, then it proceeds to the spot right after the kudu\nRule4: If the kudu does not raise a peace flag for the starfish, then the starfish removes one of the pieces of the amberjack\nRule5: If the puffin does not proceed to the spot right after the kudu but the grizzly bear rolls the dice for the kudu, then the kudu does not raise a peace flag for the starfish\nRule6: If at least one animal gives a magnifying glass to the panda bear, then the hippopotamus knows the defense plan of the kudu\nRule7: If something needs the support of the carp and rolls the dice for the snail, then it does not proceed to the spot right after the kudu\nRule8: If at least one animal rolls the dice for the panther, then the starfish does not remove one of the pieces of the amberjack\nRule9: If the cat rolls the dice for the hippopotamus, then the hippopotamus does not know the defense plan of the kudu\n\nRule3 is preferred over Rule7\nRule6 is preferred over Rule9\nRule8 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cat rolls the dice for the hippopotamus\nThe grizzly bear has a well-paid job\nThe grizzly bear has a card that is white in color\nThe moose gives a magnifying glass to the panda bear\nThe puffin needs support from the carp and rolls the dice for the snail\n\nBased on the game state and the rules and preferences, does the starfish remove one of the pieces of the amberjack?\nQuestion: Does the starfish remove one of the pieces of the amberjack?",
        "idx": 378,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the grizzly bear, if it has a card with a primary color, then we can conclude that it rolls the dice for the kudu\nrule1() = has(grizzly_bear, card_with(primary_color)) => rolls_dice(grizzly_bear, kudu)\n# Rule2: Regarding the grizzly bear, if it has a high salary, then we can conclude that it rolls the dice for the kudu\nrule2() = has_high_salary(grizzly_bear) => rolls_dice(grizzly_bear, kudu)\n# Rule3: If you are positive that one of the animals does not burn the warehouse that is in possession of the snail, you can be certain that it will proceed to the spot right after the kudu without a doubt\nrule3(something) = not burn(warehouse_of(snail), something) => proceed(something, spot_right_after(spot_of(kudu)))\n# Rule4: If the kudu does not raise a peace flag for the starfish, then the starfish removes one of the pieces of the amberjack\nrule4() = not raise_flag_of_peace(kudu, starfish) => remove(starfish, piece_of(amberjack))\n# Rule5: For the kudu, if the belief is that the puffin is not going to proceed to the spot that is right after the spot of the kudu but the grizzly bear rolls the dice for the kudu, then you can add that \"the kudu is not going to raise a peace flag for the starfish\" to your conclusions\nrule5() = not proceed(puffin, spot_right_after(spot_of(kudu))) & rolls_dice(grizzly_bear, kudu) => not raise_flag_of_peace(kudu, starfish)\n# Rule6: The hippopotamus knows the defense plan of the kudu whenever at least one animal gives a magnifying glass to the panda bear\nrule6() = give_magnifying_glass(something, panda_bear) => knows(defense_plan_of(kudu), hippopotamus)\n# Rule7: If you see that something needs the support of the carp and rolls the dice for the snail, what can you certainly conclude? You can conclude that it does not proceed to the spot right after the kudu\nrule7(something) = needs_support(something, carp) & rolls_dice(something, snail) => not proceed(something, spot_right_after(spot_of(kudu)))\n# Rule8: If at least one animal rolls the dice for the panther, then the starfish does not remove from the board one of the pieces of the amberjack\nrule8() = rolls_dice(something, panther) => not remove(starfish, piece_of(amberjack))\n# Rule9: The hippopotamus does not know the defense plan of the kudu, in the case where the cat rolls the dice for the hippopotamus.\nrule9() = rolls_dice(cat, hippopotamus) => not knows(defense_plan_of(kudu), hippopotamus)\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n# Rule8 is preferred over Rule4\norder(rule8) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cat rolls the dice for the hippopotamus\nrolls_dice(cat, hippopotamus) = True\n# The grizzly bear got a well-paid job\nhas_high_salary(grizzly_bear) = True\n# The grizzly bear has a card that is white in color\nhas(grizzly_bear, card_with(white_color)) = True\n# The moose gives a magnifier to the panda bear\ngive_magnifying_glass(moose, panda_bear) = True\n# The puffin needs support from the carp, and rolls the dice for the snail\nneeds_support(puffin, carp) = True\nrolls_dice(puffin, snail) = True\n\n# Based on the game state and the rules and preferences, does the starfish remove from the board one of the pieces of the amberjack?\nquestion = remove(starfish, piece_of(amberjack))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squirrel created a time machine, then it rolls the dice for the hummingbird\nRule2: If one of the animals does not give a magnifying glass to the catfish, then it does not roll the dice for the meerkat\nRule3: If the raven proceeds to the spot right after the spot of the carp, then the carp holds the same number of points as the cat\nRule4: If the mosquito owns a luxury aircraft, then it does not wink at the parrot\nRule5: The mosquito winks at the parrot whenever at least one animal sings a song of victory for the pig\nRule6: If the swordfish raises a flag of peace for the carp and the hippopotamus does not burn the warehouse of the carp, then the carp will never give a magnifying glass to the catfish\nRule7: The carp knocks down the fortress of the polar bear whenever at least one animal rolls the dice for the hummingbird\nRule8: If the mosquito has more than ten friends, then it does not wink at the parrot\nRule9: If the raven has more than 16 friends, then it proceeds to the spot right after the carp\nRule10: If one of the animals holds the same number of points as the cat, then it does not need the support of the crocodile\nRule11: If the raven does not have her keys, then it proceeds to the spot right after the carp\n\nRule4 is preferred over Rule5\nRule8 is preferred over Rule5\n\nThe current state of the game is as follows\nThe carp has one friend\nThe donkey sings a victory song for the pig\nThe halibut is named Chickpea\nThe mosquito dreamed of a luxury aircraft\nThe raven has four bald friends and five non-bald friends\nThe raven lost her keys\nThe squirrel has a basket and is named Cinnamon\nThe squirrel invented a time machine\nThe swordfish raises a peace flag for the carp\nThe hippopotamus does not burn the warehouse of the carp\n\nBased on the game state and the rules and preferences, does the carp need support from the crocodile?\nQuestion: Does the carp need support from the crocodile?",
        "idx": 379,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the squirrel, if it created a time machine, then we can conclude that it rolls the dice for the hummingbird\nrule1() = created_time_machine(squirrel) => roll_dice(squirrel, hummingbird)\n# Rule2: If you are positive that one of the animals does not give a magnifying glass to the catfish, you can be certain that it will not roll the dice for the meerkat\nrule2() = not give_magnifying_glass(something, catfish) => not roll_dice(something, meerkat)\n# Rule3: If the raven proceeds to the spot that is right after the spot of the carp, then the carp holds the same number of points as the cat\nrule3() = proceed(raven, spot_right_after(spot_of(carp))) => points(carp) == points(cat)\n# Rule4: If the mosquito owns a luxury aircraft, then the mosquito does not wink at the parrot\nrule4() = owns(mosquito, luxury_aircraft) => not wink(mosquito, parrot)\n# Rule5: The mosquito winks at the parrot whenever at least one animal sings a song of victory for the pig\nrule5() = sing_song(something, victory_song_for(pig)) => wink(mosquito, parrot)\n# Rule6: If the swordfish raises a flag of peace for the carp and the hippopotamus does not burn the warehouse that is in possession of the carp, then the carp will never give a magnifying glass to the catfish\nrule6() = raise_flag_of_peace(swordfish, carp) & not burn(warehouse_of(carp), hippopotamus) => never_give_magnifying_glass(carp, catfish)\n# Rule7: The carp knocks down the fortress of the polar bear whenever at least one animal rolls the dice for the hummingbird\nrule7() = roll_dice(something, hummingbird) => knock_down(fortress_of(polar_bear), carp)\n# Rule8: Regarding the mosquito, if it has more than ten friends, then we can conclude that it does not wink at the parrot\nrule8() = friends(mosquito) > 10 => not wink(mosquito, parrot)\n# Rule9: Regarding the raven, if it has more than 16 friends, then we can conclude that it proceeds to the spot right after the carp\nrule9() = friends(raven) > 16 => proceed(raven, spot_right_after(spot_of(carp)))\n# Rule10: If you are positive that you saw one of the animals holds the same number of points as the cat, you can be certain that it will not need the support of the crocodile\nrule10(something) = points(something) == points(cat) => not need_support(something, crocodile)\n# Rule11: Regarding the raven, if it does not have her keys, then we can conclude that it proceeds to the spot right after the carp.\nrule11() = not have_keys(raven) => proceed(raven, spot_right_after(spot_of(carp)))\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n\n# The current state of the game is as follows\n# The carp has one friend\nfriends(carp) = 1\n# The donkey sings a victory song for the pig\nsing_song(donkey, victory_song_for(pig)) = True\n# The halibut is named Chickpea\nname(halibut, Chickpea) = True\n# The mosquito dreamed of a luxury aircraft\ndreamed(mosquito, luxury_aircraft) = True\n# The raven has four friends that are bald and five friends that are not\nfriends(raven, bald) = 4\nfriends(raven, not_bald) = 5\n# The raven lost her keys\nlost_keys(raven) = True\n# The squirrel has a basket, and is named Cinnamon\nhas(squirrel, basket) = True\nname(squirrel, Cinnamon) = True\n# The squirrel invented a time machine\ninvented_time_machine(squirrel) = True\n# The swordfish raises a peace flag for the carp\nraise_flag_of_peace(swordfish, carp) = True\n# The hippopotamus does not burn the warehouse of the carp\nnot burn(warehouse_of(carp), hippopotamus) = True\n\n# Based on the game state and the rules and preferences, does the carp need support from the crocodile?\nquestion = need_support(carp, crocodile)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the canary raises a flag of peace for the whale, then the whale shows her cards (all of them) to the gecko\nRule2: If the gecko knocks down the fortress that belongs to the canary, then the canary does not raise a flag of peace for the whale\nRule3: If the canary has a card with a primary color, then the canary raises a flag of peace for the whale\nRule4: If the hummingbird has something to carry apples and oranges, then it does not proceed to the spot right after the whale\nRule5: If the hummingbird does not proceed to the spot right after the whale and the sheep prepares armor for the whale, then the whale becomes an enemy of the kiwi\nRule6: If the canary has a sharp object, then the canary raises a flag of peace for the whale\nRule7: If an animal does not become an enemy of the raven, then it prepares armor for the whale\nRule8: If an animal shows her cards (all of them) to the gecko and becomes an enemy of the kiwi, then it holds the same number of points as the grasshopper\nRule9: If an animal does not roll the dice for the penguin, then it does not hold an equal number of points as the grasshopper\nRule10: If an animal removes one of the pieces of the mosquito from the board, then it proceeds to the spot right after the whale\nRule11: If the goldfish does not need the support of the whale, then the whale does not show her cards (all of them) to the gecko\nRule12: If the tiger respects the whale, then the whale does not become an enemy of the kiwi\n\nRule10 is preferred over Rule4\nRule11 is preferred over Rule1\nRule12 is preferred over Rule5\nRule2 is preferred over Rule3\nRule2 is preferred over Rule6\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe canary has a basket\nThe canary has a card that is black in color\nThe hummingbird has a basket\nThe sheep does not become an enemy of the raven\n\nBased on the game state and the rules and preferences, does the whale hold the same number of points as the grasshopper?\nQuestion: Does the whale hold the same number of points as the grasshopper?",
        "idx": 380,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the canary raises a flag of peace for the whale, then the whale shows her cards (all of them) to the gecko\nrule1() = raise_flag_of_peace(canary, whale) => show_cards(whale, gecko)\n# Rule2: The canary does not raise a peace flag for the whale, in the case where the gecko knocks down the fortress that belongs to the canary\nrule2() = knock_down(gecko, fortress_of(canary)) => not raise_flag_of_peace(canary, whale)\n# Rule3: If the canary has a card with a primary color, then the canary raises a peace flag for the whale\nrule3() = has(canary, card_with(primary_color)) => raise_flag_of_peace(canary, whale)\n# Rule4: Regarding the hummingbird, if it has something to carry apples and oranges, then we can conclude that it does not proceed to the spot that is right after the spot of the whale\nrule4() = has(hummingbird, carry_apples_and_oranges) => not proceed(hummingbird, spot_right_after(spot_of(whale)))\n# Rule5: For the whale, if the belief is that the hummingbird does not proceed to the spot right after the whale but the sheep prepares armor for the whale, then you can add \"the whale becomes an enemy of the kiwi\" to your conclusions\nrule5() = not proceed(hummingbird, spot_right_after(spot_of(whale))) & prepare_armor(sheep, whale) => enemy(whale, kiwi)\n# Rule6: If the canary has a sharp object, then the canary raises a peace flag for the whale\nrule6() = has(canary, sharp_object) => raise_flag_of_peace(canary, whale)\n# Rule7: If you are positive that one of the animals does not become an enemy of the raven, you can be certain that it will prepare armor for the whale without a doubt\nrule7(something) = not enemy(something, raven) => prepare_armor(something, whale)\n# Rule8: If you see that something shows her cards (all of them) to the gecko and becomes an enemy of the kiwi, what can you certainly conclude? You can conclude that it also holds the same number of points as the grasshopper\nrule8() = show_cards(something, gecko) & enemy(something, kiwi) => points(something) == points(grasshopper)\n# Rule9: If something does not roll the dice for the penguin, then it does not hold an equal number of points as the grasshopper\nrule9(something) = not roll_dice(something, penguin) => not equal_points(something, grasshopper)\n# Rule10: If something removes from the board one of the pieces of the mosquito, then it proceeds to the spot right after the whale, too\nrule10() = remove(something, piece_of(mosquito)) => proceed(something, spot_right_after(spot_of(whale)))\n# Rule11: The whale will not show her cards (all of them) to the gecko, in the case where the goldfish does not need the support of the whale\nrule11() = not needs_support(goldfish, whale) => not show_cards(whale, gecko)\n# Rule12: If the tiger respects the whale, then the whale is not going to become an enemy of the kiwi.\nrule12() = respects(tiger, whale) => not enemy(whale, kiwi)\n# Rule10 is preferred over Rule4\norder(rule10) > order(rule4) = True\n# Rule11 is preferred over Rule1\norder(rule11) > order(rule1) = True\n# Rule12 is preferred over Rule5\norder(rule12) > order(rule5) = True\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The canary has a basket\nhas(canary, basket) = True\n# The canary has a card that is black in color\nhas(canary, card_with(black_color)) = True\n# The hummingbird has a basket\nhas(hummingbird, basket) = True\n# The sheep does not become an enemy of the raven\nnot enemy(sheep, raven) = True\n\n# Based on the game state and the rules and preferences, does the whale hold the same number of points as the grasshopper?\nquestion = equal_points(whale, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the swordfish eats the food that belongs to the cricket, then the cricket respects the kiwi\nRule2: If the name of the caterpillar starts with the same letter as the name of the amberjack, then the caterpillar needs the support of the swordfish\nRule3: The swordfish unquestionably eats the food of the cricket, in the case where the caterpillar needs the support of the swordfish.\n\nThe current state of the game is as follows\nThe amberjack is named Tango\nThe caterpillar is named Tarzan\nThe caterpillar sings a victory song for the phoenix\n\nBased on the game state and the rules and preferences, does the cricket respect the kiwi?\nQuestion: Does the cricket respect the kiwi?",
        "idx": 381,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the swordfish eats the food that belongs to the cricket, then the cricket respects the kiwi\nrule1() = eat_food(swordfish, food_of(cricket)) => respects(cricket, kiwi)\n# Rule2: Regarding the caterpillar, if it has a name whose first letter is the same as the first letter of the amberjack's name, then we can conclude that it needs the support of the swordfish\nrule2() = first_letter_of(name(caterpillar)) == first_letter_of(name(amberjack)) => needs_support(caterpillar, swordfish)\n# Rule3: The swordfish unquestionably eats the food of the cricket, in the case where the caterpillar needs the support of the swordfish.\nrule3() = needs_support(caterpillar, swordfish) => eat_food(swordfish, food_of(cricket))\n\n# The current state of the game is as follows\n# The amberjack is named Tango\nname(amberjack, Tango) = True\n# The caterpillar is named Tarzan\nname(caterpillar, Tarzan) = True\n# The caterpillar sings a victory song for the phoenix\nsing_song(caterpillar, victory_song_for(phoenix)) = True\n\n# Based on the game state and the rules and preferences, does the cricket respect the kiwi?\nquestion = respects(cricket, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not become an enemy of the elephant, then it raises a peace flag for the kangaroo\nRule2: If one of the animals does not show all her cards to the starfish, then she will eat the food that belongs to the kangaroo\nRule3: If one of the animals becomes an enemy of the swordfish, then she will raise a peace flag for the kangaroo\nRule4: If one of the animals steals five points from the hummingbird, then she will learn elementary resource management from the grasshopper\nRule5: If one of the animals does not respect the hippopotamus, then she will not respect the mosquito\nRule6: If the kangaroo has more than six friends, then she will steal five points from the hummingbird\nRule7: The ferret does not eat the food that belongs to the kangaroo, in the case where the parrot winks at the ferret\nRule8: If the ferret eats the food of the kangaroo and the wolverine raises a peace flag for the kangaroo, then the kangaroo will not respect the hippopotamus\nRule9: The kangaroo respects the hippopotamus, in the case where the panther respects the kangaroo\nRule10: The kangaroo offers a job position to the penguin, in the case where the lobster raises a peace flag for the kangaroo\n\nRule7 is preferred over Rule2\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe kangaroo has 16 friends\nThe lobster becomes an enemy of the swordfish\nThe tilapia owes money to the squirrel\nThe ferret does not show all her cards to the starfish\nThe wolverine does not become an enemy of the elephant\n\nBased on the game state and the rules and preferences, does the kangaroo respect the mosquito?\nQuestion: Does the kangaroo respect the mosquito?",
        "idx": 382,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not become an enemy of the elephant, then it raises a peace flag for the kangaroo\nrule1() = not enemy(something, elephant) => raise_flag_of_peace(something, kangaroo)\n# Rule2: If you are positive that one of the animals does not show her cards (all of them) to the starfish, you can be certain that it will eat the food that belongs to the kangaroo without a doubt\nrule2() = not show_cards(something, starfish) => eat_food(something, food_of(kangaroo))\n# Rule3: If you are positive that you saw one of the animals becomes an enemy of the swordfish, you can be certain that it will also raise a flag of peace for the kangaroo\nrule3() = enemy(something, swordfish) => raise_flag_of_peace(something, kangaroo)\n# Rule4: If you are positive that you saw one of the animals steals five of the points of the hummingbird, you can be certain that it will also learn elementary resource management from the grasshopper\nrule4() = steal_points(something, 5, hummingbird) => learn(something, elementary_resource_management_from(grasshopper))\n# Rule5: If you are positive that one of the animals does not respect the hippopotamus, you can be certain that it will not respect the mosquito\nrule5() = not respect(something, hippopotamus) => not respect(something, mosquito)\n# Rule6: Regarding the kangaroo, if it has more than six friends, then we can conclude that it steals five of the points of the hummingbird\nrule6() = friends(kangaroo) > 6 => steal_points(kangaroo, 5, hummingbird)\n# Rule7: The ferret does not eat the food that belongs to the kangaroo, in the case where the parrot winks at the ferret\nrule7() = wink(parrot, ferret) => not eat_food(ferret, food_of(kangaroo))\n# Rule8: For the kangaroo, if the belief is that the ferret eats the food of the kangaroo and the wolverine raises a flag of peace for the kangaroo, then you can add that \"the kangaroo is not going to respect the hippopotamus\" to your conclusions\nrule8() = eat_food(ferret, food_of(kangaroo)) & raise_flag_of_peace(wolverine, kangaroo) => not respect(kangaroo, hippopotamus)\n# Rule9: The kangaroo unquestionably respects the hippopotamus, in the case where the panther respects the kangaroo\nrule9() = respect(panther, kangaroo) => respect(kangaroo, hippopotamus)\n# Rule10: The kangaroo unquestionably offers a job position to the penguin, in the case where the lobster raises a peace flag for the kangaroo.\nrule10() = raise_flag_of_peace(lobster, kangaroo) => offer_job_position(kangaroo, penguin)\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The kangaroo has 16 friends\nfriends(kangaroo) = 16\n# The lobster becomes an enemy of the swordfish\nenemy(lobster, swordfish) = True\n# The tilapia owes money to the squirrel\nowes_money_to(tilapia, squirrel) = True\n# The ferret does not show all her cards to the starfish\nnot show_cards(ferret, starfish) = True\n# The wolverine does not become an enemy of the elephant\nnot enemy(wolverine, elephant) = True\n\n# Based on the game state and the rules and preferences, does the kangaroo respect the mosquito?\nquestion = respect(kangaroo, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something does not learn elementary resource management from the cheetah and also does not owe money to the tilapia because in this case it will surely wink at the octopus (this may or may not be problematic)\nRule2: The sheep knows the defensive plans of the tilapia whenever at least one animal shows all her cards to the squirrel\nRule3: The aardvark unquestionably burns the warehouse of the sheep, in the case where the kiwi does not raise a peace flag for the aardvark\nRule4: The canary does not become an enemy of the sheep, in the case where the donkey knows the defensive plans of the canary\nRule5: If the turtle needs support from the sheep, then the sheep sings a song of victory for the squirrel\nRule6: If something sings a song of victory for the squirrel, then it does not know the defensive plans of the tilapia\nRule7: If the jellyfish has a card whose color appears in the flag of France, then the jellyfish does not burn the warehouse of the rabbit\nRule8: If you are positive that you saw one of the animals eats the food of the hummingbird, you can be certain that it will also burn the warehouse that is in possession of the rabbit\nRule9: The sheep does not learn elementary resource management from the cheetah whenever at least one animal burns the warehouse that is in possession of the rabbit.\n\nRule2 is preferred over Rule6\nRule8 is preferred over Rule7\n\nThe current state of the game is as follows\nThe baboon holds the same number of points as the canary\nThe donkey knows the defensive plans of the canary\nThe jellyfish eats the food of the hummingbird\nThe turtle needs support from the sheep\nThe kiwi does not raise a peace flag for the aardvark\n\nBased on the game state and the rules and preferences, does the sheep wink at the octopus?\nQuestion: Does the sheep wink at the octopus?",
        "idx": 383,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not learn elementary resource management from the cheetah and also does not owe $$$ to the tilapia because in this case it will surely wink at the octopus (this may or may not be problematic)\nrule1(something) = not learn_elementary_resource_management_from(something, cheetah) & not owes_money_to(something, tilapia) => wink(something, octopus)\n# Rule2: The sheep knows the defensive plans of the tilapia whenever at least one animal shows all her cards to the squirrel\nrule2() = show_all_cards(animal) => knows(defensive_plans_of(tilapia), sheep)\n# Rule3: The aardvark unquestionably burns the warehouse of the sheep, in the case where the kiwi does not raise a peace flag for the aardvark\nrule3() = not raise_flag_of_peace(kiwi, aardvark) => burn(warehouse_of(sheep), aardvark)\n# Rule4: The canary does not become an enemy of the sheep, in the case where the donkey knows the defensive plans of the canary\nrule4() = knows(defensive_plans_of(canary), donkey) => not enemy(canary, sheep)\n# Rule5: If the turtle needs support from the sheep, then the sheep sings a song of victory for the squirrel\nrule5() = needs_support(turtle, sheep) => sing_song(sheep, victory_song_for(squirrel))\n# Rule6: If something sings a song of victory for the squirrel, then it does not know the defensive plans of the tilapia\nrule6(something) = sing_song(something, victory_song_for(squirrel)) => not knows(defensive_plans_of(tilapia), something)\n# Rule7: If the jellyfish has a card whose color appears in the flag of France, then the jellyfish does not burn the warehouse of the rabbit\nrule7() = has(jellyfish, card_with(color_in_flag_of_france)) => not burn(warehouse_of(rabbit), jellyfish)\n# Rule8: If you are positive that you saw one of the animals eats the food of the hummingbird, you can be certain that it will also burn the warehouse that is in possession of the rabbit\nrule8(animal) = eats_food_of(animal, hummingbird) => burn(warehouse_of(rabbit), animal)\n# Rule9: The sheep does not learn elementary resource management from the cheetah whenever at least one animal burns the warehouse that is in possession of the rabbit.\nrule9() = burn(warehouse_of(rabbit), animal) => not learn_elementary_resource_management_from(sheep, cheetah)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n\n# The current state of the game is as follows\n# The baboon holds the same number of points as the canary\npoints(baboon) == points(canary) = True\n# The donkey knows the defensive plans of the canary\nknows(defensive_plans_of(canary), donkey) = True\n# The jellyfish eats the food of the hummingbird\neats_food_of(jellyfish, hummingbird) = True\n# The turtle needs support from the sheep\nneeds_support(turtle, sheep) = True\n# The kiwi does not raise a peace flag for the aardvark\nnot raise_flag_of_peace(kiwi, aardvark) = True\n\n# Based on the game state and the rules and preferences, does the sheep wink at the octopus?\nquestion = wink(sheep, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The oscar proceeds to the spot right after the sea bass, in the case where the ferret does not hold the same number of points as the oscar\nRule2: If the ferret does not have her keys, then the ferret does not hold an equal number of points as the oscar\nRule3: If at least one animal proceeds to the spot that is right after the spot of the sea bass, then the caterpillar gives a magnifier to the amberjack\nRule4: If the gecko steals five points from the caterpillar, then the caterpillar does not give a magnifier to the amberjack\nRule5: If the ferret has a musical instrument, then the ferret does not hold an equal number of points as the oscar\n\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe ferret has a harmonica and is holding her keys\n\nBased on the game state and the rules and preferences, does the caterpillar give a magnifier to the amberjack?\nQuestion: Does the caterpillar give a magnifier to the amberjack?",
        "idx": 384,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The oscar unquestionably proceeds to the spot right after the sea bass, in the case where the ferret does not hold the same number of points as the oscar\nrule1() = not hold_same_number_of_points(ferret, oscar) => proceed(oscar, spot_right_after(spot_of(sea_bass)))\n# Rule2: If the ferret does not have her keys, then the ferret does not hold an equal number of points as the oscar\nrule2() = not has(ferret, keys) => not hold_same_number_of_points(ferret, oscar)\n# Rule3: If at least one animal proceeds to the spot that is right after the spot of the sea bass, then the caterpillar gives a magnifier to the amberjack\nrule3() = proceed(something, spot_right_after(spot_of(sea_bass))) => give_magnifier(caterpillar, amberjack)\n# Rule4: If the gecko steals five of the points of the caterpillar, then the caterpillar is not going to give a magnifier to the amberjack\nrule4() = steal_points(gecko, 5, caterpillar) => not give_magnifier(caterpillar, amberjack)\n# Rule5: Regarding the ferret, if it has a musical instrument, then we can conclude that it does not hold an equal number of points as the oscar.\nrule5() = has(ferret, musical_instrument) => not hold_same_number_of_points(ferret, oscar)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The ferret has a harmonica, and is holding her keys\nhas(ferret, harmonica) = True\nholding(ferret, keys) = True\n\n# Based on the game state and the rules and preferences, does the caterpillar give a magnifier to the amberjack?\nquestion = give_magnifier(caterpillar, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon does not respect the hare, then the hare does not raise a peace flag for the hippopotamus\nRule2: Be careful when something sings a song of victory for the spider but does not show all her cards to the meerkat because in this case it will, surely, raise a peace flag for the hippopotamus (this may or may not be problematic)\nRule3: If at least one animal needs the support of the caterpillar, then the hare sings a victory song for the spider\nRule4: If one of the animals does not respect the lobster, then it will not respect the hare\nRule5: If at least one animal knocks down the fortress of the meerkat, then the pig needs support from the caterpillar\nRule6: If the baboon has fewer than seven friends, then it does not respect the lobster\nRule7: If something does not become an enemy of the spider, then it does not respect the hare\nRule8: If the gecko is not going to respect the hare but the raven proceeds to the spot right after the hare, then the hare does not sing a victory song for the spider\nRule9: If the baboon has a name whose first letter is the same as the first letter of the kiwi's name, then it does not respect the lobster\n\nRule2 is preferred over Rule1\nRule8 is preferred over Rule3\n\nThe current state of the game is as follows\nThe baboon has a card with indigo color\nThe baboon has eleven friends\nThe baboon is named Bella\nThe grasshopper knocks down the fortress of the meerkat\nThe kiwi is named Beauty\nThe gecko does not become an enemy of the spider\n\nBased on the game state and the rules and preferences, does the hare raise a peace flag for the hippopotamus?\nQuestion: Does the hare raise a peace flag for the hippopotamus?",
        "idx": 385,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the baboon does not respect the hare, then the hare does not raise a peace flag for the hippopotamus\nrule1() = not respects(baboon, hare) => not raise_flag_of_peace(hare, hippopotamus)\n# Rule2: Be careful when something sings a song of victory for the spider but does not show all her cards to the meerkat because in this case it will, surely, raise a peace flag for the hippopotamus (this may or may not be problematic)\nrule2(something) = sing_song(something, victory_song_for(spider)) & not show_all_cards(something, meerkat) => raise_flag_of_peace(something, hippopotamus)\n# Rule3: If at least one animal needs the support of the caterpillar, then the hare sings a victory song for the spider\nrule3() = needs_support(something, caterpillar) => sing_song(hare, victory_song_for(spider))\n# Rule4: If you are positive that one of the animals does not respect the lobster, you can be certain that it will not respect the hare\nrule4(something) = not respects(something, lobster) => not respects(something, hare)\n# Rule5: If at least one animal knocks down the fortress that belongs to the meerkat, then the pig needs support from the caterpillar\nrule5() = knock_down(fortress_of(meerkat), something) => needs_support(pig, caterpillar)\n# Rule6: Regarding the baboon, if it has fewer than seven friends, then we can conclude that it does not respect the lobster\nrule6() = friends(baboon) < 7 => not respects(baboon, lobster)\n# Rule7: If something does not become an enemy of the spider, then it does not respect the hare\nrule7(something) = not enemy(something, spider) => not respects(something, hare)\n# Rule8: For the hare, if the belief is that the gecko is not going to respect the hare but the raven proceeds to the spot right after the hare, then you can add that \"the hare is not going to sing a victory song for the spider\" to your conclusions\nrule8() = not respects(gecko, hare) & proceed(raven, spot_right_after(spot_of(hare))) => not sing_song(hare, victory_song_for(spider))\n# Rule9: Regarding the baboon, if it has a name whose first letter is the same as the first letter of the kiwi's name, then we can conclude that it does not respect the lobster.\nrule9() = first_letter_of(name(baboon)) == first_letter_of(name(kiwi)) => not respects(baboon, lobster)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule8 is preferred over Rule3\norder(rule8) > order(rule3) = True\n\n# The current state of the game is as follows\n# The baboon has a card that is indigo in color\nhas(baboon, card_with(indigo_color)) = True\n# The baboon has eleven friends, and is named Bella\nfriends(baboon) = 11\nname(baboon, Bella) = True\n# The grasshopper knocks down the fortress of the meerkat\nknock_down(fortress_of(meerkat), grasshopper) = True\n# The kiwi is named Beauty\nname(kiwi, Beauty) = True\n# The gecko does not become an enemy of the spider\nnot enemy(gecko, spider) = True\n\n# Based on the game state and the rules and preferences, does the hare raise a peace flag for the hippopotamus?\nquestion = raise_flag_of_peace(hare, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cockroach attacks the green fields of the canary whenever at least one animal prepares armor for the leopard\nRule2: If the elephant has something to drink, then the elephant needs the support of the pig\nRule3: If the viperfish winks at the elephant, then the elephant does not prepare armor for the canary\nRule4: If the kudu has something to sit on, then it prepares armor for the leopard\nRule5: If something sings a song of victory for the swordfish, then it does not need the support of the pig\nRule6: If the elephant has a card with a color from the rainbow colors, then it needs support from the pig\nRule7: If the kudu has a name whose first letter is the same as the first letter of the sea bass's name, then it prepares armor for the leopard\nRule8: The elephant does not attack the green fields of the eagle, in the case where the dog respects the elephant\nRule9: If something does not attack the green fields of the eagle but needs support from the pig, then it prepares armor for the canary\nRule10: If the elephant prepares armor for the canary and the cockroach does not attack the green fields of the canary, then the canary prepares armor for the panther\n\nRule5 is preferred over Rule2\nRule5 is preferred over Rule6\nRule9 is preferred over Rule3\n\nThe current state of the game is as follows\nThe dog respects the elephant\nThe elephant has a card that is violet in color\nThe elephant has a piano\nThe kudu has a love seat sofa\nThe kudu is named Mojo\nThe sea bass is named Casper\nThe elephant does not offer a job to the dog\n\nBased on the game state and the rules and preferences, does the canary prepare armor for the panther?\nQuestion: Does the canary prepare armor for the panther?",
        "idx": 386,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cockroach attacks the green fields of the canary whenever at least one animal prepares armor for the leopard\nrule1() = prepare_armor(something, leopard) => attack_green_fields(cockroach, canary)\n# Rule2: If the elephant has something to drink, then the elephant needs the support of the pig\nrule2() = has(elephant, drink) => needs_support(elephant, pig)\n# Rule3: If the viperfish winks at the elephant, then the elephant is not going to prepare armor for the canary\nrule3() = wink(viperfish, elephant) => not prepare_armor(elephant, canary)\n# Rule4: Regarding the kudu, if it has something to sit on, then we can conclude that it prepares armor for the leopard\nrule4() = has(kudu, sit_on) => prepare_armor(kudu, leopard)\n# Rule5: If something sings a song of victory for the swordfish, then it does not need the support of the pig\nrule5() = sing_song(something, victory_song_for(swordfish)) => not needs_support(something, pig)\n# Rule6: Regarding the elephant, if it has a card whose color is one of the rainbow colors, then we can conclude that it needs support from the pig\nrule6() = has(elephant, card) and color(card) in rainbow_colors => needs_support(elephant, pig)\n# Rule7: Regarding the kudu, if it has a name whose first letter is the same as the first letter of the sea bass's name, then we can conclude that it prepares armor for the leopard\nrule7() = first_letter_of(name(kudu)) == first_letter_of(name(sea_bass)) => prepare_armor(kudu, leopard)\n# Rule8: The elephant does not attack the green fields of the eagle, in the case where the dog respects the elephant\nrule8() = respects(dog, elephant) => not attack_green_fields(elephant, eagle)\n# Rule9: If you see that something does not attack the green fields of the eagle but it needs support from the pig, what can you certainly conclude? You can conclude that it also prepares armor for the canary\nrule9(something) = not attack_green_fields(something, eagle) & needs_support(something, pig) => prepare_armor(something, canary)\n# Rule10: If the elephant prepares armor for the canary and the cockroach does not attack the green fields whose owner is the canary, then, inevitably, the canary prepares armor for the panther.\nrule10() = prepare_armor(elephant, canary) & not attack_green_fields(cockroach, canary) => prepare_armor(canary, panther)\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n# Rule9 is preferred over Rule3\norder(rule9) > order(rule3) = True\n\n# The current state of the game is as follows\n# The dog respects the elephant\nrespects(dog, elephant) = True\n# The elephant has a card that is violet in color\nhas(elephant, card_with(violet_color)) = True\n# The elephant has a piano\nhas(elephant, piano) = True\n# The kudu has a love seat sofa\nhas(kudu, love_seat_sofa) = True\n# The kudu is named Mojo\nname(kudu, Mojo) = True\n# The sea bass is named Casper\nname(sea_bass, Casper) = True\n# The elephant does not offer a job to the dog\nnot offer_job(elephant, dog) = True\n\n# Based on the game state and the rules and preferences, does the canary prepare armor for the panther?\nquestion = prepare_armor(canary, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the whale, then it respects the canary, too\nRule2: If one of the animals does not show all her cards to the sun bear, then she will hold the same number of points as the squid\nRule3: If one of the animals needs support from the cat, then she will also roll the dice for the whale\nRule4: If something does not owe money to the goldfish but knows the defense plan of the leopard, then it will offer a job to the squid\nRule5: The squid needs support from the cat, in the case where the eel proceeds to the spot right after the spot of the squid\n\nThe current state of the game is as follows\nThe eel proceeds to the spot right after the squid\nThe phoenix knows the defensive plans of the leopard but does not owe money to the goldfish\nThe octopus does not show all her cards to the sun bear\n\nBased on the game state and the rules and preferences, does the squid respect the canary?\nQuestion: Does the squid respect the canary?",
        "idx": 387,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something rolls the dice for the whale, then it respects the canary, too\nrule1() = rolls_dice_for(something, whale) => respects(something, canary)\n# Rule2: If you are positive that one of the animals does not show her cards (all of them) to the sun bear, you can be certain that it will hold the same number of points as the squid without a doubt\nrule2() = not show_cards(something, sun_bear) => points(something) == points(squid)\n# Rule3: If you are positive that you saw one of the animals needs support from the cat, you can be certain that it will also roll the dice for the whale\nrule3() = needs_support(something, cat) => rolls_dice_for(something, whale)\n# Rule4: If you see that something does not owe money to the goldfish but it knows the defense plan of the leopard, what can you certainly conclude? You can conclude that it also offers a job to the squid\nrule4(something) = not owes_money_to(something, goldfish) & knows(defense_plan_of(leopard), something) => offer_job(something, squid)\n# Rule5: The squid unquestionably needs support from the cat, in the case where the eel proceeds to the spot that is right after the spot of the squid.\nrule5() = proceed(eel, spot_right_after(spot_of(squid))) => needs_support(squid, cat)\n\n# The current state of the game is as follows\n# The eel proceeds to the spot right after the squid\nproceed(eel, spot_right_after(spot_of(squid))) = True\n# The phoenix knows the defensive plans of the leopard but does not owe money to the goldfish\nknows(defense_plan_of(leopard), phoenix) = True\nnot owes_money_to(phoenix, goldfish) = True\n# The octopus does not show all her cards to the sun bear\nnot show_cards(octopus, sun_bear) = True\n\n# Based on the game state and the rules and preferences, does the squid respect the canary?\nquestion = respects(squid, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The raven prepares armor for the octopus if the octopus does not raise a flag of peace for the raven\nRule2: The squid does not give a magnifying glass to the blobfish if the pig shows all her cards to the squid\nRule3: If something becomes an actual enemy of the salmon and also removes one of the pieces of the doctorfish, then it does not raise a flag of peace for the cheetah\nRule4: The squid rolls the dice for the tilapia if at least one animal rolls the dice for the aardvark\nRule5: The tilapia does not sing a song of victory for the starfish if at least one animal raises a flag of peace for the cheetah\nRule6: The raven does not prepare armor for the octopus if at least one animal rolls the dice for the elephant\nRule7: If the raven prepares armor for the octopus, then the octopus raises a flag of peace for the cheetah\nRule8: If the spider has more than 6 friends, then the spider prepares armor for the meerkat\nRule9: If the oscar raises a flag of peace for the sheep, then the sheep owes money to the tilapia\nRule10: If the squid has a sharp object, then it gives a magnifying glass to the blobfish\nRule11: If one of the animals gives a magnifying glass to the blobfish, then it does not roll the dice for the tilapia\nRule12: If the oscar has a card with a primary color, then the oscar raises a flag of peace for the sheep\nRule13: The octopus removes one of the pieces of the doctorfish if at least one animal raises a flag of peace for the tiger\n\nRule10 is preferred over Rule2\nRule3 is preferred over Rule7\nRule4 is preferred over Rule11\nRule6 is preferred over Rule1\n\nThe current state of the game is as follows\nThe donkey winks at the oscar\nThe oscar has a card with blue color\nThe pig shows all her cards to the squid\nThe sheep raises a flag of peace for the tiger\nThe spider has thirteen friends\nThe squid has a cutter\nThe octopus does not raise a flag of peace for the raven\n\nBased on the game state and the rules and preferences, does the tilapia sing a victory song for the starfish?\nQuestion: Does the tilapia sing a victory song for the starfish?",
        "idx": 388,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The raven unquestionably prepares armor for the octopus, in the case where the octopus does not raise a flag of peace for the raven\nrule1() = not raise_flag_of_peace(octopus, raven) => prepare_armor(raven, octopus)\n# Rule2: The squid does not give a magnifying glass to the blobfish, in the case where the pig shows all her cards to the squid\nrule2() = show_all_cards(pig, squid) => not give_magnifying_glass(squid, blobfish)\n# Rule3: Be careful when something becomes an actual enemy of the salmon and also removes one of the pieces of the doctorfish because in this case it will surely not raise a flag of peace for the cheetah (this may or may not be problematic)\nrule3(something) = enemy(something, salmon) & remove(something, piece_of(doctorfish)) => not raise_flag_of_peace(something, cheetah)\n# Rule4: The squid rolls the dice for the tilapia whenever at least one animal rolls the dice for the aardvark\nrule4() = roll_dice(squid, tilapia) if roll_dice(aardvark)\n# Rule5: The tilapia does not sing a song of victory for the starfish whenever at least one animal raises a flag of peace for the cheetah\nrule5() = not sing_song(tilapia, victory_song_for(starfish)) if raise_flag_of_peace(animal, cheetah)\n# Rule6: The raven does not prepare armor for the octopus whenever at least one animal rolls the dice for the elephant\nrule6() = not prepare_armor(raven, octopus) if roll_dice(animal, elephant)\n# Rule7: If the raven prepares armor for the octopus, then the octopus raises a peace flag for the cheetah\nrule7() = prepare_armor(raven, octopus) => raise_flag_of_peace(octopus, cheetah)\n# Rule8: If the spider has more than 6 friends, then the spider prepares armor for the meerkat\nrule8() = friends(spider) > 6 => prepare_armor(spider, meerkat)\n# Rule9: If the oscar raises a peace flag for the sheep, then the sheep owes money to the tilapia\nrule9() = raise_flag_of_peace(oscar, sheep) => owes_money_to(sheep, tilapia)\n# Rule10: Regarding the squid, if it has a sharp object, then we can conclude that it gives a magnifier to the blobfish\nrule10() = has(squid, sharp_object) => give_magnifying_glass(squid, blobfish)\n# Rule11: If you are positive that you saw one of the animals gives a magnifying glass to the blobfish, you can be certain that it will not roll the dice for the tilapia\nrule11() = give_magnifying_glass(animal, blobfish) => not roll_dice(animal, tilapia)\n# Rule12: If the oscar has a card with a primary color, then the oscar raises a flag of peace for the sheep\nrule12() = has(oscar, card_with(primary_color)) => raise_flag_of_peace(oscar, sheep)\n# Rule13: The octopus removes from the board one of the pieces of the doctorfish whenever at least one animal raises a peace flag for the tiger.\nrule13() = raise_flag_of_peace(animal, tiger) => remove(octopus, piece_of(doctorfish))\n# Rule10 is preferred over Rule2\norder(rule10) > order(rule2) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n# Rule4 is preferred over Rule11\norder(rule4) > order(rule11) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n\n# The current state of the game is as follows\n# The donkey winks at the oscar\nwinks(donkey, oscar) = True\n# The oscar has a card that is blue in color\nhas(oscar, card_with(blue_color)) = True\n# The pig shows all her cards to the squid\nshow_all_cards(pig, squid) = True\n# The sheep raises a peace flag for the tiger\nraise_flag_of_peace(sheep, tiger) = True\n# The spider has thirteen friends\nfriends(spider) = 13\n# The squid has a cutter\nhas(squid, cutter) = True\n# The octopus does not raise a peace flag for the raven\nnot raise_flag_of_peace(octopus, raven) = True\n\n# Based on the game state and the rules and preferences, does the tilapia sing a victory song for the starfish?\nquestion = sing_song(tilapia, victory_song_for(starfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The salmon eats the food of the eel whenever at least one animal becomes an enemy of the sun bear\nRule2: If the cat owes money to the aardvark and the doctorfish eats the food of the aardvark, then the aardvark burns the warehouse that is in possession of the catfish\nRule3: If the aardvark burns the warehouse of the catfish, then the catfish becomes an actual enemy of the sun bear.\n\nThe current state of the game is as follows\nThe cat removes one of the pieces of the aardvark\nThe doctorfish eats the food of the aardvark\n\nBased on the game state and the rules and preferences, does the salmon eat the food of the eel?\nQuestion: Does the salmon eat the food of the eel?",
        "idx": 389,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The salmon eats the food of the eel whenever at least one animal becomes an enemy of the sun bear\nrule1() = enemy(something, sun_bear) => eat_food(salmon, food_of(eel))\n# Rule2: For the aardvark, if the belief is that the cat owes money to the aardvark and the doctorfish eats the food that belongs to the aardvark, then you can add \"the aardvark burns the warehouse that is in possession of the catfish\" to your conclusions\nrule2() = owes_money_to(cat, aardvark) & eat_food(doctorfish, food_of(aardvark)) => burn(warehouse_of(catfish), aardvark)\n# Rule3: If the aardvark burns the warehouse of the catfish, then the catfish becomes an actual enemy of the sun bear.\nrule3() = burn(warehouse_of(catfish), aardvark) => enemy(catfish, sun_bear)\n\n# The current state of the game is as follows\n# The cat removes from the board one of the pieces of the aardvark\nremove(cat, piece_of(aardvark)) = True\n# The doctorfish eats the food of the aardvark\neat_food(doctorfish, food_of(aardvark)) = True\n\n# Based on the game state and the rules and preferences, does the salmon eat the food of the eel?\nquestion = eat_food(salmon, food_of(eel))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If one of the animals does not knock down the fortress of the polar bear, then it becomes an enemy of the donkey\nRule2: If the polar bear has more than seven friends, then it does not respect the panther\nRule3: If something gives a magnifying glass to the tilapia, then it does not wink at the panther\nRule4: If the polar bear has a card with a color from the rainbow colors, then it does not respect the panther\nRule5: If the polar bear does not respect the panther and the rabbit does not wink at the panther, then the panther does not knock down the fortress of the polar bear\nRule6: If something holds the same number of points as the pig, then the panther does not become an actual enemy of the donkey\n\nRule6 is preferred over Rule1\n\nThe current state of the game is as follows\nThe polar bear has 1 kind friend and 4 unfriendly friends\nThe polar bear has a card that is red in color\nThe rabbit gives a magnifier to the tilapia\n\nBased on the game state and the rules and preferences, does the panther become an enemy of the donkey?\nQuestion: Does the panther become an enemy of the donkey?",
        "idx": 390,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not knock down the fortress that belongs to the polar bear, you can be certain that it will become an enemy of the donkey without a doubt\nrule1() = not knock_down(something, fortress_of(polar_bear)) => enemy(something, donkey)\n# Rule2: If the polar bear has more than seven friends, then the polar bear does not respect the panther\nrule2() = friends(polar_bear) > 7 => not respect(polar_bear, panther)\n# Rule3: If something gives a magnifying glass to the tilapia, then it does not wink at the panther\nrule3(something) = give(something, magnifying_glass, tilapia) => not wink(something, panther)\n# Rule4: If the polar bear has a card whose color is one of the rainbow colors, then the polar bear does not respect the panther\nrule4() = has(polar_bear, card) and color(card) in rainbow_colors => not respect(polar_bear, panther)\n# Rule5: For the panther, if the belief is that the polar bear does not respect the panther and the rabbit does not wink at the panther, then you can add \"the panther does not knock down the fortress that belongs to the polar bear\" to your conclusions\nrule5() = not respect(polar_bear, panther) & not wink(rabbit, panther) => not knock_down(panther, fortress_of(polar_bear))\n# Rule6: If at least one animal holds the same number of points as the pig, then the panther does not become an actual enemy of the donkey.\nrule6(something) = points(something) == points(pig) => not actual_enemy(panther, donkey)\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n\n# The current state of the game is as follows\n# The polar bear has 1 friend that is kind and 4 friends that are not, and has a card that is red in color\nfriends(polar_bear) = 1 + 4\nhas(polar_bear, card_with(red_color)) = True\n# The rabbit gives a magnifier to the tilapia\ngive(rabbit, magnifier, tilapia) = True\n\n# Based on the game state and the rules and preferences, does the panther become an enemy of the donkey?\nquestion = enemy(panther, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the ferret has something to carry apples and oranges, then it raises a flag of peace for the dog\nRule2: The cat gives a magnifier to the dog, in the case where the lobster does not know the defense plan of the cat\nRule3: If one of the animals does not offer a job position to the tiger, then it respects the dog\nRule4: If the cat gives a magnifying glass to the dog and the doctorfish respects the dog, then the dog becomes an enemy of the goldfish\nRule5: The goldfish does not prepare armor for the pig, in the case where the dog becomes an enemy of the goldfish\n\nThe current state of the game is as follows\nThe ferret has a knapsack\nThe doctorfish does not offer a job to the tiger\nThe lobster does not know the defensive plans of the cat\n\nBased on the game state and the rules and preferences, does the goldfish prepare armor for the pig?\nQuestion: Does the goldfish prepare armor for the pig?",
        "idx": 391,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the ferret, if it has something to carry apples and oranges, then we can conclude that it raises a flag of peace for the dog\nrule1() = has(ferret, something_to_carry(apples_and_oranges)) => raise_flag_of_peace(ferret, dog)\n# Rule2: The cat unquestionably gives a magnifier to the dog, in the case where the lobster does not know the defense plan of the cat\nrule2() = not knows(defense_plan_of(cat), lobster) => give_magnifier(cat, dog)\n# Rule3: If you are positive that one of the animals does not offer a job position to the tiger, you can be certain that it will respect the dog without a doubt\nrule3(something) = not offer_job_position(something, tiger) => respect(something, dog)\n# Rule4: For the dog, if the belief is that the cat gives a magnifying glass to the dog and the doctorfish respects the dog, then you can add \"the dog becomes an enemy of the goldfish\" to your conclusions\nrule4() = give_magnifier(cat, dog) & respect(doctorfish, dog) => enemy(dog, goldfish)\n# Rule5: The goldfish does not prepare armor for the pig, in the case where the dog becomes an enemy of the goldfish.\nrule5() = enemy(dog, goldfish) => not prepare_armor(goldfish, pig)\n\n# The current state of the game is as follows\n# The ferret has a knapsack\nhas(ferret, knapsack) = True\n# The doctorfish does not offer a job to the tiger\nnot offer_job_position(doctorfish, tiger) = True\n# The lobster does not know the defensive plans of the cat\nnot knows(defense_plan_of(cat), lobster) = True\n\n# Based on the game state and the rules and preferences, does the goldfish prepare armor for the pig?\nquestion = prepare_armor(goldfish, pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the koala starts with the first letter of the name of the bat, then the koala attacks the green fields owned by the sheep\nRule2: If at least one animal attacks the green fields owned by the sheep, then the tiger needs the support of the turtle\nRule3: If the black bear has a card with a primary color, then it does not attack the green fields owned by the kangaroo\nRule4: If something removes a piece of the elephant but does not show all her cards to the goldfish, then it attacks the green fields owned by the kangaroo\nRule5: If the black bear attacks the green fields owned by the kangaroo, then the kangaroo does not hold an equal number of points as the turtle\nRule6: If the koala has fewer than 3 friends, then it does not attack the green fields owned by the sheep\nRule7: If the tiger needs support from the turtle and the kangaroo does not hold an equal number of points as the turtle, then the turtle rolls the dice for the ferret\nRule8: If the black bear has more than ten friends, then it does not attack the green fields owned by the kangaroo\nRule9: If the koala purchased a time machine, then it does not attack the green fields owned by the sheep\n\nRule3 is preferred over Rule4\nRule6 is preferred over Rule1\nRule8 is preferred over Rule4\nRule9 is preferred over Rule1\n\nThe current state of the game is as follows\nThe bat is named Luna\nThe black bear has a card that is black in color\nThe black bear removes one of the pieces of the elephant\nThe koala invented a time machine and is named Peddi\nThe black bear does not show all her cards to the goldfish\n\nBased on the game state and the rules and preferences, does the turtle roll the dice for the ferret?\nQuestion: Does the turtle roll the dice for the ferret?",
        "idx": 392,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the koala has a name whose first letter is the same as the first letter of the bat's name, then the koala attacks the green fields whose owner is the sheep\nrule1() = first_letter_of(name(koala)) == first_letter_of(name(bat)) => attack(koala, green_fields_of(sheep))\n# Rule2: If at least one animal attacks the green fields of the sheep, then the tiger needs the support of the turtle\nrule2() = attack(some_animal, green_fields_of(sheep)) => needs_support(tiger, turtle)\n# Rule3: Regarding the black bear, if it has a card with a primary color, then we can conclude that it does not attack the green fields of the kangaroo\nrule3() = has(black_bear, card_with(primary_color)) => not attack(black_bear, green_fields_of(kangaroo))\n# Rule4: If you see that something removes one of the pieces of the elephant but does not show her cards (all of them) to the goldfish, what can you certainly conclude? You can conclude that it attacks the green fields of the kangaroo\nrule4(something) = remove(something, piece_of(elephant)) & not show_cards(something, goldfish) => attack(something, green_fields_of(kangaroo))\n# Rule5: If the black bear attacks the green fields whose owner is the kangaroo, then the kangaroo is not going to hold an equal number of points as the turtle\nrule5() = attack(black_bear, green_fields_of(kangaroo)) => points(kangaroo) != points(turtle)\n# Rule6: Regarding the koala, if it has fewer than 3 friends, then we can conclude that it does not attack the green fields of the sheep\nrule6() = friends(koala) < 3 => not attack(koala, green_fields_of(sheep))\n# Rule7: For the turtle, if the belief is that the tiger needs support from the turtle and the kangaroo does not hold an equal number of points as the turtle, then you can add \"the turtle rolls the dice for the ferret\" to your conclusions\nrule7() = needs_support(tiger, turtle) & points(kangaroo) != points(turtle) => roll_dice(turtle, ferret)\n# Rule8: If the black bear has more than ten friends, then the black bear does not attack the green fields whose owner is the kangaroo\nrule8() = friends(black_bear) > 10 => not attack(black_bear, green_fields_of(kangaroo))\n# Rule9: Regarding the koala, if it purchased a time machine, then we can conclude that it does not attack the green fields whose owner is the sheep.\nrule9() = has(koala, time_machine) => not attack(koala, green_fields_of(sheep))\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n# Rule8 is preferred over Rule4\norder(rule8) > order(rule4) = True\n# Rule9 is preferred over Rule1\norder(rule9) > order(rule1) = True\n\n# The current state of the game is as follows\n# The bat is named Luna\nname(bat, Luna) = True\n# The black bear has a card that is black in color\nhas(black_bear, card_with(black_color)) = True\n# The black bear removes from the board one of the pieces of the elephant\nremove(black_bear, piece_of(elephant)) = True\n# The koala invented a time machine, and is named Peddi\nhas(koala, time_machine) = True\nname(koala, Peddi) = True\n# The black bear does not show all her cards to the goldfish\nnot show_cards(black_bear, goldfish) = True\n\n# Based on the game state and the rules and preferences, does the turtle roll the dice for the ferret?\nquestion = roll_dice(turtle, ferret)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals steal five points from the hippopotamus, you can be certain that it will also need the support of the kiwi\nRule2: If you are positive that one of the animals does not raise a peace flag for the viperfish, you can be certain that it will burn the warehouse that is in possession of the eel without a doubt\nRule3: Be careful when something burns the warehouse that is in possession of the eel and also needs the support of the kiwi because in this case it will surely prepare armor for the grasshopper (this may or may not be problematic)\nRule4: If at least one animal prepares armor for the grasshopper, then the doctorfish knocks down the fortress of the squirrel.\n\nThe current state of the game is as follows\nThe octopus prepares armor for the eagle\nThe whale steals five points from the hippopotamus but does not raise a peace flag for the viperfish\n\nBased on the game state and the rules and preferences, does the doctorfish knock down the fortress of the squirrel?\nQuestion: Does the doctorfish knock down the fortress of the squirrel?",
        "idx": 393,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals steals five points from the hippopotamus, you can be certain that it will also need the support of the kiwi\nrule1() = steals_points(something, 5, hippopotamus) => needs_support(something, kiwi)\n# Rule2: If you are positive that one of the animals does not raise a peace flag for the viperfish, you can be certain that it will burn the warehouse that is in possession of the eel without a doubt\nrule2() = not raise_flag_of_peace(something, viperfish) => burn(warehouse_of(eel), something)\n# Rule3: Be careful when something burns the warehouse that is in possession of the eel and also needs the support of the kiwi because in this case it will surely prepare armor for the grasshopper (this may or may not be problematic)\nrule3(something) = burn(warehouse_of(eel), something) & needs_support(something, kiwi) => prepare_armor(something, grasshopper)\n# Rule4: If at least one animal prepares armor for the grasshopper, then the doctorfish knocks down the fortress of the squirrel.\nrule4() = prepare_armor(something, grasshopper) => knock_down(fortress_of(squirrel), doctorfish)\n\n# The current state of the game is as follows\n# The octopus prepares armor for the eagle\nprepare_armor(octopus, eagle) = True\n# The whale steals five points from the hippopotamus but does not raise a peace flag for the viperfish\nsteals_points(whale, 5, hippopotamus) = True\nnot raise_flag_of_peace(whale, viperfish) = True\n\n# Based on the game state and the rules and preferences, does the doctorfish knock down the fortress of the squirrel?\nquestion = knock_down(fortress_of(squirrel), doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something removes one of the pieces of the panther and also gives a magnifier to the parrot, then it holds an equal number of points as the wolverine\nRule2: If one of the animals holds an equal number of points as the koala, then it owes money to the wolverine\nRule3: If the bat has a card whose color starts with the letter \"g\", then it removes one of the pieces of the panther\nRule4: If the sheep has a musical instrument, then it holds an equal number of points as the koala\nRule5: If the bat holds the same number of points as the wolverine and the sheep owes money to the wolverine, then the wolverine does not attack the green fields owned by the goldfish\nRule6: If the bat has more than 5 friends, then it gives a magnifier to the parrot\nRule7: If the bat has a leafy green vegetable, then it does not give a magnifying glass to the parrot\nRule8: If the sheep has fewer than 1 friend, then it holds the same number of points as the koala\n\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe bat has 5 kind friends and 5 not kind friends\nThe bat has a card that is green in color\nThe bat has arugula\nThe sheep has 3 smart friends and 1 not smart friend\nThe sheep has a flute\n\nBased on the game state and the rules and preferences, does the wolverine attack the green fields owned by the goldfish?\nQuestion: Does the wolverine attack the green fields owned by the goldfish?",
        "idx": 394,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something removes one of the pieces of the panther and also gives a magnifier to the parrot because in this case it will surely hold an equal number of points as the wolverine (this may or may not be problematic)\nrule1(something) = remove(something, piece_of(panther)) & give_magnifier(something, parrot) => equal_points(something, wolverine)\n# Rule2: If you are positive that you saw one of the animals holds an equal number of points as the koala, you can be certain that it will also owe $$$ to the wolverine\nrule2(something) = equal_points(something, koala) => owes_money_to(something, wolverine)\n# Rule3: Regarding the bat, if it has a card whose color starts with the letter \"g\", then we can conclude that it removes one of the pieces of the panther\nrule3() = has(bat, card_with(color_starting_with(\"g\"))) => remove(bat, piece_of(panther))\n# Rule4: If the sheep has a musical instrument, then the sheep holds an equal number of points as the koala\nrule4() = has(sheep, musical_instrument) => equal_points(sheep, koala)\n# Rule5: For the wolverine, if the belief is that the bat holds the same number of points as the wolverine and the sheep owes money to the wolverine, then you can add that \"the wolverine is not going to attack the green fields whose owner is the goldfish\" to your conclusions\nrule5() = equal_points(bat, wolverine) & owes_money_to(sheep, wolverine) => not attack_fields(wolverine, green_fields_owned_by(goldfish))\n# Rule6: Regarding the bat, if it has more than 5 friends, then we can conclude that it gives a magnifier to the parrot\nrule6() = friends(bat) > 5 => give_magnifier(bat, parrot)\n# Rule7: Regarding the bat, if it has a leafy green vegetable, then we can conclude that it does not give a magnifying glass to the parrot\nrule7() = has(bat, leafy_green_vegetable) => not give_magnifier(bat, parrot)\n# Rule8: Regarding the sheep, if it has fewer than 1 friend, then we can conclude that it holds the same number of points as the koala.\nrule8() = friends(sheep) < 1 => equal_points(sheep, koala)\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The bat has 5 friends that are kind and five friends that are not, and has a card that is green in color\nfriends(bat, kind) = 5\nfriends(bat, not_kind) = 5\nhas(bat, card_with(green_color)) = True\n# The bat has some arugula\nhas(bat, arugula) = True\n# The sheep has 3 friends that are smart and 1 friend that is not, and has a flute.\nfriends(sheep, smart) = 3\nfriends(sheep, not_smart) = 1\nhas(sheep, flute) = True\n\n# Based on the game state and the rules and preferences, does the wolverine attack the green fields whose owner is the goldfish?\nquestion = attack_fields(wolverine, green_fields_owned_by(goldfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something does not know the defense plan of the doctorfish but shows all her cards to the penguin because in this case it will, surely, need the support of the cow (this may or may not be problematic)\nRule2: The ferret attacks the green fields whose owner is the hippopotamus whenever at least one animal needs support from the cow\nRule3: If you are positive that you saw one of the animals attacks the green fields whose owner is the hippopotamus, you can be certain that it will also steal five of the points of the raven.\n\nThe current state of the game is as follows\nThe moose raises a peace flag for the crocodile\nThe moose shows all her cards to the penguin\nThe moose does not sing a victory song for the doctorfish\n\nBased on the game state and the rules and preferences, does the ferret steal five points from the raven?\nQuestion: Does the ferret steal five points from the raven?",
        "idx": 395,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not know the defense plan of the doctorfish but shows all her cards to the penguin because in this case it will, surely, need the support of the cow (this may or may not be problematic)\nrule1(something) = not knows(defense_plan_of(doctorfish), something) & show_cards(something, penguin) => needs_support(something, cow)\n# Rule2: The ferret attacks the green fields whose owner is the hippopotamus whenever at least one animal needs support from the cow\nrule2() = needs_support(something, cow) => attack(ferret, green_fields_of(hippopotamus))\n# Rule3: If you are positive that you saw one of the animals attacks the green fields whose owner is the hippopotamus, you can be certain that it will also steal five of the points of the raven.\nrule3(something) = attack(something, green_fields_of(hippopotamus)) => steal_points(something, 5, raven)\n\n# The current state of the game is as follows\n# The moose raises a peace flag for the crocodile\nraise_flag_of_peace(moose, crocodile) = True\n# The moose shows all her cards to the penguin\nshow_cards(moose, penguin) = True\n# The moose does not sing a victory song for the doctorfish\nnot sing_song(moose, victory_song_for(doctorfish)) = True\n\n# Based on the game state and the rules and preferences, does the ferret steal five points from the raven?\nquestion = steal_points(ferret, 5, raven)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not respect the cat, then it becomes an enemy of the puffin\nRule2: If the squid does not show all her cards to the squirrel, then the squirrel rolls the dice for the elephant\nRule3: If the goldfish has something to drink, then the goldfish raises a flag of peace for the squirrel\nRule4: If the name of the squid starts with the same letter as the name of the elephant, then the squid does not show all her cards to the squirrel\nRule5: If something becomes an enemy of the puffin, then it rolls the dice for the turtle\nRule6: If the squirrel has fewer than three friends, then it does not become an enemy of the puffin\nRule7: If the doctorfish took a bike from the store, then it does not steal five points from the squirrel\nRule8: If something knocks down the fortress of the donkey, then it does not raise a flag of peace for the canary\nRule9: If the doctorfish has fewer than five friends, then it does not steal five points from the squirrel\nRule10: If something rolls the dice for the elephant but does not roll the dice for the turtle, then it raises a flag of peace for the canary\nRule11: If the doctorfish has a card with a color from the rainbow, then it steals five points from the squirrel\nRule12: If the goldfish has something to carry apples and oranges, then it raises a flag of peace for the squirrel\nRule13: If the doctorfish steals five points from the squirrel and the goldfish raises a flag of peace for the squirrel, then the squirrel does not roll the dice for the turtle\n\nRule1 is preferred over Rule6\nRule11 is preferred over Rule7\nRule11 is preferred over Rule9\nRule13 is preferred over Rule5\nRule8 is preferred over Rule10\n\nThe current state of the game is as follows\nThe doctorfish has a card that is indigo in color\nThe doctorfish has one bald friend and 9 non-bald friends\nThe doctorfish stole a bike from the store\nThe elephant is named Lily\nThe goldfish has a beer\nThe goldfish has a hot chocolate\nThe jellyfish needs support from the cow\nThe squid is named Luna\nThe squid winks at the tiger\nThe squirrel has 10 friends and recently reduced her work hours\nThe squirrel does not respect the cat\n\nBased on the game state and the rules and preferences, does the squirrel raise a peace flag for the canary?\nQuestion: Does the squirrel raise a peace flag for the canary?",
        "idx": 396,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not respect the cat, then it becomes an enemy of the puffin\nrule1() = not respects(something, cat) => enemy(something, puffin)\n# Rule2: The squirrel unquestionably rolls the dice for the elephant, in the case where the squid does not show all her cards to the squirrel\nrule2() = not show_cards(squid, squirrel) => roll_dice(squirrel, elephant)\n# Rule3: If the goldfish has something to drink, then the goldfish raises a flag of peace for the squirrel\nrule3() = has(goldfish, drink) => raise_flag_of_peace(goldfish, squirrel)\n# Rule4: Regarding the squid, if it has a name whose first letter is the same as the first letter of the elephant's name, then we can conclude that it does not show her cards (all of them) to the squirrel\nrule4() = first_letter_of(name(squid)) == first_letter_of(name(elephant)) => not show_cards(squid, squirrel)\n# Rule5: If you are positive that you saw one of the animals becomes an actual enemy of the puffin, you can be certain that it will also roll the dice for the turtle\nrule5(something) = enemy(something, puffin) => roll_dice(something, turtle)\n# Rule6: If the squirrel has fewer than three friends, then the squirrel does not become an actual enemy of the puffin\nrule6() = friends(squirrel) < 3 => not enemy(squirrel, puffin)\n# Rule7: Regarding the doctorfish, if it took a bike from the store, then we can conclude that it does not steal five of the points of the squirrel\nrule7() = took_bike(doctorfish) => not steal_points(doctorfish, squirrel, 5)\n# Rule8: If you are positive that you saw one of the animals knocks down the fortress of the donkey, you can be certain that it will not raise a flag of peace for the canary\nrule8(something) = knock_down_fortress(something, donkey) => not raise_flag_of_peace(something, canary)\n# Rule9: If the doctorfish has fewer than five friends, then the doctorfish does not steal five points from the squirrel\nrule9() = friends(doctorfish) < 5 => not steal_points(doctorfish, squirrel, 5)\n# Rule10: Be careful when something rolls the dice for the elephant but does not roll the dice for the turtle because in this case it will, surely, raise a peace flag for the canary (this may or may not be problematic)\nrule10() = roll_dice(something, elephant) & not roll_dice(something, turtle) => raise_flag_of_peace(something, canary)\n# Rule11: Regarding the doctorfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it steals five of the points of the squirrel\nrule11() = has(doctorfish, card_with(color_in(rainbow_colors))) => steal_points(doctorfish, squirrel, 5)\n# Rule12: If the goldfish has something to carry apples and oranges, then the goldfish raises a peace flag for the squirrel\nrule12() = has(goldfish, carry_apples_and_oranges) => raise_flag_of_peace(goldfish, squirrel)\n# Rule13: For the squirrel, if the belief is that the doctorfish steals five of the points of the squirrel and the goldfish raises a flag of peace for the squirrel, then you can add that \"the squirrel is not going to roll the dice for the turtle\" to your conclusions.\nrule13() = steal_points(doctorfish, squirrel, 5) & raise_flag_of_peace(goldfish, squirrel) => not roll_dice(squirrel, turtle)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule11 is preferred over Rule7\norder(rule11) > order(rule7) = True\n# Rule11 is preferred over Rule9\norder(rule11) > order(rule9) = True\n# Rule13 is preferred over Rule5\norder(rule13) > order(rule5) = True\n# Rule8 is preferred over Rule10\norder(rule8) > order(rule10) = True\n\n# The current state of the game is as follows\n# The doctorfish has a card that is indigo in color\nhas(doctorfish, card_with(indigo_color)) = True\n# The doctorfish has one friend that is bald and 9 friends that are not\nfriends(doctorfish) = 10\n# The doctorfish stole a bike from the store\ntook_bike(doctorfish) = True\n# The elephant is named Lily\nname(elephant, Lily) = True\n# The goldfish has a beer\nhas(goldfish, beer) = True\n# The goldfish has a hot chocolate\nhas(goldfish, hot_chocolate) = True\n# The jellyfish needs support from the cow\nneeds_support(jellyfish, cow) = True\n# The squid is named Luna\nname(squid, Luna) = True\n# The squid winks at the tiger\nwinks(squid, tiger) = True\n# The squirrel has 10 friends, and reduced her work hours recently\nfriends(squirrel) = 10\nreduce_work_hours(squirrel) = True\n# The squirrel does not respect the cat\nnot respects(squirrel, cat) = True\n\n# Based on the game state and the rules and preferences, does the squirrel raise a peace flag for the canary?\nquestion = raise_flag_of_peace(squirrel, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the salmon has a card whose color appears in the flag of Italy, then the salmon burns the warehouse that is in possession of the hippopotamus\nRule2: If the wolverine does not attack the green fields whose owner is the lion, then the lion winks at the panda bear\nRule3: If the amberjack has a sharp object, then the amberjack does not give a magnifier to the grasshopper\nRule4: If the amberjack has a leafy green vegetable, then the amberjack does not give a magnifier to the grasshopper\nRule5: If something winks at the panda bear and needs the support of the panda bear, then it does not attack the green fields whose owner is the phoenix\nRule6: If at least one animal raises a peace flag for the black bear, then the lion knows the defense plan of the elephant\nRule7: If something knows the defensive plans of the elephant, then it needs support from the panda bear, too\nRule8: The grasshopper unquestionably burns the warehouse of the viperfish, in the case where the goldfish gives a magnifier to the grasshopper\nRule9: If one of the animals raises a peace flag for the sheep, then it gives a magnifier to the grasshopper\nRule10: If the doctorfish does not respect the wolverine and the donkey does not become an enemy of the wolverine, then the wolverine will never attack the green fields of the lion\n\nThe current state of the game is as follows\nThe amberjack has a club chair and some spinach\nThe goldfish raises a peace flag for the sheep\nThe salmon has a card that is green in color\nThe spider raises a peace flag for the black bear\nThe wolverine supports Chris Ronaldo\nThe doctorfish does not respect the wolverine\nThe donkey does not become an enemy of the wolverine\n\nBased on the game state and the rules and preferences, does the lion attack the green fields whose owner is the phoenix?\nQuestion: Does the lion attack the green fields whose owner is the phoenix?",
        "idx": 397,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the salmon has a card whose color appears in the flag of Italy, then the salmon burns the warehouse that is in possession of the hippopotamus\nrule1() = has(salmon, card_with(color_in(flag_of_italy))) => burn(warehouse_of(hippopotamus))\n# Rule2: If the wolverine does not attack the green fields whose owner is the lion, then the lion winks at the panda bear\nrule2() = not attack(green_fields_of(lion)) => wink(lion, panda_bear)\n# Rule3: If the amberjack has a sharp object, then the amberjack does not give a magnifier to the grasshopper\nrule3() = has(amberjack, sharp_object) => not give_magnifier(amberjack, grasshopper)\n# Rule4: If the amberjack has a leafy green vegetable, then the amberjack does not give a magnifier to the grasshopper\nrule4() = has(amberjack, leafy_green_vegetable) => not give_magnifier(amberjack, grasshopper)\n# Rule5: If you see that something winks at the panda bear and needs the support of the panda bear, what can you certainly conclude? You can conclude that it does not attack the green fields whose owner is the phoenix\nrule5(something) = wink(something, panda_bear) & needs_support(something, panda_bear) => not attack(green_fields_of(phoenix))\n# Rule6: If at least one animal raises a peace flag for the black bear, then the lion knows the defense plan of the elephant\nrule6() = raise_flag_of_peace(something, black_bear) => knows_defense_plan(lion, elephant)\n# Rule7: If something knows the defensive plans of the elephant, then it needs support from the panda bear, too\nrule7(something) = knows_defensive_plans(something, elephant) => needs_support(something, panda_bear)\n# Rule8: The grasshopper unquestionably burns the warehouse of the viperfish, in the case where the goldfish gives a magnifier to the grasshopper\nrule8() = give_magnifier(goldfish, grasshopper) => burn(warehouse_of(viperfish))\n# Rule9: If you are positive that you saw one of the animals raises a peace flag for the sheep, you can be certain that it will also give a magnifying glass to the grasshopper\nrule9() = raise_flag_of_peace(something, sheep) => give_magnifier(something, grasshopper)\n# Rule10: If the doctorfish does not respect the wolverine and the donkey does not become an enemy of the wolverine, then the wolverine will never attack the green fields of the lion.\nrule10() = not respect(doctorfish, wolverine) & not become_enemy(donkey, wolverine) => never_attack(green_fields_of(lion))\n\n# The current state of the game is as follows\n# The amberjack has a club chair, and has some spinach\nhas(amberjack, club_chair) = True\nhas(amberjack, spinach) = True\n# The goldfish raises a peace flag for the sheep\nraise_flag_of_peace(goldfish, sheep) = True\n# The salmon has a card that is green in color\nhas(salmon, card_with(green_color)) = True\n# The spider raises a peace flag for the black bear\nraise_flag_of_peace(spider, black_bear) = True\n# The wolverine supports Chris Ronaldo\nsupports(wolverine, Chris_Ronaldo) = True\n# The doctorfish does not respect the wolverine\nnot respect(doctorfish, wolverine) = True\n# The donkey does not become an enemy of the wolverine\nnot become_enemy(donkey, wolverine) = True\n\n# Based on the game state and the rules and preferences, does the lion attack the green fields whose owner is the phoenix?\nquestion = attack(green_fields_of(lion, phoenix))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cow does not respect the panda bear, then the panda bear rolls the dice for the swordfish\nRule2: If you saw one of the animals attack the green fields owned by the spider, then it will not roll the dice for the swordfish\nRule3: If something does not give a magnifying glass to the ferret, then it does not raise a flag of peace for the lion\nRule4: If the squid has a name whose first letter is the same as the first letter of the salmon's name, then the squid burns the warehouse owned by the cow\nRule5: If something does not raise a peace flag for the kiwi but rolls the dice for the koala, then it will hold the same number of points as the cow\nRule6: If the penguin has a musical instrument, then it raises a flag of peace for the lion\nRule7: The squid does not burn the warehouse of the cow if at least one animal respects the whale\nRule8: The cow respects the panda bear if at least one animal raises a peace flag for the lion\n\nRule2 is preferred over Rule1\nRule6 is preferred over Rule3\nRule7 is preferred over Rule4\n\nThe current state of the game is as follows\nThe doctorfish offers a job to the kiwi\nThe doctorfish rolls the dice for the koala\nThe penguin has a violin\nThe salmon is named Tango\nThe squid is named Tessa\n\nBased on the game state and the rules and preferences, does the panda bear roll the dice for the swordfish?\nQuestion: Does the panda bear roll the dice for the swordfish?",
        "idx": 398,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cow does not respect the panda bear, then the panda bear rolls the dice for the swordfish\nrule1() = not respects(cow, panda_bear) => roll_dice(panda_bear, swordfish)\n# Rule2: If you are positive that you saw one of the animals attacks the green fields whose owner is the spider, you can be certain that it will not roll the dice for the swordfish\nrule2(something) = attacks(something, green_fields_of(spider)) => not roll_dice(something, swordfish)\n# Rule3: If something does not give a magnifying glass to the ferret, then it does not raise a flag of peace for the lion\nrule3(something) = not give(something, magnifying_glass, ferret) => not raise_flag_of_peace(something, lion)\n# Rule4: If the squid has a name whose first letter is the same as the first letter of the salmon's name, then the squid burns the warehouse that is in possession of the cow\nrule4() = first_letter_of(name(squid)) == first_letter_of(name(salmon)) => burn(warehouse_of(cow), squid)\n# Rule5: Be careful when something does not raise a peace flag for the kiwi but rolls the dice for the koala because in this case it will, surely, hold the same number of points as the cow (this may or may not be problematic)\nrule5(something) = not raise_flag_of_peace(something, kiwi) & roll_dice(something, koala) => points(something) == points(cow)\n# Rule6: Regarding the penguin, if it has a musical instrument, then we can conclude that it raises a flag of peace for the lion\nrule6() = has(penguin, musical_instrument) => raise_flag_of_peace(penguin, lion)\n# Rule7: The squid does not burn the warehouse of the cow whenever at least one animal respects the whale\nrule7() = respects(something, whale) => not burn(warehouse_of(cow), squid)\n# Rule8: The cow respects the panda bear whenever at least one animal raises a peace flag for the lion.\nrule8() = raise_flag_of_peace(something, lion) => respects(cow, panda_bear)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n\n# The current state of the game is as follows\n# The doctorfish offers a job to the kiwi\noffer_job(doctorfish, kiwi) = True\n# The doctorfish rolls the dice for the koala\nroll_dice(doctorfish, koala) = True\n# The penguin has a violin\nhas(penguin, violin) = True\n# The salmon is named Tango\nname(salmon, Tango) = True\n# The squid is named Tessa\nname(squid, Tessa) = True\n\n# Based on the game state and the rules and preferences, does the panda bear roll the dice for the swordfish?\nquestion = roll_dice(panda_bear, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something does not steal five points from the tilapia but removes one of the pieces of the donkey from the board because in this case it will surely owe money to the phoenix\nRule2: If something becomes an enemy of the hippopotamus, then it burns the warehouse of the phoenix as well\nRule3: If the buffalo has a card whose color appears in the flag of Japan, then it does not burn the warehouse of the phoenix\nRule4: If the buffalo burns the warehouse of the phoenix and the doctorfish owes money to the phoenix, then the phoenix prepares armor for the black bear\nRule5: The black bear unquestionably removes one of the pieces of the goldfish from the board, in the case where the phoenix prepares armor for the black bear\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe buffalo becomes an enemy of the hippopotamus\nThe doctorfish removes one of the pieces of the donkey from the board but does not steal five points from the tilapia\n\nBased on the game state and the rules and preferences, does the black bear remove one of the pieces of the goldfish from the board?\nQuestion: Does the black bear remove one of the pieces of the goldfish from the board?",
        "idx": 399,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not steal five points from the tilapia but removes from the board one of the pieces of the donkey because in this case it will, surely, owe money to the phoenix (this may or may not be problematic)\nrule1(something) = not steal_points(something, 5, tilapia) & remove(something, piece_of(donkey)) => owes_money_to(something, phoenix)\n# Rule2: If something becomes an enemy of the hippopotamus, then it burns the warehouse of the phoenix, too\nrule2(something) = enemy(something, hippopotamus) => burn(warehouse_of(phoenix), something)\n# Rule3: Regarding the buffalo, if it has a card whose color appears in the flag of Japan, then we can conclude that it does not burn the warehouse of the phoenix\nrule3() = has(buffalo, card_with(color_in_flag_of_Japan)) => not burn(warehouse_of(phoenix), buffalo)\n# Rule4: If the buffalo burns the warehouse that is in possession of the phoenix and the doctorfish owes $$$ to the phoenix, then the phoenix prepares armor for the black bear\nrule4() = burn(warehouse_of(phoenix), buffalo) & owes_money_to(doctorfish, phoenix) => prepare_armor(phoenix, black_bear)\n# Rule5: The black bear unquestionably removes from the board one of the pieces of the goldfish, in the case where the phoenix prepares armor for the black bear.\nrule5() = prepare_armor(phoenix, black_bear) => remove(black_bear, piece_of(goldfish))\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The buffalo becomes an enemy of the hippopotamus\nenemy(buffalo, hippopotamus) = True\n# The doctorfish removes from the board one of the pieces of the donkey but does not steal five points from the tilapia.\nremove(doctorfish, piece_of(donkey)) = True\nnot steal_points(doctorfish, 5, tilapia) = True\n\n# Based on the game state and the rules and preferences, does the black bear remove from the board one of the pieces of the goldfish?\nquestion = remove(black_bear, piece_of(goldfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The crocodile does not hold the same number of points as the spider, in the case where the tiger offers a job position to the crocodile\nRule2: If something needs support from the cat, then it does not offer a job position to the crocodile\nRule3: If the aardvark winks at the tiger and the hare does not burn the warehouse of the tiger, then the tiger offers a job position to the crocodile\nRule4: If the hare has something to drink, then it does not burn the warehouse of the tiger\nRule5: If the aardvark has more than 8 friends, then it winks at the tiger\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe aardvark has ten friends\nThe hare has a beer\n\nBased on the game state and the rules and preferences, does the crocodile hold the same number of points as the spider?\nQuestion: Does the crocodile hold the same number of points as the spider?",
        "idx": 400,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The crocodile does not hold the same number of points as the spider, in the case where the tiger offers a job position to the crocodile\nrule1() = offer_job(tiger, crocodile) => not same_points(crocodile, spider)\n# Rule2: If something needs support from the cat, then it does not offer a job position to the crocodile\nrule2() = needs_support(something, cat) => not offer_job(something, crocodile)\n# Rule3: For the tiger, if the belief is that the aardvark winks at the tiger and the hare does not burn the warehouse that is in possession of the tiger, then you can add \"the tiger offers a job position to the crocodile\" to your conclusions\nrule3() = belief(aardvark_winks_at(tiger)) & not burn(warehouse_of(tiger), hare) => offer_job(tiger, crocodile)\n# Rule4: Regarding the hare, if it has something to drink, then we can conclude that it does not burn the warehouse of the tiger\nrule4() = has(hare, drink) => not burn(warehouse_of(tiger), hare)\n# Rule5: Regarding the aardvark, if it has more than 8 friends, then we can conclude that it winks at the tiger.\nrule5() = friends(aardvark) > 8 => winks(aardvark, tiger)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The aardvark has ten friends\nfriends(aardvark) = 10\n# The hare has a beer\nhas(hare, beer) = True\n\n# Based on the game state and the rules and preferences, does the crocodile hold the same number of points as the spider?\nquestion = same_points(crocodile, spider)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal holds an equal number of points as the squirrel, then the halibut learns elementary resource management from the whale\nRule2: If the whale knows the defense plan of the sea bass, then the sea bass becomes an enemy of the kangaroo\nRule3: If the carp knows the defense plan of the sea bass, then the sea bass does not become an enemy of the kangaroo\nRule4: If the viperfish owns a luxury aircraft, then the viperfish burns the warehouse that is in possession of the whale\nRule5: If the halibut learns elementary resource management from the whale and the viperfish burns the warehouse that is in possession of the whale, then the whale knows the defense plan of the sea bass\nRule6: If the name of the viperfish starts with the same letter as the name of the sun bear, then the viperfish burns the warehouse that is in possession of the whale\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe penguin knocks down the fortress of the squirrel\nThe sun bear is named Pashmak\nThe viperfish is named Meadow\nThe viperfish prepares armor for the parrot\nThe viperfish owns a luxury aircraft\n\nBased on the game state and the rules and preferences, does the sea bass become an enemy of the kangaroo?\nQuestion: Does the sea bass become an enemy of the kangaroo?",
        "idx": 401,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal holds an equal number of points as the squirrel, then the halibut learns elementary resource management from the whale\nrule1() = holds_equal_points(something, squirrel) => learn_elementary_resource_management(halibut, whale)\n# Rule2: The sea bass unquestionably becomes an enemy of the kangaroo, in the case where the whale knows the defense plan of the sea bass\nrule2() = knows_defense_plan(whale, sea_bass) => enemy(sea_bass, kangaroo)\n# Rule3: If the carp knows the defense plan of the sea bass, then the sea bass is not going to become an enemy of the kangaroo\nrule3() = knows_defense_plan(carp, sea_bass) => not enemy(sea_bass, kangaroo)\n# Rule4: If the viperfish owns a luxury aircraft, then the viperfish burns the warehouse that is in possession of the whale\nrule4() = owns(viperfish, luxury_aircraft) => burn(warehouse_of(whale), viperfish)\n# Rule5: For the whale, if the belief is that the halibut learns elementary resource management from the whale and the viperfish burns the warehouse that is in possession of the whale, then you can add \"the whale knows the defense plan of the sea bass\" to your conclusions\nrule5() = learn_elementary_resource_management(halibut, whale) & burn(warehouse_of(whale), viperfish) => knows_defense_plan(whale, sea_bass)\n# Rule6: Regarding the viperfish, if it has a name whose first letter is the same as the first letter of the sun bear's name, then we can conclude that it burns the warehouse that is in possession of the whale.\nrule6() = first_letter_of(name(viperfish)) == first_letter_of(name(sun_bear)) => burn(warehouse_of(whale), viperfish)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The penguin knocks down the fortress of the squirrel\nknock_down(penguin, fortress_of(squirrel)) = True\n# The sun bear is named Pashmak\nname(sun_bear, Pashmak) = True\n# The viperfish is named Meadow, prepares armor for the parrot, and purchased a luxury aircraft.\nname(viperfish, Meadow) = True\nprepares_armor(viperfish, parrot) = True\nowns(viperfish, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the sea bass become an enemy of the kangaroo?\nquestion = enemy(sea_bass, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the halibut learns the basics of resource management from the carp and the turtle winks at the carp, then the carp burns the warehouse of the sheep\nRule2: The moose needs support from the catfish whenever at least one animal burns the warehouse that is in possession of the sheep\nRule3: If the ferret needs support from the turtle, then the turtle winks at the carp\nRule4: If the halibut took a bike from the store, then it learns elementary resource management from the carp.\n\nThe current state of the game is as follows\nThe ferret needs support from the turtle\nThe halibut stole a bike from the store\n\nBased on the game state and the rules and preferences, does the moose need support from the catfish?\nQuestion: Does the moose need support from the catfish?",
        "idx": 402,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the carp, if the belief is that the halibut learns the basics of resource management from the carp and the turtle winks at the carp, then you can add \"the carp burns the warehouse of the sheep\" to your conclusions\nrule1() = belief(carp, learns_basics_of_resource_management_from(halibut)) & wink(turtle, carp) => add_conclusion(\"the carp burns the warehouse of the sheep\")\n# Rule2: The moose needs support from the catfish whenever at least one animal burns the warehouse that is in possession of the sheep\nrule2() = burn(warehouse_of(sheep), something) => needs_support(moose, catfish)\n# Rule3: If the ferret needs support from the turtle, then the turtle winks at the carp\nrule3() = needs_support(ferret, turtle) => wink(turtle, carp)\n# Rule4: Regarding the halibut, if it took a bike from the store, then we can conclude that it learns elementary resource management from the carp.\nrule4() = took_bike(halibut, store) => learns(halibut, elementary_resource_management_from(carp))\n\n# The current state of the game is as follows\n# The ferret needs support from the turtle\nneeds_support(ferret, turtle) = True\n# The halibut stole a bike from the store\ntook_bike(halibut, store) = True\n\n# Based on the game state and the rules and preferences, does the moose need support from the catfish?\nquestion = needs_support(moose, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the swordfish does not prepare armor for the dog, then the dog owes money to the amberjack\nRule2: If you saw one of the animals offer a job to the ferret, then it will also prepare armor for the dog\nRule3: The swordfish will not prepare armor for the dog if the crocodile does not knock down the fortress of the swordfish\nRule4: If at least one animal owes money to the amberjack, then the lobster does not hold the same number of points as the sun bear\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe crocodile does not knock down the fortress of the swordfish\n\nBased on the game state and the rules and preferences, does the lobster hold the same number of points as the sun bear?\nQuestion: Does the lobster hold the same number of points as the sun bear?",
        "idx": 403,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the swordfish does not prepare armor for the dog, then the dog owes $$$ to the amberjack\nrule1() = not prepare_armor(swordfish, dog) => owes_money_to(dog, amberjack)\n# Rule2: If you are positive that you saw one of the animals offers a job to the ferret, you can be certain that it will also prepare armor for the dog\nrule2(something) = offer_job(something, ferret) => prepare_armor(something, dog)\n# Rule3: The swordfish will not prepare armor for the dog, in the case where the crocodile does not knock down the fortress of the swordfish\nrule3() = not knock_down(fortress_of(swordfish), crocodile) => not prepare_armor(swordfish, dog)\n# Rule4: If at least one animal owes $$$ to the amberjack, then the lobster does not hold the same number of points as the sun bear.\nrule4() = owes_money_to(something, amberjack) => not same_number_of_points(lobster, sun_bear)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The crocodile does not knock down the fortress of the swordfish\nnot knock_down(fortress_of(swordfish), crocodile) = True\n\n# Based on the game state and the rules and preferences, does the lobster hold the same number of points as the sun bear?\nquestion = same_number_of_points(lobster, sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cat attacks the green fields of the swordfish whenever at least one animal sings a song of victory for the eagle\nRule2: If the gecko does not have her keys, then she prepares armor for the swordfish\nRule3: If the blobfish has a musical instrument, then it does not attack the green fields of the lobster\nRule4: If the blobfish created a time machine, then it attacks the green fields whose owner is the lobster\nRule5: If the blobfish has a leafy green vegetable, then it does not attack the green fields of the lobster\nRule6: If the swordfish does not owe money to the eel, then the eel prepares armor for the grasshopper\nRule7: If the name of the blobfish starts with the same letter as the name of the lobster, then the blobfish attacks the green fields whose owner is the lobster\nRule8: The swordfish does not owe money to the eel whenever at least one animal attacks the green fields of the lobster\n\nRule4 is preferred over Rule3\nRule4 is preferred over Rule5\nRule7 is preferred over Rule3\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe blobfish has a harmonica\nThe blobfish has a trumpet\nThe blobfish struggles to find food\nThe blobfish is named Beauty\nThe gecko lost her keys\nThe lobster is named Chickpea\nThe tilapia sings a victory song for the eagle\n\nBased on the game state and the rules and preferences, does the eel prepare armor for the grasshopper?\nQuestion: Does the eel prepare armor for the grasshopper?",
        "idx": 404,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cat attacks the green fields of the swordfish whenever at least one animal sings a song of victory for the eagle\nrule1() = sing_song(animal, victory_song_for(eagle)) => attack(cat, green_fields_of(swordfish))\n# Rule2: Regarding the gecko, if it does not have her keys, then we can conclude that it prepares armor for the swordfish\nrule2() = not has(gecko, keys) => prepare_armor(gecko, swordfish)\n# Rule3: If the blobfish has a musical instrument, then the blobfish does not attack the green fields of the lobster\nrule3() = has(blobfish, musical_instrument) => not attack(blobfish, green_fields_of(lobster))\n# Rule4: If the blobfish created a time machine, then the blobfish attacks the green fields whose owner is the lobster\nrule4() = created_time_machine(blobfish) => attack(blobfish, green_fields_of(lobster))\n# Rule5: Regarding the blobfish, if it has a leafy green vegetable, then we can conclude that it does not attack the green fields of the lobster\nrule5() = has(blobfish, leafy_green_vegetable) => not attack(blobfish, green_fields_of(lobster))\n# Rule6: If the swordfish does not owe money to the eel, then the eel prepares armor for the grasshopper\nrule6() = not owes_money_to(swordfish, eel) => prepare_armor(eel, grasshopper)\n# Rule7: Regarding the blobfish, if it has a name whose first letter is the same as the first letter of the lobster's name, then we can conclude that it attacks the green fields whose owner is the lobster\nrule7() = first_letter_of(name(blobfish)) == first_letter_of(name(lobster)) => attack(blobfish, green_fields_of(lobster))\n# Rule8: The swordfish does not owe $$$ to the eel whenever at least one animal attacks the green fields of the lobster.\nrule8() = attack(animal, green_fields_of(lobster)) => not owes_money_to(swordfish, eel)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The blobfish has a harmonica, has a trumpet, and struggles to find food\nhas(blobfish, harmonica) = True\nhas(blobfish, trumpet) = True\nstruggles_to_find_food(blobfish) = True\n# The blobfish is named Beauty\nname(blobfish, Beauty) = True\n# The gecko lost her keys\nlost_keys(gecko) = True\n# The lobster is named Chickpea\nname(lobster, Chickpea) = True\n# The tilapia sings a victory song for the eagle\nsing_song(tilapia, victory_song_for(eagle)) = True\n\n# Based on the game state and the rules and preferences, does the eel prepare armor for the grasshopper?\nquestion = prepare_armor(eel, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish has a card whose color starts with the letter \"b\", then it knows the defense plan of the sheep\nRule2: If something attacks the green fields owned by the halibut, then it does not wink at the tiger\nRule3: The meerkat winks at the tiger whenever at least one animal knows the defensive plans of the sheep\nRule4: If you see one of the animals burn the warehouse owned by the rabbit, then it will not remove one of the pieces of the cow\nRule5: If the catfish owns a luxury aircraft, then it knows the defense plan of the sheep\nRule6: The caterpillar does not eat the food of the meerkat whenever at least one animal needs support from the lobster\nRule7: If something winks at the tiger and also removes one of the pieces of the cow, then it will surely remove one of the pieces of the baboon\nRule8: If the caterpillar does not eat the food of the meerkat, then the meerkat removes one of the pieces of the cow\nRule9: If the octopus knows the defensive plans of the caterpillar and the ferret prepares armor for the caterpillar, then the caterpillar eats the food that belongs to the meerkat\n\nRule2 is preferred over Rule3\nRule4 is preferred over Rule8\nRule6 is preferred over Rule9\n\nThe current state of the game is as follows\nThe catfish dreamed of a luxury aircraft\nThe catfish does not steal five points from the buffalo\nThe catfish has a card that is black in color\nThe ferret prepares armor for the caterpillar\nThe octopus knows the defensive plans of the caterpillar\nThe rabbit needs support from the lobster\n\nBased on the game state and the rules and preferences, does the meerkat remove one of the pieces of the baboon?\nQuestion: Does the meerkat remove one of the pieces of the baboon?",
        "idx": 405,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the catfish, if it has a card whose color starts with the letter \"b\", then we can conclude that it knows the defense plan of the sheep\nrule1() = has(catfish, card_with(color_starting_with(\"b\"))) => knows_defense_plan(catfish, sheep)\n# Rule2: If something attacks the green fields whose owner is the halibut, then it does not wink at the tiger\nrule2() = attack(green_fields_of(halibut)) => not wink(something, tiger)\n# Rule3: The meerkat winks at the tiger whenever at least one animal knows the defensive plans of the sheep\nrule3() = knows_defense_plan(something, sheep) => wink(meerkat, tiger)\n# Rule4: If you are positive that you saw one of the animals burns the warehouse that is in possession of the rabbit, you can be certain that it will not remove one of the pieces of the cow\nrule4(something) = burn(warehouse_of(rabbit), something) => not remove(something, piece_of(cow))\n# Rule5: Regarding the catfish, if it owns a luxury aircraft, then we can conclude that it knows the defense plan of the sheep\nrule5() = owns(catfish, luxury_aircraft) => knows_defense_plan(catfish, sheep)\n# Rule6: The caterpillar does not eat the food that belongs to the meerkat whenever at least one animal needs support from the lobster\nrule6() = needs_support(something, lobster) => not eat_food(caterpillar, food_of(meerkat))\n# Rule7: Be careful when something winks at the tiger and also removes one of the pieces of the cow because in this case it will surely remove one of the pieces of the baboon (this may or may not be problematic)\nrule7(something) = wink(something, tiger) & remove(something, piece_of(cow)) => remove(something, piece_of(baboon))\n# Rule8: If the caterpillar does not eat the food of the meerkat, then the meerkat removes from the board one of the pieces of the cow\nrule8() = not eat_food(caterpillar, food_of(meerkat)) => remove(meerkat, piece_of(cow))\n# Rule9: If the octopus knows the defensive plans of the caterpillar and the ferret prepares armor for the caterpillar, then the caterpillar eats the food that belongs to the meerkat.\nrule9() = knows_defense_plan(octopus, caterpillar) & prepare_armor(ferret, caterpillar) => eat_food(caterpillar, food_of(meerkat))\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule8\norder(rule4) > order(rule8) = True\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n\n# The current state of the game is as follows\n# The catfish dreamed of a luxury aircraft, and does not steal five points from the buffalo\ndreamed_of(catfish, luxury_aircraft) = True\nnot steal_points(catfish, 5, buffalo) = True\n# The catfish has a card that is black in color\nhas(catfish, card_with(black_color)) = True\n# The ferret prepares armor for the caterpillar\nprepare_armor(ferret, caterpillar) = True\n# The octopus knows the defensive plans of the caterpillar\nknows_defense_plan(octopus, caterpillar) = True\n# The rabbit needs support from the lobster\nneeds_support(rabbit, lobster) = True\n\n# Based on the game state and the rules and preferences, does the meerkat remove from the board one of the pieces of the baboon?\nquestion = remove(meerkat, piece_of(baboon))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the salmon has a card whose color appears in the flag of Belgium, then the salmon does not owe money to the hummingbird\nRule2: If at least one animal knocks down the fortress that belongs to the panda bear, then the sheep does not roll the dice for the hummingbird\nRule3: If something does not learn the basics of resource management from the koala, then it does not steal five points from the crocodile\nRule4: If the salmon has fewer than nine friends, then the salmon does not owe money to the hummingbird\nRule5: If the sheep does not roll the dice for the hummingbird and the salmon does not owe money to the hummingbird, then the hummingbird steals five points from the crocodile\nRule6: The carp does not prepare armor for the hare whenever at least one animal steals five points from the crocodile\nRule7: If something prepares armor for the tiger but does not roll the dice for the polar bear, then it rolls the dice for the hummingbird\nRule8: If something does not remove one of the pieces of the catfish, then it prepares armor for the hare\n\nRule3 is preferred over Rule5\nRule7 is preferred over Rule2\nRule8 is preferred over Rule6\n\nThe current state of the game is as follows\nThe meerkat offers a job to the phoenix\nThe salmon has 5 friends\nThe salmon has a card that is violet in color\nThe spider knocks down the fortress of the panda bear\nThe sheep does not roll the dice for the polar bear\n\nBased on the game state and the rules and preferences, does the carp prepare armor for the hare?\nQuestion: Does the carp prepare armor for the hare?",
        "idx": 406,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the salmon has a card whose color appears in the flag of Belgium, then the salmon does not owe $$$ to the hummingbird\nrule1() = has(salmon, card_with(color_in_flag_of(Belgium))) => not owes_money_to(salmon, hummingbird)\n# Rule2: If at least one animal knocks down the fortress that belongs to the panda bear, then the sheep does not roll the dice for the hummingbird\nrule2() = knock_down(fortress_of(panda_bear), something) => not roll_dice(sheep, hummingbird)\n# Rule3: If something does not learn the basics of resource management from the koala, then it does not steal five points from the crocodile\nrule3(something) = not learn_basics_of_resource_management(something, koala) => not steal_points(something, 5, crocodile)\n# Rule4: If the salmon has fewer than nine friends, then the salmon does not owe $$$ to the hummingbird\nrule4() = friends(salmon) < 9 => not owes_money_to(salmon, hummingbird)\n# Rule5: If the sheep does not roll the dice for the hummingbird and the salmon does not owe $$$ to the hummingbird, then the hummingbird steals five points from the crocodile\nrule5() = not roll_dice(sheep, hummingbird) & not owes_money_to(salmon, hummingbird) => steal_points(hummingbird, 5, crocodile)\n# Rule6: The carp does not prepare armor for the hare whenever at least one animal steals five of the points of the crocodile\nrule6() = steal_points(something, 5, crocodile) => not prepare_armor(carp, hare)\n# Rule7: Be careful when something prepares armor for the tiger but does not roll the dice for the polar bear because in this case it will, surely, roll the dice for the hummingbird (this may or may not be problematic)\nrule7() = prepare_armor(something, tiger) & not roll_dice(something, polar_bear) => roll_dice(something, hummingbird)\n# Rule8: If something does not remove one of the pieces of the catfish, then it prepares armor for the hare.\nrule8() = not remove(something, piece_of(catfish)) => prepare_armor(something, hare)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n# Rule8 is preferred over Rule6\norder(rule8) > order(rule6) = True\n\n# The current state of the game is as follows\n# The meerkat offers a job to the phoenix\noffer_job(meerkat, phoenix) = True\n# The salmon has 5 friends\nfriends(salmon) = 5\n# The salmon has a card that is violet in color\nhas(salmon, card_with(violet_color)) = True\n# The spider knocks down the fortress of the panda bear\nknock_down(fortress_of(panda_bear), spider) = True\n# The sheep does not roll the dice for the polar bear\nnot roll_dice(sheep, polar_bear) = True\n\n# Based on the game state and the rules and preferences, does the carp prepare armor for the hare?\nquestion = prepare_armor(carp, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not know the defensive plans of the panda bear, then it proceeds to the spot that is right after the spot of the baboon\nRule2: If one of the animals does not sing a victory song for the donkey, then it becomes an actual enemy of the lion\nRule3: If something does not become an enemy of the lion but proceeds to the spot right after the baboon, then it holds an equal number of points as the buffalo\nRule4: If the grizzly bear has a musical instrument, then it offers a job position to the aardvark\nRule5: If the black bear removes one of the pieces of the aardvark and the whale steals five points from the aardvark, then the aardvark knows the defense plan of the panda bear\nRule6: If the grizzly bear does not offer a job to the aardvark, then the aardvark does not become an actual enemy of the lion\nRule7: If the polar bear does not raise a peace flag for the hummingbird, then the hummingbird prepares armor for the aardvark\nRule8: If something holds an equal number of points as the baboon, then it does not know the defense plan of the panda bear\n\nRule5 is preferred over Rule8\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe aardvark holds the same number of points as the baboon\nThe cheetah owes money to the kiwi\nThe grizzly bear has a saxophone\nThe whale steals five points from the aardvark\nThe polar bear does not raise a peace flag for the hummingbird\n\nBased on the game state and the rules and preferences, does the aardvark hold the same number of points as the buffalo?\nQuestion: Does the aardvark hold the same number of points as the buffalo?",
        "idx": 407,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not know the defensive plans of the panda bear, then it proceeds to the spot that is right after the spot of the baboon\nrule1(something) = not knows(defensive_plans_of(panda_bear), something) => proceed(something, spot_right_after(spot_of(baboon)))\n# Rule2: If you are positive that one of the animals does not sing a victory song for the donkey, you can be certain that it will become an actual enemy of the lion without a doubt\nrule2(something) = not sing_song(something, victory_song_for(donkey)) => actual_enemy(something, lion)\n# Rule3: If you see that something does not become an enemy of the lion but it proceeds to the spot right after the baboon, what can you certainly conclude? You can conclude that it also holds an equal number of points as the buffalo\nrule3(something) = proceed(something, spot_right_after(spot_of(baboon))) & not actual_enemy(something, lion) => points(something) == points(buffalo)\n# Rule4: Regarding the grizzly bear, if it has a musical instrument, then we can conclude that it offers a job position to the aardvark\nrule4() = has(grizzly_bear, musical_instrument) => offer_job_position(grizzly_bear, aardvark)\n# Rule5: For the aardvark, if the belief is that the black bear removes one of the pieces of the aardvark and the whale steals five of the points of the aardvark, then you can add \"the aardvark knows the defense plan of the panda bear\" to your conclusions\nrule5() = remove(black_bear, piece_of(aardvark)) & steal_points(whale, 5, aardvark) => knows(defensive_plans_of(panda_bear), aardvark)\n# Rule6: If the grizzly bear does not offer a job to the aardvark, then the aardvark does not become an actual enemy of the lion\nrule6() = not offer_job_position(grizzly_bear, aardvark) => not actual_enemy(aardvark, lion)\n# Rule7: If the polar bear does not raise a peace flag for the hummingbird, then the hummingbird prepares armor for the aardvark\nrule7() = not raise_flag_of_peace(polar_bear, hummingbird) => prepare_armor(hummingbird, aardvark)\n# Rule8: If something holds an equal number of points as the baboon, then it does not know the defense plan of the panda bear.\nrule8(something) = points(something) == points(baboon) => not knows(defensive_plans_of(panda_bear), something)\n# Rule5 is preferred over Rule8\norder(rule5) > order(rule8) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The aardvark holds the same number of points as the baboon\npoints(aardvark) == points(baboon) = True\n# The cheetah owes money to the kiwi\nowes_money_to(cheetah, kiwi) = True\n# The grizzly bear has a saxophone\nhas(grizzly_bear, saxophone) = True\n# The whale steals five points from the aardvark\nsteal_points(whale, 5, aardvark) = True\n# The polar bear does not raise a peace flag for the hummingbird\nnot raise_flag_of_peace(polar_bear, hummingbird) = True\n\n# Based on the game state and the rules and preferences, does the aardvark hold the same number of points as the buffalo?\nquestion = points(aardvark) == points(buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon does not eat the food that belongs to the squirrel but the rabbit owes money to the squirrel, then the squirrel shows all her cards to the elephant\nRule2: If the name of the rabbit starts with the same letter as the name of the phoenix, then the rabbit does not owe money to the squirrel\nRule3: If the squirrel shows her cards to the elephant, then the elephant removes one of the pieces of the black bear from the board\nRule4: If the rabbit has more than 5 friends, then the rabbit owes money to the squirrel\nRule5: If the baboon has fewer than 19 friends, then the baboon does not eat the food of the squirrel\nRule6: If the name of the baboon starts with the same letter as the name of the swordfish, then the baboon does not eat the food of the squirrel\nRule7: If the hippopotamus proceeds to the spot right after the spot of the squirrel, then the squirrel does not show all her cards to the elephant\n\nRule2 is preferred over Rule4\nRule7 is preferred over Rule1\n\nThe current state of the game is as follows\nThe baboon has 9 friends (4 easy-going and 5 not)\nThe baboon is named Lucy\nThe phoenix is named Pashmak\nThe rabbit has 6 friends\nThe swordfish is named Max\n\nBased on the game state and the rules and preferences, does the elephant remove one of the pieces of the black bear from the board?\nQuestion: Does the elephant remove one of the pieces of the black bear from the board?",
        "idx": 408,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the squirrel, if the belief is that the baboon does not eat the food that belongs to the squirrel but the rabbit owes money to the squirrel, then you can add \"the squirrel shows all her cards to the elephant\" to your conclusions\nrule1() = not eat_food(baboon, food_of(squirrel)) & owes_money_to(rabbit, squirrel) => add_conclusion(\"the squirrel shows all her cards to the elephant\")\n# Rule2: Regarding the rabbit, if it has a name whose first letter is the same as the first letter of the phoenix's name, then we can conclude that it does not owe money to the squirrel\nrule2() = first_letter_of(name(rabbit)) == first_letter_of(name(phoenix)) => not owes_money_to(rabbit, squirrel)\n# Rule3: The elephant unquestionably removes from the board one of the pieces of the black bear, in the case where the squirrel shows her cards (all of them) to the elephant\nrule3() = show_cards(squirrel, elephant) => remove(elephant, piece_of(black_bear))\n# Rule4: Regarding the rabbit, if it has more than 5 friends, then we can conclude that it owes money to the squirrel\nrule4() = friends(rabbit) > 5 => owes_money_to(rabbit, squirrel)\n# Rule5: If the baboon has fewer than nineteen friends, then the baboon does not eat the food of the squirrel\nrule5() = friends(baboon) < 19 => not eat_food(baboon, food_of(squirrel))\n# Rule6: If the baboon has a name whose first letter is the same as the first letter of the swordfish's name, then the baboon does not eat the food of the squirrel\nrule6() = first_letter_of(name(baboon)) == first_letter_of(name(swordfish)) => not eat_food(baboon, food_of(squirrel))\n# Rule7: The squirrel does not show all her cards to the elephant, in the case where the hippopotamus proceeds to the spot that is right after the spot of the squirrel.\nrule7() = proceed(hippopotamus, spot_right_after(spot_of(squirrel))) => not show_cards(squirrel, elephant)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n\n# The current state of the game is as follows\n# The baboon has four friends that are easy going and 5 friends that are not, and is named Lucy\nfriends(baboon) = 4 + 5 = 9\nname(baboon, Lucy) = True\n# The phoenix is named Pashmak\nname(phoenix, Pashmak) = True\n# The rabbit has six friends\nfriends(rabbit) = 6\n# The swordfish is named Max\nname(swordfish, Max) = True\n\n# Based on the game state and the rules and preferences, does the elephant remove from the board one of the pieces of the black bear?\nquestion = remove(elephant, piece_of(black_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panda bear becomes an actual enemy of the aardvark, then the aardvark rolls the dice for the eel\nRule2: If you are positive that you saw one of the animals remove one of the pieces of the crocodile, you can be certain that it will not roll the dice for the eel\nRule3: If the aardvark rolls the dice for the eel and the sun bear respects the eel, then the eel will not roll the dice for the viperfish\nRule4: The eel unquestionably rolls the dice for the viperfish, in the case where the buffalo shows all her cards to the eel\nRule5: If the penguin has more than 10 friends, then it does not hold an equal number of points as the eel\nRule6: If the penguin has a card with a color that is one of the rainbow colors, then it does not hold the same number of points as the eel\nRule7: Be careful when something does not roll the dice for the mosquito but rolls the dice for the viperfish because in this case it certainly does not learn elementary resource management from the bat\nRule8: The eel will not roll the dice for the mosquito, in the case where the penguin does not hold the same number of points as the eel\nRule9: If the buffalo has a name whose first letter is the same as the first letter of the grizzly bear's name, then it shows all her cards to the eel\n\nRule2 is preferred over Rule1\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe buffalo is named Pablo\nThe grizzly bear is named Paco\nThe panda bear becomes an enemy of the aardvark\nThe penguin has 1 loyal friend and 1 disloyal friend\nThe penguin supports Chris Ronaldo\nThe penguin has a card that is blue in color\n\nBased on the game state and the rules and preferences, does the eel learn the basics of resource management from the bat?\nQuestion: Does the eel learn the basics of resource management from the bat?",
        "idx": 409,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panda bear becomes an actual enemy of the aardvark, then the aardvark rolls the dice for the eel\nrule1() = enemy(panda_bear, aardvark) => roll_dice(aardvark, eel)\n# Rule2: If you are positive that you saw one of the animals removes one of the pieces of the crocodile, you can be certain that it will not roll the dice for the eel\nrule2(something) = remove(something, piece_of(crocodile)) => not roll_dice(something, eel)\n# Rule3: If the aardvark rolls the dice for the eel and the sun bear respects the eel, then the eel will not roll the dice for the viperfish\nrule3() = roll_dice(aardvark, eel) & respects(sun_bear, eel) => not roll_dice(eel, viperfish)\n# Rule4: The eel unquestionably rolls the dice for the viperfish, in the case where the buffalo shows all her cards to the eel\nrule4() = show_cards(buffalo, eel) => roll_dice(eel, viperfish)\n# Rule5: Regarding the penguin, if it has more than 10 friends, then we can conclude that it does not hold an equal number of points as the eel\nrule5() = friends(penguin) > 10 => not equal_points(penguin, eel)\n# Rule6: If the penguin has a card whose color is one of the rainbow colors, then the penguin does not hold the same number of points as the eel\nrule6() = has(penguin, card_with(color_in(rainbow_colors))) => not equal_points(penguin, eel)\n# Rule7: Be careful when something does not roll the dice for the mosquito but rolls the dice for the viperfish because in this case it certainly does not learn elementary resource management from the bat (this may or may not be problematic)\nrule7(something) = not roll_dice(something, mosquito) & roll_dice(something, viperfish) => not learn(something, elementary_resource_management_from(bat))\n# Rule8: The eel will not roll the dice for the mosquito, in the case where the penguin does not hold the same number of points as the eel\nrule8() = not equal_points(penguin, eel) => not roll_dice(eel, mosquito)\n# Rule9: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the grizzly bear's name, then we can conclude that it shows all her cards to the eel.\nrule9() = first_letter_of(name(buffalo)) == first_letter_of(name(grizzly_bear)) => show_cards(buffalo, eel)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The buffalo is named Pablo\nname(buffalo, Pablo) = True\n# The grizzly bear is named Paco\nname(grizzly_bear, Paco) = True\n# The panda bear becomes an enemy of the aardvark\nenemy(panda_bear, aardvark) = True\n# The penguin has 1 loyal friend and 1 disloyal friend, and supports Chris Ronaldo\nfriends(penguin) = 2\nsupports(penguin, Chris_Ronaldo) = True\n# The penguin has a card that is blue in color\nhas(penguin, card_with(blue_color)) = True\n\n# Based on the game state and the rules and preferences, does the eel learn the basics of resource management from the bat?\nquestion = learn(eel, basics_of_resource_management_from(bat))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal eats the food that belongs to the starfish, then the buffalo does not become an actual enemy of the puffin\nRule2: If at least one animal gives a magnifier to the goldfish, then the oscar does not wink at the lion\nRule3: If the name of the turtle starts with the same letter as the name of the caterpillar, then the turtle learns the basics of resource management from the cheetah\nRule4: If something attacks the green fields of the gecko, then it does not give a magnifying glass to the swordfish\nRule5: If at least one animal becomes an enemy of the puffin, then the lion steals five points from the cat\nRule6: If something steals five points from the cat and sings a victory song for the crocodile, then it raises a peace flag for the catfish\nRule7: If the swordfish respects the lion and the oscar does not wink at the lion, then the lion will never raise a peace flag for the catfish\nRule8: If the black bear eats the food of the buffalo, then the buffalo becomes an actual enemy of the puffin\nRule9: If at least one animal needs support from the goldfish, then the grizzly bear gives a magnifier to the goldfish\nRule10: If something does not burn the warehouse of the polar bear, then it winks at the lion\nRule11: If something does not give a magnifier to the swordfish, then it sings a song of victory for the crocodile\nRule1 is preferred over Rule8\nRule10 is preferred over Rule2\nRule7 is preferred over Rule6\n\nThe current state of the game is as follows\nThe black bear prepares armor for the buffalo\nThe caterpillar is named Peddi\nThe lion attacks the green fields of the gecko\nThe penguin needs support from the goldfish\nThe turtle is named Pashmak\n\nBased on the game state and the rules and preferences, does the lion raise a peace flag for the catfish?\nQuestion: Does the lion raise a peace flag for the catfish?",
        "idx": 410,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal eats the food that belongs to the starfish, then the buffalo does not become an actual enemy of the puffin\nrule1() = eats_food(something, food_of(starfish)) => not actual_enemy(buffalo, puffin)\n# Rule2: If at least one animal gives a magnifier to the goldfish, then the oscar does not wink at the lion\nrule2() = gives_magnifier(something, goldfish) => not wink(oscar, lion)\n# Rule3: Regarding the turtle, if it has a name whose first letter is the same as the first letter of the caterpillar's name, then we can conclude that it learns the basics of resource management from the cheetah\nrule3() = first_letter_of(name(turtle)) == first_letter_of(name(caterpillar)) => learn_basics_of_resource_management(turtle, cheetah)\n# Rule4: If something attacks the green fields of the gecko, then it does not give a magnifying glass to the swordfish\nrule4() = attacks_green_fields(something, gecko) => not gives_magnifying_glass(something, swordfish)\n# Rule5: If at least one animal becomes an enemy of the puffin, then the lion steals five of the points of the cat\nrule5() = becomes_enemy(something, puffin) => steals_points(lion, 5, cat)\n# Rule6: If you see that something steals five of the points of the cat and sings a song of victory for the crocodile, what can you certainly conclude? You can conclude that it also raises a peace flag for the catfish\nrule6() = steals_points(something, 5, cat) & sings_song(something, victory_song_for(crocodile)) => raises_flag_of_peace(something, catfish)\n# Rule7: If the swordfish respects the lion and the oscar does not wink at the lion, then the lion will never raise a flag of peace for the catfish\nrule7() = respects(swordfish, lion) & not wink(oscar, lion) => never_raise_flag_of_peace(lion, catfish)\n# Rule8: The buffalo unquestionably becomes an actual enemy of the puffin, in the case where the black bear eats the food of the buffalo\nrule8() = eats_food(black_bear, food_of(buffalo)) => actual_enemy(buffalo, puffin)\n# Rule9: If at least one animal needs support from the goldfish, then the grizzly bear gives a magnifier to the goldfish\nrule9() = needs_support(something, goldfish) => gives_magnifier(grizzly_bear, goldfish)\n# Rule10: If something does not burn the warehouse of the polar bear, then it winks at the lion\nrule10() = not burn(warehouse_of(polar_bear), something) => wink(something, lion)\n# Rule11: If you are positive that one of the animals does not give a magnifier to the swordfish, you can be certain that it will sing a song of victory for the crocodile without a doubt.\nrule11() = not gives_magnifier(something, swordfish) => sings_song(something, victory_song_for(crocodile))\n# Rule1 is preferred over Rule8\norder(rule1) > order(rule8) = True\n# Rule10 is preferred over Rule2\norder(rule10) > order(rule2) = True\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n\n# The current state of the game is as follows\n# The black bear prepares armor for the buffalo\nprepares_armor(black_bear, buffalo) = True\n# The caterpillar is named Peddi\nname(caterpillar, Peddi) = True\n# The lion attacks the green fields whose owner is the gecko\nattacks_green_fields(lion, gecko) = True\n# The penguin needs support from the goldfish\nneeds_support(penguin, goldfish) = True\n# The turtle is named Pashmak\nname(turtle, Pashmak) = True\n\n# Based on the game state and the rules and preferences, does the lion raise a peace flag for the catfish?\nquestion = raises_flag_of_peace(lion, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal proceeds to the spot right after the carp, then the tiger does not owe money to the sea bass\nRule2: If the tiger has more than three friends, then it proceeds to the spot right after the crocodile\nRule3: If the catfish has a leafy green vegetable, then it removes one of the pieces of the grasshopper\nRule4: If an animal removes one of the pieces of the grasshopper, then it owes money to the sea bass\nRule5: If the black bear removes one of the pieces of the catfish, then the catfish does not remove one of the pieces of the grasshopper\nRule6: If the catfish owes money to the sea bass and the tiger owes money to the sea bass, then the sea bass knows the defensive plans of the gecko\nRule7: If an animal proceeds to the spot right after the crocodile, then it owes money to the sea bass\nRule8: If the tiger is a fan of Chris Ronaldo, then it proceeds to the spot right after the crocodile\n\nRule1 is preferred over Rule7\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe catfish has kale\nThe tiger has 11 friends\nThe tiger hates Chris Ronaldo\n\nBased on the game state and the rules and preferences, does the sea bass know the defensive plans of the gecko?\nQuestion: Does the sea bass know the defensive plans of the gecko?",
        "idx": 411,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal proceeds to the spot right after the carp, then the tiger does not owe money to the sea bass\nrule1() = proceed(something, spot_right_after(spot_of(carp))) => not owe_money_to(tiger, sea_bass)\n# Rule2: Regarding the tiger, if it has more than three friends, then we can conclude that it proceeds to the spot right after the crocodile\nrule2() = friends(tiger) > 3 => proceed(tiger, spot_right_after(spot_of(crocodile)))\n# Rule3: Regarding the catfish, if it has a leafy green vegetable, then we can conclude that it removes one of the pieces of the grasshopper\nrule3() = has(catfish, leafy_green_vegetable) => remove(catfish, piece_of(grasshopper))\n# Rule4: If you are positive that you saw one of the animals removes one of the pieces of the grasshopper, you can be certain that it will also owe $$$ to the sea bass\nrule4(something) = remove(something, piece_of(grasshopper)) => owe_money_to(something, sea_bass)\n# Rule5: If the black bear removes one of the pieces of the catfish, then the catfish is not going to remove from the board one of the pieces of the grasshopper\nrule5() = remove(black_bear, piece_of(catfish)) => not remove(catfish, piece_of(grasshopper))\n# Rule6: For the sea bass, if the belief is that the catfish owes money to the sea bass and the tiger owes $$$ to the sea bass, then you can add \"the sea bass knows the defensive plans of the gecko\" to your conclusions\nrule6() = owe_money_to(catfish, sea_bass) & owe_money_to(tiger, sea_bass) => knows_defensive_plans(sea_bass, gecko)\n# Rule7: If you are positive that you saw one of the animals proceeds to the spot right after the crocodile, you can be certain that it will also owe $$$ to the sea bass\nrule7(something) = proceed(something, spot_right_after(spot_of(crocodile))) => owe_money_to(something, sea_bass)\n# Rule8: Regarding the tiger, if it is a fan of Chris Ronaldo, then we can conclude that it proceeds to the spot that is right after the spot of the crocodile.\nrule8() = fan_of(tiger, Chris_Ronaldo) => proceed(tiger, spot_right_after(spot_of(crocodile)))\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The catfish has some kale\nhas(catfish, kale) = True\n# The tiger has 11 friends\nfriends(tiger) = 11\n# The tiger hates Chris Ronaldo\nhates(tiger, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the sea bass know the defensive plans of the gecko?\nquestion = knows_defensive_plans(sea_bass, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The dog steals five points from the rabbit whenever at least one animal shows all her cards to the grasshopper\nRule2: If the parrot has a name whose first letter is the same as the first letter of the kangaroo's name, then the parrot shows all her cards to the grasshopper\nRule3: If something steals five points from the rabbit, then it does not learn the basics of resource management from the hippopotamus.\n\nThe current state of the game is as follows\nThe kangaroo is named Lucy\nThe parrot is named Lily\n\nBased on the game state and the rules and preferences, does the dog learn the basics of resource management from the hippopotamus?\nQuestion: Does the dog learn the basics of resource management from the hippopotamus?",
        "idx": 412,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The dog steals five of the points of the rabbit whenever at least one animal shows all her cards to the grasshopper\nrule1() = show_cards(someone, grasshopper) => steal_points(dog, 5, rabbit)\n# Rule2: If the parrot has a name whose first letter is the same as the first letter of the kangaroo's name, then the parrot shows all her cards to the grasshopper\nrule2() = first_letter_of(name(parrot)) == first_letter_of(name(kangaroo)) => show_cards(parrot, grasshopper)\n# Rule3: If something steals five points from the rabbit, then it does not learn the basics of resource management from the hippopotamus.\nrule3(something) = steal_points(something, 5, rabbit) => not learn_basics_of_resource_management(something, hippopotamus)\n\n# The current state of the game is as follows\n# The kangaroo is named Lucy\nname(kangaroo, Lucy) = True\n# The parrot is named Lily\nname(parrot, Lily) = True\n\n# Based on the game state and the rules and preferences, does the dog learn the basics of resource management from the hippopotamus?\nquestion = learn_basics_of_resource_management(dog, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the viperfish starts with the same letter as the name of the tiger, then the viperfish does not become an enemy of the rabbit\nRule2: If one of the animals does not owe money to the cockroach, then it will not respect the rabbit\nRule3: If something does not raise a peace flag for the koala, then it respects the sheep\nRule4: If the crocodile has the same first letter in its name as the elephant, then it does not give a magnifying glass to the rabbit\nRule5: If one of the animals respects the sheep, then it will not become an enemy of the dog\nRule6: If something burns the warehouse of the crocodile and sings a victory song for the jellyfish, then it will become an enemy of the dog\nRule7: If the viperfish took a bike from the store, then it does not become an enemy of the rabbit\nRule8: If one of the animals respects the grasshopper, then the puffin steals five points from the rabbit\nRule9: The rabbit does not raise a peace flag for the koala if at least one animal knows the defense plan of the doctorfish\nRule10: If the crocodile gives a magnifying glass to the rabbit, then the rabbit burns the warehouse of the crocodile\nRule11: If the puffin steals five points from the rabbit and the viperfish does not become an enemy of the rabbit, then the rabbit sings a victory song for the jellyfish\nRule12: If the crocodile has fewer than fifteen friends, then it does not give a magnifying glass to the rabbit\n\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe carp respects the grasshopper\nThe crocodile has 5 friends and is named Paco\nThe elephant is named Charlie\nThe penguin burns the warehouse of the polar bear\nThe rabbit has a card that is green in color\nThe raven respects the doctorfish\nThe tiger is named Casper\nThe viperfish is named Tango and stole a bike from the store\nThe penguin does not owe money to the cockroach\n\nBased on the game state and the rules and preferences, does the rabbit become an enemy of the dog?\nQuestion: Does the rabbit become an enemy of the dog?",
        "idx": 413,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the viperfish has a name whose first letter is the same as the first letter of the tiger's name, then the viperfish does not become an enemy of the rabbit\nrule1() = first_letter_of(name(viperfish)) == first_letter_of(name(tiger)) => not enemy(viperfish, rabbit)\n# Rule2: If you are positive that one of the animals does not owe money to the cockroach, you can be certain that it will not respect the rabbit\nrule2(something) = not owes_money_to(something, cockroach) => not respect(something, rabbit)\n# Rule3: If something does not raise a flag of peace for the koala, then it respects the sheep\nrule3(something) = not raise_flag_of_peace(something, koala) => respect(something, sheep)\n# Rule4: Regarding the crocodile, if it has a name whose first letter is the same as the first letter of the elephant's name, then we can conclude that it does not give a magnifying glass to the rabbit\nrule4() = first_letter_of(name(crocodile)) == first_letter_of(name(elephant)) => not give_magnifying_glass(crocodile, rabbit)\n# Rule5: If you are positive that you saw one of the animals respects the sheep, you can be certain that it will not become an enemy of the dog\nrule5(something) = respects(something, sheep) => not enemy(something, dog)\n# Rule6: Be careful when something burns the warehouse that is in possession of the crocodile and also sings a victory song for the jellyfish because in this case it will surely become an enemy of the dog (this may or may not be problematic)\nrule6(something) = burn(warehouse_of(crocodile), something) & sing_song(something, victory_song_for(jellyfish)) => enemy(something, dog)\n# Rule7: If the viperfish took a bike from the store, then the viperfish does not become an enemy of the rabbit\nrule7() = took(viperfish, bike_from(store)) => not enemy(viperfish, rabbit)\n# Rule8: If at least one animal respects the grasshopper, then the puffin steals five points from the rabbit\nrule8(something) = respects(something, grasshopper) => steal_points(puffin, 5, rabbit)\n# Rule9: The rabbit does not raise a peace flag for the koala whenever at least one animal knows the defense plan of the doctorfish\nrule9() = knows(defense_plan_of(doctorfish), something) => not raise_flag_of_peace(rabbit, koala)\n# Rule10: If the crocodile gives a magnifying glass to the rabbit, then the rabbit burns the warehouse that is in possession of the crocodile\nrule10() = give_magnifying_glass(crocodile, rabbit) => burn(warehouse_of(crocodile), rabbit)\n# Rule11: If the puffin steals five points from the rabbit and the viperfish does not become an enemy of the rabbit, then, inevitably, the rabbit sings a victory song for the jellyfish\nrule11() = steal_points(puffin, 5, rabbit) & not enemy(viperfish, rabbit) => sing_song(rabbit, victory_song_for(jellyfish))\n# Rule12: If the crocodile has fewer than fifteen friends, then the crocodile does not give a magnifying glass to the rabbit.\nrule12() = friends(crocodile) < 15 => not give_magnifying_glass(crocodile, rabbit)\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The carp respects the grasshopper\nrespects(carp, grasshopper) = True\n# The crocodile has 5 friends, and is named Paco\nfriends(crocodile) = 5\nname(crocodile, Paco) = True\n# The elephant is named Charlie\nname(elephant, Charlie) = True\n# The penguin burns the warehouse of the polar bear\nburn(warehouse_of(polar_bear), penguin) = True\n# The rabbit has a card that is green in color\nhas(rabbit, card_with(green_color)) = True\n# The raven respects the doctorfish\nrespects(raven, doctorfish) = True\n# The tiger is named Casper\nname(tiger, Casper) = True\n# The viperfish is named Tango, and stole a bike from the store\nname(viperfish, Tango) = True\ntook(viperfish, bike_from(store)) = True\n# The penguin does not owe money to the cockroach\nowes_money_to(penguin, cockroach) = False\n\n# Based on the game state and the rules and preferences, does the rabbit become an enemy of the dog?\nquestion = enemy(rabbit, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the raven works fewer hours than before, then it does not become an enemy of the mosquito\nRule2: If the raven has a musical instrument, then it becomes an enemy of the mosquito\nRule3: If the name of the raven starts with the same letter as the name of the zander, then the raven becomes an enemy of the mosquito\nRule4: If something becomes an actual enemy of the mosquito, then it offers a job to the black bear\nRule5: The squirrel knows the defensive plans of the kangaroo whenever at least one animal offers a job to the black bear\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe raven has a plastic bag\nThe raven is named Milo\nThe zander is named Mojo\n\nBased on the game state and the rules and preferences, does the squirrel know the defensive plans of the kangaroo?\nQuestion: Does the squirrel know the defensive plans of the kangaroo?",
        "idx": 414,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the raven, if it works fewer hours than before, then we can conclude that it does not become an enemy of the mosquito\nrule1() = reduce_work_hours(raven) => not enemy(raven, mosquito)\n# Rule2: Regarding the raven, if it has a musical instrument, then we can conclude that it becomes an enemy of the mosquito\nrule2() = has(raven, musical_instrument) => enemy(raven, mosquito)\n# Rule3: Regarding the raven, if it has a name whose first letter is the same as the first letter of the zander's name, then we can conclude that it becomes an enemy of the mosquito\nrule3() = first_letter_of(name(raven)) == first_letter_of(name(zander)) => enemy(raven, mosquito)\n# Rule4: If something becomes an actual enemy of the mosquito, then it offers a job to the black bear, too\nrule4(something) = enemy(something, mosquito) => offer_job(something, black_bear)\n# Rule5: The squirrel knows the defensive plans of the kangaroo whenever at least one animal offers a job to the black bear.\nrule5() = exists(animal, offer_job(animal, black_bear)) => knows(defensive_plans_of(kangaroo), squirrel)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The raven has a plastic bag\nhas(raven, plastic_bag) = True\n# The raven is named Milo\nname(raven, Milo) = True\n# The zander is named Mojo\nname(zander, Mojo) = True\n\n# Based on the game state and the rules and preferences, does the squirrel know the defensive plans of the kangaroo?\nquestion = knows(defensive_plans_of(kangaroo), squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the gecko has a high salary, then it does not give a magnifying glass to the leopard\nRule2: If the snail gives a magnifier to the panther and the leopard needs the support of the panther, then the panther does not learn elementary resource management from the jellyfish\nRule3: If the gecko has a card whose color appears in the flag of France, then it does not give a magnifying glass to the leopard\nRule4: If at least one animal gives a magnifying glass to the wolverine, then the snail gives a magnifying glass to the panther\nRule5: If the buffalo has fewer than ten friends, then it gives a magnifier to the wolverine\nRule6: If the gecko does not give a magnifying glass to the leopard, then the leopard needs support from the panther.\n\nThe current state of the game is as follows\nThe buffalo has 4 friends, one of which is energetic and three are not\nThe gecko has a well-paid job\nThe gecko has a card that is black in color\n\nBased on the game state and the rules and preferences, does the panther learn the basics of resource management from the jellyfish?\nQuestion: Does the panther learn the basics of resource management from the jellyfish?",
        "idx": 415,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the gecko has a high salary, then the gecko does not give a magnifying glass to the leopard\nrule1() = has_high_salary(gecko) => not give_magnifying_glass(gecko, leopard)\n# Rule2: For the panther, if the belief is that the snail gives a magnifier to the panther and the leopard needs the support of the panther, then you can add that \"the panther is not going to learn elementary resource management from the jellyfish\" to your conclusions\nrule2() = belief(snail_gives_magnifier_to(panther)) & leopard_needs_support(leopard, panther) => not learn_basics_of_resource_management(panther, jellyfish)\n# Rule3: Regarding the gecko, if it has a card whose color appears in the flag of France, then we can conclude that it does not give a magnifying glass to the leopard\nrule3() = has(gecko, card_with(color_in_flag_of_france)) => not give_magnifying_glass(gecko, leopard)\n# Rule4: If at least one animal gives a magnifying glass to the wolverine, then the snail gives a magnifying glass to the panther\nrule4() = give_magnifying_glass(something, wolverine) => give_magnifying_glass(snail, panther)\n# Rule5: If the buffalo has fewer than ten friends, then the buffalo gives a magnifier to the wolverine\nrule5() = friends(buffalo) < 10 => give_magnifying_glass(buffalo, wolverine)\n# Rule6: If the gecko does not give a magnifying glass to the leopard, then the leopard needs support from the panther.\nrule6() = not give_magnifying_glass(gecko, leopard) => leopard_needs_support(leopard, panther)\n\n# The current state of the game is as follows\n# The buffalo has 1 friend that is energetic and three friends that are not\nfriends(buffalo) = 1 + 3\n# The gecko got a well-paid job\nhas_high_salary(gecko) = True\n# The gecko has a card that is black in color\nhas(gecko, card_with(black_color)) = True\n\n# Based on the game state and the rules and preferences, does the panther learn the basics of resource management from the jellyfish?\nquestion = learn_basics_of_resource_management(panther, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals eat the food that belongs to the sheep, you can be certain that it will also show all her cards to the squirrel\nRule2: The moose burns the warehouse that is in possession of the goldfish, in the case where the cow steals five points from the moose\nRule3: If the name of the cat starts with the same letter as the name of the leopard, then the cat does not know the defense plan of the oscar\nRule4: The moose attacks the green fields of the sheep whenever at least one animal knows the defensive plans of the oscar\nRule5: If something does not respect the canary, then it knows the defense plan of the oscar\nRule6: If the cat has fewer than 5 friends, then the cat does not know the defensive plans of the oscar\nRule7: If at least one animal raises a peace flag for the sun bear, then the moose does not hold an equal number of points as the sheep\nRule8: If you are positive that you saw one of the animals burn the warehouse of the meerkat, you can be certain that it holds an equal number of points as the sheep\nRule9: If the moose has a sharp object, then the moose does not learn elementary resource management from the meerkat\nRule10: If you are positive that you saw one of the animals roll the dice for the kangaroo, you can be certain that it will also attack the green fields whose owner is the tiger\nRule11: If you are positive that you saw one of the animals become an actual enemy of the lobster, you can be certain that it will also learn the basics of resource management from the meerkat\nRule12: If something attacks the green fields of the sheep, then it does not show all her cards to the squirrel\n\nRule11 is preferred over Rule9\nRule12 is preferred over Rule1\nRule5 is preferred over Rule3\nRule5 is preferred over Rule6\nRule7 is preferred over Rule8\n\nThe current state of the game is as follows\nThe cat has 13 friends\nThe cat is named Cinnamon\nThe cat does not learn the basics of resource management from the canary\nThe moose becomes an enemy of the kangaroo\nThe moose does not become an enemy of the hummingbird\nThe moose does not need support from the lobster\nThe cow does not steal five points from the moose\n\nBased on the game state and the rules and preferences, does the moose show all her cards to the squirrel?\nQuestion: Does the moose show all her cards to the squirrel?",
        "idx": 416,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals eats the food that belongs to the sheep, you can be certain that it will also show her cards (all of them) to the squirrel\nrule1() = eats_food(something, food_of(sheep)) => show_cards(something, squirrel)\n# Rule2: The moose unquestionably burns the warehouse that is in possession of the goldfish, in the case where the cow steals five points from the moose\nrule2() = steal_points(cow, 5, moose) => burn(warehouse_of(goldfish), moose)\n# Rule3: If the cat has a name whose first letter is the same as the first letter of the leopard's name, then the cat does not know the defense plan of the oscar\nrule3() = first_letter_of(name(cat)) == first_letter_of(name(leopard)) => not knows(defense_plan_of(oscar), cat)\n# Rule4: The moose attacks the green fields of the sheep whenever at least one animal knows the defensive plans of the oscar\nrule4() = knows(defensive_plans_of(oscar), something) => attack_green_fields(moose, sheep)\n# Rule5: If something does not respect the canary, then it knows the defense plan of the oscar\nrule5() = not respects(something, canary) => knows(defense_plan_of(oscar), something)\n# Rule6: If the cat has fewer than 5 friends, then the cat does not know the defensive plans of the oscar\nrule6() = friends(cat) < 5 => not knows(defensive_plans_of(oscar), cat)\n# Rule7: If at least one animal raises a peace flag for the sun bear, then the moose does not hold an equal number of points as the sheep\nrule7() = raise_flag_of_peace(something, sun_bear) => not equal_points(moose, sheep)\n# Rule8: If you are positive that you saw one of the animals burns the warehouse of the meerkat, you can be certain that it will also hold an equal number of points as the sheep\nrule8() = burn(warehouse_of(meerkat), something) => equal_points(something, sheep)\n# Rule9: If the moose has a sharp object, then the moose does not learn elementary resource management from the meerkat\nrule9() = has(moose, sharp_object) => not learn_elementary_resource_management(moose, meerkat)\n# Rule10: If you are positive that you saw one of the animals rolls the dice for the kangaroo, you can be certain that it will also attack the green fields whose owner is the tiger\nrule10() = roll_dice(something, kangaroo) => attack_green_fields(something, tiger)\n# Rule11: If you are positive that you saw one of the animals becomes an actual enemy of the lobster, you can be certain that it will also learn the basics of resource management from the meerkat\nrule11() = become_enemy(something, lobster) => learn_basics_of_resource_management(something, meerkat)\n# Rule12: If something attacks the green fields of the sheep, then it does not show all her cards to the squirrel.\nrule12() = attack_green_fields(something, sheep) => not show_cards(something, squirrel)\n# Rule11 is preferred over Rule9\norder(rule11) > order(rule9) = True\n# Rule12 is preferred over Rule1\norder(rule12) > order(rule1) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n# Rule7 is preferred over Rule8\norder(rule7) > order(rule8) = True\n\n# The current state of the game is as follows\n# The cat has 13 friends, is named Cinnamon, and does not learn the basics of resource management from the canary\nfriends(cat) = 13\nname(cat, Cinnamon) = True\nnot learn_basics_of_resource_management(cat, canary) = True\n# The moose becomes an enemy of the kangaroo, does not become an enemy of the hummingbird, and does not need support from the lobster\nbecome_enemy(moose, kangaroo) = True\nnot become_enemy(moose, hummingbird) = True\nnot needs_support(moose, lobster) = True\n# The cow does not steal five points from the moose\nnot steal_points(cow, 5, moose) = True\n\n# Based on the game state and the rules and preferences, does the moose show all her cards to the squirrel?\nquestion = show_cards(moose, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal needs the support of the spider, then the dog does not sing a victory song for the sea bass\nRule2: If the koala has more than 9 friends, then the koala does not sing a victory song for the crocodile\nRule3: If the koala has a card whose color is one of the rainbow colors, then it sings a victory song for the crocodile\nRule4: If the name of the koala starts with the same letter as the name of the viperfish, then the koala sings a victory song for the crocodile\nRule5: If you see that one of the animals needs the support of the tiger, then it does not eat the food that belongs to the dog\nRule6: If the cat has more than ten friends, then it gives a magnifier to the aardvark\nRule7: If at least one animal needs the support of the bat, then the cat does not give a magnifying glass to the aardvark\nRule8: If at least one animal sings a victory song for the crocodile, then the aardvark knocks down the fortress of the sea bass\nRule9: If the dog sings a victory song for the sea bass and the aardvark knocks down the fortress of the sea bass, then the sea bass owes money to the blobfish\nRule10: If the sheep does not eat the food that belongs to the dog, then the dog sings a victory song for the sea bass\n\nRule1 is preferred over Rule10\nRule3 is preferred over Rule2\nRule4 is preferred over Rule2\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe cat has sixteen friends\nThe koala has a card that is black in color and is named Meadow\nThe koala has thirteen friends\nThe sheep needs support from the tiger\nThe viperfish is named Max\nThe wolverine needs support from the bat\n\nBased on the game state and the rules and preferences, does the sea bass owe money to the blobfish?\nQuestion: Does the sea bass owe money to the blobfish?",
        "idx": 417,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal needs the support of the spider, then the dog does not sing a victory song for the sea bass\nrule1() = needs_support(something, spider) => not sing_song(dog, victory_song_for(sea_bass))\n# Rule2: If the koala has more than 9 friends, then the koala does not sing a victory song for the crocodile\nrule2() = friends(koala) > 9 => not sing_song(koala, victory_song_for(crocodile))\n# Rule3: Regarding the koala, if it has a card whose color is one of the rainbow colors, then we can conclude that it sings a victory song for the crocodile\nrule3() = has(koala, card_with(color_in(rainbow_colors))) => sing_song(koala, victory_song_for(crocodile))\n# Rule4: Regarding the koala, if it has a name whose first letter is the same as the first letter of the viperfish's name, then we can conclude that it sings a song of victory for the crocodile\nrule4() = first_letter_of(name(koala)) == first_letter_of(name(viperfish)) => sing_song(koala, victory_song_for(crocodile))\n# Rule5: If you are positive that you saw one of the animals needs the support of the tiger, you can be certain that it will not eat the food that belongs to the dog\nrule5(something) = needs_support(something, tiger) => not eat_food(something, food_of(dog))\n# Rule6: Regarding the cat, if it has more than ten friends, then we can conclude that it gives a magnifier to the aardvark\nrule6() = friends(cat) > 10 => give(cat, magnifier, aardvark)\n# Rule7: If at least one animal needs the support of the bat, then the cat does not give a magnifying glass to the aardvark\nrule7() = needs_support(something, bat) => not give(cat, magnifier, aardvark)\n# Rule8: If at least one animal sings a victory song for the crocodile, then the aardvark knocks down the fortress of the sea bass\nrule8() = sing_song(something, victory_song_for(crocodile)) => knock_down_fortress(aardvark, fortress_of(sea_bass))\n# Rule9: For the sea bass, if the belief is that the dog sings a song of victory for the sea bass and the aardvark knocks down the fortress that belongs to the sea bass, then you can add \"the sea bass owes money to the blobfish\" to your conclusions\nrule9() = sing_song(dog, victory_song_for(sea_bass)) & knock_down_fortress(aardvark, fortress_of(sea_bass)) => owes_money_to(sea_bass, blobfish)\n# Rule10: If the sheep does not eat the food that belongs to the dog, then the dog sings a victory song for the sea bass.\nrule10() = not eat_food(sheep, food_of(dog)) => sing_song(dog, victory_song_for(sea_bass))\n# Rule1 is preferred over Rule10\norder(rule1) > order(rule10) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The cat has sixteen friends\nfriends(cat) = 16\n# The koala has a card that is black in color, and is named Meadow\nhas(koala, card_with(black_color)) = True\nname(koala, Meadow) = True\n# The koala has thirteen friends\nfriends(koala) = 13\n# The sheep needs support from the tiger\nneeds_support(sheep, tiger) = True\n# The viperfish is named Max\nname(viperfish, Max) = True\n# The wolverine needs support from the bat\nneeds_support(wolverine, bat) = True\n\n# Based on the game state and the rules and preferences, does the sea bass owe money to the blobfish?\nquestion = owes_money_to(sea_bass, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not eat the food of the halibut, then it does not hold the same number of points as the carp\nRule2: If the kudu needs the support of the cat and the buffalo prepares armor for the cat, then the cat is not going to eat the food that belongs to the halibut\nRule3: If at least one animal proceeds to the spot that is right after the spot of the polar bear, then the buffalo prepares armor for the cat\nRule4: If something raises a flag of peace for the octopus and needs support from the jellyfish, then it also needs support from the cat\n\nThe current state of the game is as follows\nThe kudu needs support from the jellyfish\nThe kudu raises a peace flag for the octopus\nThe mosquito proceeds to the spot right after the polar bear\n\nBased on the game state and the rules and preferences, does the cat hold the same number of points as the carp?\nQuestion: Does the cat hold the same number of points as the carp?",
        "idx": 418,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not eat the food of the halibut, then it does not hold the same number of points as the carp\nrule1() = not eat_food(something, food_of(halibut)) => not same_number_of_points(something, carp)\n# Rule2: For the cat, if the belief is that the kudu needs the support of the cat and the buffalo prepares armor for the cat, then you can add that \"the cat is not going to eat the food that belongs to the halibut\" to your conclusions\nrule2() = belief(kudu_needs_support(cat)) & prepare_armor(buffalo, cat) => not eat_food(cat, food_of(halibut))\n# Rule3: If at least one animal proceeds to the spot that is right after the spot of the polar bear, then the buffalo prepares armor for the cat\nrule3() = proceed_to_spot_right_after(something, spot_of(polar_bear)) => prepare_armor(buffalo, cat)\n# Rule4: If you see that something raises a flag of peace for the octopus and needs support from the jellyfish, what can you certainly conclude? You can conclude that it also needs support from the cat.\nrule4(something) = raise_flag_of_peace(something, octopus) & needs_support(something, jellyfish) => needs_support(something, cat)\n\n# The current state of the game is as follows\n# The kudu needs support from the jellyfish, and raises a peace flag for the octopus\nneeds_support(kudu, jellyfish) = True\nraise_flag_of_peace(kudu, octopus) = True\n# The mosquito proceeds to the spot right after the polar bear\nproceed_to_spot_right_after(mosquito, spot_of(polar_bear)) = True\n\n# Based on the game state and the rules and preferences, does the cat hold the same number of points as the carp?\nquestion = same_number_of_points(cat, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo sings a victory song for the black bear, then the black bear prepares armor for the cockroach\nRule2: If the panda bear does not roll the dice for the buffalo but the black bear raises a flag of peace for the buffalo, then the buffalo burns the warehouse that is in possession of the puffin\nRule3: If something sings a victory song for the leopard, then it does not burn the warehouse that is in possession of the puffin\nRule4: If the buffalo has fewer than 18 friends, then the buffalo rolls the dice for the penguin\nRule5: If something rolls the dice for the penguin, then it sings a song of victory for the leopard, too\nRule6: If something needs the support of the crocodile, then it does not wink at the koala\nRule7: If the moose learns the basics of resource management from the buffalo, then the buffalo does not roll the dice for the penguin\nRule8: If something attacks the green fields whose owner is the elephant, then it rolls the dice for the buffalo, too\nRule9: If something learns elementary resource management from the lobster, then it does not roll the dice for the buffalo\nRule10: If something removes one of the pieces of the halibut, then it also attacks the green fields whose owner is the elephant\nRule11: If something winks at the koala and prepares armor for the cockroach, then it raises a peace flag for the buffalo\nRule12: If the kiwi does not sing a victory song for the black bear, then the black bear winks at the koala\n\nRule12 is preferred over Rule6\nRule2 is preferred over Rule3\nRule7 is preferred over Rule4\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe black bear needs support from the crocodile\nThe buffalo has 15 friends\nThe kangaroo sings a victory song for the black bear\nThe moose learns the basics of resource management from the buffalo\nThe panda bear removes one of the pieces of the halibut\nThe kiwi does not sing a victory song for the black bear\n\nBased on the game state and the rules and preferences, does the buffalo burn the warehouse of the puffin?\nQuestion: Does the buffalo burn the warehouse of the puffin?",
        "idx": 419,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The black bear unquestionably prepares armor for the cockroach, in the case where the kangaroo sings a victory song for the black bear\nrule1() = sing_song(kangaroo, victory_song_for(black_bear)) => prepare_armor(black_bear, cockroach)\n# Rule2: For the buffalo, if the belief is that the panda bear does not roll the dice for the buffalo but the black bear raises a flag of peace for the buffalo, then you can add \"the buffalo burns the warehouse that is in possession of the puffin\" to your conclusions\nrule2() = not roll_dice(panda_bear, buffalo) & raise_flag_of_peace(black_bear, buffalo) => burn(warehouse_of(puffin), buffalo)\n# Rule3: If something sings a victory song for the leopard, then it does not burn the warehouse that is in possession of the puffin\nrule3() = sing_song(something, victory_song_for(leopard)) => not burn(warehouse_of(puffin), something)\n# Rule4: If the buffalo has fewer than 18 friends, then the buffalo rolls the dice for the penguin\nrule4() = friends(buffalo) < 18 => roll_dice(buffalo, penguin)\n# Rule5: If something rolls the dice for the penguin, then it sings a song of victory for the leopard, too\nrule5() = roll_dice(something, penguin) => sing_song(something, victory_song_for(leopard))\n# Rule6: If something needs the support of the crocodile, then it does not wink at the koala\nrule6() = needs_support(something, crocodile) => not wink_at(something, koala)\n# Rule7: If the moose learns the basics of resource management from the buffalo, then the buffalo is not going to roll the dice for the penguin\nrule7() = learn_basics_of_resource_management(moose, buffalo) => not roll_dice(buffalo, penguin)\n# Rule8: If something attacks the green fields whose owner is the elephant, then it rolls the dice for the buffalo, too\nrule8() = attack(green_fields_of(elephant), something) => roll_dice(something, buffalo)\n# Rule9: If you are positive that you saw one of the animals learns elementary resource management from the lobster, you can be certain that it will not roll the dice for the buffalo\nrule9() = learns_elementary_resource_management(something, lobster) => not roll_dice(something, buffalo)\n# Rule10: If you are positive that you saw one of the animals removes one of the pieces of the halibut, you can be certain that it will also attack the green fields whose owner is the elephant\nrule10() = remove(something, piece_of(halibut)) => attack(green_fields_of(elephant), something)\n# Rule11: Be careful when something winks at the koala and also prepares armor for the cockroach because in this case it will surely raise a peace flag for the buffalo (this may or may not be problematic)\nrule11() = wink_at(something, koala) & prepare_armor(something, cockroach) => raise_flag_of_peace(something, buffalo)\n# Rule12: The black bear unquestionably winks at the koala, in the case where the kiwi does not sing a victory song for the black bear.\nrule12() = not sing_song(kiwi, victory_song_for(black_bear)) => wink_at(black_bear, koala)\n# Rule12 is preferred over Rule6\norder(rule12) > order(rule6) = True\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The black bear needs support from the crocodile\nneeds_support(black_bear, crocodile) = True\n# The buffalo has 15 friends\nfriends(buffalo) = 15\n# The kangaroo sings a victory song for the black bear\nsing_song(kangaroo, victory_song_for(black_bear)) = True\n# The moose learns the basics of resource management from the buffalo\nlearn_basics_of_resource_management(moose, buffalo) = True\n# The panda bear removes from the board one of the pieces of the halibut\nremove(panda_bear, piece_of(halibut)) = True\n# The kiwi does not sing a victory song for the black bear\nnot sing_song(kiwi, victory_song_for(black_bear)) = True\n\n# Based on the game state and the rules and preferences, does the buffalo burn the warehouse of the puffin?\nquestion = burn(warehouse_of(puffin), buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals roll the dice for the raven, you can be certain that it will also give a magnifier to the aardvark\nRule2: If something knows the defensive plans of the starfish, then it winks at the aardvark, too\nRule3: The aardvark does not sing a victory song for the tilapia, in the case where the caterpillar rolls the dice for the aardvark\nRule4: If you are positive that one of the animals does not sing a victory song for the tilapia, you can be certain that it will proceed to the spot that is right after the spot of the dog without a doubt\nRule5: If the viperfish winks at the aardvark and the parrot gives a magnifier to the aardvark, then the aardvark sings a victory song for the tilapia\nRule6: If the caterpillar has something to sit on, then it rolls the dice for the aardvark\n\nRule3 is preferred over Rule5\n\nThe current state of the game is as follows\nThe caterpillar has a love seat sofa\nThe parrot rolls the dice for the raven\nThe viperfish knows the defensive plans of the starfish\n\nBased on the game state and the rules and preferences, does the aardvark proceed to the spot right after the dog?\nQuestion: Does the aardvark proceed to the spot right after the dog?",
        "idx": 420,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals rolls the dice for the raven, you can be certain that it will also give a magnifier to the aardvark\nrule1(something) = rolls_dice_for(something, raven) => give_magnifier_to(something, aardvark)\n# Rule2: If something knows the defensive plans of the starfish, then it winks at the aardvark, too\nrule2(something) = knows(defensive_plans_of(starfish), something) => wink_at(something, aardvark)\n# Rule3: The aardvark does not sing a victory song for the tilapia, in the case where the caterpillar rolls the dice for the aardvark\nrule3() = rolls_dice_for(caterpillar, aardvark) => not sing_song(aardvark, victory_song_for(tilapia))\n# Rule4: If you are positive that one of the animals does not sing a victory song for the tilapia, you can be certain that it will proceed to the spot that is right after the spot of the dog without a doubt\nrule4(something) = not sing_song(something, victory_song_for(tilapia)) => proceed(something, spot_right_after(spot_of(dog)))\n# Rule5: If the viperfish winks at the aardvark and the parrot gives a magnifier to the aardvark, then the aardvark sings a victory song for the tilapia\nrule5() = wink_at(viperfish, aardvark) & give_magnifier_to(parrot, aardvark) => sing_song(aardvark, victory_song_for(tilapia))\n# Rule6: Regarding the caterpillar, if it has something to sit on, then we can conclude that it rolls the dice for the aardvark.\nrule6() = has(caterpillar, something_to_sit_on) => rolls_dice_for(caterpillar, aardvark)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n\n# The current state of the game is as follows\n# The caterpillar has a love seat sofa\nhas(caterpillar, love_seat_sofa) = True\n# The parrot rolls the dice for the raven\nrolls_dice_for(parrot, raven) = True\n# The viperfish knows the defensive plans of the starfish\nknows(defensive_plans_of(starfish), viperfish) = True\n\n# Based on the game state and the rules and preferences, does the aardvark proceed to the spot right after the dog?\nquestion = proceed(aardvark, spot_right_after(spot_of(dog)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the mosquito has a device to connect to the internet, then the mosquito winks at the panda bear\nRule2: Be careful when something does not give a magnifying glass to the raven and also does not learn elementary resource management from the rabbit because in this case it will surely sing a victory song for the tilapia\nRule3: If you are positive that you saw one of the animals remove one of the pieces of the puffin, you can be certain that it will not show all her cards to the squid\nRule4: If the kudu has a device to connect to the internet, then the kudu proceeds to the spot that is right after the spot of the panda bear\nRule5: If at least one animal gives a magnifying glass to the doctorfish, then the goldfish does not sing a song of victory for the tilapia\nRule6: If the panda bear has a name whose first letter is the same as the first letter of the crocodile's name, then the panda bear removes one of the pieces of the puffin\nRule7: If you are positive that you saw one of the animals sing a victory song for the tilapia, you can be certain that it will also owe money to the cricket\nRule8: If the kudu purchased a time machine, then the kudu proceeds to the spot right after the panda bear\nRule9: If you are positive that you saw one of the animals show all her cards to the squid, you can be certain that it will also know the defensive plans of the wolverine\nRule10: If the zander does not wink at the mosquito, then the mosquito does not wink at the panda bear\nRule11: If the kudu proceeds to the spot that is right after the spot of the panda bear and the mosquito does not wink at the panda bear, then the panda bear shows all her cards to the squid\nRule12: If at least one animal owes money to the cricket, then the panda bear does not know the defensive plans of the wolverine\n\nRule1 is preferred over Rule10\nRule11 is preferred over Rule3\nRule12 is preferred over Rule9\nRule5 is preferred over Rule2\n\nThe current state of the game is as follows\nThe crocodile is named Casper\nThe kudu has a computer and invented a time machine\nThe panda bear has a card that is red in color\nThe panda bear is named Charlie\nThe goldfish does not give a magnifying glass to the raven and does not learn elementary resource management from the rabbit\nThe zander does not wink at the mosquito\n\nBased on the game state and the rules and preferences, does the panda bear know the defensive plans of the wolverine?\nQuestion: Does the panda bear know the defensive plans of the wolverine?",
        "idx": 421,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the mosquito has a device to connect to the internet, then the mosquito winks at the panda bear\nrule1() = has(mosquito, connect_to_internet(device)) => wink(mosquito, panda_bear)\n# Rule2: Be careful when something does not give a magnifying glass to the raven and also does not learn elementary resource management from the rabbit because in this case it will surely sing a victory song for the tilapia (this may or may not be problematic)\nrule2(something) = not give_magnifying_glass(something, raven) & not learn_elementary_resource_management_from(something, rabbit) => sing_song(something, victory_song_for(tilapia))\n# Rule3: If you are positive that you saw one of the animals removes one of the pieces of the puffin, you can be certain that it will not show all her cards to the squid\nrule3(something) = remove(something, piece_of(puffin)) => not show_all_cards(something, squid)\n# Rule4: If the kudu has a device to connect to the internet, then the kudu proceeds to the spot that is right after the spot of the panda bear\nrule4() = has(kudu, connect_to_internet(device)) => proceed(kudu, spot_right_after(spot_of(panda_bear)))\n# Rule5: If at least one animal gives a magnifying glass to the doctorfish, then the goldfish does not sing a song of victory for the tilapia\nrule5() = give_magnifying_glass(something, doctorfish) => not sing_song(goldfish, victory_song_for(tilapia))\n# Rule6: If the panda bear has a name whose first letter is the same as the first letter of the crocodile's name, then the panda bear removes one of the pieces of the puffin\nrule6() = first_letter_of(name(panda_bear)) == first_letter_of(name(crocodile)) => remove(panda_bear, piece_of(puffin))\n# Rule7: If you are positive that you saw one of the animals sings a victory song for the tilapia, you can be certain that it will also owe money to the cricket\nrule7(something) = sing_song(something, victory_song_for(tilapia)) => owes_money_to(something, cricket)\n# Rule8: If the kudu purchased a time machine, then the kudu proceeds to the spot right after the panda bear\nrule8() = purchased(kudu, time_machine) => proceed(kudu, spot_right_after(spot_of(panda_bear)))\n# Rule9: If you are positive that you saw one of the animals shows all her cards to the squid, you can be certain that it will also know the defensive plans of the wolverine\nrule9(something) = show_all_cards(something, squid) => knows(defensive_plans_of(wolverine), something)\n# Rule10: If the zander does not wink at the mosquito, then the mosquito does not wink at the panda bear\nrule10() = not wink(zander, mosquito) => not wink(mosquito, panda_bear)\n# Rule11: For the panda bear, if the belief is that the kudu proceeds to the spot that is right after the spot of the panda bear and the mosquito does not wink at the panda bear, then you can add \"the panda bear shows her cards (all of them) to the squid\" to your conclusions\nrule11() = proceed(kudu, spot_right_after(spot_of(panda_bear))) & not wink(mosquito, panda_bear) => show_all_cards(panda_bear, squid)\n# Rule12: If at least one animal owes money to the cricket, then the panda bear does not know the defensive plans of the wolverine.\nrule12() = owes_money_to(something, cricket) => not knows(defensive_plans_of(wolverine), panda_bear)\n# Rule1 is preferred over Rule10\norder(rule1) > order(rule10) = True\n# Rule11 is preferred over Rule3\norder(rule11) > order(rule3) = True\n# Rule12 is preferred over Rule9\norder(rule12) > order(rule9) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n\n# The current state of the game is as follows\n# The crocodile is named Casper\nname(crocodile, Casper) = True\n# The kudu has a computer, and invented a time machine\nhas(kudu, computer) = True\ninvented(kudu, time_machine) = True\n# The panda bear has a card that is red in color\nhas(panda_bear, card_with(red_color)) = True\n# The panda bear is named Charlie\nname(panda_bear, Charlie) = True\n# The goldfish does not give a magnifier to the raven, and does not learn the basics of resource management from the rabbit\nnot give_magnifying_glass(goldfish, raven) = True\nnot learn_elementary_resource_management_from(goldfish, rabbit) = True\n# The zander does not wink at the mosquito\nnot wink(zander, mosquito) = True\n\n# Based on the game state and the rules and preferences, does the panda bear know the defensive plans of the wolverine?\nquestion = knows(defensive_plans_of(wolverine), panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not raise a flag of peace for the moose and also does not eat the food of the jellyfish, then it will surely sing a victory song for the aardvark\nRule2: If the cheetah purchased a time machine, then it eats the food of the jellyfish\nRule3: If an animal sings a song of victory for the aardvark, then it removes one of the pieces of the whale\nRule4: If the cheetah has a card whose color appears in the flag of Belgium, then it eats the food of the jellyfish\nRule5: If the hare does not burn the warehouse of the cheetah, then the cheetah does not raise a peace flag for the moose\nRule6: If an animal does not learn elementary resource management from the kiwi, then it eats the food of the cheetah\nRule7: If at least one animal gives a magnifier to the crocodile, then the cheetah does not sing a victory song for the aardvark\nRule8: If the koala has something to sit on, then it does not offer a job to the turtle\nRule9: If the turtle and the buffalo eat the food of the cheetah, then the cheetah does not remove one of the pieces of the whale\nRule10: If the sea bass does not respect the koala, then the koala offers a job to the turtle\nRule11: If the cheetah has fewer than 5 friends, then it does not eat the food of the jellyfish\nRule12: If the turtle has something to carry apples and oranges, then it does not learn elementary resource management from the kiwi\n\nRule1 is preferred over Rule7\nRule10 is preferred over Rule8\nRule11 is preferred over Rule2\nRule11 is preferred over Rule4\nRule3 is preferred over Rule9\n\nThe current state of the game is as follows\nThe cheetah has 7 friends\nThe cheetah does not remove one of the pieces of the cockroach\nThe cheetah has a low-income job\nThe sea bass attacks the green fields owned by the koala\nThe turtle has a basket\nThe hare does not burn the warehouse of the cheetah\n\nBased on the game state and the rules and preferences, does the cheetah remove one of the pieces of the whale?\nQuestion: Does the cheetah remove one of the pieces of the whale?",
        "idx": 422,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not raise a flag of peace for the moose and also does not eat the food of the jellyfish because in this case it will surely sing a victory song for the aardvark (this may or may not be problematic)\nrule1(something) = not raise_flag_of_peace(something, moose) & not eat_food(something, jellyfish) => sing_song(something, victory_song_for(aardvark))\n# Rule2: If the cheetah purchased a time machine, then the cheetah eats the food of the jellyfish\nrule2() = purchased_time_machine(cheetah) => eat_food(cheetah, jellyfish)\n# Rule3: If you are positive that you saw one of the animals sings a song of victory for the aardvark, you can be certain that it will also remove from the board one of the pieces of the whale\nrule3(something) = sing_song(something, victory_song_for(aardvark)) => remove(something, piece_of(whale))\n# Rule4: Regarding the cheetah, if it has a card whose color appears in the flag of Belgium, then we can conclude that it eats the food that belongs to the jellyfish\nrule4() = has(cheetah, card_with(color_in_flag_of_belgium)) => eat_food(cheetah, jellyfish)\n# Rule5: If the hare does not burn the warehouse of the cheetah, then the cheetah does not raise a peace flag for the moose\nrule5() = not burn(warehouse_of(cheetah), hare) => not raise_flag_of_peace(cheetah, moose)\n# Rule6: If you are positive that one of the animals does not learn elementary resource management from the kiwi, you can be certain that it will eat the food of the cheetah without a doubt\nrule6(something) = not learn(something, elementary_resource_management_from(kiwi)) => eat_food(something, cheetah)\n# Rule7: If at least one animal gives a magnifier to the crocodile, then the cheetah does not sing a victory song for the aardvark\nrule7() = give_magnifier(something, crocodile) => not sing_song(cheetah, victory_song_for(aardvark))\n# Rule8: If the koala has something to sit on, then the koala does not offer a job to the turtle\nrule8() = has(koala, something_to_sit_on) => not offer_job(koala, turtle)\n# Rule9: If the turtle eats the food that belongs to the cheetah and the buffalo eats the food of the cheetah, then the cheetah will not remove one of the pieces of the whale\nrule9() = eat_food(turtle, cheetah) & eat_food(buffalo, cheetah) => not remove(cheetah, piece_of(whale))\n# Rule10: The koala unquestionably offers a job to the turtle, in the case where the sea bass does not respect the koala\nrule10() = not respect(sea_bass, koala) => offer_job(koala, turtle)\n# Rule11: Regarding the cheetah, if it has fewer than 5 friends, then we can conclude that it does not eat the food that belongs to the jellyfish\nrule11() = friends(cheetah) < 5 => not eat_food(cheetah, jellyfish)\n# Rule12: If the turtle has something to carry apples and oranges, then the turtle does not learn elementary resource management from the kiwi.\nrule12() = has(turtle, something_to_carry_apples_and_oranges) => not learn(turtle, elementary_resource_management_from(kiwi))\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule10 is preferred over Rule8\norder(rule10) > order(rule8) = True\n# Rule11 is preferred over Rule2\norder(rule11) > order(rule2) = True\n# Rule11 is preferred over Rule4\norder(rule11) > order(rule4) = True\n# Rule3 is preferred over Rule9\norder(rule3) > order(rule9) = True\n\n# The current state of the game is as follows\n# The cheetah has 7 friends, and does not remove from the board one of the pieces of the cockroach\nfriends(cheetah) = 7\nnot remove(cheetah, piece_of(cockroach)) = True\n# The cheetah has a low-income job\nhas_low_income_job(cheetah) = True\n# The sea bass attacks the green fields whose owner is the koala\nattacks(sea_bass, green_fields_of(koala)) = True\n# The turtle has a basket\nhas(turtle, basket) = True\n# The hare does not burn the warehouse of the cheetah\nnot burn(warehouse_of(cheetah), hare) = True\n\n# Based on the game state and the rules and preferences, does the cheetah remove from the board one of the pieces of the whale?\nquestion = remove(cheetah, piece_of(whale))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The dog raises a flag of peace for the polar bear, in the case where the kudu offers a job to the dog\nRule2: If at least one animal raises a flag of peace for the polar bear, then the cat rolls the dice for the hippopotamus\nRule3: If at least one animal rolls the dice for the hippopotamus, then the goldfish offers a job position to the catfish.\n\nThe current state of the game is as follows\nThe kudu offers a job to the dog\n\nBased on the game state and the rules and preferences, does the goldfish offer a job to the catfish?\nQuestion: Does the goldfish offer a job position to the catfish?",
        "idx": 423,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The dog unquestionably raises a flag of peace for the polar bear, in the case where the kudu offers a job to the dog\nrule1() = offer_job(kudu, dog) => raise_flag_of_peace(dog, polar_bear)\n# Rule2: If at least one animal raises a flag of peace for the polar bear, then the cat rolls the dice for the hippopotamus\nrule2() = raise_flag_of_peace(something, polar_bear) => roll_dice(cat, hippopotamus)\n# Rule3: If at least one animal rolls the dice for the hippopotamus, then the goldfish offers a job position to the catfish.\nrule3() = roll_dice(something, hippopotamus) => offer_job_position(goldfish, catfish)\n\n# The current state of the game is as follows\n# The kudu offers a job to the dog\noffer_job(kudu, dog) = True\n\n# Based on the game state and the rules and preferences, does the goldfish offer a job to the catfish?\nquestion = offer_job_position(goldfish, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panther is a fan of Chris Ronaldo, then the panther knows the defense plan of the panda bear\nRule2: If the blobfish has a name whose first letter is the same as the first letter of the goldfish's name, then the blobfish sings a song of victory for the squid\nRule3: If one of the animals sings a victory song for the grasshopper, then it will also eat the food that belongs to the buffalo\nRule4: If one of the animals sings a victory song for the phoenix, then it will also owe money to the hummingbird\nRule5: If the eagle eats the food of the squid and the panther rolls the dice for the squid, then the squid will not knock down the fortress of the baboon\nRule6: The eagle unquestionably eats the food that belongs to the squid, in the case where the crocodile owes money to the eagle\nRule7: If one of the animals knows the defense plan of the panda bear, then it will also roll the dice for the squid\nRule8: The crocodile owes money to the eagle whenever at least one animal knows the defensive plans of the grizzly bear\nRule9: If the squid has a card whose color starts with the letter \"i\", then it does not sing a song of victory for the grasshopper\nRule10: If the squid has something to sit on, then it sings a victory song for the grasshopper\nRule11: If the panther has a card with a primary color, then it knows the defense plan of the panda bear\nRule12: If the squid has more than three friends, then it winks at the kangaroo\nRule13: The squid unquestionably knows the defense plan of the sea bass, in the case where the blobfish sings a victory song for the squid\n\nRule9 is preferred over Rule10\n\nThe current state of the game is as follows\nThe blobfish is named Lola\nThe dog knows the defensive plans of the grizzly bear\nThe goldfish is named Lily\nThe leopard sings a victory song for the phoenix\nThe panther has a card that is green in color and hates Chris Ronaldo\nThe squid has a bench\nThe squid has thirteen friends\n\nBased on the game state and the rules and preferences, does the squid knock down the fortress of the baboon?\nQuestion: Does the squid knock down the fortress of the baboon?",
        "idx": 424,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panther is a fan of Chris Ronaldo, then the panther knows the defense plan of the panda bear\nrule1() = fan_of(panther, Chris_Ronaldo) => knows_defense_plan(panther, panda_bear)\n# Rule2: Regarding the blobfish, if it has a name whose first letter is the same as the first letter of the goldfish's name, then we can conclude that it sings a song of victory for the squid\nrule2() = first_letter_of(name(blobfish)) == first_letter_of(name(goldfish)) => sing_song(blobfish, victory_song_for(squid))\n# Rule3: If you are positive that you saw one of the animals sings a victory song for the grasshopper, you can be certain that it will also eat the food that belongs to the buffalo\nrule3() = sing_song(something, victory_song_for(grasshopper)) => eat_food(something, food_of(buffalo))\n# Rule4: If you are positive that you saw one of the animals sings a victory song for the phoenix, you can be certain that it will also owe money to the hummingbird\nrule4() = sing_song(something, victory_song_for(phoenix)) => owes_money_to(something, hummingbird)\n# Rule5: For the squid, if the belief is that the eagle eats the food of the squid and the panther rolls the dice for the squid, then you can add that \"the squid is not going to knock down the fortress of the baboon\" to your conclusions\nrule5() = belief(eagle_eats_food_of(squid)) & roll_dice(panther, squid) => not knock_down_fortress(squid, baboon)\n# Rule6: The eagle unquestionably eats the food that belongs to the squid, in the case where the crocodile owes money to the eagle\nrule6() = owes_money_to(crocodile, eagle) => eats_food(eagle, food_of(squid))\n# Rule7: If you are positive that you saw one of the animals knows the defense plan of the panda bear, you can be certain that it will also roll the dice for the squid\nrule7() = knows_defense_plan(something, panda_bear) => roll_dice(something, squid)\n# Rule8: The crocodile owes $$$ to the eagle whenever at least one animal knows the defensive plans of the grizzly bear\nrule8() = knows_defense_plan(something, grizzly_bear) => owes_money_to(crocodile, eagle)\n# Rule9: Regarding the squid, if it has a card whose color starts with the letter \"i\", then we can conclude that it does not sing a song of victory for the grasshopper\nrule9() = has(squid, card_with(color_starting_with(\"i\"))) => not sing_song(squid, victory_song_for(grasshopper))\n# Rule10: Regarding the squid, if it has something to sit on, then we can conclude that it sings a victory song for the grasshopper\nrule10() = has(squid, something_to_sit_on) => sing_song(squid, victory_song_for(grasshopper))\n# Rule11: Regarding the panther, if it has a card with a primary color, then we can conclude that it knows the defense plan of the panda bear\nrule11() = has(panther, card_with(primary_color)) => knows_defense_plan(panther, panda_bear)\n# Rule12: If the squid has more than three friends, then the squid winks at the kangaroo\nrule12() = friends(squid) > 3 => wink(squid, kangaroo)\n# Rule13: The squid unquestionably knows the defense plan of the sea bass, in the case where the blobfish sings a victory song for the squid.\nrule13() = sing_song(blobfish, victory_song_for(squid)) => knows_defense_plan(squid, sea_bass)\n# Rule9 is preferred over Rule10\norder(rule9) > order(rule10) = True\n\n# The current state of the game is as follows\n# The blobfish is named Lola\nname(blobfish, Lola) = True\n# The dog knows the defensive plans of the grizzly bear\nknows_defense_plan(dog, grizzly_bear) = True\n# The goldfish is named Lily\nname(goldfish, Lily) = True\n# The leopard sings a victory song for the phoenix\nsing_song(leopard, victory_song_for(phoenix)) = True\n# The panther has a card that is green in color, and hates Chris Ronaldo\nhas(panther, card_with(green_color)) = True\nhates(panther, Chris_Ronaldo) = True\n# The squid has a bench\nhas(squid, bench) = True\n# The squid has thirteen friends\nfriends(squid) = 13\n\n# Based on the game state and the rules and preferences, does the squid knock down the fortress of the baboon?\nquestion = knock_down_fortress(squid, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish has more than seventeen friends, then it rolls the dice for the meerkat\nRule2: If the lobster attacks the green fields of the koala and the blobfish does not burn the warehouse of the koala, then the koala shows all her cards to the mosquito\nRule3: If something needs support from the puffin, then it burns the warehouse of the koala\nRule4: If one of the animals sings a song of victory for the kiwi, then it will also attack the green fields of the koala\nRule5: If the blobfish has a high-quality paper, then it rolls the dice for the meerkat\nRule6: If one of the animals sings a song of victory for the tilapia, then it will also sing a victory song for the kiwi\nRule7: If one of the animals rolls the dice for the meerkat, then it will not burn the warehouse of the koala\n\nRule3 is preferred over Rule7\n\nThe current state of the game is as follows\nThe blobfish has seven smart friends and 2 friends that are not smart\nThe blobfish published a high-quality paper\nThe lobster rolls the dice for the tilapia\n\nBased on the game state and the rules and preferences, does the koala show all her cards to the mosquito?\nQuestion: Does the koala show all her cards to the mosquito?",
        "idx": 425,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the blobfish, if it has more than seventeen friends, then we can conclude that it rolls the dice for the meerkat\nrule1() = friends(blobfish) > 17 => rolls_dice(blobfish, meerkat)\n# Rule2: For the koala, if the belief is that the lobster attacks the green fields of the koala and the blobfish does not burn the warehouse of the koala, then you can add \"the koala shows her cards (all of them) to the mosquito\" to your conclusions\nrule2() = belief(lobster_attacks_green_fields_of(koala)) & not burn(warehouse_of(koala), blobfish) => show_cards(koala, mosquito)\n# Rule3: If something needs support from the puffin, then it burns the warehouse of the koala, too\nrule3(something) = needs_support(something, puffin) => burn(warehouse_of(koala), something)\n# Rule4: If you are positive that you saw one of the animals sings a song of victory for the kiwi, you can be certain that it will also attack the green fields of the koala\nrule4(something) = sing_song(something, victory_song_for(kiwi)) => attack_green_fields_of(koala, something)\n# Rule5: Regarding the blobfish, if it has a high-quality paper, then we can conclude that it rolls the dice for the meerkat\nrule5() = has(blobfish, high_quality_paper) => rolls_dice(blobfish, meerkat)\n# Rule6: If you are positive that you saw one of the animals sings a song of victory for the tilapia, you can be certain that it will also sing a victory song for the kiwi\nrule6(something) = sing_song(something, victory_song_for(tilapia)) => sing_song(something, victory_song_for(kiwi))\n# Rule7: If you are positive that you saw one of the animals rolls the dice for the meerkat, you can be certain that it will not burn the warehouse of the koala.\nrule7(something) = rolls_dice(something, meerkat) => not burn(warehouse_of(koala), something)\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n\n# The current state of the game is as follows\n# The blobfish has seven friends that are smart and 2 friends that are not\nfriends(blobfish) = 7\n# The blobfish published a high-quality paper\nhas(blobfish, high_quality_paper) = True\n# The lobster rolls the dice for the tilapia\nrolls_dice(lobster, tilapia) = True\n\n# Based on the game state and the rules and preferences, does the koala show all her cards to the mosquito?\nquestion = show_cards(koala, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The mosquito gives a magnifier to the panther whenever at least one animal knocks down the fortress that belongs to the eagle\nRule2: The oscar knocks down the fortress of the eagle whenever at least one animal knows the defensive plans of the snail\nRule3: If the lobster knocks down the fortress of the swordfish, then the swordfish becomes an enemy of the oscar\nRule4: If the meerkat owns a luxury aircraft, then it does not know the defense plan of the snail\nRule5: The meerkat knows the defense plan of the snail, in the case where the spider does not raise a flag of peace for the meerkat\nRule6: If the swordfish has a name whose first letter is the same as the first letter of the eel's name, then it does not become an enemy of the oscar\nRule7: If the swordfish has a device to connect to the internet, then it does not become an enemy of the oscar\nRule8: The rabbit does not learn the basics of resource management from the oscar, in the case where the cow eats the food of the rabbit\n\nRule5 is preferred over Rule4\nRule6 is preferred over Rule3\nRule7 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cow eats the food of the rabbit\nThe donkey is named Mojo\nThe eel is named Tessa\nThe lobster knocks down the fortress of the swordfish\nThe meerkat dreamed of a luxury aircraft\nThe meerkat has 14 friends\nThe rabbit has a card that is red in color\nThe rabbit is named Bella\nThe swordfish has a saxophone\nThe spider does not raise a peace flag for the meerkat\n\nBased on the game state and the rules and preferences, does the mosquito give a magnifier to the panther?\nQuestion: Does the mosquito give a magnifier to the panther?",
        "idx": 426,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The mosquito gives a magnifier to the panther whenever at least one animal knocks down the fortress that belongs to the eagle\nrule1() = knock_down_fortress(something, fortress_of(eagle)) => give_magnifier(mosquito, panther)\n# Rule2: The oscar knocks down the fortress of the eagle whenever at least one animal knows the defensive plans of the snail\nrule2() = knows(defensive_plans_of(snail), something) => knock_down_fortress(oscar, fortress_of(eagle))\n# Rule3: If the lobster knocks down the fortress of the swordfish, then the swordfish becomes an enemy of the oscar\nrule3() = knock_down_fortress(lobster, fortress_of(swordfish)) => enemy(swordfish, oscar)\n# Rule4: Regarding the meerkat, if it owns a luxury aircraft, then we can conclude that it does not know the defense plan of the snail\nrule4() = owns(meerkat, luxury_aircraft) => not knows(defense_plan_of(snail), meerkat)\n# Rule5: The meerkat unquestionably knows the defense plan of the snail, in the case where the spider does not raise a flag of peace for the meerkat\nrule5() = not raise_flag_of_peace(spider, meerkat) => knows(defense_plan_of(snail), meerkat)\n# Rule6: Regarding the swordfish, if it has a name whose first letter is the same as the first letter of the eel's name, then we can conclude that it does not become an enemy of the oscar\nrule6() = first_letter_of(name(swordfish)) == first_letter_of(name(eel)) => not enemy(swordfish, oscar)\n# Rule7: If the swordfish has a device to connect to the internet, then the swordfish does not become an enemy of the oscar\nrule7() = has(swordfish, connect_to_internet(device)) => not enemy(swordfish, oscar)\n# Rule8: The rabbit does not learn the basics of resource management from the oscar, in the case where the cow eats the food of the rabbit.\nrule8() = eat_food(cow, rabbit) => not learn_basics_of_resource_management(rabbit, oscar)\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cow eats the food of the rabbit\neat_food(cow, rabbit) = True\n# The donkey is named Mojo\nname(donkey, Mojo) = True\n# The eel is named Tessa\nname(eel, Tessa) = True\n# The lobster knocks down the fortress of the swordfish\nknock_down_fortress(lobster, fortress_of(swordfish)) = True\n# The meerkat dreamed of a luxury aircraft\ndreamed_of(meerkat, luxury_aircraft) = True\n# The meerkat has 14 friends\nfriends(meerkat) = 14\n# The rabbit has a card that is red in color\nhas(rabbit, card_with(red_color)) = True\n# The rabbit is named Bella\nname(rabbit, Bella) = True\n# The swordfish has a saxophone\nhas(swordfish, saxophone) = True\n# The spider does not raise a peace flag for the meerkat\nnot raise_flag_of_peace(spider, meerkat) = True\n\n# Based on the game state and the rules and preferences, does the mosquito give a magnifier to the panther?\nquestion = give_magnifier(mosquito, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The carp raises a peace flag for the kangaroo whenever at least one animal owes money to the grizzly bear\nRule2: If the salmon offers a job to the carp, then the carp does not offer a job position to the raven\nRule3: If something does not offer a job to the raven, then it does not eat the food of the eagle\nRule4: If something does not eat the food that belongs to the eagle but raises a flag of peace for the kangaroo, then it does not eat the food that belongs to the koala\nRule5: If something does not hold an equal number of points as the viperfish, then it does not owe money to the grizzly bear\nRule6: The catfish owes money to the grizzly bear whenever at least one animal shows all their cards to the grizzly bear\n\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe dog learns the basics of resource management from the carp\nThe rabbit needs support from the carp\nThe salmon offers a job to the carp\nThe zander shows all her cards to the grizzly bear\nThe catfish does not hold the same number of points as the viperfish\n\nBased on the game state and the rules and preferences, does the carp eat the food of the koala?\nQuestion: Does the carp eat the food of the koala?",
        "idx": 427,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The carp raises a peace flag for the kangaroo whenever at least one animal owes money to the grizzly bear\nrule1() = owes_money_to(something, grizzly_bear) => raise_flag_of_peace(carp, kangaroo)\n# Rule2: If the salmon offers a job to the carp, then the carp is not going to offer a job position to the raven\nrule2() = offer_job(salmon, carp) => not offer_job_position(carp, raven)\n# Rule3: If something does not offer a job to the raven, then it does not eat the food of the eagle\nrule3() = not offer_job_position(something, raven) => not eat_food_of(something, eagle)\n# Rule4: If you see that something does not eat the food that belongs to the eagle but it raises a flag of peace for the kangaroo, what can you certainly conclude? You can conclude that it is not going to eat the food that belongs to the koala\nrule4() = not eat_food_of(something, eagle) & raise_flag_of_peace(something, kangaroo) => not eat_food_of(something, koala)\n# Rule5: If something does not hold an equal number of points as the viperfish, then it does not owe $$$ to the grizzly bear\nrule5() = not hold_equal_number_of_points(something, viperfish) => not owes_money_to(something, grizzly_bear)\n# Rule6: The catfish owes $$$ to the grizzly bear whenever at least one animal shows her cards (all of them) to the grizzly bear.\nrule6() = show_cards(something, grizzly_bear) => owes_money_to(catfish, grizzly_bear)\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The dog learns the basics of resource management from the carp\nlearn_basics_of_resource_management(dog, carp) = True\n# The rabbit needs support from the carp\nneeds_support(rabbit, carp) = True\n# The salmon offers a job to the carp\noffer_job(salmon, carp) = True\n# The zander shows all her cards to the grizzly bear\nshow_cards(zander, grizzly_bear) = True\n# The catfish does not hold the same number of points as the viperfish\nhold_equal_number_of_points(catfish, viperfish) = False\n\n# Based on the game state and the rules and preferences, does the carp eat the food of the koala?\nquestion = eat_food_of(carp, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The buffalo holds the same number of points as the cricket whenever at least one animal eats the food that belongs to the kiwi\nRule2: If the lion has fewer than fifteen friends, then it owes money to the elephant\nRule3: If something removes one of the pieces of the phoenix from the board, then it eats the food that belongs to the kiwi\nRule4: If something does not wink at the cockroach but knocks down the fortress that belongs to the sheep, then it will remove one of the pieces of the phoenix\nRule5: If the raven steals five points from the eagle, then the eagle learns elementary resource management from the elephant\nRule6: If something does not offer a job to the cockroach, then it does not remove one of the pieces of the phoenix\n\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe elephant knocks down the fortress of the sheep\nThe elephant winks at the cockroach\nThe lion has 6 friends\nThe raven steals five points from the eagle\n\nBased on the game state and the rules and preferences, does the buffalo hold the same number of points as the cricket?\nQuestion: Does the buffalo hold the same number of points as the cricket?",
        "idx": 428,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The buffalo holds the same number of points as the cricket whenever at least one animal eats the food that belongs to the kiwi\nrule1() = eats_food(something, food_of(kiwi)) => points(buffalo) == points(cricket)\n# Rule2: Regarding the lion, if it has fewer than fifteen friends, then we can conclude that it owes $$$ to the elephant\nrule2() = friends(lion) < 15 => owes_money_to(lion, elephant)\n# Rule3: If something removes from the board one of the pieces of the phoenix, then it eats the food that belongs to the kiwi, too\nrule3() = remove(something, piece_of(phoenix)) => eats_food(something, food_of(kiwi))\n# Rule4: Be careful when something does not wink at the cockroach but knocks down the fortress that belongs to the sheep because in this case it will, surely, remove one of the pieces of the phoenix (this may or may not be problematic)\nrule4(something) = not wink(something, cockroach) & knock_down(something, fortress_of(sheep)) => remove(something, piece_of(phoenix))\n# Rule5: If the raven steals five points from the eagle, then the eagle learns elementary resource management from the elephant\nrule5() = steal_points(raven, 5, eagle) => learn(eagle, elementary_resource_management_from(elephant))\n# Rule6: If something does not offer a job to the cockroach, then it does not remove one of the pieces of the phoenix.\nrule6() = not offer_job(something, cockroach) => not remove(something, piece_of(phoenix))\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The elephant knocks down the fortress of the sheep\nknock_down(elephant, fortress_of(sheep)) = True\n# The elephant winks at the cockroach\nwink(elephant, cockroach) = True\n# The lion has 6 friends\nfriends(lion) = 6\n# The raven steals five points from the eagle\nsteal_points(raven, 5, eagle) = True\n\n# Based on the game state and the rules and preferences, does the buffalo hold the same number of points as the cricket?\nquestion = points(buffalo) == points(cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the goldfish does not attack the green fields owned by the squid, then the squid respects the elephant\nRule2: If the starfish burns the warehouse of the panther, then the panther does not raise a peace flag for the wolverine\nRule3: If the bat has more than 3 friends, then it becomes an actual enemy of the grizzly bear\nRule4: If the bat has a name whose first letter is the same as the first letter of the eel's name, then it does not become an enemy of the grizzly bear\nRule5: If you see one of the animals offering a job position to the buffalo, you can be certain that it will also owe money to the turtle\nRule6: If the panther has something to carry apples and oranges, then it raises a peace flag for the wolverine\nRule7: If at least one animal attacks the green fields of the baboon, then the goldfish does not owe money to the spider\nRule8: If something owes money to the spider, then it does not attack the green fields owned by the squid\nRule9: If you see something not raising a peace flag for the wolverine but owing money to the turtle, you can be certain that it also gives a magnifying glass to the squid\nRule10: If you see one of the animals removing a piece of the sea bass, you can be certain that it will also prepare armor for the squid\nRule11: If the kiwi has something to carry apples and oranges, then it does not proceed to the spot right after the penguin\nRule12: If the kiwi has a name whose first letter is the same as the first letter of the cat's name, then it does not proceed to the spot right after the penguin\nRule13: If the goldfish has more than five friends, then it owes money to the spider\nRule14: If the lobster has a name whose first letter is the same as the first letter of the sun bear's name, then it shows all her cards to the panther\nRule15: If the bat purchased a time machine, then it becomes an enemy of the grizzly bear\nRule16: If the bat becomes an actual enemy of the grizzly bear, then the grizzly bear does not prepare armor for the squid\nRule17: If the kiwi has something to carry apples and oranges, then it proceeds to the spot right after the penguin\n\nRule10 is preferred over Rule16\nRule13 is preferred over Rule7\nRule17 is preferred over Rule11\nRule17 is preferred over Rule12\nRule2 is preferred over Rule6\nRule4 is preferred over Rule15\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe bat has one energetic friend and six non-energetic friends\nThe bat invented a time machine\nThe cat is named Paco\nThe eel is named Tessa\nThe ferret attacks the green fields owned by the baboon\nThe goldfish has fourteen friends\nThe kiwi has a banana-strawberry smoothie\nThe kiwi is named Pashmak\nThe kiwi has a knapsack\nThe lobster is named Bella\nThe panther has a flute\nThe panther has a violin\nThe panther offers a job position to the buffalo\nThe starfish burns the warehouse of the panther\nThe sun bear is named Buddy\n\nBased on the game state and the rules and preferences, does the squid respect the elephant?\nQuestion: Does the squid respect the elephant?",
        "idx": 429,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the goldfish does not attack the green fields whose owner is the squid, then the squid respects the elephant\nrule1() = not attack(green_fields_of(squid), goldfish) => respects(squid, elephant)\n# Rule2: If the starfish burns the warehouse of the panther, then the panther is not going to raise a peace flag for the wolverine\nrule2() = burn(warehouse_of(panther), starfish) => not raise_flag_of_peace(panther, wolverine)\n# Rule3: Regarding the bat, if it has more than 3 friends, then we can conclude that it becomes an actual enemy of the grizzly bear\nrule3() = friends(bat) > 3 => actual_enemy(bat, grizzly_bear)\n# Rule4: Regarding the bat, if it has a name whose first letter is the same as the first letter of the eel's name, then we can conclude that it does not become an enemy of the grizzly bear\nrule4() = first_letter_of(name(bat)) == first_letter_of(name(eel)) => not enemy(bat, grizzly_bear)\n# Rule5: If you are positive that you saw one of the animals offers a job position to the buffalo, you can be certain that it will also owe money to the turtle\nrule5(something) = offer_job_position(something, buffalo) => owes_money_to(something, turtle)\n# Rule6: If the panther has something to carry apples and oranges, then the panther raises a peace flag for the wolverine\nrule6() = has(panther, carry_apples_and_oranges) => raise_flag_of_peace(panther, wolverine)\n# Rule7: If at least one animal attacks the green fields of the baboon, then the goldfish does not owe $$$ to the spider\nrule7() = attack(green_fields_of(baboon), something) => not owes_money_to(goldfish, spider)\n# Rule8: If something owes money to the spider, then it does not attack the green fields whose owner is the squid\nrule8() = owes_money_to(something, spider) => not attack(green_fields_of(squid), something)\n# Rule9: If you see that something does not raise a flag of peace for the wolverine but it owes $$$ to the turtle, what can you certainly conclude? You can conclude that it also gives a magnifying glass to the squid\nrule9() = not raise_flag_of_peace(something, wolverine) & owes_money_to(something, turtle) => give(something, magnifying_glass, squid)\n# Rule10: If you are positive that you saw one of the animals removes one of the pieces of the sea bass, you can be certain that it will also prepare armor for the squid\nrule10(something) = remove(something, piece_of(sea_bass)) => prepare_armor(something, squid)\n# Rule11: If the kiwi has something to carry apples and oranges, then the kiwi does not proceed to the spot right after the penguin\nrule11() = has(kiwi, carry_apples_and_oranges) => not proceed(kiwi, spot_right_after(spot_of(penguin)))\n# Rule12: Regarding the kiwi, if it has a name whose first letter is the same as the first letter of the cat's name, then we can conclude that it does not proceed to the spot that is right after the spot of the penguin\nrule12() = first_letter_of(name(kiwi)) == first_letter_of(name(cat)) => not proceed(kiwi, spot_right_after(spot_of(penguin)))\n# Rule13: If the goldfish has more than five friends, then the goldfish owes money to the spider\nrule13() = friends(goldfish) > 5 => owes_money_to(goldfish, spider)\n# Rule14: Regarding the lobster, if it has a name whose first letter is the same as the first letter of the sun bear's name, then we can conclude that it shows all her cards to the panther\nrule14() = first_letter_of(name(lobster)) == first_letter_of(name(sun_bear)) => show_cards(lobster, panther)\n# Rule15: Regarding the bat, if it purchased a time machine, then we can conclude that it becomes an enemy of the grizzly bear\nrule15() = purchased(bat, time_machine) => enemy(bat, grizzly_bear)\n# Rule16: The grizzly bear does not prepare armor for the squid, in the case where the bat becomes an actual enemy of the grizzly bear\nrule16() = actual_enemy(bat, grizzly_bear) => not prepare_armor(grizzly_bear, squid)\n# Rule17: If the kiwi has something to carry apples and oranges, then the kiwi proceeds to the spot right after the penguin.\nrule17() = has(kiwi, carry_apples_and_oranges) => proceed(kiwi, spot_right_after(spot_of(penguin)))\n# Rule10 is preferred over Rule16\norder(rule10) > order(rule16) = True\n# Rule13 is preferred over Rule7\norder(rule13) > order(rule7) = True\n# Rule17 is preferred over Rule11\norder(rule17) > order(rule11) = True\n# Rule17 is preferred over Rule12\norder(rule17) > order(rule12) = True\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule4 is preferred over Rule15\norder(rule4) > order(rule15) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The bat has one friend that is energetic and six friends that are not, and invented a time machine\nfriends(bat) = 1 energetic_friend + 6 non_energetic_friends\ninvented(bat, time_machine) = True\n# The cat is named Paco\nname(cat, Paco) = True\n# The eel is named Tessa\nname(eel, Tessa) = True\n# The ferret attacks the green fields whose owner is the baboon\nattack(green_fields_of(baboon), ferret) = True\n# The goldfish has fourteen friends\nfriends(goldfish) = 14\n# The kiwi has a banana-strawberry smoothie, and is named Pashmak\nhas(kiwi, banana_strawberry_smoothie) = True\nname(kiwi, Pashmak) = True\n# The kiwi has a knapsack\nhas(kiwi, knapsack) = True\n# The lobster is named Bella\nname(lobster, Bella) = True\n# The panther has a flute\nhas(panther, flute) = True\n# The panther has a violin, and offers a job to the buffalo\nhas(panther, violin) = True\noffer_job_position(panther, buffalo) = True\n# The starfish burns the warehouse of the panther\nburn(warehouse_of(panther), starfish) = True\n# The sun bear is named Buddy\nname(sun_bear, Buddy) = True\n\n# Based on the game state and the rules and preferences, does the squid respect the elephant?\nquestion = respects(squid, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The squid does not learn the basics of resource management from the cat, in the case where the carp proceeds to the spot that is right after the spot of the squid\nRule2: If the kangaroo created a time machine, then it winks at the eagle\nRule3: If the squid learns elementary resource management from the cat and the lion rolls the dice for the cat, then the cat will not know the defense plan of the zander\nRule4: If the name of the kangaroo starts with the same letter as the name of the panda bear, then the kangaroo does not wink at the eagle\nRule5: The squid learns the basics of resource management from the cat whenever at least one animal winks at the eagle\nRule6: If the pig has a card with a primary color, then it becomes an enemy of the kudu\nRule7: The lion rolls the dice for the cat whenever at least one animal becomes an enemy of the kudu\n\nRule1 is preferred over Rule5\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe kangaroo invented a time machine\nThe kangaroo is named Meadow\nThe panda bear is named Max\nThe pig has a card that is blue in color\n\nBased on the game state and the rules and preferences, does the cat know the defensive plans of the zander?\nQuestion: Does the cat know the defensive plans of the zander?",
        "idx": 430,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The squid does not learn the basics of resource management from the cat, in the case where the carp proceeds to the spot that is right after the spot of the squid\nrule1() = proceed(carp, spot_right_after(spot_of(squid))) => not learn_basics_of_resource_management(squid, cat)\n# Rule2: Regarding the kangaroo, if it created a time machine, then we can conclude that it winks at the eagle\nrule2() = created_time_machine(kangaroo) => wink(kangaroo, eagle)\n# Rule3: If the squid learns elementary resource management from the cat and the lion rolls the dice for the cat, then the cat will not know the defense plan of the zander\nrule3() = learn_elementary_resource_management(squid, cat) & roll_dice(lion, cat) => not know_defense_plan(cat, zander)\n# Rule4: Regarding the kangaroo, if it has a name whose first letter is the same as the first letter of the panda bear's name, then we can conclude that it does not wink at the eagle\nrule4() = first_letter_of(name(kangaroo)) == first_letter_of(name(panda_bear)) => not wink(kangaroo, eagle)\n# Rule5: The squid learns the basics of resource management from the cat whenever at least one animal winks at the eagle\nrule5() = wink(animal, eagle) => learn_basics_of_resource_management(squid, cat)\n# Rule6: Regarding the pig, if it has a card with a primary color, then we can conclude that it becomes an enemy of the kudu\nrule6() = has(pig, card_with(primary_color)) => enemy(pig, kudu)\n# Rule7: The lion rolls the dice for the cat whenever at least one animal becomes an enemy of the kudu.\nrule7() = enemy(animal, kudu) => roll_dice(lion, cat)\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The kangaroo invented a time machine\ncreated_time_machine(kangaroo) = True\n# The kangaroo is named Meadow\nname(kangaroo, Meadow) = True\n# The panda bear is named Max\nname(panda_bear, Max) = True\n# The pig has a card that is blue in color\nhas(pig, card_with(blue_color)) = True\n\n# Based on the game state and the rules and preferences, does the cat know the defensive plans of the zander?\nquestion = know_defense_plan(cat, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the goldfish has a sharp object, then it attacks the green fields of the kiwi\nRule2: If the crocodile owes money to the puffin and the kiwi does not give a magnifying glass to the puffin, then the puffin eats the food of the doctorfish\nRule3: The crocodile holds the same number of points as the cat whenever at least one animal removes one of the pieces of the donkey\nRule4: If the goldfish has a device to connect to the internet, then it attacks the green fields of the kiwi\nRule5: If the kiwi has more than 1 friend, then the kiwi does not roll the dice for the swordfish\nRule6: If at least one animal gives a magnifying glass to the sun bear, then the crocodile owes money to the puffin\nRule7: The starfish gives a magnifying glass to the sun bear whenever at least one animal removes one of the pieces of the aardvark\nRule8: If something rolls the dice for the dog and respects the oscar, then it does not attack the green fields whose owner is the kiwi\nRule9: If one of the animals rolls the dice for the swordfish, then it does not give a magnifying glass to the puffin\nRule10: If one of the animals learns elementary resource management from the eagle, then it does not eat the food of the doctorfish\nRule11: The kiwi rolls the dice for the swordfish, in the case where the meerkat does not prepare armor for the kiwi\n\nRule11 is preferred over Rule5\nRule2 is preferred over Rule10\nRule8 is preferred over Rule1\nRule8 is preferred over Rule4\n\nThe current state of the game is as follows\nThe crocodile hates Chris Ronaldo and is named Lucy\nThe goldfish has a cell phone, a flute, and respects the oscar\nThe hare removes from the board one of the pieces of the aardvark\nThe meerkat prepares armor for the kiwi\nThe squirrel is named Mojo\nThe starfish has a card that is indigo in color\nThe starfish has six friends\nThe whale removes from the board one of the pieces of the donkey\n\nBased on the game state and the rules and preferences, does the puffin eat the food of the doctorfish?\nQuestion: Does the puffin eat the food of the doctorfish?",
        "idx": 431,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the goldfish, if it has a sharp object, then we can conclude that it attacks the green fields of the kiwi\nrule1() = has(goldfish, sharp_object) => attack(goldfish, green_fields_of(kiwi))\n# Rule2: If the crocodile owes $$$ to the puffin and the kiwi does not give a magnifying glass to the puffin, then, inevitably, the puffin eats the food of the doctorfish\nrule2() = owes_money_to(crocodile, puffin) & not give_magnifying_glass(kiwi, puffin) => eat_food(puffin, doctorfish)\n# Rule3: The crocodile holds the same number of points as the cat whenever at least one animal removes one of the pieces of the donkey\nrule3() = remove(animal, piece_of(donkey)) => points(crocodile) == points(cat)\n# Rule4: Regarding the goldfish, if it has a device to connect to the internet, then we can conclude that it attacks the green fields of the kiwi\nrule4() = has(goldfish, connect_to_internet(device)) => attack(goldfish, green_fields_of(kiwi))\n# Rule5: If the kiwi has more than 1 friend, then the kiwi does not roll the dice for the swordfish\nrule5() = friends(kiwi) > 1 => not roll_dice(kiwi, swordfish)\n# Rule6: If at least one animal gives a magnifying glass to the sun bear, then the crocodile owes money to the puffin\nrule6() = give_magnifying_glass(animal, sun_bear) => owes_money_to(crocodile, puffin)\n# Rule7: The starfish gives a magnifying glass to the sun bear whenever at least one animal removes one of the pieces of the aardvark\nrule7() = remove(animal, piece_of(aardvark)) => give_magnifying_glass(starfish, sun_bear)\n# Rule8: If you see that something rolls the dice for the dog and respects the oscar, what can you certainly conclude? You can conclude that it does not attack the green fields whose owner is the kiwi\nrule8() = roll_dice(something, dog) & respects(something, oscar) => not attack(something, green_fields_of(kiwi))\n# Rule9: If you are positive that you saw one of the animals rolls the dice for the swordfish, you can be certain that it will not give a magnifying glass to the puffin\nrule9() = roll_dice(animal, swordfish) => not give_magnifying_glass(animal, puffin)\n# Rule10: If you are positive that you saw one of the animals learns elementary resource management from the eagle, you can be certain that it will not eat the food of the doctorfish\nrule10() = learn(animal, elementary_resource_management_from(eagle)) => not eat_food(animal, doctorfish)\n# Rule11: The kiwi unquestionably rolls the dice for the swordfish, in the case where the meerkat does not prepare armor for the kiwi.\nrule11() = not prepare_armor(meerkat, kiwi) => roll_dice(kiwi, swordfish)\n# Rule11 is preferred over Rule5\norder(rule11) > order(rule5) = True\n# Rule2 is preferred over Rule10\norder(rule2) > order(rule10) = True\n# Rule8 is preferred over Rule1\norder(rule8) > order(rule1) = True\n# Rule8 is preferred over Rule4\norder(rule8) > order(rule4) = True\n\n# The current state of the game is as follows\n# The crocodile hates Chris Ronaldo, and is named Lucy\nhates(crocodile, Chris_Ronaldo) = True\nname(crocodile, Lucy) = True\n# The goldfish has a cell phone, has a flute, and respects the oscar\nhas(goldfish, cell_phone) = True\nhas(goldfish, flute) = True\nrespects(goldfish, oscar) = True\n# The hare removes from the board one of the pieces of the aardvark\nremove(hare, piece_of(aardvark)) = True\n# The meerkat prepares armor for the kiwi\nprepare_armor(meerkat, kiwi) = True\n# The squirrel is named Mojo\nname(squirrel, Mojo) = True\n# The starfish has a card that is indigo in color\nhas(starfish, card_with(indigo_color)) = True\n# The starfish has six friends\nfriends(starfish) = 6\n# The whale removes from the board one of the pieces of the donkey\nremove(whale, piece_of(donkey)) = True\n\n# Based on the game state and the rules and preferences, does the puffin eat the food of the doctorfish?\nquestion = eat_food(puffin, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not knock down the fortress of the squid, you can be certain that it will owe money to the doctorfish without a doubt\nRule2: If something owes money to the doctorfish, then it becomes an actual enemy of the tilapia, too\nRule3: If the aardvark gives a magnifying glass to the raven and the eagle winks at the raven, then the raven is not going to knock down the fortress that belongs to the squid\n\nThe current state of the game is as follows\nThe aardvark gives a magnifier to the raven\nThe eagle winks at the raven\nThe raven shows all her cards to the jellyfish\n\nBased on the game state and the rules and preferences, does the raven become an enemy of the tilapia?\nQuestion: Does the raven become an enemy of the tilapia?",
        "idx": 432,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not knock down the fortress of the squid, you can be certain that it will owe $$$ to the doctorfish without a doubt\nrule1(something) = not knock_down(something, fortress_of(squid)) => owes_money_to(something, doctorfish)\n# Rule2: If something owes money to the doctorfish, then it becomes an actual enemy of the tilapia, too\nrule2(something) = owes_money_to(something, doctorfish) => enemy(something, tilapia)\n# Rule3: For the raven, if the belief is that the aardvark gives a magnifying glass to the raven and the eagle winks at the raven, then you can add that \"the raven is not going to knock down the fortress that belongs to the squid\" to your conclusions.\nrule3() = give(aardvark, magnifying_glass, raven) & wink(eagle, raven) => not knock_down(raven, fortress_of(squid))\n\n# The current state of the game is as follows\n# The aardvark gives a magnifier to the raven\ngive(aardvark, magnifier, raven) = True\n# The eagle winks at the raven\nwink(eagle, raven) = True\n# The raven shows all her cards to the jellyfish\nshow_cards(raven, jellyfish) = True\n\n# Based on the game state and the rules and preferences, does the raven become an enemy of the tilapia?\nquestion = enemy(raven, tilapia)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not prepare armor for the octopus and also does not roll the dice for the sun bear, then it burns the warehouse of the buffalo\nRule2: If the moose proceeds to the spot right after the grizzly bear and the salmon removes one of the pieces of the grizzly bear, then the grizzly bear prepares armor for the octopus\nRule3: If the grizzly bear has more than seven friends, then it does not prepare armor for the octopus\nRule4: If one of the animals burns the warehouse of the buffalo, then it does not sing a victory song for the ferret\nRule5: If at least one animal attacks the green fields owned by the swordfish, then the grizzly bear does not roll the dice for the sun bear\nRule6: If one of the animals owes money to the snail, then it does not become an enemy of the squid\nRule7: If the spider has something to sit on, then it gives a magnifier to the oscar\nRule8: If the grizzly bear has a name whose first letter is the same as the first letter of the tiger's name, then it owes money to the snail\nRule9: If the caterpillar has a sharp object, then it winks at the grizzly bear\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe caterpillar has a knife\nThe grizzly bear has 15 friends and is named Meadow\nThe halibut attacks the green fields owned by the swordfish\nThe moose proceeds to the spot right after the grizzly bear\nThe salmon removes one of the pieces of the grizzly bear\nThe spider has a love seat sofa\nThe tiger is named Mojo\n\nBased on the game state and the rules and preferences, does the grizzly bear sing a victory song for the ferret?\nQuestion: Does the grizzly bear sing a victory song for the ferret?",
        "idx": 433,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not prepare armor for the octopus and also does not roll the dice for the sun bear, what can you certainly conclude? You can conclude that it also burns the warehouse of the buffalo\nrule1(something) = not prepare_armor(something, octopus) & not roll_dice(something, sun_bear) => burn(warehouse_of(buffalo), something)\n# Rule2: For the grizzly bear, if the belief is that the moose proceeds to the spot right after the grizzly bear and the salmon removes from the board one of the pieces of the grizzly bear, then you can add \"the grizzly bear prepares armor for the octopus\" to your conclusions\nrule2() = proceed(moose, spot_right_after(grizzly_bear)) & remove(salmon, piece_of(grizzly_bear)) => prepare_armor(grizzly_bear, octopus)\n# Rule3: If the grizzly bear has more than seven friends, then the grizzly bear does not prepare armor for the octopus\nrule3() = friends(grizzly_bear) > 7 => not prepare_armor(grizzly_bear, octopus)\n# Rule4: If you are positive that you saw one of the animals burns the warehouse that is in possession of the buffalo, you can be certain that it will not sing a song of victory for the ferret\nrule4(something) = burn(warehouse_of(buffalo), something) => not sing_song(something, victory_song_for(ferret))\n# Rule5: The grizzly bear does not roll the dice for the sun bear whenever at least one animal attacks the green fields whose owner is the swordfish\nrule5() = attack(green_fields_of(swordfish), something) => not roll_dice(grizzly_bear, sun_bear)\n# Rule6: If you are positive that you saw one of the animals owes money to the snail, you can be certain that it will not become an enemy of the squid\nrule6(something) = owes_money_to(something, snail) => not enemy(something, squid)\n# Rule7: Regarding the spider, if it has something to sit on, then we can conclude that it gives a magnifier to the oscar\nrule7() = has(spider, something_to_sit_on) => give(spider, magnifier, oscar)\n# Rule8: Regarding the grizzly bear, if it has a name whose first letter is the same as the first letter of the tiger's name, then we can conclude that it owes $$$ to the snail\nrule8() = first_letter_of(name(grizzly_bear)) == first_letter_of(name(tiger)) => owes_money_to(grizzly_bear, snail)\n# Rule9: Regarding the caterpillar, if it has a sharp object, then we can conclude that it winks at the grizzly bear.\nrule9() = has(caterpillar, sharp_object) => wink(caterpillar, grizzly_bear)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The caterpillar has a knife\nhas(caterpillar, knife) = True\n# The grizzly bear has 15 friends, and is named Meadow\nfriends(grizzly_bear) = 15\nname(grizzly_bear, Meadow) = True\n# The halibut attacks the green fields whose owner is the swordfish\nattack(green_fields_of(swordfish), halibut) = True\n# The moose proceeds to the spot right after the grizzly bear\nproceed(moose, spot_right_after(grizzly_bear)) = True\n# The salmon removes from the board one of the pieces of the grizzly bear\nremove(salmon, piece_of(grizzly_bear)) = True\n# The spider has a love seat sofa\nhas(spider, love_seat_sofa) = True\n# The tiger is named Mojo\nname(tiger, Mojo) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear sing a victory song for the ferret?\nquestion = sing_song(grizzly_bear, victory_song_for(ferret))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the rabbit has difficulty finding food, then it does not proceed to the spot right after the penguin\nRule2: If the rabbit proceeds to the spot right after the penguin, then the penguin prepares armor for the leopard\nRule3: The penguin does not wink at the kudu whenever at least one animal proceeds to the spot that is right after the spot of the lobster\nRule4: If the name of the rabbit starts with the same letter as the name of the raven, then the rabbit proceeds to the spot right after the penguin\nRule5: If an animal prepares armor for the leopard, then it winks at the kudu\n\nRule1 is preferred over Rule4\nRule3 is preferred over Rule5\n\nThe current state of the game is as follows\nThe rabbit is named Buddy\nThe raven is named Lola\n\nBased on the game state and the rules and preferences, does the penguin wink at the kudu?\nQuestion: Does the penguin wink at the kudu?",
        "idx": 434,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the rabbit, if it has difficulty to find food, then we can conclude that it does not proceed to the spot right after the penguin\nrule1() = has_difficulty_finding_food(rabbit) => not proceed(rabbit, spot_right_after(spot_of(penguin)))\n# Rule2: If the rabbit proceeds to the spot right after the penguin, then the penguin prepares armor for the leopard\nrule2() = proceed(rabbit, spot_right_after(spot_of(penguin))) => prepare_armor(penguin, leopard)\n# Rule3: The penguin does not wink at the kudu whenever at least one animal proceeds to the spot that is right after the spot of the lobster\nrule3() = not proceed(animal, spot_right_after(spot_of(lobster))) => not wink(penguin, kudu)\n# Rule4: If the rabbit has a name whose first letter is the same as the first letter of the raven's name, then the rabbit proceeds to the spot right after the penguin\nrule4() = first_letter_of(name(rabbit)) == first_letter_of(name(raven)) => proceed(rabbit, spot_right_after(spot_of(penguin)))\n# Rule5: If you are positive that you saw one of the animals prepares armor for the leopard, you can be certain that it will also wink at the kudu.\nrule5() = prepares_armor(animal, leopard) => wink(animal, kudu)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n\n# The current state of the game is as follows\n# The rabbit is named Buddy\nname(rabbit, Buddy) = True\n# The raven is named Lola\nname(raven, Lola) = True\n\n# Based on the game state and the rules and preferences, does the penguin wink at the kudu?\nquestion = wink(penguin, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hare sings a song of victory for the kudu, then the kudu steals five points from the viperfish\nRule2: If the hippopotamus has a card whose color appears in the flag of France, then the hippopotamus rolls the dice for the aardvark\nRule3: The kudu does not prepare armor for the leopard, in the case where the cockroach needs support from the kudu\nRule4: The cheetah respects the raven whenever at least one animal holds an equal number of points as the pig\nRule5: If something does not steal five points from the squirrel, then it does not proceed to the spot right after the cheetah\nRule6: If something knows the defensive plans of the raven and rolls the dice for the aardvark, then it proceeds to the spot right after the cheetah\nRule7: The hippopotamus does not know the defensive plans of the raven whenever at least one animal removes from the board one of the pieces of the meerkat\nRule8: If you are positive that you saw one of the animals prepares armor for the leopard, you can be certain that it will also steal five of the points of the cheetah\nRule9: The kudu prepares armor for the leopard whenever at least one animal prepares armor for the tiger\nRule10: If the hippopotamus proceeds to the spot right after the cheetah and the kudu steals five of the points of the cheetah, then the cheetah needs support from the moose\nRule11: If the hippopotamus has more than 7 friends, then the hippopotamus rolls the dice for the aardvark\nRule12: If at least one animal removes one of the pieces of the mosquito, then the ferret holds the same number of points as the pig\nRule13: If the kudu has fewer than fifteen friends, then the kudu does not steal five of the points of the viperfish\nRule14: If the hippopotamus does not have her keys, then the hippopotamus knows the defensive plans of the raven\n\nRule13 is preferred over Rule1\nRule3 is preferred over Rule9\nRule5 is preferred over Rule6\nRule7 is preferred over Rule14\n\nThe current state of the game is as follows\nThe catfish prepares armor for the tiger\nThe hare sings a victory song for the kudu\nThe hippopotamus has 4 wise friends and 1 not wise friend\nThe hippopotamus lost her keys\nThe hippopotamus has a card that is blue in color\nThe hummingbird removes from the board one of the pieces of the mosquito\n\nBased on the game state and the rules and preferences, does the cheetah need support from the moose?\nQuestion: Does the cheetah need support from the moose?",
        "idx": 435,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hare sings a song of victory for the kudu, then the kudu steals five points from the viperfish\nrule1() = sing_song(hare, victory_song_for(kudu)) => steal_points(kudu, 5, viperfish)\n# Rule2: If the hippopotamus has a card whose color appears in the flag of France, then the hippopotamus rolls the dice for the aardvark\nrule2() = has(hippopotamus, card) and color(card) in colors_of_flag_of_France => roll_dice(hippopotamus, aardvark)\n# Rule3: The kudu does not prepare armor for the leopard, in the case where the cockroach needs support from the kudu\nrule3() = needs_support(cockroach, kudu) => not prepare_armor(kudu, leopard)\n# Rule4: The cheetah respects the raven whenever at least one animal holds an equal number of points as the pig\nrule4() = holds_equal_points(something, pig) => respects(cheetah, raven)\n# Rule5: If something does not steal five points from the squirrel, then it does not proceed to the spot right after the cheetah\nrule5() = not steal_points(something, 5, squirrel) => not proceed(something, spot_right_after(cheetah))\n# Rule6: If you see that something knows the defensive plans of the raven and rolls the dice for the aardvark, what can you certainly conclude? You can conclude that it also proceeds to the spot right after the cheetah\nrule6() = knows(defensive_plans_of(raven), something) & roll_dice(something, aardvark) => proceed(something, spot_right_after(cheetah))\n# Rule7: The hippopotamus does not know the defensive plans of the raven whenever at least one animal removes from the board one of the pieces of the meerkat\nrule7() = remove(something, piece_of(meerkat)) => not knows(defensive_plans_of(raven), hippopotamus)\n# Rule8: If you are positive that you saw one of the animals prepares armor for the leopard, you can be certain that it will also steal five of the points of the cheetah\nrule8(something) = prepare_armor(something, leopard) => steal_points(something, 5, cheetah)\n# Rule9: The kudu prepares armor for the leopard whenever at least one animal prepares armor for the tiger\nrule9() = prepare_armor(something, tiger) => prepare_armor(kudu, leopard)\n# Rule10: If the hippopotamus proceeds to the spot right after the cheetah and the kudu steals five of the points of the cheetah, then the cheetah needs support from the moose\nrule10() = proceed(hippopotamus, spot_right_after(cheetah)) & steal_points(kudu, 5, cheetah) => needs_support(cheetah, moose)\n# Rule11: If the hippopotamus has more than 7 friends, then the hippopotamus rolls the dice for the aardvark\nrule11() = friends(hippopotamus) > 7 => roll_dice(hippopotamus, aardvark)\n# Rule12: If at least one animal removes one of the pieces of the mosquito, then the ferret holds the same number of points as the pig\nrule12() = remove(something, piece_of(mosquito)) => holds_equal_points(ferret, pig)\n# Rule13: If the kudu has fewer than fifteen friends, then the kudu does not steal five of the points of the viperfish\nrule13() = friends(kudu) < 15 => not steal_points(kudu, 5, viperfish)\n# Rule14: If the hippopotamus does not have her keys, then the hippopotamus knows the defensive plans of the raven.\nrule14() = not has(hippopotamus, keys) => knows(defensive_plans_of(raven), hippopotamus)\n# Rule13 is preferred over Rule1\norder(rule13) > order(rule1) = True\n# Rule3 is preferred over Rule9\norder(rule3) > order(rule9) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n# Rule7 is preferred over Rule14\norder(rule7) > order(rule14) = True\n\n# The current state of the game is as follows\n# The catfish prepares armor for the tiger\nprepare_armor(catfish, tiger) = True\n# The hare sings a victory song for the kudu\nsing_song(hare, victory_song_for(kudu)) = True\n# The hippopotamus has 4 friends that are wise and one friend that is not, and lost her keys\nfriends(hippopotamus) = 4 wise_friends + 1 not_wise_friend\nnot has(hippopotamus, keys) = True\n# The hippopotamus has a card that is blue in color\nhas(hippopotamus, card_with(blue_color)) = True\n# The hummingbird removes from the board one of the pieces of the mosquito\nremove(hummingbird, piece_of(mosquito)) = True\n\n# Based on the game state and the rules and preferences, does the cheetah need support from the moose?\nquestion = needs_support(cheetah, moose)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The snail learns the basics of resource management from the zander whenever at least one animal winks at the donkey\nRule2: If the cat does not hold the same number of points as the ferret, then the ferret does not eat the food of the raven\nRule3: If the snail learns elementary resource management from the zander, then the zander does not sing a victory song for the raven\nRule4: If the carp does not attack the green fields of the tilapia, then the tilapia rolls the dice for the rabbit\nRule5: The ferret eats the food of the raven whenever at least one animal rolls the dice for the rabbit\nRule6: If the tilapia does not have her keys, then the tilapia does not roll the dice for the rabbit\nRule7: If the ferret eats the food that belongs to the raven and the zander does not sing a song of victory for the raven, then the raven will never raise a peace flag for the elephant.\n\nRule2 is preferred over Rule5\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cricket winks at the donkey\nThe carp does not attack the green fields of the tilapia\n\nBased on the game state and the rules and preferences, does the raven raise a peace flag for the elephant?\nQuestion: Does the raven raise a peace flag for the elephant?",
        "idx": 436,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The snail learns the basics of resource management from the zander whenever at least one animal winks at the donkey\nrule1() = wink(some_animal, donkey) => learn_basics_of_resource_management(snail, zander)\n# Rule2: If the cat does not hold the same number of points as the ferret, then the ferret does not eat the food of the raven\nrule2() = points(cat) != points(ferret) => not eat_food(ferret, raven)\n# Rule3: If the snail learns elementary resource management from the zander, then the zander is not going to sing a victory song for the raven\nrule3() = learn_elementary_resource_management(snail, zander) => not sing_song(zander, victory_song_for(raven))\n# Rule4: If the carp does not attack the green fields of the tilapia, then the tilapia rolls the dice for the rabbit\nrule4() = not attack(carp, green_fields_of(tilapia)) => roll_dice(tilapia, rabbit)\n# Rule5: The ferret eats the food of the raven whenever at least one animal rolls the dice for the rabbit\nrule5() = roll_dice(some_animal, rabbit) => eat_food(ferret, raven)\n# Rule6: If the tilapia does not have her keys, then the tilapia does not roll the dice for the rabbit\nrule6() = not have_keys(tilapia) => not roll_dice(tilapia, rabbit)\n# Rule7: If the ferret eats the food that belongs to the raven and the zander does not sing a song of victory for the raven, then the raven will never raise a peace flag for the elephant.\nrule7() = eat_food(ferret, raven) & not sing_song(zander, victory_song_for(raven)) => never_raise_peace_flag(raven, elephant)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cricket winks at the donkey\nwink(cricket, donkey) = True\n# The carp does not attack the green fields whose owner is the tilapia\nnot attack(carp, green_fields_of(tilapia)) = True\n\n# Based on the game state and the rules and preferences, does the raven raise a peace flag for the elephant?\nquestion = raise_peace_flag(raven, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal needs the support of the zander, then the penguin winks at the cat\nRule2: If the eel has a card whose color is one of the rainbow colors, then the eel sings a song of victory for the amberjack\nRule3: If the eel has more than eleven friends, then it sings a song of victory for the amberjack\nRule4: If something winks at the cricket and also sings a song of victory for the amberjack, then it knocks down the fortress of the zander\nRule5: If at least one animal needs support from the koala, then the eel winks at the cricket\n\nThe current state of the game is as follows\nThe eel has a card that is yellow in color\nThe eel has six friends\nThe starfish needs support from the koala\n\nBased on the game state and the rules and preferences, does the penguin wink at the cat?\nQuestion: Does the penguin wink at the cat?",
        "idx": 437,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal needs the support of the zander, then the penguin winks at the cat\nrule1() = needs_support(something, zander) => wink(penguin, cat)\n# Rule2: If the eel has a card whose color is one of the rainbow colors, then the eel sings a song of victory for the amberjack\nrule2() = has(eel, card) and color(card) in rainbow_colors => sing_song(eel, victory_song_for(amberjack))\n# Rule3: Regarding the eel, if it has more than eleven friends, then we can conclude that it sings a song of victory for the amberjack\nrule3() = friends(eel) > 11 => sing_song(eel, victory_song_for(amberjack))\n# Rule4: Be careful when something winks at the cricket and also sings a song of victory for the amberjack because in this case it will surely knock down the fortress of the zander (this may or may not be problematic)\nrule4(something) = wink(something, cricket) & sing_song(something, victory_song_for(amberjack)) => knock_down(fortress_of(zander), something)\n# Rule5: If at least one animal needs support from the koala, then the eel winks at the cricket.\nrule5() = needs_support(something, koala) => wink(eel, cricket)\n\n# The current state of the game is as follows\n# The eel has a card that is yellow in color\nhas(eel, card_with(yellow_color)) = True\n# The eel has six friends\nfriends(eel) = 6\n# The starfish needs support from the koala\nneeds_support(starfish, koala) = True\n\n# Based on the game state and the rules and preferences, does the penguin wink at the cat?\nquestion = wink(penguin, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal burns the warehouse of the phoenix, then the hippopotamus does not know the defensive plans of the sun bear\nRule2: If the pig has a name whose first letter is the same as the first letter of the ferret's name, then the pig does not wink at the sun bear\nRule3: If at least one animal rolls the dice for the halibut, then the squirrel burns the warehouse of the phoenix\nRule4: If something does not need support from the canary and also does not become an actual enemy of the kangaroo, then it does not give a magnifying glass to the buffalo\nRule5: If one of the animals does not know the defense plan of the penguin, then it does not attack the green fields owned by the sun bear\nRule6: If at least one animal learns the basics of resource management from the moose, then the sun bear does not become an actual enemy of the kangaroo\nRule7: If one of the animals removes one of the pieces of the moose, then it learns elementary resource management from the moose\nRule8: If the donkey has a name whose first letter is the same as the first letter of the black bear's name, then the donkey does not learn elementary resource management from the moose\nRule9: If the hippopotamus does not know the defensive plans of the sun bear, then the sun bear gives a magnifying glass to the buffalo\nRule10: If the octopus killed the mayor, then the octopus attacks the green fields of the sun bear\nRule11: If something does not knock down the fortress of the halibut, then it knows the defense plan of the sun bear\nRule12: If something does not offer a job to the kudu, then it does not knock down the fortress of the halibut\nRule13: If the donkey has a sharp object, then it does not learn the basics of resource management from the moose\nRule14: If the pig has fewer than five friends, then the pig does not wink at the sun bear\n\nRule1 is preferred over Rule11\nRule10 is preferred over Rule5\nRule13 is preferred over Rule7\nRule4 is preferred over Rule9\nRule8 is preferred over Rule7\n\nThe current state of the game is as follows\nThe baboon rolls the dice for the halibut\nThe black bear is named Casper\nThe donkey is named Meadow and removes one of the pieces of the moose\nThe ferret is named Pashmak\nThe pig has eight friends\nThe pig is named Pablo\nThe hippopotamus does not offer a job to the kudu\nThe octopus does not know the defensive plans of the penguin\n\nBased on the game state and the rules and preferences, does the sun bear give a magnifier to the buffalo?\nQuestion: Does the sun bear give a magnifying glass to the buffalo?",
        "idx": 438,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal burns the warehouse of the phoenix, then the hippopotamus does not know the defensive plans of the sun bear\nrule1() = burn(warehouse_of(phoenix), something) => not knows(defensive_plans_of(sun_bear), hippopotamus)\n# Rule2: Regarding the pig, if it has a name whose first letter is the same as the first letter of the ferret's name, then we can conclude that it does not wink at the sun bear\nrule2() = first_letter_of(name(pig)) == first_letter_of(name(ferret)) => not wink_at(pig, sun_bear)\n# Rule3: If at least one animal rolls the dice for the halibut, then the squirrel burns the warehouse that is in possession of the phoenix\nrule3() = roll_dice(something, halibut) => burn(warehouse_of(phoenix), squirrel)\n# Rule4: If you see that something does not need support from the canary and also does not become an actual enemy of the kangaroo, what can you certainly conclude? You can conclude that it also does not give a magnifying glass to the buffalo\nrule4(something) = not needs_support(something, canary) & not enemy(something, kangaroo) => not give_magnifying_glass(something, buffalo)\n# Rule5: If you are positive that one of the animals does not know the defense plan of the penguin, you can be certain that it will not attack the green fields whose owner is the sun bear\nrule5() = not knows(defense_plan_of(penguin), something) => not attack_green_fields(something, sun_bear)\n# Rule6: If at least one animal learns the basics of resource management from the moose, then the sun bear does not become an actual enemy of the kangaroo\nrule6() = learn_basics_of_resource_management(something, moose) => not enemy(sun_bear, kangaroo)\n# Rule7: If you are positive that you saw one of the animals removes from the board one of the pieces of the moose, you can be certain that it will also learn elementary resource management from the moose\nrule7() = remove(something, piece_of(moose)) => learn_elementary_resource_management(something, moose)\n# Rule8: If the donkey has a name whose first letter is the same as the first letter of the black bear's name, then the donkey does not learn elementary resource management from the moose\nrule8() = first_letter_of(name(donkey)) == first_letter_of(name(black_bear)) => not learn_elementary_resource_management(donkey, moose)\n# Rule9: If the hippopotamus does not know the defensive plans of the sun bear, then the sun bear gives a magnifying glass to the buffalo\nrule9() = not knows(defensive_plans_of(sun_bear), hippopotamus) => give_magnifying_glass(sun_bear, buffalo)\n# Rule10: If the octopus killed the mayor, then the octopus attacks the green fields of the sun bear\nrule10() = killed(octopus, mayor) => attack_green_fields(octopus, sun_bear)\n# Rule11: If something does not knock down the fortress that belongs to the halibut, then it knows the defense plan of the sun bear\nrule11() = not knock_down(something, fortress_of(halibut)) => knows(defense_plan_of(sun_bear), something)\n# Rule12: If something does not offer a job to the kudu, then it does not knock down the fortress that belongs to the halibut\nrule12() = not offer_job(something, kudu) => not knock_down(something, fortress_of(halibut))\n# Rule13: Regarding the donkey, if it has a sharp object, then we can conclude that it does not learn the basics of resource management from the moose\nrule13() = has(donkey, sharp_object) => not learn_basics_of_resource_management(donkey, moose)\n# Rule14: Regarding the pig, if it has fewer than five friends, then we can conclude that it does not wink at the sun bear.\nrule14() = friends(pig) < 5 => not wink_at(pig, sun_bear)\n# Rule1 is preferred over Rule11\norder(rule1) > order(rule11) = True\n# Rule10 is preferred over Rule5\norder(rule10) > order(rule5) = True\n# Rule13 is preferred over Rule7\norder(rule13) > order(rule7) = True\n# Rule4 is preferred over Rule9\norder(rule4) > order(rule9) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n\n# The current state of the game is as follows\n# The baboon rolls the dice for the halibut\nroll_dice(baboon, halibut) = True\n# The black bear is named Casper\nname(black_bear, Casper) = True\n# The donkey is named Meadow, and removes from the board one of the pieces of the moose\nname(donkey, Meadow) = True\nremove(donkey, piece_of(moose)) = True\n# The ferret is named Pashmak\nname(ferret, Pashmak) = True\n# The pig has eight friends\nfriends(pig) = 8\n# The pig is named Pablo\nname(pig, Pablo) = True\n# The hippopotamus does not offer a job to the kudu\nnot offer_job(hippopotamus, kudu) = True\n# The octopus does not know the defensive plans of the penguin\nnot knows(defensive_plans_of(penguin), octopus) = True\n\n# Based on the game state and the rules and preferences, does the sun bear give a magnifier to the buffalo?\nquestion = give_magnifying_glass(sun_bear, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the goldfish holds the same number of points as the meerkat and the aardvark offers a job position to the meerkat, then the conclusion is \"the meerkat holds the same number of points as the ferret\"\nRule2: If the aardvark has a device to connect to the internet, then the aardvark offers a job to the meerkat\nRule3: The gecko does not respect the raven whenever at least one animal holds an equal number of points as the ferret\nRule4: If the aardvark has a card with a color that is one of the rainbow colors, then the aardvark offers a job to the meerkat\nRule5: If something proceeds to the spot that is right after the spot of the bat, then it holds the same number of points as the meerkat\n\nThe current state of the game is as follows\nThe aardvark has a card that is black in color\nThe aardvark has a computer\nThe goldfish proceeds to the spot right after the bat\n\nBased on the game state and the rules and preferences, does the gecko respect the raven?\nQuestion: Does the gecko respect the raven?",
        "idx": 439,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the meerkat, if the belief is that the goldfish holds the same number of points as the meerkat and the aardvark offers a job position to the meerkat, then you can add \"the meerkat holds the same number of points as the ferret\" to your conclusions\nrule1() = belief(goldfish, points(goldfish) == points(meerkat)) & offer_job(aardvark, meerkat) => add_conclusion(\"meerkat holds the same number of points as the ferret\")\n# Rule2: If the aardvark has a device to connect to the internet, then the aardvark offers a job to the meerkat\nrule2() = has(aardvark, connect_to_internet(device)) => offer_job(aardvark, meerkat)\n# Rule3: The gecko does not respect the raven whenever at least one animal holds an equal number of points as the ferret\nrule3() = exists(animal, points(animal) == points(ferret)) => not respect(gecko, raven)\n# Rule4: If the aardvark has a card whose color is one of the rainbow colors, then the aardvark offers a job to the meerkat\nrule4() = has(aardvark, card_with(color) in rainbow_colors) => offer_job(aardvark, meerkat)\n# Rule5: If something proceeds to the spot that is right after the spot of the bat, then it holds the same number of points as the meerkat, too.\nrule5(something) = proceed(something, spot_right_after(spot_of(bat))) => points(something) == points(meerkat)\n\n# The current state of the game is as follows\n# The aardvark has a card that is black in color\nhas(aardvark, card_with(black_color)) = True\n# The aardvark has a computer\nhas(aardvark, computer) = True\n# The goldfish proceeds to the spot right after the bat\nproceed(goldfish, spot_right_after(spot_of(bat))) = True\n\n# Based on the game state and the rules and preferences, does the gecko respect the raven?\nquestion = respect(gecko, raven)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something respects the bat and also winks at the hummingbird, then it will surely roll the dice for the ferret\nRule2: If something steals five points from the koala, then it removes one of the pieces of the sheep\nRule3: If the sea bass has more than 10 friends, then it eats the food of the ferret\nRule4: If the sea bass has a name whose first letter is the same as the first letter of the buffalo's name, then it does not eat the food of the ferret\nRule5: If the donkey has more than two friends, then it does not roll the dice for the ferret\nRule6: If the donkey has a card whose color appears in the flag of Italy, then it does not roll the dice for the ferret\nRule7: If the donkey does not roll the dice for the ferret but the sea bass eats the food of the ferret, then the ferret steals five points from the koala\nRule8: If the sea bass killed the mayor, then it does not eat the food of the ferret\n\nRule1 is preferred over Rule5\nRule1 is preferred over Rule6\nRule4 is preferred over Rule3\nRule8 is preferred over Rule3\n\nThe current state of the game is as follows\nThe buffalo is named Charlie\nThe donkey has a card that is orange in color, respects the bat, and winks at the hummingbird\nThe donkey has nine friends\nThe sea bass has twelve friends and is named Buddy\n\nBased on the game state and the rules and preferences, does the ferret remove from the board one of the pieces of the sheep?\nQuestion: Does the ferret remove from the board one of the pieces of the sheep?",
        "idx": 440,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something respects the bat and also winks at the hummingbird because in this case it will surely roll the dice for the ferret (this may or may not be problematic)\nrule1(something) = respects(something, bat) & winks(something, hummingbird) => roll_dice(something, ferret)\n# Rule2: If something steals five points from the koala, then it removes one of the pieces of the sheep, too\nrule2(something) = steal_points(something, koala, 5) => remove(something, piece_of(sheep))\n# Rule3: Regarding the sea bass, if it has more than 10 friends, then we can conclude that it eats the food that belongs to the ferret\nrule3() = friends(sea_bass) > 10 => eat_food(sea_bass, ferret)\n# Rule4: Regarding the sea bass, if it has a name whose first letter is the same as the first letter of the buffalo's name, then we can conclude that it does not eat the food of the ferret\nrule4() = first_letter_of(name(sea_bass)) == first_letter_of(name(buffalo)) => not eat_food(sea_bass, ferret)\n# Rule5: Regarding the donkey, if it has more than two friends, then we can conclude that it does not roll the dice for the ferret\nrule5() = friends(donkey) > 2 => not roll_dice(donkey, ferret)\n# Rule6: Regarding the donkey, if it has a card whose color appears in the flag of Italy, then we can conclude that it does not roll the dice for the ferret\nrule6() = has(donkey, card_with(color_in_flag_of_Italy)) => not roll_dice(donkey, ferret)\n# Rule7: For the ferret, if the belief is that the donkey does not roll the dice for the ferret but the sea bass eats the food of the ferret, then you can add \"the ferret steals five points from the koala\" to your conclusions\nrule7() = not roll_dice(donkey, ferret) & eat_food(sea_bass, ferret) => steal_points(ferret, koala, 5)\n# Rule8: If the sea bass killed the mayor, then the sea bass does not eat the food of the ferret.\nrule8() = killed(sea_bass, mayor) => not eat_food(sea_bass, ferret)\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule8 is preferred over Rule3\norder(rule8) > order(rule3) = True\n\n# The current state of the game is as follows\n# The buffalo is named Charlie\nname(buffalo, Charlie) = True\n# The donkey has a card that is orange in color, respects the bat, and winks at the hummingbird\nhas(donkey, card_with(orange_color)) = True\nrespects(donkey, bat) = True\nwinks(donkey, hummingbird) = True\n# The donkey has nine friends\nfriends(donkey) = 9\n# The sea bass has twelve friends, and is named Buddy\nfriends(sea_bass) = 12\nname(sea_bass, Buddy) = True\n\n# Based on the game state and the rules and preferences, does the ferret remove from the board one of the pieces of the sheep?\nquestion = remove(ferret, piece_of(sheep))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hippopotamus has a sharp object, then it does not burn the warehouse that is in possession of the mosquito\nRule2: If at least one animal offers a job to the phoenix, then the gecko owes money to the dog\nRule3: If the gecko has fewer than 11 friends, then it knocks down the fortress that belongs to the snail\nRule4: If the cockroach steals five points from the gecko, then the gecko does not knock down the fortress of the snail\nRule5: If the carp does not remove one of the pieces of the gecko, then the gecko owes money to the catfish\nRule6: If the hippopotamus has more than 7 friends, then it burns the warehouse that is in possession of the mosquito\nRule7: If the meerkat does not give a magnifier to the gecko, then the gecko will not owe money to the catfish\nRule8: If the hippopotamus has something to sit on, then it burns the warehouse that is in possession of the mosquito\nRule9: If something does not knock down the fortress of the snail, then it offers a job position to the rabbit\nRule10: If the gecko offers a job position to the rabbit and the mosquito knows the defensive plans of the rabbit, then the rabbit needs the support of the lobster\nRule11: If one of the animals proceeds to the spot right after the puffin, then it will not know the defense plan of the rabbit\nRule12: If at least one animal knows the defensive plans of the mosquito, then the rabbit does not need support from the lobster\nRule13: If the hippopotamus burns the warehouse that is in possession of the mosquito, then the mosquito knows the defense plan of the rabbit\nRule14: If the gecko is a fan of Chris Ronaldo, then it knocks down the fortress of the snail\n\nRule1 is preferred over Rule6\nRule1 is preferred over Rule8\nRule11 is preferred over Rule13\nRule12 is preferred over Rule10\nRule14 is preferred over Rule4\nRule3 is preferred over Rule4\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cockroach steals five points from the gecko\nThe gecko does not hate Chris Ronaldo\nThe goldfish offers a job to the phoenix\nThe hippopotamus has a couch\nThe hippopotamus has four playful friends and 1 non-playful friend\nThe carp does not remove one of the pieces of the gecko\n\nBased on the game state and the rules and preferences, does the rabbit need support from the lobster?\nQuestion: Does the rabbit need support from the lobster?",
        "idx": 441,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hippopotamus has a sharp object, then the hippopotamus does not burn the warehouse that is in possession of the mosquito\nrule1() = has(hippopotamus, sharp_object) => not burn(warehouse_of(mosquito))\n# Rule2: If at least one animal offers a job to the phoenix, then the gecko owes money to the dog\nrule2() = offer_job(something, phoenix) => owes_money_to(gecko, dog)\n# Rule3: Regarding the gecko, if it has fewer than 11 friends, then we can conclude that it knocks down the fortress that belongs to the snail\nrule3() = friends(gecko) < 11 => knock_down(fortress_of(snail))\n# Rule4: The gecko does not knock down the fortress of the snail, in the case where the cockroach steals five points from the gecko\nrule4() = steal_points(cockroach, gecko, 5) => not knock_down(fortress_of(snail))\n# Rule5: If the carp does not remove one of the pieces of the gecko, then the gecko owes money to the catfish\nrule5() = not remove(carp, piece_of(gecko)) => owes_money_to(gecko, catfish)\n# Rule6: If the hippopotamus has more than 7 friends, then the hippopotamus burns the warehouse of the mosquito\nrule6() = friends(hippopotamus) > 7 => burn(warehouse_of(mosquito))\n# Rule7: The gecko will not owe money to the catfish, in the case where the meerkat does not give a magnifier to the gecko\nrule7() = not give(magnifier, meerkat, gecko) => not owes_money_to(gecko, catfish)\n# Rule8: If the hippopotamus has something to sit on, then the hippopotamus burns the warehouse that is in possession of the mosquito\nrule8() = has(hippopotamus, something_to_sit_on) => burn(warehouse_of(mosquito))\n# Rule9: If something does not knock down the fortress of the snail, then it offers a job position to the rabbit\nrule9(something) = not knock_down(fortress_of(snail)) => offer_job_position(something, rabbit)\n# Rule10: If the gecko offers a job position to the rabbit and the mosquito knows the defensive plans of the rabbit, then the rabbit needs the support of the lobster\nrule10() = offer_job_position(gecko, rabbit) & knows(defensive_plans_of(rabbit), mosquito) => needs_support(rabbit, lobster)\n# Rule11: If you are positive that you saw one of the animals proceeds to the spot right after the puffin, you can be certain that it will not know the defense plan of the rabbit\nrule11(something) = proceeds(something, spot_right_after(puffin)) => not knows(defense_plan_of(rabbit), something)\n# Rule12: If at least one animal knows the defensive plans of the mosquito, then the rabbit does not need support from the lobster\nrule12() = knows(defensive_plans_of(mosquito), something) => not needs_support(rabbit, lobster)\n# Rule13: If the hippopotamus burns the warehouse that is in possession of the mosquito, then the mosquito knows the defense plan of the rabbit\nrule13() = burn(warehouse_of(mosquito)) => knows(defense_plan_of(rabbit), mosquito)\n# Rule14: If the gecko is a fan of Chris Ronaldo, then the gecko knocks down the fortress of the snail.\nrule14() = fan_of(gecko, Chris_Ronaldo) => knock_down(fortress_of(snail))\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule1 is preferred over Rule8\norder(rule1) > order(rule8) = True\n# Rule11 is preferred over Rule13\norder(rule11) > order(rule13) = True\n# Rule12 is preferred over Rule10\norder(rule12) > order(rule10) = True\n# Rule14 is preferred over Rule4\norder(rule14) > order(rule4) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cockroach steals five points from the gecko\nsteal_points(cockroach, gecko, 5) = True\n# The gecko hates Chris Ronaldo\nfan_of(gecko, Chris_Ronaldo) = False\n# The goldfish offers a job to the phoenix\noffer_job(goldfish, phoenix) = True\n# The hippopotamus has a couch\nhas(hippopotamus, couch) = True\n# The hippopotamus has four friends that are playful and 1 friend that is not\nfriends(hippopotamus) = 4 playful_friends + 1 non_playful_friend\n# The carp does not remove from the board one of the pieces of the gecko\nnot remove(carp, piece_of(gecko)) = True\n\n# Based on the game state and the rules and preferences, does the rabbit need support from the lobster?\nquestion = needs_support(rabbit, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tilapia has fewer than 12 friends, then it removes one of the pieces of the koala\nRule2: If the name of the tilapia starts with the same letter as the name of the eagle, then the tilapia removes one of the pieces of the koala\nRule3: If the blobfish burns the warehouse of the raven and the rabbit sings a victory song for the raven, then the raven will not burn the warehouse of the koala\nRule4: If the raven burns the warehouse of the koala, then the koala rolls the dice for the wolverine\nRule5: If the raven has more than 7 friends, then the raven burns the warehouse of the koala\nRule6: If the koala rolls the dice for the wolverine, then the wolverine does not roll the dice for the canary\nRule7: If the raven has something to sit on, then the raven burns the warehouse of the koala\n\nRule3 is preferred over Rule5\nRule3 is preferred over Rule7\n\nThe current state of the game is as follows\nThe eagle is named Bella\nThe rabbit sings a victory song for the raven\nThe raven has 12 friends\nThe raven has a knife\nThe tilapia becomes an enemy of the aardvark\nThe tilapia has one mean friend and 6 non-mean friends\nThe tilapia is named Paco\n\nBased on the game state and the rules and preferences, does the wolverine roll the dice for the canary?\nQuestion: Does the wolverine roll the dice for the canary?",
        "idx": 442,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the tilapia, if it has fewer than 12 friends, then we can conclude that it removes one of the pieces of the koala\nrule1() = friends(tilapia) < 12 => remove(tilapia, piece_of(koala))\n# Rule2: If the tilapia has a name whose first letter is the same as the first letter of the eagle's name, then the tilapia removes from the board one of the pieces of the koala\nrule2() = first_letter_of(name(tilapia)) == first_letter_of(name(eagle)) => remove(tilapia, piece_of(koala))\n# Rule3: If the blobfish burns the warehouse of the raven and the rabbit sings a victory song for the raven, then the raven will not burn the warehouse of the koala\nrule3() = burn(warehouse_of(raven), blobfish) & sing_song(rabbit, victory_song_for(raven)) => not burn(warehouse_of(koala), raven)\n# Rule4: If the raven burns the warehouse of the koala, then the koala rolls the dice for the wolverine\nrule4() = burn(warehouse_of(koala), raven) => roll_dice(koala, wolverine)\n# Rule5: If the raven has more than 7 friends, then the raven burns the warehouse of the koala\nrule5() = friends(raven) > 7 => burn(warehouse_of(koala), raven)\n# Rule6: If the koala rolls the dice for the wolverine, then the wolverine is not going to roll the dice for the canary\nrule6() = roll_dice(koala, wolverine) => not roll_dice(wolverine, canary)\n# Rule7: If the raven has something to sit on, then the raven burns the warehouse that is in possession of the koala.\nrule7() = has(raven, something_to_sit_on) => burn(warehouse_of(koala), raven)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n\n# The current state of the game is as follows\n# The eagle is named Bella\nname(eagle, Bella) = True\n# The rabbit sings a victory song for the raven\nsing_song(rabbit, victory_song_for(raven)) = True\n# The raven has 12 friends\nfriends(raven) = 12\n# The raven has a knife\nhas(raven, knife) = True\n# The tilapia becomes an enemy of the aardvark, has one friend that is mean and 6 friends that are not, and is named Paco.\nenemy(tilapia, aardvark) = True\nfriends(tilapia) = 7\nmean_friend(tilapia) = 1\nname(tilapia, Paco) = True\n\n# Based on the game state and the rules and preferences, does the wolverine roll the dice for the canary?\nquestion = roll_dice(wolverine, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cat has a card whose color appears in the flag of France, then it knows the defense plan of the parrot\nRule2: The mosquito shows all her cards to the panther whenever at least one animal becomes an enemy of the baboon\nRule3: If the cat has more than 10 friends, then it knows the defense plan of the parrot\nRule4: If something respects the spider and learns elementary resource management from the sea bass, then it does not remove one of the pieces of the baboon\nRule5: If the name of the cat starts with the same letter as the name of the cockroach, then the cat does not learn the basics of resource management from the sea bass\nRule6: If something knows the defense plan of the parrot, then it removes one of the pieces of the baboon\nRule7: If the cat does not have her keys, then it learns elementary resource management from the sea bass\n\nRule6 is preferred over Rule4\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cat has 4 friends, 2 of them are wise and 2 of them are not wise\nThe cat parked her bike in front of the store\nThe cat has a card that is red in color\nThe cockroach is named Bella\n\nBased on the game state and the rules and preferences, does the mosquito show all her cards to the panther?\nQuestion: Does the mosquito show all her cards to the panther?",
        "idx": 443,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cat, if it has a card whose color appears in the flag of France, then we can conclude that it knows the defense plan of the parrot\nrule1() = has(cat, card_with(color)) & color in colors_of(flag_of(France)) => knows(defense_plan_of(parrot), cat)\n# Rule2: The mosquito shows all her cards to the panther whenever at least one animal becomes an enemy of the baboon\nrule2() = enemy(something, baboon) => show_cards(mosquito, panther)\n# Rule3: Regarding the cat, if it has more than 10 friends, then we can conclude that it knows the defense plan of the parrot\nrule3() = friends(cat) > 10 => knows(defense_plan_of(parrot), cat)\n# Rule4: If you see that something respects the spider and learns elementary resource management from the sea bass, what can you certainly conclude? You can conclude that it does not remove one of the pieces of the baboon\nrule4(something) = respects(something, spider) & learn(something, elementary_resource_management_from(sea_bass)) => not remove(something, piece_of(baboon))\n# Rule5: If the cat has a name whose first letter is the same as the first letter of the cockroach's name, then the cat does not learn the basics of resource management from the sea bass\nrule5() = first_letter_of(name(cat)) == first_letter_of(name(cockroach)) => not learn_basics_of_resource_management(cat, sea_bass)\n# Rule6: If something knows the defense plan of the parrot, then it removes one of the pieces of the baboon, too\nrule6() = knows(defense_plan_of(parrot), something) => remove(something, piece_of(baboon))\n# Rule7: Regarding the cat, if it does not have her keys, then we can conclude that it learns elementary resource management from the sea bass.\nrule7() = not has(cat, keys) => learn_elementary_resource_management(cat, sea_bass)\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cat has 2 friends that are wise and 2 friends that are not, and parked her bike in front of the store\nfriends(cat) = 4\nwise_friends(cat) = 2\nnot_wise_friends(cat) = 2\nparked_bike(cat, in_front_of(store)) = True\n# The cat has a card that is red in color\nhas(cat, card_with(red_color)) = True\n# The cockroach is named Bella\nname(cockroach, Bella) = True\n\n# Based on the game state and the rules and preferences, does the mosquito show all her cards to the panther?\nquestion = show_cards(mosquito, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something knocks down the fortress that belongs to the viperfish and learns elementary resource management from the parrot, then you can conclude that it also knows the defensive plans of the black bear\nRule2: If something knows the defensive plans of the black bear, then it eats the food that belongs to the grasshopper, too\nRule3: If you are positive that one of the animals does not attack the green fields whose owner is the carp, then it will knock down the fortress of the viperfish without a doubt\nRule4: If the raven needs support from the gecko and the buffalo respects the gecko, then the gecko does not know the defensive plans of the starfish\nRule5: If the starfish has a name whose first letter is the same as the first letter of the koala's name, then it learns the basics of resource management from the parrot\nRule6: If you see that one of the animals shows all her cards to the goldfish, then you can conclude that it knows the defense plan of the starfish\n\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe buffalo respects the gecko\nThe gecko shows all her cards to the goldfish\nThe koala is named Paco\nThe raven needs support from the gecko\nThe starfish is named Peddi\nThe starfish does not attack the green fields whose owner is the carp\n\nBased on the game state and the rules and preferences, does the starfish eat the food of the grasshopper?\nQuestion: Does the starfish eat the food of the grasshopper?",
        "idx": 444,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something knocks down the fortress that belongs to the viperfish and learns elementary resource management from the parrot, what can you certainly conclude? You can conclude that it also knows the defensive plans of the black bear\nrule1() = knock_down(fortress_of(viperfish), something) & learn(something, elementary_resource_management_from(parrot)) => knows(something, defensive_plans_of(black_bear))\n# Rule2: If something knows the defensive plans of the black bear, then it eats the food that belongs to the grasshopper, too\nrule2() = knows(something, defensive_plans_of(black_bear)) => eats(something, food_of(grasshopper))\n# Rule3: If you are positive that one of the animals does not attack the green fields whose owner is the carp, you can be certain that it will knock down the fortress of the viperfish without a doubt\nrule3(something) = not attack(something, green_fields_of(carp)) => knock_down(fortress_of(viperfish), something)\n# Rule4: For the gecko, if the belief is that the raven needs support from the gecko and the buffalo respects the gecko, then you can add that \"the gecko is not going to know the defensive plans of the starfish\" to your conclusions\nrule4() = needs_support(raven, gecko) & respects(buffalo, gecko) => not knows(gecko, defensive_plans_of(starfish))\n# Rule5: Regarding the starfish, if it has a name whose first letter is the same as the first letter of the koala's name, then we can conclude that it learns the basics of resource management from the parrot\nrule5() = first_letter_of(name(starfish)) == first_letter_of(name(koala)) => learn_basics_of_resource_management(starfish, parrot)\n# Rule6: If you are positive that you saw one of the animals shows all her cards to the goldfish, you can be certain that it will also know the defense plan of the starfish.\nrule6() = show_all_cards(something, goldfish) => knows(something, defense_plan_of(starfish))\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The buffalo respects the gecko\nrespects(buffalo, gecko) = True\n# The gecko shows all her cards to the goldfish\nshow_all_cards(gecko, goldfish) = True\n# The koala is named Paco\nname(koala, Paco) = True\n# The raven needs support from the gecko\nneeds_support(raven, gecko) = True\n# The starfish is named Peddi\nname(starfish, Peddi) = True\n# The starfish does not attack the green fields whose owner is the carp\nnot attack(starfish, green_fields_of(carp)) = True\n\n# Based on the game state and the rules and preferences, does the starfish eat the food of the grasshopper?\nquestion = eats(starfish, food_of(grasshopper))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon steals five points from the panda bear, then the panda bear does not sing a victory song for the zander\nRule2: If the phoenix is a fan of Chris Ronaldo, then the phoenix does not steal five points from the baboon\nRule3: The baboon steals five points from the panda bear whenever at least one animal knocks down the fortress of the carp\nRule4: If the mosquito respects the phoenix, then the phoenix steals five points from the baboon\nRule5: If the oscar has a name whose first letter is the same as the first letter of the black bear's name, then the oscar knocks down the fortress of the carp\nRule6: If the phoenix has something to drink, then the phoenix does not steal five points from the baboon\nRule7: If the rabbit does not owe money to the baboon and the phoenix does not steal five points from the baboon, then the baboon does not steal five points from the panda bear\nRule8: If the oscar has a sharp object, then the oscar knocks down the fortress of the carp\n\nRule4 is preferred over Rule2\nRule4 is preferred over Rule6\nRule7 is preferred over Rule3\n\nThe current state of the game is as follows\nThe black bear is named Lola\nThe oscar has a plastic bag\nThe oscar is named Lucy\nThe phoenix has a cutter\nThe phoenix supports Chris Ronaldo\n\nBased on the game state and the rules and preferences, does the panda bear sing a victory song for the zander?\nQuestion: Does the panda bear sing a victory song for the zander?",
        "idx": 445,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the baboon steals five points from the panda bear, then the panda bear is not going to sing a victory song for the zander\nrule1() = steal_points(baboon, 5, panda_bear) => not sing_song(panda_bear, victory_song_for(zander))\n# Rule2: If the phoenix is a fan of Chris Ronaldo, then the phoenix does not steal five of the points of the baboon\nrule2() = fan_of(phoenix, Chris_Ronaldo) => not steal_points(phoenix, 5, baboon)\n# Rule3: The baboon steals five points from the panda bear whenever at least one animal knocks down the fortress of the carp\nrule3() = knock_down_fortress(animal, carp) => steal_points(baboon, 5, panda_bear)\n# Rule4: If the mosquito respects the phoenix, then the phoenix steals five of the points of the baboon\nrule4() = respects(mosquito, phoenix) => steal_points(phoenix, 5, baboon)\n# Rule5: If the oscar has a name whose first letter is the same as the first letter of the black bear's name, then the oscar knocks down the fortress of the carp\nrule5() = first_letter_of(name(oscar)) == first_letter_of(name(black_bear)) => knock_down_fortress(oscar, carp)\n# Rule6: If the phoenix has something to drink, then the phoenix does not steal five points from the baboon\nrule6() = has(phoenix, drink) => not steal_points(phoenix, 5, baboon)\n# Rule7: For the baboon, if the belief is that the rabbit does not owe money to the baboon and the phoenix does not steal five points from the baboon, then you can add \"the baboon does not steal five points from the panda bear\" to your conclusions\nrule7() = not owes_money_to(rabbit, baboon) & not steal_points(phoenix, 5, baboon) => not steal_points(baboon, 5, panda_bear)\n# Rule8: If the oscar has a sharp object, then the oscar knocks down the fortress of the carp.\nrule8() = has(oscar, sharp_object) => knock_down_fortress(oscar, carp)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n\n# The current state of the game is as follows\n# The black bear is named Lola\nname(black_bear, Lola) = True\n# The oscar has a plastic bag\nhas(oscar, plastic_bag) = True\n# The oscar is named Lucy\nname(oscar, Lucy) = True\n# The phoenix has a cutter, and supports Chris Ronaldo\nhas(phoenix, cutter) = True\nsupports(phoenix, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the panda bear sing a victory song for the zander?\nquestion = sing_song(panda_bear, victory_song_for(zander))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The sheep does not wink at the kangaroo, in the case where the hare respects the sheep\nRule2: Be careful when something does not show all her cards to the doctorfish and also does not offer a job to the doctorfish because in this case it will surely proceed to the spot that is right after the spot of the kiwi\nRule3: The polar bear prepares armor for the sheep whenever at least one animal proceeds to the spot right after the kiwi\nRule4: The sheep winks at the kangaroo, in the case where the polar bear prepares armor for the sheep\n\nRule1 is preferred over Rule4\n\nThe current state of the game is as follows\nThe rabbit has fifteen friends, offers a job to the doctorfish, and does not show all her cards to the doctorfish\nThe rabbit lost her keys\n\nBased on the game state and the rules and preferences, does the sheep wink at the kangaroo?\nQuestion: Does the sheep wink at the kangaroo?",
        "idx": 446,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The sheep does not wink at the kangaroo, in the case where the hare respects the sheep\nrule1() = respects(hare, sheep) => not wink(sheep, kangaroo)\n# Rule2: Be careful when something does not show all her cards to the doctorfish and also does not offer a job to the doctorfish because in this case it will surely proceed to the spot that is right after the spot of the kiwi (this may or may not be problematic)\nrule2(something) = not show_all_cards(something, doctorfish) & not offer_job(something, doctorfish) => proceed(something, spot_right_after(spot_of(kiwi)))\n# Rule3: The polar bear prepares armor for the sheep whenever at least one animal proceeds to the spot right after the kiwi\nrule3() = proceed(something, spot_right_after(spot_of(kiwi))) => prepare_armor(polar_bear, sheep)\n# Rule4: The sheep unquestionably winks at the kangaroo, in the case where the polar bear prepares armor for the sheep.\nrule4() = prepare_armor(polar_bear, sheep) => wink(sheep, kangaroo)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n\n# The current state of the game is as follows\n# The rabbit has fifteen friends, offers a job to the doctorfish, and does not show all her cards to the doctorfish\nfriends(rabbit) = 15\noffer_job(rabbit, doctorfish) = True\nnot show_all_cards(rabbit, doctorfish) = True\n# The rabbit lost her keys\nlost(rabbit, keys) = True\n\n# Based on the game state and the rules and preferences, does the sheep wink at the kangaroo?\nquestion = wink(sheep, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The kangaroo does not give a magnifying glass to the sun bear whenever at least one animal offers a job position to the carp\nRule2: The cockroach does not become an enemy of the tilapia whenever at least one animal needs the support of the rabbit\nRule3: If the kangaroo winks at the tilapia and the cockroach does not become an actual enemy of the tilapia, then the tilapia eats the food of the parrot\nRule4: If the baboon has a name whose first letter is the same as the first letter of the spider's name, then it needs support from the rabbit\nRule5: If the baboon has a sharp object, then it needs support from the rabbit\nRule6: If something does not wink at the koala, then it becomes an enemy of the kudu\nRule7: If the kangaroo has a card whose color appears in the flag of France, then it does not eat the food that belongs to the donkey\nRule8: If the sea bass becomes an actual enemy of the kudu, then the kudu holds an equal number of points as the tilapia\nRule9: If the kangaroo has a name whose first letter is the same as the first letter of the donkey's name, then it does not eat the food of the donkey\nRule10: If at least one animal sings a song of victory for the crocodile, then the kangaroo eats the food that belongs to the donkey\nRule11: If something respects the kiwi, then it becomes an enemy of the tilapia, too\nRule12: If something eats the food of the donkey but does not give a magnifier to the sun bear, then it winks at the tilapia\n\nRule10 is preferred over Rule7\nRule10 is preferred over Rule9\nRule11 is preferred over Rule2\n\nThe current state of the game is as follows\nThe baboon has a knife\nThe baboon is named Luna\nThe baboon does not become an enemy of the starfish\nThe donkey is named Pablo\nThe grasshopper sings a victory song for the crocodile\nThe kangaroo has a card that is blue in color\nThe kangaroo is named Tarzan\nThe meerkat offers a job to the carp\nThe spider is named Beauty\nThe sea bass does not wink at the koala\n\nBased on the game state and the rules and preferences, does the tilapia eat the food of the parrot?\nQuestion: Does the tilapia eat the food of the parrot?",
        "idx": 447,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The kangaroo does not give a magnifying glass to the sun bear whenever at least one animal offers a job position to the carp\nrule1() = offer_job_position(something, carp) => not give_magnifying_glass(kangaroo, sun_bear)\n# Rule2: The cockroach does not become an enemy of the tilapia whenever at least one animal needs the support of the rabbit\nrule2() = needs_support(something, rabbit) => not enemy(cockroach, tilapia)\n# Rule3: If the kangaroo winks at the tilapia and the cockroach does not become an actual enemy of the tilapia, then, inevitably, the tilapia eats the food of the parrot\nrule3() = wink(kangaroo, tilapia) & not enemy(cockroach, tilapia) => eat_food(tilapia, food_of(parrot))\n# Rule4: Regarding the baboon, if it has a name whose first letter is the same as the first letter of the spider's name, then we can conclude that it needs support from the rabbit\nrule4() = first_letter_of(name(baboon)) == first_letter_of(name(spider)) => needs_support(baboon, rabbit)\n# Rule5: If the baboon has a sharp object, then the baboon needs support from the rabbit\nrule5() = has(baboon, sharp_object) => needs_support(baboon, rabbit)\n# Rule6: If something does not wink at the koala, then it becomes an enemy of the kudu\nrule6(something) = not wink(something, koala) => enemy(something, kudu)\n# Rule7: If the kangaroo has a card whose color appears in the flag of France, then the kangaroo does not eat the food that belongs to the donkey\nrule7() = has(kangaroo, card_with(color_in_flag_of_france)) => not eat_food(kangaroo, food_of(donkey))\n# Rule8: If the sea bass becomes an actual enemy of the kudu, then the kudu holds an equal number of points as the tilapia\nrule8() = enemy(sea_bass, kudu) => points(kudu) == points(tilapia)\n# Rule9: If the kangaroo has a name whose first letter is the same as the first letter of the donkey's name, then the kangaroo does not eat the food of the donkey\nrule9() = first_letter_of(name(kangaroo)) == first_letter_of(name(donkey)) => not eat_food(kangaroo, food_of(donkey))\n# Rule10: If at least one animal sings a song of victory for the crocodile, then the kangaroo eats the food that belongs to the donkey\nrule10() = sing_song(something, victory_song_for(crocodile)) => eat_food(kangaroo, food_of(donkey))\n# Rule11: If something respects the kiwi, then it becomes an enemy of the tilapia, too\nrule11(something) = respects(something, kiwi) => enemy(something, tilapia)\n# Rule12: Be careful when something eats the food of the donkey but does not give a magnifier to the sun bear because in this case it will, surely, wink at the tilapia (this may or may not be problematic).\nrule12() = eat_food(something, food_of(donkey)) & not give_magnifying_glass(something, sun_bear) => wink(something, tilapia)\n# Rule10 is preferred over Rule7\norder(rule10) > order(rule7) = True\n# Rule10 is preferred over Rule9\norder(rule10) > order(rule9) = True\n# Rule11 is preferred over Rule2\norder(rule11) > order(rule2) = True\n\n# The current state of the game is as follows\n# The baboon has a knife, is named Luna, and does not become an enemy of the starfish\nhas(baboon, knife) = True\nname(baboon, Luna) = True\nnot enemy(baboon, starfish) = True\n# The donkey is named Pablo\nname(donkey, Pablo) = True\n# The grasshopper sings a victory song for the crocodile\nsing_song(grasshopper, victory_song_for(crocodile)) = True\n# The kangaroo has a card that is blue in color\nhas(kangaroo, card_with(blue_color)) = True\n# The kangaroo is named Tarzan\nname(kangaroo, Tarzan) = True\n# The meerkat offers a job to the carp\noffer_job_position(meerkat, carp) = True\n# The spider is named Beauty\nname(spider, Beauty) = True\n# The sea bass does not wink at the koala\nnot wink(sea_bass, koala) = True\n\n# Based on the game state and the rules and preferences, does the tilapia eat the food of the parrot?\nquestion = eat_food(tilapia, food_of(parrot))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cat removes one of the pieces of the lobster and the swordfish offers a job position to the lobster, then the lobster steals five points from the phoenix\nRule2: If at least one animal winks at the spider, then the mosquito does not wink at the buffalo\nRule3: The phoenix unquestionably winks at the spider, in the case where the lobster steals five points from the phoenix\nRule4: The mosquito unquestionably winks at the buffalo, in the case where the halibut does not become an actual enemy of the mosquito.\n\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cat removes from the board one of the pieces of the lobster\nThe lobster is named Milo\nThe starfish is named Mojo\nThe swordfish offers a job to the lobster\n\nBased on the game state and the rules and preferences, does the mosquito wink at the buffalo?\nQuestion: Does the mosquito wink at the buffalo?",
        "idx": 448,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cat removes one of the pieces of the lobster and the swordfish offers a job position to the lobster, then the lobster steals five points from the phoenix\nrule1() = remove(cat, piece_of(lobster)) & offer_job_position(swordfish, lobster) => steal_points(lobster, 5, phoenix)\n# Rule2: If at least one animal winks at the spider, then the mosquito does not wink at the buffalo\nrule2() = wink_at(some_animal, spider) => not wink_at(mosquito, buffalo)\n# Rule3: The phoenix unquestionably winks at the spider, in the case where the lobster steals five points from the phoenix\nrule3() = steal_points(lobster, 5, phoenix) => wink_at(phoenix, spider)\n# Rule4: The mosquito unquestionably winks at the buffalo, in the case where the halibut does not become an actual enemy of the mosquito.\nrule4() = not enemy(halibut, mosquito) => wink_at(mosquito, buffalo)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cat removes from the board one of the pieces of the lobster\nremove(cat, piece_of(lobster)) = True\n# The lobster is named Milo\nname(lobster, Milo) = True\n# The starfish is named Mojo\nname(starfish, Mojo) = True\n# The swordfish offers a job to the lobster\noffer_job_position(swordfish, lobster) = True\n\n# Based on the game state and the rules and preferences, does the mosquito wink at the buffalo?\nquestion = wink_at(mosquito, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cat has a sharp object, then the cat does not hold an equal number of points as the whale\nRule2: The cricket does not sing a victory song for the oscar, in the case where the squirrel proceeds to the spot that is right after the spot of the cricket\nRule3: The oscar steals five points from the sun bear, in the case where the cricket raises a flag of peace for the oscar\nRule4: If the cat has a card whose color appears in the flag of France, then the cat holds an equal number of points as the whale\nRule5: If the name of the cat starts with the same letter as the name of the carp, then the cat does not hold the same number of points as the whale\nRule6: If the cat has more than 8 friends, then the cat holds an equal number of points as the whale\nRule7: If at least one animal holds the same number of points as the whale, then the cricket sings a song of victory for the oscar\n\nRule1 is preferred over Rule4\nRule1 is preferred over Rule6\nRule5 is preferred over Rule4\nRule5 is preferred over Rule6\nRule7 is preferred over Rule2\n\nThe current state of the game is as follows\nThe carp is named Milo\nThe cat has a card that is orange in color\nThe cat has twelve friends and is named Cinnamon\n\nBased on the game state and the rules and preferences, does the oscar steal five points from the sun bear?\nQuestion: Does the oscar steal five points from the sun bear?",
        "idx": 449,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cat has a sharp object, then the cat does not hold an equal number of points as the whale\nrule1() = has(cat, sharp_object) => not equal_points(cat, whale)\n# Rule2: The cricket does not sing a victory song for the oscar, in the case where the squirrel proceeds to the spot that is right after the spot of the cricket\nrule2() = proceed(squirrel, spot_right_after(spot_of(cricket))) => not sing_song(cricket, victory_song_for(oscar))\n# Rule3: The oscar unquestionably steals five points from the sun bear, in the case where the cricket raises a flag of peace for the oscar\nrule3() = raise_flag_of_peace(cricket, oscar) => steal_points(oscar, 5, sun_bear)\n# Rule4: If the cat has a card whose color appears in the flag of France, then the cat holds an equal number of points as the whale\nrule4() = has(cat, card) and color(card) in flag_of_france_colors => equal_points(cat, whale)\n# Rule5: Regarding the cat, if it has a name whose first letter is the same as the first letter of the carp's name, then we can conclude that it does not hold the same number of points as the whale\nrule5() = first_letter_of(name(cat)) == first_letter_of(name(carp)) => not equal_points(cat, whale)\n# Rule6: Regarding the cat, if it has more than 8 friends, then we can conclude that it holds an equal number of points as the whale\nrule6() = friends(cat) > 8 => equal_points(cat, whale)\n# Rule7: If at least one animal holds the same number of points as the whale, then the cricket sings a song of victory for the oscar.\nrule7() = equal_points(something, whale) => sing_song(cricket, victory_song_for(oscar))\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n\n# The current state of the game is as follows\n# The carp is named Milo\nname(carp, Milo) = True\n# The cat has a card that is orange in color\nhas(cat, card_with(orange_color)) = True\n# The cat has twelve friends, and is named Cinnamon\nfriends(cat) = 12\nname(cat, Cinnamon) = True\n\n# Based on the game state and the rules and preferences, does the oscar steal five points from the sun bear?\nquestion = steal_points(oscar, 5, sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the penguin has a card whose color is one of the rainbow colors, then it knocks down the fortress of the ferret\nRule2: If the canary steals five points from the starfish, then the starfish does not respect the gecko\nRule3: If the penguin killed the mayor, then it knocks down the fortress of the ferret\nRule4: If the name of the penguin starts with the same letter as the name of the amberjack, then the penguin does not knock down the fortress of the ferret\nRule5: If the starfish respects the gecko, then the gecko steals five points from the black bear\nRule6: If at least one animal knocks down the fortress of the ferret, then the starfish respects the gecko\n\nRule2 is preferred over Rule6\nRule4 is preferred over Rule1\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe amberjack is named Luna\nThe penguin assassinated the mayor\nThe penguin has a card that is white in color\n\nBased on the game state and the rules and preferences, does the gecko steal five points from the black bear?\nQuestion: Does the gecko steal five points from the black bear?",
        "idx": 450,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the penguin, if it has a card whose color is one of the rainbow colors, then we can conclude that it knocks down the fortress of the ferret\nrule1() = has(penguin, card) and color(card) in rainbow_colors => knock_down_fortress(penguin, ferret)\n# Rule2: If the canary steals five of the points of the starfish, then the starfish is not going to respect the gecko\nrule2() = steal_points(canary, 5, starfish) => not respect(starfish, gecko)\n# Rule3: Regarding the penguin, if it killed the mayor, then we can conclude that it knocks down the fortress of the ferret\nrule3() = killed(penguin, mayor) => knock_down_fortress(penguin, ferret)\n# Rule4: If the penguin has a name whose first letter is the same as the first letter of the amberjack's name, then the penguin does not knock down the fortress that belongs to the ferret\nrule4() = first_letter_of(name(penguin)) == first_letter_of(name(amberjack)) => not knock_down_fortress(penguin, ferret)\n# Rule5: If the starfish respects the gecko, then the gecko steals five of the points of the black bear\nrule5() = respect(starfish, gecko) => steal_points(gecko, 5, black_bear)\n# Rule6: If at least one animal knocks down the fortress of the ferret, then the starfish respects the gecko.\nrule6(something) = knock_down_fortress(something, ferret) => respect(starfish, gecko)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The amberjack is named Luna\nname(amberjack, Luna) = True\n# The penguin assassinated the mayor\nkilled(penguin, mayor) = True\n# The penguin has a card that is white in color\nhas(penguin, card_with(white_color)) = True\n\n# Based on the game state and the rules and preferences, does the gecko steal five points from the black bear?\nquestion = steal_points(gecko, 5, black_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The starfish becomes an actual enemy of the bat, in the case where the dog proceeds to the spot right after the starfish\nRule2: If the panda bear raises a flag of peace for the caterpillar and the donkey does not sing a victory song for the caterpillar, then the caterpillar proceeds to the spot that is right after the spot of the bat\nRule3: The bat does not prepare armor for the kudu, in the case where the canary owes money to the bat\nRule4: If something prepares armor for the kudu but does not need support from the lion, then it does not owe money to the polar bear\nRule5: The bat does not need support from the lion, in the case where the starfish becomes an actual enemy of the bat\nRule6: If the caterpillar proceeds to the spot that is right after the spot of the bat, then the bat prepares armor for the kudu\n\nRule3 is preferred over Rule6\n\nThe current state of the game is as follows\nThe dog proceeds to the spot right after the starfish\nThe panda bear raises a peace flag for the caterpillar\nThe donkey does not sing a victory song for the caterpillar\n\nBased on the game state and the rules and preferences, does the bat owe money to the polar bear?\nQuestion: Does the bat owe money to the polar bear?",
        "idx": 451,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The starfish unquestionably becomes an actual enemy of the bat, in the case where the dog proceeds to the spot right after the starfish\nrule1() = proceed(dog, spot_right_after(starfish)) => enemy(starfish, bat)\n# Rule2: If the panda bear raises a flag of peace for the caterpillar and the donkey does not sing a song of victory for the caterpillar, then, inevitably, the caterpillar proceeds to the spot that is right after the spot of the bat\nrule2() = raise_flag_of_peace(panda_bear, caterpillar) & not sing_song(donkey, victory_song_for(caterpillar)) => proceed(caterpillar, spot_right_after(spot_of(bat)))\n# Rule3: The bat does not prepare armor for the kudu, in the case where the canary owes $$$ to the bat\nrule3() = owes_money_to(canary, bat) => not prepare_armor(bat, kudu)\n# Rule4: If you see that something prepares armor for the kudu but does not need support from the lion, what can you certainly conclude? You can conclude that it does not owe $$$ to the polar bear\nrule4(something) = prepare_armor(something, kudu) & not needs_support(something, lion) => not owes_money_to(something, polar_bear)\n# Rule5: The bat does not need support from the lion, in the case where the starfish becomes an actual enemy of the bat\nrule5() = enemy(starfish, bat) => not needs_support(bat, lion)\n# Rule6: If the caterpillar proceeds to the spot that is right after the spot of the bat, then the bat prepares armor for the kudu.\nrule6() = proceed(caterpillar, spot_right_after(spot_of(bat))) => prepare_armor(bat, kudu)\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n\n# The current state of the game is as follows\n# The dog proceeds to the spot right after the starfish\nproceed(dog, spot_right_after(starfish)) = True\n# The panda bear raises a peace flag for the caterpillar\nraise_flag_of_peace(panda_bear, caterpillar) = True\n# The donkey does not sing a victory song for the caterpillar\nnot sing_song(donkey, victory_song_for(caterpillar)) = True\n\n# Based on the game state and the rules and preferences, does the bat owe money to the polar bear?\nquestion = owes_money_to(bat, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not burn the warehouse of the jellyfish, then it offers a job position to the lobster\nRule2: The cheetah does not offer a job position to the lobster whenever at least one animal steals five points from the crocodile\nRule3: If the koala has a name whose first letter is the same as the first letter of the kudu's name, then the koala steals five points from the crocodile\nRule4: If the koala has a card whose color starts with the letter \"r\", then the koala does not steal five points from the crocodile\nRule5: If something does not give a magnifier to the puffin but respects the spider, then it does not steal five points from the lobster\nRule6: If at least one animal does not hold the same number of points as the sheep, then it does not roll the dice for the spider\nRule7: The spider raises a peace flag for the lobster if the eagle does not roll the dice for the spider\nRule8: The lobster owes money to the mosquito if the kiwi does not steal five points from the lobster\nRule9: The spider does not raise a peace flag for the lobster if the pig does not respect the spider\nRule10: If something owes money to the mosquito, then it winks at the viperfish\n\nRule1 is preferred over Rule2\nRule4 is preferred over Rule3\nRule9 is preferred over Rule7\n\nThe current state of the game is as follows\nThe kiwi gives a magnifier to the puffin\nThe kiwi respects the spider\nThe koala is named Mojo\nThe kudu is named Milo\nThe eagle does not hold the same number of points as the sheep\n\nBased on the game state and the rules and preferences, does the lobster wink at the viperfish?\nQuestion: Does the lobster wink at the viperfish?",
        "idx": 452,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not burn the warehouse of the jellyfish, then it offers a job position to the lobster\nrule1() = not burn(warehouse_of(jellyfish)) => offer_job_position(something, lobster)\n# Rule2: The cheetah does not offer a job position to the lobster whenever at least one animal steals five points from the crocodile\nrule2() = steals_points(something, 5, crocodile) => not offer_job_position(cheetah, lobster)\n# Rule3: If the koala has a name whose first letter is the same as the first letter of the kudu's name, then the koala steals five points from the crocodile\nrule3() = first_letter_of(name(koala)) == first_letter_of(name(kudu)) => steals_points(koala, 5, crocodile)\n# Rule4: If the koala has a card whose color starts with the letter \"r\", then the koala does not steal five of the points of the crocodile\nrule4() = has(koala, card_with(color_starting_with(\"r\"))) => not steals_points(koala, 5, crocodile)\n# Rule5: Be careful when something does not give a magnifier to the puffin but respects the spider because in this case it certainly does not steal five of the points of the lobster (this may or may not be problematic)\nrule5(something) = not give(something, magnifier, puffin) & respects(something, spider) => not steals_points(something, 5, lobster)\n# Rule6: If you are positive that one of the animals does not hold the same number of points as the sheep, you can be certain that it will not roll the dice for the spider\nrule6(something) = not holds_same_number_of_points(something, sheep) => not roll_dice(something, spider)\n# Rule7: The spider unquestionably raises a peace flag for the lobster, in the case where the eagle does not roll the dice for the spider\nrule7() = not roll_dice(eagle, spider) => raise_flag_of_peace(spider, lobster)\n# Rule8: The lobster unquestionably owes $$$ to the mosquito, in the case where the kiwi does not steal five points from the lobster\nrule8() = not steals_points(kiwi, 5, lobster) => owes_money_to(lobster, mosquito)\n# Rule9: The spider will not raise a peace flag for the lobster, in the case where the pig does not respect the spider\nrule9() = not respects(pig, spider) => not raise_flag_of_peace(spider, lobster)\n# Rule10: If something owes $$$ to the mosquito, then it winks at the viperfish, too.\nrule10() = owes_money_to(something, mosquito) => wink_at(something, viperfish)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule9 is preferred over Rule7\norder(rule9) > order(rule7) = True\n\n# The current state of the game is as follows\n# The kiwi gives a magnifier to the puffin, and respects the spider\ngive(kiwi, magnifier, puffin) = True\nrespects(kiwi, spider) = True\n# The koala is named Mojo\nname(koala, Mojo) = True\n# The kudu is named Milo\nname(kudu, Milo) = True\n# The eagle does not hold the same number of points as the sheep\nholds_same_number_of_points(eagle, sheep) = False\n\n# Based on the game state and the rules and preferences, does the lobster wink at the viperfish?\nquestion = wink_at(lobster, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals steals five points from the kudu, you can be certain that it will not sing a victory song for the hippopotamus\nRule2: If the donkey has something to carry apples and oranges, then the donkey becomes an enemy of the sheep\nRule3: If the donkey has more than 6 friends, then it does not become an enemy of the sheep\nRule4: If the cricket has a sharp object, then the cricket needs support from the panda bear\nRule5: If at least one animal needs the support of the panda bear, then the raven raises a flag of peace for the elephant\nRule6: If the cricket took a bike from the store, then the cricket needs support from the panda bear\nRule7: If at least one animal becomes an actual enemy of the sheep, then the tiger sings a victory song for the amberjack\nRule8: If the cricket has more than three friends, then it does not need the support of the panda bear\nRule9: If the raven has a card whose color appears in the flag of Netherlands, then the raven sings a victory song for the hippopotamus\nRule10: If the raven raises a peace flag for the elephant, then the elephant is not going to prepare armor for the hare\nRule11: If the donkey has a high salary, then the donkey does not become an actual enemy of the sheep\nRule12: If at least one animal sings a song of victory for the amberjack, then the elephant prepares armor for the hare\n\nRule11 is preferred over Rule2\nRule12 is preferred over Rule10\nRule3 is preferred over Rule2\nRule4 is preferred over Rule8\nRule6 is preferred over Rule8\nRule9 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cricket has a knife\nThe cricket has one adventurous friend and 4 non-adventurous friends\nThe cricket parked her bike in front of the store\nThe cricket is named Pashmak\nThe dog is named Milo\nThe donkey has a basket\nThe donkey has a low-income job\nThe raven has a card that is red in color\nThe raven steals five points from the kudu\n\nBased on the game state and the rules and preferences, does the elephant prepare armor for the hare?\nQuestion: Does the elephant prepare armor for the hare?",
        "idx": 453,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals steals five points from the kudu, you can be certain that it will not sing a victory song for the hippopotamus\nrule1() = steals_points(something, 5, kudu) => not sing_song(something, victory_song_for(hippopotamus))\n# Rule2: If the donkey has something to carry apples and oranges, then the donkey becomes an enemy of the sheep\nrule2() = has(donkey, carry_apples_and_oranges) => enemy(donkey, sheep)\n# Rule3: Regarding the donkey, if it has more than 6 friends, then we can conclude that it does not become an enemy of the sheep\nrule3() = friends(donkey) > 6 => not enemy(donkey, sheep)\n# Rule4: If the cricket has a sharp object, then the cricket needs support from the panda bear\nrule4() = has(cricket, sharp_object) => needs_support(cricket, panda_bear)\n# Rule5: If at least one animal needs the support of the panda bear, then the raven raises a flag of peace for the elephant\nrule5(something) = needs_support(something, panda_bear) => raise_flag_of_peace(raven, elephant)\n# Rule6: If the cricket took a bike from the store, then the cricket needs support from the panda bear\nrule6() = took_bike(cricket, store) => needs_support(cricket, panda_bear)\n# Rule7: If at least one animal becomes an actual enemy of the sheep, then the tiger sings a victory song for the amberjack\nrule7(something) = enemy(something, sheep) => sing_song(tiger, victory_song_for(amberjack))\n# Rule8: Regarding the cricket, if it has more than three friends, then we can conclude that it does not need the support of the panda bear\nrule8() = friends(cricket) > 3 => not needs_support(cricket, panda_bear)\n# Rule9: If the raven has a card whose color appears in the flag of Netherlands, then the raven sings a victory song for the hippopotamus\nrule9() = has(raven, card_with(color_in_flag_of_Netherlands)) => sing_song(raven, victory_song_for(hippopotamus))\n# Rule10: If the raven raises a peace flag for the elephant, then the elephant is not going to prepare armor for the hare\nrule10() = raise_flag_of_peace(raven, elephant) => not prepare_armor(elephant, hare)\n# Rule11: If the donkey has a high salary, then the donkey does not become an actual enemy of the sheep\nrule11() = has_high_salary(donkey) => not enemy(donkey, sheep)\n# Rule12: If at least one animal sings a song of victory for the amberjack, then the elephant prepares armor for the hare.\nrule12(something) = sing_song(something, victory_song_for(amberjack)) => prepare_armor(elephant, hare)\n# Rule11 is preferred over Rule2\norder(rule11) > order(rule2) = True\n# Rule12 is preferred over Rule10\norder(rule12) > order(rule10) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule4 is preferred over Rule8\norder(rule4) > order(rule8) = True\n# Rule6 is preferred over Rule8\norder(rule6) > order(rule8) = True\n# Rule9 is preferred over Rule1\norder(rule9) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cricket has a knife\nhas(cricket, knife) = True\n# The cricket has one friend that is adventurous and 4 friends that are not\nfriends(cricket, adventurous) = 1\nfriends(cricket, not_adventurous) = 4\n# The cricket parked her bike in front of the store\nparked_bike(cricket, store) = True\n# The cricket is named Pashmak\nname(cricket, Pashmak) = True\n# The dog is named Milo\nname(dog, Milo) = True\n# The donkey has a basket\nhas(donkey, basket) = True\n# The donkey has a low-income job\nhas_low_income_job(donkey) = True\n# The raven has a card that is red in color\nhas(raven, card_with(red_color)) = True\n# The raven steals five points from the kudu\nsteals_points(raven, 5, kudu) = True\n\n# Based on the game state and the rules and preferences, does the elephant prepare armor for the hare?\nquestion = prepare_armor(elephant, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cheetah has more than five friends, then it rolls the dice for the black bear\nRule2: If the name of the cheetah starts with the same letter as the name of the panther, then the cheetah does not show all her cards to the salmon\nRule3: If something shows all her cards to the salmon and rolls the dice for the black bear, then it also eats the food that belongs to the wolverine\nRule4: If the cheetah has published a high-quality paper, then it shows all her cards to the salmon\nRule5: If at least one animal eats the food of the wolverine, then the gecko does not sing a victory song for the goldfish\nRule6: If the cheetah has a card with a color from the rainbow colors, then it shows all her cards to the salmon\n\nRule4 is preferred over Rule2\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cheetah has 11 friends\nThe cheetah has a card that is yellow in color\nThe cheetah is named Tarzan\nThe cheetah recently read a high-quality paper\nThe panther is named Tessa\n\nBased on the game state and the rules and preferences, does the gecko sing a victory song for the goldfish?\nQuestion: Does the gecko sing a victory song for the goldfish?",
        "idx": 454,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cheetah, if it has more than five friends, then we can conclude that it rolls the dice for the black bear\nrule1() = friends(cheetah) > 5 => rolls_dice(cheetah, black_bear)\n# Rule2: Regarding the cheetah, if it has a name whose first letter is the same as the first letter of the panther's name, then we can conclude that it does not show all her cards to the salmon\nrule2() = first_letter_of(name(cheetah)) == first_letter_of(name(panther)) => not show_all_cards(cheetah, salmon)\n# Rule3: If you see that something shows all her cards to the salmon and rolls the dice for the black bear, what can you certainly conclude? You can conclude that it also eats the food that belongs to the wolverine\nrule3(something) = show_all_cards(something, salmon) & rolls_dice(something, black_bear) => eats_food(something, wolverine)\n# Rule4: If the cheetah has published a high-quality paper, then the cheetah shows all her cards to the salmon\nrule4() = published_high_quality_paper(cheetah) => show_all_cards(cheetah, salmon)\n# Rule5: If at least one animal eats the food of the wolverine, then the gecko does not sing a song of victory for the goldfish\nrule5() = eats_food(something, wolverine) => not sing_song(gecko, victory_song_for(goldfish))\n# Rule6: Regarding the cheetah, if it has a card whose color is one of the rainbow colors, then we can conclude that it shows all her cards to the salmon.\nrule6() = has(cheetah, card_with(color_in(rainbow_colors))) => show_all_cards(cheetah, salmon)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cheetah has 11 friends, has a card that is yellow in color, is named Tarzan, and recently read a high-quality paper\nfriends(cheetah) = 11\nhas(cheetah, card_with(yellow_color)) = True\nname(cheetah, Tarzan) = True\nrecently_read_high_quality_paper(cheetah) = True\n# The panther is named Tessa\nname(panther, Tessa) = True\n\n# Based on the game state and the rules and preferences, does the gecko sing a victory song for the goldfish?\nquestion = sing_song(gecko, victory_song_for(goldfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the wolverine took a bike from the store, then it knows the defense plan of the kiwi\nRule2: The sun bear knocks down the fortress of the phoenix, in the case where the kiwi steals five points from the sun bear\nRule3: The kiwi steals five points from the sun bear, in the case where the wolverine learns the basics of resource management from the kiwi\n\nThe current state of the game is as follows\nThe wolverine stole a bike from the store\n\nBased on the game state and the rules and preferences, does the sun bear knock down the fortress of the phoenix?\nQuestion: Does the sun bear knock down the fortress of the phoenix?",
        "idx": 455,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the wolverine, if it took a bike from the store, then we can conclude that it knows the defense plan of the kiwi\nrule1() = took(wolverine, bike_from(store)) => knows_defense_plan(wolverine, kiwi)\n# Rule2: The sun bear unquestionably knocks down the fortress of the phoenix, in the case where the kiwi steals five of the points of the sun bear\nrule2() = steal_points(kiwi, 5, sun_bear) => knock_down(sun_bear, fortress_of(phoenix))\n# Rule3: The kiwi unquestionably steals five of the points of the sun bear, in the case where the wolverine learns the basics of resource management from the kiwi.\nrule3() = learn_basics_of_resource_management(wolverine, kiwi) => steal_points(kiwi, 5, sun_bear)\n\n# The current state of the game is as follows\n# The wolverine stole a bike from the store\ntook(wolverine, bike_from(store)) = True\n\n# Based on the game state and the rules and preferences, does the sun bear knock down the fortress of the phoenix?\nquestion = knock_down(sun_bear, fortress_of(phoenix))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The crocodile shows all her cards to the carp, in the case where the parrot does not prepare armor for the crocodile\nRule2: If the donkey and the pig do not remove one of the pieces of the crocodile, then the crocodile becomes an actual enemy of the polar bear\nRule3: If the pig has a card whose color appears in the flag of Japan, then the pig does not remove one of the pieces of the crocodile\nRule4: If at least one animal knocks down the fortress of the cheetah, then the crocodile does not show her cards to the carp\nRule5: If something becomes an enemy of the polar bear and also shows her cards to the carp, then it needs the support of the panda bear\nRule6: If something learns elementary resource management from the eel, then it does not remove one of the pieces of the crocodile\nRule7: If the parrot has fewer than 10 friends, then the parrot prepares armor for the crocodile\nRule8: If the name of the parrot starts with the same letter as the name of the squid, then the parrot does not prepare armor for the crocodile\n\nRule4 is preferred over Rule1\nRule7 is preferred over Rule8\n\nThe current state of the game is as follows\nThe donkey learns the basics of resource management from the eel\nThe parrot is named Milo\nThe pig has a card that is red in color\nThe squid is named Meadow\nThe viperfish knocks down the fortress of the donkey\n\nBased on the game state and the rules and preferences, does the crocodile need support from the panda bear?\nQuestion: Does the crocodile need support from the panda bear?",
        "idx": 456,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The crocodile unquestionably shows all her cards to the carp, in the case where the parrot does not prepare armor for the crocodile\nrule1() = not prepare_armor(parrot, crocodile) => show_cards(crocodile, carp)\n# Rule2: If the donkey does not remove from the board one of the pieces of the crocodile and the pig does not remove one of the pieces of the crocodile, then the crocodile becomes an actual enemy of the polar bear\nrule2() = not remove(donkey, piece_of(crocodile)) & not remove(pig, piece_of(crocodile)) => actual_enemy(crocodile, polar_bear)\n# Rule3: If the pig has a card whose color appears in the flag of Japan, then the pig does not remove from the board one of the pieces of the crocodile\nrule3() = has(pig, card_with(color_in_flag_of_Japan)) => not remove(pig, piece_of(crocodile))\n# Rule4: If at least one animal knocks down the fortress that belongs to the cheetah, then the crocodile does not show her cards (all of them) to the carp\nrule4(something) = knock_down(fortress_of(cheetah), something) => not show_cards(crocodile, carp)\n# Rule5: Be careful when something becomes an enemy of the polar bear and also shows her cards (all of them) to the carp because in this case it will surely need the support of the panda bear (this may or may not be problematic)\nrule5(something) = enemy(something, polar_bear) & show_cards(something, carp) => need_support(something, panda_bear)\n# Rule6: If you are positive that you saw one of the animals learns elementary resource management from the eel, you can be certain that it will not remove from the board one of the pieces of the crocodile\nrule6(something) = learns(something, elementary_resource_management_from(eel)) => not remove(something, piece_of(crocodile))\n# Rule7: If the parrot has fewer than 10 friends, then the parrot prepares armor for the crocodile\nrule7() = friends(parrot) < 10 => prepare_armor(parrot, crocodile)\n# Rule8: Regarding the parrot, if it has a name whose first letter is the same as the first letter of the squid's name, then we can conclude that it does not prepare armor for the crocodile.\nrule8() = first_letter_of(name(parrot)) == first_letter_of(name(squid)) => not prepare_armor(parrot, crocodile)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule7 is preferred over Rule8\norder(rule7) > order(rule8) = True\n\n# The current state of the game is as follows\n# The donkey learns the basics of resource management from the eel\nlearns(donkey, basics_of_resource_management_from(eel)) = True\n# The parrot is named Milo\nname(parrot, Milo) = True\n# The pig has a card that is red in color\nhas(pig, card_with(red_color)) = True\n# The squid is named Meadow\nname(squid, Meadow) = True\n# The viperfish knocks down the fortress of the donkey\nknock_down(fortress_of(donkey), viperfish) = True\n\n# Based on the game state and the rules and preferences, does the crocodile need support from the panda bear?\nquestion = need_support(crocodile, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals raise a peace flag for the wolverine, you can be certain that it will also attack the green fields owned by the wolverine\nRule2: The amberjack knows the defense plan of the pig whenever at least one animal shows all her cards to the turtle\nRule3: If at least one animal owes money to the moose, then the pig attacks the green fields owned by the leopard\nRule4: If the halibut does not know the defensive plans of the pig, then the pig does not attack the green fields owned by the leopard\nRule5: If you see that something attacks the green fields owned by the leopard and also attacks the green fields of the wolverine, you can conclude that it does not knock down the fortress owned by the koala\nRule6: If you are positive that one of the animals does not raise a peace flag for the black bear, you can be certain that it will raise a peace flag for the wolverine\nRule7: If you are positive that you saw one of the animals raise a peace flag for the mosquito, you can be certain that it will not raise a peace flag for the wolverine\nRule8: If the raven steals five points from the cricket and the phoenix proceeds to the spot right after the cricket, then the cricket owes money to the moose\nRule9: If you are positive that you saw one of the animals sing a victory song for the canary, you can be certain that it will also show all her cards to the turtle\n\nRule4 is preferred over Rule3\nRule7 is preferred over Rule6\n\nThe current state of the game is as follows\nThe buffalo sings a victory song for the canary\nThe phoenix proceeds to the spot right after the cricket\nThe raven steals five points from the cricket\nThe pig does not raise a peace flag for the black bear\n\nBased on the game state and the rules and preferences, does the pig knock down the fortress owned by the koala?\nQuestion: Does the pig knock down the fortress owned by the koala?",
        "idx": 457,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals raises a peace flag for the wolverine, you can be certain that it will also attack the green fields whose owner is the wolverine\nrule1() = raise_flag_of_peace(something, wolverine) => attack_green_fields(something, green_fields_of(wolverine))\n# Rule2: The amberjack knows the defense plan of the pig whenever at least one animal shows her cards (all of them) to the turtle\nrule2() = show_cards(something, turtle) => knows(defense_plan_of(pig), amberjack)\n# Rule3: If at least one animal owes $$$ to the moose, then the pig attacks the green fields whose owner is the leopard\nrule3() = owes_money_to(something, moose) => attack_green_fields(pig, green_fields_of(leopard))\n# Rule4: If the halibut does not know the defensive plans of the pig, then the pig does not attack the green fields whose owner is the leopard\nrule4() = not knows(defensive_plans_of(pig), halibut) => not attack_green_fields(pig, green_fields_of(leopard))\n# Rule5: If you see that something attacks the green fields whose owner is the leopard and attacks the green fields of the wolverine, what can you certainly conclude? You can conclude that it does not knock down the fortress that belongs to the koala\nrule5() = attack_green_fields(something, green_fields_of(leopard)) & attack_green_fields(something, green_fields_of(wolverine)) => not knock_down_fortress(something, fortress_of(koala))\n# Rule6: If you are positive that one of the animals does not raise a flag of peace for the black bear, you can be certain that it will raise a peace flag for the wolverine without a doubt\nrule6() = not raise_flag_of_peace(something, black_bear) => raise_flag_of_peace(something, wolverine)\n# Rule7: If you are positive that you saw one of the animals raises a peace flag for the mosquito, you can be certain that it will not raise a flag of peace for the wolverine\nrule7() = raise_flag_of_peace(something, mosquito) => not raise_flag_of_peace(something, wolverine)\n# Rule8: For the cricket, if the belief is that the raven steals five of the points of the cricket and the phoenix proceeds to the spot right after the cricket, then you can add \"the cricket owes $$$ to the moose\" to your conclusions\nrule8() = steal_points(raven, 5, cricket) & proceed(phoenix, spot_right_after(spot_of(cricket))) => owes_money_to(cricket, moose)\n# Rule9: If you are positive that you saw one of the animals sings a song of victory for the canary, you can be certain that it will also show her cards (all of them) to the turtle.\nrule9() = sing_song(something, victory_song_for(canary)) => show_cards(something, turtle)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n\n# The current state of the game is as follows\n# The buffalo sings a victory song for the canary\nsing_song(buffalo, victory_song_for(canary)) = True\n# The phoenix proceeds to the spot right after the cricket\nproceed(phoenix, spot_right_after(spot_of(cricket))) = True\n# The raven steals five points from the cricket\nsteal_points(raven, 5, cricket) = True\n# The pig does not raise a peace flag for the black bear\nnot raise_flag_of_peace(pig, black_bear) = True\n\n# Based on the game state and the rules and preferences, does the pig knock down the fortress of the koala?\nquestion = knock_down_fortress(pig, fortress_of(koala))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The ferret will not attack the green fields whose owner is the hippopotamus, if the salmon does not give a magnifying glass to the ferret\nRule2: If at least one animal removes one of the pieces of the black bear from the board, then the hippopotamus holds an equal number of points as the ferret\nRule3: If the salmon has more than eight friends, then the salmon does not burn the warehouse owned by the ferret\nRule4: If an animal does not attack the green fields of the hippopotamus, it will give a magnifier to the leopard\nRule5: If the hippopotamus has a high salary, then the hippopotamus does not hold the same number of points as the ferret\nRule6: If the name of the zander starts with the same letter as the name of the baboon, then the zander does not give a magnifier to the ferret\nRule7: The zander gives a magnifying glass to the ferret if the sun bear attacks the green fields owned by the zander\n\nRule5 is preferred over Rule2\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe baboon is named Paco\nThe hippopotamus assassinated the mayor\nThe raven removes one of the pieces of the black bear from the board\nThe salmon has 14 friends\nThe sun bear attacks the green fields owned by the zander\n\nBased on the game state and the rules and preferences, does the ferret give a magnifier to the leopard?\nQuestion: Does the ferret give a magnifier to the leopard?",
        "idx": 458,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The ferret will not attack the green fields whose owner is the hippopotamus, in the case where the salmon does not give a magnifying glass to the ferret\nrule1() = not attack(ferret, green_fields_of(hippopotamus)) & not give_magnifying_glass(salmon, ferret) => True\n# Rule2: If at least one animal removes from the board one of the pieces of the black bear, then the hippopotamus holds an equal number of points as the ferret\nrule2() = remove(something, piece_of(black_bear)) => points(hippopotamus) == points(ferret)\n# Rule3: If the salmon has more than eight friends, then the salmon does not burn the warehouse that is in possession of the ferret\nrule3() = friends(salmon) > 8 => not burn(warehouse_of(ferret))\n# Rule4: If you are positive that one of the animals does not attack the green fields of the hippopotamus, you can be certain that it will give a magnifier to the leopard without a doubt\nrule4(something) = not attack(something, green_fields_of(hippopotamus)) => give_magnifier(something, leopard)\n# Rule5: If the hippopotamus has a high salary, then the hippopotamus does not hold the same number of points as the ferret\nrule5() = has_high_salary(hippopotamus) => points(hippopotamus) != points(ferret)\n# Rule6: Regarding the zander, if it has a name whose first letter is the same as the first letter of the baboon's name, then we can conclude that it does not give a magnifier to the ferret\nrule6() = first_letter_of(name(zander)) == first_letter_of(name(baboon)) => not give_magnifier(zander, ferret)\n# Rule7: The zander unquestionably gives a magnifying glass to the ferret, in the case where the sun bear attacks the green fields whose owner is the zander.\nrule7() = attack(sun_bear, green_fields_of(zander)) => give_magnifier(zander, ferret)\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The baboon is named Paco\nname(baboon, Paco) = True\n# The hippopotamus assassinated the mayor\nassassinated(hippopotamus, mayor) = True\n# The raven removes from the board one of the pieces of the black bear\nremove(raven, piece_of(black_bear)) = True\n# The salmon has 14 friends\nfriends(salmon) = 14\n# The sun bear attacks the green fields whose owner is the zander\nattack(sun_bear, green_fields_of(zander)) = True\n\n# Based on the game state and the rules and preferences, does the ferret give a magnifier to the leopard?\nquestion = give_magnifier(ferret, leopard)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale has more than five friends, then the whale owes money to the cheetah\nRule2: If the name of the whale starts with the same letter as the name of the meerkat, then the whale owes money to the cheetah\nRule3: If the lion believes that it learns elementary resource management from the whale and the carp holds an equal number of points as the whale, then the whale does not knock down the fortress of the eagle\nRule4: If the name of the lion starts with the same letter as the name of the caterpillar, then the lion learns the basics of resource management from the whale\nRule5: The carp holds an equal number of points as the whale whenever at least one animal eats the food of the penguin\nRule6: If you see one of the animals knock down the fortress of the eagle, then it will also show all her cards to the wolverine\nRule7: If something owes money to the cheetah, then it knocks down the fortress of the eagle as well\nRule8: If something prepares armor for the koala and becomes an enemy of the canary, then it does not learn elementary resource management from the whale\nRule9: If the lion has a card with a color that is one of the rainbow colors, then the lion learns elementary resource management from the whale\n\nRule4 is preferred over Rule8\nRule7 is preferred over Rule3\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe caterpillar is named Blossom\nThe lion becomes an enemy of the canary\nThe lion has a card that is yellow in color\nThe lion is named Lucy\nThe lion prepares armor for the koala\nThe meerkat is named Bella\nThe rabbit eats the food of the penguin\nThe whale has 15 friends\nThe whale is named Lily\n\nBased on the game state and the rules and preferences, does the whale show all her cards to the wolverine?\nQuestion: Does the whale show all her cards to the wolverine?",
        "idx": 459,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the whale has more than five friends, then the whale owes money to the cheetah\nrule1() = friends(whale) > 5 => owes_money_to(whale, cheetah)\n# Rule2: If the whale has a name whose first letter is the same as the first letter of the meerkat's name, then the whale owes $$$ to the cheetah\nrule2() = first_letter_of(name(whale)) == first_letter_of(name(meerkat)) => owes_money_to(whale, cheetah)\n# Rule3: For the whale, if the belief is that the lion learns elementary resource management from the whale and the carp holds an equal number of points as the whale, then you can add that \"the whale is not going to knock down the fortress that belongs to the eagle\" to your conclusions\nrule3() = believes(lion, learns_elementary_resource_management_from(whale)) & points(carp) == points(whale) => not knock_down(fortress_of(eagle), whale)\n# Rule4: Regarding the lion, if it has a name whose first letter is the same as the first letter of the caterpillar's name, then we can conclude that it learns the basics of resource management from the whale\nrule4() = first_letter_of(name(lion)) == first_letter_of(name(caterpillar)) => learns_basics_of_resource_management(lion, whale)\n# Rule5: The carp holds an equal number of points as the whale whenever at least one animal eats the food that belongs to the penguin\nrule5() = eats_food(animal, food_of(penguin)) => points(carp) == points(whale)\n# Rule6: If you are positive that you saw one of the animals knocks down the fortress that belongs to the eagle, you can be certain that it will also show her cards (all of them) to the wolverine\nrule6(something) = knock_down(fortress_of(eagle), something) => show_cards(something, wolverine)\n# Rule7: If something owes money to the cheetah, then it knocks down the fortress of the eagle, too\nrule7() = owes_money_to(something, cheetah) => knock_down(fortress_of(eagle), something)\n# Rule8: Be careful when something prepares armor for the koala and also becomes an enemy of the canary because in this case it will surely not learn elementary resource management from the whale (this may or may not be problematic)\nrule8(something) = prepare_armor(something, koala) & enemy(something, canary) => not learns_elementary_resource_management(something, whale)\n# Rule9: Regarding the lion, if it has a card whose color is one of the rainbow colors, then we can conclude that it learns elementary resource management from the whale.\nrule9() = has(lion, card_with(color_in(rainbow_colors))) => learns_elementary_resource_management(lion, whale)\n# Rule4 is preferred over Rule8\norder(rule4) > order(rule8) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The caterpillar is named Blossom\nname(caterpillar, Blossom) = True\n# The lion becomes an enemy of the canary, and has a card that is yellow in color\nenemy(lion, canary) = True\nhas(lion, card_with(yellow_color)) = True\n# The lion is named Lucy\nname(lion, Lucy) = True\n# The lion prepares armor for the koala\nprepare_armor(lion, koala) = True\n# The meerkat is named Bella\nname(meerkat, Bella) = True\n# The rabbit eats the food of the penguin\neats_food(rabbit, food_of(penguin)) = True\n# The whale has 15 friends\nfriends(whale) = 15\n# The whale is named Lily\nname(whale, Lily) = True\n\n# Based on the game state and the rules and preferences, does the whale show all her cards to the wolverine?\nquestion = show_cards(whale, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose has something to drink, then the moose raises a peace flag for the snail\nRule2: If one of the animals does not respect the grasshopper, then it removes one of the pieces of the snail\nRule3: If the snail has a card whose color starts with the letter \"r\", then it shows all her cards to the lion\nRule4: If at least one animal learns the basics of resource management from the donkey, then the eagle raises a peace flag for the spider\nRule5: If the meerkat has fewer than twelve friends, then it respects the grasshopper\nRule6: If the spider does not knock down the fortress of the hippopotamus and the jellyfish rolls the dice for the hippopotamus, then the hippopotamus holds the same number of points as the swordfish\nRule7: If the carp has a card with a primary color, then it does not eat the food that belongs to the grizzly bear\nRule8: If something shows all her cards to the lion, then it does not know the defensive plans of the spider\nRule9: If the carp purchased a time machine, then it does not eat the food that belongs to the grizzly bear\nRule10: If something does not roll the dice for the puffin but offers a job position to the squid, then it does not respect the grasshopper\nRule11: If the hare gives a magnifier to the meerkat, then the meerkat does not remove one of the pieces of the snail\nRule12: If the carp has fewer than six friends, then it eats the food that belongs to the grizzly bear\nRule13: If the carp has a name whose first letter is the same as the first letter of the kudu's name, then the carp eats the food that belongs to the grizzly bear\nRule14: If the carp eats the food that belongs to the grizzly bear, then the grizzly bear does not roll the dice for the snail\nRule15: If the snail has a name whose first letter is the same as the first letter of the pig's name, then the snail shows all her cards to the lion\n\nRule11 is preferred over Rule2\nRule5 is preferred over Rule10\nRule7 is preferred over Rule12\nRule7 is preferred over Rule13\nRule9 is preferred over Rule12\nRule9 is preferred over Rule13\n\nThe current state of the game is as follows\nThe carp has eleven friends\nThe carp invented a time machine\nThe carp is named Milo\nThe doctorfish winks at the cat\nThe hippopotamus learns the basics of resource management from the donkey\nThe kudu is named Mojo\nThe meerkat offers a job to the squid but does not roll the dice for the puffin\nThe moose has hot chocolate\nThe pig is named Casper\nThe snail has a card that is green in color and is named Cinnamon\n\nBased on the game state and the rules and preferences, does the snail proceed to the spot right after the leopard?\nQuestion: Does the snail proceed to the spot right after the leopard?",
        "idx": 460,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the moose has something to drink, then the moose raises a peace flag for the snail\nrule1() = has(moose, drink) => raise_flag_of_peace(moose, snail)\n# Rule2: If you are positive that one of the animals does not respect the grasshopper, you can be certain that it will remove from the board one of the pieces of the snail without a doubt\nrule2(something) = not respects(something, grasshopper) => remove(something, piece_of(snail))\n# Rule3: Regarding the snail, if it has a card whose color starts with the letter \"r\", then we can conclude that it shows her cards (all of them) to the lion\nrule3() = color_starts_with(snail, card) == \"r\" => show_cards(snail, lion)\n# Rule4: If at least one animal learns the basics of resource management from the donkey, then the eagle raises a peace flag for the spider\nrule4(something) = learns_basics_of_resource_management(something, donkey) => raise_flag_of_peace(eagle, spider)\n# Rule5: Regarding the meerkat, if it has fewer than twelve friends, then we can conclude that it respects the grasshopper\nrule5() = friends(meerkat) < 12 => respects(meerkat, grasshopper)\n# Rule6: For the snail, if the belief is that the grizzly bear is not going to roll the dice for the snail but the meerkat removes one of the pieces of the snail, then you can add that \"the snail is not going to proceed to the spot that is right after the spot of the leopard\" to your conclusions\nrule6() = not roll_dice(grizzly_bear, snail) & remove(meerkat, piece_of(snail)) => not proceed(snail, spot_right_after(spot_of(leopard)))\n# Rule7: If the carp has a card with a primary color, then the carp does not eat the food that belongs to the grizzly bear\nrule7() = has(carp, card_with(primary_color)) => not eat_food(carp, food_of(grizzly_bear))\n# Rule8: If something shows all her cards to the lion, then it does not know the defensive plans of the spider\nrule8(something) = show_cards(something, lion) => not knows(defensive_plans_of(spider), something)\n# Rule9: Regarding the carp, if it purchased a time machine, then we can conclude that it does not eat the food that belongs to the grizzly bear\nrule9() = purchased(carp, time_machine) => not eat_food(carp, food_of(grizzly_bear))\n# Rule10: If you see that something does not roll the dice for the puffin but it offers a job position to the squid, what can you certainly conclude? You can conclude that it is not going to respect the grasshopper\nrule10(something) = not roll_dice(something, puffin) & offer_job_position(something, squid) => not respects(something, grasshopper)\n# Rule11: The meerkat does not remove from the board one of the pieces of the snail, in the case where the hare gives a magnifier to the meerkat\nrule11() = give(hare, magnifier, meerkat) => not remove(meerkat, piece_of(snail))\n# Rule12: Regarding the carp, if it has fewer than six friends, then we can conclude that it eats the food that belongs to the grizzly bear\nrule12() = friends(carp) < 6 => eat_food(carp, food_of(grizzly_bear))\n# Rule13: If the carp has a name whose first letter is the same as the first letter of the kudu's name, then the carp eats the food of the grizzly bear\nrule13() = first_letter_of(name(carp)) == first_letter_of(name(kudu)) => eat_food(carp, food_of(grizzly_bear))\n# Rule14: The grizzly bear does not roll the dice for the snail, in the case where the carp eats the food that belongs to the grizzly bear\nrule14() = eat_food(carp, food_of(grizzly_bear)) => not roll_dice(grizzly_bear, snail)\n# Rule15: If the snail has a name whose first letter is the same as the first letter of the pig's name, then the snail shows her cards (all of them) to the lion.\nrule15() = first_letter_of(name(snail)) == first_letter_of(name(pig)) => show_cards(snail, lion)\n# Rule11 is preferred over Rule2\norder(rule11) > order(rule2) = True\n# Rule5 is preferred over Rule10\norder(rule5) > order(rule10) = True\n# Rule7 is preferred over Rule12\norder(rule7) > order(rule12) = True\n# Rule7 is preferred over Rule13\norder(rule7) > order(rule13) = True\n# Rule9 is preferred over Rule12\norder(rule9) > order(rule12) = True\n# Rule9 is preferred over Rule13\norder(rule9) > order(rule13) = True\n\n# The current state of the game is as follows\n# The carp has eleven friends, and invented a time machine\nfriends(carp) = 11\ninvented(carp, time_machine) = True\n# The carp is named Milo\nname(carp, Milo) = True\n# The doctorfish winks at the cat\nwinks(doctorfish, cat) = True\n# The hippopotamus learns the basics of resource management from the donkey\nlearns_basics_of_resource_management(hippopotamus, donkey) = True\n# The kudu is named Mojo\nname(kudu, Mojo) = True\n# The meerkat offers a job to the squid but does not roll the dice for the puffin\noffer_job_position(meerkat, squid) = True\nnot roll_dice(meerkat, puffin) = True\n# The moose has a hot chocolate\nhas(moose, hot_chocolate) = True\n# The pig is named Casper\nname(pig, Casper) = True\n# The snail has a card that is green in color, and is named Cinnamon\nhas(snail, card_with(green_color)) = True\nname(snail, Cinnamon) = True\n\n# Based on the game state and the rules and preferences, does the snail proceed to the spot right after the leopard?\nquestion = proceed(snail, spot_right_after(spot_of(leopard)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the swordfish does not raise a peace flag for the amberjack, then the amberjack learns the basics of resource management from the bat\nRule2: The swordfish will not show all her cards to the hare, in the case where the panda bear does not need support from the swordfish\nRule3: If at least one animal steals five points from the spider, then the kangaroo does not proceed to the spot right after the amberjack\nRule4: If the cheetah rolls the dice for the kangaroo, then the kangaroo proceeds to the spot right after the amberjack\nRule5: If the eagle steals five points from the amberjack and the kangaroo does not proceed to the spot right after the amberjack, then the amberjack does not learn elementary resource management from the bat\nRule6: If the swordfish has something to drink, then it shows all her cards to the hare\nRule7: If one of the animals eats the food of the doctorfish, then it steals five points from the spider\nRule8: If one of the animals shows all her cards to the hare, then it raises a peace flag for the amberjack\n\nRule2 is preferred over Rule6\nRule4 is preferred over Rule3\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe swordfish has a banana-strawberry smoothie\nThe whale eats the food of the doctorfish\n\nBased on the game state and the rules and preferences, does the amberjack learn the basics of resource management from the bat?\nQuestion: Does the amberjack learn the basics of resource management from the bat?",
        "idx": 461,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the swordfish does not raise a peace flag for the amberjack, then the amberjack learns the basics of resource management from the bat\nrule1() = not raise_flag_of_peace(swordfish, amberjack) => learn_basics_of_resource_management(amberjack, bat)\n# Rule2: The swordfish will not show all her cards to the hare, in the case where the panda bear does not need support from the swordfish\nrule2() = not needs_support(panda_bear, swordfish) => not show_cards(swordfish, hare)\n# Rule3: If at least one animal steals five of the points of the spider, then the kangaroo does not proceed to the spot right after the amberjack\nrule3() = steal_points(something, spider, 5) => not proceed(kangaroo, spot_right_after(spot_of(amberjack)))\n# Rule4: If the cheetah rolls the dice for the kangaroo, then the kangaroo proceeds to the spot right after the amberjack\nrule4() = roll_dice(cheetah, kangaroo) => proceed(kangaroo, spot_right_after(spot_of(amberjack)))\n# Rule5: For the amberjack, if the belief is that the eagle steals five points from the amberjack and the kangaroo does not proceed to the spot that is right after the spot of the amberjack, then you can add \"the amberjack does not learn elementary resource management from the bat\" to your conclusions\nrule5() = steal_points(eagle, amberjack, 5) & not proceed(kangaroo, spot_right_after(spot_of(amberjack))) => not learn_elementary_resource_management(amberjack, bat)\n# Rule6: Regarding the swordfish, if it has something to drink, then we can conclude that it shows her cards (all of them) to the hare\nrule6() = has(swordfish, drink) => show_cards(swordfish, hare)\n# Rule7: If you are positive that you saw one of the animals eats the food that belongs to the doctorfish, you can be certain that it will also steal five points from the spider\nrule7(something) = eats_food(something, food_of(doctorfish)) => steal_points(something, spider, 5)\n# Rule8: If you are positive that you saw one of the animals shows her cards (all of them) to the hare, you can be certain that it will also raise a peace flag for the amberjack.\nrule8(something) = show_cards(something, hare) => raise_flag_of_peace(something, amberjack)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The swordfish has a banana-strawberry smoothie\nhas(swordfish, banana_strawberry_smoothie) = True\n# The whale eats the food of the doctorfish\neats_food(whale, food_of(doctorfish)) = True\n\n# Based on the game state and the rules and preferences, does the amberjack learn the basics of resource management from the bat?\nquestion = learn_basics_of_resource_management(amberjack, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something attacks the green fields owned by the squid and also needs support from the panther because in this case it will surely respect the baboon\nRule2: If something sings a victory song for the cheetah, then it does not need support from the panther\nRule3: If at least one animal gives a magnifier to the grasshopper, then the polar bear needs the support of the panther\nRule4: The polar bear unquestionably attacks the green fields of the squid, in the case where the lobster owes money to the polar bear\nRule5: If the polar bear has a high-quality paper, then it does not sing a victory song for the cheetah\nRule6: The bat unquestionably gives a magnifier to the grasshopper, in the case where the panther needs support from the bat\nRule7: If the parrot does not become an enemy of the polar bear and the cheetah does not remove one of the pieces of the polar bear, then the polar bear sings a victory song for the cheetah\nRule8: If at least one animal holds an equal number of points as the leopard, then the lobster owes money to the polar bear\n\nRule3 is preferred over Rule2\nRule5 is preferred over Rule7\n\nThe current state of the game is as follows\nThe grizzly bear holds the same number of points as the leopard\nThe panther needs support from the bat\nThe cheetah does not remove one of the pieces of the polar bear\nThe parrot does not become an enemy of the polar bear\n\nBased on the game state and the rules and preferences, does the polar bear respect the baboon?\nQuestion: Does the polar bear respect the baboon?",
        "idx": 462,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something attacks the green fields whose owner is the squid and also needs support from the panther because in this case it will surely respect the baboon (this may or may not be problematic)\nrule1(something) = attack(something, green_fields_of(squid)) & needs_support(something, panther) => respect(something, baboon)\n# Rule2: If something sings a victory song for the cheetah, then it does not need support from the panther\nrule2() = sing_song(something, victory_song_for(cheetah)) => not needs_support(something, panther)\n# Rule3: If at least one animal gives a magnifier to the grasshopper, then the polar bear needs the support of the panther\nrule3() = give_magnifier(something, grasshopper) => needs_support(polar_bear, panther)\n# Rule4: The polar bear unquestionably attacks the green fields of the squid, in the case where the lobster owes money to the polar bear\nrule4() = owes_money_to(lobster, polar_bear) => attack(polar_bear, green_fields_of(squid))\n# Rule5: Regarding the polar bear, if it has a high-quality paper, then we can conclude that it does not sing a victory song for the cheetah\nrule5() = has(polar_bear, high_quality_paper) => not sing_song(polar_bear, victory_song_for(cheetah))\n# Rule6: The bat unquestionably gives a magnifier to the grasshopper, in the case where the panther needs support from the bat\nrule6() = needs_support(panther, bat) => give_magnifier(bat, grasshopper)\n# Rule7: If the parrot does not become an actual enemy of the polar bear and the cheetah does not remove one of the pieces of the polar bear, then the polar bear sings a victory song for the cheetah\nrule7() = not enemy(parrot, polar_bear) & not remove(cheetah, piece_of(polar_bear)) => sing_song(polar_bear, victory_song_for(cheetah))\n# Rule8: If at least one animal holds an equal number of points as the leopard, then the lobster owes money to the polar bear.\nrule8(something) = points(something) == points(leopard) => owes_money_to(lobster, polar_bear)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule5 is preferred over Rule7\norder(rule5) > order(rule7) = True\n\n# The current state of the game is as follows\n# The grizzly bear holds the same number of points as the leopard\npoints(grizzly_bear) == points(leopard) = True\n# The panther needs support from the bat\nneeds_support(panther, bat) = True\n# The cheetah does not remove from the board one of the pieces of the polar bear\nnot remove(cheetah, piece_of(polar_bear)) = True\n# The parrot does not become an enemy of the polar bear\nnot enemy(parrot, polar_bear) = True\n\n# Based on the game state and the rules and preferences, does the polar bear respect the baboon?\nquestion = respect(polar_bear, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grasshopper has a card whose color is one of the rainbow colors, then the grasshopper knows the defensive plans of the cricket\nRule2: If something steals five points from the cockroach and removes one piece from the hippopotamus, then it becomes an enemy of the black bear\nRule3: If the cricket has a card whose color starts with the letter \"b\", then it does not remove one piece from the hippopotamus\nRule4: If at least one animal knocks down the fortress of the cheetah, then the cricket steals five points from the cockroach\nRule5: If something raises a peace flag for the pig, then it also removes one piece from the hippopotamus\nRule6: If at least one animal becomes an enemy of the black bear, then it does not raise a peace flag for the raven\nRule7: If at least one animal offers a job to the zander, then the goldfish needs the support of the cricket\nRule8: If the grasshopper has a device to connect to the internet, then it does not know the defensive plans of the cricket\nRule9: If the grasshopper has more than five friends, then it does not know the defensive plans of the cricket\nRule10: If the grasshopper purchased a time machine, then it knows the defensive plans of the cricket\n\nRule3 is preferred over Rule5\nRule8 is preferred over Rule1\nRule8 is preferred over Rule10\nRule9 is preferred over Rule1\nRule9 is preferred over Rule10\n\nThe current state of the game is as follows\nThe cricket raises a peace flag for the pig\nThe dog knocks down the fortress of the cheetah\nThe elephant offers a job to the zander\nThe goldfish has a low-income job\nThe goldfish has three loyal friends and two friends that are not loyal\nThe grasshopper has four friends\nThe grasshopper has a card that is blue in color\nThe grasshopper invented a time machine\n\nBased on the game state and the rules and preferences, does the cricket raise a peace flag for the raven?\nQuestion: Does the cricket raise a peace flag for the raven?",
        "idx": 463,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grasshopper has a card whose color is one of the rainbow colors, then the grasshopper knows the defensive plans of the cricket\nrule1() = has(grasshopper, card) and color(card) in rainbow_colors => knows_defensive_plans(grasshopper, cricket)\n# Rule2: If you see that something steals five of the points of the cockroach and removes one of the pieces of the hippopotamus, what can you certainly conclude? You can conclude that it also becomes an enemy of the black bear\nrule2(something) = steal_points(something, cockroach, 5) & remove(something, piece_of(hippopotamus)) => enemy(something, black_bear)\n# Rule3: Regarding the cricket, if it has a card whose color starts with the letter \"b\", then we can conclude that it does not remove one of the pieces of the hippopotamus\nrule3() = starts_with(color(card_of(cricket)), \"b\") => not remove(cricket, piece_of(hippopotamus))\n# Rule4: If at least one animal knocks down the fortress of the cheetah, then the cricket steals five of the points of the cockroach\nrule4() = knock_down(fortress_of(cheetah), something) => steal_points(cricket, cockroach, 5)\n# Rule5: If something raises a peace flag for the pig, then it removes one of the pieces of the hippopotamus, too\nrule5(something) = raise_flag_of_peace(something, pig) => remove(something, piece_of(hippopotamus))\n# Rule6: If you are positive that you saw one of the animals becomes an actual enemy of the black bear, you can be certain that it will not raise a peace flag for the raven\nrule6(something) = enemy(something, black_bear) => not raise_flag_of_peace(something, raven)\n# Rule7: If at least one animal offers a job to the zander, then the goldfish needs the support of the cricket\nrule7() = offer_job(something, zander) => needs_support(goldfish, cricket)\n# Rule8: Regarding the grasshopper, if it has a device to connect to the internet, then we can conclude that it does not know the defensive plans of the cricket\nrule8() = has(grasshopper, connect_to_internet(device)) => not knows_defensive_plans(grasshopper, cricket)\n# Rule9: Regarding the grasshopper, if it has more than five friends, then we can conclude that it does not know the defense plan of the cricket\nrule9() = friends(grasshopper) > 5 => not knows_defensive_plans(grasshopper, cricket)\n# Rule10: If the grasshopper purchased a time machine, then the grasshopper knows the defensive plans of the cricket.\nrule10() = purchased(grasshopper, time_machine) => knows_defensive_plans(grasshopper, cricket)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule8 is preferred over Rule1\norder(rule8) > order(rule1) = True\n# Rule8 is preferred over Rule10\norder(rule8) > order(rule10) = True\n# Rule9 is preferred over Rule1\norder(rule9) > order(rule1) = True\n# Rule9 is preferred over Rule10\norder(rule9) > order(rule10) = True\n\n# The current state of the game is as follows\n# The cricket raises a peace flag for the pig\nraise_flag_of_peace(cricket, pig) = True\n# The dog knocks down the fortress of the cheetah\nknock_down(fortress_of(cheetah), dog) = True\n# The elephant offers a job to the zander\noffer_job(elephant, zander) = True\n# The goldfish has a low-income job\nhas(goldfish, low_income_job) = True\n# The goldfish has three loyal friends and two friends that are not loyal\nfriends(goldfish, loyal) = 3\nfriends(goldfish, not_loyal) = 2\n# The grasshopper has 4 friends\nfriends(grasshopper) = 4\n# The grasshopper has a card that is blue in color, and invented a time machine\nhas(grasshopper, card_with(blue_color)) = True\ninvented(grasshopper, time_machine) = True\n\n# Based on the game state and the rules and preferences, does the cricket raise a peace flag for the raven?\nquestion = raise_flag_of_peace(cricket, raven)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the pig gives a magnifying glass to the raven and the cheetah sings a song of victory for the raven, then the raven will not raise a flag of peace for the panda bear\nRule2: If something owes money to the penguin but does not proceed to the spot right after the meerkat, then it raises a peace flag for the panda bear\nRule3: If the raven has a name whose first letter is the same as the first letter of the puffin's name, then it shows all her cards to the penguin\nRule4: If the raven has a musical instrument, then it does not show all her cards to the penguin\nRule5: If the raven has a card whose color appears in the flag of Netherlands, then it does not show all her cards to the penguin\nRule6: If the tiger knows the defense plan of the pig, then the pig gives a magnifier to the raven\nRule7: If something does not prepare armor for the sea bass, then it proceeds to the spot right after the spot of the meerkat\nRule8: If something does not raise a flag of peace for the panda bear, then it burns the warehouse of the grizzly bear\nRule9: If at least one animal owes money to the black bear, then the raven does not proceed to the spot right after the meerkat\nRule10: The cheetah sings a victory song for the raven whenever at least one animal gives a magnifying glass to the mosquito\nRule11: If the raven took a bike from the store, then it shows all her cards to the penguin\n\nRule1 is preferred over Rule2\nRule4 is preferred over Rule11\nRule4 is preferred over Rule3\nRule5 is preferred over Rule11\nRule5 is preferred over Rule3\nRule9 is preferred over Rule7\n\nThe current state of the game is as follows\nThe aardvark gives a magnifier to the mosquito\nThe leopard learns the basics of resource management from the black bear\nThe puffin is named Lily\nThe raven has a beer\nThe raven stole a bike from the store\nThe raven is named Pashmak\nThe tiger learns the basics of resource management from the pig\nThe raven does not burn the warehouse of the sea bass\n\nBased on the game state and the rules and preferences, does the raven burn the warehouse of the grizzly bear?\nQuestion: Does the raven burn the warehouse of the grizzly bear?",
        "idx": 464,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the pig gives a magnifying glass to the raven and the cheetah sings a song of victory for the raven, then the raven will not raise a flag of peace for the panda bear\nrule1() = give(pig, magnifying_glass, raven) & sing_song(cheetah, victory_song_for(raven)) => not raise_flag_of_peace(raven, panda_bear)\n# Rule2: If you see that something owes money to the penguin but does not proceed to the spot right after the meerkat, what can you certainly conclude? You can conclude that it raises a peace flag for the panda bear\nrule2(something) = owes_money_to(something, penguin) & not proceed(something, spot_right_after(spot_of(meerkat))) => raise_flag_of_peace(something, panda_bear)\n# Rule3: Regarding the raven, if it has a name whose first letter is the same as the first letter of the puffin's name, then we can conclude that it shows all her cards to the penguin\nrule3() = first_letter_of(name(raven)) == first_letter_of(name(puffin)) => show_cards(raven, penguin)\n# Rule4: If the raven has a musical instrument, then the raven does not show her cards (all of them) to the penguin\nrule4() = has(raven, musical_instrument) => not show_cards(raven, penguin)\n# Rule5: If the raven has a card whose color appears in the flag of Netherlands, then the raven does not show all her cards to the penguin\nrule5() = has(raven, card_with(color_in(flag_of(Netherlands)))) => not show_cards(raven, penguin)\n# Rule6: If the tiger knows the defense plan of the pig, then the pig gives a magnifier to the raven\nrule6() = knows(defense_plan_of(pig), tiger) => give(pig, magnifier, raven)\n# Rule7: If you are positive that one of the animals does not prepare armor for the sea bass, you can be certain that it will proceed to the spot that is right after the spot of the meerkat without a doubt\nrule7(something) = not prepare_armor(something, sea_bass) => proceed(something, spot_right_after(spot_of(meerkat)))\n# Rule8: If you are positive that one of the animals does not raise a flag of peace for the panda bear, you can be certain that it will burn the warehouse of the grizzly bear without a doubt\nrule8(something) = not raise_flag_of_peace(something, panda_bear) => burn(warehouse_of(grizzly_bear), something)\n# Rule9: If at least one animal owes $$$ to the black bear, then the raven does not proceed to the spot right after the meerkat\nrule9() = owes_money_to(something, black_bear) => not proceed(raven, spot_right_after(spot_of(meerkat)))\n# Rule10: The cheetah sings a victory song for the raven whenever at least one animal gives a magnifying glass to the mosquito\nrule10() = give(something, magnifying_glass, mosquito) => sing_song(cheetah, victory_song_for(raven))\n# Rule11: Regarding the raven, if it took a bike from the store, then we can conclude that it shows her cards (all of them) to the penguin.\nrule11() = took_bike_from_store(raven) => show_cards(raven, penguin)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule4 is preferred over Rule11\norder(rule4) > order(rule11) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule5 is preferred over Rule11\norder(rule5) > order(rule11) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule9 is preferred over Rule7\norder(rule9) > order(rule7) = True\n\n# The current state of the game is as follows\n# The aardvark gives a magnifier to the mosquito\ngive(aardvark, magnifier, mosquito) = True\n# The leopard learns the basics of resource management from the black bear\nlearns_basics_of_resource_management(leopard, black_bear) = True\n# The puffin is named Lily\nname(puffin, Lily) = True\n# The raven has a beer, and stole a bike from the store\nhas(raven, beer) = True\nstole_bike_from_store(raven) = True\n# The raven is named Pashmak\nname(raven, Pashmak) = True\n# The tiger learns the basics of resource management from the pig\nlearns_basics_of_resource_management(tiger, pig) = True\n# The raven does not burn the warehouse of the sea bass\nnot burn(warehouse_of(sea_bass), raven) = True\n\n# Based on the game state and the rules and preferences, does the raven burn the warehouse of the grizzly bear?\nquestion = burn(warehouse_of(grizzly_bear), raven)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the wolverine has a name whose first letter is the same as the first letter of the zander's name, then it steals five points from the parrot\nRule2: If the parrot has a name whose first letter is the same as the first letter of the whale's name, then the parrot does not sing a song of victory for the lobster\nRule3: If the hummingbird burns the warehouse of the parrot and the cockroach knocks down the fortress of the parrot, then the parrot sings a victory song for the lobster\nRule4: If something attacks the green fields owned by the grizzly bear, then it gives a magnifier to the tiger\nRule5: If something sings a victory song for the lobster, then it does not raise a flag of peace for the halibut\nRule6: If the wolverine steals five points from the parrot, then the parrot attacks the green fields owned by the grizzly bear\nRule7: If something does not remove a piece of the pig and also does not raise a peace flag for the halibut, then it does not give a magnifier to the tiger\n\nRule3 is preferred over Rule2\nRule7 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cockroach knocks down the fortress of the parrot\nThe hummingbird burns the warehouse of the parrot\nThe parrot has 7 mean friends and 3 non-mean friends\nThe parrot is named Tango\nThe whale is named Peddi\nThe wolverine is named Max\nThe zander is named Meadow\n\nBased on the game state and the rules and preferences, does the parrot give a magnifier to the tiger?\nQuestion: Does the parrot give a magnifier to the tiger?",
        "idx": 465,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the wolverine, if it has a name whose first letter is the same as the first letter of the zander's name, then we can conclude that it steals five points from the parrot\nrule1() = first_letter_of(name(wolverine)) == first_letter_of(name(zander)) => steal_points(wolverine, 5, parrot)\n# Rule2: If the parrot has a name whose first letter is the same as the first letter of the whale's name, then the parrot does not sing a song of victory for the lobster\nrule2() = first_letter_of(name(parrot)) == first_letter_of(name(whale)) => not sing_song(parrot, victory_song_for(lobster))\n# Rule3: For the parrot, if the belief is that the hummingbird burns the warehouse of the parrot and the cockroach knocks down the fortress of the parrot, then you can add \"the parrot sings a victory song for the lobster\" to your conclusions\nrule3() = belief(hummingbird_burns_warehouse_of(parrot)) & belief(cockroach_knocks_down_fortress_of(parrot)) => sing_song(parrot, victory_song_for(lobster))\n# Rule4: If something attacks the green fields whose owner is the grizzly bear, then it gives a magnifier to the tiger, too\nrule4(something) = attack(green_fields_of(grizzly_bear)) => give_magnifier(something, tiger)\n# Rule5: If something sings a victory song for the lobster, then it does not raise a flag of peace for the halibut\nrule5(something) = sing_song(something, victory_song_for(lobster)) => not raise_flag_of_peace(something, halibut)\n# Rule6: If the wolverine steals five of the points of the parrot, then the parrot attacks the green fields whose owner is the grizzly bear\nrule6() = steal_points(wolverine, 5, parrot) => attack(green_fields_of(grizzly_bear))\n# Rule7: If you see that something does not remove one of the pieces of the pig and also does not raise a peace flag for the halibut, what can you certainly conclude? You can conclude that it also does not give a magnifier to the tiger.\nrule7(something) = not remove(something, piece_of(pig)) & not raise_flag_of_peace(something, halibut) => not give_magnifier(something, tiger)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cockroach knocks down the fortress of the parrot\nknocks_down_fortress(cockroach, parrot) = True\n# The hummingbird burns the warehouse of the parrot\nburns_warehouse(hummingbird, parrot) = True\n# The parrot has 7 friends that are mean and 3 friends that are not\nfriends(parrot, mean) = 7\nfriends(parrot, not_mean) = 3\n# The parrot is named Tango\nname(parrot, Tango) = True\n# The whale is named Peddi\nname(whale, Peddi) = True\n# The wolverine is named Max\nname(wolverine, Max) = True\n# The zander is named Meadow\nname(zander, Meadow) = True\n\n# Based on the game state and the rules and preferences, does the parrot give a magnifier to the tiger?\nquestion = give_magnifier(parrot, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knocks down the fortress of the halibut and attacks the green fields of the rabbit, then it also knocks down the fortress of the octopus\nRule2: If the moose does not raise a peace flag for the dog, then the dog knocks down the fortress of the halibut\nRule3: If the oscar has a card whose color starts with the letter \"o\", then it winks at the cat\nRule4: The dog attacks the green fields of the rabbit whenever at least one animal knocks down the fortress of the kangaroo\nRule5: If at least one animal attacks the green fields of the baboon, then the oscar does not wink at the cat\nRule6: If the raven gives a magnifier to the eagle, then the eagle does not eat the food that belongs to the octopus\nRule7: If the dog knocks down the fortress of the octopus and the eagle eats the food that belongs to the octopus, then the octopus does not steal five points from the canary\nRule8: The eagle eats the food that belongs to the octopus whenever at least one animal winks at the cat\nRule9: The raven gives a magnifying glass to the eagle whenever at least one animal knocks down the fortress of the puffin\nRule10: If something needs the support of the wolverine, then it does not knock down the fortress of the halibut\n\nRule10 is preferred over Rule2\nRule5 is preferred over Rule3\nRule8 is preferred over Rule6\n\nThe current state of the game is as follows\nThe black bear knocks down the fortress of the puffin\nThe oscar has a card that is orange in color\nThe swordfish knocks down the fortress of the kangaroo\nThe moose does not raise a peace flag for the dog\n\nBased on the game state and the rules and preferences, does the octopus steal five points from the canary?\nQuestion: Does the octopus steal five points from the canary?",
        "idx": 466,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something knocks down the fortress of the halibut and attacks the green fields of the rabbit, what can you certainly conclude? You can conclude that it also knocks down the fortress of the octopus\nrule1() = knock_down(fortress_of(halibut), something) & attack(green_fields_of(rabbit), something) => knock_down(fortress_of(octopus), something)\n# Rule2: If the moose does not raise a peace flag for the dog, then the dog knocks down the fortress that belongs to the halibut\nrule2() = not raise_flag_of_peace(moose, dog) => knock_down(fortress_of(halibut), dog)\n# Rule3: Regarding the oscar, if it has a card whose color starts with the letter \"o\", then we can conclude that it winks at the cat\nrule3() = has(oscar, card_with(color_starting_with(\"o\"))) => wink(oscar, cat)\n# Rule4: The dog attacks the green fields of the rabbit whenever at least one animal knocks down the fortress of the kangaroo\nrule4() = knock_down(fortress_of(kangaroo), something) => attack(green_fields_of(rabbit), dog)\n# Rule5: If at least one animal attacks the green fields of the baboon, then the oscar does not wink at the cat\nrule5() = attack(green_fields_of(baboon), something) => not wink(oscar, cat)\n# Rule6: If the raven gives a magnifier to the eagle, then the eagle is not going to eat the food that belongs to the octopus\nrule6() = give(raven, magnifier, eagle) => not eat(food_of(octopus), eagle)\n# Rule7: For the octopus, if the belief is that the dog knocks down the fortress of the octopus and the eagle eats the food that belongs to the octopus, then you can add that \"the octopus is not going to steal five of the points of the canary\" to your conclusions\nrule7() = knock_down(fortress_of(octopus), dog) & eat(food_of(octopus), eagle) => not steal_points(octopus, 5, canary)\n# Rule8: The eagle eats the food that belongs to the octopus whenever at least one animal winks at the cat\nrule8() = wink(something, cat) => eat(food_of(octopus), eagle)\n# Rule9: The raven gives a magnifying glass to the eagle whenever at least one animal knocks down the fortress of the puffin\nrule9() = knock_down(fortress_of(puffin), something) => give(raven, magnifying_glass, eagle)\n# Rule10: If something needs the support of the wolverine, then it does not knock down the fortress of the halibut.\nrule10() = needs_support(something, wolverine) => not knock_down(fortress_of(halibut), something)\n# Rule10 is preferred over Rule2\norder(rule10) > order(rule2) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule8 is preferred over Rule6\norder(rule8) > order(rule6) = True\n\n# The current state of the game is as follows\n# The black bear knocks down the fortress of the puffin\nknock_down(fortress_of(puffin), black_bear) = True\n# The oscar has a card that is orange in color\nhas(oscar, card_with(orange_color)) = True\n# The swordfish knocks down the fortress of the kangaroo\nknock_down(fortress_of(kangaroo), swordfish) = True\n# The moose does not raise a peace flag for the dog\nnot raise_flag_of_peace(moose, dog) = True\n\n# Based on the game state and the rules and preferences, does the octopus steal five points from the canary?\nquestion = steal_points(octopus, 5, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If one of the animals does not sing a victory song for the panda bear, then it will respect the snail\nRule2: If the kangaroo does not have her keys, then it offers a job position to the catfish\nRule3: If the kangaroo offers a job position to the catfish and the jellyfish burns the warehouse of the catfish, then the catfish knows the defensive plans of the hippopotamus\nRule4: The jellyfish burns the warehouse of the catfish whenever at least one animal becomes an enemy of the eel\nRule5: If something knows the defensive plans of the hippopotamus and respects the snail, then it also learns the basics of resource management from the kiwi\nRule6: If the catfish has more than three adventurous friends, then it does not sing a victory song for the panda bear\n\nThe current state of the game is as follows\nThe catfish has 3 adventurous friends and 2 non-adventurous friends\nThe jellyfish has a card that is green in color\nThe jellyfish has a love seat sofa\nThe kangaroo lost her keys\nThe grasshopper does not become an enemy of the eel\n\nBased on the game state and the rules and preferences, does the catfish learn the basics of resource management from the kiwi?\nQuestion: Does the catfish learn the basics of resource management from the kiwi?",
        "idx": 467,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not sing a victory song for the panda bear, you can be certain that it will respect the snail without a doubt\nrule1() = not sing_song(something, victory_song_for(panda_bear)) => respect(something, snail)\n# Rule2: Regarding the kangaroo, if it does not have her keys, then we can conclude that it offers a job position to the catfish\nrule2() = not has(kangaroo, keys) => offer_job_position(kangaroo, catfish)\n# Rule3: For the catfish, if the belief is that the kangaroo offers a job position to the catfish and the jellyfish burns the warehouse that is in possession of the catfish, then you can add \"the catfish knows the defensive plans of the hippopotamus\" to your conclusions\nrule3() = offer_job_position(kangaroo, catfish) & burn(warehouse_of(catfish), jellyfish) => knows_defensive_plans(catfish, hippopotamus)\n# Rule4: The jellyfish burns the warehouse of the catfish whenever at least one animal becomes an enemy of the eel\nrule4(something) = enemy(something, eel) => burn(warehouse_of(catfish), jellyfish)\n# Rule5: If you see that something knows the defensive plans of the hippopotamus and respects the snail, what can you certainly conclude? You can conclude that it also learns the basics of resource management from the kiwi\nrule5() = knows_defensive_plans(something, hippopotamus) & respect(something, snail) => learn_basics_of_resource_management(something, kiwi)\n# Rule6: Regarding the catfish, if it has more than three friends, then we can conclude that it does not sing a victory song for the panda bear.\nrule6() = count(friends(catfish)) > 3 => not sing_song(catfish, victory_song_for(panda_bear))\n\n# The current state of the game is as follows\n# The catfish has 3 friends that are adventurous and two friends that are not\ncount(friends(catfish, adventurous)) = 3\ncount(friends(catfish, not adventurous)) = 2\n# The jellyfish has a card that is green in color\nhas(jellyfish, card_with(green_color)) = True\n# The jellyfish has a love seat sofa\nhas(jellyfish, love_seat_sofa) = True\n# The kangaroo lost her keys\nnot has(kangaroo, keys) = True\n# The grasshopper does not become an enemy of the eel\nnot enemy(grasshopper, eel) = True\n\n# Based on the game state and the rules and preferences, does the catfish learn the basics of resource management from the kiwi?\nquestion = learn_basics_of_resource_management(catfish, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If none of the animals holds an equal number of points as the cricket, then they will not know the defense plan of the goldfish\nRule2: If something eats the food that belongs to the tilapia and knows the defensive plans of the goldfish, then it will not offer a job position to the gecko\nRule3: If the wolverine has a name whose first letter is the same as the first letter of the octopus's name, then the wolverine becomes an enemy of the crocodile\nRule4: The bat eats the food that belongs to the wolverine whenever at least one animal knocks down the fortress of the panda bear\nRule5: If something respects the pig, then it steals five points from the gecko as well\nRule6: If the bat eats the food that belongs to the wolverine, then the wolverine knocks down the fortress that belongs to the gecko\nRule7: The cat knows the defense plan of the goldfish whenever at least one animal eats the food that belongs to the viperfish\nRule8: If the tilapia has a sharp object, then it respects the pig\nRule9: If the cat does not offer a job to the gecko but the wolverine knocks down the fortress of the gecko, then the gecko knows the defensive plans of the halibut\nRule10: If none of the animals knows the defense plan of the donkey, then they will eat the food that belongs to the tilapia\nRule11: If the tilapia has a name whose first letter is the same as the first letter of the parrot's name, then the tilapia respects the pig\n\nRule7 is preferred over Rule1\n\nThe current state of the game is as follows\nThe aardvark knocks down the fortress of the panda bear\nThe elephant eats the food of the viperfish\nThe octopus is named Pashmak\nThe parrot is named Paco\nThe tilapia has a cutter\nThe tilapia is named Chickpea\nThe wolverine is named Paco\nThe zander owes money to the ferret\nThe cat does not hold the same number of points as the cricket\nThe cat does not know the defensive plans of the donkey\n\nBased on the game state and the rules and preferences, does the gecko know the defensive plans of the halibut?\nQuestion: Does the gecko know the defensive plans of the halibut?",
        "idx": 468,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not hold an equal number of points as the cricket, you can be certain that it will not know the defense plan of the goldfish\nrule1() = not holds_equal_points(animal, cricket) => not knows_defense_plan(animal, goldfish)\n# Rule2: Be careful when something eats the food that belongs to the tilapia and also knows the defensive plans of the goldfish because in this case it will surely not offer a job position to the gecko (this may or may not be problematic)\nrule2(something) = eat_food(something, food_of(tilapia)) & knows_defense_plan(something, goldfish) => not offer_job_position(something, gecko)\n# Rule3: If the wolverine has a name whose first letter is the same as the first letter of the octopus's name, then the wolverine becomes an enemy of the crocodile\nrule3() = first_letter_of(name(wolverine)) == first_letter_of(name(octopus)) => enemy(wolverine, crocodile)\n# Rule4: The bat eats the food that belongs to the wolverine whenever at least one animal knocks down the fortress of the panda bear\nrule4() = knock_down_fortress(animal, panda_bear) => eat_food(bat, food_of(wolverine))\n# Rule5: If something respects the pig, then it steals five points from the gecko, too\nrule5(something) = respects(something, pig) => steal_points(something, 5, gecko)\n# Rule6: If the bat eats the food that belongs to the wolverine, then the wolverine knocks down the fortress that belongs to the gecko\nrule6() = eat_food(bat, food_of(wolverine)) => knock_down_fortress(wolverine, fortress_of(gecko))\n# Rule7: The cat knows the defense plan of the goldfish whenever at least one animal eats the food that belongs to the viperfish\nrule7() = eat_food(animal, food_of(viperfish)) => knows_defense_plan(cat, goldfish)\n# Rule8: Regarding the tilapia, if it has a sharp object, then we can conclude that it respects the pig\nrule8() = has(tilapia, sharp_object) => respects(tilapia, pig)\n# Rule9: For the gecko, if the belief is that the cat does not offer a job to the gecko but the wolverine knocks down the fortress of the gecko, then you can add \"the gecko knows the defensive plans of the halibut\" to your conclusions\nrule9() = not offer_job_position(cat, gecko) & knock_down_fortress(wolverine, fortress_of(gecko)) => knows_defensive_plans(gecko, halibut)\n# Rule10: If you are positive that one of the animals does not know the defense plan of the donkey, you can be certain that it will eat the food that belongs to the tilapia without a doubt\nrule10() = not knows_defense_plan(animal, donkey) => eat_food(animal, food_of(tilapia))\n# Rule11: If the tilapia has a name whose first letter is the same as the first letter of the parrot's name, then the tilapia respects the pig.\nrule11() = first_letter_of(name(tilapia)) == first_letter_of(name(parrot)) => respects(tilapia, pig)\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n\n# The current state of the game is as follows\n# The aardvark knocks down the fortress of the panda bear\nknock_down_fortress(aardvark, fortress_of(panda_bear)) = True\n# The elephant eats the food of the viperfish\neat_food(elephant, food_of(viperfish)) = True\n# The octopus is named Pashmak\nname(octopus, Pashmak) = True\n# The parrot is named Paco\nname(parrot, Paco) = True\n# The tilapia has a cutter\nhas(tilapia, cutter) = True\n# The tilapia is named Chickpea\nname(tilapia, Chickpea) = True\n# The wolverine is named Paco\nname(wolverine, Paco) = True\n# The zander owes money to the ferret\nowes_money_to(zander, ferret) = True\n# The cat does not hold the same number of points as the cricket\nholds_equal_points(cat, cricket) = False\n# The cat does not know the defensive plans of the donkey\nknows_defense_plan(cat, donkey) = False\n\n# Based on the game state and the rules and preferences, does the gecko know the defensive plans of the halibut?\nquestion = knows_defensive_plans(gecko, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish has a card with a primary color, then the blobfish winks at the mosquito\nRule2: If the mosquito works fewer hours than before, then it does not steal five points from the cow\nRule3: If the starfish has a leafy green vegetable, then it becomes an actual enemy of the mosquito\nRule4: If the doctorfish created a time machine, then the doctorfish needs the support of the mosquito\nRule5: The blobfish does not wink at the mosquito whenever at least one animal becomes an actual enemy of the halibut\nRule6: If the whale has a name whose first letter is the same as the first letter of the raven's name, then the whale needs the support of the sheep\nRule7: If something does not burn the warehouse that is in possession of the pig but becomes an actual enemy of the turtle, then it does not show all her cards to the cockroach\nRule8: The mosquito does not burn the warehouse that is in possession of the pig whenever at least one animal needs support from the sheep\nRule9: If the whale is a fan of Chris Ronaldo, then the whale needs the support of the sheep\nRule10: If something steals five points from the cow, then it becomes an enemy of the turtle, too\nRule11: If the starfish has a card whose color starts with the letter \"n\", then it becomes an actual enemy of the mosquito\nRule12: The mosquito unquestionably steals five points from the cow, in the case where the hummingbird does not hold an equal number of points as the mosquito\n\nRule2 is preferred over Rule12\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe blobfish has a card that is green in color\nThe doctorfish invented a time machine\nThe raven is named Beauty\nThe starfish has a card that is indigo in color\nThe starfish has romaine lettuce\nThe whale is named Luna and supports Chris Ronaldo\nThe eel does not remove one of the pieces of the starfish\nThe hummingbird does not hold the same number of points as the mosquito\n\nBased on the game state and the rules and preferences, does the mosquito show all her cards to the cockroach?\nQuestion: Does the mosquito show all her cards to the cockroach?",
        "idx": 469,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the blobfish has a card with a primary color, then the blobfish winks at the mosquito\nrule1() = has(blobfish, card_with(primary_color)) => wink(blobfish, mosquito)\n# Rule2: Regarding the mosquito, if it works fewer hours than before, then we can conclude that it does not steal five of the points of the cow\nrule2() = reduce_work_hours(mosquito) => not steal_points(mosquito, 5, cow)\n# Rule3: Regarding the starfish, if it has a leafy green vegetable, then we can conclude that it becomes an actual enemy of the mosquito\nrule3() = has(starfish, leafy_green_vegetable) => actual_enemy(starfish, mosquito)\n# Rule4: If the doctorfish created a time machine, then the doctorfish needs the support of the mosquito\nrule4() = created_time_machine(doctorfish) => needs_support(doctorfish, mosquito)\n# Rule5: The blobfish does not wink at the mosquito whenever at least one animal becomes an actual enemy of the halibut\nrule5() = actual_enemy(something, halibut) => not wink(blobfish, mosquito)\n# Rule6: Regarding the whale, if it has a name whose first letter is the same as the first letter of the raven's name, then we can conclude that it needs the support of the sheep\nrule6() = first_letter_of(name(whale)) == first_letter_of(name(raven)) => needs_support(whale, sheep)\n# Rule7: Be careful when something does not burn the warehouse that is in possession of the pig but becomes an actual enemy of the turtle because in this case it certainly does not show her cards (all of them) to the cockroach (this may or may not be problematic)\nrule7(something) = not burn(warehouse_of(pig), something) & actual_enemy(something, turtle) => not show_cards(something, cockroach)\n# Rule8: The mosquito does not burn the warehouse that is in possession of the pig whenever at least one animal needs support from the sheep\nrule8() = needs_support(something, sheep) => not burn(warehouse_of(pig), mosquito)\n# Rule9: If the whale is a fan of Chris Ronaldo, then the whale needs the support of the sheep\nrule9() = fan_of(whale, Chris_Ronaldo) => needs_support(whale, sheep)\n# Rule10: If something steals five points from the cow, then it becomes an enemy of the turtle, too\nrule10() = steal_points(something, 5, cow) => enemy(something, turtle)\n# Rule11: Regarding the starfish, if it has a card whose color starts with the letter \"n\", then we can conclude that it becomes an actual enemy of the mosquito\nrule11() = has(starfish, card_with(color_starting_with(\"n\"))) => actual_enemy(starfish, mosquito)\n# Rule12: The mosquito unquestionably steals five of the points of the cow, in the case where the hummingbird does not hold an equal number of points as the mosquito.\nrule12() = not equal_points(hummingbird, mosquito) => steal_points(mosquito, 5, cow)\n# Rule2 is preferred over Rule12\norder(rule2) > order(rule12) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The blobfish has a card that is green in color\nhas(blobfish, card_with(green_color)) = True\n# The doctorfish invented a time machine\ncreated_time_machine(doctorfish) = True\n# The raven is named Beauty\nname(raven, Beauty) = True\n# The starfish has a card that is indigo in color\nhas(starfish, card_with(indigo_color)) = True\n# The starfish has some romaine lettuce\nhas(starfish, romaine_lettuce) = True\n# The whale is named Luna, and supports Chris Ronaldo\nname(whale, Luna) = True\nsupports(whale, Chris_Ronaldo) = True\n# The eel does not remove from the board one of the pieces of the starfish\nnot remove(eel, piece_of(starfish)) = True\n# The hummingbird does not hold the same number of points as the mosquito\nnot equal_points(hummingbird, mosquito) = True\n\n# Based on the game state and the rules and preferences, does the mosquito show all her cards to the cockroach?\nquestion = show_cards(mosquito, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something does not learn the basics of resource management from the moose but it winks at the turtle, then you can conclude that it also steals five points from the elephant\nRule2: If at least one animal proceeds to the spot right after the viperfish, then the canary winks at the turtle\nRule3: If the sheep does not respect the canary and the doctorfish gives a magnifying glass to the canary, then the canary does not learn the basics of resource management from the moose\nRule4: The hippopotamus prepares armor for the amberjack whenever at least one animal steals five points from the elephant\nRule5: If you are positive that one of the animals does not roll the dice for the octopus, then you can be certain that it will not wink at the turtle\n\nRule2 is preferred over Rule5\n\nThe current state of the game is as follows\nThe doctorfish knocks down the fortress of the canary\nThe rabbit proceeds to the spot right after the viperfish\nThe canary does not roll the dice for the octopus\nThe sheep does not respect the canary\n\nBased on the game state and the rules and preferences, does the hippopotamus prepare armor for the amberjack?\nQuestion: Does the hippopotamus prepare armor for the amberjack?",
        "idx": 470,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not learn the basics of resource management from the moose but it winks at the turtle, what can you certainly conclude? You can conclude that it also steals five points from the elephant\nrule1(something) = not learn_basics_of_resource_management_from(something, moose) & wink_at(something, turtle) => steal_points(something, 5, elephant)\n# Rule2: If at least one animal proceeds to the spot right after the viperfish, then the canary winks at the turtle\nrule2() = proceed(something, spot_right_after(spot_of(viperfish))) => wink_at(canary, turtle)\n# Rule3: For the canary, if the belief is that the sheep is not going to respect the canary but the doctorfish gives a magnifying glass to the canary, then you can add that \"the canary is not going to learn the basics of resource management from the moose\" to your conclusions\nrule3() = not respects(sheep, canary) & give(doctorfish, magnifying_glass, canary) => not learn_basics_of_resource_management_from(canary, moose)\n# Rule4: The hippopotamus prepares armor for the amberjack whenever at least one animal steals five points from the elephant\nrule4() = steal_points(something, 5, elephant) => prepare_armor(hippopotamus, amberjack)\n# Rule5: If you are positive that one of the animals does not roll the dice for the octopus, you can be certain that it will not wink at the turtle.\nrule5(something) = not roll_dice(something, octopus) => not wink_at(something, turtle)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n\n# The current state of the game is as follows\n# The doctorfish knocks down the fortress of the canary\nknock_down(doctorfish, fortress_of(canary)) = True\n# The rabbit proceeds to the spot right after the viperfish\nproceed(rabbit, spot_right_after(spot_of(viperfish))) = True\n# The canary does not roll the dice for the octopus\nnot roll_dice(canary, octopus) = True\n# The sheep does not respect the canary\nnot respects(sheep, canary) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus prepare armor for the amberjack?\nquestion = prepare_armor(hippopotamus, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something burns the warehouse that is in possession of the puffin and also becomes an actual enemy of the aardvark because in this case it will surely not need support from the donkey\nRule2: The gecko raises a flag of peace for the doctorfish whenever at least one animal sings a victory song for the crocodile\nRule3: If the doctorfish has a card whose color appears in the flag of Netherlands, then the doctorfish burns the warehouse of the puffin\nRule4: If the doctorfish has a musical instrument, then it becomes an actual enemy of the aardvark\nRule5: If something does not need support from the donkey, then it prepares armor for the polar bear\nRule6: If the doctorfish has a name whose first letter is the same as the first letter of the baboon's name, then it burns the warehouse that is in possession of the puffin\nRule7: If the panda bear owes money to the doctorfish and the sun bear winks at the doctorfish, then the doctorfish will not become an enemy of the aardvark\n\nRule4 is preferred over Rule7\n\nThe current state of the game is as follows\nThe baboon is named Milo\nThe doctorfish has a card that is orange in color\nThe doctorfish is named Mojo\nThe doctorfish has a trumpet\nThe hummingbird sings a victory song for the crocodile\nThe panda bear owes money to the doctorfish\nThe rabbit raises a peace flag for the sheep\nThe sun bear winks at the doctorfish\n\nBased on the game state and the rules and preferences, does the doctorfish prepare armor for the polar bear?\nQuestion: Does the doctorfish prepare armor for the polar bear?",
        "idx": 471,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something burns the warehouse that is in possession of the puffin and also becomes an actual enemy of the aardvark because in this case it will surely not need support from the donkey (this may or may not be problematic)\nrule1(something) = burn(warehouse_of(puffin), something) & enemy(something, aardvark) => not need_support(something, donkey)\n# Rule2: The gecko raises a flag of peace for the doctorfish whenever at least one animal sings a victory song for the crocodile\nrule2() = sing_song(something, victory_song_for(crocodile)) => raise_flag_of_peace(gecko, doctorfish)\n# Rule3: If the doctorfish has a card whose color appears in the flag of Netherlands, then the doctorfish burns the warehouse of the puffin\nrule3() = has(doctorfish, card_with(color_in(flag_of_Netherlands))) => burn(warehouse_of(puffin), doctorfish)\n# Rule4: Regarding the doctorfish, if it has a musical instrument, then we can conclude that it becomes an actual enemy of the aardvark\nrule4() = has(doctorfish, musical_instrument) => enemy(doctorfish, aardvark)\n# Rule5: If you are positive that one of the animals does not need support from the donkey, you can be certain that it will prepare armor for the polar bear without a doubt\nrule5(something) = not need_support(something, donkey) => prepare_armor(something, polar_bear)\n# Rule6: Regarding the doctorfish, if it has a name whose first letter is the same as the first letter of the baboon's name, then we can conclude that it burns the warehouse that is in possession of the puffin\nrule6() = first_letter_of(name(doctorfish)) == first_letter_of(name(baboon)) => burn(warehouse_of(puffin), doctorfish)\n# Rule7: If the panda bear owes money to the doctorfish and the sun bear winks at the doctorfish, then the doctorfish will not become an enemy of the aardvark.\nrule7() = owes_money_to(panda_bear, doctorfish) & wink(sun_bear, doctorfish) => not enemy(doctorfish, aardvark)\n# Rule4 is preferred over Rule7\norder(rule4) > order(rule7) = True\n\n# The current state of the game is as follows\n# The baboon is named Milo\nname(baboon, Milo) = True\n# The doctorfish has a card that is orange in color, and is named Mojo\nhas(doctorfish, card_with(orange_color)) = True\nname(doctorfish, Mojo) = True\n# The doctorfish has a trumpet\nhas(doctorfish, trumpet) = True\n# The hummingbird sings a victory song for the crocodile\nsing_song(hummingbird, victory_song_for(crocodile)) = True\n# The panda bear owes money to the doctorfish\nowes_money_to(panda_bear, doctorfish) = True\n# The rabbit raises a peace flag for the sheep\nraise_flag_of_peace(rabbit, sheep) = True\n# The sun bear winks at the doctorfish\nwink(sun_bear, doctorfish) = True\n\n# Based on the game state and the rules and preferences, does the doctorfish prepare armor for the polar bear?\nquestion = prepare_armor(doctorfish, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals owes money to the jellyfish, you can be certain that it will not give a magnifying glass to the koala\nRule2: If at least one animal shows all her cards to the koala, then the eagle gives a magnifier to the koala\nRule3: If the halibut has fewer than eleven friends, then it shows all her cards to the koala\nRule4: If you are positive that you saw one of the animals gives a magnifier to the koala, you can be certain that it will not raise a peace flag for the lobster\nRule5: If the eagle has a card whose color appears in the flag of France, then the eagle owes money to the jellyfish\nRule6: If the halibut has a card whose color starts with the letter \"e\", then it shows all her cards to the koala\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe eagle has a card that is red in color\nThe halibut has 1 loyal friend and 1 disloyal friend, and has a card that is red in color\n\nBased on the game state and the rules and preferences, does the eagle raise a peace flag for the lobster?\nQuestion: Does the eagle raise a peace flag for the lobster?",
        "idx": 472,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals owes money to the jellyfish, you can be certain that it will not give a magnifying glass to the koala\nrule1() = owes_money_to(something, jellyfish) => not give_magnifying_glass(something, koala)\n# Rule2: If at least one animal shows all her cards to the koala, then the eagle gives a magnifier to the koala\nrule2() = show_all_cards(something) => give_magnifier(eagle, koala)\n# Rule3: Regarding the halibut, if it has fewer than eleven friends, then we can conclude that it shows her cards (all of them) to the koala\nrule3() = friends(halibut) < 11 => show_all_cards(halibut)\n# Rule4: If you are positive that you saw one of the animals gives a magnifier to the koala, you can be certain that it will not raise a peace flag for the lobster\nrule4() = give_magnifier(something, koala) => not raise_flag_of_peace(something, lobster)\n# Rule5: If the eagle has a card whose color appears in the flag of France, then the eagle owes money to the jellyfish\nrule5() = has(eagle, card_with(color_in_flag_of_france)) => owes_money_to(eagle, jellyfish)\n# Rule6: Regarding the halibut, if it has a card whose color starts with the letter \"e\", then we can conclude that it shows her cards (all of them) to the koala.\nrule6() = has(halibut, card_with(color_starting_with(\"e\"))) => show_all_cards(halibut)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The eagle has a card that is red in color\nhas(eagle, card_with(red_color)) = True\n# The halibut has 1 loyal friend and 1 disloyal friend, and has a card that is red in color\nfriends(halibut) = 1\nhas(halibut, card_with(red_color)) = True\n\n# Based on the game state and the rules and preferences, does the eagle raise a peace flag for the lobster?\nquestion = raise_flag_of_peace(eagle, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cow holds the same number of points as the cheetah whenever at least one animal proceeds to the spot right after the oscar\nRule2: The bat does not show all her cards to the elephant, in the case where the kangaroo needs the support of the bat\nRule3: If something does not show her cards to the elephant, then it offers a job position to the oscar.\n\nThe current state of the game is as follows\nThe bat learns the basics of resource management from the kiwi\nThe kangaroo needs support from the bat\n\nBased on the game state and the rules and preferences, does the cow hold the same number of points as the cheetah?\nQuestion: Does the cow hold the same number of points as the cheetah?",
        "idx": 473,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cow holds the same number of points as the cheetah whenever at least one animal proceeds to the spot right after the oscar\nrule1() = proceed(animal, spot_right_after(spot_of(oscar))) => points(cow) == points(cheetah)\n# Rule2: The bat does not show all her cards to the elephant, in the case where the kangaroo needs the support of the bat\nrule2() = needs_support(kangaroo, bat) => not show_cards(bat, elephant)\n# Rule3: If something does not show her cards (all of them) to the elephant, then it offers a job position to the oscar.\nrule3(something) = not show_cards(something, elephant) => offer_job_position(something, oscar)\n\n# The current state of the game is as follows\n# The bat learns the basics of resource management from the kiwi\nlearns(bat, basics_of_resource_management_from(kiwi)) = True\n# The kangaroo needs support from the bat\nneeds_support(kangaroo, bat) = True\n\n# Based on the game state and the rules and preferences, does the cow hold the same number of points as the cheetah?\nquestion = points(cow) == points(cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the swordfish eats the food that belongs to the dog, then the dog winks at the cricket\nRule2: If the swordfish has a name whose first letter is the same as the first letter of the grasshopper's name, then the swordfish eats the food of the dog\nRule3: If the swordfish has a musical instrument, then it does not eat the food that belongs to the dog\nRule4: If the elephant does not have her keys, then it rolls the dice for the sea bass\nRule5: If the swordfish has fewer than one friend, then it eats the food that belongs to the dog\nRule6: The cricket does not raise a peace flag for the carp, in the case where the snail attacks the green fields owned by the cricket\nRule7: If the elephant has a device to connect to the internet, then it rolls the dice for the sea bass\nRule8: If at least one animal rolls the dice for the sea bass, then the sun bear does not know the defense plan of the cricket\nRule9: If the dog winks at the cricket and the sun bear does not know the defensive plans of the cricket, then the cricket raises a peace flag for the carp\n\nRule2 is preferred over Rule3\nRule5 is preferred over Rule3\nRule6 is preferred over Rule9\n\nThe current state of the game is as follows\nThe elephant has 6 friends\nThe elephant has arugula\nThe elephant lost her keys\nThe grasshopper is named Milo\nThe swordfish has 1 friend that is mean and one friend that is not\nThe swordfish has a cello\nThe swordfish is named Max\n\nBased on the game state and the rules and preferences, does the cricket raise a peace flag for the carp?\nQuestion: Does the cricket raise a peace flag for the carp?",
        "idx": 474,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the swordfish eats the food that belongs to the dog, then the dog winks at the cricket\nrule1() = eat_food(swordfish, food_of(dog)) => wink(dog, cricket)\n# Rule2: If the swordfish has a name whose first letter is the same as the first letter of the grasshopper's name, then the swordfish eats the food of the dog\nrule2() = first_letter_of(name(swordfish)) == first_letter_of(name(grasshopper)) => eat_food(swordfish, food_of(dog))\n# Rule3: Regarding the swordfish, if it has a musical instrument, then we can conclude that it does not eat the food that belongs to the dog\nrule3() = has(swordfish, musical_instrument) => not eat_food(swordfish, food_of(dog))\n# Rule4: Regarding the elephant, if it does not have her keys, then we can conclude that it rolls the dice for the sea bass\nrule4() = not has(elephant, keys) => roll_dice(elephant, sea_bass)\n# Rule5: If the swordfish has fewer than one friend, then the swordfish eats the food that belongs to the dog\nrule5() = friends(swordfish) < 1 => eat_food(swordfish, food_of(dog))\n# Rule6: The cricket does not raise a peace flag for the carp, in the case where the snail attacks the green fields whose owner is the cricket\nrule6() = attack(snail, green_fields_of(cricket)) => not raise_flag_of_peace(cricket, carp)\n# Rule7: If the elephant has a device to connect to the internet, then the elephant rolls the dice for the sea bass\nrule7(device) = has(elephant, connect_to_internet(device)) => roll_dice(elephant, sea_bass)\n# Rule8: If at least one animal rolls the dice for the sea bass, then the sun bear does not know the defense plan of the cricket\nrule8() = roll_dice(some_animal, sea_bass) => not knows_defense_plan(sun_bear, cricket)\n# Rule9: For the cricket, if the belief is that the dog winks at the cricket and the sun bear does not know the defensive plans of the cricket, then you can add \"the cricket raises a peace flag for the carp\" to your conclusions.\nrule9() = wink(dog, cricket) & not knows_defense_plan(sun_bear, cricket) => raise_flag_of_peace(cricket, carp)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n\n# The current state of the game is as follows\n# The elephant has 6 friends\nfriends(elephant) = 6\n# The elephant has some arugula, and lost her keys\nhas(elephant, arugula) = True\nnot has(elephant, keys) = True\n# The grasshopper is named Milo\nname(grasshopper, Milo) = True\n# The swordfish has 1 friend that is mean and one friend that is not, has a cello, and is named Max\nfriends(swordfish) = 1\nhas(swordfish, cello) = True\nname(swordfish, Max) = True\n\n# Based on the game state and the rules and preferences, does the cricket raise a peace flag for the carp?\nquestion = raise_flag_of_peace(cricket, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The turtle attacks the green fields owned by the penguin whenever at least one animal shows all their cards to the tiger\nRule2: If the bat has a device to connect to the internet, then it eats the food of the turtle\nRule3: If at least one animal attacks the green fields owned by the penguin, then the eel does not knock down the fortress owned by the canary\nRule4: If the name of the bat starts with the same letter as the name of the pig, then the bat eats the food of the turtle\nRule5: If the name of the squid starts with the same letter as the name of the lobster, then the squid shows all her cards to the tiger\n\nThe current state of the game is as follows\nThe bat has a card that is blue in color\nThe bat is named Charlie\nThe bat has a computer\nThe carp prepares armor for the squid\nThe lobster is named Max\nThe pig is named Luna\nThe squid is named Mojo\nThe viperfish rolls the dice for the squid\n\nBased on the game state and the rules and preferences, does the eel knock down the fortress of the canary?\nQuestion: Does the eel knock down the fortress of the canary?",
        "idx": 475,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The turtle attacks the green fields whose owner is the penguin whenever at least one animal shows all her cards to the tiger\nrule1() = show_all_cards(someone, tiger) => attack(turtle, green_fields_of(penguin))\n# Rule2: If the bat has a device to connect to the internet, then the bat eats the food of the turtle\nrule2() = has(bat, connect_to_internet(device)) => eat_food(bat, food_of(turtle))\n# Rule3: If at least one animal attacks the green fields whose owner is the penguin, then the eel does not knock down the fortress that belongs to the canary\nrule3() = attack(someone, green_fields_of(penguin)) => not knock_down(eel, fortress_of(canary))\n# Rule4: Regarding the bat, if it has a name whose first letter is the same as the first letter of the pig's name, then we can conclude that it eats the food that belongs to the turtle\nrule4() = first_letter_of(name(bat)) == first_letter_of(name(pig)) => eat_food(bat, food_of(turtle))\n# Rule5: Regarding the squid, if it has a name whose first letter is the same as the first letter of the lobster's name, then we can conclude that it shows her cards (all of them) to the tiger.\nrule5() = first_letter_of(name(squid)) == first_letter_of(name(lobster)) => show_all_cards(squid, tiger)\n\n# The current state of the game is as follows\n# The bat has a card that is blue in color, and is named Charlie\nhas(bat, card_with(blue_color)) = True\nname(bat, Charlie) = True\n# The bat has a computer\nhas(bat, computer) = True\n# The carp prepares armor for the squid\nprepare_armor(carp, squid) = True\n# The lobster is named Max\nname(lobster, Max) = True\n# The pig is named Luna\nname(pig, Luna) = True\n# The squid is named Mojo\nname(squid, Mojo) = True\n# The viperfish rolls the dice for the squid\nroll_dice(viperfish, squid) = True\n\n# Based on the game state and the rules and preferences, does the eel knock down the fortress of the canary?\nquestion = knock_down(eel, fortress_of(canary))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal offers a job position to the starfish, then the tilapia owes money to the lobster\nRule2: If something prepares armor for the zander, then it gives a magnifying glass to the baboon as well\nRule3: If at least one animal gives a magnifier to the baboon, then the lobster does not hold the same number of points as the dog\nRule4: If the meerkat has a name whose first letter is the same as the first letter of the goldfish's name, then the meerkat prepares armor for the zander\nRule5: If something does not proceed to the spot that is right after the spot of the crocodile and also does not hold an equal number of points as the hippopotamus, then it does not knock down the fortress of the crocodile\nRule6: If the grizzly bear knocks down the fortress that belongs to the lobster and the tilapia owes money to the lobster, then the lobster holds the same number of points as the dog\nRule7: If the grizzly bear has a musical instrument, then it knocks down the fortress of the crocodile\nRule8: If the donkey owes money to the meerkat, then the meerkat does not prepare armor for the zander\nRule9: If at least one animal raises a peace flag for the starfish, then the eagle offers a job position to the starfish\nRule10: If you see that one of the animals eats the food that belongs to the crocodile, you can be certain that it will also knock down the fortress that belongs to the lobster\n\nRule4 is preferred over Rule8\nRule6 is preferred over Rule3\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe goldfish is named Charlie\nThe grizzly bear has a computer\nThe meerkat is named Beauty\nThe grizzly bear does not roll the dice for the hippopotamus\nThe sea bass does not raise a peace flag for the starfish\n\nBased on the game state and the rules and preferences, does the lobster hold the same number of points as the dog?\nQuestion: Does the lobster hold the same number of points as the dog?",
        "idx": 476,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal offers a job position to the starfish, then the tilapia owes $$$ to the lobster\nrule1() = offer_job_position(something, starfish) => owes_money_to(tilapia, lobster)\n# Rule2: If something prepares armor for the zander, then it gives a magnifying glass to the baboon, too\nrule2() = prepare_armor(something, zander) => give(something, magnifying_glass, baboon)\n# Rule3: If at least one animal gives a magnifier to the baboon, then the lobster does not hold the same number of points as the dog\nrule3() = give(something, magnifier, baboon) => not same_number_of_points(lobster, dog)\n# Rule4: If the meerkat has a name whose first letter is the same as the first letter of the goldfish's name, then the meerkat prepares armor for the zander\nrule4() = first_letter_of(name(meerkat)) == first_letter_of(name(goldfish)) => prepare_armor(meerkat, zander)\n# Rule5: If you see that something does not proceed to the spot that is right after the spot of the crocodile and also does not hold an equal number of points as the hippopotamus, what can you certainly conclude? You can conclude that it also does not knock down the fortress of the crocodile\nrule5(something) = not proceed(something, spot_right_after(spot_of(crocodile))) & not same_number_of_points(something, hippopotamus) => not knock_down_fortress(something, crocodile)\n# Rule6: If the grizzly bear knocks down the fortress that belongs to the lobster and the tilapia owes money to the lobster, then the lobster holds an equal number of points as the dog\nrule6() = knock_down_fortress(grizzly_bear, fortress_of(lobster)) & owes_money_to(tilapia, lobster) => same_number_of_points(lobster, dog)\n# Rule7: Regarding the grizzly bear, if it has a musical instrument, then we can conclude that it knocks down the fortress of the crocodile\nrule7() = has(grizzly_bear, musical_instrument) => knock_down_fortress(grizzly_bear, fortress_of(crocodile))\n# Rule8: The meerkat does not prepare armor for the zander, in the case where the donkey owes $$$ to the meerkat\nrule8() = owes_money_to(donkey, meerkat) => not prepare_armor(meerkat, zander)\n# Rule9: If at least one animal raises a peace flag for the starfish, then the eagle offers a job position to the starfish\nrule9() = raise_flag_of_peace(something, starfish) => offer_job_position(eagle, starfish)\n# Rule10: If you are positive that you saw one of the animals eats the food that belongs to the crocodile, you can be certain that it will also knock down the fortress that belongs to the lobster.\nrule10() = eats_food(something, food_of(crocodile)) => knock_down_fortress(something, fortress_of(lobster))\n# Rule4 is preferred over Rule8\norder(rule4) > order(rule8) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The goldfish is named Charlie\nname(goldfish, Charlie) = True\n# The grizzly bear has a computer\nhas(grizzly_bear, computer) = True\n# The meerkat is named Beauty\nname(meerkat, Beauty) = True\n# The grizzly bear does not roll the dice for the hippopotamus\nnot roll_dice(grizzly_bear, hippopotamus) = True\n# The sea bass does not raise a peace flag for the starfish\nnot raise_flag_of_peace(sea_bass, starfish) = True\n\n# Based on the game state and the rules and preferences, does the lobster hold the same number of points as the dog?\nquestion = same_number_of_points(lobster, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus has a musical instrument, then it does not knock down the fortress of the elephant\nRule2: If the elephant has a card whose color starts with the letter \"g\", then it does not raise a peace flag for the octopus\nRule3: If something does not prepare armor for the meerkat, then it does not attack the green fields owned by the grizzly bear\nRule4: If the elephant has something to drink, then it raises a peace flag for the octopus\nRule5: The halibut attacks the green fields owned by the grizzly bear whenever at least one animal knocks down the fortress that belongs to the salmon\nRule6: The elephant knocks down the fortress of the salmon, in the case where the octopus knocks down the fortress that belongs to the elephant\nRule7: If the elephant has a name whose first letter is the same as the first letter of the cow's name, then it raises a peace flag for the octopus\nRule8: If the octopus has a card whose color appears in the flag of Japan, then it does not knock down the fortress of the elephant\nRule9: If something does not raise a peace flag for the squid, then it knocks down the fortress of the elephant\n\nRule1 is preferred over Rule9\nRule2 is preferred over Rule4\nRule2 is preferred over Rule7\nRule3 is preferred over Rule5\nRule8 is preferred over Rule9\n\nThe current state of the game is as follows\nThe cow is named Peddi\nThe elephant has a trumpet\nThe elephant is named Pablo\nThe octopus has a card that is violet in color and does not raise a peace flag for the squid\n\nBased on the game state and the rules and preferences, does the halibut attack the green fields owned by the grizzly bear?\nQuestion: Does the halibut attack the green fields owned by the grizzly bear?",
        "idx": 477,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the octopus, if it has a musical instrument, then we can conclude that it does not knock down the fortress of the elephant\nrule1() = has(octopus, musical_instrument) => not knock_down(fortress_of(elephant))\n# Rule2: Regarding the elephant, if it has a card whose color starts with the letter \"g\", then we can conclude that it does not raise a peace flag for the octopus\nrule2() = has(elephant, card_with(color_starting_with(\"g\"))) => not raise_flag_of_peace(elephant, octopus)\n# Rule3: If something does not prepare armor for the meerkat, then it does not attack the green fields whose owner is the grizzly bear\nrule3() = not prepare_armor(something, meerkat) => not attack(green_fields_owned_by(grizzly_bear))\n# Rule4: Regarding the elephant, if it has something to drink, then we can conclude that it raises a flag of peace for the octopus\nrule4() = has(elephant, something_to_drink) => raise_flag_of_peace(elephant, octopus)\n# Rule5: The halibut attacks the green fields whose owner is the grizzly bear whenever at least one animal knocks down the fortress that belongs to the salmon\nrule5() = knock_down(fortress_of(salmon)) => attack(green_fields_owned_by(grizzly_bear))\n# Rule6: The elephant unquestionably knocks down the fortress of the salmon, in the case where the octopus knocks down the fortress that belongs to the elephant\nrule6() = knock_down(fortress_of(octopus, elephant)) => knock_down(fortress_of(elephant, salmon))\n# Rule7: If the elephant has a name whose first letter is the same as the first letter of the cow's name, then the elephant raises a flag of peace for the octopus\nrule7() = first_letter_of(name(elephant)) == first_letter_of(name(cow)) => raise_flag_of_peace(elephant, octopus)\n# Rule8: Regarding the octopus, if it has a card whose color appears in the flag of Japan, then we can conclude that it does not knock down the fortress of the elephant\nrule8() = has(octopus, card_with(color_in_flag_of_Japan)) => not knock_down(fortress_of(elephant))\n# Rule9: If something does not raise a flag of peace for the squid, then it knocks down the fortress of the elephant.\nrule9() = not raise_flag_of_peace(something, squid) => knock_down(fortress_of(elephant))\n# Rule1 is preferred over Rule9\norder(rule1) > order(rule9) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule8 is preferred over Rule9\norder(rule8) > order(rule9) = True\n\n# The current state of the game is as follows\n# The cow is named Peddi\nname(cow, Peddi) = True\n# The elephant has a trumpet\nhas(elephant, trumpet) = True\n# The elephant is named Pablo\nname(elephant, Pablo) = True\n# The octopus has a card that is violet in color, and does not raise a peace flag for the squid\nhas(octopus, card_with(violet_color)) = True\nnot raise_flag_of_peace(octopus, squid) = True\n\n# Based on the game state and the rules and preferences, does the halibut attack the green fields whose owner is the grizzly bear?\nquestion = attack(green_fields_owned_by(grizzly_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon burns the warehouse that is in possession of the cat and the sea bass does not sing a victory song for the cat, then the cat offers a job to the phoenix\nRule2: If the panther becomes an enemy of the cat, then the cat does not knock down the fortress that belongs to the octopus\nRule3: If the name of the panther starts with the same letter as the name of the sun bear, then the panther does not become an enemy of the cat\nRule4: If the squirrel has a sharp object, then the squirrel knocks down the fortress that belongs to the cat\nRule5: If the jellyfish has more than 7 friends, then the jellyfish burns the warehouse that is in possession of the lion\nRule6: If the catfish does not show all her cards to the sea bass, then the sea bass sings a victory song for the cat\nRule7: If the name of the jellyfish starts with the same letter as the name of the cow, then the jellyfish burns the warehouse that is in possession of the lion\nRule8: If the squirrel took a bike from the store, then it knocks down the fortress of the cat\nRule9: If the sea bass has more than twelve friends, then the sea bass does not sing a song of victory for the cat\nRule10: If the grasshopper does not attack the green fields of the baboon, then the baboon burns the warehouse that is in possession of the cat\nRule11: If something does not knock down the fortress that belongs to the octopus but offers a job position to the phoenix, then it does not knock down the fortress of the grizzly bear\nRule12: If the panther has a card with a primary color, then it becomes an enemy of the cat\nRule13: If the sea bass has a device to connect to the internet, then it does not sing a song of victory for the cat\nRule14: If the panther owns a luxury aircraft, then it becomes an enemy of the cat\n\nRule12 is preferred over Rule3\nRule14 is preferred over Rule3\nRule6 is preferred over Rule13\nRule6 is preferred over Rule9\n\nThe current state of the game is as follows\nThe cow is named Pashmak\nThe jellyfish has one friend and is named Peddi\nThe panther has a card that is violet in color and owns a luxury aircraft\nThe panther is named Meadow\nThe sea bass has 5 smart friends and 2 friends that are not smart\nThe sea bass has a cell phone\nThe squid knows the defensive plans of the squirrel\nThe squirrel has kale and stole a bike from the store\nThe sun bear is named Max\nThe grasshopper does not attack the green fields owned by the baboon\n\nBased on the game state and the rules and preferences, does the cat knock down the fortress of the grizzly bear?\nQuestion: Does the cat knock down the fortress of the grizzly bear?",
        "idx": 478,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the cat, if the belief is that the baboon burns the warehouse that is in possession of the cat and the sea bass does not sing a victory song for the cat, then you can add \"the cat offers a job to the phoenix\" to your conclusions\nrule1() = belief(baboon_burns_warehouse_of(cat)) & not sing_song(sea_bass, victory_song_for(cat)) => add_conclusion(\"the cat offers a job to the phoenix\")\n# Rule2: The cat does not knock down the fortress that belongs to the octopus, in the case where the panther becomes an enemy of the cat\nrule2() = enemy(panther, cat) => not knock_down(fortress_of(octopus), cat)\n# Rule3: If the panther has a name whose first letter is the same as the first letter of the sun bear's name, then the panther does not become an enemy of the cat\nrule3() = first_letter_of(name(panther)) == first_letter_of(name(sun_bear)) => not enemy(panther, cat)\n# Rule4: If the squirrel has a sharp object, then the squirrel knocks down the fortress that belongs to the cat\nrule4() = has(squirrel, sharp_object) => knock_down(fortress_of(cat), squirrel)\n# Rule5: If the jellyfish has more than 7 friends, then the jellyfish burns the warehouse that is in possession of the lion\nrule5() = friends(jellyfish) > 7 => burn(warehouse_of(lion), jellyfish)\n# Rule6: If the catfish does not show all her cards to the sea bass, then the sea bass sings a victory song for the cat\nrule6() = not show_all_cards(catfish, sea_bass) => sing_song(sea_bass, victory_song_for(cat))\n# Rule7: If the jellyfish has a name whose first letter is the same as the first letter of the cow's name, then the jellyfish burns the warehouse that is in possession of the lion\nrule7() = first_letter_of(name(jellyfish)) == first_letter_of(name(cow)) => burn(warehouse_of(lion), jellyfish)\n# Rule8: Regarding the squirrel, if it took a bike from the store, then we can conclude that it knocks down the fortress of the cat\nrule8() = took_bike_from_store(squirrel) => knock_down(fortress_of(cat), squirrel)\n# Rule9: If the sea bass has more than twelve friends, then the sea bass does not sing a song of victory for the cat\nrule9() = friends(sea_bass) > 12 => not sing_song(sea_bass, victory_song_for(cat))\n# Rule10: If the grasshopper does not attack the green fields of the baboon, then the baboon burns the warehouse that is in possession of the cat\nrule10() = not attack(grasshopper, green_fields_of(baboon)) => burn(warehouse_of(cat), baboon)\n# Rule11: If you see that something does not knock down the fortress that belongs to the octopus but it offers a job position to the phoenix, what can you certainly conclude? You can conclude that it is not going to knock down the fortress of the grizzly bear\nrule11(something) = not knock_down(fortress_of(octopus), something) & offer_job_position(something, phoenix) => not knock_down(fortress_of(grizzly_bear), something)\n# Rule12: Regarding the panther, if it has a card with a primary color, then we can conclude that it becomes an enemy of the cat\nrule12() = has(panther, card_with(primary_color)) => enemy(panther, cat)\n# Rule13: Regarding the sea bass, if it has a device to connect to the internet, then we can conclude that it does not sing a song of victory for the cat\nrule13() = has(sea_bass, connect_to_internet(device)) => not sing_song(sea_bass, victory_song_for(cat))\n# Rule14: If the panther owns a luxury aircraft, then the panther becomes an enemy of the cat.\nrule14() = owns(panther, luxury_aircraft) => enemy(panther, cat)\n# Rule12 is preferred over Rule3\norder(rule12) > order(rule3) = True\n# Rule14 is preferred over Rule3\norder(rule14) > order(rule3) = True\n# Rule6 is preferred over Rule13\norder(rule6) > order(rule13) = True\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n\n# The current state of the game is as follows\n# The cow is named Pashmak\nname(cow, Pashmak) = True\n# The jellyfish has one friend, and is named Peddi\nfriends(jellyfish) = 1\nname(jellyfish, Peddi) = True\n# The panther has a card that is violet in color, and purchased a luxury aircraft\nhas(panther, card_with(violet_color)) = True\nowns(panther, luxury_aircraft) = True\n# The panther is named Meadow\nname(panther, Meadow) = True\n# The sea bass has 5 friends that are smart and two friends that are not\nfriends(sea_bass, smart) = 5\nfriends(sea_bass, not_smart) = 2\n# The sea bass has a cell phone\nhas(sea_bass, cell_phone) = True\n# The squid knows the defensive plans of the squirrel\nknows(defensive_plans_of(tiger), squirrel) = True\n# The squirrel has some kale\nhas(squirrel, kale) = True\n# The squirrel stole a bike from the store\nstole_bike_from_store(squirrel) = True\n# The sun bear is named Max\nname(sun_bear, Max) = True\n# The grasshopper does not attack the green fields whose owner is the baboon\nnot attack(grasshopper, green_fields_of(baboon)) = True\n\n# Based on the game state and the rules and preferences, does the cat knock down the fortress of the grizzly bear?\nquestion = knock_down(fortress_of(grizzly_bear), cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the canary is not going to learn the basics of resource management from the hippopotamus but the starfish holds the same number of points as the hippopotamus, then the hippopotamus is not going to wink at the blobfish\nRule2: If the caterpillar has a name whose first letter is the same as the first letter of the goldfish's name, then the caterpillar shows all her cards to the salmon\nRule3: The caterpillar does not show her cards to the salmon whenever at least one animal removes one of the pieces of the hummingbird\nRule4: The lobster holds the same number of points as the black bear whenever at least one animal burns the warehouse of the grizzly bear\nRule5: If at least one animal shows all her cards to the salmon, then the hippopotamus eats the food of the cricket\nRule6: If the hippopotamus has a device to connect to the internet, then it owes money to the whale\nRule7: If the turtle has a name whose first letter is the same as the first letter of the sea bass's name, then the turtle burns the warehouse of the grizzly bear\nRule8: If the caterpillar has something to sit on, then the caterpillar shows all her cards to the salmon\nRule9: The black bear needs support from the phoenix whenever at least one animal eats the food of the cricket\n\nRule3 is preferred over Rule2\nRule3 is preferred over Rule8\n\nThe current state of the game is as follows\nThe caterpillar has a knapsack\nThe caterpillar is named Mojo\nThe goldfish is named Lily\nThe hippopotamus has a harmonica\nThe hippopotamus has a tablet\nThe sea bass is named Blossom\nThe starfish holds the same number of points as the hippopotamus\nThe turtle is named Buddy\nThe canary does not burn the warehouse of the hippopotamus\n\nBased on the game state and the rules and preferences, does the black bear need support from the phoenix?\nQuestion: Does the black bear need support from the phoenix?",
        "idx": 479,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the hippopotamus, if the belief is that the canary is not going to learn the basics of resource management from the hippopotamus but the starfish holds the same number of points as the hippopotamus, then you can add that \"the hippopotamus is not going to wink at the blobfish\" to your conclusions\nrule1() = not learn_basics_of_resource_management(canary, hippopotamus) & points(starfish) == points(hippopotamus) => not wink(hippopotamus, blobfish)\n# Rule2: Regarding the caterpillar, if it has a name whose first letter is the same as the first letter of the goldfish's name, then we can conclude that it shows her cards (all of them) to the salmon\nrule2() = first_letter_of(name(caterpillar)) == first_letter_of(name(goldfish)) => show_cards(caterpillar, salmon)\n# Rule3: The caterpillar does not show her cards (all of them) to the salmon whenever at least one animal removes one of the pieces of the hummingbird\nrule3() = remove(hummingbird, something) => not show_cards(caterpillar, salmon)\n# Rule4: The lobster holds the same number of points as the black bear whenever at least one animal burns the warehouse that is in possession of the grizzly bear\nrule4() = burn(warehouse_of(grizzly_bear), something) => points(lobster) == points(black_bear)\n# Rule5: If at least one animal shows all her cards to the salmon, then the hippopotamus eats the food of the cricket\nrule5() = show_cards(something, salmon) => eat_food(hippopotamus, cricket)\n# Rule6: Regarding the hippopotamus, if it has a device to connect to the internet, then we can conclude that it owes money to the whale\nrule6() = has(hippopotamus, connect_to_internet(device)) => owes_money_to(hippopotamus, whale)\n# Rule7: If the turtle has a name whose first letter is the same as the first letter of the sea bass's name, then the turtle burns the warehouse of the grizzly bear\nrule7() = first_letter_of(name(turtle)) == first_letter_of(name(sea_bass)) => burn(warehouse_of(grizzly_bear), turtle)\n# Rule8: If the caterpillar has something to sit on, then the caterpillar shows all her cards to the salmon\nrule8() = has(caterpillar, something_to_sit_on) => show_cards(caterpillar, salmon)\n# Rule9: The black bear needs support from the phoenix whenever at least one animal eats the food that belongs to the cricket.\nrule9() = eat_food(something, cricket) => needs_support(black_bear, phoenix)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule3 is preferred over Rule8\norder(rule3) > order(rule8) = True\n\n# The current state of the game is as follows\n# The caterpillar has a knapsack\nhas(caterpillar, knapsack) = True\n# The caterpillar is named Mojo\nname(caterpillar, Mojo) = True\n# The goldfish is named Lily\nname(goldfish, Lily) = True\n# The hippopotamus has a harmonica\nhas(hippopotamus, harmonica) = True\n# The hippopotamus has a tablet\nhas(hippopotamus, tablet) = True\n# The sea bass is named Blossom\nname(sea_bass, Blossom) = True\n# The starfish holds the same number of points as the hippopotamus\npoints(starfish) == points(hippopotamus) = True\n# The turtle is named Buddy\nname(turtle, Buddy) = True\n# The canary does not burn the warehouse of the hippopotamus\nnot burn(warehouse_of(hippopotamus), canary) = True\n\n# Based on the game state and the rules and preferences, does the black bear need support from the phoenix?\nquestion = needs_support(black_bear, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals proceed to the spot right after the snail, you can be certain that it will not burn the warehouse of the donkey\nRule2: Be careful when something removes one of the pieces of the squirrel but does not burn the warehouse that is in possession of the donkey because in this case it will, surely, learn the basics of resource management from the tiger (this may or may not be problematic)\nRule3: If at least one animal learns the basics of resource management from the tiger, then the caterpillar offers a job to the hummingbird\nRule4: If the baboon killed the mayor, then the baboon removes one of the pieces of the squirrel.\n\nThe current state of the game is as follows\nThe baboon assassinated the mayor and proceeds to the spot right after the snail\nThe baboon has fourteen friends\n\nBased on the game state and the rules and preferences, does the caterpillar offer a job to the hummingbird?\nQuestion: Does the caterpillar offer a job to the hummingbird?",
        "idx": 480,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals proceeds to the spot right after the snail, you can be certain that it will not burn the warehouse of the donkey\nrule1(something) = proceed(something, spot_right_after(snail)) => not burn(warehouse_of(donkey))\n# Rule2: Be careful when something removes one of the pieces of the squirrel but does not burn the warehouse that is in possession of the donkey because in this case it will, surely, learn the basics of resource management from the tiger (this may or may not be problematic)\nrule2(something) = remove(something, piece_of(squirrel)) & not burn(warehouse_of(donkey)) => learn_basics_of_resource_management(something, tiger)\n# Rule3: If at least one animal learns the basics of resource management from the tiger, then the caterpillar offers a job to the hummingbird\nrule3(something) = learn_basics_of_resource_management(something, tiger) => offer_job(caterpillar, hummingbird)\n# Rule4: If the baboon killed the mayor, then the baboon removes one of the pieces of the squirrel.\nrule4() = kill(baboon, mayor) => remove(baboon, piece_of(squirrel))\n\n# The current state of the game is as follows\n# The baboon assassinated the mayor, and proceeds to the spot right after the snail\nkill(baboon, mayor) = True\nproceed(baboon, spot_right_after(snail)) = True\n# The baboon has fourteen friends\nfriends(baboon) = 14\n\n# Based on the game state and the rules and preferences, does the caterpillar offer a job to the hummingbird?\nquestion = offer_job(caterpillar, hummingbird)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you saw one of the animals offer a job position to the donkey, then it will also burn the warehouse that is in possession of the cheetah\nRule2: If at least one animal respects the goldfish, then the panther offers a job to the donkey\nRule3: The grizzly bear does not respect the kiwi whenever at least one animal burns the warehouse of the cheetah\n\nThe current state of the game is as follows\nThe blobfish respects the goldfish\n\nBased on the game state and the rules and preferences, does the grizzly bear respect the kiwi?\nQuestion: Does the grizzly bear respect the kiwi?",
        "idx": 481,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals offers a job position to the donkey, you can be certain that it will also burn the warehouse that is in possession of the cheetah\nrule1() = offer_job_position(something, donkey) => burn(warehouse_of(cheetah), something)\n# Rule2: If at least one animal respects the goldfish, then the panther offers a job to the donkey\nrule2() = respects(something, goldfish) => offer_job_position(panther, donkey)\n# Rule3: The grizzly bear does not respect the kiwi whenever at least one animal burns the warehouse of the cheetah.\nrule3() = burn(warehouse_of(cheetah), something) => not respects(grizzly_bear, kiwi)\n\n# The current state of the game is as follows\n# The blobfish respects the goldfish\nrespects(blobfish, goldfish) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear respect the kiwi?\nquestion = respects(grizzly_bear, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cow rolls the dice for the eel, then the eel shows all her cards to the spider\nRule2: If you saw one of the animals attack the green fields owned by the cockroach, then that animal will proceed to the spot right after the spot of the viperfish\nRule3: If the raven has a name whose first letter is the same as the first letter of the aardvark's name, then the raven does not burn the warehouse of the cow\nRule4: If the raven has fewer than twelve friends, then the raven does not burn the warehouse of the cow\nRule5: If the koala does not knock down the fortress of the raven and the black bear knows the defensive plans of the raven, then the raven burns the warehouse of the cow\nRule6: If at least one animal proceeds to the spot right after the spot of the viperfish, then the cow rolls the dice for the eel\n\nRule3 is preferred over Rule5\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe aardvark is named Milo\nThe black bear knows the defensive plans of the raven\nThe cricket knocks down the fortress of the cockroach\nThe raven is named Pablo\nThe koala does not knock down the fortress of the raven\n\nBased on the game state and the rules and preferences, does the eel show all her cards to the spider?\nQuestion: Does the eel show all her cards to the spider?",
        "idx": 482,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cow rolls the dice for the eel, then the eel shows all her cards to the spider\nrule1() = roll_dice(cow, eel) => show_cards(eel, spider)\n# Rule2: If you are positive that you saw one of the animals attacks the green fields whose owner is the cockroach, you can be certain that it will also proceed to the spot that is right after the spot of the viperfish\nrule2() = attacks(animal, green_fields_of(cockroach)) => proceed(animal, spot_right_after(spot_of(viperfish)))\n# Rule3: If the raven has a name whose first letter is the same as the first letter of the aardvark's name, then the raven does not burn the warehouse of the cow\nrule3() = first_letter_of(name(raven)) == first_letter_of(name(aardvark)) => not burn(warehouse_of(cow), raven)\n# Rule4: If the raven has fewer than twelve friends, then the raven does not burn the warehouse that is in possession of the cow\nrule4() = friends(raven) < 12 => not burn(warehouse_of(cow), raven)\n# Rule5: For the raven, if the belief is that the koala does not knock down the fortress of the raven but the black bear knows the defensive plans of the raven, then you can add \"the raven burns the warehouse of the cow\" to your conclusions\nrule5() = not knock_down(fortress_of(koala), raven) & knows(defensive_plans_of(raven), black_bear) => burn(warehouse_of(cow), raven)\n# Rule6: If at least one animal proceeds to the spot that is right after the spot of the viperfish, then the cow rolls the dice for the eel.\nrule6() = proceed(animal, spot_right_after(spot_of(viperfish))) => roll_dice(cow, eel)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The aardvark is named Milo\nname(aardvark, Milo) = True\n# The black bear knows the defensive plans of the raven\nknows(defensive_plans_of(raven), black_bear) = True\n# The cricket knocks down the fortress of the cockroach\nknock_down(fortress_of(cricket), cockroach) = True\n# The raven is named Pablo\nname(raven, Pablo) = True\n# The koala does not knock down the fortress of the raven\nnot knock_down(fortress_of(koala), raven) = True\n\n# Based on the game state and the rules and preferences, does the eel show all her cards to the spider?\nquestion = show_cards(eel, spider)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the starfish prepares armor for the halibut and the snail offers a job position to the halibut, then the halibut gives a magnifying glass to the grizzly bear\nRule2: If something gives a magnifier to the grizzly bear and also knocks down the fortress of the kudu, then it prepares armor for the eagle\nRule3: If the halibut prepares armor for the eagle, then the eagle prepares armor for the dog\nRule4: If the salmon does not learn elementary resource management from the eagle, then the eagle does not prepare armor for the dog\nRule5: If the halibut has a card with a primary color, then the halibut knocks down the fortress of the kudu\nRule6: If the halibut owns a luxury aircraft, then it knocks down the fortress of the kudu\nRule7: If something does not know the defensive plans of the cow, then it does not knock down the fortress of the kudu\n\nRule4 is preferred over Rule3\nRule7 is preferred over Rule5\nRule7 is preferred over Rule6\n\nThe current state of the game is as follows\nThe halibut has a card with white color\nThe halibut owns a luxury aircraft\nThe snail offers a job position to the halibut\nThe starfish prepares armor for the halibut\n\nBased on the game state and the rules and preferences, does the eagle prepare armor for the dog?\nQuestion: Does the eagle prepare armor for the dog?",
        "idx": 483,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the starfish prepares armor for the halibut and the snail offers a job position to the halibut, then the halibut gives a magnifying glass to the grizzly bear\nrule1() = prepare_armor(starfish, halibut) & offer_job_position(snail, halibut) => give_magnifying_glass(halibut, grizzly_bear)\n# Rule2: Be careful when something gives a magnifier to the grizzly bear and also knocks down the fortress of the kudu because in this case it will surely prepare armor for the eagle (this may or may not be problematic)\nrule2(something) = give_magnifier(something, grizzly_bear) & knock_down(something, fortress_of(kudu)) => prepare_armor(something, eagle)\n# Rule3: If the halibut prepares armor for the eagle, then the eagle prepares armor for the dog\nrule3() = prepare_armor(halibut, eagle) => prepare_armor(eagle, dog)\n# Rule4: If the salmon does not learn elementary resource management from the eagle, then the eagle does not prepare armor for the dog\nrule4() = not learn(salmon, elementary_resource_management_from(eagle)) => not prepare_armor(eagle, dog)\n# Rule5: If the halibut has a card with a primary color, then the halibut knocks down the fortress of the kudu\nrule5() = has(halibut, card_with(primary_color)) => knock_down(halibut, fortress_of(kudu))\n# Rule6: Regarding the halibut, if it owns a luxury aircraft, then we can conclude that it knocks down the fortress that belongs to the kudu\nrule6() = owns(halibut, luxury_aircraft) => knock_down(halibut, fortress_of(kudu))\n# Rule7: If something does not know the defensive plans of the cow, then it does not knock down the fortress of the kudu.\nrule7(something) = not knows(defensive_plans_of(cow), something) => not knock_down(something, fortress_of(kudu))\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n\n# The current state of the game is as follows\n# The halibut has a card that is white in color, and purchased a luxury aircraft\nhas(halibut, card_with(white_color)) = True\nowns(halibut, luxury_aircraft) = True\n# The snail offers a job to the halibut\noffer_job_position(snail, halibut) = True\n# The starfish prepares armor for the halibut\nprepare_armor(starfish, halibut) = True\n\n# Based on the game state and the rules and preferences, does the eagle prepare armor for the dog?\nquestion = prepare_armor(eagle, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something prepares armor for the carp, then it does not attack the green fields owned by the whale\nRule2: If something knocks down the fortress owned by the hummingbird, then it prepares armor for the carp as well\nRule3: If the moose does not learn elementary resource management from the panda bear and the grizzly bear does not burn the warehouse owned by the panda bear, then the panda bear knocks down the fortress owned by the hummingbird\nRule4: If something does not respect the koala, then it attacks the green fields owned by the whale\n\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cow is named Cinnamon\nThe panda bear is named Chickpea\nThe grizzly bear does not burn the warehouse owned by the panda bear\nThe moose does not learn the basics of resource management from the panda bear\n\nBased on the game state and the rules and preferences, does the panda bear attack the green fields owned by the whale?\nQuestion: Does the panda bear attack the green fields owned by the whale?",
        "idx": 484,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something prepares armor for the carp, then it does not attack the green fields whose owner is the whale\nrule1() = prepare_armor(something, carp) => not attack_green_fields(something, whale)\n# Rule2: If something knocks down the fortress that belongs to the hummingbird, then it prepares armor for the carp, too\nrule2() = knock_down_fortress(something, hummingbird) => prepare_armor(something, carp)\n# Rule3: For the panda bear, if the belief is that the moose does not learn elementary resource management from the panda bear and the grizzly bear does not burn the warehouse that is in possession of the panda bear, then you can add \"the panda bear knocks down the fortress that belongs to the hummingbird\" to your conclusions\nrule3() = not learn_basics_of_resource_management(moose, panda_bear) & not burn_warehouse(grizzly_bear, panda_bear) => knock_down_fortress(panda_bear, hummingbird)\n# Rule4: If something does not respect the koala, then it attacks the green fields whose owner is the whale.\nrule4() = not respect(something, koala) => attack_green_fields(something, whale)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cow is named Cinnamon\nname(cow, Cinnamon) = True\n# The panda bear is named Chickpea\nname(panda_bear, Chickpea) = True\n# The grizzly bear does not burn the warehouse of the panda bear\nnot burn_warehouse(grizzly_bear, panda_bear) = True\n# The moose does not learn the basics of resource management from the panda bear\nnot learn_basics_of_resource_management(moose, panda_bear) = True\n\n# Based on the game state and the rules and preferences, does the panda bear attack the green fields whose owner is the whale?\nquestion = attack_green_fields(panda_bear, whale)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eagle has fewer than 12 friends, then it sings a victory song for the grasshopper\nRule2: The grasshopper burns the warehouse of the rabbit, in the case where the eagle sings a song of victory for the grasshopper\nRule3: The rabbit knocks down the fortress of the elephant, in the case where the grasshopper burns the warehouse of the rabbit\nRule4: If something gives a magnifying glass to the sun bear and becomes an actual enemy of the phoenix, then it does not sing a victory song for the grasshopper\n\nRule1 is preferred over Rule4\n\nThe current state of the game is as follows\nThe eagle becomes an enemy of the phoenix\nThe eagle gives a magnifier to the sun bear\n\nBased on the game state and the rules and preferences, does the rabbit knock down the fortress of the elephant?\nQuestion: Does the rabbit knock down the fortress of the elephant?",
        "idx": 485,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the eagle, if it has fewer than 12 friends, then we can conclude that it sings a victory song for the grasshopper\nrule1() = friends(eagle) < 12 => sing_song(eagle, victory_song_for(grasshopper))\n# Rule2: The grasshopper unquestionably burns the warehouse of the rabbit, in the case where the eagle sings a song of victory for the grasshopper\nrule2() = sing_song(eagle, victory_song_for(grasshopper)) => burn(warehouse_of(rabbit), grasshopper)\n# Rule3: The rabbit unquestionably knocks down the fortress of the elephant, in the case where the grasshopper burns the warehouse of the rabbit\nrule3() = burn(warehouse_of(rabbit), grasshopper) => knock_down(fortress_of(elephant), rabbit)\n# Rule4: If you see that something gives a magnifying glass to the sun bear and becomes an actual enemy of the phoenix, what can you certainly conclude? You can conclude that it does not sing a victory song for the grasshopper.\nrule4(something) = give_magnifying_glass(something, sun_bear) & enemy(something, phoenix) => not sing_song(something, victory_song_for(grasshopper))\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n\n# The current state of the game is as follows\n# The eagle becomes an enemy of the phoenix\nenemy(eagle, phoenix) = True\n# The eagle gives a magnifier to the sun bear\ngive_magnifying_glass(eagle, sun_bear) = True\n\n# Based on the game state and the rules and preferences, does the rabbit knock down the fortress of the elephant?\nquestion = knock_down(fortress_of(elephant), rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the caterpillar has more than five friends, then it needs the support of the oscar\nRule2: If the black bear shows all her cards to the elephant, then the elephant learns the basics of resource management from the octopus\nRule3: If the sheep eats the food of the black bear, then the black bear shows all her cards to the elephant\nRule4: If the sheep has access to an abundance of food, then it eats the food that belongs to the black bear\nRule5: If the carp respects the elephant, then the elephant does not learn the basics of resource management from the octopus\nRule6: If the sheep has fewer than twelve friends, then it eats the food that belongs to the black bear\nRule7: If the name of the caterpillar starts with the same letter as the name of the halibut, then the caterpillar needs support from the oscar\nRule8: If at least one animal needs the support of the oscar, then the black bear does not show all her cards to the elephant\nRule9: If the sheep has a sharp object, then it does not eat the food of the black bear\n\nRule3 is preferred over Rule8\nRule5 is preferred over Rule2\nRule9 is preferred over Rule4\nRule9 is preferred over Rule6\n\nThe current state of the game is as follows\nThe caterpillar has seven friends\nThe caterpillar is named Charlie\nThe halibut is named Pashmak\nThe sheep has 3 smart friends and 2 not smart friends\nThe sheep struggles to find food\n\nBased on the game state and the rules and preferences, does the elephant learn the basics of resource management from the octopus?\nQuestion: Does the elephant learn the basics of resource management from the octopus?",
        "idx": 486,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the caterpillar, if it has more than five friends, then we can conclude that it needs the support of the oscar\nrule1() = friends(caterpillar) > 5 => needs_support(caterpillar, oscar)\n# Rule2: The elephant unquestionably learns the basics of resource management from the octopus, in the case where the black bear shows her cards (all of them) to the elephant\nrule2() = show_cards(black_bear, elephant) => learn_basics_of_resource_management(elephant, octopus)\n# Rule3: If the sheep eats the food of the black bear, then the black bear shows all her cards to the elephant\nrule3() = eat_food(sheep, food_of(black_bear)) => show_cards(black_bear, elephant)\n# Rule4: Regarding the sheep, if it has access to an abundance of food, then we can conclude that it eats the food that belongs to the black bear\nrule4() = has_access_to_abundance_of_food(sheep) => eat_food(sheep, food_of(black_bear))\n# Rule5: The elephant does not learn the basics of resource management from the octopus, in the case where the carp respects the elephant\nrule5() = respects(carp, elephant) => not learn_basics_of_resource_management(elephant, octopus)\n# Rule6: Regarding the sheep, if it has fewer than twelve friends, then we can conclude that it eats the food that belongs to the black bear\nrule6() = friends(sheep) < 12 => eat_food(sheep, food_of(black_bear))\n# Rule7: If the caterpillar has a name whose first letter is the same as the first letter of the halibut's name, then the caterpillar needs support from the oscar\nrule7() = first_letter_of(name(caterpillar)) == first_letter_of(name(halibut)) => needs_support(caterpillar, oscar)\n# Rule8: If at least one animal needs the support of the oscar, then the black bear does not show her cards (all of them) to the elephant\nrule8() = needs_support(something, oscar) => not show_cards(black_bear, elephant)\n# Rule9: Regarding the sheep, if it has a sharp object, then we can conclude that it does not eat the food of the black bear.\nrule9() = has(sheep, sharp_object) => not eat_food(sheep, food_of(black_bear))\n# Rule3 is preferred over Rule8\norder(rule3) > order(rule8) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule9 is preferred over Rule4\norder(rule9) > order(rule4) = True\n# Rule9 is preferred over Rule6\norder(rule9) > order(rule6) = True\n\n# The current state of the game is as follows\n# The caterpillar has seven friends\nfriends(caterpillar) = 7\n# The caterpillar is named Charlie\nname(caterpillar, Charlie) = True\n# The halibut is named Pashmak\nname(halibut, Pashmak) = True\n# The sheep has 3 friends that are smart and two friends that are not\nfriends(sheep) = 3 smart_friends + 2 not_smart_friends\n# The sheep struggles to find food\nstruggles_to_find_food(sheep) = True\n\n# Based on the game state and the rules and preferences, does the elephant learn the basics of resource management from the octopus?\nquestion = learn_basics_of_resource_management(elephant, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo offers a job to the aardvark, then the aardvark does not wink at the phoenix\nRule2: If the wolverine has a sharp object, then it prepares armor for the koala\nRule3: If the wolverine took a bike from the store, then it prepares armor for the koala\nRule4: If one of the animals does not knock down the fortress of the aardvark, then it gives a magnifier to the phoenix\nRule5: If the goldfish has a card with a primary color, then it does not wink at the aardvark\nRule6: If the wolverine gives a magnifying glass to the phoenix and the aardvark winks at the phoenix, then the phoenix does not burn the warehouse of the turtle\nRule7: If the goldfish does not wink at the aardvark, then the aardvark winks at the phoenix\nRule8: If something knocks down the fortress of the tilapia but does not steal five points from the puffin, then it offers a job to the phoenix\nRule9: If the goldfish has a name whose first letter is the same as the first letter of the cricket's name, then it does not wink at the aardvark\nRule10: If the moose offers a job to the phoenix, then the phoenix does not eat the food that belongs to the hummingbird\nRule11: If the moose has a card whose color appears in the flag of Netherlands, then it does not offer a job to the phoenix\nRule12: If the doctorfish does not learn elementary resource management from the wolverine, then the wolverine does not knock down the fortress of the aardvark\n\nRule1 is preferred over Rule7\nRule11 is preferred over Rule8\n\nThe current state of the game is as follows\nThe cricket is named Milo\nThe goldfish has a card that is orange in color\nThe goldfish is named Max\nThe moose knocks down the fortress of the tilapia\nThe wolverine has a knife and parked her bike in front of the store\nThe doctorfish does not learn elementary resource management from the wolverine\nThe moose does not steal five points from the puffin\n\nBased on the game state and the rules and preferences, does the phoenix burn the warehouse of the turtle?\nQuestion: Does the phoenix burn the warehouse of the turtle?",
        "idx": 487,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the buffalo offers a job to the aardvark, then the aardvark is not going to wink at the phoenix\nrule1() = offer_job(buffalo, aardvark) => not wink(aardvark, phoenix)\n# Rule2: Regarding the wolverine, if it has a sharp object, then we can conclude that it prepares armor for the koala\nrule2() = has(wolverine, sharp_object) => prepare_armor(wolverine, koala)\n# Rule3: If the wolverine took a bike from the store, then the wolverine prepares armor for the koala\nrule3() = took_bike(wolverine, store) => prepare_armor(wolverine, koala)\n# Rule4: If you are positive that one of the animals does not knock down the fortress of the aardvark, you can be certain that it will give a magnifier to the phoenix without a doubt\nrule4(something) = not knock_down_fortress(something, aardvark) => give_magnifier(something, phoenix)\n# Rule5: If the goldfish has a card with a primary color, then the goldfish does not wink at the aardvark\nrule5() = has(goldfish, card_with(primary_color)) => not wink(goldfish, aardvark)\n# Rule6: For the phoenix, if the belief is that the wolverine gives a magnifying glass to the phoenix and the aardvark winks at the phoenix, then you can add that \"the phoenix is not going to burn the warehouse that is in possession of the turtle\" to your conclusions\nrule6() = give_magnifier(wolverine, phoenix) & wink(aardvark, phoenix) => not burn_warehouse(phoenix, turtle)\n# Rule7: If the goldfish does not wink at the aardvark, then the aardvark winks at the phoenix\nrule7() = not wink(goldfish, aardvark) => wink(aardvark, phoenix)\n# Rule8: Be careful when something knocks down the fortress that belongs to the tilapia but does not steal five points from the puffin because in this case it will, surely, offer a job to the phoenix (this may or may not be problematic)\nrule8(something) = knock_down_fortress(something, tilapia) & not steal_points(something, puffin, 5) => offer_job(something, phoenix)\n# Rule9: If the goldfish has a name whose first letter is the same as the first letter of the cricket's name, then the goldfish does not wink at the aardvark\nrule9() = first_letter_of(name(goldfish)) == first_letter_of(name(cricket)) => not wink(goldfish, aardvark)\n# Rule10: If the moose offers a job to the phoenix, then the phoenix is not going to eat the food that belongs to the hummingbird\nrule10() = offer_job(moose, phoenix) => not eat_food(phoenix, hummingbird)\n# Rule11: If the moose has a card whose color appears in the flag of Netherlands, then the moose does not offer a job to the phoenix\nrule11() = has(moose, card_with(color_in_flag_of_Netherlands)) => not offer_job(moose, phoenix)\n# Rule12: The wolverine will not knock down the fortress of the aardvark, in the case where the doctorfish does not learn elementary resource management from the wolverine.\nrule12() = not learn(doctorfish, elementary_resource_management_from(wolverine)) => not knock_down_fortress(wolverine, aardvark)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule11 is preferred over Rule8\norder(rule11) > order(rule8) = True\n\n# The current state of the game is as follows\n# The cricket is named Milo\nname(cricket, Milo) = True\n# The goldfish has a card that is orange in color\nhas(goldfish, card_with(orange_color)) = True\n# The goldfish is named Max\nname(goldfish, Max) = True\n# The moose knocks down the fortress of the tilapia\nknock_down_fortress(moose, tilapia) = True\n# The wolverine has a knife, and parked her bike in front of the store\nhas(wolverine, knife) = True\nparked_bike(wolverine, store) = True\n# The doctorfish does not learn the basics of resource management from the wolverine\nnot learn(doctorfish, elementary_resource_management_from(wolverine)) = True\n# The moose does not steal five points from the puffin\nnot steal_points(moose, puffin, 5) = True\n\n# Based on the game state and the rules and preferences, does the phoenix burn the warehouse of the turtle?\nquestion = burn_warehouse(phoenix, turtle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grasshopper has something to sit on, then it knows the defense plan of the hummingbird\nRule2: If something removes one of the pieces of the moose but does not burn the warehouse of the pig, then it knows the defensive plans of the sun bear\nRule3: If the hummingbird has something to drink, then it removes one of the pieces of the moose\nRule4: If the hummingbird has fewer than nine friends, then it removes one of the pieces of the moose\nRule5: The parrot winks at the hummingbird, in the case where the eel does not show all her cards to the parrot\nRule6: If something knows the defensive plans of the sun bear, then it learns the basics of resource management from the rabbit\nRule7: The hummingbird does not burn the warehouse of the pig, in the case where the puffin knocks down the fortress of the hummingbird\n\nThe current state of the game is as follows\nThe grasshopper has a love seat sofa\nThe grizzly bear learns the basics of resource management from the hummingbird\nThe hummingbird has 12 friends and a couch\nThe puffin knocks down the fortress of the hummingbird\nThe starfish proceeds to the spot right after the hummingbird\nThe eel does not show all her cards to the parrot\n\nBased on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the rabbit?\nQuestion: Does the hummingbird learn the basics of resource management from the rabbit?",
        "idx": 488,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grasshopper has something to sit on, then the grasshopper knows the defense plan of the hummingbird\nrule1() = has(grasshopper, something_to_sit_on) => knows_defense_plan(grasshopper, hummingbird)\n# Rule2: Be careful when something removes one of the pieces of the moose but does not burn the warehouse of the pig because in this case it will, surely, know the defensive plans of the sun bear (this may or may not be problematic)\nrule2(something) = remove(something, piece_of(moose)) & not burn(warehouse_of(pig)) => knows_defensive_plans(something, sun_bear)\n# Rule3: Regarding the hummingbird, if it has something to drink, then we can conclude that it removes one of the pieces of the moose\nrule3() = has(hummingbird, something_to_drink) => remove(hummingbird, piece_of(moose))\n# Rule4: If the hummingbird has fewer than nine friends, then the hummingbird removes one of the pieces of the moose\nrule4() = friends(hummingbird) < 9 => remove(hummingbird, piece_of(moose))\n# Rule5: The parrot unquestionably winks at the hummingbird, in the case where the eel does not show her cards (all of them) to the parrot\nrule5() = not show_cards(eel, parrot) => wink(parrot, hummingbird)\n# Rule6: If you are positive that you saw one of the animals knows the defensive plans of the sun bear, you can be certain that it will also learn the basics of resource management from the rabbit\nrule6(something) = knows_defensive_plans(something, sun_bear) => learn_basics_of_resource_management(something, rabbit)\n# Rule7: The hummingbird does not burn the warehouse of the pig, in the case where the puffin knocks down the fortress of the hummingbird.\nrule7() = knock_down(puffin, fortress_of(hummingbird)) => not burn(warehouse_of(pig))\n\n# The current state of the game is as follows\n# The grasshopper has a love seat sofa\nhas(grasshopper, love_seat_sofa) = True\n# The grizzly bear learns the basics of resource management from the hummingbird\nlearn_basics_of_resource_management(grizzly_bear, hummingbird) = True\n# The hummingbird has 12 friends, and has a couch\nfriends(hummingbird) = 12\nhas(hummingbird, couch) = True\n# The puffin knocks down the fortress of the hummingbird\nknock_down(puffin, fortress_of(hummingbird)) = True\n# The starfish proceeds to the spot right after the hummingbird\nproceed(starfish, spot_right_after(hummingbird)) = True\n# The eel does not show all her cards to the parrot\nnot show_cards(eel, parrot) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the rabbit?\nquestion = learn_basics_of_resource_management(hummingbird, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The kudu does not roll the dice for the doctorfish whenever at least one animal steals five points from the carp\nRule2: If the meerkat knows the defense plan of the doctorfish and the kudu does not roll the dice for the doctorfish, then the conclusion is \"the doctorfish does not roll the dice for the turtle\"\nRule3: The canary winks at the bat whenever at least one animal rolls the dice for the turtle\nRule4: If something does not steal five points from the rabbit, then it does not need the support of the elephant\nRule5: If something does not need the support of the elephant, then it will roll the dice for the turtle\n\nRule2 is preferred over Rule5\n\nThe current state of the game is as follows\nThe snail steals five points from the carp\nThe doctorfish does not steal five points from the rabbit\n\nBased on the game state and the rules and preferences, does the canary wink at the bat?\nQuestion: Does the canary wink at the bat?",
        "idx": 489,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The kudu does not roll the dice for the doctorfish whenever at least one animal steals five points from the carp\nrule1() = steal_points(something, 5, carp) => not roll_dice(kudu, doctorfish)\n# Rule2: For the doctorfish, if the belief is that the meerkat knows the defense plan of the doctorfish and the kudu does not roll the dice for the doctorfish, then you can add \"the doctorfish does not roll the dice for the turtle\" to your conclusions\nrule2() = knows_defense_plan(meerkat, doctorfish) & not roll_dice(kudu, doctorfish) => add_conclusion(\"the doctorfish does not roll the dice for the turtle\")\n# Rule3: The canary winks at the bat whenever at least one animal rolls the dice for the turtle\nrule3() = roll_dice(something, turtle) => wink(canary, bat)\n# Rule4: If something does not steal five points from the rabbit, then it does not need the support of the elephant\nrule4() = not steal_points(something, 5, rabbit) => not need_support(something, elephant)\n# Rule5: If you are positive that one of the animals does not need the support of the elephant, you can be certain that it will roll the dice for the turtle without a doubt.\nrule5(something) = not need_support(something, elephant) => roll_dice(something, turtle)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n\n# The current state of the game is as follows\n# The snail steals five points from the carp\nsteal_points(snail, 5, carp) = True\n# The doctorfish does not steal five points from the rabbit\nnot steal_points(doctorfish, 5, rabbit) = True\n\n# Based on the game state and the rules and preferences, does the canary wink at the bat?\nquestion = wink(canary, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squid winks at the gecko, then the gecko sings a victory song for the hippopotamus\nRule2: If the goldfish does not learn the basics of resource management from the grasshopper, then the grasshopper needs the support of the gecko\nRule3: If something does not need the support of the starfish, then it burns the warehouse that belongs to the turtle\nRule4: If the oscar prepares armor for the grasshopper, then the grasshopper does not need the support of the gecko\nRule5: If the salmon has a name whose first letter is the same as the first letter of the snail's name, then it does not proceed to the spot right after the squirrel\nRule6: If the turtle owes money to the gecko and the crocodile respects the gecko, then the gecko does not knock down the fortress that belongs to the sheep\nRule7: If the salmon has difficulty finding food, then it does not proceed to the spot right after the squirrel\nRule8: If at least one animal knows the defense plan of the doctorfish, then the gecko does not become an enemy of the meerkat\nRule9: If at least one animal shows all her cards to the parrot, then the cheetah knows the defensive plans of the doctorfish\nRule10: If at least one animal steals five points from the puffin, then the salmon proceeds to the spot right after the squirrel\nRule11: If the cockroach has something to drink, then it does not prepare armor for the crocodile\nRule12: If at least one animal respects the tiger, then the pig does not burn the warehouse that belongs to the turtle\nRule13: If the cockroach has fewer than 14 friends, then it does not prepare armor for the crocodile\nRule14: If the pig burns the warehouse that belongs to the turtle, then the turtle owes money to the gecko\nRule15: If at least one animal attacks the green fields of the swordfish, then the squid winks at the gecko\nRule16: If the cockroach does not prepare armor for the crocodile, then the crocodile respects the gecko\nRule17: If at least one animal proceeds to the spot right after the squirrel, then the crocodile does not respect the gecko\n\nRule10 is preferred over Rule5\nRule10 is preferred over Rule7\nRule12 is preferred over Rule3\nRule16 is preferred over Rule17\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cheetah proceeds to the spot right after the kudu\nThe cockroach has a tablet\nThe cockroach has five friends\nThe cockroach knows the defensive plans of the hummingbird\nThe kiwi steals five points from the puffin\nThe octopus attacks the green fields of the swordfish\nThe panther shows all her cards to the parrot\nThe salmon is named Milo\nThe salmon struggles to find food\nThe snail is named Teddy\nThe goldfish does not learn the basics of resource management from the grasshopper\nThe pig does not need support from the starfish\n\nBased on the game state and the rules and preferences, does the gecko knock down the fortress of the sheep?\nQuestion: Does the gecko knock down the fortress of the sheep?",
        "idx": 490,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squid winks at the gecko, then the gecko sings a victory song for the hippopotamus\nrule1() = wink(squid, gecko) => sing_song(gecko, victory_song_for(hippopotamus))\n# Rule2: The grasshopper unquestionably needs the support of the gecko, in the case where the goldfish does not learn the basics of resource management from the grasshopper\nrule2() = not learn_basics_of_resource_management(goldfish, grasshopper) => needs_support(grasshopper, gecko)\n# Rule3: If something does not need the support of the starfish, then it burns the warehouse that is in possession of the turtle\nrule3(something) = not needs_support(something, starfish) => burn(warehouse_of(turtle), something)\n# Rule4: The grasshopper does not need the support of the gecko, in the case where the oscar prepares armor for the grasshopper\nrule4() = prepare_armor(oscar, grasshopper) => not needs_support(grasshopper, gecko)\n# Rule5: Regarding the salmon, if it has a name whose first letter is the same as the first letter of the snail's name, then we can conclude that it does not proceed to the spot right after the squirrel\nrule5() = first_letter_of(name(salmon)) == first_letter_of(name(snail)) => not proceed(salmon, spot_right_after(spot_of(squirrel)))\n# Rule6: For the gecko, if the belief is that the turtle owes money to the gecko and the crocodile respects the gecko, then you can add that \"the gecko is not going to knock down the fortress that belongs to the sheep\" to your conclusions\nrule6() = owes_money_to(turtle, gecko) & respects(crocodile, gecko) => not knock_down_fortress(gecko, fortress_of(sheep))\n# Rule7: If the salmon has difficulty to find food, then the salmon does not proceed to the spot right after the squirrel\nrule7() = struggles_to_find_food(salmon) => not proceed(salmon, spot_right_after(spot_of(squirrel)))\n# Rule8: If at least one animal knows the defense plan of the doctorfish, then the gecko does not become an enemy of the meerkat\nrule8() = knows(defense_plan_of(doctorfish), something) => not enemy(gecko, meerkat)\n# Rule9: The cheetah knows the defensive plans of the doctorfish whenever at least one animal shows all her cards to the parrot\nrule9() = show_all_cards(something, parrot) => knows(defensive_plans_of(doctorfish), cheetah)\n# Rule10: If at least one animal steals five points from the puffin, then the salmon proceeds to the spot that is right after the spot of the squirrel\nrule10() = steal_points_from(puffin, something) => proceed(salmon, spot_right_after(spot_of(squirrel)))\n# Rule11: If the cockroach has something to drink, then the cockroach does not prepare armor for the crocodile\nrule11() = has(cockroach, drink) => not prepare_armor(cockroach, crocodile)\n# Rule12: The pig does not burn the warehouse of the turtle whenever at least one animal respects the tiger\nrule12() = respects(something, tiger) => not burn(warehouse_of(turtle), pig)\n# Rule13: If the cockroach has fewer than 14 friends, then the cockroach does not prepare armor for the crocodile\nrule13() = friends(cockroach) < 14 => not prepare_armor(cockroach, crocodile)\n# Rule14: If the pig burns the warehouse that is in possession of the turtle, then the turtle owes $$$ to the gecko\nrule14() = burn(warehouse_of(turtle), pig) => owes_money_to(turtle, gecko)\n# Rule15: If at least one animal attacks the green fields of the swordfish, then the squid winks at the gecko\nrule15() = attack(green_fields_of(swordfish), something) => wink(squid, gecko)\n# Rule16: The crocodile unquestionably respects the gecko, in the case where the cockroach does not prepare armor for the crocodile\nrule16() = not prepare_armor(cockroach, crocodile) => respects(crocodile, gecko)\n# Rule17: The crocodile does not respect the gecko whenever at least one animal proceeds to the spot that is right after the spot of the squirrel.\nrule17() = proceed(something, spot_right_after(spot_of(squirrel))) => not respects(crocodile, gecko)\n# Rule10 is preferred over Rule5\norder(rule10) > order(rule5) = True\n# Rule10 is preferred over Rule7\norder(rule10) > order(rule7) = True\n# Rule12 is preferred over Rule3\norder(rule12) > order(rule3) = True\n# Rule16 is preferred over Rule17\norder(rule16) > order(rule17) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cheetah proceeds to the spot right after the kudu\nproceed(cheetah, spot_right_after(spot_of(kudu))) = True\n# The cockroach has a tablet, and has five friends\nhas(cockroach, tablet) = True\nfriends(cockroach) = 5\n# The cockroach knows the defensive plans of the hummingbird\nknows(defensive_plans_of(hummingbird), cockroach) = True\n# The kiwi steals five points from the puffin\nsteal_points_from(puffin, kiwi) = True\n# The octopus attacks the green fields whose owner is the swordfish\nattack(green_fields_of(swordfish), octopus) = True\n# The panther shows all her cards to the parrot\nshow_all_cards(panther, parrot) = True\n# The salmon is named Milo, and struggles to find food\nname(salmon, Milo) = True\nstruggles_to_find_food(salmon) = True\n# The snail is named Teddy\nname(snail, Teddy) = True\n# The goldfish does not learn the basics of resource management from the grasshopper\nnot learn_basics_of_resource_management(goldfish, grasshopper) = True\n# The pig does not need support from the starfish\nnot needs_support(pig, starfish) = True\n\n# Based on the game state and the rules and preferences, does the gecko knock down the fortress of the sheep?\nquestion = knock_down_fortress(gecko, fortress_of(sheep))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal shows all her cards to the squirrel, then the cat does not know the defense plan of the eel\nRule2: If the cat does not know the defense plan of the eel but the koala sings a victory song for the eel, then the eel knows the defense plan of the viperfish\nRule3: If the oscar has a name whose first letter is the same as the first letter of the carp's name, then the oscar does not show her cards to the koala\nRule4: If the bat prepares armor for the eagle, then the eagle shows her cards to the squirrel\nRule5: The koala sings a song of victory for the eel, in the case where the oscar does not show her cards to the koala.\n\nThe current state of the game is as follows\nThe bat prepares armor for the eagle\nThe carp is named Lucy\nThe oscar is named Casper\n\nBased on the game state and the rules and preferences, does the eel know the defensive plans of the viperfish?\nQuestion: Does the eel know the defensive plans of the viperfish?",
        "idx": 491,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal shows all her cards to the squirrel, then the cat does not know the defense plan of the eel\nrule1() = show_cards(some_animal, squirrel) => not knows_defense_plan(cat, eel)\n# Rule2: For the eel, if the belief is that the cat does not know the defense plan of the eel but the koala sings a victory song for the eel, then you can add \"the eel knows the defense plan of the viperfish\" to your conclusions\nrule2() = not knows_defense_plan(cat, eel) & sing_song(koala, victory_song_for(eel)) => knows_defense_plan(eel, viperfish)\n# Rule3: Regarding the oscar, if it has a name whose first letter is the same as the first letter of the carp's name, then we can conclude that it does not show her cards (all of them) to the koala\nrule3() = first_letter_of(name(oscar)) == first_letter_of(name(carp)) => not show_cards(oscar, koala)\n# Rule4: If the bat prepares armor for the eagle, then the eagle shows her cards (all of them) to the squirrel\nrule4() = prepare_armor(bat, eagle) => show_cards(eagle, squirrel)\n# Rule5: The koala unquestionably sings a song of victory for the eel, in the case where the oscar does not show her cards (all of them) to the koala.\nrule5() = not show_cards(oscar, koala) => sing_song(koala, victory_song_for(eel))\n\n# The current state of the game is as follows\n# The bat prepares armor for the eagle\nprepare_armor(bat, eagle) = True\n# The carp is named Lucy\nname(carp, Lucy) = True\n# The oscar is named Casper\nname(oscar, Casper) = True\n\n# Based on the game state and the rules and preferences, does the eel know the defensive plans of the viperfish?\nquestion = knows_defense_plan(eel, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cat knocks down the fortress of the cheetah whenever at least one animal raises a peace flag for the polar bear\nRule2: If the oscar has a card whose color starts with the letter \"e\", then it raises a peace flag for the polar bear\nRule3: If something removes from the board one of the pieces of the hippopotamus, then it rolls the dice for the cat, too\nRule4: If at least one animal knows the defense plan of the sheep, then it will not knock down the fortress that belongs to the cat\nRule5: If at least one animal knocks down the fortress that belongs to the cheetah, then the kudu eats the food that belongs to the starfish\nRule6: If the oscar has a name whose first letter is the same as the first letter of the grasshopper's name, then it raises a peace flag for the polar bear\nRule7: The zander will not roll the dice for the cat, in the case where the eel does not respect the zander\nRule8: If the oscar has more than seven friends, then it does not raise a peace flag for the polar bear\nRule9: If the oscar has a device to connect to the internet, then it does not raise a peace flag for the polar bear\n\nRule7 is preferred over Rule3\nRule8 is preferred over Rule2\nRule8 is preferred over Rule6\nRule9 is preferred over Rule2\nRule9 is preferred over Rule6\n\nThe current state of the game is as follows\nThe caterpillar knows the defensive plans of the sheep\nThe grasshopper is named Lily\nThe oscar has a blade and is named Lucy\nThe oscar has a card that is red in color\nThe zander removes from the board one of the pieces of the hippopotamus\n\nBased on the game state and the rules and preferences, does the kudu eat the food of the starfish?\nQuestion: Does the kudu eat the food of the starfish?",
        "idx": 492,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cat knocks down the fortress of the cheetah whenever at least one animal raises a peace flag for the polar bear\nrule1() = raise_flag(something, polar_bear) => knock_down(fortress_of(cat), fortress_of(cheetah))\n# Rule2: Regarding the oscar, if it has a card whose color starts with the letter \"e\", then we can conclude that it raises a peace flag for the polar bear\nrule2() = has(oscar, card_with(color_starting_with(\"e\"))) => raise_flag(oscar, polar_bear)\n# Rule3: If something removes from the board one of the pieces of the hippopotamus, then it rolls the dice for the cat, too\nrule3(something) = remove(something, piece_of(hippopotamus)) => roll_dice(something, cat)\n# Rule4: If you are positive that you saw one of the animals knows the defense plan of the sheep, you can be certain that it will not knock down the fortress that belongs to the cat\nrule4(something) = knows(defense_plan_of(sheep), something) => not knock_down(fortress_of(cat))\n# Rule5: If at least one animal knocks down the fortress that belongs to the cheetah, then the kudu eats the food that belongs to the starfish\nrule5() = knock_down(fortress_of(cheetah)) => eat_food(kudu, food_of(starfish))\n# Rule6: If the oscar has a name whose first letter is the same as the first letter of the grasshopper's name, then the oscar raises a peace flag for the polar bear\nrule6() = first_letter_of(name(oscar)) == first_letter_of(name(grasshopper)) => raise_flag(oscar, polar_bear)\n# Rule7: The zander will not roll the dice for the cat, in the case where the eel does not respect the zander\nrule7() = not respect(eel, zander) => not roll_dice(zander, cat)\n# Rule8: If the oscar has more than seven friends, then the oscar does not raise a peace flag for the polar bear\nrule8() = friends(oscar) > 7 => not raise_flag(oscar, polar_bear)\n# Rule9: Regarding the oscar, if it has a device to connect to the internet, then we can conclude that it does not raise a flag of peace for the polar bear.\nrule9(device) = has(oscar, connect_to_internet(device)) => not raise_flag(oscar, polar_bear)\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n# Rule8 is preferred over Rule2\norder(rule8) > order(rule2) = True\n# Rule8 is preferred over Rule6\norder(rule8) > order(rule6) = True\n# Rule9 is preferred over Rule2\norder(rule9) > order(rule2) = True\n# Rule9 is preferred over Rule6\norder(rule9) > order(rule6) = True\n\n# The current state of the game is as follows\n# The caterpillar knows the defensive plans of the sheep\nknows(defense_plan_of(sheep), caterpillar) = True\n# The grasshopper is named Lily\nname(grasshopper, Lily) = True\n# The oscar has a blade, and is named Lucy\nhas(oscar, blade) = True\nname(oscar, Lucy) = True\n# The oscar has a card that is red in color\nhas(oscar, card_with(red_color)) = True\n# The zander removes from the board one of the pieces of the hippopotamus\nremove(zander, piece_of(hippopotamus)) = True\n\n# Based on the game state and the rules and preferences, does the kudu eat the food of the starfish?\nquestion = eat_food(kudu, food_of(starfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The hummingbird needs the support of the crocodile, in the case where the rabbit does not need support from the hummingbird\nRule2: If one of the animals becomes an actual enemy of the starfish, then it will not respect the crocodile\nRule3: If the raven does not respect the crocodile and the hummingbird needs the support of the crocodile, then the crocodile will not proceed to the spot right after the amberjack\nRule4: If something does not need the support of the doctorfish but becomes an actual enemy of the turtle, then it becomes an enemy of the starfish\nRule5: The rabbit does not need the support of the hummingbird, in the case where the bat does not wink at the rabbit\n\nThe current state of the game is as follows\nThe raven becomes an enemy of the turtle\nThe bat does not wink at the rabbit\nThe raven does not need support from the doctorfish\n\nBased on the game state and the rules and preferences, does the crocodile proceed to the spot right after the amberjack?\nQuestion: Does the crocodile proceed to the spot right after the amberjack?",
        "idx": 493,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The hummingbird unquestionably needs the support of the crocodile, in the case where the rabbit does not need support from the hummingbird\nrule1() = not needs_support(rabbit, hummingbird) => needs_support(hummingbird, crocodile)\n# Rule2: If you are positive that you saw one of the animals becomes an actual enemy of the starfish, you can be certain that it will not respect the crocodile\nrule2(something) = becomes_enemy(something, starfish) => not respects(something, crocodile)\n# Rule3: For the crocodile, if the belief is that the raven is not going to respect the crocodile but the hummingbird needs the support of the crocodile, then you can add that \"the crocodile is not going to proceed to the spot right after the amberjack\" to your conclusions\nrule3() = not respects(raven, crocodile) & needs_support(hummingbird, crocodile) => not proceed(crocodile, spot_right_after(amberjack))\n# Rule4: Be careful when something does not need the support of the doctorfish but becomes an actual enemy of the turtle because in this case it will, surely, become an enemy of the starfish (this may or may not be problematic)\nrule4(something) = not needs_support(something, doctorfish) & becomes_enemy(something, turtle) => becomes_enemy(something, starfish)\n# Rule5: The rabbit will not need the support of the hummingbird, in the case where the bat does not wink at the rabbit.\nrule5() = not wink(bat, rabbit) => not needs_support(rabbit, hummingbird)\n\n# The current state of the game is as follows\n# The raven becomes an enemy of the turtle\nbecomes_enemy(raven, turtle) = True\n# The bat does not wink at the rabbit\nnot wink(bat, rabbit) = True\n# The raven does not need support from the doctorfish\nnot needs_support(raven, doctorfish) = True\n\n# Based on the game state and the rules and preferences, does the crocodile proceed to the spot right after the amberjack?\nquestion = proceed(crocodile, spot_right_after(amberjack))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grasshopper has a name whose first letter is the same as the first letter of the doctorfish's name, then it learns the basics of resource management from the swordfish\nRule2: If the grasshopper killed the mayor, then it learns the basics of resource management from the swordfish\nRule3: If an animal learns elementary resource management from the swordfish, then it does not raise a peace flag for the polar bear\nRule4: If the grasshopper raises a peace flag for the polar bear, then the polar bear needs support from the sea bass\nRule5: If the moose killed the mayor, then it rolls the dice for the grasshopper\nRule6: If the oscar does not respect the grasshopper and the moose rolls the dice for the grasshopper, then the grasshopper raises a peace flag for the polar bear\nRule7: The oscar does not respect the grasshopper whenever an animal offers a job position to the viperfish\n\nRule6 is preferred over Rule3\n\nThe current state of the game is as follows\nThe doctorfish is named Pashmak\nThe grasshopper assassinated the mayor\nThe grasshopper is named Tessa\nThe moose assassinated the mayor\nThe cow does not offer a job to the viperfish\n\nBased on the game state and the rules and preferences, does the polar bear need support from the sea bass?\nQuestion: Does the polar bear need support from the sea bass?",
        "idx": 494,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the grasshopper, if it has a name whose first letter is the same as the first letter of the doctorfish's name, then we can conclude that it learns the basics of resource management from the swordfish\nrule1() = first_letter_of(name(grasshopper)) == first_letter_of(name(doctorfish)) => learn_basics_of_resource_management(grasshopper, swordfish)\n# Rule2: Regarding the grasshopper, if it killed the mayor, then we can conclude that it learns the basics of resource management from the swordfish\nrule2() = killed(grasshopper, mayor) => learn_basics_of_resource_management(grasshopper, swordfish)\n# Rule3: If you are positive that you saw one of the animals learns elementary resource management from the swordfish, you can be certain that it will not raise a peace flag for the polar bear\nrule3(something) = learns(something, elementary_resource_management_from(swordfish)) => not raise_flag_of_peace(something, polar_bear)\n# Rule4: If the grasshopper raises a flag of peace for the polar bear, then the polar bear needs support from the sea bass\nrule4() = raise_flag_of_peace(grasshopper, polar_bear) => needs_support(polar_bear, sea_bass)\n# Rule5: Regarding the moose, if it killed the mayor, then we can conclude that it rolls the dice for the grasshopper\nrule5() = killed(moose, mayor) => rolls_dice(moose, grasshopper)\n# Rule6: If the oscar does not respect the grasshopper but the moose rolls the dice for the grasshopper, then the grasshopper raises a peace flag for the polar bear unavoidably\nrule6() = not respects(oscar, grasshopper) & rolls_dice(moose, grasshopper) => raise_flag_of_peace(grasshopper, polar_bear)\n# Rule7: The oscar does not respect the grasshopper whenever at least one animal offers a job position to the viperfish.\nrule7() = offers_job_position(something, viperfish) => not respects(oscar, grasshopper)\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n\n# The current state of the game is as follows\n# The doctorfish is named Pashmak\nname(doctorfish, Pashmak) = True\n# The grasshopper assassinated the mayor\nkilled(grasshopper, mayor) = True\n# The grasshopper is named Tessa\nname(grasshopper, Tessa) = True\n# The moose assassinated the mayor\nkilled(moose, mayor) = True\n# The cow does not offer a job to the viperfish\nnot offers_job_position(cow, viperfish) = True\n\n# Based on the game state and the rules and preferences, does the polar bear need support from the sea bass?\nquestion = needs_support(polar_bear, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal burns the warehouse that is in possession of the donkey, then the turtle does not knock down the fortress of the amberjack\nRule2: If the eel does not eat the food that belongs to the squirrel, then the squirrel does not eat the food that belongs to the turtle\nRule3: The turtle offers a job to the bat whenever at least one animal removes one of the pieces of the cheetah\nRule4: If at least one animal winks at the eagle, then the lobster needs the support of the turtle\nRule5: If an animal does not attack the green fields whose owner is the panda bear, then it does not need support from the turtle\nRule6: If the meerkat has access to an abundance of food, then it does not wink at the eagle\nRule7: If the meerkat has a card with a color from the rainbow, then it does not wink at the eagle\nRule8: If the swordfish has something to carry apples and oranges, then it does not know the defense plan of the turtle\nRule9: If the meerkat has something to carry apples and oranges, then it winks at the eagle\nRule10: If something prepares armor for the baboon, then it burns the warehouse that is in possession of the donkey\nRule11: If an animal attacks the green fields of the spider, then it does not offer a job to the bat\nRule12: If the meerkat has more than 10 friends, then it winks at the eagle\nRule13: If at least one animal prepares armor for the octopus, then the sheep does not burn the warehouse that is in possession of the donkey\nRule14: If the rabbit sings a victory song for the eel, then the eel does not eat the food that belongs to the squirrel\nRule15: If the swordfish has something to sit on, then it does not know the defense plan of the turtle\nRule16: If the salmon has a card with a color that appears in the flag of Japan, then the salmon removes one of the pieces of the cheetah\nRule17: If something does not knock down the fortress of the amberjack but offers a job position to the bat, then it needs the support of the grasshopper\nRule18: The lobster does not attack the green fields whose owner is the panda bear whenever at least one animal removes one of the pieces of the viperfish.\n\nRule10 is preferred over Rule13\nRule11 is preferred over Rule3\nRule5 is preferred over Rule4\nRule6 is preferred over Rule12\nRule6 is preferred over Rule9\nRule7 is preferred over Rule12\nRule7 is preferred over Rule9\n\nThe current state of the game is as follows\nThe black bear removes one of the pieces of the viperfish\nThe crocodile prepares armor for the octopus\nThe lobster has a club chair\nThe meerkat has a saxophone and eleven friends\nThe meerkat struggles to find food\nThe rabbit sings a victory song for the eel\nThe salmon has a card that is red in color\nThe sheep prepares armor for the baboon\nThe swordfish has a bench\nThe swordfish has some arugula\n\nBased on the game state and the rules and preferences, does the turtle need support from the grasshopper?\nQuestion: Does the turtle need support from the grasshopper?",
        "idx": 495,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal burns the warehouse that is in possession of the donkey, then the turtle does not knock down the fortress of the amberjack\nrule1() = burn(warehouse_of(donkey), something) => not knock_down(fortress_of(amberjack), turtle)\n# Rule2: If the eel does not eat the food that belongs to the squirrel, then the squirrel does not eat the food that belongs to the turtle\nrule2() = not eat_food(eel, food_of(squirrel)) => not eat_food(squirrel, food_of(turtle))\n# Rule3: The turtle offers a job to the bat whenever at least one animal removes from the board one of the pieces of the cheetah\nrule3() = remove(something, piece_of(cheetah)) => offer_job(turtle, bat)\n# Rule4: If at least one animal winks at the eagle, then the lobster needs the support of the turtle\nrule4() = wink_at(something, eagle) => needs_support(lobster, turtle)\n# Rule5: If you are positive that one of the animals does not attack the green fields whose owner is the panda bear, you can be certain that it will not need support from the turtle\nrule5() = not attack_green_fields(something, owner_is(panda_bear)) => not needs_support(something, turtle)\n# Rule6: If the meerkat has access to an abundance of food, then the meerkat does not wink at the eagle\nrule6() = has_access_to_abundance_of_food(meerkat) => not wink_at(meerkat, eagle)\n# Rule7: If the meerkat has a card whose color is one of the rainbow colors, then the meerkat does not wink at the eagle\nrule7() = has(meerkat, card) and color(card) in rainbow_colors => not wink_at(meerkat, eagle)\n# Rule8: Regarding the swordfish, if it has something to carry apples and oranges, then we can conclude that it does not know the defense plan of the turtle\nrule8() = has(swordfish, carry_apples_and_oranges) => not knows(defense_plan_of(turtle), swordfish)\n# Rule9: If the meerkat has something to carry apples and oranges, then the meerkat winks at the eagle\nrule9() = has(meerkat, carry_apples_and_oranges) => wink_at(meerkat, eagle)\n# Rule10: If something prepares armor for the baboon, then it burns the warehouse that is in possession of the donkey, too\nrule10(something) = prepare_armor(something, baboon) => burn(warehouse_of(donkey), something)\n# Rule11: If you are positive that you saw one of the animals attacks the green fields of the spider, you can be certain that it will not offer a job to the bat\nrule11() = attack_green_fields(something, owner_is(spider)) => not offer_job(something, bat)\n# Rule12: Regarding the meerkat, if it has more than 10 friends, then we can conclude that it winks at the eagle\nrule12() = friends(meerkat) > 10 => wink_at(meerkat, eagle)\n# Rule13: If at least one animal prepares armor for the octopus, then the sheep does not burn the warehouse that is in possession of the donkey\nrule13() = prepare_armor(something, octopus) => not burn(warehouse_of(donkey), sheep)\n# Rule14: The eel does not eat the food that belongs to the squirrel, in the case where the rabbit sings a victory song for the eel\nrule14() = sing_song(rabbit, victory_song_for(eel)) => not eat_food(eel, food_of(squirrel))\n# Rule15: If the swordfish has something to sit on, then the swordfish does not know the defensive plans of the turtle\nrule15() = has(swordfish, sit_on_something) => not knows(defensive_plans_of(turtle), swordfish)\n# Rule16: If the salmon has a card whose color appears in the flag of Japan, then the salmon removes one of the pieces of the cheetah\nrule16() = has(salmon, card) and color(card) in colors_of(Japan_flag) => remove(salmon, piece_of(cheetah))\n# Rule17: Be careful when something does not knock down the fortress of the amberjack but offers a job position to the bat because in this case it will, surely, need the support of the grasshopper (this may or may not be problematic)\nrule17(something) = not knock_down(fortress_of(amberjack), something) & offer_job(something, bat) => needs_support(something, grasshopper)\n# Rule18: The lobster does not attack the green fields whose owner is the panda bear whenever at least one animal removes one of the pieces of the viperfish.\nrule18() = remove(something, piece_of(viperfish)) => not attack_green_fields(lobster, owner_is(panda_bear))\n# Rule10 is preferred over Rule13\norder(rule10) > order(rule13) = True\n# Rule11 is preferred over Rule3\norder(rule11) > order(rule3) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n# Rule6 is preferred over Rule12\norder(rule6) > order(rule12) = True\n# Rule6 is preferred over Rule9\norder(rule6) > order(rule9) = True\n# Rule7 is preferred over Rule12\norder(rule7) > order(rule12) = True\n# Rule7 is preferred over Rule9\norder(rule7) > order(rule9) = True\n\n# The current state of the game is as follows\n# The black bear removes from the board one of the pieces of the viperfish\nremove(black_bear, piece_of(viperfish)) = True\n# The crocodile prepares armor for the octopus\nprepare_armor(crocodile, octopus) = True\n# The lobster has a club chair\nhas(lobster, club_chair) = True\n# The meerkat has a saxophone, and has eleven friends\nhas(meerkat, saxophone) = True\nfriends(meerkat) = 11\n# The meerkat struggles to find food\nstruggles_to_find_food(meerkat) = True\n# The rabbit sings a victory song for the eel\nsing_song(rabbit, victory_song_for(eel)) = True\n# The salmon has a card that is red in color\nhas(salmon, card_with(red_color)) = True\n# The sheep prepares armor for the baboon\nprepare_armor(sheep, baboon) = True\n# The swordfish has a bench\nhas(swordfish, bench) = True\n# The swordfish has some arugula\nhas(swordfish, arugula) = True\n\n# Based on the game state and the rules and preferences, does the turtle need support from the grasshopper?\nquestion = needs_support(turtle, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something removes one of the pieces of the blobfish from the board, then it does not know the defensive plans of the panther\nRule2: If at least one animal knows the defense plan of the octopus, then the wolverine does not prepare armor for the spider\nRule3: If the wolverine has something to drink, then the wolverine does not offer a job position to the sun bear\nRule4: If something does not prepare armor for the spider and also does not offer a job to the sun bear, then it will surely remove one of the pieces of the blobfish from the board\n\nThe current state of the game is as follows\nThe goldfish knows the defensive plans of the octopus\nThe wolverine has a cappuccino\nThe wolverine does not learn the basics of resource management from the zander\n\nBased on the game state and the rules and preferences, does the wolverine know the defensive plans of the panther?\nQuestion: Does the wolverine know the defensive plans of the panther?",
        "idx": 496,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something removes from the board one of the pieces of the blobfish, then it does not know the defensive plans of the panther\nrule1() = remove(something, piece_of(blobfish)) => not knows_defensive_plans(something, panther)\n# Rule2: If at least one animal knows the defense plan of the octopus, then the wolverine does not prepare armor for the spider\nrule2() = knows_defense_plan(something, octopus) => not prepare_armor(wolverine, spider)\n# Rule3: If the wolverine has something to drink, then the wolverine does not offer a job position to the sun bear\nrule3() = has(wolverine, drink) => not offer_job_position(wolverine, sun_bear)\n# Rule4: Be careful when something does not prepare armor for the spider and also does not offer a job to the sun bear because in this case it will surely remove from the board one of the pieces of the blobfish (this may or may not be problematic).\nrule4(something) = not prepare_armor(something, spider) & not offer_job_position(something, sun_bear) => remove(something, piece_of(blobfish))\n\n# The current state of the game is as follows\n# The goldfish knows the defensive plans of the octopus\nknows_defensive_plans(goldfish, octopus) = True\n# The wolverine has a cappuccino\nhas(wolverine, cappuccino) = True\n# The wolverine does not learn the basics of resource management from the zander\nnot learn_basics_of_resource_management(wolverine, zander) = True\n\n# Based on the game state and the rules and preferences, does the wolverine know the defensive plans of the panther?\nquestion = knows_defensive_plans(wolverine, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The sheep does not eat the food of the cricket whenever at least one animal rolls the dice for the turtle\nRule2: Be careful when something becomes an actual enemy of the squirrel but does not burn the warehouse of the phoenix because in this case it will, surely, eat the food of the cricket\nRule3: If the rabbit sings a victory song for the sheep and the jellyfish does not need support from the sheep, then the sheep learns elementary resource management from the squirrel\nRule4: The kangaroo gives a magnifier to the sheep whenever at least one animal knows the defensive plans of the swordfish\nRule5: The sheep does not burn the warehouse of the phoenix, in the case where the kangaroo gives a magnifier to the sheep\nRule6: If something learns elementary resource management from the squirrel, then it becomes an actual enemy of the squirrel\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe kudu knows the defensive plans of the swordfish\nThe rabbit offers a job to the sheep\nThe jellyfish does not need support from the sheep\n\nBased on the game state and the rules and preferences, does the sheep eat the food of the cricket?\nQuestion: Does the sheep eat the food of the cricket?",
        "idx": 497,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The sheep does not eat the food of the cricket whenever at least one animal rolls the dice for the turtle\nrule1() = roll_dice(something, turtle) => not eat_food(sheep, cricket)\n# Rule2: Be careful when something becomes an actual enemy of the squirrel but does not burn the warehouse of the phoenix because in this case it will, surely, eat the food of the cricket (this may or may not be problematic)\nrule2(something) = enemy(something, squirrel) & not burn(warehouse_of(phoenix), something) => eat_food(something, cricket)\n# Rule3: For the sheep, if the belief is that the rabbit sings a victory song for the sheep and the jellyfish does not need support from the sheep, then you can add \"the sheep learns elementary resource management from the squirrel\" to your conclusions\nrule3() = sing_song(rabbit, victory_song_for(sheep)) & not needs_support(jellyfish, sheep) => learn(sheep, elementary_resource_management_from(squirrel))\n# Rule4: The kangaroo gives a magnifier to the sheep whenever at least one animal knows the defensive plans of the swordfish\nrule4() = knows(defensive_plans_of(swordfish), something) => give_magnifier(kangaroo, sheep)\n# Rule5: The sheep does not burn the warehouse of the phoenix, in the case where the kangaroo gives a magnifier to the sheep\nrule5() = give_magnifier(kangaroo, sheep) => not burn(warehouse_of(phoenix), sheep)\n# Rule6: If something learns elementary resource management from the squirrel, then it becomes an actual enemy of the squirrel, too.\nrule6(something) = learn(something, elementary_resource_management_from(squirrel)) => enemy(something, squirrel)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The kudu knows the defensive plans of the swordfish\nknows(defensive_plans_of(swordfish), kudu) = True\n# The rabbit offers a job to the sheep\noffer_job(rabbit, sheep) = True\n# The jellyfish does not need support from the sheep\nneeds_support(jellyfish, sheep) = False\n\n# Based on the game state and the rules and preferences, does the sheep eat the food of the cricket?\nquestion = eat_food(sheep, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something does not burn the warehouse that is in possession of the crocodile but it prepares armor for the swordfish, then it also prepares armor for the wolverine\nRule2: The oscar does not need the support of the moose whenever at least one animal proceeds to the spot right after the tiger\nRule3: If at least one animal knocks down the fortress that belongs to the starfish, then the moose does not burn the warehouse of the crocodile\nRule4: The moose prepares armor for the swordfish whenever at least one animal owes money to the penguin\nRule5: If the carp has more than 7 friends, then it gives a magnifying glass to the panther\nRule6: If at least one animal gives a magnifying glass to the panther, then the buffalo raises a peace flag for the moose\nRule7: If the leopard has a name whose first letter is the same as the first letter of the zander's name, then the leopard does not steal five points from the oscar\nRule8: The leopard steals five points from the oscar whenever at least one animal sings a victory song for the blobfish\nRule9: The sun bear proceeds to the spot right after the tiger, in the case where the cricket prepares armor for the sun bear\nRule10: If the carp has something to sit on, then it gives a magnifying glass to the panther\nRule11: If at least one animal removes from the board one of the pieces of the koala, then the hummingbird owes money to the penguin\nRule12: The elephant knocks down the fortress of the starfish, in the case where the phoenix does not knock down the fortress that belongs to the elephant\n\nRule8 is preferred over Rule7\n\nThe current state of the game is as follows\nThe carp has 17 friends and a basket\nThe cheetah removes from the board one of the pieces of the koala\nThe cricket prepares armor for the sun bear\nThe leopard invented a time machine\nThe leopard is named Pashmak\nThe sea bass sings a victory song for the blobfish\nThe zander is named Lucy\nThe phoenix does not knock down the fortress of the elephant\n\nBased on the game state and the rules and preferences, does the moose prepare armor for the wolverine?\nQuestion: Does the moose prepare armor for the wolverine?",
        "idx": 498,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not burn the warehouse that is in possession of the crocodile but it prepares armor for the swordfish, what can you certainly conclude? You can conclude that it also prepares armor for the wolverine\nrule1() = not burn(warehouse_of(crocodile), something) & prepare_armor(something, swordfish) => prepare_armor(something, wolverine)\n# Rule2: The oscar does not need the support of the moose whenever at least one animal proceeds to the spot right after the tiger\nrule2() = proceed(something, spot_right_after(spot_of(tiger))) => not needs_support(oscar, moose)\n# Rule3: If at least one animal knocks down the fortress that belongs to the starfish, then the moose does not burn the warehouse of the crocodile\nrule3() = knock_down(fortress_of(starfish), something) => not burn(warehouse_of(crocodile), moose)\n# Rule4: The moose prepares armor for the swordfish whenever at least one animal owes $$$ to the penguin\nrule4() = owes_money_to(something, penguin) => prepare_armor(moose, swordfish)\n# Rule5: Regarding the carp, if it has more than 7 friends, then we can conclude that it gives a magnifying glass to the panther\nrule5() = friends(carp) > 7 => give(carp, magnifying_glass, panther)\n# Rule6: If at least one animal gives a magnifying glass to the panther, then the buffalo raises a peace flag for the moose\nrule6() = give(something, magnifying_glass, panther) => raise_flag_of_peace(buffalo, moose)\n# Rule7: If the leopard has a name whose first letter is the same as the first letter of the zander's name, then the leopard does not steal five points from the oscar\nrule7() = first_letter_of(name(leopard)) == first_letter_of(name(zander)) => not steal_points(leopard, 5, oscar)\n# Rule8: The leopard steals five points from the oscar whenever at least one animal sings a victory song for the blobfish\nrule8() = sing_song(something, victory_song_for(blobfish)) => steal_points(leopard, 5, oscar)\n# Rule9: The sun bear unquestionably proceeds to the spot right after the tiger, in the case where the cricket prepares armor for the sun bear\nrule9() = prepare_armor(cricket, sun_bear) => proceed(sun_bear, spot_right_after(spot_of(tiger)))\n# Rule10: If the carp has something to sit on, then the carp gives a magnifying glass to the panther\nrule10() = has(carp, something_to_sit_on) => give(carp, magnifying_glass, panther)\n# Rule11: If at least one animal removes from the board one of the pieces of the koala, then the hummingbird owes $$$ to the penguin\nrule11() = remove(something, piece_of(koala)) => owes_money_to(hummingbird, penguin)\n# Rule12: The elephant unquestionably knocks down the fortress of the starfish, in the case where the phoenix does not knock down the fortress that belongs to the elephant.\nrule12() = not knock_down(fortress_of(elephant), phoenix) => knock_down(fortress_of(starfish), elephant)\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n\n# The current state of the game is as follows\n# The carp has 17 friends, and has a basket\nfriends(carp) = 17\nhas(carp, basket) = True\n# The cheetah removes from the board one of the pieces of the koala\nremove(cheetah, piece_of(koala)) = True\n# The cricket prepares armor for the sun bear\nprepare_armor(cricket, sun_bear) = True\n# The leopard invented a time machine\ninvented_time_machine(leopard) = True\n# The leopard is named Pashmak\nname(leopard, Pashmak) = True\n# The sea bass sings a victory song for the blobfish\nsing_song(sea_bass, victory_song_for(blobfish)) = True\n# The zander is named Lucy\nname(zander, Lucy) = True\n# The phoenix does not knock down the fortress of the elephant\nnot knock_down(fortress_of(elephant), phoenix) = True\n\n# Based on the game state and the rules and preferences, does the moose prepare armor for the wolverine?\nquestion = prepare_armor(moose, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo becomes an enemy of the turtle, then the turtle does not owe money to the eagle\nRule2: If the kiwi has a name whose first letter is the same as the first letter of the tiger's name, then the kiwi knows the defense plan of the kangaroo\nRule3: If something attacks the green fields of the dog but does not become an actual enemy of the hare, then it becomes an enemy of the turtle\nRule4: If at least one animal burns the warehouse of the baboon, then the kangaroo attacks the green fields whose owner is the dog\nRule5: If one of the animals steals five points from the whale, then it does not know the defense plan of the kangaroo\nRule6: If something removes one of the pieces of the black bear, then it becomes an actual enemy of the hare\nRule7: If the kangaroo has fewer than nine friends, then it does not become an actual enemy of the hare\n\nRule2 is preferred over Rule5\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe kangaroo has three friends\nThe kiwi is named Lucy and steals five points from the whale\nThe tiger is named Lola\nThe tilapia burns the warehouse of the baboon\n\nBased on the game state and the rules and preferences, does the turtle owe money to the eagle?\nQuestion: Does the turtle owe money to the eagle?",
        "idx": 499,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kangaroo becomes an enemy of the turtle, then the turtle is not going to owe money to the eagle\nrule1() = enemy(kangaroo, turtle) => not owes_money_to(turtle, eagle)\n# Rule2: Regarding the kiwi, if it has a name whose first letter is the same as the first letter of the tiger's name, then we can conclude that it knows the defense plan of the kangaroo\nrule2() = first_letter_of(name(kiwi)) == first_letter_of(name(tiger)) => knows_defense_plan(kiwi, kangaroo)\n# Rule3: If you see that something attacks the green fields of the dog but does not become an actual enemy of the hare, what can you certainly conclude? You can conclude that it becomes an enemy of the turtle\nrule3(something) = attack_green_fields(something, dog) & not enemy(something, hare) => enemy(something, turtle)\n# Rule4: If at least one animal burns the warehouse that is in possession of the baboon, then the kangaroo attacks the green fields whose owner is the dog\nrule4() = burn(warehouse_of(baboon), something) => attack_green_fields(kangaroo, dog)\n# Rule5: If you are positive that you saw one of the animals steals five of the points of the whale, you can be certain that it will not know the defense plan of the kangaroo\nrule5() = steal_points(something, 5, whale) => not knows_defense_plan(something, kangaroo)\n# Rule6: If something removes one of the pieces of the black bear, then it becomes an actual enemy of the hare, too\nrule6() = remove(something, piece_of(black_bear)) => enemy(something, hare)\n# Rule7: If the kangaroo has fewer than nine friends, then the kangaroo does not become an actual enemy of the hare.\nrule7() = friends(kangaroo) < 9 => not enemy(kangaroo, hare)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The kangaroo has three friends\nfriends(kangaroo) = 3\n# The kiwi is named Lucy, and steals five points from the whale\nname(kiwi, Lucy) = True\nsteal_points(kiwi, 5, whale) = True\n# The tiger is named Lola\nname(tiger, Lola) = True\n# The tilapia burns the warehouse of the baboon\nburn(warehouse_of(baboon), tilapia) = True\n\n# Based on the game state and the rules and preferences, does the turtle owe money to the eagle?\nquestion = owes_money_to(turtle, eagle)"
    }
]