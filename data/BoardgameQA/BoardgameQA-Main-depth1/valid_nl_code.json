[
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the amberjack has difficulty to find food, then the amberjack removes from the board one of the pieces of the carp.\n\nThe current state of the game is as follows\nThe amberjack struggles to find food.\n\nBased on the game state and the rules and preferences, does the amberjack remove from the board one of the pieces of the carp?\nQuestion: Does the amberjack remove from the board one of the pieces of the carp?",
        "idx": 0,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the amberjack has difficulty to find food, then the amberjack removes from the board one of the pieces of the carp.\nrule1() = struggles_to_find_food(amberjack) => remove_piece(amberjack, carp)\n\n# The current state of the game is as follows\n# The amberjack struggles to find food.\nstruggles_to_find_food(amberjack) = True\n\n# Based on the game state and the rules and preferences, does the amberjack remove from the board one of the pieces of the carp?\nquestion = remove_piece(amberjack, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the donkey, if it is a fan of Chris Ronaldo, then we can conclude that it does not raise a peace flag for the caterpillar.\nRule2: Regarding the donkey, if it has a card whose color appears in the flag of Japan, then we can conclude that it does not raise a peace flag for the caterpillar.\n\nThe current state of the game is as follows\nThe donkey has a card that is red in color.\nThe donkey has green tea.\nThe donkey has some kale.\nThe donkey hates Chris Ronaldo.\n\nBased on the game state and the rules and preferences, does the donkey raise a peace flag for the caterpillar?\nQuestion: Does the donkey raise a peace flag for the caterpillar?",
        "idx": 1,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the donkey, if it is a fan of Chris Ronaldo, then we can conclude that it does not raise a peace flag for the caterpillar\nrule1() = fan_of(donkey, Chris_Ronaldo) => not raise_flag_of_peace(donkey, caterpillar)\n# Rule2: Regarding the donkey, if it has a card whose color appears in the flag of Japan, then we can conclude that it does not raise a peace flag for the caterpillar.\nrule2() = has(donkey, card) and color(card) in flag_colors(Japan) => not raise_flag_of_peace(donkey, caterpillar)\n\n# The current state of the game is as follows\n# The donkey has a card that is red in color\nhas(donkey, card) = True\ncolor(card, red) = True\n# The donkey has a green tea\nhas(donkey, green_tea) = True\n# The donkey has some kale\nhas(donkey, kale) = True\n# The donkey hates Chris Ronaldo\nhates(donkey, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the donkey raise a peace flag for the caterpillar?\nquestion = raise_flag_of_peace(donkey, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eel steals five points from the turtle, then the turtle knocks down the fortress of the black bear.\n\nThe current state of the game is as follows\nThe eel attacks the green fields whose owner is the turtle.\nThe goldfish proceeds to the spot right after the turtle.\nThe oscar learns the basics of resource management from the turtle.\n\nBased on the game state and the rules and preferences, does the turtle knock down the fortress of the black bear?\nQuestion: Does the turtle knock down the fortress of the black bear?",
        "idx": 2,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eel steals five points from the turtle, then the turtle knocks down the fortress of the black bear.\nrule1() = steal_points(eel, 5, turtle) => knock_down_fortress(turtle, black_bear)\n\n# The current state of the game is as follows\n# The eel attacks the green fields whose owner is the turtle\nattacks(eel, green_fields, turtle) = True\n# The goldfish proceeds to the spot right after the turtle\nproceeds_to_spot(goldfish, turtle) = True\n# The oscar learns the basics of resource management from the turtle.\nlearns_basics(oscar, resource_management, turtle) = True\n\n# Based on the game state and the rules and preferences, does the turtle knock down the fortress of the black bear?\nquestion = knock_down_fortress(turtle, black_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the leopard, if it has a sharp object, then we can conclude that it does not raise a peace flag for the zander.\nRule2: Be careful when something attacks the green fields of the whale and also rolls the dice for the whale because in this case it will surely raise a peace flag for the zander (this may or may not be problematic).\nRule1 is preferred over Rule2.\n\nThe current state of the game is as follows\nThe leopard attacks the green fields whose owner is the whale, and rolls the dice for the whale.\n\nBased on the game state and the rules and preferences, does the leopard raise a peace flag for the zander?\nQuestion: Does the leopard raise a peace flag for the zander?",
        "idx": 3,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the leopard, if it has a sharp object, then we can conclude that it does not raise a peace flag for the zander\nrule1() = has_sharp_object(leopard) => not raise_flag_of_peace(leopard, zander)\n\n# Rule2: Be careful when something attacks the green fields of the whale and also rolls the dice for the whale because in this case it will surely raise a peace flag for the zander (this may or may not be problematic).\nrule2() = attacks(green_fields, whale) & rolls_dice(whale) => raise_flag_of_peace(leopard, zander)\n\n# Rule1 is preferred over Rule2\npreferred_rule() = rule1()\n\n# The current state of the game is as follows\n# The leopard attacks the green fields whose owner is the whale, and rolls the dice for the whale.\nattacks(green_fields, whale) = True\nrolls_dice(whale) = True\n\n# Based on the game state and the rules and preferences, does the leopard raise a peace flag for the zander?\nquestion = raise_flag_of_peace(leopard, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the canary, if it has something to carry apples and oranges, then we can conclude that it proceeds to the spot that is right after the spot of the whale.\nRule2: If something needs support from the hare, then it does not proceed to the spot that is right after the spot of the whale.\nRule3: Regarding the canary, if it has a name whose first letter is the same as the first letter of the grizzly bear's name, then we can conclude that it proceeds to the spot right after the whale.\n\nRule1 is preferred over Rule2.\nRule3 is preferred over Rule2.\n\nThe current state of the game is as follows\nThe canary is named Paco.\nThe canary needs support from the hare.\nThe grizzly bear is named Tarzan.\n\nBased on the game state and the rules and preferences, does the canary proceed to the spot right after the whale?\nQuestion: Does the canary proceed to the spot right after the whale?",
        "idx": 4,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the canary, if it has something to carry apples and oranges, then we can conclude that it proceeds to the spot that is right after the spot of the whale\nrule1() = has(canary, carry(apples)) & has(canary, carry(oranges)) => proceed(canary, spot_after(whale))\n# Rule2: If something needs support from the hare, then it does not proceed to the spot that is right after the spot of the whale\nrule2() = needs_support(something, hare) => not proceed(something, spot_after(whale))\n# Rule3: Regarding the canary, if it has a name whose first letter is the same as the first letter of the grizzly bear's name, then we can conclude that it proceeds to the spot right after the whale.\nrule3() = first_letter(name(canary)) == first_letter(name(grizzly_bear)) => proceed(canary, spot_after(whale))\n\n# Rule1 is preferred over Rule2\npreferred_rule1_over_rule2() = True\n# Rule3 is preferred over Rule2\npreferred_rule3_over_rule2() = True\n\n# The current state of the game is as follows\n# The canary is named Paco\nname(canary) = \"Paco\"\n# The canary needs support from the hare\nneeds_support(canary, hare) = True\n# The grizzly bear is named Tarzan.\nname(grizzly_bear) = \"Tarzan\"\n\n# Based on the game state and the rules and preferences, does the canary proceed to the spot right after the whale?\nquestion = proceed(canary, spot_after(whale))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the spider, if it is a fan of Chris Ronaldo, then we can conclude that it gives a magnifying glass to the tilapia.\n\nThe current state of the game is as follows\nThe spider recently read a high-quality paper.\n\nBased on the game state and the rules and preferences, does the spider give a magnifier to the tilapia?\nQuestion: Does the spider give a magnifying glass to the tilapia?",
        "idx": 5,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the spider, if it is a fan of Chris Ronaldo, then we can conclude that it gives a magnifying glass to the tilapia.\nrule1() = fan_of(spider, Chris_Ronaldo) => give(spider, magnifying_glass, tilapia)\n\n# The current state of the game is as follows\n# The spider recently read a high-quality paper.\nrecently_read(spider, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the spider give a magnifier to the tilapia?\nquestion = give(spider, magnifying_glass, tilapia)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the tiger, if it has more than three friends, then we can conclude that it becomes an enemy of the cheetah.\n\nThe current state of the game is as follows\nThe tiger has 10 friends.\n\nBased on the game state and the rules and preferences, does the tiger become an enemy of the cheetah?\nQuestion: Does the tiger become an enemy of the cheetah?",
        "idx": 6,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the tiger, if it has more than three friends, then we can conclude that it becomes an enemy of the cheetah.\nrule1() = friends(tiger) > 3 => enemy(tiger, cheetah)\n\n# The current state of the game is as follows\n# The tiger has 10 friends.\nfriends(tiger) = 10\n\n# Based on the game state and the rules and preferences, does the tiger become an enemy of the cheetah?\nquestion = enemy(tiger, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the goldfish, if it has something to drink, then we can conclude that it does not owe money to the kudu.\nRule2: Regarding the goldfish, if it has a leafy green vegetable, then we can conclude that it does not owe money to the kudu.\n\nThe current state of the game is as follows\nThe goldfish has a banana-strawberry smoothie.\nThe goldfish has a love seat sofa.\n\nBased on the game state and the rules and preferences, does the goldfish owe money to the kudu?\nQuestion: Does the goldfish owe money to the kudu?",
        "idx": 7,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the goldfish, if it has something to drink, then we can conclude that it does not owe $$$ to the kudu\nrule1() = has(goldfish, drink) => not owe(goldfish, money, kudu)\n# Rule2: Regarding the goldfish, if it has a leafy green vegetable, then we can conclude that it does not owe $$$ to the kudu.\nrule2() = has(goldfish, leafy_green_vegetable) => not owe(goldfish, money, kudu)\n\n# The current state of the game is as follows\n# The goldfish has a banana-strawberry smoothie\nhas(goldfish, drink, banana_strawberry_smoothie) = True\n# The goldfish has a love seat sofa.\nhas(goldfish, love_seat_sofa) = True\n\n# Based on the game state and the rules and preferences, does the goldfish owe money to the kudu?\nquestion = owe(goldfish, money, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something proceeds to the spot that is right after the spot of the snail but does not eat the food of the whale because in this case it will, surely, sing a song of victory for the penguin (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe amberjack has a card that is violet in color.\nThe amberjack has a plastic bag.\nThe amberjack proceeds to the spot right after the snail.\nThe amberjack does not attack the green fields whose owner is the whale.\n\nBased on the game state and the rules and preferences, does the amberjack sing a victory song for the penguin?\nQuestion: Does the amberjack sing a victory song for the penguin?",
        "idx": 8,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something proceeds to the spot that is right after the spot of the snail but does not eat the food of the whale because in this case it will, surely, sing a song of victory for the penguin (this may or may not be problematic).\nrule1() = proceed_to_spot(amberjack, spot_after(snail)) & not eat_food(whale) => sing_victory_song(amberjack, penguin)\n\n# The current state of the game is as follows\n# The amberjack has a card that is violet in color\nhas_card(amberjack, violet) = True\n# The amberjack has a plastic bag\nhas_item(amberjack, plastic_bag) = True\n# The amberjack proceeds to the spot right after the snail\nproceed_to_spot(amberjack, spot_after(snail)) = True\n# The amberjack does not attack the green fields whose owner is the whale\nnot attack_fields(amberjack, green_fields, whale) = True\n\n# Based on the game state and the rules and preferences, does the amberjack sing a victory song for the penguin?\nquestion = sing_victory_song(amberjack, penguin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not attack the green fields of the black bear, then it does not prepare armor for the eel.\nRule2: Regarding the dog, if it has a card whose color starts with the letter \"w\", then we can conclude that it prepares armor for the eel.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe dog has a card that is white in color.\nThe dog does not attack the green fields whose owner is the black bear.\n\nBased on the game state and the rules and preferences, does the dog prepare armor for the eel?\nQuestion: Does the dog prepare armor for the eel?",
        "idx": 9,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not attack the green fields of the black bear, then it does not prepare armor for the eel\nrule1() = not attack(green_fields, black_bear) => not prepare_armor(something, eel)\n# Rule2: Regarding the dog, if it has a card whose color starts with the letter \"w\", then we can conclude that it prepares armor for the eel.\nrule2() = has_card(dog, card) & color_starts_with(card, \"w\") => prepare_armor(dog, eel)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2)\n\n# The current state of the game is as follows\n# The dog has a card that is white in color\nhas_card(dog, card) = True\ncolor(card, white) = True\n# The dog does not attack the green fields whose owner is the black bear.\nnot attack(green_fields, black_bear) = True\n\n# Based on the game state and the rules and preferences, does the dog prepare armor for the eel?\nquestion = prepare_armor(dog, eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the spider has a card whose color appears in the flag of Japan, then the spider does not owe money to the sea bass.\n\nThe current state of the game is as follows\nThe spider has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the spider owe money to the sea bass?\nQuestion: Does the spider owe money to the sea bass?",
        "idx": 10,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the spider has a card whose color appears in the flag of Japan, then the spider does not owe $$$ to the sea bass.\nrule1() = has_card(spider, card) & color(card) in flag_colors(Japan) => not owe(spider, money, sea_bass)\n\n# The current state of the game is as follows\n# The spider has a card that is white in color.\nhas_card(spider, card) = True\ncolor(card) = white\n\n# Based on the game state and the rules and preferences, does the spider owe money to the sea bass?\nquestion = owe(spider, money, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the turtle, if it owns a luxury aircraft, then we can conclude that it gives a magnifier to the grasshopper.\n\nThe current state of the game is as follows\nThe turtle stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the turtle give a magnifier to the grasshopper?\nQuestion: Does the turtle give a magnifier to the grasshopper?",
        "idx": 11,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the turtle, if it owns a luxury aircraft, then we can conclude that it gives a magnifier to the grasshopper.\nrule1() = owns(turtle, luxury_aircraft) => give(turtle, magnifier, grasshopper)\n\n# The current state of the game is as follows\n# The turtle stole a bike from the store.\nowns(turtle, bike) = True\n\n# Based on the game state and the rules and preferences, does the turtle give a magnifier to the grasshopper?\nquestion = give(turtle, magnifier, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the viperfish has fewer than 13 friends, then the viperfish winks at the halibut.\n\nThe current state of the game is as follows\nThe viperfish has eight friends.\n\nBased on the game state and the rules and preferences, does the viperfish wink at the halibut?\nQuestion: Does the viperfish wink at the halibut?",
        "idx": 12,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the viperfish has fewer than 13 friends, then the viperfish winks at the halibut.\nrule1() = friends(viperfish) < 13 => wink(viperfish, halibut)\n\n# The current state of the game is as follows\n# The viperfish has eight friends.\nfriends(viperfish) = 8\n\n# Based on the game state and the rules and preferences, does the viperfish wink at the halibut?\nquestion = wink(viperfish, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the gecko knocks down the fortress of the meerkat, then the meerkat is not going to give a magnifying glass to the donkey.\n\nThe current state of the game is as follows\nThe baboon is named Max.\nThe gecko knocks down the fortress of the meerkat.\nThe meerkat has a cello.\nThe meerkat is named Mojo.\n\nBased on the game state and the rules and preferences, does the meerkat give a magnifier to the donkey?\nQuestion: Does the meerkat give a magnifying glass to the donkey?",
        "idx": 13,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the gecko knocks down the fortress of the meerkat, then the meerkat is not going to give a magnifying glass to the donkey.\nrule1() = knocks_down(gecko, fortress, meerkat) => not give(magnifying_glass, meerkat, donkey)\n\n# The current state of the game is as follows\n# The baboon is named Max\nname(baboon) = \"Max\"\n# The gecko knocks down the fortress of the meerkat\nknocks_down(gecko, fortress, meerkat) = True\n# The meerkat has a cello\nhas(meerkat, cello) = True\n# The meerkat is named Mojo.\nname(meerkat) = \"Mojo\"\n\n# Based on the game state and the rules and preferences, does the meerkat give a magnifier to the donkey?\nquestion = give(magnifying_glass, meerkat, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish does not prepare armor for the bat however the meerkat knows the defensive plans of the bat, then the bat will not respect the panther.\nRule2: If at least one animal steals five of the points of the oscar, then the bat respects the panther.\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe meerkat knows the defensive plans of the bat.\nThe grizzly bear does not steal five points from the oscar.\n\nBased on the game state and the rules and preferences, does the bat respect the panther?\nQuestion: Does the bat respect the panther?",
        "idx": 14,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the blobfish does not prepare armor for the bat however the meerkat knows the defensive plans of the bat, then the bat will not respect the panther\nrule1() = not prepare_armor(blobfish, bat) & knows_defensive_plans(meerkat, bat) => not respect(bat, panther)\n\n# Rule2: If at least one animal steals five of the points of the oscar, then the bat respects the panther.\nrule2() = steal_points(animal, oscar, 5) => respect(bat, panther)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule2, rule1)\n\n# The current state of the game is as follows\n# The meerkat knows the defensive plans of the bat\nknows_defensive_plans(meerkat, bat) = True\n# The grizzly bear does not steal five points from the oscar.\nsteal_points(grizzly_bear, oscar, 5) = False\n\n# Based on the game state and the rules and preferences, does the bat respect the panther?\nquestion = respect(bat, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cricket has a device to connect to the internet, then the cricket sings a song of victory for the goldfish.\n\nThe current state of the game is as follows\nThe cricket has a cell phone.\n\nBased on the game state and the rules and preferences, does the cricket sing a victory song for the goldfish?\nQuestion: Does the cricket sing a victory song for the goldfish?",
        "idx": 15,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cricket has a device to connect to the internet, then the cricket sings a song of victory for the goldfish.\nrule1() = has_device(cricket, internet) => sing_victory_song(cricket, goldfish)\n\n# The current state of the game is as follows\n# The cricket has a cell phone.\nhas_device(cricket, cell_phone) = True\n\n# Based on the game state and the rules and preferences, does the cricket sing a victory song for the goldfish?\nquestion = sing_victory_song(cricket, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the cheetah, if it has a name whose first letter is the same as the first letter of the hummingbird's name, then we can conclude that it does not steal five of the points of the cat.\n\nThe current state of the game is as follows\nThe cheetah is named Lily.\nThe hummingbird is named Luna.\n\nBased on the game state and the rules and preferences, does the cheetah steal five points from the cat?\nQuestion: Does the cheetah steal five points from the cat?",
        "idx": 16,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cheetah, if it has a name whose first letter is the same as the first letter of the hummingbird's name, then we can conclude that it does not steal five of the points of the cat.\nrule1() = first_letter(cheetah) == first_letter(hummingbird) => not steal_points(cheetah, 5, cat)\n\n# The current state of the game is as follows\n# The cheetah is named Lily\nname(cheetah) = \"Lily\"\n# The hummingbird is named Luna.\nname(hummingbird) = \"Luna\"\n\n# Based on the game state and the rules and preferences, does the cheetah steal five points from the cat?\nquestion = steal_points(cheetah, 5, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: For the panda bear, if the belief is that the blobfish knocks down the fortress of the panda bear and the grizzly bear sings a song of victory for the panda bear, then you can add \"the panda bear owes money to the elephant\" to your conclusions.\nRule2: Regarding the panda bear, if it has difficulty finding food, then we can conclude that it does not owe money to the elephant.\nRule2 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe blobfish knocks down the fortress of the panda bear.\nThe grizzly bear steals five points from the panda bear.\n\nBased on the game state and the rules and preferences, does the panda bear owe money to the elephant?\nQuestion: Does the panda bear owe money to the elephant?",
        "idx": 17,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the panda bear, if the belief is that the blobfish knocks down the fortress of the panda bear and the grizzly bear sings a song of victory for the panda bear, then you can add \"the panda bear owes $$$ to the elephant\" to your conclusions\nrule1() = knock_down_fortress(blobfish, panda_bear) & sing_song_of_victory(grizzly_bear, panda_bear) => owe(panda_bear, money, elephant)\n\n# Rule2: Regarding the panda bear, if it has difficulty to find food, then we can conclude that it does not owe money to the elephant.\nrule2() = difficulty_finding_food(panda_bear) => not owe(panda_bear, money, elephant)\n\n# Rule2 is preferred over Rule1\npreferred_rule() = rule2()\n\n# The current state of the game is as follows\n# The blobfish knocks down the fortress of the panda bear\nknock_down_fortress(blobfish, panda_bear) = True\n# The grizzly bear steals five points from the panda bear.\nsteal_points(grizzly_bear, panda_bear, 5) = True\n\n# Based on the game state and the rules and preferences, does the panda bear owe money to the elephant?\nquestion = owe(panda_bear, money, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the canary has more than seven friends, then the canary eats the food that belongs to the amberjack.\nRule2: Regarding the canary, if it has a card whose color starts with the letter \"i\", then we can conclude that it does not eat the food that belongs to the amberjack.\nRule3: Regarding the canary, if it has a high salary, then we can conclude that it does not eat the food that belongs to the amberjack.\n\nRule2 is preferred over Rule1.\nRule3 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe canary has 17 friends.\nThe canary has a card that is violet in color.\n\nBased on the game state and the rules and preferences, does the canary eat the food of the amberjack?\nQuestion: Does the canary eat the food of the amberjack?",
        "idx": 18,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the canary has more than seven friends, then the canary eats the food that belongs to the amberjack\nrule1() = friends(canary) > 7 => eat_food(canary, amberjack)\n# Rule2: Regarding the canary, if it has a card whose color starts with the letter \"i\", then we can conclude that it does not eat the food that belongs to the amberjack\nrule2() = starts_with(color(card), \"i\") => not eat_food(canary, amberjack)\n# Rule3: Regarding the canary, if it has a high salary, then we can conclude that it does not eat the food that belongs to the amberjack.\nrule3() = has_high_salary(canary) => not eat_food(canary, amberjack)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2)\n# Rule3 is preferred over Rule1\npreferred_rule(rule1, rule3)\n\n# The current state of the game is as follows\n# The canary has 17 friends\nfriends(canary) = 17\n# The canary has a card that is violet in color.\ncolor(card, violet) = True\n\n# Based on the game state and the rules and preferences, does the canary eat the food of the amberjack?\nquestion = eat_food(canary, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the starfish has a card whose color is one of the rainbow colors, then the starfish does not need the support of the black bear.\n\nThe current state of the game is as follows\nThe starfish has a card that is red in color.\n\nBased on the game state and the rules and preferences, does the starfish need support from the black bear?\nQuestion: Does the starfish need support from the black bear?",
        "idx": 19,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the starfish has a card whose color is one of the rainbow colors, then the starfish does not need the support of the black bear.\nrule1() = has_card(starfish, color) & color in rainbow_colors => not need_support(starfish, black_bear)\n\n# The current state of the game is as follows\n# The starfish has a card that is red in color.\nhas_card(starfish, color) = True\ncolor(card, red) = True\n\n# Based on the game state and the rules and preferences, does the starfish need support from the black bear?\nquestion = need_support(starfish, black_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the zander, if it has a card whose color appears in the flag of France, then we can conclude that it eats the food of the swordfish.\n\nThe current state of the game is as follows\nThe zander has a card that is indigo in color.\n\nBased on the game state and the rules and preferences, does the zander eat the food of the swordfish?\nQuestion: Does the zander eat the food of the swordfish?",
        "idx": 20,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the zander, if it has a card whose color appears in the flag of France, then we can conclude that it eats the food of the swordfish.\nrule1() = has_card(zander, card) & color(card) in flag_colors(France) => eat_food(zander, swordfish)\n\n# The current state of the game is as follows\n# The zander has a card that is indigo in color.\nhas_card(zander, card) = True\ncolor(card, indigo) = True\n\n# Based on the game state and the rules and preferences, does the zander eat the food of the swordfish?\nquestion = eat_food(zander, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the donkey knows the defensive plans of the eel and the panda bear does not learn elementary resource management from the eel, then, inevitably, the eel steals five points from the grasshopper.\n\nThe current state of the game is as follows\nThe donkey knows the defensive plans of the eel.\nThe kangaroo knows the defensive plans of the raven.\nThe panda bear does not learn the basics of resource management from the eel.\n\nBased on the game state and the rules and preferences, does the eel steal five points from the grasshopper?\nQuestion: Does the eel steal five points from the grasshopper?",
        "idx": 21,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the donkey knows the defensive plans of the eel and the panda bear does not learn elementary resource management from the eel, then, inevitably, the eel steals five points from the grasshopper.\nrule1() = knows(defensive_plans, donkey, eel) & not learn_resource_management(panda_bear, eel) => steal_points(eel, 5, grasshopper)\n\n# The current state of the game is as follows\n# The donkey knows the defensive plans of the eel\nknows(defensive_plans, donkey, eel) = True\n# The kangaroo knows the defensive plans of the raven\nknows(defensive_plans, kangaroo, raven) = True\n# The panda bear does not learn the basics of resource management from the eel.\nnot learn_resource_management(panda_bear, eel) = True\n\n# Based on the game state and the rules and preferences, does the eel steal five points from the grasshopper?\nquestion = steal_points(eel, 5, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the swordfish, if it has a name whose first letter is the same as the first letter of the whale's name, then we can conclude that it does not raise a flag of peace for the gecko.\n\nThe current state of the game is as follows\nThe swordfish has a card that is orange in color, and is named Blossom.\nThe swordfish hates \"Chris Ronaldo\".\nThe name of the whale is \"Bella\".\n\nBased on the game state and the rules and preferences, does the swordfish raise a peace flag for the gecko?\nQuestion: Does the swordfish raise a peace flag for the gecko?",
        "idx": 22,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the swordfish, if it has a name whose first letter is the same as the first letter of the whale's name, then we can conclude that it does not raise a flag of peace for the gecko.\nrule1() = first_letter(name(swordfish)) == first_letter(name(whale)) => not raise_flag_of_peace(swordfish, gecko)\n\n# The current state of the game is as follows\n# The swordfish has a card that is orange in color, and is named Blossom\ncolor(card(swordfish), orange) = True\nname(swordfish) = \"Blossom\"\nhates(swordfish, \"Chris Ronaldo\") = True\nname(whale) = \"Bella\"\n\n# Based on the game state and the rules and preferences, does the swordfish raise a peace flag for the gecko?\nquestion = raise_flag_of_peace(swordfish, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the canary purchased a time machine, then the canary does not roll the dice for the lobster.\nRule2: The canary rolls the dice for the lobster whenever at least one animal rolls the dice for the eagle.\nRule3: If the canary has fewer than 17 friends, then we can conclude that it does not roll the dice for the lobster.\n\nRule2 is preferred over Rule1\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe canary purchased a time machine.\nThe aardvark does not roll the dice for the eagle.\n\nBased on the game state and the rules and preferences, does the canary roll the dice for the lobster?\nQuestion: Does the canary roll the dice for the lobster?",
        "idx": 23,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the canary purchased a time machine, then the canary does not roll the dice for the lobster\nrule1() = purchased_time_machine(canary) => not roll_dice(canary, lobster)\n# Rule2: The canary rolls the dice for the lobster whenever at least one animal rolls the dice for the eagle\nrule2() = exists animal: roll_dice(animal, eagle) => roll_dice(canary, lobster)\n# Rule3: Regarding the canary, if it has fewer than 17 friends, then we can conclude that it does not roll the dice for the lobster.\nrule3() = friends(canary) < 17 => not roll_dice(canary, lobster)\n\n# Rule2 is preferred over Rule1\npreferred(rule2, rule1)\n# Rule2 is preferred over Rule3\npreferred(rule2, rule3)\n\n# The current state of the game is as follows\n# The canary invented a time machine\npurchased_time_machine(canary) = True\n# The aardvark does not roll the dice for the eagle.\nroll_dice(aardvark, eagle) = False\n\n# Based on the game state and the rules and preferences, does the canary roll the dice for the lobster?\nquestion = roll_dice(canary, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grizzly bear has a card with a primary color, then the grizzly bear learns elementary resource management from the jellyfish.\n\nThe current state of the game is as follows\nThe grizzly bear has a card that is red in color.\n\nBased on the game state and the rules and preferences, does the grizzly bear learn the basics of resource management from the jellyfish?\nQuestion: Does the grizzly bear learn the basics of resource management from the jellyfish?",
        "idx": 24,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grizzly bear has a card with a primary color, then the grizzly bear learns elementary resource management from the jellyfish.\nrule1() = has_card(grizzly_bear, primary_color) => learn_resource_management(grizzly_bear, jellyfish)\n\n# The current state of the game is as follows\n# The grizzly bear has a card that is red in color.\nhas_card(grizzly_bear, red) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear learn the basics of resource management from the jellyfish?\nquestion = learn_resource_management(grizzly_bear, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hummingbird has access to an abundance of food, then the hummingbird does not remove one of the pieces of the halibut.\nRule2: If the hummingbird has a musical instrument, then the hummingbird removes from the board one of the pieces of the halibut.\nRule3: If the hummingbird has fewer than ten friends, then the hummingbird removes from the board one of the pieces of the halibut.\nRule4: If the hummingbird has a name whose first letter is the same as the first letter of the moose's name, then we can conclude that it does not remove one of the pieces of the halibut.\n\nRule2 is preferred over Rule1.\nRule2 is preferred over Rule4.\nRule3 is preferred over Rule1.\nRule3 is preferred over Rule4.\n\nThe current state of the game is as follows\nThe hummingbird has a plastic bag.\nThe hummingbird is named Max, and struggles to find food.\nThe moose is named Milo.\n\nBased on the game state and the rules and preferences, does the hummingbird remove from the board one of the pieces of the halibut?\nQuestion: Does the hummingbird remove from the board one of the pieces of the halibut?",
        "idx": 25,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hummingbird has access to an abundance of food, then the hummingbird does not remove one of the pieces of the halibut\nrule1() = access_food(hummingbird) => not remove_piece(hummingbird, halibut)\n# Rule2: If the hummingbird has a musical instrument, then the hummingbird removes from the board one of the pieces of the halibut\nrule2() = has_instrument(hummingbird) => remove_piece(hummingbird, halibut)\n# Rule3: If the hummingbird has fewer than ten friends, then the hummingbird removes from the board one of the pieces of the halibut\nrule3() = friends(hummingbird) < 10 => remove_piece(hummingbird, halibut)\n# Rule4: Regarding the hummingbird, if it has a name whose first letter is the same as the first letter of the moose's name, then we can conclude that it does not remove one of the pieces of the halibut.\nrule4() = first_letter(hummingbird.name) == first_letter(moose.name) => not remove_piece(hummingbird, halibut)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2)\n# Rule2 is preferred over Rule4\npreferred_rule(rule4, rule2)\n# Rule3 is preferred over Rule1\npreferred_rule(rule1, rule3)\n# Rule3 is preferred over Rule4\npreferred_rule(rule4, rule3)\n\n# The current state of the game is as follows\n# The hummingbird has a plastic bag\nhas_instrument(hummingbird) = False\n# The hummingbird is named Max, and struggles to find food\naccess_food(hummingbird) = False\n# The moose is named Milo.\n\n# Based on the game state and the rules and preferences, does the hummingbird remove from the board one of the pieces of the halibut?\nquestion = remove_piece(hummingbird, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cow has a card whose color is one of the rainbow colors, then the cow offers a job position to the hare.\n\nThe current state of the game is as follows\nThe cow has a card that is black in color.\n\nBased on the game state and the rules and preferences, does the cow offer a job to the hare?\nQuestion: Does the cow offer a job to the hare?",
        "idx": 26,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cow has a card whose color is one of the rainbow colors, then the cow offers a job position to the hare.\nrule1() = has_card(cow) & color(card(cow)) in rainbow_colors => offer_job_position(cow, hare)\n\n# The current state of the game is as follows\n# The cow has a card that is black in color.\nhas_card(cow) = True\ncolor(card(cow)) = black\n\n# Based on the game state and the rules and preferences, does the cow offer a job to the hare?\nquestion = offer_job_position(cow, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose has a name whose first letter is the same as the first letter of the amberjack's name, then the moose gives a magnifier to the polar bear.\nRule2: Regarding the moose, if it has a card whose color is one of the rainbow colors, then we can conclude that it gives a magnifying glass to the polar bear.\n\nThe current state of the game is as follows\nThe amberjack is named Milo.\nThe moose has a card that is black in color, and is named Mojo.\n\nBased on the game state and the rules and preferences, does the moose give a magnifier to the polar bear?\nQuestion: Does the moose give a magnifier to the polar bear?",
        "idx": 27,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the moose has a name whose first letter is the same as the first letter of the amberjack's name, then the moose gives a magnifier to the polar bear\nrule1() = first_letter(name(moose)) == first_letter(name(amberjack)) => give(moose, magnifier, polar_bear)\n# Rule2: Regarding the moose, if it has a card whose color is one of the rainbow colors, then we can conclude that it gives a magnifying glass to the polar bear.\nrule2() = has(moose, card) and color(card) in rainbow_colors => give(moose, magnifying_glass, polar_bear)\n\n# The current state of the game is as follows\n# The amberjack is named Milo\nname(amberjack) = \"Milo\"\n# The moose has a card that is black in color, and is named Mojo.\nhas(moose, card) = True\ncolor(card, black) = True\nname(moose) = \"Mojo\"\n\n# Based on the game state and the rules and preferences, does the moose give a magnifier to the polar bear?\nquestion = give(moose, magnifier, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the black bear, if it has fewer than 1 friend, then we can conclude that it does not steal five points from the ferret.\nRule2: If the black bear has a card whose color is one of the rainbow colors, then the black bear does not steal five of the points of the ferret.\n\nThe current state of the game is as follows\nThe black bear has 9 friends and has a card that is yellow in color.\nThe lobster attacks the green fields whose owner is the black bear.\n\nBased on the game state and the rules and preferences, does the black bear steal five points from the ferret?\nQuestion: Does the black bear steal five points from the ferret?",
        "idx": 28,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the black bear, if it has fewer than 1 friend, then we can conclude that it does not steal five points from the ferret\nrule1() = friends(black_bear) < 1 => not steal_points(black_bear, 5, ferret)\n# Rule2: If the black bear has a card whose color is one of the rainbow colors, then the black bear does not steal five of the points of the ferret.\nrule2() = has(black_bear, card) and color(card) in rainbow_colors => not steal_points(black_bear, 5, ferret)\n\n# The current state of the game is as follows\n# The black bear has 9 friends, and has a card that is yellow in color\nfriends(black_bear) = 9\nhas(black_bear, card) = True\ncolor(card, yellow) = True\n# The lobster attacks the green fields whose owner is the black bear.\nattacks(lobster, green_fields, black_bear) = True\n\n# Based on the game state and the rules and preferences, does the black bear steal five points from the ferret?\nquestion = steal_points(black_bear, 5, ferret)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cow proceeds to the spot right after the lobster, then the lobster is not going to give a magnifier to the eagle.\nRule2: The lobster unquestionably gives a magnifying glass to the eagle, in the case where the elephant winks at the lobster.\nRule2 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe elephant learns the basics of resource management from the lobster.\nThe cow does not proceed to the spot right after the lobster.\n\nBased on the game state and the rules and preferences, does the lobster give a magnifier to the eagle?\nQuestion: Does the lobster give a magnifier to the eagle?",
        "idx": 29,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cow proceeds to the spot right after the lobster, then the lobster is not going to give a magnifier to the eagle\nrule1() = proceed_to_spot(cow, lobster) => not give_magnifier(lobster, eagle)\n\n# Rule2: The lobster unquestionably gives a magnifying glass to the eagle, in the case where the elephant winks at the lobster.\nrule2() = wink(elephant, lobster) => give_magnifier(lobster, eagle)\n\n# Rule2 is preferred over Rule1\npreferred_rule() = rule2()\n\n# The current state of the game is as follows\n# The elephant learns the basics of resource management from the lobster\nlearn_basics(elephant, resource_management, lobster) = True\n# The cow does not proceed to the spot right after the lobster.\nproceed_to_spot(cow, lobster) = False\n\n# Based on the game state and the rules and preferences, does the lobster give a magnifier to the eagle?\nquestion = give_magnifier(lobster, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The grizzly bear rolls the dice for the cockroach whenever at least one animal offers a job position to the oscar.\n\nThe current state of the game is as follows\nThe salmon offers a job to the oscar.\n\nBased on the game state and the rules and preferences, does the grizzly bear roll the dice for the cockroach?\nQuestion: Does the grizzly bear roll the dice for the cockroach?",
        "idx": 30,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The grizzly bear rolls the dice for the cockroach whenever at least one animal offers a job position to the oscar.\nrule1() = offer_job_position(animal, oscar) => roll_dice(grizzly_bear, cockroach)\n\n# The current state of the game is as follows\n# The salmon offers a job to the oscar.\noffer_job_position(salmon, oscar) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear roll the dice for the cockroach?\nquestion = roll_dice(grizzly_bear, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the carp has a musical instrument, then the carp does not proceed to the spot right after the grizzly bear.\n\nThe current state of the game is as follows\nThe carp has a guitar.\n\nBased on the game state and the rules and preferences, does the carp proceed to the spot right after the grizzly bear?\nQuestion: Does the carp proceed to the spot right after the grizzly bear?",
        "idx": 31,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the carp has a musical instrument, then the carp does not proceed to the spot right after the grizzly bear.\nrule1() = has(carp, musical_instrument) => not proceed_to_spot(carp, right_after, grizzly_bear)\n\n# The current state of the game is as follows\n# The carp has a guitar.\nhas(carp, guitar) = True\n\n# Based on the game state and the rules and preferences, does the carp proceed to the spot right after the grizzly bear?\nquestion = proceed_to_spot(carp, right_after, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the penguin, if it has access to an abundance of food, then we can conclude that it proceeds to the spot that is right after the spot of the lion.\nRule2: If the penguin has a card whose color appears in the flag of France, then the penguin proceeds to the spot that is right after the spot of the lion.\n\nThe current state of the game is as follows\nThe penguin has 11 friends.\nThe penguin has a card that is black in color.\nThe penguin struggles to find food.\n\nBased on the game state and the rules and preferences, does the penguin proceed to the spot right after the lion?\nQuestion: Does the penguin proceed to the spot right after the lion?",
        "idx": 32,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the penguin, if it has access to an abundance of food, then we can conclude that it proceeds to the spot that is right after the spot of the lion\nrule1() = access_food(penguin) => proceed_to_spot(penguin, right_after, lion)\n# Rule2: If the penguin has a card whose color appears in the flag of France, then the penguin proceeds to the spot that is right after the spot of the lion.\nrule2() = has(penguin, card) and color(card) in flag_colors(France) => proceed_to_spot(penguin, right_after, lion)\n\n# The current state of the game is as follows\n# The penguin has 11 friends\nfriends(penguin) = 11\n# The penguin has a card that is black in color\nhas(penguin, card) = True\ncolor(card, black) = True\n# The penguin struggles to find food.\nstruggles_to_find_food(penguin) = True\n\n# Based on the game state and the rules and preferences, does the penguin proceed to the spot right after the lion?\nquestion = proceed_to_spot(penguin, right_after, lion)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something holds the same number of points as the goldfish, then it knocks down the fortress of the eagle, too.\n\nThe current state of the game is as follows\nThe tilapia holds the same number of points as the goldfish.\n\nBased on the game state and the rules and preferences, does the tilapia knock down the fortress of the eagle?\nQuestion: Does the tilapia knock down the fortress of the eagle?",
        "idx": 33,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something holds the same number of points as the goldfish, then it knocks down the fortress of the eagle, too.\nrule1() = points(something) == points(goldfish) => knock_down_fortress(something, eagle)\n\n# The current state of the game is as follows\n# The tilapia holds the same number of points as the goldfish.\npoints(tilapia) == points(goldfish) = True\n\n# Based on the game state and the rules and preferences, does the tilapia knock down the fortress of the eagle?\nquestion = knock_down_fortress(tilapia, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hippopotamus has fewer than eleven friends, then the hippopotamus does not sing a song of victory for the jellyfish.\n\nThe current state of the game is as follows\nThe hippopotamus has eight friends.\n\nBased on the game state and the rules and preferences, does the hippopotamus sing a victory song for the jellyfish?\nQuestion: Does the hippopotamus sing a victory song for the jellyfish?",
        "idx": 34,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hippopotamus has fewer than eleven friends, then the hippopotamus does not sing a song of victory for the jellyfish.\nrule1() = friends(hippopotamus) < 11 => not sing_song_of_victory(hippopotamus, jellyfish)\n\n# The current state of the game is as follows\n# The hippopotamus has eight friends.\nfriends(hippopotamus) = 8\n\n# Based on the game state and the rules and preferences, does the hippopotamus sing a victory song for the jellyfish?\nquestion = sing_song_of_victory(hippopotamus, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the leopard has something to sit on, then the leopard respects the lobster.\n\nThe current state of the game is as follows\nThe leopard has a guitar.\n\nBased on the game state and the rules and preferences, does the leopard respect the lobster?\nQuestion: Does the leopard respect the lobster?",
        "idx": 35,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the leopard has something to sit on, then the leopard respects the lobster.\nrule1() = has_something_to_sit_on(leopard) => respect(leopard, lobster)\n\n# The current state of the game is as follows\n# The leopard has a guitar.\nhas_something_to_sit_on(leopard) = True\n\n# Based on the game state and the rules and preferences, does the leopard respect the lobster?\nquestion = respect(leopard, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals holds the same number of points as the black bear, you can be certain that it will also prepare armor for the donkey.\n\nThe current state of the game is as follows\nThe eagle has a card that is black in color.\nThe eagle has six friends, and holds the same number of points as the black bear.\n\nBased on the game state and the rules and preferences, does the eagle prepare armor for the donkey?\nQuestion: Does the eagle prepare armor for the donkey?",
        "idx": 36,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals holds the same number of points as the black bear, you can be certain that it will also prepare armor for the donkey.\nrule1() = holds_same_points(animal, black_bear) => prepare_armor(animal, donkey)\n\n# The current state of the game is as follows\n# The eagle has a card that is black in color\ncolor_card(eagle, black) = True\n# The eagle has six friends, and holds the same number of points as the black bear.\nfriends(eagle) = 6\nholds_same_points(eagle, black_bear) = True\n\n# Based on the game state and the rules and preferences, does the eagle prepare armor for the donkey?\nquestion = prepare_armor(eagle, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something becomes an enemy of the rabbit but does not offer a job to the cheetah because in this case it will, surely, learn the basics of resource management from the blobfish (this may or may not be problematic)\nRule2: If the cricket has a musical instrument, then the cricket does not learn the basics of resource management from the blobfish.\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cricket becomes an enemy of the rabbit.\nThe cricket has a trumpet.\nThe cricket does not offer a job to the cheetah.\n\nBased on the game state and the rules and preferences, does the cricket learn the basics of resource management from the blobfish?\nQuestion: Does the cricket learn the basics of resource management from the blobfish?",
        "idx": 37,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something becomes an enemy of the rabbit but does not offer a job to the cheetah because in this case it will, surely, learn the basics of resource management from the blobfish (this may or may not be problematic)\nrule1() = enemy(rabbit, something) & not offer_job_position(something, cheetah) => learn_basics_of_resource_management(something, blobfish)\n\n# Rule2: If the cricket has a musical instrument, then the cricket does not learn the basics of resource management from the blobfish.\nrule2() = has(cricket, musical_instrument) => not learn_basics_of_resource_management(cricket, blobfish)\n\n# Rule2 is preferred over Rule1\npreferred_rule() = rule2()\n\n# The current state of the game is as follows\n# The cricket becomes an enemy of the rabbit\nenemy(rabbit, cricket) = True\n# The cricket has a trumpet\nhas(cricket, trumpet) = True\n# The cricket does not offer a job to the cheetah.\noffer_job_position(cricket, cheetah) = False\n\n# Based on the game state and the rules and preferences, does the cricket learn the basics of resource management from the blobfish?\nquestion = learn_basics_of_resource_management(cricket, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the spider is a fan of Chris Ronaldo, then the spider sings a victory song for the panda bear.\n\nThe current state of the game is as follows\nThe spider purchased a luxury aircraft.\n\nBased on the game state and the rules and preferences, does the spider sing a victory song for the panda bear?\nQuestion: Does the spider sing a victory song for the panda bear?",
        "idx": 38,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the spider is a fan of Chris Ronaldo, then the spider sings a victory song for the panda bear.\nrule1() = fan_of(spider, Chris_Ronaldo) => sing_victory_song(spider, panda_bear)\n\n# The current state of the game is as follows\n# The spider purchased a luxury aircraft.\npurchased(spider, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the spider sing a victory song for the panda bear?\nquestion = sing_victory_song(spider, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the pig has published a high-quality paper, then the pig sings a victory song for the tiger.\nRule2: If the pig has a sharp object, then we can conclude that it sings a victory song for the tiger.\n\nThe current state of the game is as follows\nThe pig has a knife.\nThe pig recently read a high-quality paper.\n\nBased on the game state and the rules and preferences, does the pig sing a victory song for the tiger?\nQuestion: Does the pig sing a victory song for the tiger?",
        "idx": 39,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the pig has published a high-quality paper, then the pig sings a victory song for the tiger\nrule1() = publish_paper(pig, high_quality) => sing_victory_song(pig, tiger)\n# Rule2: Regarding the pig, if it has a sharp object, then we can conclude that it sings a victory song for the tiger.\nrule2() = has(pig, sharp_object) => sing_victory_song(pig, tiger)\n\n# The current state of the game is as follows\n# The pig has a knife\nhas(pig, knife) = True\n# The pig recently read a high-quality paper.\nrecently_read(pig, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the pig sing a victory song for the tiger?\nquestion = sing_victory_song(pig, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the tilapia, if it has more than three friends, then we can conclude that it does not raise a peace flag for the sea bass.\nRule2: If the tilapia does not have her keys, then the tilapia does not raise a peace flag for the sea bass.\n\nThe current state of the game is as follows\nThe tilapia has five friends.\nThe tilapia is holding her keys.\n\nBased on the game state and the rules and preferences, does the tilapia raise a peace flag for the sea bass?\nQuestion: Does the tilapia raise a peace flag for the sea bass?",
        "idx": 40,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the tilapia, if it has more than three friends, then we can conclude that it does not raise a peace flag for the sea bass\nrule1() = friends(tilapia) > 3 => not raise_flag_of_peace(tilapia, sea_bass)\n# Rule2: If the tilapia does not have her keys, then the tilapia does not raise a peace flag for the sea bass.\nrule2() = not have_keys(tilapia) => not raise_flag_of_peace(tilapia, sea_bass)\n\n# The current state of the game is as follows\n# The tilapia has five friends\nfriends(tilapia) = 5\n# The tilapia is holding her keys.\nhave_keys(tilapia) = True\n\n# Based on the game state and the rules and preferences, does the tilapia raise a peace flag for the sea bass?\nquestion = raise_flag_of_peace(tilapia, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the wolverine offers a job position to the squid and the raven steals five points from the squid, then the squid gives a magnifying glass to the aardvark.\n\nThe current state of the game is as follows\nThe raven steals five points from the squid.\nThe wolverine does not offer a job to the squid.\n\nBased on the game state and the rules and preferences, does the squid give a magnifying glass to the aardvark?\nQuestion: Does the squid give a magnifying glass to the aardvark?",
        "idx": 41,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the wolverine offers a job position to the squid and the raven steals five points from the squid, then the squid gives a magnifying glass to the aardvark.\nrule1() = offer_job_position(wolverine, squid) & steal_points(raven, squid, 5) => give_item(squid, magnifying_glass, aardvark)\n\n# The current state of the game is as follows\n# The raven steals five points from the squid\nsteal_points(raven, squid, 5) = True\n# The wolverine does not offer a job to the squid.\noffer_job_position(wolverine, squid) = False\n\n# Based on the game state and the rules and preferences, does the squid give a magnifying glass to the aardvark?\nquestion = give_item(squid, magnifying_glass, aardvark)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the oscar, if it has something to drink, then we can conclude that it gives a magnifying glass to the phoenix.\nRule2: Regarding the oscar, if it has fewer than 12 friends, then we can conclude that it gives a magnifying glass to the phoenix.\n\nThe current state of the game is as follows\nThe oscar has a flute.\nThe oscar has three friends.\n\nBased on the game state and the rules and preferences, does the oscar give a magnifier to the phoenix?\nQuestion: Does the oscar give a magnifying glass to the phoenix?",
        "idx": 42,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the oscar, if it has something to drink, then we can conclude that it gives a magnifying glass to the phoenix\nrule1() = has(oscar, drink) => give(oscar, magnifying_glass, phoenix)\n# Rule2: Regarding the oscar, if it has fewer than 12 friends, then we can conclude that it gives a magnifying glass to the phoenix.\nrule2() = friends(oscar) < 12 => give(oscar, magnifying_glass, phoenix)\n\n# The current state of the game is as follows\n# The oscar has a flute\nhas(oscar, flute) = True\n# The oscar has three friends.\nfriends(oscar) = 3\n\n# Based on the game state and the rules and preferences, does the oscar give a magnifier to the phoenix?\nquestion = give(oscar, magnifying_glass, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the cat, if it killed the mayor, then we can conclude that it does not need the support of the squirrel.\n\nThe current state of the game is as follows\nThe cat assassinated the mayor.\nThe cat has 17 friends.\nThe cat has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the cat need support from the squirrel?\nQuestion: Does the cat need support from the squirrel?",
        "idx": 43,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cat, if it killed the mayor, then we can conclude that it does not need the support of the squirrel.\nrule1() = assassinated(cat, mayor) => not need_support(cat, squirrel)\n\n# The current state of the game is as follows\n# The cat assassinated the mayor\nassassinated(cat, mayor) = True\n# The cat has 17 friends\nfriends(cat) = 17\n# The cat has a card that is white in color\nhas_card(cat, white) = True\n\n# Based on the game state and the rules and preferences, does the cat need support from the squirrel?\nquestion = need_support(cat, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the oscar does not remove from the board one of the pieces of the cricket, then the cricket learns the basics of resource management from the canary.\n\nThe current state of the game is as follows\nThe oscar removes from the board one of the pieces of the cricket.\n\nBased on the game state and the rules and preferences, does the cricket learn the basics of resource management from the canary?\nQuestion: Does the cricket learn the basics of resource management from the canary?",
        "idx": 44,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the oscar does not remove from the board one of the pieces of the cricket, then the cricket learns the basics of resource management from the canary.\nrule1() = not remove_piece(oscar, cricket) => learn_basics(cricket, resource_management, canary)\n\n# The current state of the game is as follows\n# The oscar removes from the board one of the pieces of the cricket.\nremove_piece(oscar, cricket) = True\n\n# Based on the game state and the rules and preferences, does the cricket learn the basics of resource management from the canary?\nquestion = learn_basics(cricket, resource_management, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the oscar, if it has a device to connect to the internet, then we can conclude that it eats the food of the moose.\n\nThe current state of the game is as follows\nThe oscar has a computer.\n\nBased on the game state and the rules and preferences, does the oscar eat the food of the moose?\nQuestion: Does the oscar eat the food of the moose?",
        "idx": 45,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the oscar, if it has a device to connect to the internet, then we can conclude that it eats the food of the moose.\nrule1() = has_device(oscar, internet) => eat_food(oscar, moose)\n\n# The current state of the game is as follows\n# The oscar has a computer.\nhas_device(oscar, computer) = True\n\n# Based on the game state and the rules and preferences, does the oscar eat the food of the moose?\nquestion = eat_food(oscar, moose)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo has fewer than fifteen friends, then the kangaroo does not sing a victory song for the viperfish.\n\nThe current state of the game is as follows\nThe kangaroo has four friends that are playful and six friends that are not playful, and does not attack the green fields whose owner is the tilapia.\nThe kangaroo proceeds to the spot right after the cow.\n\nBased on the game state and the rules and preferences, does the kangaroo sing a victory song for the viperfish?\nQuestion: Does the kangaroo sing a victory song for the viperfish?",
        "idx": 46,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kangaroo has fewer than fifteen friends, then the kangaroo does not sing a victory song for the viperfish.\nrule1() = friends(kangaroo) < 15 => not sing_victory_song(kangaroo, viperfish)\n\n# The current state of the game is as follows\n# The kangaroo has four friends that are playful and 6 friends that are not, and does not attack the green fields whose owner is the tilapia\nfriends(kangaroo, playful) = 4\nfriends(kangaroo, not_playful) = 6\nnot attack(kangaroo, green_fields, owner(tilapia)) = True\nkangaroo_proceeds_to(cow, spot_right_after) = True\n\n# Based on the game state and the rules and preferences, does the kangaroo sing a victory song for the viperfish?\nquestion = sing_victory_song(kangaroo, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not burn the warehouse of the zander, then it removes from the board one of the pieces of the parrot\nRule2: If the squid has something to drink, then the squid does not remove one of the pieces of the parrot.\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe squid does not show all her cards to the zander.\n\nBased on the game state and the rules and preferences, does the squid remove from the board one of the pieces of the parrot?\nIf the squid has something to drink, then the squid does not remove one of the pieces of the parrot. Otherwise, if something does not burn the warehouse of the zander, then it removes from the board one of the pieces of the parrot. Rule2 is preferred over Rule1.\n\nQuestion: Does the squid remove from the board one of the pieces of the parrot?",
        "idx": 47,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not burn the warehouse of the zander, then it removes from the board one of the pieces of the parrot\nrule1() = not burn_warehouse(something, zander) => remove_piece(parrot)\n# Rule2: If the squid has something to drink, then the squid does not remove one of the pieces of the parrot.\nrule2() = has_drink(squid, something) => not remove_piece(parrot)\n\n# Rule2 is preferred over Rule1\n\n# The current state of the game is as follows\n# The squid does not show all her cards to the zander.\nshow_all_cards(squid, zander) = False\n\n# Based on the game state and the rules and preferences, does the squid remove from the board one of the pieces of the parrot?\nif has_drink(squid, something):\n    remove_parrot = False\nelse:\n    if not burn_warehouse(something, zander):\n        remove_parrot = True\n    else:\n        remove_parrot = False\n\nquestion = remove_parrot"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The viperfish unquestionably raises a peace flag for the lobster, in the case where the sun bear removes from the board one of the pieces of the viperfish.\n\nThe current state of the game is as follows\nThe sun bear removes from the board one of the pieces of the viperfish.\n\nBased on the game state and the rules and preferences, does the viperfish raise a peace flag for the lobster?\nQuestion: Does the viperfish raise a peace flag for the lobster?",
        "idx": 48,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The viperfish unquestionably raises a peace flag for the lobster, in the case where the sun bear removes from the board one of the pieces of the viperfish.\nrule1() = remove_piece(sun_bear, viperfish) => raise_flag_of_peace(viperfish, lobster)\n\n# The current state of the game is as follows\n# The sun bear removes from the board one of the pieces of the viperfish.\nremove_piece(sun_bear, viperfish) = True\n\n# Based on the game state and the rules and preferences, does the viperfish raise a peace flag for the lobster?\nquestion = raise_flag_of_peace(viperfish, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the goldfish has a name whose first letter is the same as the first letter of the cheetah's name, then the goldfish does not burn the warehouse that is in possession of the eel.\n\nThe current state of the game is as follows\nThe cheetah is named Meadow.\nThe goldfish is named Max.\n\nBased on the game state and the rules and preferences, does the goldfish burn the warehouse of the eel?\nQuestion: Does the goldfish burn the warehouse that is in possession of the eel?",
        "idx": 49,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the goldfish has a name whose first letter is the same as the first letter of the cheetah's name, then the goldfish does not burn the warehouse that is in possession of the eel.\nrule1() = first_letter(name(goldfish)) == first_letter(name(cheetah)) => not burn_warehouse(goldfish, eel)\n\n# The current state of the game is as follows\n# The cheetah is named Meadow\nname(cheetah) = \"Meadow\"\n# The goldfish is named Max.\nname(goldfish) = \"Max\"\n\n# Based on the game state and the rules and preferences, does the goldfish burn the warehouse of the eel?\nquestion = burn_warehouse(goldfish, eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the jellyfish winks at the caterpillar and the raven knocks down the fortress that belongs to the caterpillar, then the caterpillar attacks the green fields whose owner is the baboon.\n\nThe current state of the game is as follows\nThe raven knocks down the fortress of the caterpillar.\nThe jellyfish does not wink at the caterpillar.\n\nBased on the game state and the rules and preferences, does the caterpillar attack the green fields whose owner is the baboon?\nQuestion: Does the caterpillar attack the green fields whose owner is the baboon?",
        "idx": 50,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the jellyfish winks at the caterpillar and the raven knocks down the fortress that belongs to the caterpillar, then the caterpillar attacks the green fields whose owner is the baboon.\nrule1() = wink(jellyfish, caterpillar) & knock_down(raven, fortress, caterpillar) => attack(caterpillar, green_fields, baboon)\n\n# The current state of the game is as follows\n# The raven knocks down the fortress of the caterpillar\nknock_down(raven, fortress, caterpillar) = True\n# The jellyfish does not wink at the caterpillar.\nwink(jellyfish, caterpillar) = False\n\n# Based on the game state and the rules and preferences, does the caterpillar attack the green fields whose owner is the baboon?\nquestion = attack(caterpillar, green_fields, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cockroach removes one of the pieces of the tilapia whenever at least one animal proceeds to the spot right after the aardvark.\n\nThe current state of the game is as follows\nThe squirrel proceeds to the spot right after the aardvark.\n\nBased on the game state and the rules and preferences, does the cockroach remove from the board one of the pieces of the tilapia?\nQuestion: Does the cockroach remove from the board one of the pieces of the tilapia?",
        "idx": 51,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cockroach removes one of the pieces of the tilapia whenever at least one animal proceeds to the spot right after the aardvark.\nrule1() = proceed_to_spot(animal) == spot_after(aardvark) => remove_piece(cockroach, tilapia)\n\n# The current state of the game is as follows\n# The squirrel proceeds to the spot right after the aardvark.\nproceed_to_spot(squirrel) == spot_after(aardvark) = True\n\n# Based on the game state and the rules and preferences, does the cockroach remove from the board one of the pieces of the tilapia?\nquestion = remove_piece(cockroach, tilapia)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale winks at the amberjack, then the amberjack is not going to raise a flag of peace for the sea bass.\nRule2: If the amberjack has fewer than five friends, then the amberjack raises a peace flag for the sea bass.\nRule3: If the amberjack killed the mayor, then the amberjack raises a flag of peace for the sea bass.\n\nRule2 is preferred over Rule1\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe amberjack has four playful friends and four non-playful friends.\nThe whale winks at the amberjack.\n\nBased on the game state and the rules and preferences, does the amberjack raise a peace flag for the sea bass?\nQuestion: Does the amberjack raise a peace flag for the sea bass?",
        "idx": 52,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the whale winks at the amberjack, then the amberjack is not going to raise a flag of peace for the sea bass\nrule1() = wink(whale, amberjack) => not raise_flag_of_peace(amberjack, sea_bass)\n# Rule2: If the amberjack has fewer than five friends, then the amberjack raises a peace flag for the sea bass\nrule2() = friends(amberjack) < 5 => raise_flag_of_peace(amberjack, sea_bass)\n# Rule3: If the amberjack killed the mayor, then the amberjack raises a flag of peace for the sea bass.\nrule3() = killed(amberjack, mayor) => raise_flag_of_peace(amberjack, sea_bass)\n\n# Rule2 is preferred over Rule1\npreferred_rule1() = not raise_flag_of_peace(amberjack, sea_bass) if friends(amberjack) < 5\n# Rule3 is preferred over Rule1\npreferred_rule2() = not raise_flag_of_peace(amberjack, sea_bass) if killed(amberjack, mayor)\n\n# The current state of the game is as follows\n# The amberjack has four friends that are playful and four friends that are not\nfriends(amberjack) = 4\n# The whale winks at the amberjack.\nwink(whale, amberjack) = True\n\n# Based on the game state and the rules and preferences, does the amberjack raise a peace flag for the sea bass?\nquestion = raise_flag_of_peace(amberjack, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the leopard, if it has a high salary, then we can conclude that it proceeds to the spot right after the dog.\nRule2: Regarding the leopard, if it has a name whose first letter is the same as the first letter of the carp's name, then we can conclude that it proceeds to the spot right after the dog.\n\nThe current state of the game is as follows\nThe carp is named Pablo.\nThe leopard has a low-income job.\nThe leopard is named Milo.\n\nBased on the game state and the rules and preferences, does the leopard proceed to the spot right after the dog?\nQuestion: Does the leopard proceed to the spot right after the dog?",
        "idx": 53,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the leopard, if it has a high salary, then we can conclude that it proceeds to the spot right after the dog\nrule1() = salary(leopard) == high => proceed(leopard, spot_right_after(dog))\n# Rule2: Regarding the leopard, if it has a name whose first letter is the same as the first letter of the carp's name, then we can conclude that it proceeds to the spot right after the dog.\nrule2() = first_letter(name(leopard)) == first_letter(name(carp)) => proceed(leopard, spot_right_after(dog))\n\n# The current state of the game is as follows\n# The carp is named Pablo\nname(carp) = \"Pablo\"\n# The leopard has a low-income job\nsalary(leopard) = low\n# The leopard is named Milo.\nname(leopard) = \"Milo\"\n\n# Based on the game state and the rules and preferences, does the leopard proceed to the spot right after the dog?\nquestion = proceed(leopard, spot_right_after(dog))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something respects the kiwi and prepares armor for the squirrel, what can you certainly conclude? You can conclude that it also removes from the board one of the pieces of the whale.\n\nThe current state of the game is as follows\nThe canary has a couch.\nThe canary has a harmonica and prepares armor for the squirrel.\nThe canary respects the kiwi.\n\nBased on the game state and the rules and preferences, does the canary remove from the board one of the pieces of the whale?\nQuestion: Does the canary remove from the board one of the pieces of the whale?",
        "idx": 54,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something respects the kiwi and prepares armor for the squirrel, what can you certainly conclude? You can conclude that it also removes from the board one of the pieces of the whale.\nrule1() = respect(something, kiwi) & prepare_armor(something, squirrel) => remove_piece(something, whale)\n\n# The current state of the game is as follows\n# The canary has a couch\nhas(canary, couch) = True\n# The canary has a harmonica, and prepares armor for the squirrel\nhas(canary, harmonica) = True\nprepare_armor(canary, squirrel) = True\n# The canary respects the kiwi.\nrespect(canary, kiwi) = True\n\n# Based on the game state and the rules and preferences, does the canary remove from the board one of the pieces of the whale?\nquestion = remove_piece(canary, whale)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the hummingbird, if it has a card with a primary color, then we can conclude that it does not wink at the cheetah.\nRule2: Regarding the hummingbird, if it has a name whose first letter is the same as the first letter of the catfish's name, then we can conclude that it does not wink at the cheetah.\nRule3: If the raven does not knock down the fortress of the hummingbird, then the hummingbird winks at the cheetah.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe catfish is named Pashmak.\nThe hummingbird has a card that is red in color, and is named Tessa.\n\nBased on the game state and the rules and preferences, does the hummingbird wink at the cheetah?\nQuestion: Does the hummingbird wink at the cheetah?",
        "idx": 55,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hummingbird, if it has a card with a primary color, then we can conclude that it does not wink at the cheetah\nrule1() = has_card(hummingbird, primary_color) => not wink(hummingbird, cheetah)\n# Rule2: Regarding the hummingbird, if it has a name whose first letter is the same as the first letter of the catfish's name, then we can conclude that it does not wink at the cheetah\nrule2() = first_letter(hummingbird_name) == first_letter(catfish_name) => not wink(hummingbird, cheetah)\n# Rule3: If the raven does not knock down the fortress of the hummingbird, then the hummingbird winks at the cheetah.\nrule3() = not knock_down(raven, hummingbird_fortress) => wink(hummingbird, cheetah)\n\n# Rule3 is preferred over Rule1\npreferred_rule(rule1, rule3)\n# Rule3 is preferred over Rule2\npreferred_rule(rule2, rule3)\n\n# The current state of the game is as follows\n# The catfish is named Pashmak\ncatfish_name = \"Pashmak\"\n# The hummingbird has a card that is red in color, and is named Tessa.\nhas_card(hummingbird, red_color) = True\nhummingbird_name = \"Tessa\"\n\n# Based on the game state and the rules and preferences, does the hummingbird wink at the cheetah?\nquestion = wink(hummingbird, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the cockroach, if it has a card whose color is one of the rainbow colors, then we can conclude that it holds the same number of points as the cricket.\n\nThe current state of the game is as follows\nThe cockroach has a card that is white in color.\nThe sun bear does not give a magnifier to the cockroach.\n\nBased on the game state and the rules and preferences, does the cockroach hold the same number of points as the cricket?\nQuestion: Do the cockroach and the cricket hold the same number of points?",
        "idx": 56,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cockroach, if it has a card whose color is one of the rainbow colors, then we can conclude that it holds the same number of points as the cricket.\nrule1() = color(card, rainbow_colors) => points(cockroach) == points(cricket)\n\n# The current state of the game is as follows\n# The cockroach has a card that is white in color\ncolor(card, white) = True\n# The sun bear does not give a magnifier to the cockroach.\nnot give_magnifier(sun_bear, cockroach) = True\n\n# Based on the game state and the rules and preferences, does the cockroach hold the same number of points as the cricket?\nquestion = points(cockroach) == points(cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the jellyfish has a high salary, then the jellyfish does not proceed to the spot that is right after the spot of the cow.\nRule2: If something does not know the defense plan of the sea bass, then it proceeds to the spot right after the cow.\n\nThe current state of the game is as follows\nThe jellyfish does not know the defensive plans of the sea bass.\n\nBased on the game state and the rules and preferences, does the jellyfish proceed to the spot right after the cow?\nQuestion: Does the jellyfish proceed to the spot right after the cow?",
        "idx": 57,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the jellyfish has a high salary, then the jellyfish does not proceed to the spot that is right after the spot of the cow\nrule1() = salary(jellyfish) == high => not proceed(jellyfish, spot_after(cow))\n# Rule2: If something does not know the defense plan of the sea bass, then it proceeds to the spot right after the cow.\nrule2() = not know_defense_plan(something, sea_bass) => proceed(something, spot_after(cow))\n\n# The current state of the game is as follows\n# The jellyfish does not know the defensive plans of the sea bass.\nknow_defense_plan(jellyfish, sea_bass) = False\n\n# Based on the game state and the rules and preferences, does the jellyfish proceed to the spot right after the cow?\nquestion = proceed(jellyfish, spot_after(cow))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tiger has a card whose color is one of the rainbow colors, then the tiger does not remove from the board one of the pieces of the moose.\n\nThe current state of the game is as follows\nThe tiger has a card that is red in color.\n\nBased on the game state and the rules and preferences, does the tiger remove from the board one of the pieces of the moose?\nQuestion: Does the tiger remove from the board one of the pieces of the moose?",
        "idx": 58,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the tiger has a card whose color is one of the rainbow colors, then the tiger does not remove from the board one of the pieces of the moose.\nrule1() = has_card(tiger, color) & color in rainbow_colors => not remove_piece(tiger, moose)\n\n# The current state of the game is as follows\n# The tiger has a card that is red in color.\nhas_card(tiger, color) = True\ncolor(tiger_card) = red\n\n# Based on the game state and the rules and preferences, does the tiger remove from the board one of the pieces of the moose?\nquestion = remove_piece(tiger, moose)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the snail does not have her keys, then the snail holds an equal number of points as the eel\nRule2: If the snail has fewer than 10 friends, then we can conclude that it holds an equal number of points as the eel.\n\nThe current state of the game is as follows\nThe snail has 15 friends.\nThe snail is holding her keys.\n\nBased on the game state and the rules and preferences, does the snail hold the same number of points as the eel?\nQuestion: Does the snail hold the same number of points as the eel?",
        "idx": 59,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the snail does not have her keys, then the snail holds an equal number of points as the eel\nrule1() = not have_keys(snail) => points(snail) == points(eel)\n# Rule2: Regarding the snail, if it has fewer than 10 friends, then we can conclude that it holds an equal number of points as the eel.\nrule2() = friends(snail) < 10 => points(snail) == points(eel)\n\n# The current state of the game is as follows\n# The snail has 15 friends\nfriends(snail) = 15\n# The snail is holding her keys.\nhave_keys(snail) = True\n\n# Based on the game state and the rules and preferences, does the snail hold the same number of points as the eel?\nquestion = points(snail) == points(eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something gives a magnifying glass to the bat but does not give a magnifier to the tilapia, then it knows the defense plan of the jellyfish.\n\nThe current state of the game is as follows\nThe dog gives a magnifier to the bat.\nThe dog does not give a magnifier to the tilapia.\n\nBased on the game state and the rules and preferences, does the dog know the defensive plans of the jellyfish?\nQuestion: Does the dog know the defensive plans of the jellyfish?",
        "idx": 60,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something gives a magnifying glass to the bat but does not give a magnifier to the tilapia, what can you certainly conclude? You can conclude that it knows the defense plan of the jellyfish.\nrule1() = give_magnifier(something, bat) & not give_magnifier(something, tilapia) => knows_defense_plan(something, jellyfish)\n\n# The current state of the game is as follows\n# The dog gives a magnifier to the bat\ngive_magnifier(dog, bat) = True\n# The dog does not give a magnifier to the tilapia.\ngive_magnifier(dog, tilapia) = False\n\n# Based on the game state and the rules and preferences, does the dog know the defensive plans of the jellyfish?\nquestion = knows_defense_plan(dog, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the parrot, if it created a time machine, then we can conclude that it does not owe money to the cat.\n\nThe current state of the game is as follows\nThe parrot invented a time machine.\n\nBased on the game state and the rules and preferences, does the parrot owe money to the cat?\nQuestion: Does the parrot owe money to the cat?",
        "idx": 61,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the parrot, if it created a time machine, then we can conclude that it does not owe $$$ to the cat.\nrule1() = created_time_machine(parrot) => not owe(parrot, money, cat)\n\n# The current state of the game is as follows\n# The parrot invented a time machine.\ncreated_time_machine(parrot) = True\n\n# Based on the game state and the rules and preferences, does the parrot owe money to the cat?\nquestion = owe(parrot, money, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cheetah works more hours than before, then the cheetah shows her cards (all of them) to the dog.\nRule2: If the cheetah has more than ten friends, then we can conclude that it shows her cards (all of them) to the dog.\n\nThe current state of the game is as follows\nThe cheetah has one friend that is bald and 5 friends that are not, and struggles to find food.\nThe cheetah knocks down the fortress of the eagle but does not know the defensive plans of the lion.\n\nBased on the game state and the rules and preferences, does the cheetah show all her cards to the dog?\nQuestion: Does the cheetah show all her cards to the dog?",
        "idx": 62,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cheetah works more hours than before, then the cheetah shows her cards (all of them) to the dog\nrule1() = works_more_hours(cheetah) => show_cards(cheetah, dog)\n# Rule2: Regarding the cheetah, if it has more than ten friends, then we can conclude that it shows her cards (all of them) to the dog.\nrule2() = friends(cheetah) > 10 => show_cards(cheetah, dog)\n\n# The current state of the game is as follows\n# The cheetah has one friend that is bald and 5 friends that are not, and struggles to find food\nfriends(cheetah) = 6\nhas_friend(cheetah, bald) = True\nstruggles_to_find_food(cheetah) = True\n# The cheetah knocks down the fortress of the eagle but does not know the defensive plans of the lion.\nknocks_down_fortress(cheetah, eagle) = True\nknows_defensive_plans(cheetah, lion) = False\n\n# Based on the game state and the rules and preferences, does the cheetah show all her cards to the dog?\nquestion = show_cards(cheetah, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: For the mosquito, if the belief is that the elephant winks at the mosquito and the crocodile sings a victory song for the mosquito, then you can add \"the mosquito owes money to the phoenix\" to your conclusions.\n\nThe current state of the game is as follows\nThe crocodile sings a victory song for the mosquito.\nThe elephant winks at the mosquito.\n\nBased on the game state and the rules and preferences, does the mosquito owe money to the phoenix?\nQuestion: Does the mosquito owe money to the phoenix?",
        "idx": 63,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the mosquito, if the belief is that the elephant winks at the mosquito and the crocodile sings a victory song for the mosquito, then you can add \"the mosquito owes money to the phoenix\" to your conclusions.\nrule1() = wink(elephant, mosquito) & sing_victory_song(crocodile, mosquito) => owes(mosquito, money, phoenix)\n\n# The current state of the game is as follows\n# The crocodile sings a victory song for the mosquito\nsing_victory_song(crocodile, mosquito) = True\n# The elephant winks at the mosquito.\nwink(elephant, mosquito) = True\n\n# Based on the game state and the rules and preferences, does the mosquito owe money to the phoenix?\nquestion = owes(mosquito, money, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the baboon, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not know the defense plan of the tiger.\n\nThe current state of the game is as follows\nThe baboon has a card that is violet in color.\n\nBased on the game state and the rules and preferences, does the baboon know the defensive plans of the tiger?\nQuestion: Does the baboon know the defensive plans of the tiger?",
        "idx": 64,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the baboon, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not know the defense plan of the tiger.\nrule1() = has_card(baboon, color) & color in rainbow_colors => not know_defense_plan(baboon, tiger)\n\n# The current state of the game is as follows\n# The baboon has a card that is violet in color.\nhas_card(baboon, color) = True\ncolor(card, violet) = True\n\n# Based on the game state and the rules and preferences, does the baboon know the defensive plans of the tiger?\nquestion = know_defense_plan(baboon, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the cockroach, if it has something to carry apples and oranges, then we can conclude that it does not learn the basics of resource management from the cow.\nRule2: Regarding the cockroach, if it has something to drink, then we can conclude that it learns elementary resource management from the cow.\nRule3: Regarding the cockroach, if it took a bike from the store, then we can conclude that it learns elementary resource management from the cow.\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cockroach assassinated the mayor.\nThe cockroach has some spinach.\n\nBased on the game state and the rules and preferences, does the cockroach learn the basics of resource management from the cow?\nQuestion: Does the cockroach learn the basics of resource management from the cow?",
        "idx": 65,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cockroach, if it has something to carry apples and oranges, then we can conclude that it does not learn the basics of resource management from the cow\nrule1() = has(something, cockroach, carry(apples)) & has(something, cockroach, carry(oranges)) => not learn_basics(cockroach, resource_management, cow)\n# Rule2: Regarding the cockroach, if it has something to drink, then we can conclude that it learns elementary resource management from the cow\nrule2() = has(something, cockroach, drink) => learn_elementary(cockroach, resource_management, cow)\n# Rule3: Regarding the cockroach, if it took a bike from the store, then we can conclude that it learns elementary resource management from the cow.\nrule3() = took(cockroach, bike, store) => learn_elementary(cockroach, resource_management, cow)\n\n# Rule1 is preferred over Rule2\npreferred(rule1, rule2)\n# Rule1 is preferred over Rule3\npreferred(rule1, rule3)\n\n# The current state of the game is as follows\n# The cockroach assassinated the mayor\nassassinated(cockroach, mayor) = True\n# The cockroach has some spinach.\nhas(cockroach, spinach) = True\n\n# Based on the game state and the rules and preferences, does the cockroach learn the basics of resource management from the cow?\nquestion = learn_basics(cockroach, resource_management, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the catfish, if it voted for the mayor, then we can conclude that it does not know the defensive plans of the pig.\nRule2: Regarding the catfish, if it has a card whose color appears in the flag of Japan, then we can conclude that it knows the defense plan of the pig.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe catfish assassinated the mayor and has a card that is white in color.\nThe catfish has 6 friends.\n\nBased on the game state and the rules and preferences, does the catfish know the defensive plans of the pig?\nQuestion: Does the catfish know the defensive plans of the pig?",
        "idx": 66,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the catfish, if it voted for the mayor, then we can conclude that it does not know the defensive plans of the pig\nrule1() = voted(catfish, mayor) => not know_defensive_plans(catfish, pig)\n# Rule2: Regarding the catfish, if it has a card whose color appears in the flag of Japan, then we can conclude that it knows the defense plan of the pig.\nrule2() = has(catfish, card) and color(card) in flag_colors(Japan) => know_defensive_plans(catfish, pig)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2)\n\n# The current state of the game is as follows\n# The catfish assassinated the mayor, and has a card that is white in color\nassassinated(catfish, mayor) = True\nhas(catfish, card) = True\ncolor(card, white) = True\n# The catfish has 6 friends.\nfriends(catfish) = 6\n\n# Based on the game state and the rules and preferences, does the catfish know the defensive plans of the pig?\nquestion = know_defensive_plans(catfish, pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the panda bear, if it has a name whose first letter is the same as the first letter of the cockroach's name, then we can conclude that it does not learn the basics of resource management from the halibut.\nRule2: If the panda bear has a card whose color starts with the letter \"b\", then the panda bear does not learn elementary resource management from the halibut.\n\nThe current state of the game is as follows\nThe cockroach is named Max.\nThe panda bear has a card that is blue in color.\nThe panda bear is named Pablo.\n\nBased on the game state and the rules and preferences, does the panda bear learn the basics of resource management from the halibut?\nQuestion: Does the panda bear learn the basics of resource management from the halibut?",
        "idx": 67,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the panda bear, if it has a name whose first letter is the same as the first letter of the cockroach's name, then we can conclude that it does not learn the basics of resource management from the halibut\nrule1() = first_letter(name(panda_bear)) == first_letter(name(cockroach)) => not learn_basics_of_resource_management(panda_bear, halibut)\n# Rule2: If the panda bear has a card whose color starts with the letter \"b\", then the panda bear does not learn elementary resource management from the halibut.\nrule2() = starts_with(color(card(panda_bear)), \"b\") => not learn_elementary_resource_management(panda_bear, halibut)\n\n# The current state of the game is as follows\n# The cockroach is named Max\nname(cockroach) = \"Max\"\n# The panda bear has a card that is blue in color\ncolor(card(panda_bear)) = \"blue\"\n# The panda bear is named Pablo.\nname(panda_bear) = \"Pablo\"\n\n# Based on the game state and the rules and preferences, does the panda bear learn the basics of resource management from the halibut?\nquestion = learn_basics_of_resource_management(panda_bear, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the zander, if it does not have her keys, then we can conclude that it attacks the green fields whose owner is the grasshopper.\nRule2: Regarding the zander, if it has a name whose first letter is the same as the first letter of the polar bear's name, then we can conclude that it attacks the green fields whose owner is the grasshopper.\n\nThe current state of the game is as follows\nThe polar bear is named Chickpea.\nThe zander is named Blossom.\nThe zander is holding her keys.\n\nBased on the game state and the rules and preferences, does the zander attack the green fields whose owner is the grasshopper?\nQuestion: Does the zander attack the green fields whose owner is the grasshopper?",
        "idx": 68,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the zander, if it does not have her keys, then we can conclude that it attacks the green fields whose owner is the grasshopper\nrule1() = not have_keys(zander) => attack(zander, green_fields, grasshopper)\n# Rule2: Regarding the zander, if it has a name whose first letter is the same as the first letter of the polar bear's name, then we can conclude that it attacks the green fields whose owner is the grasshopper.\nrule2() = first_letter(name(zander)) == first_letter(name(polar_bear)) => attack(zander, green_fields, grasshopper)\n\n# The current state of the game is as follows\n# The polar bear is named Chickpea\nname(polar_bear) = \"Chickpea\"\n# The zander is named Blossom\nname(zander) = \"Blossom\"\n# The zander is holding her keys.\nhave_keys(zander) = True\n\n# Based on the game state and the rules and preferences, does the zander attack the green fields whose owner is the grasshopper?\nquestion = attack(zander, green_fields, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something gives a magnifying glass to the kiwi, then it needs the support of the wolverine, too.\n\nThe current state of the game is as follows\nThe sun bear gives a magnifier to the kiwi.\n\nBased on the game state and the rules and preferences, does the sun bear need support from the wolverine?\nQuestion: Does the sun bear need support from the wolverine?",
        "idx": 69,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something gives a magnifying glass to the kiwi, then it needs the support of the wolverine, too.\nrule1() = give_magnifying_glass(something, kiwi) => need_support(something, wolverine)\n\n# The current state of the game is as follows\n# The sun bear gives a magnifier to the kiwi.\ngive_magnifying_glass(sun_bear, kiwi) = True\n\n# Based on the game state and the rules and preferences, does the sun bear need support from the wolverine?\nquestion = need_support(sun_bear, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the tiger, if it has a card with a primary color, then we can conclude that it does not remove one of the pieces of the doctorfish.\n\nThe current state of the game is as follows\nThe tiger has a card that is green in color.\n\nBased on the game state and the rules and preferences, does the tiger remove from the board one of the pieces of the doctorfish?\nQuestion: Does the tiger remove from the board one of the pieces of the doctorfish?",
        "idx": 70,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the tiger, if it has a card with a primary color, then we can conclude that it does not remove one of the pieces of the doctorfish.\nrule1() = has_card(tiger, primary_color) => not remove_piece(tiger, doctorfish)\n\n# The current state of the game is as follows\n# The tiger has a card that is green in color.\nhas_card(tiger, green) = True\n\n# Based on the game state and the rules and preferences, does the tiger remove from the board one of the pieces of the doctorfish?\nquestion = remove_piece(tiger, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish gives a magnifier to the mosquito and the jellyfish raises a flag of peace for the mosquito, then the mosquito will not offer a job position to the donkey.\nRule2: Regarding the mosquito, if it works fewer hours than before, then we can conclude that it offers a job position to the donkey.\n\nThe current state of the game is as follows\nThe mosquito assassinated the mayor.\nThe jellyfish does not respect the mosquito.\n\nBased on the game state and the rules and preferences, does the mosquito offer a job to the donkey?\nQuestion: Does the mosquito offer a job to the donkey?",
        "idx": 71,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the catfish gives a magnifier to the mosquito and the jellyfish raises a flag of peace for the mosquito, then the mosquito will not offer a job position to the donkey\nrule1() = give(catfish, magnifier, mosquito) & raise_flag_of_peace(jellyfish, mosquito) => not offer_job_position(mosquito, donkey)\n# Rule2: Regarding the mosquito, if it works fewer hours than before, then we can conclude that it offers a job position to the donkey.\nrule2() = work_hours(mosquito) < previous_work_hours(mosquito) => offer_job_position(mosquito, donkey)\n\n# The current state of the game is as follows\n# The mosquito assassinated the mayor\nassassinate(mosquito, mayor) = True\n# The jellyfish does not respect the mosquito.\nrespect(jellyfish, mosquito) = False\n\n# Based on the game state and the rules and preferences, does the mosquito offer a job to the donkey?\nquestion = offer_job_position(mosquito, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the octopus, if it has fewer than 11 friends, then we can conclude that it does not offer a job to the hippopotamus.\nRule2: The octopus offers a job to the hippopotamus whenever at least one animal rolls the dice for the cow.\nRule3: If the octopus has a name whose first letter is the same as the first letter of the kudu's name, then the octopus does not offer a job to the hippopotamus.\n\nRule1 is preferred over Rule2.\nRule3 is preferred over Rule2.\n\nThe current state of the game is as follows\nThe elephant rolls the dice for the cow.\nThe kudu is named Mojo.\nThe octopus is named Pablo.\n\nBased on the game state and the rules and preferences, does the octopus offer a job to the hippopotamus?\nQuestion: Does the octopus offer a job to the hippopotamus?",
        "idx": 72,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the octopus, if it has fewer than 11 friends, then we can conclude that it does not offer a job to the hippopotamus\nrule1() = friends(octopus) < 11 => not offer_job(octopus, hippopotamus)\n# Rule2: The octopus offers a job to the hippopotamus whenever at least one animal rolls the dice for the cow\nrule2() = roll_dice(animal, cow) => offer_job(octopus, hippopotamus)\n# Rule3: If the octopus has a name whose first letter is the same as the first letter of the kudu's name, then the octopus does not offer a job to the hippopotamus.\nrule3() = first_letter(name(octopus)) == first_letter(name(kudu)) => not offer_job(octopus, hippopotamus)\n\n# Rule1 is preferred over Rule2\npreferred_rule1_over_rule2() = True\n# Rule3 is preferred over Rule2\npreferred_rule3_over_rule2() = True\n\n# The current state of the game is as follows\n# The elephant rolls the dice for the cow\nroll_dice(elephant, cow) = True\n# The kudu is named Mojo\nname(kudu) = \"Mojo\"\n# The octopus is named Pablo.\nname(octopus) = \"Pablo\"\n\n# Based on the game state and the rules and preferences, does the octopus offer a job to the hippopotamus?\nquestion = offer_job(octopus, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the snail, if it has a name whose first letter is the same as the first letter of the buffalo's name, then we can conclude that it does not burn the warehouse of the pig.\n\nThe current state of the game is as follows\nThe buffalo is named Buddy.\nThe snail is named Beauty.\n\nBased on the game state and the rules and preferences, does the snail burn the warehouse of the pig?\nQuestion: Does the snail burn the warehouse of the pig?",
        "idx": 73,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the snail, if it has a name whose first letter is the same as the first letter of the buffalo's name, then we can conclude that it does not burn the warehouse of the pig.\nrule1() = first_letter(snail) == first_letter(buffalo) => not burn_warehouse(snail, pig)\n\n# The current state of the game is as follows\n# The buffalo is named Buddy\nname(buffalo) = \"Buddy\"\n# The snail is named Beauty.\nname(snail) = \"Beauty\"\n\n# Based on the game state and the rules and preferences, does the snail burn the warehouse of the pig?\nquestion = burn_warehouse(snail, pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the kudu, if it has a musical instrument, then we can conclude that it respects the swordfish.\nRule2: If the kudu has something to sit on, then the kudu does not respect the swordfish.\nRule3: Regarding the kudu, if it has something to drink, then we can conclude that it does not respect the swordfish.\nRule1 is preferred over Rule2.\nRule1 is preferred over Rule3.\n\nThe current state of the game is as follows\nThe kudu has a knife.\nThe kudu has a plastic bag.\n\nBased on the game state and the rules and preferences, does the kudu respect the swordfish?\nQuestion: Does the kudu respect the swordfish?",
        "idx": 74,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kudu, if it has a musical instrument, then we can conclude that it respects the swordfish\nrule1() = has(kudu, musical_instrument) => respect(kudu, swordfish)\n# Rule2: If the kudu has something to sit on, then the kudu does not respect the swordfish\nrule2() = has(kudu, something_to_sit_on) => not respect(kudu, swordfish)\n# Rule3: Regarding the kudu, if it has something to drink, then we can conclude that it does not respect the swordfish.\nrule3() = has(kudu, something_to_drink) => not respect(kudu, swordfish)\n\n# Rule1 is preferred over Rule2\npreferred_rule(rule1, rule2)\n# Rule1 is preferred over Rule3\npreferred_rule(rule1, rule3)\n\n# The current state of the game is as follows\n# The kudu has a knife\nhas(kudu, knife) = True\n# The kudu has a plastic bag.\nhas(kudu, plastic_bag) = True\n\n# Based on the game state and the rules and preferences, does the kudu respect the swordfish?\nquestion = respect(kudu, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something gives a magnifying glass to the hare and learns elementary resource management from the hare, what can you certainly conclude? You can conclude that it does not burn the warehouse of the zander.\nRule2: Regarding the cockroach, if it has more than eighteen friends, then we can conclude that it burns the warehouse that is in possession of the zander.\nRule3: Regarding the cockroach, if it has a name whose first letter is the same as the first letter of the canary's name, then we can conclude that it burns the warehouse of the zander.\nRule1 is preferred over Rule2.\nRule1 is preferred over Rule3.\n\nThe current state of the game is as follows\nThe canary is named Tessa.\nThe cockroach gives a magnifier to the hare.\nThe cockroach has 3 friends that are mean and six friends that are not, and is named Teddy.\n\nBased on the game state and the rules and preferences, does the cockroach burn the warehouse of the zander?\nQuestion: Does the cockroach burn the warehouse of the zander?",
        "idx": 75,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something gives a magnifying glass to the hare and learns elementary resource management from the hare, what can you certainly conclude? You can conclude that it does not burn the warehouse of the zander\nrule1() = give(something, magnifying_glass, hare) & learn(something, elementary_resource_management, hare) => not burn_warehouse(something, zander)\n\n# Rule2: Regarding the cockroach, if it has more than eighteen friends, then we can conclude that it burns the warehouse that is in possession of the zander\nrule2() = friends(cockroach) > 18 => burn_warehouse(cockroach, zander)\n\n# Rule3: Regarding the cockroach, if it has a name whose first letter is the same as the first letter of the canary's name, then we can conclude that it burns the warehouse of the zander.\nrule3() = first_letter(name(cockroach)) == first_letter(name(canary)) => burn_warehouse(cockroach, zander)\n\n# Rule1 is preferred over Rule2\nrule1_preferred_over_rule2() = True\n\n# Rule1 is preferred over Rule3\nrule1_preferred_over_rule3() = True\n\n# The current state of the game is as follows\n# The canary is named Tessa\nname(canary) = \"Tessa\"\n# The cockroach gives a magnifier to the hare\ngive(cockroach, magnifying_glass, hare) = True\n# The cockroach has 3 friends that are mean and six friends that are not, and is named Teddy.\nfriends(cockroach) = 9\nname(cockroach) = \"Teddy\"\n\n# Based on the game state and the rules and preferences, does the cockroach burn the warehouse of the zander?\nquestion = burn_warehouse(cockroach, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The bat will not roll the dice for the leopard, in the case where the cheetah does not give a magnifying glass to the bat.\n\nThe current state of the game is as follows\nThe cheetah does not give a magnifier to the bat.\n\nBased on the game state and the rules and preferences, does the bat roll the dice for the leopard?\nQuestion: Does the bat roll the dice for the leopard?",
        "idx": 76,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The bat will not roll the dice for the leopard, in the case where the cheetah does not give a magnifying glass to the bat.\nrule1() = not give_magnifying_glass(cheetah, bat) => not roll_dice(bat, leopard)\n\n# The current state of the game is as follows\n# The cheetah does not give a magnifier to the bat.\ngive_magnifying_glass(cheetah, bat) = False\n\n# Based on the game state and the rules and preferences, does the bat roll the dice for the leopard?\nquestion = roll_dice(bat, leopard)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals gives a magnifying glass to the sheep, you can be certain that it will also prepare armor for the eagle.\n\nThe current state of the game is as follows\nThe raven sings a victory song for the sheep.\n\nBased on the game state and the rules and preferences, does the raven prepare armor for the eagle?\nQuestion: Does the raven prepare armor for the eagle?",
        "idx": 77,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals gives a magnifying glass to the sheep, you can be certain that it will also prepare armor for the eagle.\nrule1() = saw_give_magnifying_glass(animal, sheep) => prepare_armor(animal, eagle)\n\n# The current state of the game is as follows\n# The raven sings a victory song for the sheep.\nsings_victory_song(raven, sheep) = True\n\n# Based on the game state and the rules and preferences, does the raven prepare armor for the eagle?\nquestion = prepare_armor(raven, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the leopard has a sharp object, then the leopard does not become an enemy of the sea bass.\nRule2: If something holds the same number of points as the panda bear and owes money to the cat, then it becomes an actual enemy of the sea bass.\nRule3: If the leopard has a card whose color is one of the rainbow colors, then the leopard does not become an actual enemy of the sea bass.\nRule1 is preferred over Rule2.\nRule3 is preferred over Rule2.\n\nThe current state of the game is as follows\nThe leopard has a card that is white in color and owes money to the cat.\nThe leopard holds the same number of points as the panda bear.\n\nBased on the game state and the rules and preferences, does the leopard become an enemy of the sea bass?\nQuestion: Does the leopard become an enemy of the sea bass?",
        "idx": 78,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the leopard has a sharp object, then the leopard does not become an enemy of the sea bass\nrule1() = has_sharp_object(leopard) => not enemy(leopard, sea_bass)\n\n# Rule2: If you see that something holds the same number of points as the panda bear and owes money to the cat, what can you certainly conclude? You can conclude that it also becomes an actual enemy of the sea bass\nrule2() = points(something) == points(panda_bear) & owes(something, money, cat) => enemy(something, sea_bass)\n\n# Rule3: If the leopard has a card whose color is one of the rainbow colors, then the leopard does not become an actual enemy of the sea bass.\nrule3() = has(leopard, card) & color(card) in rainbow_colors => not enemy(leopard, sea_bass)\n\n# Rule1 is preferred over Rule2\n# Rule3 is preferred over Rule2\n\n# The current state of the game is as follows\n# The leopard has a card that is white in color, and owes money to the cat\nhas(leopard, card) = True\ncolor(card, white) = True\nowes(leopard, money, cat) = True\n# The leopard holds the same number of points as the panda bear.\npoints(leopard) == points(panda_bear) = True\n\n# Based on the game state and the rules and preferences, does the leopard become an enemy of the sea bass?\nquestion = enemy(leopard, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kiwi burns the warehouse that is in possession of the kudu, then the kudu is not going to eat the food of the cow.\n\nThe current state of the game is as follows\nThe kiwi burns the warehouse of the kudu.\n\nBased on the game state and the rules and preferences, does the kudu eat the food of the cow?\nQuestion: Does the kudu eat the food of the cow?",
        "idx": 79,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kiwi burns the warehouse that is in possession of the kudu, then the kudu is not going to eat the food of the cow.\nrule1() = burn_warehouse(kiwi, kudu) => not eat_food(kudu, cow)\n\n# The current state of the game is as follows\n# The kiwi burns the warehouse of the kudu.\nburn_warehouse(kiwi, kudu) = True\n\n# Based on the game state and the rules and preferences, does the kudu eat the food of the cow?\nquestion = eat_food(kudu, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the koala, if it has a card whose color appears in the flag of France, then we can conclude that it does not eat the food that belongs to the squid.\nRule2: If the koala has a name whose first letter is the same as the first letter of the cat's name, then the koala does not eat the food that belongs to the squid.\nRule3: If the koala has more than one friend, then the koala eats the food that belongs to the squid.\nRule4: If the koala has a high salary, then the koala eats the food that belongs to the squid.\n\nRule1 is preferred over Rule3.\nRule1 is preferred over Rule4.\nRule2 is preferred over Rule3.\nRule2 is preferred over Rule4.\n\nThe current state of the game is as follows\nThe cat is named Charlie.\nThe koala has 1 friend.\nThe koala is named Blossom.\nThe koala recently read a high-quality paper.\n\nBased on the game state and the rules and preferences, does the koala eat the food of the squid?\nQuestion: Does the koala eat the food of the squid?",
        "idx": 80,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the koala, if it has a card whose color appears in the flag of France, then we can conclude that it does not eat the food that belongs to the squid\nrule1() = has_card(koala, color) & color in flag_colors(France) => not eat_food(koala, squid)\n# Rule2: If the koala has a name whose first letter is the same as the first letter of the cat's name, then the koala does not eat the food that belongs to the squid\nrule2() = first_letter(name(koala)) == first_letter(name(cat)) => not eat_food(koala, squid)\n# Rule3: If the koala has more than one friend, then the koala eats the food that belongs to the squid\nrule3() = friends(koala) > 1 => eat_food(koala, squid)\n# Rule4: If the koala has a high salary, then the koala eats the food that belongs to the squid.\nrule4() = has_high_salary(koala) => eat_food(koala, squid)\n\n# Rule1 is preferred over Rule3\nprefer(rule1, rule3)\n# Rule1 is preferred over Rule4\nprefer(rule1, rule4)\n# Rule2 is preferred over Rule3\nprefer(rule2, rule3)\n# Rule2 is preferred over Rule4\nprefer(rule2, rule4)\n\n# The current state of the game is as follows\n# The cat is named Charlie\nname(cat) = \"Charlie\"\n# The koala has 1 friend\nfriends(koala) = 1\n# The koala is named Blossom\nname(koala) = \"Blossom\"\n# The koala recently read a high-quality paper.\nrecently_read_paper(koala, high_quality) = True\n\n# Based on the game state and the rules and preferences, does the koala eat the food of the squid?\nquestion = eat_food(koala, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal burns the warehouse of the kiwi, then the bat does not sing a victory song for the parrot.\nRule2: Regarding the bat, if it has more than four friends, then we can conclude that it sings a song of victory for the parrot.\n\nThe current state of the game is as follows\nThe bat has 13 friends.\n\nBased on the game state and the rules and preferences, does the bat sing a victory song for the parrot?\nQuestion: Does the bat sing a victory song for the parrot?",
        "idx": 81,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal burns the warehouse of the kiwi, then the bat does not sing a victory song for the parrot\nrule1() = burn_warehouse(kiwi) => not sing_victory_song(bat, parrot)\n# Rule2: Regarding the bat, if it has more than four friends, then we can conclude that it sings a song of victory for the parrot.\nrule2() = friends(bat) > 4 => sing_victory_song(bat, parrot)\n\n# The current state of the game is as follows\n# The bat has 13 friends.\nfriends(bat) = 13\n\n# Based on the game state and the rules and preferences, does the bat sing a victory song for the parrot?\nquestion = sing_victory_song(bat, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the parrot does not show all her cards to the kangaroo and the hummingbird does not wink at the kangaroo, then the kangaroo will never remove one of the pieces of the panther.\n\nThe current state of the game is as follows\nThe hummingbird does not wink at the kangaroo.\nThe parrot does not show all her cards to the kangaroo.\n\nBased on the game state and the rules and preferences, does the kangaroo remove from the board one of the pieces of the panther?\nQuestion: Does the kangaroo remove one of the pieces of the panther from the board?",
        "idx": 82,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the parrot does not show her cards (all of them) to the kangaroo and the hummingbird does not wink at the kangaroo, then the kangaroo will never remove one of the pieces of the panther.\nrule1() = not show_cards(parrot, kangaroo) & not wink(hummingbird, kangaroo) => not remove_piece(kangaroo, panther)\n\n# The current state of the game is as follows\n# The hummingbird does not wink at the kangaroo\nwink(hummingbird, kangaroo) = False\n# The parrot does not show all her cards to the kangaroo.\nshow_cards(parrot, kangaroo) = False\n\n# Based on the game state and the rules and preferences, does the kangaroo remove from the board one of the pieces of the panther?\nquestion = remove_piece(kangaroo, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the elephant, if it has a name whose first letter is the same as the first letter of the squirrel's name, then we can conclude that it learns the basics of resource management from the swordfish.\nRule2: Regarding the elephant, if it has fewer than eighteen friends, then we can conclude that it learns elementary resource management from the swordfish.\n\nThe current state of the game is as follows\nThe elephant has eighteen friends and is named Chickpea.\nThe squirrel is named Milo.\n\nBased on the game state and the rules and preferences, does the elephant learn the basics of resource management from the swordfish?\nQuestion: Does the elephant learn the basics of resource management from the swordfish?",
        "idx": 83,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the elephant, if it has a name whose first letter is the same as the first letter of the squirrel's name, then we can conclude that it learns the basics of resource management from the swordfish\nrule1() = first_letter(name(elephant)) == first_letter(name(squirrel)) => learn_basics(elephant, resource_management, swordfish)\n# Rule2: Regarding the elephant, if it has fewer than eighteen friends, then we can conclude that it learns elementary resource management from the swordfish.\nrule2() = friends(elephant) < 18 => learn_elementary(elephant, resource_management, swordfish)\n\n# The current state of the game is as follows\n# The elephant has eighteen friends, and is named Chickpea\nfriends(elephant) = 18\nname(elephant) = \"Chickpea\"\n# The squirrel is named Milo.\nname(squirrel) = \"Milo\"\n\n# Based on the game state and the rules and preferences, does the elephant learn the basics of resource management from the swordfish?\nquestion = learn_basics(elephant, resource_management, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something attacks the green fields whose owner is the octopus, then it burns the warehouse of the ferret, too.\nRule2: If at least one animal owes money to the amberjack, then the moose does not burn the warehouse that is in possession of the ferret.\n\nThe current state of the game is as follows\nThe moose attacks the green fields whose owner is the octopus.\n\nBased on the game state and the rules and preferences, does the moose burn the warehouse of the ferret?\nQuestion: Does the moose burn the warehouse of the ferret?",
        "idx": 84,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something attacks the green fields whose owner is the octopus, then it burns the warehouse of the ferret, too\nrule1() = attacks(something, green_fields, octopus) => burn_warehouse(ferret)\n# Rule2: If at least one animal owes money to the amberjack, then the moose does not burn the warehouse that is in possession of the ferret.\nrule2() = owes_money(animal, amberjack) => not burn_warehouse(moose)\n\n# The current state of the game is as follows\n# The moose attacks the green fields whose owner is the octopus.\nattacks(moose, green_fields, octopus) = True\n\n# Based on the game state and the rules and preferences, does the moose burn the warehouse of the ferret?\nquestion = burn_warehouse(moose)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the rabbit becomes an enemy of the bat and the kiwi holds the same number of points as the bat, then the bat sings a victory song for the jellyfish.\nRule2: If the tiger shows all her cards to the bat, then the bat is not going to sing a song of victory for the jellyfish.\n\nThe current state of the game is as follows\nThe rabbit becomes an enemy of the bat.\nThe tiger shows all her cards to the bat.\n\nBased on the game state and the rules and preferences, does the bat sing a victory song for the jellyfish?\nQuestion: Does the bat sing a victory song for the jellyfish?",
        "idx": 85,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the rabbit becomes an enemy of the bat and the kiwi holds the same number of points as the bat, then the bat sings a victory song for the jellyfish\nrule1() = enemy(rabbit, bat) & points(kiwi) == points(bat) => sing_victory_song(bat, jellyfish)\n# Rule2: If the tiger shows all her cards to the bat, then the bat is not going to sing a song of victory for the jellyfish.\nrule2() = show_all_cards(tiger, bat) => not sing_victory_song(bat, jellyfish)\n\n# The current state of the game is as follows\n# The rabbit becomes an enemy of the bat\nenemy(rabbit, bat) = True\n# The tiger shows all her cards to the bat.\nshow_all_cards(tiger, bat) = True\n\n# Based on the game state and the rules and preferences, does the bat sing a victory song for the jellyfish?\nquestion = sing_victory_song(bat, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the leopard, if it has a card whose color appears in the flag of Belgium, then we can conclude that it shows her cards (all of them) to the puffin.\nRule2: Regarding the leopard, if it has fewer than 10 friends, then we can conclude that it does not show her cards (all of them) to the puffin.\n\nThe current state of the game is as follows\nThe leopard has a card that is blue in color.\n\nBased on the game state and the rules and preferences, does the leopard show all her cards to the puffin?\nQuestion: Does the leopard show all her cards to the puffin?",
        "idx": 86,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the leopard, if it has a card whose color appears in the flag of Belgium, then we can conclude that it shows her cards (all of them) to the puffin\nrule1() = has_card(leopard, card) & color(card) in flag_colors(Belgium) => show_cards(leopard, puffin)\n# Rule2: Regarding the leopard, if it has fewer than 10 friends, then we can conclude that it does not show her cards (all of them) to the puffin.\nrule2() = friends(leopard) < 10 => not show_cards(leopard, puffin)\n\n# The current state of the game is as follows\n# The leopard has a card that is blue in color.\nhas_card(leopard, card) = True\ncolor(card, blue) = True\n\n# Based on the game state and the rules and preferences, does the leopard show all her cards to the puffin?\nquestion = show_cards(leopard, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the zander has a card with a primary color, then the zander raises a flag of peace for the blobfish\nRule2: If the zander has published a high-quality paper, then the zander does not raise a flag of peace for the blobfish\nRule3: If the zander has fewer than four friends, then we can conclude that it does not raise a flag of peace for the blobfish.\n\nRule2 is preferred over Rule1\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe zander has a card that is red in color.\nThe zander recently read a high-quality paper.\n\nBased on the game state and the rules and preferences, does the zander raise a peace flag for the blobfish?\nQuestion: Does the zander raise a peace flag for the blobfish?",
        "idx": 87,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the zander has a card with a primary color, then the zander raises a flag of peace for the blobfish\nrule1() = has_card(zander, primary_color) => raise_flag_of_peace(zander, blobfish)\n# Rule2: If the zander has published a high-quality paper, then the zander does not raise a flag of peace for the blobfish\nrule2() = published_paper(zander, high_quality) => not raise_flag_of_peace(zander, blobfish)\n# Rule3: Regarding the zander, if it has fewer than four friends, then we can conclude that it does not raise a flag of peace for the blobfish.\nrule3() = friends(zander) < 4 => not raise_flag_of_peace(zander, blobfish)\n\n# Rule2 is preferred over Rule1\npreferred_rule1() = not rule2()\n# Rule3 is preferred over Rule1\npreferred_rule2() = not rule3()\n\n# The current state of the game is as follows\n# The zander has a card that is red in color\nhas_card(zander, red) = True\n# The zander recently read a high-quality paper.\npublished_paper(zander, high_quality) = True\n\n# Based on the game state and the rules and preferences, does the zander raise a peace flag for the blobfish?\nquestion = raise_flag_of_peace(zander, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something attacks the green fields whose owner is the raven and also raises a flag of peace for the tiger because in this case it will surely not knock down the fortress of the hare (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe cow attacks the green fields whose owner is the raven.\nThe cow raises a peace flag for the tiger.\n\nBased on the game state and the rules and preferences, does the cow knock down the fortress of the hare?\nQuestion: Does the cow knock down the fortress of the hare?",
        "idx": 88,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something attacks the green fields whose owner is the raven and also raises a flag of peace for the tiger because in this case it will surely not knock down the fortress of the hare (this may or may not be problematic).\nrule1() = attack(cow, green_fields, raven) & raise_flag_of_peace(cow, tiger) => not knock_down_fortress(cow, hare)\n\n# The current state of the game is as follows\n# The cow attacks the green fields whose owner is the raven\nattack(cow, green_fields, raven) = True\n# The cow raises a peace flag for the tiger.\nraise_flag_of_peace(cow, tiger) = True\n\n# Based on the game state and the rules and preferences, does the cow knock down the fortress of the hare?\nquestion = knock_down_fortress(cow, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals becomes an enemy of the lobster, you can be certain that it will also proceed to the spot that is right after the spot of the penguin.\nRule2: The kudu does not proceed to the spot right after the penguin whenever at least one animal holds an equal number of points as the buffalo.\n\nThe current state of the game is as follows\nThe kudu does not become an enemy of the lobster.\n\nBased on the game state and the rules and preferences, does the kudu proceed to the spot right after the penguin?\nQuestion: Does the kudu proceed to the spot right after the penguin?",
        "idx": 89,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals becomes an enemy of the lobster, you can be certain that it will also proceed to the spot that is right after the spot of the penguin\nrule1() = enemy_of_lobster(animal) => proceed_to_spot(animal, spot_after_penguin)\n# Rule2: The kudu does not proceed to the spot right after the penguin whenever at least one animal holds an equal number of points as the buffalo.\nrule2() = not proceed_to_spot(kudu, spot_after_penguin) if equal_points(animal, buffalo)\n\n# The current state of the game is as follows\n# The kudu does not become an enemy of the lobster.\nenemy_of_lobster(kudu) = False\n\n# Based on the game state and the rules and preferences, does the kudu proceed to the spot right after the penguin?\nquestion = proceed_to_spot(kudu, spot_after_penguin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the rabbit offers a job position to the moose and the zander shows all her cards to the moose, then the moose needs support from the goldfish.\n\nThe current state of the game is as follows\nThe rabbit offers a job to the moose.\nThe zander shows all her cards to the moose.\n\nBased on the game state and the rules and preferences, does the moose need support from the goldfish?\nQuestion: Does the moose need support from the goldfish?",
        "idx": 90,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the rabbit offers a job position to the moose and the zander shows her cards (all of them) to the moose, then the moose needs support from the goldfish.\nrule1() = offer_job_position(rabbit, moose) & show_cards(zander, moose, all) => need_support(moose, goldfish)\n\n# The current state of the game is as follows\n# The rabbit offers a job to the moose\noffer_job_position(rabbit, moose) = True\n# The zander shows all her cards to the moose.\nshow_cards(zander, moose, all) = True\n\n# Based on the game state and the rules and preferences, does the moose need support from the goldfish?\nquestion = need_support(moose, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the starfish does not have her keys, then the starfish does not offer a job position to the caterpillar.\n\nThe current state of the game is as follows\nThe starfish lost her keys.\nThe starfish steals five points from the dog.\nThe starfish proceeds to the spot right after the lion.\n\nBased on the game state and the rules and preferences, does the starfish offer a job to the caterpillar?\nQuestion: Does the starfish offer a job position to the caterpillar?",
        "idx": 91,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the starfish does not have her keys, then the starfish does not offer a job position to the caterpillar.\nrule1() = not have_keys(starfish) => not offer_job_position(starfish, caterpillar)\n\n# The current state of the game is as follows\n# The starfish lost her keys\nhave_keys(starfish) = False\n# The starfish steals five points from the dog\nsteal_points(starfish, dog, 5)\n# The starfish proceeds to the spot right after the lion.\nproceed_to_spot(starfish, right_after, lion)\n\n# Based on the game state and the rules and preferences, does the starfish offer a job to the caterpillar?\nquestion = offer_job_position(starfish, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the carp, if it has a card whose color is one of the rainbow colors, then we can conclude that it owes money to the panda bear.\nRule2: Regarding the carp, if it is a fan of Chris Ronaldo, then we can conclude that it owes money to the panda bear.\n\nThe current state of the game is as follows\nThe carp has a card that is white in color, and purchased a luxury aircraft.\n\nBased on the game state and the rules and preferences, does the carp owe money to the panda bear?\nQuestion: Does the carp owe money to the panda bear?",
        "idx": 92,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the carp, if it has a card whose color is one of the rainbow colors, then we can conclude that it owes money to the panda bear\nrule1() = has_card(carp) & color(card, rainbow_colors) => owe_money(carp, panda_bear)\n# Rule2: Regarding the carp, if it is a fan of Chris Ronaldo, then we can conclude that it owes money to the panda bear.\nrule2() = fan_of(carp, Chris_Ronaldo) => owe_money(carp, panda_bear)\n\n# The current state of the game is as follows\n# The carp has a card that is white in color, and purchased a luxury aircraft.\nhas_card(carp) = True\ncolor(card, white) = True\npurchased(carp, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the carp owe money to the panda bear?\nquestion = owe_money(carp, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the zander, if it has something to carry apples and oranges, then we can conclude that it burns the warehouse that is in possession of the jellyfish.\n\nThe current state of the game is as follows\nThe zander has a plastic bag.\n\nBased on the game state and the rules and preferences, does the zander burn the warehouse of the jellyfish?\nQuestion: Does the zander burn the warehouse of the jellyfish?",
        "idx": 93,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the zander, if it has something to carry apples and oranges, then we can conclude that it burns the warehouse that is in possession of the jellyfish.\nrule1() = has(zander, carry_apples_oranges) => burn_warehouse(zander, jellyfish)\n\n# The current state of the game is as follows\n# The zander has a plastic bag.\nhas(zander, plastic_bag) = True\n\n# Based on the game state and the rules and preferences, does the zander burn the warehouse of the jellyfish?\nquestion = burn_warehouse(zander, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sea bass sings a song of victory for the zander and the cockroach learns the basics of resource management from the zander, then the zander will not know the defensive plans of the goldfish.\nRule2: If something does not remove from the board one of the pieces of the grizzly bear but it rolls the dice for the crocodile, then it can be concluded that it also knows the defense plan of the goldfish.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cockroach learns the basics of resource management from the zander.\nThe sea bass sings a victory song for the zander.\nThe zander does not remove from the board one of the pieces of the grizzly bear.\n\nBased on the game state and the rules and preferences, does the zander know the defensive plans of the goldfish?\nQuestion: Does the zander know the defensive plans of the goldfish?",
        "idx": 94,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sea bass sings a song of victory for the zander and the cockroach learns the basics of resource management from the zander, then the zander will not know the defensive plans of the goldfish\nrule1() = sing_victory_song(sea_bass, zander) & learn_basics_of_resource_management(cockroach, zander) => not know_defensive_plans(zander, goldfish)\n\n# Rule2: If you see that something does not remove from the board one of the pieces of the grizzly bear but it rolls the dice for the crocodile, what can you certainly conclude? You can conclude that it also knows the defense plan of the goldfish.\nrule2() = not remove_from_board(something, grizzly_bear) & roll_dice(something, crocodile) => know_defensive_plans(something, goldfish)\n\n# Rule2 is preferred over Rule1\npreferred_rule() = rule2()\n\n# The current state of the game is as follows\n# The cockroach learns the basics of resource management from the zander\nlearn_basics_of_resource_management(cockroach, zander) = True\n# The sea bass sings a victory song for the zander\nsing_victory_song(sea_bass, zander) = True\n# The zander does not remove from the board one of the pieces of the grizzly bear.\nremove_from_board(zander, grizzly_bear) = False\n\n# Based on the game state and the rules and preferences, does the zander know the defensive plans of the goldfish?\nquestion = know_defensive_plans(zander, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The parrot unquestionably respects the meerkat, in the case where the hippopotamus respects the parrot.\n\nThe current state of the game is as follows\nThe hippopotamus rolls the dice for the parrot.\n\nBased on the game state and the rules and preferences, does the parrot respect the meerkat?\nQuestion: Does the parrot respect the meerkat?",
        "idx": 95,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The parrot unquestionably respects the meerkat, in the case where the hippopotamus respects the parrot.\nrule1() = respect(hippopotamus, parrot) => respect(parrot, meerkat)\n\n# The current state of the game is as follows\n# The hippopotamus rolls the dice for the parrot.\nroll_dice(hippopotamus, parrot) = True\n\n# Based on the game state and the rules and preferences, does the parrot respect the meerkat?\nquestion = respect(parrot, meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the salmon, if it has a card with a primary color, then we can conclude that it owes money to the koala.\nRule2: If the salmon has difficulty to find food, then the salmon owes money to the koala.\n\nThe current state of the game is as follows\nThe salmon has a card that is white in color.\nThe salmon struggles to find food.\n\nBased on the game state and the rules and preferences, does the salmon owe money to the koala?\nQuestion: Does the salmon owe money to the koala?",
        "idx": 96,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the salmon, if it has a card with a primary color, then we can conclude that it owes $$$ to the koala\nrule1() = has_card(salmon) & primary_color(card) => owe(salmon, money, koala)\n# Rule2: If the salmon has difficulty to find food, then the salmon owes money to the koala.\nrule2() = struggles_to_find_food(salmon) => owe(salmon, money, koala)\n\n# The current state of the game is as follows\n# The salmon has a card that is white in color\nhas_card(salmon) = True\ncolor(card, white) = True\n# The salmon struggles to find food.\nstruggles_to_find_food(salmon) = True\n\n# Based on the game state and the rules and preferences, does the salmon owe money to the koala?\nquestion = owe(salmon, money, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something knocks down the fortress that belongs to the octopus and also knows the defensive plans of the koala because in this case it will surely not wink at the baboon (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe cat knocks down the fortress of the octopus.\nThe cat knows the defensive plans of the koala.\n\nBased on the game state and the rules and preferences, does the cat wink at the baboon?\nQuestion: Does the cat wink at the baboon?",
        "idx": 97,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something knocks down the fortress that belongs to the octopus and also knows the defensive plans of the koala because in this case it will surely not wink at the baboon (this may or may not be problematic).\nrule1() = knocks_down_fortress(cat, octopus) & knows_defensive_plans(cat, koala) => not wink(cat, baboon)\n\n# The current state of the game is as follows\n# The cat knocks down the fortress of the octopus\nknocks_down_fortress(cat, octopus) = True\n# The cat knows the defensive plans of the koala.\nknows_defensive_plans(cat, koala) = True\n\n# Based on the game state and the rules and preferences, does the cat wink at the baboon?\nquestion = wink(cat, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The tiger unquestionably attacks the green fields whose owner is the raven, in the case where the meerkat shows all her cards to the tiger.\n\nThe current state of the game is as follows\nThe meerkat proceeds to the spot right after the tiger.\n\nBased on the game state and the rules and preferences, does the tiger attack the green fields whose owner is the raven?\nQuestion: Does the tiger attack the green fields whose owner is the raven?",
        "idx": 98,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The tiger unquestionably attacks the green fields whose owner is the raven, in the case where the meerkat shows all her cards to the tiger.\nrule1() = proceed_to_spot(meerkat, spot_right_after, tiger) => attack_fields(tiger, green, owner(raven))\n\n# The current state of the game is as follows\n# The meerkat proceeds to the spot right after the tiger.\nproceed_to_spot(meerkat, spot_right_after, tiger) = True\n\n# Based on the game state and the rules and preferences, does the tiger attack the green fields whose owner is the raven?\nquestion = attack_fields(tiger, green, owner(raven))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the tiger, if it has a device to connect to the internet, then we can conclude that it learns elementary resource management from the squid.\nRule2: If the tiger has more than four friends, then the tiger learns the basics of resource management from the squid.\n\nThe current state of the game is as follows\nThe tiger has 11 friends and has a harmonica.\n\nBased on the game state and the rules and preferences, does the tiger learn the basics of resource management from the squid?\nQuestion: Does the tiger learn the basics of resource management from the squid?",
        "idx": 99,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the tiger, if it has a device to connect to the internet, then we can conclude that it learns elementary resource management from the squid\nrule1() = has_device(tiger, internet) => learn(tiger, elementary_resource_management, squid)\n# Rule2: If the tiger has more than four friends, then the tiger learns the basics of resource management from the squid.\nrule2() = friends(tiger) > 4 => learn(tiger, basics_of_resource_management, squid)\n\n# The current state of the game is as follows\n# The tiger has 11 friends, and has a harmonica.\nfriends(tiger) = 11\nhas(tiger, harmonica) = True\n\n# Based on the game state and the rules and preferences, does the tiger learn the basics of resource management from the squid?\nquestion = learn(tiger, basics_of_resource_management, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cheetah owns a luxury aircraft, then the cheetah does not attack the green fields whose owner is the tiger.\n\nThe current state of the game is as follows\nThe cheetah purchased a luxury aircraft.\n\nBased on the game state and the rules and preferences, does the cheetah attack the green fields whose owner is the tiger?\nQuestion: Does the cheetah attack the green fields whose owner is the tiger?",
        "idx": 100,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cheetah owns a luxury aircraft, then the cheetah does not attack the green fields whose owner is the tiger.\nrule1() = owns(cheetah, luxury_aircraft) => not attack(cheetah, green_fields, tiger)\n\n# The current state of the game is as follows\n# The cheetah purchased a luxury aircraft.\nowns(cheetah, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the cheetah attack the green fields whose owner is the tiger?\nquestion = attack(cheetah, green_fields, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the eel's name, then we can conclude that it gives a magnifier to the canary.\n\nThe current state of the game is as follows\nThe buffalo is named Charlie.\nThe eel is named Pablo.\n\nBased on the game state and the rules and preferences, does the buffalo give a magnifier to the canary?\nQuestion: Does the buffalo give a magnifier to the canary?",
        "idx": 101,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the eel's name, then we can conclude that it gives a magnifier to the canary.\nrule1() = first_letter(name(buffalo)) == first_letter(name(eel)) => give_magnifier(buffalo, canary)\n\n# The current state of the game is as follows\n# The buffalo is named Charlie\nname(buffalo) = \"Charlie\"\n# The eel is named Pablo.\nname(eel) = \"Pablo\"\n\n# Based on the game state and the rules and preferences, does the buffalo give a magnifier to the canary?\nquestion = give_magnifier(buffalo, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lobster offers a job to the dog and the cheetah does not wink at the dog, then, inevitably, the dog steals five of the points of the carp.\n\nThe current state of the game is as follows\nThe lobster offers a job to the dog.\nThe cheetah does not wink at the dog.\nThe whale does not prepare armor for the dog.\n\nBased on the game state and the rules and preferences, does the dog steal five points from the carp?\nQuestion: Does the dog steal five points from the carp?",
        "idx": 102,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lobster offers a job to the dog and the cheetah does not wink at the dog, then, inevitably, the dog steals five of the points of the carp.\nrule1() = offer_job_position(lobster, dog) & not wink(cheetah, dog) => steal_points(dog, 5, carp)\n\n# The current state of the game is as follows\n# The lobster offers a job to the dog\noffer_job_position(lobster, dog) = True\n# The cheetah does not wink at the dog\nwink(cheetah, dog) = False\n# The whale does not prepare armor for the dog.\nprepare_armor(whale, dog) = False\n\n# Based on the game state and the rules and preferences, does the dog steal five points from the carp?\nquestion = steal_points(dog, 5, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The dog does not hold the same number of points as the rabbit whenever at least one animal eats the food of the penguin.\n\nThe current state of the game is as follows\nThe kudu eats the food of the penguin.\n\nBased on the game state and the rules and preferences, does the dog hold the same number of points as the rabbit?\nQuestion: Do the dog and the rabbit hold the same number of points?",
        "idx": 103,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The dog does not hold the same number of points as the rabbit whenever at least one animal eats the food of the penguin.\nrule1() = eats_food(animal) => points(dog) != points(rabbit)\n\n# The current state of the game is as follows\n# The kudu eats the food of the penguin.\neats_food(kudu) = True\n\n# Based on the game state and the rules and preferences, does the dog hold the same number of points as the rabbit?\nquestion = points(dog) == points(rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The buffalo unquestionably steals five of the points of the oscar, in the case where the squid does not owe money to the buffalo.\nRule2: If the buffalo took a bike from the store, then the buffalo does not steal five of the points of the oscar.\nRule3: If the buffalo has something to sit on, then the buffalo does not steal five of the points of the oscar.\n\nRule2 is preferred over Rule1.\nRule3 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe buffalo parked her bike in front of the store.\nThe squid does not owe money to the buffalo.\n\nBased on the game state and the rules and preferences, does the buffalo steal five points from the oscar?\nQuestion: Does the buffalo steal five points from the oscar?",
        "idx": 104,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The buffalo unquestionably steals five of the points of the oscar, in the case where the squid does not owe money to the buffalo\nrule1() = not owe_money(squid, buffalo) => steal_points(buffalo, oscar, 5)\n# Rule2: If the buffalo took a bike from the store, then the buffalo does not steal five of the points of the oscar\nrule2() = took_bike(buffalo, store) => not steal_points(buffalo, oscar, 5)\n# Rule3: If the buffalo has something to sit on, then the buffalo does not steal five of the points of the oscar.\nrule3() = has_something_to_sit_on(buffalo) => not steal_points(buffalo, oscar, 5)\n\n# Rule2 is preferred over Rule1\npreferred_rule1() = False\n# Rule3 is preferred over Rule1\npreferred_rule2() = False\n\n# The current state of the game is as follows\n# The buffalo parked her bike in front of the store\ntook_bike(buffalo, store) = True\n# The squid does not roll the dice for the buffalo.\nowe_money(squid, buffalo) = False\n\n# Based on the game state and the rules and preferences, does the buffalo steal five points from the oscar?\nquestion = steal_points(buffalo, oscar, 5)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the amberjack, if it has access to an abundance of food, then we can conclude that it knocks down the fortress of the donkey.\nRule2: If the amberjack has a leafy green vegetable, then the amberjack knocks down the fortress of the donkey.\n\nThe current state of the game is as follows\nThe amberjack has some spinach.\nThe amberjack struggles to find food.\n\nBased on the game state and the rules and preferences, does the amberjack knock down the fortress of the donkey?\nQuestion: Does the amberjack knock down the fortress of the donkey?",
        "idx": 105,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the amberjack, if it has access to an abundance of food, then we can conclude that it knocks down the fortress of the donkey\nrule1() = access_food(amberjack, abundance) => knock_down_fortress(amberjack, donkey)\n# Rule2: If the amberjack has a leafy green vegetable, then the amberjack knocks down the fortress of the donkey.\nrule2() = has(amberjack, leafy_green_vegetable) => knock_down_fortress(amberjack, donkey)\n\n# The current state of the game is as follows\n# The amberjack has some spinach\nhas(amberjack, spinach) = True\n# The amberjack struggles to find food.\nstruggles_to_find_food(amberjack) = True\n\n# Based on the game state and the rules and preferences, does the amberjack knock down the fortress of the donkey?\nquestion = knock_down_fortress(amberjack, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the puffin has fewer than 9 friends, then the puffin does not learn elementary resource management from the buffalo.\n\nThe current state of the game is as follows\nThe puffin has one friend.\n\nBased on the game state and the rules and preferences, does the puffin learn the basics of resource management from the buffalo?\nQuestion: Does the puffin learn the basics of resource management from the buffalo?",
        "idx": 106,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the puffin has fewer than 9 friends, then the puffin does not learn elementary resource management from the buffalo.\nrule1() = friends(puffin) < 9 => not learn_resource_management(puffin, buffalo)\n\n# The current state of the game is as follows\n# The puffin has one friend.\nfriends(puffin) = 1\n\n# Based on the game state and the rules and preferences, does the puffin learn the basics of resource management from the buffalo?\nquestion = learn_resource_management(puffin, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something shows all her cards to the lobster but does not know the defensive plans of the spider, what can you certainly conclude? You can conclude that it attacks the green fields whose owner is the meerkat\nRule2: If the zander has a name whose first letter is the same as the first letter of the gecko's name, then the zander does not attack the green fields of the meerkat\nRule3: Regarding the zander, if it has difficulty to find food, then we can conclude that it does not attack the green fields of the meerkat.\nRule2 is preferred over Rule1\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe gecko is named Paco\nThe zander is named Chickpea, and knows the defensive plans of the spider\nThe zander shows all her cards to the lobster.\n\nBased on the game state and the rules and preferences, does the zander attack the green fields whose owner is the meerkat?\nQuestion: Does the zander attack the green fields whose owner is the meerkat?",
        "idx": 107,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something shows all her cards to the lobster but does not know the defensive plans of the spider, what can you certainly conclude? You can conclude that it attacks the green fields whose owner is the meerkat\nrule1() = show_all_cards(something, lobster) & not know_defensive_plans(something, spider) => attack_green_fields(something, meerkat)\n\n# Rule2: If the zander has a name whose first letter is the same as the first letter of the gecko's name, then the zander does not attack the green fields of the meerkat\nrule2() = first_letter(name(zander)) == first_letter(name(gecko)) => not attack_green_fields(zander, meerkat)\n\n# Rule3: Regarding the zander, if it has difficulty to find food, then we can conclude that it does not attack the green fields of the meerkat.\nrule3() = difficulty_finding_food(zander) => not attack_green_fields(zander, meerkat)\n\n# Rule2 is preferred over Rule1\npreference(rule2, rule1)\n\n# Rule3 is preferred over Rule1\npreference(rule3, rule1)\n\n# The current state of the game is as follows\n# The gecko is named Paco\nname(gecko) = \"Paco\"\n# The zander is named Chickpea, and knows the defensive plans of the spider\nname(zander) = \"Chickpea\"\nknow_defensive_plans(zander, spider) = True\n# The zander shows all her cards to the lobster.\nshow_all_cards(zander, lobster) = True\n\n# Based on the game state and the rules and preferences, does the zander attack the green fields whose owner is the meerkat?\nquestion = attack_green_fields(zander, meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon winks at the squid, then the squid knocks down the fortress that belongs to the leopard.\n\nThe current state of the game is as follows\nThe baboon winks at the squid.\n\nBased on the game state and the rules and preferences, does the squid knock down the fortress of the leopard?\nQuestion: Does the squid knock down the fortress of the leopard?",
        "idx": 108,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the baboon winks at the squid, then the squid knocks down the fortress that belongs to the leopard.\nrule1() = wink(baboon, squid) => knock_down_fortress(squid, leopard)\n\n# The current state of the game is as follows\n# The baboon winks at the squid.\nwink(baboon, squid) = True\n\n# Based on the game state and the rules and preferences, does the squid knock down the fortress of the leopard?\nquestion = knock_down_fortress(squid, leopard)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the meerkat does not attack the green fields of the sea bass, but the turtle eats the food that belongs to the sea bass, then the sea bass will not steal five points of the canary.\nRule2: If the sea bass has a high-quality paper, then it steals five points of the canary.\nRule1 is preferred over Rule2.\n\nThe current state of the game is as follows\nThe sea bass published a high-quality paper.\nThe turtle eats the food of the sea bass.\nThe meerkat does not attack the green fields whose owner is the sea bass.\n\nBased on the game state and the rules and preferences, does the sea bass steal five points from the canary?\nQuestion: Does the sea bass steal five points from the canary?",
        "idx": 109,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the meerkat does not attack the green fields of the sea bass however the turtle eats the food that belongs to the sea bass, then the sea bass will not steal five of the points of the canary\nrule1() = not attack(meerkat, green_fields(sea_bass)) & eat(turtle, food(sea_bass)) => not steal_points(sea_bass, 5, canary)\n\n# Rule2: Regarding the sea bass, if it has a high-quality paper, then we can conclude that it steals five of the points of the canary.\nrule2() = has(sea_bass, high_quality_paper) => steal_points(sea_bass, 5, canary)\n\n# Rule1 is preferred over Rule2\npreferred_rule() = rule1()\n\n# The current state of the game is as follows\n# The sea bass published a high-quality paper\nhas(sea_bass, high_quality_paper) = True\n# The turtle eats the food of the sea bass\neat(turtle, food(sea_bass)) = True\n# The meerkat does not attack the green fields whose owner is the sea bass.\nnot attack(meerkat, green_fields(sea_bass)) = True\n\n# Based on the game state and the rules and preferences, does the sea bass steal five points from the canary?\nquestion = steal_points(sea_bass, 5, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus has a high salary, then the octopus holds the same number of points as the turtle.\n\nThe current state of the game is as follows\nThe octopus has a low-income job.\n\nBased on the game state and the rules and preferences, does the octopus hold the same number of points as the turtle?\nQuestion: Do the octopus and the turtle hold the same number of points?",
        "idx": 110,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the octopus has a high salary, then the octopus holds the same number of points as the turtle.\nrule1() = salary(octopus) == high => points(octopus) == points(turtle)\n\n# The current state of the game is as follows\n# The octopus has a low-income job.\nsalary(octopus) == low\n\n# Based on the game state and the rules and preferences, does the octopus hold the same number of points as the turtle?\nquestion = points(octopus) == points(turtle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the octopus, if it has more than 10 friends, then we can conclude that it becomes an enemy of the hippopotamus.\nRule2: The octopus does not become an enemy of the hippopotamus, in the case where the bat gives a magnifier to the octopus.\n\nThe current state of the game is as follows\nThe octopus has 11 friends.\n\nBased on the game state and the rules and preferences, does the octopus become an enemy of the hippopotamus?\nQuestion: Does the octopus become an enemy of the hippopotamus?",
        "idx": 111,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the octopus, if it has more than 10 friends, then we can conclude that it becomes an enemy of the hippopotamus\nrule1() = friends(octopus) > 10 => enemy(octopus, hippopotamus)\n# Rule2: The octopus does not become an enemy of the hippopotamus, in the case where the bat gives a magnifier to the octopus.\nrule2() = give_item(bat, magnifier, octopus) => not enemy(octopus, hippopotamus)\n\n# The current state of the game is as follows\n# The octopus has 11 friends.\nfriends(octopus) = 11\n\n# Based on the game state and the rules and preferences, does the octopus become an enemy of the hippopotamus?\nquestion = enemy(octopus, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the leopard has a sharp object, then the leopard learns the basics of resource management from the doctorfish.\nRule2: If the leopard has something to carry apples and oranges, then the leopard does not learn the basics of resource management from the doctorfish.\nRule2 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe leopard has a basket, has a blade, and has a tablet.\n\nBased on the game state and the rules and preferences, does the leopard learn the basics of resource management from the doctorfish?\nQuestion: Does the leopard learn the basics of resource management from the doctorfish?",
        "idx": 112,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the leopard has a sharp object, then the leopard learns the basics of resource management from the doctorfish\nrule1() = has(leopard, sharp_object) => learn_basics(leopard, resource_management, doctorfish)\n\n# Rule2: If the leopard has something to carry apples and oranges, then the leopard does not learn the basics of resource management from the doctorfish.\nrule2() = has(leopard, carry_item(apples, oranges)) => not learn_basics(leopard, resource_management, doctorfish)\n\n# Rule2 is preferred over Rule1\nrule2 > rule1\n\n# The current state of the game is as follows\n# The leopard has a basket, has a blade, and has a tablet.\nhas(leopard, basket) = True\nhas(leopard, blade) = True\nhas(leopard, tablet) = True\n\n# Based on the game state and the rules and preferences, does the leopard learn the basics of resource management from the doctorfish?\nquestion = learn_basics(leopard, resource_management, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the leopard winks at the donkey, then the donkey is not going to offer a job position to the cricket\nRule2: If the donkey has a name whose first letter is the same as the first letter of the dog's name, then the donkey offers a job position to the cricket.\n\nThe current state of the game is as follows\nThe dog is named Meadow.\nThe donkey is named Lola.\n\nBased on the game state and the rules and preferences, does the donkey offer a job to the cricket?\nQuestion: Does the donkey offer a job position to the cricket?",
        "idx": 113,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the leopard winks at the donkey, then the donkey is not going to offer a job position to the cricket\nrule1() = wink(leopard, donkey) => not offer_job_position(donkey, cricket)\n# Rule2: If the donkey has a name whose first letter is the same as the first letter of the dog's name, then the donkey offers a job position to the cricket.\nrule2() = first_letter(name(donkey)) == first_letter(name(dog)) => offer_job_position(donkey, cricket)\n\n# The current state of the game is as follows\n# The dog is named Meadow\nname(dog) = \"Meadow\"\n# The donkey is named Lola.\nname(donkey) = \"Lola\"\n\n# Based on the game state and the rules and preferences, does the donkey offer a job to the cricket?\nquestion = offer_job_position(donkey, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the zander, if it has a name whose first letter is the same as the first letter of the carp's name, then we can conclude that it owes money to the phoenix.\nRule2: If the zander has a card with a primary color, then the zander owes money to the phoenix.\n\nThe current state of the game is as follows\nThe carp is named Mojo.\nThe zander has a card that is blue in color.\nThe zander has six friends, and is named Lola.\n\nBased on the game state and the rules and preferences, does the zander owe money to the phoenix?\nQuestion: Does the zander owe money to the phoenix?",
        "idx": 114,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the zander, if it has a name whose first letter is the same as the first letter of the carp's name, then we can conclude that it owes $$$ to the phoenix\nrule1() = first_letter(name(zander)) == first_letter(name(carp)) => owe(zander, money, phoenix)\n# Rule2: If the zander has a card with a primary color, then the zander owes money to the phoenix.\nrule2() = has_primary_color_card(zander) => owe(zander, money, phoenix)\n\n# The current state of the game is as follows\n# The carp is named Mojo\nname(carp) = \"Mojo\"\n# The zander has a card that is blue in color\nhas_card(zander) = True\ncolor(card(zander), blue) = True\n# The zander has six friends, and is named Lola.\nfriends(zander) = 6\nname(zander) = \"Lola\"\n\n# Based on the game state and the rules and preferences, does the zander owe money to the phoenix?\nquestion = owe(zander, money, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the turtle, if it has something to sit on, then we can conclude that it does not roll the dice for the polar bear.\n\nThe current state of the game is as follows\nThe turtle has a love seat sofa.\n\nBased on the game state and the rules and preferences, does the turtle roll the dice for the polar bear?\nQuestion: Does the turtle roll the dice for the polar bear?",
        "idx": 115,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the turtle, if it has something to sit on, then we can conclude that it does not roll the dice for the polar bear.\nrule1() = has(turtle, something_to_sit_on) => not roll_dice(turtle, polar_bear)\n\n# The current state of the game is as follows\n# The turtle has a love seat sofa.\nhas(turtle, something_to_sit_on) = True\n\n# Based on the game state and the rules and preferences, does the turtle roll the dice for the polar bear?\nquestion = roll_dice(turtle, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not eat the food of the blobfish, you can be certain that it will knock down the fortress of the wolverine without a doubt.\n\nThe current state of the game is as follows\nThe ferret proceeds to the spot right after the cow.\nThe tilapia eats the food of the blobfish.\n\nBased on the game state and the rules and preferences, does the tilapia knock down the fortress of the wolverine?\nQuestion: Does the tilapia knock down the fortress of the wolverine?",
        "idx": 116,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not eat the food of the blobfish, you can be certain that it will knock down the fortress of the wolverine without a doubt.\nrule1() = not eat_food(animal, blobfish) => knock_down_fortress(animal, wolverine)\n\n# The current state of the game is as follows\n# The ferret proceeds to the spot right after the cow\nproceeds_to_spot(ferret, cow) = True\n# The tilapia eats the food of the blobfish.\neat_food(tilapia, blobfish) = True\n\n# Based on the game state and the rules and preferences, does the tilapia knock down the fortress of the wolverine?\nquestion = knock_down_fortress(tilapia, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panda bear has a card whose color appears in the flag of Belgium, then the panda bear needs the support of the elephant.\nRule2: If the panda bear has a name whose first letter is the same as the first letter of the cricket's name, then the panda bear needs support from the elephant.\n\nThe current state of the game is as follows\nThe cricket is named Tessa.\nThe panda bear has a card that is yellow in color.\nThe panda bear is named Lily.\n\nBased on the game state and the rules and preferences, does the panda bear need support from the elephant?\nQuestion: Does the panda bear need support from the elephant?",
        "idx": 117,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panda bear has a card whose color appears in the flag of Belgium, then the panda bear needs the support of the elephant\nrule1() = has_card(panda_bear, color) & color in flag_colors(Belgium) => need_support(panda_bear, elephant)\n# Rule2: If the panda bear has a name whose first letter is the same as the first letter of the cricket's name, then the panda bear needs support from the elephant.\nrule2() = first_letter(panda_bear) == first_letter(cricket) => need_support(panda_bear, elephant)\n\n# The current state of the game is as follows\n# The cricket is named Tessa\nname(cricket) = \"Tessa\"\n# The panda bear has a card that is yellow in color\nhas_card(panda_bear, color) = True\ncolor(card, yellow) = True\n# The panda bear is named Lily.\nname(panda_bear) = \"Lily\"\n\n# Based on the game state and the rules and preferences, does the panda bear need support from the elephant?\nquestion = need_support(panda_bear, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something offers a job position to the kangaroo but does not know the defense plan of the kudu because in this case it will, surely, not owe money to the baboon (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe zander offers a job to the kangaroo but does not know the defensive plans of the kudu.\n\nBased on the game state and the rules and preferences, does the zander owe money to the baboon?\nQuestion: Does the zander owe money to the baboon?",
        "idx": 118,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something offers a job position to the kangaroo but does not know the defense plan of the kudu because in this case it will, surely, not owe money to the baboon (this may or may not be problematic).\nrule1() = offer_job_position(something, kangaroo) & not know_defense_plan(something, kudu) => not owe_money(something, baboon)\n\n# The current state of the game is as follows\n# The zander offers a job to the kangaroo but does not know the defensive plans of the kudu.\noffer_job_position(zander, kangaroo) = True\nknow_defense_plan(zander, kudu) = False\n\n# Based on the game state and the rules and preferences, does the zander owe money to the baboon?\nquestion = owe_money(zander, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the sun bear, if it has a name whose first letter is the same as the first letter of the eel's name, then we can conclude that it offers a job position to the canary.\n\nThe current state of the game is as follows\nThe eel is named Meadow.\nThe sun bear is named Pashmak.\n\nBased on the game state and the rules and preferences, does the sun bear offer a job to the canary?\nQuestion: Does the sun bear offer a job to the canary?",
        "idx": 119,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the sun bear, if it has a name whose first letter is the same as the first letter of the eel's name, then we can conclude that it offers a job position to the canary.\nrule1() = first_letter(name(sun_bear)) == first_letter(name(eel)) => offer_job_position(sun_bear, canary)\n\n# The current state of the game is as follows\n# The eel is named Meadow\nname(eel) = \"Meadow\"\n# The sun bear is named Pashmak.\nname(sun_bear) = \"Pashmak\"\n\n# Based on the game state and the rules and preferences, does the sun bear offer a job to the canary?\nquestion = offer_job_position(sun_bear, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squid created a time machine, then the squid knows the defensive plans of the meerkat.\n\nThe current state of the game is as follows\nThe squid invented a time machine.\n\nBased on the game state and the rules and preferences, does the squid know the defensive plans of the meerkat?\nQuestion: Does the squid know the defensive plans of the meerkat?",
        "idx": 120,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squid created a time machine, then the squid knows the defensive plans of the meerkat.\nrule1() = created_time_machine(squid) => knows_defensive_plans(squid, meerkat)\n\n# The current state of the game is as follows\n# The squid invented a time machine.\ncreated_time_machine(squid) = True\n\n# Based on the game state and the rules and preferences, does the squid know the defensive plans of the meerkat?\nquestion = knows_defensive_plans(squid, meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion has a name whose first letter is the same as the first letter of the sun bear's name, then the lion shows her cards (all of them) to the canary.\nRule2: If something burns the warehouse that is in possession of the hippopotamus, then it does not show her cards (all of them) to the canary.\n\nThe current state of the game is as follows\nThe lion burns the warehouse of the hippopotamus and is named Meadow.\n\nBased on the game state and the rules and preferences, does the lion show all her cards to the canary?\nQuestion: Does the lion show all her cards to the canary?",
        "idx": 121,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lion has a name whose first letter is the same as the first letter of the sun bear's name, then the lion shows her cards (all of them) to the canary\nrule1() = first_letter(name(lion)) == first_letter(name(sun_bear)) => show_cards(lion, canary)\n# Rule2: If something burns the warehouse that is in possession of the hippopotamus, then it does not show her cards (all of them) to the canary.\nrule2() = burns(warehouse, hippopotamus) => not show_cards(lion, canary)\n\n# The current state of the game is as follows\n# The lion burns the warehouse of the hippopotamus, and is named Meadow.\nburns(warehouse, hippopotamus) = True\nname(lion) = \"Meadow\"\n\n# Based on the game state and the rules and preferences, does the lion show all her cards to the canary?\nquestion = show_cards(lion, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose has a card whose color appears in the flag of Netherlands, then the moose winks at the gecko\nRule2: Be careful when something becomes an actual enemy of the sea bass and also needs the support of the tilapia because in this case it will surely not wink at the gecko.\n\nThe current state of the game is as follows\nThe moose has a card that is violet in color.\nThe moose does not need support from the tilapia.\n\nBased on the game state and the rules and preferences, does the moose wink at the gecko?\nQuestion: Does the moose wink at the gecko?",
        "idx": 122,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the moose has a card whose color appears in the flag of Netherlands, then the moose winks at the gecko\nrule1() = has_card(moose, color) & color in flag_colors(Netherlands) => wink(moose, gecko)\n# Rule2: Be careful when something becomes an actual enemy of the sea bass and also needs the support of the tilapia because in this case it will surely not wink at the gecko (this may or may not be problematic).\nrule2() = enemy(sea_bass, something) & needs_support(something, tilapia) => not wink(something, gecko)\n\n# The current state of the game is as follows\n# The moose has a card that is violet in color\nhas_card(moose, color) = True\ncolor(violet) = True\n# The moose does not need support from the tilapia.\nneeds_support(moose, tilapia) = False\n\n# Based on the game state and the rules and preferences, does the moose wink at the gecko?\nquestion = wink(moose, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the koala, if it has fewer than fourteen friends, then we can conclude that it attacks the green fields whose owner is the viperfish.\n\nThe current state of the game is as follows\nThe koala has 9 friends.\n\nBased on the game state and the rules and preferences, does the koala attack the green fields whose owner is the viperfish?\nQuestion: Does the koala attack the green fields whose owner is the viperfish?",
        "idx": 123,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the koala, if it has fewer than fourteen friends, then we can conclude that it attacks the green fields whose owner is the viperfish.\nrule1() = friends(koala) < 14 => attack(koala, green_fields(viperfish))\n\n# The current state of the game is as follows\n# The koala has 9 friends.\nfriends(koala) = 9\n\n# Based on the game state and the rules and preferences, does the koala attack the green fields whose owner is the viperfish?\nquestion = attack(koala, green_fields(viperfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose has a card whose color is one of the rainbow colors, then the moose does not know the defensive plans of the catfish.\nRule2: If the first letter of the name of the moose is the same as the first letter of the name of the sun bear, then we can conclude that the moose does not know the defensive plans of the catfish.\n\nThe current state of the game is as follows\nThe moose has a card that is indigo in color, and is named Luna.\nThe name of the sun bear is Teddy.\n\nBased on the game state and the rules and preferences, does the moose know the defensive plans of the catfish?\nQuestion: Does the moose know the defensive plans of the catfish?",
        "idx": 124,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the moose has a card whose color is one of the rainbow colors, then the moose does not know the defensive plans of the catfish\nrule1() = has_card(moose, color) & color in rainbow_colors => not know_defensive_plans(moose, catfish)\n\n# Rule2: Regarding the moose, if it has a name whose first letter is the same as the first letter of the sun bear's name, then we can conclude that it does not know the defense plan of the catfish.\nrule2() = first_letter(name(moose)) == first_letter(name(sun_bear)) => not know_defensive_plans(moose, catfish)\n\n# The current state of the game is as follows\n# The moose has a card that is indigo in color, and is named Luna\nhas_card(moose, indigo) = True\nname(moose) = \"Luna\"\nname(sun_bear) = \"Teddy\"\n\n# Based on the game state and the rules and preferences, does the moose know the defensive plans of the catfish?\nquestion = know_defensive_plans(moose, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the doctorfish, if it has a name whose first letter is the same as the first letter of the lion's name, then we can conclude that it becomes an actual enemy of the kangaroo.\nRule2: For the doctorfish, if the belief is that the goldfish rolls the dice for the doctorfish and the elephant proceeds to the spot right after the doctorfish, then you can add that \"the doctorfish is not going to become an enemy of the kangaroo\" to your conclusions.\nRule2 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe doctorfish is named Lily.\nThe elephant proceeds to the spot right after the doctorfish.\nThe lion is named Meadow.\n\nBased on the game state and the rules and preferences, does the doctorfish become an enemy of the kangaroo?\nQuestion: Does the doctorfish become an enemy of the kangaroo?",
        "idx": 125,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the doctorfish, if it has a name whose first letter is the same as the first letter of the lion's name, then we can conclude that it becomes an actual enemy of the kangaroo\nrule1() = first_letter(name(doctorfish)) == first_letter(name(lion)) => enemy(doctorfish, kangaroo)\n\n# Rule2: For the doctorfish, if the belief is that the goldfish rolls the dice for the doctorfish and the elephant proceeds to the spot right after the doctorfish, then you can add that \"the doctorfish is not going to become an enemy of the kangaroo\" to your conclusions.\nrule2() = roll_dice(goldfish, doctorfish) & proceed_to_spot(elephant, spot_after(doctorfish)) => not enemy(doctorfish, kangaroo)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2)\n\n# The current state of the game is as follows\n# The doctorfish is named Lily\nname(doctorfish) = \"Lily\"\n# The elephant proceeds to the spot right after the doctorfish\nproceed_to_spot(elephant, spot_after(doctorfish)) = True\n# The lion is named Meadow.\nname(lion) = \"Meadow\"\n\n# Based on the game state and the rules and preferences, does the doctorfish become an enemy of the kangaroo?\nquestion = enemy(doctorfish, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the sheep, if it has more than 5 friends, then we can conclude that it eats the food that belongs to the parrot.\n\nThe current state of the game is as follows\nThe sheep has eleven friends.\n\nBased on the game state and the rules and preferences, does the sheep eat the food of the parrot?\nQuestion: Does the sheep eat the food of the parrot?",
        "idx": 126,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the sheep, if it has more than 5 friends, then we can conclude that it eats the food that belongs to the parrot.\nrule1() = friends(sheep) > 5 => eat_food(sheep, parrot)\n\n# The current state of the game is as follows\n# The sheep has eleven friends.\nfriends(sheep) = 11\n\n# Based on the game state and the rules and preferences, does the sheep eat the food of the parrot?\nquestion = eat_food(sheep, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the puffin, if it has a card whose color appears in the flag of Italy, then we can conclude that it does not learn elementary resource management from the aardvark.\n\nThe current state of the game is as follows\nThe puffin has a card that is red in color.\n\nBased on the game state and the rules and preferences, does the puffin learn the basics of resource management from the aardvark?\nQuestion: Does the puffin learn the basics of resource management from the aardvark?",
        "idx": 127,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the puffin, if it has a card whose color appears in the flag of Italy, then we can conclude that it does not learn elementary resource management from the aardvark.\nrule1() = has_card(puffin, card) & color(card) in flag_colors(Italy) => not learn_resource_management(puffin, aardvark)\n\n# The current state of the game is as follows\n# The puffin has a card that is red in color.\nhas_card(puffin, card) = True\ncolor(card) = red\n\n# Based on the game state and the rules and preferences, does the puffin learn the basics of resource management from the aardvark?\nquestion = learn_resource_management(puffin, aardvark)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not respect the salmon, you can be certain that it will hold the same number of points as the halibut without a doubt\nRule2: The kangaroo does not hold an equal number of points as the halibut, in the case where the grizzly bear removes one of the pieces of the kangaroo.\n\nThe current state of the game is as follows\nThe kangaroo does not need support from the salmon.\n\nBased on the game state and the rules and preferences, does the kangaroo hold the same number of points as the halibut?\nQuestion: Does the kangaroo hold the same number of points as the halibut?",
        "idx": 128,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not respect the salmon, you can be certain that it will hold the same number of points as the halibut without a doubt\nrule1() = not respect(animal, salmon) => points(animal) == points(halibut)\n# Rule2: The kangaroo does not hold an equal number of points as the halibut, in the case where the grizzly bear removes one of the pieces of the kangaroo.\nrule2() = remove_piece(grizzly_bear, kangaroo) => points(kangaroo) != points(halibut)\n\n# The current state of the game is as follows\n# The kangaroo does not need support from the salmon.\nneed_support(kangaroo, salmon) = False\n\n# Based on the game state and the rules and preferences, does the kangaroo hold the same number of points as the halibut?\nquestion = points(kangaroo) == points(halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The gecko burns the warehouse of the parrot whenever at least one animal raises a peace flag for the cat.\n\nThe current state of the game is as follows\nThe snail raises a peace flag for the cat.\n\nBased on the game state and the rules and preferences, does the gecko burn the warehouse of the parrot?\nQuestion: Does the gecko burn the warehouse of the parrot?",
        "idx": 129,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The gecko burns the warehouse of the parrot whenever at least one animal raises a peace flag for the cat.\nrule1() = raise_flag_of_peace(animal, cat) => burn_warehouse(gecko, parrot)\n\n# The current state of the game is as follows\n# The snail raises a peace flag for the cat.\nraise_flag_of_peace(snail, cat) = True\n\n# Based on the game state and the rules and preferences, does the gecko burn the warehouse of the parrot?\nquestion = burn_warehouse(gecko, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the dog does not need the support of the whale and the eagle does not sing a song of victory for the whale, then the whale will never learn elementary resource management from the kudu.\n\nThe current state of the game is as follows\nThe dog does not need support from the whale.\nThe eagle does not sing a victory song for the whale.\n\nBased on the game state and the rules and preferences, does the whale learn the basics of resource management from the kudu?\nQuestion: Does the whale learn the basics of resource management from the kudu?",
        "idx": 130,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the dog does not need the support of the whale and the eagle does not sing a song of victory for the whale, then the whale will never learn elementary resource management from the kudu.\nrule1() = not need_support(dog, whale) & not sing_victory_song(eagle, whale) => not learn_resource_management(whale, kudu)\n\n# The current state of the game is as follows\n# The dog does not need support from the whale\nneed_support(dog, whale) = False\n# The eagle does not sing a victory song for the whale.\nsing_victory_song(eagle, whale) = False\n\n# Based on the game state and the rules and preferences, does the whale learn the basics of resource management from the kudu?\nquestion = learn_resource_management(whale, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squirrel has a name whose first letter is the same as the first letter of the kangaroo's name, then the squirrel becomes an enemy of the kiwi.\n\nThe current state of the game is as follows\nThe kangaroo is named Pashmak.\nThe squirrel is named Milo.\n\nBased on the game state and the rules and preferences, does the squirrel become an enemy of the kiwi?\nQuestion: Does the squirrel become an enemy of the kiwi?",
        "idx": 131,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squirrel has a name whose first letter is the same as the first letter of the kangaroo's name, then the squirrel becomes an enemy of the kiwi.\nrule1() = first_letter(name(squirrel)) == first_letter(name(kangaroo)) => enemy(squirrel, kiwi)\n\n# The current state of the game is as follows\n# The kangaroo is named Pashmak\nname(kangaroo) = \"Pashmak\"\n# The squirrel is named Milo.\nname(squirrel) = \"Milo\"\n\n# Based on the game state and the rules and preferences, does the squirrel become an enemy of the kiwi?\nquestion = enemy(squirrel, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not wink at the cow, you can be certain that it will not steal five points from the rabbit.\nRule2: If something holds an equal number of points as the canary, then it steals five points from the rabbit, too.\n\nThe current state of the game is as follows\nThe polar bear holds the same number of points as the canary.\n\nBased on the game state and the rules and preferences, does the polar bear steal five points from the rabbit?\nQuestion: Does the polar bear steal five points from the rabbit?",
        "idx": 132,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not wink at the cow, you can be certain that it will not steal five points from the rabbit\nrule1() = not wink(animal, cow) => not steal_points(animal, 5, rabbit)\n# Rule2: If something holds an equal number of points as the canary, then it steals five points from the rabbit, too.\nrule2() = points(something) == points(canary) => steal_points(something, 5, rabbit)\n\n# The current state of the game is as follows\n# The polar bear holds the same number of points as the canary.\npoints(polar_bear) == points(canary) = True\n\n# Based on the game state and the rules and preferences, does the polar bear steal five points from the rabbit?\nquestion = steal_points(polar_bear, 5, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something does not know the defensive plans of the jellyfish but holds an equal number of points as the squid because in this case it certainly does not know the defense plan of the blobfish (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe parrot holds the same number of points as the squid.\nThe parrot does not know the defensive plans of the jellyfish.\n\nBased on the game state and the rules and preferences, does the parrot know the defensive plans of the blobfish?\nQuestion: Does the parrot know the defensive plans of the blobfish?",
        "idx": 133,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not know the defensive plans of the jellyfish but holds an equal number of points as the squid because in this case it certainly does not know the defense plan of the blobfish (this may or may not be problematic).\nrule1() = not know_defensive_plans(parrot, jellyfish) & points(parrot) == points(squid) => not know_defensive_plans(parrot, blobfish)\n\n# The current state of the game is as follows\n# The parrot holds the same number of points as the squid\npoints(parrot) == points(squid) = True\n# The parrot does not know the defensive plans of the jellyfish.\nknow_defensive_plans(parrot, jellyfish) = False\n\n# Based on the game state and the rules and preferences, does the parrot know the defensive plans of the blobfish?\nquestion = know_defensive_plans(parrot, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the carp, if it has more than ten friends, then we can conclude that it needs support from the baboon.\n\nThe current state of the game is as follows\nThe carp has 10 friends.\n\nBased on the game state and the rules and preferences, does the carp need support from the baboon?\nQuestion: Does the carp need support from the baboon?",
        "idx": 134,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the carp, if it has more than ten friends, then we can conclude that it needs support from the baboon.\nrule1() = friends(carp) > 10 => need_support(carp, baboon)\n\n# The current state of the game is as follows\n# The carp has 10 friends.\nfriends(carp) = 10\n\n# Based on the game state and the rules and preferences, does the carp need support from the baboon?\nquestion = need_support(carp, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cheetah has a leafy green vegetable, then the cheetah eats the food of the cockroach.\nRule2: If the cheetah has a name whose first letter is the same as the first letter of the eagle's name, then the cheetah eats the food that belongs to the cockroach.\n\nThe current state of the game is as follows\nThe cheetah has a computer.\nThe cheetah is named Teddy.\nThe eagle is named Tango.\n\nBased on the game state and the rules and preferences, does the cheetah eat the food of the cockroach?\nQuestion: Does the cheetah eat the food of the cockroach?",
        "idx": 135,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cheetah has a leafy green vegetable, then the cheetah eats the food of the cockroach\nrule1() = has(cheetah, leafy_green_vegetable) => eat_food(cheetah, cockroach)\n# Rule2: If the cheetah has a name whose first letter is the same as the first letter of the eagle's name, then the cheetah eats the food that belongs to the cockroach.\nrule2() = first_letter(name(cheetah)) == first_letter(name(eagle)) => eat_food(cheetah, cockroach)\n\n# The current state of the game is as follows\n# The cheetah has a computer\nhas(cheetah, computer) = True\n# The cheetah is named Teddy\nname(cheetah) = \"Teddy\"\n# The eagle is named Tango.\nname(eagle) = \"Tango\"\n\n# Based on the game state and the rules and preferences, does the cheetah eat the food of the cockroach?\nquestion = eat_food(cheetah, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the turtle knows the defensive plans of the oscar and the phoenix does not give a magnifier to the oscar, then the oscar will never eat the food that belongs to the grizzly bear.\n\nThe current state of the game is as follows\nThe turtle knows the defensive plans of the oscar.\nThe phoenix does not give a magnifier to the oscar.\n\nBased on the game state and the rules and preferences, does the oscar eat the food of the grizzly bear?\nQuestion: Does the oscar eat the food that belongs to the grizzly bear?",
        "idx": 136,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the turtle knows the defensive plans of the oscar and the phoenix does not give a magnifier to the oscar, then the oscar will never eat the food that belongs to the grizzly bear.\nrule1() = knows(turtle, defensive_plans, oscar) & not give_magnifier(phoenix, oscar) => not eat_food(oscar, grizzly_bear)\n\n# The current state of the game is as follows\n# The turtle knows the defensive plans of the oscar\nknows(turtle, defensive_plans, oscar) = True\n# The phoenix does not give a magnifier to the oscar.\ngive_magnifier(phoenix, oscar) = False\n\n# Based on the game state and the rules and preferences, does the oscar eat the food of the grizzly bear?\nquestion = eat_food(oscar, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something does not need support from the eel but eats the food that belongs to the tilapia because in this case it certainly does not burn the warehouse that is in possession of the mosquito (this may or may not be problematic)\nRule2: For the parrot, if the belief is that the bat does not need support from the parrot but the sheep becomes an enemy of the parrot, then you can add \"the parrot burns the warehouse of the mosquito\" to your conclusions.\n\nThe current state of the game is as follows\nThe bat needs support from the parrot.\nThe sheep becomes an enemy of the parrot.\nThe parrot does not need support from the eel.\n\nBased on the game state and the rules and preferences, does the parrot burn the warehouse of the mosquito?\nQuestion: Does the parrot burn the warehouse of the mosquito?",
        "idx": 137,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not need support from the eel but eats the food that belongs to the tilapia because in this case it certainly does not burn the warehouse that is in possession of the mosquito (this may or may not be problematic)\nrule1() = not need_support(eel) & eat_food(something, tilapia) => not burn_warehouse(something, mosquito)\n# Rule2: For the parrot, if the belief is that the bat does not need support from the parrot but the sheep becomes an enemy of the parrot, then you can add \"the parrot burns the warehouse of the mosquito\" to your conclusions.\nrule2() = not need_support(bat, parrot) & enemy(sheep, parrot) => burn_warehouse(parrot, mosquito)\n\n# The current state of the game is as follows\n# The bat needs support from the parrot\nneed_support(bat, parrot) = True\n# The sheep becomes an enemy of the parrot\nenemy(sheep, parrot) = True\n# The parrot does not need support from the eel.\nnot need_support(parrot, eel) = True\n\n# Based on the game state and the rules and preferences, does the parrot burn the warehouse of the mosquito?\nquestion = burn_warehouse(parrot, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion learns the basics of resource management from the zander and the black bear learns the basics of resource management from the zander, then the zander respects the dog.\n\nThe current state of the game is as follows\nThe black bear learns the basics of resource management from the zander.\nThe lion learns the basics of resource management from the zander.\n\nBased on the game state and the rules and preferences, does the zander respect the dog?\nQuestion: Does the zander respect the dog?",
        "idx": 138,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lion learns the basics of resource management from the zander and the black bear learns the basics of resource management from the zander, then the zander respects the dog.\nrule1() = learn_basics(lion, resource_management, zander) & learn_basics(black_bear, resource_management, zander) => respect(zander, dog)\n\n# The current state of the game is as follows\n# The black bear learns the basics of resource management from the zander\nlearn_basics(black_bear, resource_management, zander) = True\n# The lion learns the basics of resource management from the zander.\nlearn_basics(lion, resource_management, zander) = True\n\n# Based on the game state and the rules and preferences, does the zander respect the dog?\nquestion = respect(zander, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the raven, if it has a card with a primary color, then we can conclude that it does not hold the same number of points as the carp.\nRule2: Regarding the raven, if it has a name whose first letter is the same as the first letter of the panther's name, then we can conclude that it does not hold an equal number of points as the carp.\n\nThe current state of the game is as follows\nThe panther is named Lucy.\nThe raven has a card that is orange in color, and is named Luna.\n\nBased on the game state and the rules and preferences, does the raven hold the same number of points as the carp?\nQuestion: Does the raven hold the same number of points as the carp?",
        "idx": 139,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the raven, if it has a card with a primary color, then we can conclude that it does not hold the same number of points as the carp\nrule1() = has_card(raven, primary_color) => not hold_same_points(raven, carp)\n# Rule2: Regarding the raven, if it has a name whose first letter is the same as the first letter of the panther's name, then we can conclude that it does not hold an equal number of points as the carp.\nrule2() = first_letter_of_name(raven) == first_letter_of_name(panther) => not hold_same_points(raven, carp)\n\n# The current state of the game is as follows\n# The panther is named Lucy\nname(panther) = \"Lucy\"\n# The raven has a card that is orange in color, and is named Luna.\nhas_card(raven, orange_color) = True\nname(raven) = \"Luna\"\n\n# Based on the game state and the rules and preferences, does the raven hold the same number of points as the carp?\nquestion = hold_same_points(raven, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not know the defense plan of the canary, then it learns the basics of resource management from the tiger.\n\nThe current state of the game is as follows\nThe tilapia knows the defensive plans of the canary.\n\nBased on the game state and the rules and preferences, does the tilapia learn the basics of resource management from the tiger?\nQuestion: Does the tilapia learn the basics of resource management from the tiger?",
        "idx": 140,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not know the defense plan of the canary, then it learns the basics of resource management from the tiger.\nrule1() = not knows_defense_plan(something, canary) => learn_basics_resource_management(something, tiger)\n\n# The current state of the game is as follows\n# The tilapia knows the defensive plans of the canary.\nknows_defense_plan(tilapia, canary) = True\n\n# Based on the game state and the rules and preferences, does the tilapia learn the basics of resource management from the tiger?\nquestion = learn_basics_resource_management(tilapia, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something becomes an enemy of the squid but does not remove from the board one of the pieces of the dog, what can you certainly conclude? You can conclude that it steals five points from the mosquito.\n\nThe current state of the game is as follows\nThe lion becomes an enemy of the squid but does not remove from the board one of the pieces of the dog.\n\nBased on the game state and the rules and preferences, does the lion steal five points from the mosquito?\nQuestion: Does the lion steal five points from the mosquito?",
        "idx": 141,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something becomes an enemy of the squid but does not remove from the board one of the pieces of the dog, what can you certainly conclude? You can conclude that it steals five points from the mosquito.\nrule1() = enemy(something, squid) & not remove_from_board(dog, something) => steal_points(something, 5, mosquito)\n\n# The current state of the game is as follows\n# The lion becomes an enemy of the squid but does not remove from the board one of the pieces of the dog.\nenemy(lion, squid) = True\nnot remove_from_board(dog, lion) = True\n\n# Based on the game state and the rules and preferences, does the lion steal five points from the mosquito?\nquestion = steal_points(lion, 5, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the jellyfish has a name whose first letter is the same as the first letter of the halibut's name, then the jellyfish does not offer a job to the swordfish.\n\nThe current state of the game is as follows\nThe halibut is named Beauty.\nThe jellyfish is named Blossom.\n\nBased on the game state and the rules and preferences, does the jellyfish offer a job to the swordfish?\nQuestion: Does the jellyfish offer a job to the swordfish?",
        "idx": 142,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the jellyfish has a name whose first letter is the same as the first letter of the halibut's name, then the jellyfish does not offer a job to the swordfish.\nrule1() = first_letter(name(jellyfish)) == first_letter(name(halibut)) => not offer_job(jellyfish, swordfish)\n\n# The current state of the game is as follows\n# The halibut is named Beauty\nname(halibut) = \"Beauty\"\n# The jellyfish is named Blossom.\nname(jellyfish) = \"Blossom\"\n\n# Based on the game state and the rules and preferences, does the jellyfish offer a job to the swordfish?\nquestion = offer_job(jellyfish, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sun bear voted for the mayor, then the sun bear knocks down the fortress that belongs to the sea bass.\nRule2: If the sun bear has a card whose color starts with the letter \"b\", then the sun bear knocks down the fortress that belongs to the sea bass.\n\nThe current state of the game is as follows\nThe sun bear has a card that is white in color.\nThe sun bear parked her bike in front of the store.\n\nBased on the game state and the rules and preferences, does the sun bear knock down the fortress of the sea bass?\nQuestion: Does the sun bear knock down the fortress of the sea bass?",
        "idx": 143,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sun bear voted for the mayor, then the sun bear knocks down the fortress that belongs to the sea bass\nrule1() = voted_for(sun_bear, mayor) => knock_down_fortress(sun_bear, sea_bass)\n# Rule2: If the sun bear has a card whose color starts with the letter \"b\", then the sun bear knocks down the fortress that belongs to the sea bass.\nrule2() = has_card(sun_bear, card) & starts_with_color(card, \"b\") => knock_down_fortress(sun_bear, sea_bass)\n\n# The current state of the game is as follows\n# The sun bear has a card that is white in color\nhas_card(sun_bear, card) = True\ncolor(card, white) = True\n# The sun bear parked her bike in front of the store.\nparked_bike(sun_bear, front_of_store) = True\n\n# Based on the game state and the rules and preferences, does the sun bear knock down the fortress of the sea bass?\nquestion = knock_down_fortress(sun_bear, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something prepares armor for the kudu, then it shows her cards (all of them) to the lobster, too.\n\nThe current state of the game is as follows\nThe canary prepares armor for the kudu.\n\nBased on the game state and the rules and preferences, does the canary show all her cards to the lobster?\nQuestion: Does the canary show all her cards to the lobster?",
        "idx": 144,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something prepares armor for the kudu, then it shows her cards (all of them) to the lobster, too.\nrule1() = prepare_armor(something, kudu) => show_cards(something, lobster)\n\n# The current state of the game is as follows\n# The canary prepares armor for the kudu.\nprepare_armor(canary, kudu) = True\n\n# Based on the game state and the rules and preferences, does the canary show all her cards to the lobster?\nquestion = show_cards(canary, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the puffin, if it has a name whose first letter is the same as the first letter of the hippopotamus's name, then we can conclude that it does not show all her cards to the buffalo.\nRule2: Regarding the puffin, if it has more than 10 friends, then we can conclude that it does not show all her cards to the buffalo.\n\nThe current state of the game is as follows\nThe hippopotamus is named Pablo.\nThe puffin has 5 friends, and is named Peddi.\n\nBased on the game state and the rules and preferences, does the puffin show all her cards to the buffalo?\nQuestion: Does the puffin show all her cards to the buffalo?",
        "idx": 145,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the puffin, if it has a name whose first letter is the same as the first letter of the hippopotamus's name, then we can conclude that it does not show all her cards to the buffalo\nrule1() = first_letter(name(puffin)) == first_letter(name(hippopotamus)) => not show_all_cards(puffin, buffalo)\n# Rule2: Regarding the puffin, if it has more than 10 friends, then we can conclude that it does not show all her cards to the buffalo.\nrule2() = friends(puffin) > 10 => not show_all_cards(puffin, buffalo)\n\n# The current state of the game is as follows\n# The hippopotamus is named Pablo\nname(hippopotamus) = \"Pablo\"\n# The puffin has 5 friends, and is named Peddi.\nfriends(puffin) = 5\nname(puffin) = \"Peddi\"\n\n# Based on the game state and the rules and preferences, does the puffin show all her cards to the buffalo?\nquestion = show_all_cards(puffin, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job to the catfish, then it does not owe money to the gecko.\nRule2: Regarding the oscar, if it is a fan of Chris Ronaldo, then we can conclude that it owes money to the gecko.\nRule3: Regarding the oscar, if it has a name whose first letter is the same as the first letter of the hare's name, then we can conclude that it owes money to the gecko.\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe hare is named Pablo.\nThe oscar hates Chris Ronaldo.\nThe oscar is named Lola.\n\nBased on the game state and the rules and preferences, does the oscar owe money to the gecko?\nQuestion: Does the oscar owe money to the gecko?",
        "idx": 146,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something offers a job to the catfish, then it does not owe $$$ to the gecko\nrule1() = offer_job_position(something, catfish) => not owe(something, money, gecko)\n# Rule2: Regarding the oscar, if it is a fan of Chris Ronaldo, then we can conclude that it owes $$$ to the gecko\nrule2() = fan_of(oscar, Chris_Ronaldo) => owe(oscar, money, gecko)\n# Rule3: Regarding the oscar, if it has a name whose first letter is the same as the first letter of the hare's name, then we can conclude that it owes $$$ to the gecko.\nrule3() = first_letter(name(oscar)) == first_letter(name(hare)) => owe(oscar, money, gecko)\n\n# Rule1 is preferred over Rule2\nprefer(rule1, rule2)\n# Rule1 is preferred over Rule3\nprefer(rule1, rule3)\n\n# The current state of the game is as follows\n# The hare is named Pablo\nname(hare) = \"Pablo\"\n# The oscar hates Chris Ronaldo\nfan_of(oscar, Chris_Ronaldo) = False\n# The oscar is named Lola.\nname(oscar) = \"Lola\"\n\n# Based on the game state and the rules and preferences, does the oscar owe money to the gecko?\nquestion = owe(oscar, money, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the squid, if it has a name whose first letter is the same as the first letter of the pig's name, then we can conclude that it does not proceed to the spot right after the snail.\nRule2: If you are positive that you saw one of the animals eats the food of the jellyfish, you can be certain that it will also proceed to the spot right after the snail.\n\nThe current state of the game is as follows\nThe pig is named Paco.\nThe squid eats the food of the jellyfish, and is named Lola.\nThe squid lost her keys.\n\nBased on the game state and the rules and preferences, does the squid proceed to the spot right after the snail?\nQuestion: Does the squid proceed to the spot right after the snail?",
        "idx": 147,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the squid, if it has a name whose first letter is the same as the first letter of the pig's name, then we can conclude that it does not proceed to the spot right after the snail\nrule1() = first_letter(name(squid)) == first_letter(name(pig)) => not proceed_to_spot(squid, right_after(snail))\n# Rule2: If you are positive that you saw one of the animals eats the food of the jellyfish, you can be certain that it will also proceed to the spot right after the snail.\nrule2() = eats_food(animal) == jellyfish => proceed_to_spot(animal, right_after(snail))\n\n# The current state of the game is as follows\n# The pig is named Paco\nname(pig) = \"Paco\"\n# The squid eats the food of the jellyfish, and is named Lola\neats_food(squid) = jellyfish\nname(squid) = \"Lola\"\n# The squid lost her keys.\nlost_keys(squid) = True\n\n# Based on the game state and the rules and preferences, does the squid proceed to the spot right after the snail?\nquestion = proceed_to_spot(squid, right_after(snail))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the penguin, if it has a musical instrument, then we can conclude that it does not eat the food of the halibut.\n\nThe current state of the game is as follows\nThe penguin has a trumpet.\n\nBased on the game state and the rules and preferences, does the penguin eat the food of the halibut?\nQuestion: Does the penguin eat the food of the halibut?",
        "idx": 148,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the penguin, if it has a musical instrument, then we can conclude that it does not eat the food of the halibut.\nrule1() = has(penguin, musical_instrument) => not eat_food(penguin, halibut)\n\n# The current state of the game is as follows\n# The penguin has a trumpet.\nhas(penguin, trumpet) = True\n\n# Based on the game state and the rules and preferences, does the penguin eat the food of the halibut?\nquestion = eat_food(penguin, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the phoenix, if it has a musical instrument, then we can conclude that it sings a victory song for the rabbit.\nRule2: Be careful when something raises a peace flag for the moose but does not remove from the board one of the pieces of the gecko because in this case it will, surely, not sing a victory song for the rabbit (this may or may not be problematic).\nRule2 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe phoenix becomes an enemy of the moose and has a cappuccino.\n\nBased on the game state and the rules and preferences, does the phoenix sing a victory song for the rabbit?\nQuestion: Does the phoenix sing a victory song for the rabbit?",
        "idx": 149,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the phoenix, if it has a musical instrument, then we can conclude that it sings a victory song for the rabbit\nrule1() = has(phoenix, musical_instrument) => sings_victory_song(phoenix, rabbit)\n\n# Rule2: Be careful when something raises a peace flag for the moose but does not remove from the board one of the pieces of the gecko because in this case it will, surely, not sing a victory song for the rabbit (this may or may not be problematic).\nrule2() = raise_flag_of_peace(something, moose) & not remove_piece(something, gecko) => not sings_victory_song(something, rabbit)\n\n# Rule2 is preferred over Rule1\npreferred_rule() = rule2() > rule1()\n\n# The current state of the game is as follows\n# The phoenix becomes an enemy of the moose, and has a cappuccino.\nbecomes_enemy(phoenix, moose) = True\nhas(phoenix, cappuccino) = True\n\n# Based on the game state and the rules and preferences, does the phoenix sing a victory song for the rabbit?\nquestion = sings_victory_song(phoenix, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the ferret has a name whose first letter is the same as the first letter of the baboon's name, then the ferret owes money to the sea bass.\n\nThe current state of the game is as follows\nThe baboon is named Max.\nThe ferret is named Milo.\n\nBased on the game state and the rules and preferences, does the ferret owe money to the sea bass?\nQuestion: Does the ferret owe money to the sea bass?",
        "idx": 150,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the ferret has a name whose first letter is the same as the first letter of the baboon's name, then the ferret owes $$$ to the sea bass.\nrule1() = first_letter(name(ferret)) == first_letter(name(baboon)) => owe(ferret, money, sea_bass)\n\n# The current state of the game is as follows\n# The baboon is named Max\nname(baboon) = \"Max\"\n# The ferret is named Milo.\nname(ferret) = \"Milo\"\n\n# Based on the game state and the rules and preferences, does the ferret owe money to the sea bass?\nquestion = owe(ferret, money, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the cow, if it has something to carry apples and oranges, then we can conclude that it does not attack the green fields whose owner is the whale.\nRule2: If the cow has something to drink, then the cow does not attack the green fields of the whale.\n\nThe current state of the game is as follows\nThe cow has a couch.\nThe cow has a plastic bag.\n\nBased on the game state and the rules and preferences, does the cow attack the green fields whose owner is the whale?\nQuestion: Does the cow attack the green fields whose owner is the whale?",
        "idx": 151,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cow, if it has something to carry apples and oranges, then we can conclude that it does not attack the green fields whose owner is the whale\nrule1() = has(cow, carry_apples_oranges) => not attack(cow, green_fields(whale))\n# Rule2: If the cow has something to drink, then the cow does not attack the green fields of the whale.\nrule2() = has(cow, drink) => not attack(cow, green_fields(whale))\n\n# The current state of the game is as follows\n# The cow has a couch\nhas(cow, couch) = True\n# The cow has a plastic bag.\nhas(cow, plastic_bag) = True\n\n# Based on the game state and the rules and preferences, does the cow attack the green fields whose owner is the whale?\nquestion = attack(cow, green_fields(whale))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal holds an equal number of points as the dog, then the leopard does not give a magnifier to the rabbit.\nRule2: If the leopard has a sharp object, then the leopard gives a magnifier to the rabbit.\nRule3: If the leopard is a fan of Chris Ronaldo, then the leopard gives a magnifying glass to the rabbit.\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe leopard has a cell phone and hates Chris Ronaldo.\n\nBased on the game state and the rules and preferences, does the leopard give a magnifier to the rabbit?\nQuestion: Does the leopard give a magnifier to the rabbit?",
        "idx": 152,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal holds an equal number of points as the dog, then the leopard does not give a magnifier to the rabbit\nrule1() = exists_animal(points(animal) == points(dog)) => not give_magnifier(leopard, rabbit)\n# Rule2: If the leopard has a sharp object, then the leopard gives a magnifier to the rabbit\nrule2() = has(leopard, sharp_object) => give_magnifier(leopard, rabbit)\n# Rule3: If the leopard is a fan of Chris Ronaldo, then the leopard gives a magnifying glass to the rabbit.\nrule3() = fan_of(leopard, Chris_Ronaldo) => give_magnifying_glass(leopard, rabbit)\n\n# Rule1 is preferred over Rule2\npreferred_rule1_over_rule2() = rule1() and not rule2()\n# Rule1 is preferred over Rule3\npreferred_rule1_over_rule3() = rule1() and not rule3()\n\n# The current state of the game is as follows\n# The leopard has a cell phone, and hates Chris Ronaldo.\nhas(leopard, cell_phone) = True\nhates(leopard, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the leopard give a magnifier to the rabbit?\nquestion = give_magnifier(leopard, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the leopard has more than one friend, then the leopard removes one of the pieces of the koala.\nRule2: If the leopard has a leafy green vegetable, then it removes from the board one of the pieces of the koala.\n\nThe current state of the game is as follows\nThe leopard has 11 friends.\nThe leopard has a basket.\n\nBased on the game state and the rules and preferences, does the leopard remove from the board one of the pieces of the koala?\nQuestion: Does the leopard remove from the board one of the pieces of the koala?",
        "idx": 153,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the leopard has more than one friend, then the leopard removes one of the pieces of the koala\nrule1() = friends(leopard) > 1 => remove_piece(leopard, koala)\n# Rule2: Regarding the leopard, if it has a leafy green vegetable, then we can conclude that it removes from the board one of the pieces of the koala.\nrule2() = has(leopard, leafy_green_vegetable) => remove_piece(leopard, koala)\n\n# The current state of the game is as follows\n# The leopard has 11 friends\nfriends(leopard) = 11\n# The leopard has a basket.\nhas(leopard, basket) = True\n\n# Based on the game state and the rules and preferences, does the leopard remove from the board one of the pieces of the koala?\nquestion = remove_piece(leopard, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals raises a peace flag for the octopus, you can be certain that it will not proceed to the spot right after the caterpillar.\nRule2: If the rabbit prepares armor for the squirrel, then the squirrel proceeds to the spot that is right after the spot of the caterpillar.\nRule2 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe squirrel raises a peace flag for the octopus.\n\nBased on the game state and the rules and preferences, does the squirrel proceed to the spot right after the caterpillar?\nQuestion: Does the squirrel proceed to the spot right after the caterpillar?",
        "idx": 154,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals raises a peace flag for the octopus, you can be certain that it will not proceed to the spot right after the caterpillar\nrule1() = raise_flag_of_peace(animal, octopus) => not proceed_to_spot(animal, right_after, caterpillar)\n\n# Rule2: If the rabbit prepares armor for the squirrel, then the squirrel proceeds to the spot that is right after the spot of the caterpillar.\nrule2() = prepare_armor(rabbit, squirrel) => proceed_to_spot(squirrel, right_after, caterpillar)\n\n# Rule2 is preferred over Rule1\npreferred_rule() = rule2()\n\n# The current state of the game is as follows\n# The squirrel raises a peace flag for the octopus.\nraise_flag_of_peace(squirrel, octopus) = True\n\n# Based on the game state and the rules and preferences, does the squirrel proceed to the spot right after the caterpillar?\nquestion = proceed_to_spot(squirrel, right_after, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the cricket, if it owns a luxury aircraft, then we can conclude that it does not offer a job to the starfish\nRule2: Regarding the cricket, if it has fewer than 12 friends, then we can conclude that it offers a job position to the starfish\nRule3: Regarding the cricket, if it has a card whose color starts with the letter \"l\", then we can conclude that it does not offer a job position to the starfish.\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cricket has a card that is yellow in color.\nThe cricket has thirteen friends.\n\nBased on the game state and the rules and preferences, does the cricket offer a job to the starfish?\nQuestion: Does the cricket offer a job to the starfish?",
        "idx": 155,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cricket, if it owns a luxury aircraft, then we can conclude that it does not offer a job to the starfish\nrule1() = owns(cricket, luxury_aircraft) => not offer_job_position(cricket, starfish)\n# Rule2: Regarding the cricket, if it has fewer than 12 friends, then we can conclude that it offers a job position to the starfish\nrule2() = friends(cricket) < 12 => offer_job_position(cricket, starfish)\n# Rule3: Regarding the cricket, if it has a card whose color starts with the letter \"l\", then we can conclude that it does not offer a job position to the starfish.\nrule3() = starts_with(color(card, \"l\"), \"l\") => not offer_job_position(cricket, starfish)\n\n# Rule1 is preferred over Rule2\npreferred_rule1_over_rule2() = rule1() and not rule2()\n# Rule3 is preferred over Rule2\npreferred_rule3_over_rule2() = rule3() and not rule2()\n\n# The current state of the game is as follows\n# The cricket has a card that is yellow in color\ncolor(card, yellow) = True\n# The cricket has thirteen friends.\nfriends(cricket) = 13\n\n# Based on the game state and the rules and preferences, does the cricket offer a job to the starfish?\nquestion = offer_job_position(cricket, starfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the halibut has a card whose color appears in the flag of Netherlands, then the halibut becomes an actual enemy of the grizzly bear.\n\nThe current state of the game is as follows\nThe donkey learns the basics of resource management from the halibut.\nThe halibut has a card that is white in color.\nThe spider does not learn the basics of resource management from the halibut.\n\nBased on the game state and the rules and preferences, does the halibut become an enemy of the grizzly bear?\nQuestion: Does the halibut become an enemy of the grizzly bear?",
        "idx": 156,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the halibut has a card whose color appears in the flag of Netherlands, then the halibut becomes an actual enemy of the grizzly bear.\nrule1() = has(halibut, card) and color(card) in flag_colors(Netherlands) => enemy(halibut, grizzly_bear)\n\n# The current state of the game is as follows\n# The donkey learns the basics of resource management from the halibut\nlearn_basics(donkey, resource_management, halibut) = True\n# The halibut has a card that is white in color\nhas(halibut, card) = True\ncolor(card, white) = True\n# The spider does not learn the basics of resource management from the halibut.\nlearn_basics(spider, resource_management, halibut) = False\n\n# Based on the game state and the rules and preferences, does the halibut become an enemy of the grizzly bear?\nquestion = enemy(halibut, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cow has more than 3 friends, then the cow does not hold an equal number of points as the ferret\nRule2: Regarding the cow, if it has something to drink, then we can conclude that it holds the same number of points as the ferret\nRule3: Regarding the cow, if it is a fan of Chris Ronaldo, then we can conclude that it holds the same number of points as the ferret.\n\nRule2 is preferred over Rule1\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cow has 13 friends\nThe cow has a flute.\n\nBased on the game state and the rules and preferences, does the cow hold the same number of points as the ferret?\nIf the cow has something to drink, then we can conclude that it holds the same number of points as the ferret.\nOtherwise, if the cow is a fan of Chris Ronaldo, then we can conclude that it holds the same number of points as the ferret.\nOtherwise, we can conclude that the cow does not hold an equal number of points as the ferret.",
        "idx": 157,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cow has more than 3 friends, then the cow does not hold an equal number of points as the ferret\nrule1() = friends(cow) > 3 => not equal_points(cow, ferret)\n# Rule2: Regarding the cow, if it has something to drink, then we can conclude that it holds the same number of points as the ferret\nrule2() = has_drink(cow) => equal_points(cow, ferret)\n# Rule3: Regarding the cow, if it is a fan of Chris Ronaldo, then we can conclude that it holds the same number of points as the ferret.\nrule3() = fan_of(cow, Chris_Ronaldo) => equal_points(cow, ferret)\n\n# Rule2 is preferred over Rule1\npreferred_rule1() = not has_drink(cow)\n# Rule3 is preferred over Rule1\npreferred_rule2() = not fan_of(cow, Chris_Ronaldo)\n\n# The current state of the game is as follows\n# The cow has 13 friends\nfriends(cow) = 13\n# The cow has a flute.\nhas_flute(cow) = True\n\n# Based on the game state and the rules and preferences, does the cow hold the same number of points as the ferret?\nif preferred_rule1():\n    question = not equal_points(cow, ferret)\nelif preferred_rule2():\n    question = equal_points(cow, ferret)\nelse:\n    question = not equal_points(cow, ferret)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the salmon offers a job to the viperfish, then the viperfish sings a victory song for the sea bass.\nRule2: If the viperfish has something to carry apples and oranges, then the viperfish does not sing a victory song for the sea bass.\nRule3: If the viperfish has access to an abundance of food, then we can conclude that it does not sing a song of victory for the sea bass.\n\nRule2 is preferred over Rule1.\nRule3 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe salmon burns the warehouse of the viperfish.\nThe viperfish stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the viperfish sing a victory song for the sea bass?\nQuestion: Does the viperfish sing a victory song for the sea bass?",
        "idx": 158,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the salmon offers a job to the viperfish, then the viperfish sings a victory song for the sea bass\nrule1() = offer_job_position(salmon, viperfish) => sing_victory_song(viperfish, sea_bass)\n# Rule2: If the viperfish has something to carry apples and oranges, then the viperfish does not sing a victory song for the sea bass\nrule2() = has_item(viperfish, apples_oranges) => not sing_victory_song(viperfish, sea_bass)\n# Rule3: Regarding the viperfish, if it has access to an abundance of food, then we can conclude that it does not sing a song of victory for the sea bass.\nrule3() = has_access_to_food(viperfish, abundance) => not sing_victory_song(viperfish, sea_bass)\n\n# Rule2 is preferred over Rule1\npreferred_rule1() = not rule2()\n# Rule3 is preferred over Rule1\npreferred_rule2() = not rule3()\n\n# The current state of the game is as follows\n# The salmon burns the warehouse of the viperfish\nburn_warehouse(salmon, viperfish) = True\n# The viperfish stole a bike from the store.\nstole_bike(viperfish, store) = True\n\n# Based on the game state and the rules and preferences, does the viperfish sing a victory song for the sea bass?\nquestion = sing_victory_song(viperfish, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sun bear has a device to connect to the internet, then the sun bear respects the hare.\nRule2: If the sun bear has a name whose first letter is the same as the first letter of the catfish's name, then the sun bear respects the hare.\n\nThe current state of the game is as follows\nThe catfish is named Bella.\nThe sun bear has a guitar and is named Buddy.\n\nBased on the game state and the rules and preferences, does the sun bear respect the hare?\nQuestion: Does the sun bear respect the hare?",
        "idx": 159,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sun bear has a device to connect to the internet, then the sun bear respects the hare\nrule1() = has_device(sun_bear, internet) => respect(sun_bear, hare)\n# Rule2: If the sun bear has a name whose first letter is the same as the first letter of the catfish's name, then the sun bear respects the hare.\nrule2() = first_letter(name(sun_bear)) == first_letter(name(catfish)) => respect(sun_bear, hare)\n\n# The current state of the game is as follows\n# The catfish is named Bella\nname(catfish) = \"Bella\"\n# The sun bear has a guitar, and is named Buddy.\nhas_device(sun_bear, guitar) = True\nname(sun_bear) = \"Buddy\"\n\n# Based on the game state and the rules and preferences, does the sun bear respect the hare?\nquestion = respect(sun_bear, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eagle has something to sit on, then the eagle knocks down the fortress of the gecko\nRule2: If the eagle has a name whose first letter is the same as the first letter of the polar bear's name, then the eagle does not knock down the fortress of the gecko\nRule3: If the eagle has a card with a primary color, then the eagle knocks down the fortress of the gecko.\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe eagle has a card that is violet in color, and is named Tessa.\nThe polar bear is named Tarzan.\n\nBased on the game state and the rules and preferences, does the eagle knock down the fortress of the gecko?\nQuestion: Does the eagle knock down the fortress of the gecko?",
        "idx": 160,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eagle has something to sit on, then the eagle knocks down the fortress of the gecko\nrule1() = has_something_to_sit_on(eagle) => knock_down_fortress(eagle, gecko)\n# Rule2: If the eagle has a name whose first letter is the same as the first letter of the polar bear's name, then the eagle does not knock down the fortress of the gecko\nrule2() = first_letter(name(eagle)) == first_letter(name(polar_bear)) => not knock_down_fortress(eagle, gecko)\n# Rule3: If the eagle has a card with a primary color, then the eagle knocks down the fortress of the gecko.\nrule3() = has_card(eagle) & primary_color(card(eagle)) => knock_down_fortress(eagle, gecko)\n\n# Rule1 is preferred over Rule2\nrule1_preferred_over_rule2() = rule1() and not rule2()\n# Rule3 is preferred over Rule2\nrule3_preferred_over_rule2() = rule3() and not rule2()\n\n# The current state of the game is as follows\n# The eagle has a card that is violet in color, and is named Tessa\nhas_card(eagle) = True\ncolor(card(eagle), violet) = True\nname(eagle) = \"Tessa\"\n# The polar bear is named Tarzan.\nname(polar_bear) = \"Tarzan\"\n\n# Based on the game state and the rules and preferences, does the eagle knock down the fortress of the gecko?\nquestion = knock_down_fortress(eagle, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hare has a card whose color starts with the letter \"w\", then the hare respects the cheetah.\n\nThe current state of the game is as follows\nThe hare has a card that is red in color.\n\nBased on the game state and the rules and preferences, does the hare respect the cheetah?\nQuestion: Does the hare respect the cheetah?",
        "idx": 161,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hare has a card whose color starts with the letter \"w\", then the hare respects the cheetah.\nrule1() = has(hare, card) & starts_with(color(card), \"w\") => respect(hare, cheetah)\n\n# The current state of the game is as follows\n# The hare has a card that is red in color.\nhas(hare, card) = True\ncolor(card, red) = True\n\n# Based on the game state and the rules and preferences, does the hare respect the cheetah?\nquestion = respect(hare, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the salmon has a name whose first letter is the same as the first letter of the spider's name, then the salmon removes one of the pieces of the carp.\nRule2: Regarding the salmon, if it has a card whose color is one of the rainbow colors, then we can conclude that it removes one of the pieces of the carp.\n\nThe current state of the game is as follows\nThe salmon has a card that is green in color, and is named Blossom.\nThe name of the salmon is \"Blossom\".\nThe name of the spider is \"Pashmak\".\n\nBased on the game state and the rules and preferences, does the salmon remove from the board one of the pieces of the carp?\nQuestion: Does the salmon remove from the board one of the pieces of the carp?",
        "idx": 162,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the salmon has a name whose first letter is the same as the first letter of the spider's name, then the salmon removes one of the pieces of the carp\nrule1() = first_letter(name(salmon)) == first_letter(name(spider)) => remove_piece(salmon, carp)\n# Rule2: Regarding the salmon, if it has a card whose color is one of the rainbow colors, then we can conclude that it removes one of the pieces of the carp.\nrule2() = has(salmon, card) and color(card) in rainbow_colors => remove_piece(salmon, carp)\n\n# The current state of the game is as follows\n# The salmon has a card that is green in color, and is named Blossom\nhas(salmon, card) = True\ncolor(card, green) = True\nname(salmon) = \"Blossom\"\nname(spider) = \"Pashmak\"\n\n# Based on the game state and the rules and preferences, does the salmon remove from the board one of the pieces of the carp?\nquestion = remove_piece(salmon, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the salmon, if it has a card whose color starts with the letter \"l\", then we can conclude that it does not owe money to the phoenix.\nRule2: Regarding the salmon, if it has something to drink, then we can conclude that it does not owe money to the phoenix.\n\nThe current state of the game is as follows\nThe salmon has a card that is black in color.\nThe salmon has a hot chocolate.\n\nBased on the game state and the rules and preferences, does the salmon owe money to the phoenix?\nQuestion: Does the salmon owe money to the phoenix?",
        "idx": 163,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the salmon, if it has a card whose color starts with the letter \"l\", then we can conclude that it does not owe $$$ to the phoenix\nrule1() = starts_with(color(card, \"l\"), \"l\") => not owe(salmon, money, phoenix)\n# Rule2: Regarding the salmon, if it has something to drink, then we can conclude that it does not owe $$$ to the phoenix.\nrule2() = has(salmon, drink) => not owe(salmon, money, phoenix)\n\n# The current state of the game is as follows\n# The salmon has a card that is black in color\ncolor(card, black) = True\n# The salmon has a hot chocolate.\nhas(salmon, drink, hot_chocolate) = True\n\n# Based on the game state and the rules and preferences, does the salmon owe money to the phoenix?\nquestion = owe(salmon, money, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the puffin, if it has a musical instrument, then we can conclude that it knocks down the fortress of the viperfish.\nRule2: If the puffin has a name whose first letter is the same as the first letter of the dog's name, then the puffin knocks down the fortress that belongs to the viperfish.\n\nThe current state of the game is as follows\nThe dog is named Max.\nThe puffin has a plastic bag and is named Chickpea.\n\nBased on the game state and the rules and preferences, does the puffin knock down the fortress of the viperfish?\nQuestion: Does the puffin knock down the fortress of the viperfish?",
        "idx": 164,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the puffin, if it has a musical instrument, then we can conclude that it knocks down the fortress of the viperfish\nrule1() = has(puffin, musical_instrument) => knock_down_fortress(puffin, viperfish)\n# Rule2: If the puffin has a name whose first letter is the same as the first letter of the dog's name, then the puffin knocks down the fortress that belongs to the viperfish.\nrule2() = first_letter(name(puffin)) == first_letter(name(dog)) => knock_down_fortress(puffin, viperfish)\n\n# The current state of the game is as follows\n# The dog is named Max\nname(dog) = \"Max\"\n# The puffin has a plastic bag, and is named Chickpea.\nhas(puffin, plastic_bag) = True\nname(puffin) = \"Chickpea\"\n\n# Based on the game state and the rules and preferences, does the puffin knock down the fortress of the viperfish?\nquestion = knock_down_fortress(puffin, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: For the squirrel, if the belief is that the rabbit offers a job to the squirrel and the cheetah proceeds to the spot right after the squirrel, then you can add \"the squirrel offers a job to the canary\" to your conclusions.\n\nThe current state of the game is as follows\nThe cheetah proceeds to the spot right after the squirrel.\nThe rabbit offers a job to the squirrel.\n\nBased on the game state and the rules and preferences, does the squirrel offer a job to the canary?\nQuestion: Does the squirrel offer a job to the canary?",
        "idx": 165,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the squirrel, if the belief is that the rabbit offers a job to the squirrel and the cheetah proceeds to the spot right after the squirrel, then you can add \"the squirrel offers a job to the canary\" to your conclusions.\nrule1() = offer_job_position(rabbit, squirrel) & proceed_to_spot(cheetah, right_after, squirrel) => offer_job_position(squirrel, canary)\n\n# The current state of the game is as follows\n# The cheetah proceeds to the spot right after the squirrel\nproceed_to_spot(cheetah, right_after, squirrel) = True\n# The rabbit offers a job to the squirrel.\noffer_job_position(rabbit, squirrel) = True\n\n# Based on the game state and the rules and preferences, does the squirrel offer a job to the canary?\nquestion = offer_job_position(squirrel, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal rolls the dice for the viperfish, then the black bear does not learn the basics of resource management from the cheetah.\n\nThe current state of the game is as follows\nThe cockroach rolls the dice for the viperfish.\n\nBased on the game state and the rules and preferences, does the black bear learn the basics of resource management from the cheetah?\nQuestion: Does the black bear learn the basics of resource management from the cheetah?",
        "idx": 166,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal rolls the dice for the viperfish, then the black bear does not learn the basics of resource management from the cheetah.\nrule1() = roll_dice(animal, viperfish) => not learn_basics(black_bear, resource_management, cheetah)\n\n# The current state of the game is as follows\n# The cockroach rolls the dice for the viperfish.\nroll_dice(cockroach, viperfish) = True\n\n# Based on the game state and the rules and preferences, does the black bear learn the basics of resource management from the cheetah?\nquestion = learn_basics(black_bear, resource_management, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the squirrel, if it took a bike from the store, then we can conclude that it becomes an actual enemy of the snail\nRule2: If the squirrel has a name whose first letter is the same as the first letter of the tiger's name, then the squirrel becomes an enemy of the snail\nRule3: If something needs the support of the tiger, then it does not become an enemy of the snail.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe squirrel hates Chris Ronaldo\nThe squirrel is named Chickpea\nThe tiger is named Tarzan.\n\nBased on the game state and the rules and preferences, does the squirrel become an enemy of the snail?\nQuestion: Does the squirrel become an enemy of the snail?",
        "idx": 167,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the squirrel, if it took a bike from the store, then we can conclude that it becomes an actual enemy of the snail\nrule1() = took_bike(squirrel, store) => enemy(squirrel, snail)\n# Rule2: If the squirrel has a name whose first letter is the same as the first letter of the tiger's name, then the squirrel becomes an enemy of the snail\nrule2() = first_letter(name(squirrel)) == first_letter(name(tiger)) => enemy(squirrel, snail)\n# Rule3: If something needs the support of the tiger, then it does not become an enemy of the snail.\nrule3() = needs_support(something) => not enemy(something, snail)\n\n# Rule3 is preferred over Rule1\npreferred_rule1() = not rule3() and rule1()\n# Rule3 is preferred over Rule2\npreferred_rule2() = not rule3() and rule2()\n\n# The current state of the game is as follows\n# The squirrel hates Chris Ronaldo\nhates(squirrel, Chris_Ronaldo) = True\n# The squirrel is named Chickpea\nname(squirrel) = \"Chickpea\"\n# The tiger is named Tarzan.\nname(tiger) = \"Tarzan\"\n\n# Based on the game state and the rules and preferences, does the squirrel become an enemy of the snail?\nquestion = enemy(squirrel, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something holds an equal number of points as the squirrel and winks at the mosquito, what can you certainly conclude? You can conclude that it also needs the support of the caterpillar.\nRule2: If the aardvark offers a job position to the hippopotamus and the parrot holds the same number of points as the hippopotamus, then the hippopotamus will not need the support of the caterpillar.\nRule2 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe aardvark offers a job to the hippopotamus.\nThe hippopotamus holds the same number of points as the squirrel, and winks at the mosquito.\n\nBased on the game state and the rules and preferences, does the hippopotamus need support from the caterpillar?\nQuestion: Does the hippopotamus need support from the caterpillar?",
        "idx": 168,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something holds an equal number of points as the squirrel and winks at the mosquito, what can you certainly conclude? You can conclude that it also needs the support of the caterpillar\nrule1() = points(something) == points(squirrel) & winks(something, mosquito) => needs_support(something, caterpillar)\n\n# Rule2: If the aardvark offers a job position to the hippopotamus and the parrot holds the same number of points as the hippopotamus, then the hippopotamus will not need the support of the caterpillar.\nrule2() = offer_job_position(aardvark, hippopotamus) & points(parrot) == points(hippopotamus) => not needs_support(hippopotamus, caterpillar)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2)\n\n# The current state of the game is as follows\n# The aardvark offers a job to the hippopotamus\noffer_job_position(aardvark, hippopotamus) = True\n# The hippopotamus holds the same number of points as the squirrel, and winks at the mosquito.\npoints(hippopotamus) == points(squirrel) = True\nwinks(hippopotamus, mosquito) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus need support from the caterpillar?\nquestion = needs_support(hippopotamus, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the sheep, if it has a name whose first letter is the same as the first letter of the tilapia's name, then we can conclude that it does not knock down the fortress that belongs to the salmon.\nRule2: Be careful when something rolls the dice for the squirrel and also becomes an actual enemy of the tiger because in this case it will surely knock down the fortress that belongs to the salmon (this may or may not be problematic).\nRule2 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe sheep becomes an enemy of the tiger, and is named Lucy.\nThe name of the sheep is Lucy.\nThe name of the tilapia is Luna.\n\nBased on the game state and the rules and preferences, does the sheep knock down the fortress of the salmon?\nQuestion: Does the sheep knock down the fortress of the salmon?",
        "idx": 169,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the sheep, if it has a name whose first letter is the same as the first letter of the tilapia's name, then we can conclude that it does not knock down the fortress that belongs to the salmon\nrule1() = first_letter(name(sheep)) == first_letter(name(tilapia)) => not knock_down_fortress(sheep, salmon)\n\n# Rule2: Be careful when something rolls the dice for the squirrel and also becomes an actual enemy of the tiger because in this case it will surely knock down the fortress that belongs to the salmon (this may or may not be problematic).\nrule2() = roll_dice(squirrel) & enemy(something, tiger) => knock_down_fortress(something, salmon)\n\n# Rule2 is preferred over Rule1\npreferred_rule() = rule2() > rule1()\n\n# The current state of the game is as follows\n# The sheep becomes an enemy of the tiger, and is named Lucy\nenemy(sheep, tiger) = True\nname(sheep) = \"Lucy\"\nname(tilapia) = \"Luna\"\n\n# Based on the game state and the rules and preferences, does the sheep knock down the fortress of the salmon?\nquestion = knock_down_fortress(sheep, salmon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grasshopper removes one of the pieces of the hippopotamus, then the hippopotamus raises a flag of peace for the cow.\n\nThe current state of the game is as follows\nThe grasshopper prepares armor for the hippopotamus.\n\nBased on the game state and the rules and preferences, does the hippopotamus raise a peace flag for the cow?\nQuestion: Does the hippopotamus raise a peace flag for the cow?",
        "idx": 170,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grasshopper removes one of the pieces of the hippopotamus, then the hippopotamus raises a flag of peace for the cow.\nrule1() = remove_piece(grasshopper, hippopotamus) => raise_flag_of_peace(hippopotamus, cow)\n\n# The current state of the game is as follows\n# The grasshopper prepares armor for the hippopotamus.\nprepare_armor(grasshopper, hippopotamus) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus raise a peace flag for the cow?\nquestion = raise_flag_of_peace(hippopotamus, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the baboon, if it has fewer than 11 friends, then we can conclude that it winks at the panda bear.\n\nThe current state of the game is as follows\nThe baboon has two friends.\nThe kangaroo burns the warehouse of the baboon.\nThe raven attacks the green fields whose owner is the baboon.\n\nBased on the game state and the rules and preferences, does the baboon wink at the panda bear?\nQuestion: Does the baboon wink at the panda bear?",
        "idx": 171,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the baboon, if it has fewer than 11 friends, then we can conclude that it winks at the panda bear.\nrule1() = friends(baboon) < 11 => wink(baboon, panda_bear)\n\n# The current state of the game is as follows\n# The baboon has two friends\nfriends(baboon) = 2\n# The kangaroo burns the warehouse of the baboon\nburns(kangaroo, warehouse, baboon) = True\n# The raven attacks the green fields whose owner is the baboon.\nattacks(raven, green_fields, baboon) = True\n\n# Based on the game state and the rules and preferences, does the baboon wink at the panda bear?\nquestion = wink(baboon, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the halibut, if it has fewer than six friends, then we can conclude that it does not know the defense plan of the cockroach.\nRule2: Regarding the halibut, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not know the defensive plans of the cockroach.\n\nThe current state of the game is as follows\nThe halibut has 16 friends.\nThe halibut has a card that is blue in color.\n\nBased on the game state and the rules and preferences, does the halibut know the defensive plans of the cockroach?\nQuestion: Does the halibut know the defensive plans of the cockroach?",
        "idx": 172,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the halibut, if it has fewer than six friends, then we can conclude that it does not know the defense plan of the cockroach\nrule1() = friends(halibut) < 6 => not know_defense_plan(halibut, cockroach)\n# Rule2: Regarding the halibut, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not know the defensive plans of the cockroach.\nrule2() = has(halibut, card) and color(card) in rainbow_colors => not know_defense_plan(halibut, cockroach)\n\n# The current state of the game is as follows\n# The halibut has 16 friends\nfriends(halibut) = 16\n# The halibut has a card that is blue in color.\nhas(halibut, card) = True\ncolor(card, blue) = True\n\n# Based on the game state and the rules and preferences, does the halibut know the defensive plans of the cockroach?\nquestion = know_defense_plan(halibut, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals becomes an actual enemy of the dog, you can be certain that it will also eat the food that belongs to the salmon.\nRule2: The cricket will not eat the food of the salmon, in the case where the swordfish does not remove one of the pieces of the cricket.\n\nThe current state of the game is as follows\nThe cricket prepares armor for the dog.\n\nBased on the game state and the rules and preferences, does the cricket eat the food of the salmon?\nQuestion: Does the cricket eat the food of the salmon?",
        "idx": 173,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals becomes an actual enemy of the dog, you can be certain that it will also eat the food that belongs to the salmon\nrule1() = enemy(animal, dog) => eat_food(animal, salmon)\n# Rule2: The cricket will not eat the food of the salmon, in the case where the swordfish does not remove one of the pieces of the cricket.\nrule2() = not remove_piece(swordfish, cricket) => not eat_food(cricket, salmon)\n\n# The current state of the game is as follows\n# The cricket prepares armor for the dog.\nprepare_armor(cricket, dog) = True\n\n# Based on the game state and the rules and preferences, does the cricket eat the food of the salmon?\nquestion = eat_food(cricket, salmon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal eats the food that belongs to the lobster, then the wolverine shows her cards (all of them) to the sheep.\n\nThe current state of the game is as follows\nThe doctorfish eats the food of the lobster.\n\nBased on the game state and the rules and preferences, does the wolverine show all her cards to the sheep?\nQuestion: Does the wolverine show all her cards to the sheep?",
        "idx": 174,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal eats the food that belongs to the lobster, then the wolverine shows her cards (all of them) to the sheep.\nrule1() = eats_food(animal, lobster) => show_cards(wolverine, sheep)\n\n# The current state of the game is as follows\n# The doctorfish eats the food of the lobster.\neats_food(doctorfish, lobster) = True\n\n# Based on the game state and the rules and preferences, does the wolverine show all her cards to the sheep?\nquestion = show_cards(wolverine, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sun bear has fewer than one friend, then the sun bear does not need support from the hummingbird.\nRule2: If the sun bear has a high salary, then it does not need the support of the hummingbird.\n\nThe current state of the game is as follows\nThe sun bear got a well-paid job and has 4 friends.\n\nBased on the game state and the rules and preferences, does the sun bear need support from the hummingbird?\nQuestion: Does the sun bear need support from the hummingbird?",
        "idx": 175,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sun bear has fewer than one friend, then the sun bear does not need support from the hummingbird\nrule1() = friends(sun_bear) < 1 => not need_support(sun_bear, hummingbird)\n# Rule2: Regarding the sun bear, if it has a high salary, then we can conclude that it does not need the support of the hummingbird.\nrule2() = has_high_salary(sun_bear) => not need_support(sun_bear, hummingbird)\n\n# The current state of the game is as follows\n# The sun bear got a well-paid job, and has 4 friends.\nhas_high_salary(sun_bear) = True\nfriends(sun_bear) = 4\n\n# Based on the game state and the rules and preferences, does the sun bear need support from the hummingbird?\nquestion = need_support(sun_bear, hummingbird)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the black bear, if it has a leafy green vegetable, then we can conclude that it does not give a magnifier to the eel.\nRule2: Regarding the black bear, if it has a card whose color starts with the letter \"o\", then we can conclude that it gives a magnifying glass to the eel.\nRule3: Regarding the black bear, if it has more than ten friends, then we can conclude that it does not give a magnifying glass to the eel.\nRule4: Regarding the black bear, if it has a name whose first letter is the same as the first letter of the buffalo's name, then we can conclude that it gives a magnifying glass to the eel.\n\nRule2 is preferred over Rule1.\nRule2 is preferred over Rule3.\nRule4 is preferred over Rule1.\nRule4 is preferred over Rule3.\n\nThe current state of the game is as follows\nThe black bear has a card that is white in color, has a knife, and is named Cinnamon.\nThe buffalo is named Beauty.\n\nBased on the game state and the rules and preferences, does the black bear give a magnifier to the eel?\nQuestion: Does the black bear give a magnifying glass to the eel?",
        "idx": 176,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the black bear, if it has a leafy green vegetable, then we can conclude that it does not give a magnifier to the eel\nrule1() = has(black_bear, leafy_green_vegetable) => not give(black_bear, magnifier, eel)\n# Rule2: Regarding the black bear, if it has a card whose color starts with the letter \"o\", then we can conclude that it gives a magnifying glass to the eel\nrule2() = starts_with(color(card(black_bear)), \"o\") => give(black_bear, magnifier, eel)\n# Rule3: Regarding the black bear, if it has more than ten friends, then we can conclude that it does not give a magnifying glass to the eel\nrule3() = friends(black_bear) > 10 => not give(black_bear, magnifier, eel)\n# Rule4: Regarding the black bear, if it has a name whose first letter is the same as the first letter of the buffalo's name, then we can conclude that it gives a magnifying glass to the eel.\nrule4() = first_letter(name(black_bear)) == first_letter(name(buffalo)) => give(black_bear, magnifier, eel)\n\n# Rule2 is preferred over Rule1\nprefer(rule2, rule1)\n# Rule2 is preferred over Rule3\nprefer(rule2, rule3)\n# Rule4 is preferred over Rule1\nprefer(rule4, rule1)\n# Rule4 is preferred over Rule3\nprefer(rule4, rule3)\n\n# The current state of the game is as follows\n# The black bear has a card that is white in color, has a knife, and is named Cinnamon\nhas(black_bear, card) = True\ncolor(card(black_bear), white) = True\nhas(black_bear, knife) = True\nname(black_bear) = \"Cinnamon\"\n# The buffalo is named Beauty.\nname(buffalo) = \"Beauty\"\n\n# Based on the game state and the rules and preferences, does the black bear give a magnifier to the eel?\nquestion = give(black_bear, magnifier, eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal learns elementary resource management from the puffin, then the snail does not attack the green fields whose owner is the hippopotamus.\nRule2: If something does not raise a flag of peace for the wolverine, then it attacks the green fields whose owner is the hippopotamus.\n\nThe current state of the game is as follows\nThe snail does not raise a peace flag for the wolverine.\n\nBased on the game state and the rules and preferences, does the snail attack the green fields whose owner is the hippopotamus?\nQuestion: Does the snail attack the green fields whose owner is the hippopotamus?",
        "idx": 177,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal learns elementary resource management from the puffin, then the snail does not attack the green fields whose owner is the hippopotamus\nrule1() = learn_resource_management(animal, puffin) => not attack(snail, green_fields, hippopotamus)\n# Rule2: If something does not raise a flag of peace for the wolverine, then it attacks the green fields whose owner is the hippopotamus.\nrule2() = not raise_flag_of_peace(something, wolverine) => attack(something, green_fields, hippopotamus)\n\n# The current state of the game is as follows\n# The snail does not raise a peace flag for the wolverine.\nraise_flag_of_peace(snail, wolverine) = False\n\n# Based on the game state and the rules and preferences, does the snail attack the green fields whose owner is the hippopotamus?\nquestion = attack(snail, green_fields, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the tiger, if it took a bike from the store, then we can conclude that it does not sing a victory song for the grizzly bear.\n\nThe current state of the game is as follows\nThe tiger has a card that is red in color.\nThe tiger stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the tiger sing a victory song for the grizzly bear?\nQuestion: Does the tiger sing a victory song for the grizzly bear?",
        "idx": 178,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the tiger, if it took a bike from the store, then we can conclude that it does not sing a victory song for the grizzly bear.\nrule1() = took_bike(tiger, store) => not sing_victory_song(tiger, grizzly_bear)\n\n# The current state of the game is as follows\n# The tiger has a card that is red in color\nhas_card(tiger, red) = True\n# The tiger stole a bike from the store.\ntook_bike(tiger, store) = True\n\n# Based on the game state and the rules and preferences, does the tiger sing a victory song for the grizzly bear?\nquestion = sing_victory_song(tiger, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The sea bass unquestionably burns the warehouse that is in possession of the snail, in the case where the swordfish does not remove from the board one of the pieces of the sea bass.\n\nThe current state of the game is as follows\nThe swordfish removes from the board one of the pieces of the sea bass.\n\nBased on the game state and the rules and preferences, does the sea bass burn the warehouse of the snail?\nQuestion: Does the sea bass burn the warehouse of the snail?",
        "idx": 179,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The sea bass unquestionably burns the warehouse that is in possession of the snail, in the case where the swordfish does not remove from the board one of the pieces of the sea bass.\nrule1() = not remove_from_board(swordfish, piece, sea_bass) => burn_warehouse(sea_bass, snail)\n\n# The current state of the game is as follows\n# The swordfish removes from the board one of the pieces of the sea bass.\nremove_from_board(swordfish, piece, sea_bass) = True\n\n# Based on the game state and the rules and preferences, does the sea bass burn the warehouse of the snail?\nquestion = burn_warehouse(sea_bass, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the caterpillar removes from the board one of the pieces of the lobster, then the lobster steals five of the points of the halibut.\n\nThe current state of the game is as follows\nThe caterpillar removes from the board one of the pieces of the lobster.\n\nBased on the game state and the rules and preferences, does the lobster steal five points from the halibut?\nQuestion: Does the lobster steal five points from the halibut?",
        "idx": 180,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the caterpillar removes from the board one of the pieces of the lobster, then the lobster steals five of the points of the halibut.\nrule1() = remove_piece(caterpillar, lobster) => steal_points(lobster, 5, halibut)\n\n# The current state of the game is as follows\n# The caterpillar removes from the board one of the pieces of the lobster.\nremove_piece(caterpillar, lobster) = True\n\n# Based on the game state and the rules and preferences, does the lobster steal five points from the halibut?\nquestion = steal_points(lobster, 5, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the swordfish, if it has something to sit on, then we can conclude that it burns the warehouse of the halibut.\nRule2: The swordfish does not burn the warehouse of the halibut whenever at least one animal learns elementary resource management from the wolverine.\n\nThe current state of the game is as follows\nThe sun bear learns the basics of resource management from the wolverine.\nThe swordfish has a green card and a harmonica.\n\nBased on the game state and the rules and preferences, does the swordfish burn the warehouse of the halibut?\nQuestion: Does the swordfish burn the warehouse of the halibut?",
        "idx": 181,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the swordfish, if it has something to sit on, then we can conclude that it burns the warehouse of the halibut\nrule1() = has(swordfish, something_to_sit_on) => burn_warehouse(swordfish, halibut)\n# Rule2: The swordfish does not burn the warehouse of the halibut whenever at least one animal learns elementary resource management from the wolverine.\nrule2() = learn_resource_management(animal, wolverine) => not burn_warehouse(swordfish, halibut)\n\n# The current state of the game is as follows\n# The sun bear learns the basics of resource management from the wolverine\nlearn_resource_management(sun_bear, wolverine) = True\n# The swordfish has a card that is green in color, and has a harmonica.\nhas(swordfish, card) = True\ncolor(card, green) = True\nhas(swordfish, harmonica) = True\n\n# Based on the game state and the rules and preferences, does the swordfish burn the warehouse of the halibut?\nquestion = burn_warehouse(swordfish, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the sun bear, if it has fewer than 12 friends, then we can conclude that it removes from the board one of the pieces of the puffin.\nRule2: If the sun bear works more hours than before, then the sun bear does not remove from the board one of the pieces of the puffin.\nRule3: Regarding the sun bear, if it has a name whose first letter is the same as the first letter of the grasshopper's name, then we can conclude that it does not remove from the board one of the pieces of the puffin.\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe sun bear has seventeen friends.\nThe sun bear is named Meadow.\nThe sun bear reduced her work hours recently.\n\nBased on the game state and the rules and preferences, does the sun bear remove from the board one of the pieces of the puffin?\nQuestion: Does the sun bear remove from the board one of the pieces of the puffin?",
        "idx": 182,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the sun bear, if it has fewer than 12 friends, then we can conclude that it removes from the board one of the pieces of the puffin\nrule1() = friends(sun_bear) < 12 => remove_piece(sun_bear, puffin)\n# Rule2: If the sun bear works more hours than before, then the sun bear does not remove from the board one of the pieces of the puffin\nrule2() = work_hours(sun_bear) > previous_work_hours(sun_bear) => not remove_piece(sun_bear, puffin)\n# Rule3: Regarding the sun bear, if it has a name whose first letter is the same as the first letter of the grasshopper's name, then we can conclude that it does not remove from the board one of the pieces of the puffin.\nrule3() = first_letter(name(sun_bear)) == first_letter(name(grasshopper)) => not remove_piece(sun_bear, puffin)\n\n# Rule1 is preferred over Rule2\npreferred_rule(rule1, rule2)\n# Rule1 is preferred over Rule3\npreferred_rule(rule1, rule3)\n\n# The current state of the game is as follows\n# The sun bear has seventeen friends\nfriends(sun_bear) = 17\n# The sun bear is named Meadow\nname(sun_bear) = \"Meadow\"\n# The sun bear reduced her work hours recently.\nwork_hours(sun_bear) < previous_work_hours(sun_bear)\n\n# Based on the game state and the rules and preferences, does the sun bear remove from the board one of the pieces of the puffin?\nquestion = remove_piece(sun_bear, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The sheep learns the basics of resource management from the squirrel whenever at least one animal holds an equal number of points as the buffalo.\n\nThe current state of the game is as follows\nThe moose holds the same number of points as the buffalo.\n\nBased on the game state and the rules and preferences, does the sheep learn the basics of resource management from the squirrel?\nQuestion: Does the sheep learn the basics of resource management from the squirrel?",
        "idx": 183,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The sheep learns the basics of resource management from the squirrel whenever at least one animal holds an equal number of points as the buffalo.\nrule1() = points(moose) == points(buffalo) => learn_basics_of_resource_management(sheep, squirrel)\n\n# The current state of the game is as follows\n# The moose holds the same number of points as the buffalo.\npoints(moose) == points(buffalo) = True\n\n# Based on the game state and the rules and preferences, does the sheep learn the basics of resource management from the squirrel?\nquestion = learn_basics_of_resource_management(sheep, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: For the baboon, if the belief is that the kangaroo attacks the green fields of the baboon and the swordfish does not offer a job to the baboon, then you can add \"the baboon does not become an enemy of the lobster\" to your conclusions.\n\nThe current state of the game is as follows\nThe baboon needs support from the bat but does not need support from the caterpillar.\nThe kangaroo attacks the green fields whose owner is the baboon.\nThe swordfish does not offer a job to the baboon.\n\nBased on the game state and the rules and preferences, does the baboon become an enemy of the lobster?\nQuestion: Does the baboon become an enemy of the lobster?",
        "idx": 184,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the baboon, if the belief is that the kangaroo attacks the green fields of the baboon and the swordfish does not offer a job to the baboon, then you can add \"the baboon does not become an enemy of the lobster\" to your conclusions.\nrule1() = attacks(kangaroo, green_fields(baboon)) & not offer_job_position(swordfish, baboon) => not enemy(baboon, lobster)\n\n# The current state of the game is as follows\n# The baboon needs support from the bat but does not need support from the caterpillar\nneeds_support(baboon, bat) = True\nneeds_support(baboon, caterpillar) = False\n# The kangaroo attacks the green fields whose owner is the baboon\nattacks(kangaroo, green_fields(baboon)) = True\n# The swordfish does not offer a job to the baboon.\noffer_job_position(swordfish, baboon) = False\n\n# Based on the game state and the rules and preferences, does the baboon become an enemy of the lobster?\nquestion = enemy(baboon, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the wolverine has a leafy green vegetable, then the wolverine proceeds to the spot that is right after the spot of the panther.\n\nThe current state of the game is as follows\nThe wolverine has a love seat sofa.\n\nBased on the game state and the rules and preferences, does the wolverine proceed to the spot right after the panther?\nQuestion: Does the wolverine proceed to the spot right after the panther?",
        "idx": 185,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the wolverine has a leafy green vegetable, then the wolverine proceeds to the spot that is right after the spot of the panther.\nrule1() = has(wolverine, leafy_green_vegetable) => proceed_to(wolverine, spot_after(panther))\n\n# The current state of the game is as follows\n# The wolverine has a love seat sofa.\nhas(wolverine, love_seat_sofa) = True\n\n# Based on the game state and the rules and preferences, does the wolverine proceed to the spot right after the panther?\nquestion = proceed_to(wolverine, spot_after(panther))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal attacks the green fields whose owner is the starfish, then the kudu gives a magnifier to the sheep.\nRule2: If something does not prepare armor for the dog but it respects the polar bear, then it is not going to give a magnifier to the sheep.\n\nThe current state of the game is as follows\nThe aardvark attacks the green fields whose owner is the starfish.\nThe kudu respects the polar bear.\n\nBased on the game state and the rules and preferences, does the kudu give a magnifier to the sheep?\nQuestion: Does the kudu give a magnifier to the sheep?",
        "idx": 186,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal attacks the green fields whose owner is the starfish, then the kudu gives a magnifier to the sheep\nrule1() = attacks(green_fields, starfish) => give_magnifier(kudu, sheep)\n# Rule2: If you see that something does not prepare armor for the dog but it respects the polar bear, what can you certainly conclude? You can conclude that it is not going to give a magnifier to the sheep.\nrule2() = not prepare_armor(something, dog) & respect(something, polar_bear) => not give_magnifier(something, sheep)\n\n# The current state of the game is as follows\n# The aardvark attacks the green fields whose owner is the starfish\nattacks(aardvark, green_fields, starfish) = True\n# The kudu respects the polar bear.\nrespect(kudu, polar_bear) = True\n\n# Based on the game state and the rules and preferences, does the kudu give a magnifier to the sheep?\nquestion = give_magnifier(kudu, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cockroach works fewer hours than before, then the cockroach does not burn the warehouse that is in possession of the parrot.\n\nThe current state of the game is as follows\nThe cockroach reduced her work hours recently.\nThe gecko does not sing a victory song for the cockroach.\n\nBased on the game state and the rules and preferences, does the cockroach burn the warehouse of the parrot?\nQuestion: Does the cockroach burn the warehouse of the parrot?",
        "idx": 187,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cockroach works fewer hours than before, then the cockroach does not burn the warehouse that is in possession of the parrot.\nrule1() = work_hours(cockroach) < previous_work_hours(cockroach) => not burn_warehouse(cockroach, parrot)\n\n# The current state of the game is as follows\n# The cockroach reduced her work hours recently\nwork_hours(cockroach) < previous_work_hours(cockroach) = True\n# The gecko does not sing a victory song for the cockroach.\nsing_victory_song(gecko, cockroach) = False\n\n# Based on the game state and the rules and preferences, does the cockroach burn the warehouse of the parrot?\nquestion = burn_warehouse(cockroach, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the pig has something to sit on, then the pig attacks the green fields of the baboon.\n\nThe current state of the game is as follows\nThe pig has some spinach.\n\nBased on the game state and the rules and preferences, does the pig attack the green fields whose owner is the baboon?\nQuestion: Does the pig attack the green fields of the baboon?",
        "idx": 188,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the pig has something to sit on, then the pig attacks the green fields of the baboon.\nrule1() = has(pig, something_to_sit_on) => attack(pig, green_fields(baboon))\n\n# The current state of the game is as follows\n# The pig has some spinach.\nhas(pig, spinach) = True\n\n# Based on the game state and the rules and preferences, does the pig attack the green fields whose owner is the baboon?\nquestion = attack(pig, green_fields(baboon))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the meerkat, if it has a card whose color is one of the rainbow colors, then we can conclude that it burns the warehouse that is in possession of the catfish.\nRule2: If the meerkat has a leafy green vegetable, then the meerkat burns the warehouse that is in possession of the catfish.\n\nThe current state of the game is as follows\nThe eel raises a peace flag for the rabbit.\nThe meerkat has a blade.\nThe meerkat has a card that is indigo in color.\n\nBased on the game state and the rules and preferences, does the meerkat burn the warehouse of the catfish?\nQuestion: Does the meerkat burn the warehouse of the catfish?",
        "idx": 189,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the meerkat, if it has a card whose color is one of the rainbow colors, then we can conclude that it burns the warehouse that is in possession of the catfish\nrule1() = has(meerkat, card) and color(card) in rainbow_colors => burn_warehouse(meerkat, catfish)\n# Rule2: If the meerkat has a leafy green vegetable, then the meerkat burns the warehouse that is in possession of the catfish.\nrule2() = has(meerkat, vegetable) and color(vegetable) == leafy_green => burn_warehouse(meerkat, catfish)\n\n# The current state of the game is as follows\n# The eel raises a peace flag for the rabbit\nraise_flag_of_peace(eel, rabbit) = True\n# The meerkat has a blade\nhas(meerkat, blade) = True\n# The meerkat has a card that is indigo in color.\nhas(meerkat, card) = True\ncolor(card, indigo) = True\n\n# Based on the game state and the rules and preferences, does the meerkat burn the warehouse of the catfish?\nquestion = burn_warehouse(meerkat, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the hummingbird, if it has something to carry apples and oranges, then we can conclude that it does not learn the basics of resource management from the cricket.\nRule2: Regarding the hummingbird, if it has a card whose color appears in the flag of Japan, then we can conclude that it learns elementary resource management from the cricket.\nRule3: If the hummingbird has fewer than 7 friends, then the hummingbird learns elementary resource management from the cricket.\n\nRule2 is preferred over Rule1\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe hummingbird has 17 friends.\nThe hummingbird has a basket.\n\nBased on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the cricket?\nQuestion: Does the hummingbird learn the basics of resource management from the cricket?",
        "idx": 190,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hummingbird, if it has something to carry apples and oranges, then we can conclude that it does not learn the basics of resource management from the cricket\nrule1() = has(hummingbird, basket) => not learn_basics_of_resource_management(hummingbird, cricket)\n# Rule2: Regarding the hummingbird, if it has a card whose color appears in the flag of Japan, then we can conclude that it learns elementary resource management from the cricket\nrule2() = has(hummingbird, card) and color(card) in flag_colors(Japan) => learn_elementary_resource_management(hummingbird, cricket)\n# Rule3: If the hummingbird has fewer than 7 friends, then the hummingbird learns elementary resource management from the cricket.\nrule3() = friends(hummingbird) < 7 => learn_elementary_resource_management(hummingbird, cricket)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2)\n# Rule3 is preferred over Rule1\npreferred_rule(rule1, rule3)\n\n# The current state of the game is as follows\n# The hummingbird has 17 friends\nfriends(hummingbird) = 17\n# The hummingbird has a basket.\nhas(hummingbird, basket) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the cricket?\nquestion = learn_basics_of_resource_management(hummingbird, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the polar bear, if it took a bike from the store, then we can conclude that it does not raise a flag of peace for the elephant.\nRule2: If at least one animal owes money to the snail, then the polar bear raises a peace flag for the elephant.\n\nThe current state of the game is as follows\nThe kudu eats the food of the snail.\n\nBased on the game state and the rules and preferences, does the polar bear raise a peace flag for the elephant?\nQuestion: Does the polar bear raise a peace flag for the elephant?",
        "idx": 191,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the polar bear, if it took a bike from the store, then we can conclude that it does not raise a flag of peace for the elephant\nrule1() = took_bike(polar_bear, store) => not raise_flag_of_peace(polar_bear, elephant)\n# Rule2: If at least one animal owes $$$ to the snail, then the polar bear raises a peace flag for the elephant.\nrule2() = exists(animal) owes(animal, money, snail) => raise_flag_of_peace(polar_bear, elephant)\n\n# The current state of the game is as follows\n# The kudu eats the food of the snail.\neats(kudu, food, snail) = True\n\n# Based on the game state and the rules and preferences, does the polar bear raise a peace flag for the elephant?\nquestion = raise_flag_of_peace(polar_bear, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squid created a time machine, then the squid knows the defense plan of the doctorfish.\n\nThe current state of the game is as follows\nThe crocodile proceeds to the spot right after the kiwi.\nThe squid invented a time machine.\n\nBased on the game state and the rules and preferences, does the squid know the defensive plans of the doctorfish?\nQuestion: Does the squid know the defense plan of the doctorfish?",
        "idx": 192,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squid created a time machine, then the squid knows the defense plan of the doctorfish.\nrule1() = created_time_machine(squid) => knows_defense_plan(squid, doctorfish)\n\n# The current state of the game is as follows\n# The crocodile proceeds to the spot right after the kiwi\nproceeds_right_after(crocodile, kiwi) = True\n# The squid invented a time machine.\ncreated_time_machine(squid) = True\n\n# Based on the game state and the rules and preferences, does the squid know the defensive plans of the doctorfish?\nquestion = knows_defense_plan(squid, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the hummingbird, if it has a high salary, then we can conclude that it does not roll the dice for the eagle.\nRule2: Regarding the hummingbird, if it has more than nine friends, then we can conclude that it does not roll the dice for the eagle.\n\nThe current state of the game is as follows\nThe hummingbird got a well-paid job.\nThe hummingbird has 7 friends.\n\nBased on the game state and the rules and preferences, does the hummingbird roll the dice for the eagle?\nQuestion: Does the hummingbird roll the dice for the eagle?",
        "idx": 193,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hummingbird, if it has a high salary, then we can conclude that it does not roll the dice for the eagle\nrule1() = salary(hummingbird) == high => not roll_dice(hummingbird, eagle)\n# Rule2: Regarding the hummingbird, if it has more than nine friends, then we can conclude that it does not roll the dice for the eagle.\nrule2() = friends(hummingbird) > 9 => not roll_dice(hummingbird, eagle)\n\n# The current state of the game is as follows\n# The hummingbird got a well-paid job\nsalary(hummingbird) = high\n# The hummingbird has 7 friends.\nfriends(hummingbird) = 7\n\n# Based on the game state and the rules and preferences, does the hummingbird roll the dice for the eagle?\nquestion = roll_dice(hummingbird, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hippopotamus has a name whose first letter is the same as the first letter of the moose's name, then the hippopotamus winks at the crocodile.\nRule2: If the hippopotamus owns a luxury aircraft, then we can conclude that it winks at the crocodile.\n\nThe current state of the game is as follows\nThe hippopotamus has a backpack and has twelve friends.\nThe hippopotamus is named Charlie.\nThe hippopotamus recently read a high-quality paper.\nThe moose is named Lily.\n\nBased on the game state and the rules and preferences, does the hippopotamus wink at the crocodile?\nQuestion: Does the hippopotamus wink at the crocodile?",
        "idx": 194,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hippopotamus has a name whose first letter is the same as the first letter of the moose's name, then the hippopotamus winks at the crocodile\nrule1() = first_letter(name(hippopotamus)) == first_letter(name(moose)) => wink(hippopotamus, crocodile)\n# Rule2: Regarding the hippopotamus, if it owns a luxury aircraft, then we can conclude that it winks at the crocodile.\nrule2() = owns(hippopotamus, luxury_aircraft) => wink(hippopotamus, crocodile)\n\n# The current state of the game is as follows\n# The hippopotamus has a backpack, and has twelve friends\nhas(hippopotamus, backpack) = True\nfriends(hippopotamus) = 12\n# The hippopotamus is named Charlie\nname(hippopotamus) = \"Charlie\"\n# The hippopotamus recently read a high-quality paper\nrecently_read(hippopotamus, high_quality_paper) = True\n# The moose is named Lily.\nname(moose) = \"Lily\"\n\n# Based on the game state and the rules and preferences, does the hippopotamus wink at the crocodile?\nquestion = wink(hippopotamus, crocodile)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon shows all her cards to the panther, then the panther raises a flag of peace for the kudu.\n\nThe current state of the game is as follows\nThe baboon shows all her cards to the panther.\n\nBased on the game state and the rules and preferences, does the panther raise a peace flag for the kudu?\nQuestion: Does the panther raise a peace flag for the kudu?",
        "idx": 195,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the baboon shows her cards (all of them) to the panther, then the panther raises a flag of peace for the kudu.\nrule1() = show_cards(baboon, panther) => raise_flag_of_peace(panther, kudu)\n\n# The current state of the game is as follows\n# The baboon shows all her cards to the panther.\nshow_cards(baboon, panther) = True\n\n# Based on the game state and the rules and preferences, does the panther raise a peace flag for the kudu?\nquestion = raise_flag_of_peace(panther, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something becomes an enemy of the lion and knows the defense plan of the panther, then it does not attack the green fields of the parrot.\n\nThe current state of the game is as follows\nThe goldfish becomes an enemy of the lion.\nThe goldfish knows the defensive plans of the panther.\n\nBased on the game state and the rules and preferences, does the goldfish attack the green fields whose owner is the parrot?\nQuestion: Does the goldfish attack the green fields whose owner is the parrot?",
        "idx": 196,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something becomes an enemy of the lion and knows the defense plan of the panther, what can you certainly conclude? You can conclude that it does not attack the green fields of the parrot.\nrule1() = enemy(lion, something) & knows_defense_plan(something, panther) => not attack(green_fields(parrot))\n\n# The current state of the game is as follows\n# The goldfish becomes an enemy of the lion\nenemy(lion, goldfish) = True\n# The goldfish knows the defensive plans of the panther.\nknows_defense_plan(goldfish, panther) = True\n\n# Based on the game state and the rules and preferences, does the goldfish attack the green fields whose owner is the parrot?\nquestion = attack(green_fields(parrot))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the amberjack has a name whose first letter is the same as the first letter of the polar bear's name, then the amberjack rolls the dice for the baboon.\n\nThe current state of the game is as follows\nThe amberjack is named Lily.\nThe polar bear is named Bella.\n\nBased on the game state and the rules and preferences, does the amberjack roll the dice for the baboon?\nQuestion: Does the amberjack roll the dice for the baboon?",
        "idx": 197,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the amberjack has a name whose first letter is the same as the first letter of the polar bear's name, then the amberjack rolls the dice for the baboon.\nrule1() = first_letter(name(amberjack)) == first_letter(name(polar_bear)) => roll_dice(amberjack, baboon)\n\n# The current state of the game is as follows\n# The amberjack is named Lily\nname(amberjack) = \"Lily\"\n# The polar bear is named Bella.\nname(polar_bear) = \"Bella\"\n\n# Based on the game state and the rules and preferences, does the amberjack roll the dice for the baboon?\nquestion = roll_dice(amberjack, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something removes one of the pieces of the viperfish and removes from the board one of the pieces of the octopus, what can you certainly conclude? You can conclude that it also knows the defensive plans of the elephant.\n\nThe current state of the game is as follows\nThe catfish has a card that is green in color.\nThe catfish removes from the board one of the pieces of the octopus.\nThe catfish removes from the board one of the pieces of the viperfish.\n\nBased on the game state and the rules and preferences, does the catfish know the defensive plans of the elephant?\nQuestion: Does the catfish know the defensive plans of the elephant?",
        "idx": 198,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something removes one of the pieces of the viperfish and removes from the board one of the pieces of the octopus, what can you certainly conclude? You can conclude that it also knows the defensive plans of the elephant.\nrule1() = remove_piece(catfish, octopus) & remove_piece(catfish, viperfish) => knows_defensive_plans(catfish, elephant)\n\n# The current state of the game is as follows\n# The catfish has a card that is green in color\nhas_card(catfish, green) = True\n# The catfish removes from the board one of the pieces of the octopus\nremove_piece(catfish, octopus) = True\n# The catfish removes from the board one of the pieces of the viperfish.\nremove_piece(catfish, viperfish) = True\n\n# Based on the game state and the rules and preferences, does the catfish know the defensive plans of the elephant?\nquestion = knows_defensive_plans(catfish, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the dog has a name whose first letter is the same as the first letter of the cat's name, then the dog does not offer a job to the snail.\n\nThe current state of the game is as follows\nThe cat is named Meadow.\nThe dog is named Max.\n\nBased on the game state and the rules and preferences, does the dog offer a job to the snail?\nQuestion: Does the dog offer a job to the snail?",
        "idx": 199,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the dog has a name whose first letter is the same as the first letter of the cat's name, then the dog does not offer a job to the snail.\nrule1() = first_letter(name(dog)) == first_letter(name(cat)) => not offer_job(dog, snail)\n\n# The current state of the game is as follows\n# The cat is named Meadow\nname(cat) = \"Meadow\"\n# The dog is named Max.\nname(dog) = \"Max\"\n\n# Based on the game state and the rules and preferences, does the dog offer a job to the snail?\nquestion = offer_job(dog, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something rolls the dice for the dog but does not become an enemy of the octopus, what can you certainly conclude? You can conclude that it knows the defensive plans of the puffin.\n\nThe current state of the game is as follows\nThe spider learns the basics of resource management from the dog.\nThe spider does not become an enemy of the octopus.\n\nBased on the game state and the rules and preferences, does the spider know the defensive plans of the puffin?\nQuestion: Does the spider know the defensive plans of the puffin?",
        "idx": 200,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something rolls the dice for the dog but does not become an enemy of the octopus, what can you certainly conclude? You can conclude that it knows the defensive plans of the puffin.\nrule1() = roll_dice(something, dog) & not become_enemy(something, octopus) => knows_defensive_plans(something, puffin)\n\n# The current state of the game is as follows\n# The spider learns the basics of resource management from the dog\nlearn_basics(spider, resource_management, dog) = True\n# The spider does not become an enemy of the octopus.\nnot become_enemy(spider, octopus) = True\n\n# Based on the game state and the rules and preferences, does the spider know the defensive plans of the puffin?\nquestion = knows_defensive_plans(spider, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something steals five points from the kudu and offers a job position to the hummingbird, what can you certainly conclude? You can conclude that it also owes money to the moose.\n\nThe current state of the game is as follows\nThe jellyfish offers a job to the hummingbird and steals five points from the kudu.\n\nBased on the game state and the rules and preferences, does the jellyfish owe money to the moose?\nQuestion: Does the jellyfish owe money to the moose?",
        "idx": 201,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something steals five points from the kudu and offers a job position to the hummingbird, what can you certainly conclude? You can conclude that it also owes money to the moose.\nrule1() = steals_points(something, 5, kudu) & offer_job_position(something, hummingbird) => owe(something, money, moose)\n\n# The current state of the game is as follows\n# The jellyfish offers a job to the hummingbird, and steals five points from the kudu.\noffer_job_position(jellyfish, hummingbird) = True\nsteals_points(jellyfish, 5, kudu) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish owe money to the moose?\nquestion = owe(jellyfish, money, moose)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the halibut has a sharp object, then the halibut does not offer a job to the buffalo\nRule2: If the halibut has a name whose first letter is the same as the first letter of the rabbit's name, then the halibut offers a job position to the buffalo\nRule3: If the halibut has fewer than ten friends, then it does not offer a job to the buffalo.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe halibut has a blue card\nThe halibut has seven friends, seven of which are smart and one is not.\nThe halibut is named Lola\nThe halibut has a knapsack\nThe rabbit is named Tango\n\nBased on the game state and the rules and preferences, does the halibut offer a job to the buffalo?\nQuestion: Does the halibut offer a job position to the buffalo?",
        "idx": 202,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the halibut has a sharp object, then the halibut does not offer a job to the buffalo\nrule1() = has(halibut, sharp_object) => not offer_job_position(halibut, buffalo)\n\n# Rule2: If the halibut has a name whose first letter is the same as the first letter of the rabbit's name, then the halibut offers a job position to the buffalo\nrule2() = first_letter(name(halibut)) == first_letter(name(rabbit)) => offer_job_position(halibut, buffalo)\n\n# Rule3: Regarding the halibut, if it has fewer than ten friends, then we can conclude that it does not offer a job to the buffalo.\nrule3() = friends(halibut) < 10 => not offer_job_position(halibut, buffalo)\n\n# Rule1 is preferred over Rule2\n# Rule3 is preferred over Rule2\n\n# The current state of the game is as follows\n# The halibut has a card that is blue in color\nhas(halibut, card) = True\ncolor(card, blue) = True\n# The halibut has seven friends that are smart and one friend that is not\nfriends(halibut) = 7\nsmart_friends(halibut) = 7\nnot_smart_friends(halibut) = 1\n# The halibut is named Lola\nname(halibut) = \"Lola\"\n# The halibut has a knapsack\nhas(halibut, knapsack) = True\n# The rabbit is named Tango\nname(rabbit) = \"Tango\"\n\n# Based on the game state and the rules and preferences, does the halibut offer a job to the buffalo?\nquestion = offer_job_position(halibut, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the starfish, if it has a card whose color appears in the flag of France, then we can conclude that it knows the defense plan of the eel.\nRule2: Regarding the starfish, if it has a name whose first letter is the same as the first letter of the turtle's name, then we can conclude that it knows the defensive plans of the eel.\nRule3: Be careful when something winks at the panda bear and also raises a flag of peace for the buffalo because in this case it will surely not know the defensive plans of the eel (this may or may not be problematic).\n\nRule3 is preferred over Rule1.\nRule3 is preferred over Rule2.\n\nThe current state of the game is as follows\nThe starfish has a yellow card.\nThe starfish is named Meadow.\nThe turtle is named Tango.\nThe starfish does not eat the food of the buffalo.\n\nBased on the game state and the rules and preferences, does the starfish know the defensive plans of the eel?\nQuestion: Does the starfish know the defensive plans of the eel?",
        "idx": 203,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the starfish, if it has a card whose color appears in the flag of France, then we can conclude that it knows the defense plan of the eel\nrule1() = has_card(starfish, card) & color(card) in flag_colors(France) => knows_defense_plan(starfish, eel)\n\n# Rule2: Regarding the starfish, if it has a name whose first letter is the same as the first letter of the turtle's name, then we can conclude that it knows the defensive plans of the eel\nrule2() = first_letter(name(starfish)) == first_letter(name(turtle)) => knows_defense_plan(starfish, eel)\n\n# Rule3: Be careful when something winks at the panda bear and also raises a flag of peace for the buffalo because in this case it will surely not know the defensive plans of the eel (this may or may not be problematic).\nrule3() = wink_at(panda_bear) & raise_flag_of_peace(something, buffalo) => not knows_defense_plan(something, eel)\n\n# Rule3 is preferred over Rule1\nrule1() is less_preferred_than rule3()\n\n# Rule3 is preferred over Rule2\nrule2() is less_preferred_than rule3()\n\n# The current state of the game is as follows\n# The starfish has a card that is yellow in color\nhas_card(starfish, card) = True\ncolor(card, yellow) = True\n# The starfish is named Meadow\nname(starfish) = \"Meadow\"\n# The turtle is named Tango\nname(turtle) = \"Tango\"\n# The starfish does not eat the food of the buffalo.\neat_food(starfish, buffalo) = False\n\n# Based on the game state and the rules and preferences, does the starfish know the defensive plans of the eel?\nquestion = knows_defense_plan(starfish, eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The kiwi unquestionably gives a magnifier to the squid, in the case where the snail proceeds to the spot right after the kiwi.\n\nThe current state of the game is as follows\nThe snail proceeds to the spot right after the kiwi.\n\nBased on the game state and the rules and preferences, does the kiwi give a magnifier to the squid?\nQuestion: Does the kiwi give a magnifier to the squid?",
        "idx": 204,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The kiwi unquestionably gives a magnifier to the squid, in the case where the snail proceeds to the spot right after the kiwi.\nrule1() = proceed_to_spot(snail, right_after, kiwi) => give_magnifier(kiwi, squid)\n\n# The current state of the game is as follows\n# The snail proceeds to the spot right after the kiwi.\nproceed_to_spot(snail, right_after, kiwi) = True\n\n# Based on the game state and the rules and preferences, does the kiwi give a magnifier to the squid?\nquestion = give_magnifier(kiwi, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The halibut does not remove from the board one of the pieces of the jellyfish, in the case where the canary holds the same number of points as the halibut.\n\nThe current state of the game is as follows\nThe canary holds the same number of points as the halibut.\nThe halibut has a computer.\n\nBased on the game state and the rules and preferences, does the halibut remove from the board one of the pieces of the jellyfish?\nQuestion: Does the halibut remove from the board one of the pieces of the jellyfish?",
        "idx": 205,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The halibut does not remove from the board one of the pieces of the jellyfish, in the case where the canary holds the same number of points as the halibut.\nrule1() = points(canary) == points(halibut) => not remove_piece(halibut, jellyfish)\n\n# The current state of the game is as follows\n# The canary holds the same number of points as the halibut\npoints(canary) == points(halibut) = True\n# The halibut has a computer.\nhas(halibut, computer) = True\n\n# Based on the game state and the rules and preferences, does the halibut remove from the board one of the pieces of the jellyfish?\nquestion = remove_piece(halibut, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the halibut has a name whose first letter is the same as the first letter of the tiger's name, then the halibut attacks the green fields whose owner is the kangaroo.\n\nThe current state of the game is as follows\nThe halibut is named Meadow.\nThe tiger is named Charlie.\n\nBased on the game state and the rules and preferences, does the halibut attack the green fields whose owner is the kangaroo?\nQuestion: Does the halibut attack the green fields whose owner is the kangaroo?",
        "idx": 206,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the halibut has a name whose first letter is the same as the first letter of the tiger's name, then the halibut attacks the green fields whose owner is the kangaroo.\nrule1() = first_letter(name(halibut)) == first_letter(name(tiger)) => attack(halibut, green_fields, owner(kangaroo))\n\n# The current state of the game is as follows\n# The halibut is named Meadow\nname(halibut) = \"Meadow\"\n# The tiger is named Charlie.\nname(tiger) = \"Charlie\"\n\n# Based on the game state and the rules and preferences, does the halibut attack the green fields whose owner is the kangaroo?\nquestion = attack(halibut, green_fields, owner(kangaroo))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something holds an equal number of points as the sheep and shows her cards (all of them) to the kudu, what can you certainly conclude? You can conclude that it also removes from the board one of the pieces of the jellyfish\nRule2: If the panther has a card whose color starts with the letter \"r\", then the panther does not remove one of the pieces of the jellyfish.\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe panther has a card that is red in color.\nThe panther has fourteen friends.\nThe panther holds the same number of points as the sheep.\nThe panther shows all her cards to the kudu.\n\nBased on the game state and the rules and preferences, does the panther remove from the board one of the pieces of the jellyfish?\nQuestion: Does the panther remove from the board one of the pieces of the jellyfish?",
        "idx": 207,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something holds an equal number of points as the sheep and shows her cards (all of them) to the kudu, what can you certainly conclude? You can conclude that it also removes from the board one of the pieces of the jellyfish\n# Rule2: If the panther has a card whose color starts with the letter \"r\", then the panther does not remove one of the pieces of the jellyfish.\n# Rule1 is preferred over Rule2\nrule1() = points(something) == points(sheep) & show_cards(something, kudu) => remove_piece(something, jellyfish)\nrule2() = has_card(panther, color_starts_with(\"r\")) => not remove_piece(panther, jellyfish)\n\n# The current state of the game is as follows\n# The panther has a card that is red in color\nhas_card(panther, color(red)) = True\n# The panther has fourteen friends\nfriends(panther) = 14\n# The panther holds the same number of points as the sheep\npoints(panther) == points(sheep) = True\n# The panther shows all her cards to the kudu\nshow_cards(panther, kudu) = True\n\n# Based on the game state and the rules and preferences, does the panther remove from the board one of the pieces of the jellyfish?\nquestion = remove_piece(panther, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hare has more than 6 friends, then the hare does not prepare armor for the carp.\nRule2: If the hare has a high salary, then we can conclude that it does not prepare armor for the carp.\n\nThe current state of the game is as follows\nThe hare has 12 friends.\nThe hare has a low-income job.\n\nBased on the game state and the rules and preferences, does the hare prepare armor for the carp?\nQuestion: Does the hare prepare armor for the carp?",
        "idx": 208,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hare has more than 6 friends, then the hare does not prepare armor for the carp\nrule1() = friends(hare) > 6 => not prepare_armor(hare, carp)\n# Rule2: Regarding the hare, if it has a high salary, then we can conclude that it does not prepare armor for the carp.\nrule2() = salary(hare) == high => not prepare_armor(hare, carp)\n\n# The current state of the game is as follows\n# The hare has 12 friends\nfriends(hare) = 12\n# The hare has a low-income job.\nsalary(hare) = low\n\n# Based on the game state and the rules and preferences, does the hare prepare armor for the carp?\nquestion = prepare_armor(hare, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not wink at the leopard, you can be certain that it will offer a job position to the carp without a doubt.\n\nThe current state of the game is as follows\nThe octopus does not respect the leopard.\n\nBased on the game state and the rules and preferences, does the octopus offer a job to the carp?\nQuestion: Does the octopus offer a job to the carp?",
        "idx": 209,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not wink at the leopard, you can be certain that it will offer a job position to the carp without a doubt.\nrule1() = not wink(animal, leopard) => offer_job_position(animal, carp)\n\n# The current state of the game is as follows\n# The octopus does not respect the leopard.\nrespect(octopus, leopard) = False\n\n# Based on the game state and the rules and preferences, does the octopus offer a job to the carp?\nquestion = offer_job_position(octopus, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the swordfish removes one of the pieces of the viperfish and the catfish attacks the green fields of the viperfish, then the viperfish learns elementary resource management from the mosquito.\n\nThe current state of the game is as follows\nThe catfish attacks the green fields whose owner is the viperfish.\nThe swordfish removes from the board one of the pieces of the viperfish.\n\nBased on the game state and the rules and preferences, does the viperfish learn the basics of resource management from the mosquito?\nQuestion: Does the viperfish learn elementary resource management from the mosquito?",
        "idx": 210,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the swordfish removes one of the pieces of the viperfish and the catfish attacks the green fields of the viperfish, then the viperfish learns elementary resource management from the mosquito.\nrule1() = remove_piece(swordfish, viperfish) & attack_fields(catfish, green, viperfish) => learn_resource_management(viperfish, mosquito)\n\n# The current state of the game is as follows\n# The catfish attacks the green fields whose owner is the viperfish\nattack_fields(catfish, green, viperfish) = True\n# The swordfish removes from the board one of the pieces of the viperfish.\nremove_piece(swordfish, viperfish) = True\n\n# Based on the game state and the rules and preferences, does the viperfish learn the basics of resource management from the mosquito?\nquestion = learn_resource_management(viperfish, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something needs support from the cockroach but does not show her cards (all of them) to the sea bass, what can you certainly conclude? You can conclude that it does not owe money to the rabbit.\n\nThe current state of the game is as follows\nThe meerkat is named Paco.\nThe pig is named Peddi, and needs support from the cockroach.\nThe pig is holding her keys, and does not show all her cards to the sea bass.\n\nBased on the game state and the rules and preferences, does the pig owe money to the rabbit?\nQuestion: Does the pig owe money to the rabbit?",
        "idx": 211,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something needs support from the cockroach but does not show her cards (all of them) to the sea bass, what can you certainly conclude? You can conclude that it does not owe $$$ to the rabbit.\nrule1() = needs_support(pig, cockroach) & not show_all_cards(pig, sea_bass) => not owe(pig, money, rabbit)\n\n# The current state of the game is as follows\n# The meerkat is named Paco\nname(meerkat) = \"Paco\"\n# The pig is named Peddi, and needs support from the cockroach\nname(pig) = \"Peddi\"\nneeds_support(pig, cockroach) = True\n# The pig is holding her keys, and does not show all her cards to the sea bass.\nhold_keys(pig) = True\nshow_all_cards(pig, sea_bass) = False\n\n# Based on the game state and the rules and preferences, does the pig owe money to the rabbit?\nquestion = owe(pig, money, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The panther unquestionably learns the basics of resource management from the goldfish, in the case where the halibut owes money to the panther.\n\nThe current state of the game is as follows\nThe halibut does not owe money to the panther.\n\nBased on the game state and the rules and preferences, does the panther learn the basics of resource management from the goldfish?\nQuestion: Does the panther learn the basics of resource management from the goldfish?",
        "idx": 212,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The panther unquestionably learns the basics of resource management from the goldfish, in the case where the halibut owes money to the panther.\nrule1() = owes_money(halibut, panther) => learn_basics_of_resource_management(panther, goldfish)\n\n# The current state of the game is as follows\n# The halibut does not owe money to the panther.\nowes_money(halibut, panther) = False\n\n# Based on the game state and the rules and preferences, does the panther learn the basics of resource management from the goldfish?\nquestion = learn_basics_of_resource_management(panther, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal holds an equal number of points as the baboon, then the koala rolls the dice for the lion.\nRule2: If something owes money to the donkey and becomes an actual enemy of the black bear, then it does not roll the dice for the lion.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe koala becomes an enemy of the black bear.\nThe salmon holds the same number of points as the baboon.\n\nBased on the game state and the rules and preferences, does the koala roll the dice for the lion?\nQuestion: Does the koala roll the dice for the lion?",
        "idx": 213,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal holds an equal number of points as the baboon, then the koala rolls the dice for the lion\nrule1() = exists(animal) such that points(animal) == points(baboon) => roll_dice(koala, lion)\n\n# Rule2: If you see that something owes money to the donkey and becomes an actual enemy of the black bear, what can you certainly conclude? You can conclude that it does not roll the dice for the lion.\nrule2() = owes(something, money, donkey) & enemy(something, black_bear) => not roll_dice(something, lion)\n\n# Rule2 is preferred over Rule1\n\n# The current state of the game is as follows\n# The koala becomes an enemy of the black bear\nenemy(koala, black_bear) = True\n# The salmon holds the same number of points as the baboon.\npoints(salmon) == points(baboon) = True\n\n# Based on the game state and the rules and preferences, does the koala roll the dice for the lion?\nquestion = roll_dice(koala, lion)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job position to the canary, then it does not sing a song of victory for the swordfish.\n\nThe current state of the game is as follows\nThe oscar has 9 friends and offers a job to the canary.\nThe oscar has a card that is black in color.\n\nBased on the game state and the rules and preferences, does the oscar sing a victory song for the swordfish?\nQuestion: Does the oscar sing a victory song for the swordfish?",
        "idx": 214,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something offers a job position to the canary, then it does not sing a song of victory for the swordfish.\nrule1() = offer_job_position(something, canary) => not sing_victory_song(something, swordfish)\n\n# The current state of the game is as follows\n# The oscar has 9 friends, and offers a job to the canary\nfriends(oscar) = 9\noffer_job_position(oscar, canary) = True\n# The oscar has a card that is black in color.\nhas_card(oscar, card) = True\ncolor(card, black) = True\n\n# Based on the game state and the rules and preferences, does the oscar sing a victory song for the swordfish?\nquestion = sing_victory_song(oscar, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the black bear has something to carry apples and oranges, then the black bear eats the food of the zander.\n\nThe current state of the game is as follows\nThe black bear has a saxophone.\n\nBased on the game state and the rules and preferences, does the black bear eat the food of the zander?\nQuestion: Does the black bear eat the food of the zander?",
        "idx": 215,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the black bear has something to carry apples and oranges, then the black bear eats the food of the zander.\nrule1() = has(black_bear, carry_apples_oranges) => eat_food(black_bear, zander)\n\n# The current state of the game is as follows\n# The black bear has a saxophone.\nhas(black_bear, saxophone) = True\n\n# Based on the game state and the rules and preferences, does the black bear eat the food of the zander?\nquestion = eat_food(black_bear, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something proceeds to the spot that is right after the spot of the squid, then it knocks down the fortress that belongs to the blobfish, too.\n\nThe current state of the game is as follows\nThe parrot proceeds to the spot right after the squid.\n\nBased on the game state and the rules and preferences, does the parrot knock down the fortress of the blobfish?\nQuestion: Does the parrot knock down the fortress of the blobfish?",
        "idx": 216,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something proceeds to the spot that is right after the spot of the squid, then it knocks down the fortress that belongs to the blobfish, too.\nrule1() = proceeds_to_spot(parrot, right_after, squid) => knock_down_fortress(parrot, blobfish)\n\n# The current state of the game is as follows\n# The parrot proceeds to the spot right after the squid.\nproceeds_to_spot(parrot, right_after, squid) = True\n\n# Based on the game state and the rules and preferences, does the parrot knock down the fortress of the blobfish?\nquestion = knock_down_fortress(parrot, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon has fewer than eleven friends, then the baboon does not offer a job position to the kudu.\n\nThe current state of the game is as follows\nThe baboon has nine friends.\n\nBased on the game state and the rules and preferences, does the baboon offer a job to the kudu?\nQuestion: Does the baboon offer a job position to the kudu?",
        "idx": 217,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the baboon has fewer than eleven friends, then the baboon does not offer a job position to the kudu.\nrule1() = friends(baboon) < 11 => not offer_job_position(baboon, kudu)\n\n# The current state of the game is as follows\n# The baboon has nine friends.\nfriends(baboon) = 9\n\n# Based on the game state and the rules and preferences, does the baboon offer a job to the kudu?\nquestion = offer_job_position(baboon, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the tilapia, if it has something to carry apples and oranges, then we can conclude that it offers a job position to the viperfish.\nRule2: If you are positive that one of the animals does not raise a peace flag for the carp, you can be certain that it will not offer a job to the viperfish.\nRule3: If the tilapia has a card with a primary color, then the tilapia offers a job to the viperfish.\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe tilapia has a card that is yellow in color, and has a knife.\n\nBased on the game state and the rules and preferences, does the tilapia offer a job to the viperfish?\nQuestion: Does the tilapia offer a job to the viperfish?",
        "idx": 218,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the tilapia, if it has something to carry apples and oranges, then we can conclude that it offers a job position to the viperfish\nrule1() = carry(tilapia, apples) & carry(tilapia, oranges) => offer_job_position(tilapia, viperfish)\n# Rule2: If you are positive that one of the animals does not raise a peace flag for the carp, you can be certain that it will not offer a job to the viperfish\nrule2() = not raise_flag_of_peace(animal, carp) => not offer_job_position(animal, viperfish)\n# Rule3: If the tilapia has a card with a primary color, then the tilapia offers a job to the viperfish.\nrule3() = has(tilapia, card) & primary_color(card) => offer_job_position(tilapia, viperfish)\n\n# Rule1 is preferred over Rule2\npreferred_rule1_over_rule2() = rule1() and not rule2()\n# Rule3 is preferred over Rule2\npreferred_rule3_over_rule2() = rule3() and not rule2()\n\n# The current state of the game is as follows\n# The tilapia has a card that is yellow in color, and has a knife.\nhas(tilapia, card) = True\ncolor(card, yellow) = True\nhas(tilapia, knife) = True\n\n# Based on the game state and the rules and preferences, does the tilapia offer a job to the viperfish?\nquestion = offer_job_position(tilapia, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something knows the defense plan of the polar bear but does not remove one of the pieces of the octopus, what can you certainly conclude? You can conclude that it owes money to the cow.\n\nThe current state of the game is as follows\nThe leopard knows the defensive plans of the polar bear but does not remove from the board one of the pieces of the octopus.\n\nBased on the game state and the rules and preferences, does the leopard owe money to the cow?\nQuestion: Does the leopard owe money to the cow?",
        "idx": 219,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something knows the defense plan of the polar bear but does not remove one of the pieces of the octopus, what can you certainly conclude? You can conclude that it owes money to the cow.\nrule1() = knows_defense_plan(leopard, polar_bear) & not remove_piece(octopus) => owe(leopard, money, cow)\n\n# The current state of the game is as follows\n# The leopard knows the defensive plans of the polar bear but does not remove from the board one of the pieces of the octopus.\nknows_defense_plan(leopard, polar_bear) = True\nnot remove_piece(octopus) = True\n\n# Based on the game state and the rules and preferences, does the leopard owe money to the cow?\nquestion = owe(leopard, money, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The turtle does not become an enemy of the gecko, in the case where the jellyfish shows her cards (all of them) to the turtle.\n\nThe current state of the game is as follows\nThe jellyfish shows all her cards to the turtle.\nThe turtle has 12 friends.\nThe turtle reduced her work hours recently.\n\nBased on the game state and the rules and preferences, does the turtle become an enemy of the gecko?\nQuestion: Does the turtle become an enemy of the gecko?",
        "idx": 220,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The turtle does not become an enemy of the gecko, in the case where the jellyfish shows her cards (all of them) to the turtle.\nrule1() = show_cards(jellyfish, turtle) => not become_enemy(turtle, gecko)\n\n# The current state of the game is as follows\n# The jellyfish shows all her cards to the turtle\nshow_cards(jellyfish, turtle) = True\n# The turtle has 12 friends\nfriends(turtle) = 12\n# The turtle reduced her work hours recently.\nreduced_work_hours(turtle) = True\n\n# Based on the game state and the rules and preferences, does the turtle become an enemy of the gecko?\nquestion = become_enemy(turtle, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The tiger unquestionably owes money to the cat, in the case where the starfish does not steal five of the points of the tiger.\n\nThe current state of the game is as follows\nThe starfish steals five points from the tiger.\n\nBased on the game state and the rules and preferences, does the tiger owe money to the cat?\nQuestion: Does the tiger owe money to the cat?",
        "idx": 221,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The tiger unquestionably owes money to the cat, in the case where the starfish does not steal five of the points of the tiger.\nrule1() = not steal_points(starfish, tiger, 5) => owe_money(tiger, cat)\n\n# The current state of the game is as follows\n# The starfish steals five points from the tiger.\nsteal_points(starfish, tiger, 5) = True\n\n# Based on the game state and the rules and preferences, does the tiger owe money to the cat?\nquestion = owe_money(tiger, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something eats the food of the buffalo and also eats the food that belongs to the starfish because in this case it will surely knock down the fortress of the hippopotamus (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe koala eats the food of the buffalo.\nThe koala eats the food of the starfish and raises a peace flag for the zander.\n\nBased on the game state and the rules and preferences, does the koala knock down the fortress of the hippopotamus?\nQuestion: Does the koala knock down the fortress of the hippopotamus?",
        "idx": 222,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something eats the food of the buffalo and also eats the food that belongs to the starfish because in this case it will surely knock down the fortress of the hippopotamus (this may or may not be problematic).\nrule1() = eats_food(koala, buffalo) & eats_food(koala, starfish) => knock_down_fortress(koala, hippopotamus)\n\n# The current state of the game is as follows\n# The koala eats the food of the buffalo\neats_food(koala, buffalo) = True\n# The koala eats the food of the starfish, and raises a peace flag for the zander.\neats_food(koala, starfish) = True\nraise_flag_of_peace(koala, zander) = True\n\n# Based on the game state and the rules and preferences, does the koala knock down the fortress of the hippopotamus?\nquestion = knock_down_fortress(koala, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grasshopper has a name whose first letter is the same as the first letter of the tiger's name, then the grasshopper does not sing a victory song for the snail.\nRule2: If the grasshopper has a card with a primary color, then we can conclude that it does not sing a victory song for the snail.\n\nThe current state of the game is as follows\nThe grasshopper has a card that is green in color, and is named Pashmak.\nThe tiger is named Mojo.\n\nBased on the game state and the rules and preferences, does the grasshopper sing a victory song for the snail?\nQuestion: Does the grasshopper sing a victory song for the snail?",
        "idx": 223,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grasshopper has a name whose first letter is the same as the first letter of the tiger's name, then the grasshopper does not sing a victory song for the snail\nrule1() = first_letter(name(grasshopper)) == first_letter(name(tiger)) => not sing_victory_song(grasshopper, snail)\n# Rule2: Regarding the grasshopper, if it has a card with a primary color, then we can conclude that it does not sing a victory song for the snail.\nrule2() = has_primary_color_card(grasshopper) => not sing_victory_song(grasshopper, snail)\n\n# The current state of the game is as follows\n# The grasshopper has a card that is green in color, and is named Pashmak\nhas_card(grasshopper, card) = True\ncolor(card, green) = True\nname(grasshopper) = \"Pashmak\"\n# The tiger is named Mojo.\nname(tiger) = \"Mojo\"\n\n# Based on the game state and the rules and preferences, does the grasshopper sing a victory song for the snail?\nquestion = sing_victory_song(grasshopper, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal knows the defensive plans of the kiwi, then the spider knocks down the fortress of the octopus.\n\nThe current state of the game is as follows\nThe snail learns the basics of resource management from the kiwi.\n\nBased on the game state and the rules and preferences, does the spider knock down the fortress of the octopus?\nQuestion: Does the spider knock down the fortress of the octopus?",
        "idx": 224,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal knows the defensive plans of the kiwi, then the spider knocks down the fortress of the octopus.\nrule1() = knows_defensive_plans(animal, kiwi) => knock_down_fortress(spider, octopus)\n\n# The current state of the game is as follows\n# The snail learns the basics of resource management from the kiwi.\nlearns_basics(snail, resource_management, kiwi) = True\n\n# Based on the game state and the rules and preferences, does the spider knock down the fortress of the octopus?\nquestion = knock_down_fortress(spider, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The oscar steals five points from the crocodile whenever at least one animal attacks the green fields of the canary.\nRule2: Regarding the oscar, if it has a name whose first letter is the same as the first letter of the zander's name, then we can conclude that it does not steal five of the points of the crocodile.\nRule1 is preferred over Rule2.\n\nThe current state of the game is as follows\nThe oscar is named Lily.\nThe pig attacks the green fields whose owner is the canary.\nThe zander is named Luna.\n\nBased on the game state and the rules and preferences, does the oscar steal five points from the crocodile?\nQuestion: Does the oscar steal five points from the crocodile?",
        "idx": 225,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The oscar steals five points from the crocodile whenever at least one animal attacks the green fields of the canary\nrule1() = attack_fields(animal, green_fields(canary)) => steal_points(oscar, crocodile, 5)\n\n# Rule2: Regarding the oscar, if it has a name whose first letter is the same as the first letter of the zander's name, then we can conclude that it does not steal five of the points of the crocodile.\nrule2() = first_letter(name(oscar)) == first_letter(name(zander)) => not steal_points(oscar, crocodile, 5)\n\n# Rule1 is preferred over Rule2\npreferred_rule(rule1, rule2)\n\n# The current state of the game is as follows\n# The oscar is named Lily\nname(oscar) = \"Lily\"\n# The pig attacks the green fields whose owner is the canary\nattack_fields(pig, green_fields(canary)) = True\n# The zander is named Luna.\nname(zander) = \"Luna\"\n\n# Based on the game state and the rules and preferences, does the oscar steal five points from the crocodile?\nquestion = steal_points(oscar, crocodile, 5)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the catfish, if it has a device to connect to the internet, then we can conclude that it does not raise a peace flag for the cockroach.\nRule2: Regarding the catfish, if it has difficulty finding food, then we can conclude that it does not raise a peace flag for the cockroach.\nRule3: If something offers a job position to the grizzly bear, then it raises a peace flag for the cockroach, too.\n\nRule1 is preferred over Rule3.\nRule2 is preferred over Rule3.\n\nThe current state of the game is as follows\nThe catfish has a knapsack and struggles to find food.\nThe catfish offers a job to the grizzly bear.\n\nBased on the game state and the rules and preferences, does the catfish raise a peace flag for the cockroach?\nQuestion: Does the catfish raise a peace flag for the cockroach?",
        "idx": 226,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the catfish, if it has a device to connect to the internet, then we can conclude that it does not raise a peace flag for the cockroach\nrule1() = has_device(catfish, internet) => not raise_flag_of_peace(catfish, cockroach)\n# Rule2: Regarding the catfish, if it has difficulty to find food, then we can conclude that it does not raise a flag of peace for the cockroach\nrule2() = struggles_to_find_food(catfish) => not raise_flag_of_peace(catfish, cockroach)\n# Rule3: If something offers a job position to the grizzly bear, then it raises a peace flag for the cockroach, too.\nrule3() = offer_job_position(something, grizzly_bear) => raise_flag_of_peace(something, cockroach)\n\n# Rule1 is preferred over Rule3\npreferred_rule1_over_rule3() = True\n# Rule2 is preferred over Rule3\npreferred_rule2_over_rule3() = True\n\n# The current state of the game is as follows\n# The catfish has a knapsack, and struggles to find food\nhas_device(catfish, knapsack) = True\nstruggles_to_find_food(catfish) = True\n# The catfish offers a job to the grizzly bear.\noffer_job_position(catfish, grizzly_bear) = True\n\n# Based on the game state and the rules and preferences, does the catfish raise a peace flag for the cockroach?\nquestion = raise_flag_of_peace(catfish, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squid has a card whose color appears in the flag of Japan, then the squid steals five points from the mosquito.\nRule2: If the squid has a name whose first letter is the same as the first letter of the squirrel's name, then the squid steals five of the points of the mosquito.\n\nThe current state of the game is as follows\nThe squid got a well-paid job.\nThe squid has a card that is indigo in color.\nThe squid is named Charlie.\nThe squirrel is named Buddy.\n\nBased on the game state and the rules and preferences, does the squid steal five points from the mosquito?\nQuestion: Does the squid steal five points from the mosquito?",
        "idx": 227,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squid has a card whose color appears in the flag of Japan, then the squid steals five points from the mosquito\nrule1() = has(squid, card) and color(card) in flag_colors(Japan) => steal_points(squid, 5, mosquito)\n# Rule2: If the squid has a name whose first letter is the same as the first letter of the squirrel's name, then the squid steals five of the points of the mosquito.\nrule2() = first_letter(squid.name) == first_letter(squirrel.name) => steal_points(squid, 5, mosquito)\n\n# The current state of the game is as follows\n# The squid got a well-paid job\ngot_job(squid, well_paid) = True\n# The squid has a card that is indigo in color\nhas(squid, card) = True\ncolor(card, indigo) = True\n# The squid is named Charlie\nsquid.name = \"Charlie\"\n# The squirrel is named Buddy.\nsquirrel.name = \"Buddy\"\n\n# Based on the game state and the rules and preferences, does the squid steal five points from the mosquito?\nquestion = steal_points(squid, 5, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the gecko, if it has a card with a primary color, then we can conclude that it learns elementary resource management from the koala.\nRule2: The gecko does not learn elementary resource management from the koala, in the case where the tilapia eats the food that belongs to the gecko.\n\nThe current state of the game is as follows\nThe gecko has a card that is red in color.\n\nBased on the game state and the rules and preferences, does the gecko learn the basics of resource management from the koala?\nQuestion: Does the gecko learn the basics of resource management from the koala?",
        "idx": 228,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the gecko, if it has a card with a primary color, then we can conclude that it learns elementary resource management from the koala\nrule1() = has_card(gecko, primary_color) => learn_resource_management(gecko, koala)\n# Rule2: The gecko does not learn elementary resource management from the koala, in the case where the tilapia eats the food that belongs to the gecko.\nrule2() = eats_food(tilapia, gecko) => not learn_resource_management(gecko, koala)\n\n# The current state of the game is as follows\n# The gecko has a card that is red in color.\nhas_card(gecko, red) = True\n\n# Based on the game state and the rules and preferences, does the gecko learn the basics of resource management from the koala?\nquestion = learn_resource_management(gecko, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the leopard, if it has fewer than two friends, then we can conclude that it does not roll the dice for the sun bear.\nRule2: If the leopard has a card whose color appears in the flag of Italy, then the leopard does not roll the dice for the sun bear.\n\nThe current state of the game is as follows\nThe leopard has a red card and has twelve friends.\nThe leopard has a plastic bag.\n\nBased on the game state and the rules and preferences, does the leopard roll the dice for the sun bear?\nQuestion: Does the leopard roll the dice for the sun bear?",
        "idx": 229,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the leopard, if it has fewer than two friends, then we can conclude that it does not roll the dice for the sun bear\nrule1() = friends(leopard) < 2 => not roll_dice(leopard, sun_bear)\n# Rule2: If the leopard has a card whose color appears in the flag of Italy, then the leopard does not roll the dice for the sun bear.\nrule2() = has(leopard, card) and color(card) in flag_colors(Italy) => not roll_dice(leopard, sun_bear)\n\n# The current state of the game is as follows\n# The leopard has a card that is red in color, and has twelve friends\nhas(leopard, card) = True\ncolor(card, red) = True\nfriends(leopard) = 12\n# The leopard has a plastic bag.\nhas(leopard, plastic_bag) = True\n\n# Based on the game state and the rules and preferences, does the leopard roll the dice for the sun bear?\nquestion = roll_dice(leopard, sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the panther, if it is a fan of Chris Ronaldo, then we can conclude that it knocks down the fortress that belongs to the swordfish.\nRule2: If the panther has a card whose color starts with the letter \"g\", then the panther knocks down the fortress that belongs to the swordfish.\n\nThe current state of the game is as follows\nThe panther has a card that is white in color.\nThe panther hates Chris Ronaldo.\nThe halibut does not become an enemy of the sun bear.\n\nBased on the game state and the rules and preferences, does the panther knock down the fortress of the swordfish?\nQuestion: Does the panther knock down the fortress of the swordfish?",
        "idx": 230,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the panther, if it is a fan of Chris Ronaldo, then we can conclude that it knocks down the fortress that belongs to the swordfish\nrule1() = fan_of(panther, Chris_Ronaldo) => knock_down_fortress(panther, swordfish)\n# Rule2: If the panther has a card whose color starts with the letter \"g\", then the panther knocks down the fortress that belongs to the swordfish.\nrule2() = has(panther, card) and color_starts_with(card, \"g\") => knock_down_fortress(panther, swordfish)\n\n# The current state of the game is as follows\n# The panther has a card that is white in color\nhas(panther, card) = True\ncolor(card, white) = True\n# The panther hates Chris Ronaldo\nfan_of(panther, Chris_Ronaldo) = False\n# The halibut does not become an enemy of the sun bear.\nbecome_enemy(halibut, sun_bear) = False\n\n# Based on the game state and the rules and preferences, does the panther knock down the fortress of the swordfish?\nquestion = knock_down_fortress(panther, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals respects the hummingbird, you can be certain that it will also offer a job to the tiger.\n\nThe current state of the game is as follows\nThe spider respects the hummingbird.\n\nBased on the game state and the rules and preferences, does the spider offer a job to the tiger?\nQuestion: Does the spider offer a job to the tiger?",
        "idx": 231,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals respects the hummingbird, you can be certain that it will also offer a job to the tiger.\nrule1() = respects(spider, hummingbird) => offer_job(spider, tiger)\n\n# The current state of the game is as follows\n# The spider respects the hummingbird.\nrespects(spider, hummingbird) = True\n\n# Based on the game state and the rules and preferences, does the spider offer a job to the tiger?\nquestion = offer_job(spider, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the oscar voted for the mayor, then the oscar does not show her cards (all of them) to the octopus.\nRule2: If the oscar has a card with a primary color, then we can conclude that it does not show her cards (all of them) to the octopus.\n\nThe current state of the game is as follows\nThe oscar assassinated the mayor.\nThe oscar has a card that is green in color.\n\nBased on the game state and the rules and preferences, does the oscar show all her cards to the octopus?\nQuestion: Does the oscar show all her cards to the octopus?",
        "idx": 232,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the oscar voted for the mayor, then the oscar does not show her cards (all of them) to the octopus\nrule1() = voted(oscar, mayor) => not show_all_cards(oscar, octopus)\n# Rule2: Regarding the oscar, if it has a card with a primary color, then we can conclude that it does not show her cards (all of them) to the octopus.\nrule2() = has_primary_color_card(oscar) => not show_all_cards(oscar, octopus)\n\n# The current state of the game is as follows\n# The oscar assassinated the mayor\nassassinated(oscar, mayor) = True\n# The oscar has a card that is green in color.\nhas_card_with_color(oscar, green) = True\n\n# Based on the game state and the rules and preferences, does the oscar show all her cards to the octopus?\nquestion = show_all_cards(oscar, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the cricket, if it has a name whose first letter is the same as the first letter of the squirrel's name, then we can conclude that it offers a job to the gecko.\n\nThe current state of the game is as follows\nThe cricket is named Cinnamon.\nThe squirrel is named Milo.\n\nBased on the game state and the rules and preferences, does the cricket offer a job to the gecko?\nQuestion: Does the cricket offer a job to the gecko?",
        "idx": 233,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cricket, if it has a name whose first letter is the same as the first letter of the squirrel's name, then we can conclude that it offers a job to the gecko.\nrule1() = first_letter(name(cricket)) == first_letter(name(squirrel)) => offer_job(cricket, gecko)\n\n# The current state of the game is as follows\n# The cricket is named Cinnamon\nname(cricket) = \"Cinnamon\"\n# The squirrel is named Milo.\nname(squirrel) = \"Milo\"\n\n# Based on the game state and the rules and preferences, does the cricket offer a job to the gecko?\nquestion = offer_job(cricket, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the black bear, if it has fewer than 12 friends, then we can conclude that it knows the defense plan of the doctorfish.\n\nThe current state of the game is as follows\nThe black bear has 5 kind friends and 1 not kind friend, and has a cutter.\n\nBased on the game state and the rules and preferences, does the black bear know the defensive plans of the doctorfish?\nQuestion: Does the black bear know the defensive plans of the doctorfish?",
        "idx": 234,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the black bear, if it has fewer than 12 friends, then we can conclude that it knows the defense plan of the doctorfish.\nrule1() = friends(black_bear) < 12 => knows_defense_plan(black_bear, doctorfish)\n\n# The current state of the game is as follows\n# The black bear has 5 friends that are kind and 1 friend that is not, and has a cutter.\nfriends(black_bear) = 6\nkind_friends(black_bear) = 5\nnot_kind_friends(black_bear) = 1\nhas(black_bear, cutter) = True\n\n# Based on the game state and the rules and preferences, does the black bear know the defensive plans of the doctorfish?\nquestion = knows_defense_plan(black_bear, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the snail, if it has something to sit on, then we can conclude that it does not sing a victory song for the salmon.\n\nThe current state of the game is as follows\nThe snail attacks the green fields whose owner is the elephant.\nThe snail has a bench.\n\nBased on the game state and the rules and preferences, does the snail sing a victory song for the salmon?\nQuestion: Does the snail sing a victory song for the salmon?",
        "idx": 235,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the snail, if it has something to sit on, then we can conclude that it does not sing a victory song for the salmon.\nrule1() = has(something_to_sit_on, snail) => not sing_victory_song(snail, salmon)\n\n# The current state of the game is as follows\n# The snail attacks the green fields whose owner is the elephant\nattacks(snail, green_fields, elephant) = True\n# The snail has a bench.\nhas(bench, snail) = True\n\n# Based on the game state and the rules and preferences, does the snail sing a victory song for the salmon?\nquestion = sing_victory_song(snail, salmon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the polar bear has more than 6 friends, then the polar bear prepares armor for the koala.\nRule2: If the hare needs the support of the polar bear, then the polar bear is not going to prepare armor for the koala.\nRule3: If the polar bear has a card whose color is one of the rainbow colors, then it prepares armor for the koala.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe polar bear has 4 friends and has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the polar bear prepare armor for the koala?\nQuestion: Does the polar bear prepare armor for the koala?",
        "idx": 236,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the polar bear has more than 6 friends, then the polar bear prepares armor for the koala\nrule1() = friends(polar_bear) > 6 => prepare_armor(polar_bear, koala)\n# Rule2: If the hare needs the support of the polar bear, then the polar bear is not going to prepare armor for the koala\nrule2() = needs_support(hare, polar_bear) => not prepare_armor(polar_bear, koala)\n# Rule3: Regarding the polar bear, if it has a card whose color is one of the rainbow colors, then we can conclude that it prepares armor for the koala.\nrule3() = has(polar_bear, card) and color(card) in rainbow_colors => prepare_armor(polar_bear, koala)\n\n# Rule1 is preferred over Rule2\n# Rule3 is preferred over Rule2\n\n# The current state of the game is as follows\n# The polar bear has 4 friends, and has a card that is white in color.\nfriends(polar_bear) = 4\nhas(polar_bear, card) = True\ncolor(card, white) = True\n\n# Based on the game state and the rules and preferences, does the polar bear prepare armor for the koala?\nquestion = prepare_armor(polar_bear, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something attacks the green fields whose owner is the grasshopper, then it learns elementary resource management from the blobfish, too.\nRule2: Regarding the cat, if it has more than ten friends, then we can conclude that it does not learn elementary resource management from the blobfish.\nRule3: Regarding the cat, if it has something to drink, then we can conclude that it does not learn the basics of resource management from the blobfish.\n\nRule2 is preferred over Rule1\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cat attacks the green fields whose owner is the grasshopper.\nThe cat has one friend.\n\nBased on the game state and the rules and preferences, does the cat learn the basics of resource management from the blobfish?\nQuestion: Does the cat learn the basics of resource management from the blobfish?",
        "idx": 237,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something attacks the green fields whose owner is the grasshopper, then it learns elementary resource management from the blobfish, too\nrule1() = attacks(something, green_fields(grasshopper)) => learns(something, elementary_resource_management, blobfish)\n# Rule2: Regarding the cat, if it has more than ten friends, then we can conclude that it does not learn elementary resource management from the blobfish\nrule2() = friends(cat) > 10 => not learns(cat, elementary_resource_management, blobfish)\n# Rule3: Regarding the cat, if it has something to drink, then we can conclude that it does not learn the basics of resource management from the blobfish.\nrule3() = has(cat, drink) => not learns(cat, basics_of_resource_management, blobfish)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2) = rule2\n# Rule3 is preferred over Rule1\npreferred_rule(rule1, rule3) = rule3\n\n# The current state of the game is as follows\n# The cat attacks the green fields whose owner is the grasshopper\nattacks(cat, green_fields(grasshopper)) = True\n# The cat has one friend.\nfriends(cat) = 1\n\n# Based on the game state and the rules and preferences, does the cat learn the basics of resource management from the blobfish?\nquestion = learns(cat, basics_of_resource_management, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the penguin works fewer hours than before, then the penguin does not attack the green fields of the doctorfish.\nRule2: If the penguin has a card whose color starts with the letter \"v\", then the penguin attacks the green fields whose owner is the doctorfish.\nRule3: If the penguin has a device to connect to the internet, then we can conclude that it does not attack the green fields whose owner is the doctorfish.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe penguin has a beer.\nThe penguin has a card that is violet in color.\nThe penguin reduced her work hours recently.\n\nBased on the game state and the rules and preferences, does the penguin attack the green fields whose owner is the doctorfish?\nQuestion: Does the penguin attack the green fields whose owner is the doctorfish?",
        "idx": 238,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the penguin works fewer hours than before, then the penguin does not attack the green fields of the doctorfish\nrule1() = work_hours(penguin) < previous_work_hours(penguin) => not attack_green_fields(penguin, doctorfish)\n# Rule2: If the penguin has a card whose color starts with the letter \"v\", then the penguin attacks the green fields whose owner is the doctorfish\nrule2() = has(penguin, card) and color_starts_with(card, \"v\") => attack_green_fields(penguin, doctorfish)\n# Rule3: Regarding the penguin, if it has a device to connect to the internet, then we can conclude that it does not attack the green fields whose owner is the doctorfish.\nrule3() = has_device(penguin, internet) => not attack_green_fields(penguin, doctorfish)\n\n# Rule1 is preferred over Rule2\n# Rule3 is preferred over Rule2\n\n# The current state of the game is as follows\n# The penguin has a beer\nhas(penguin, beer) = True\n# The penguin has a card that is violet in color\nhas(penguin, card) = True\ncolor(card, violet) = True\n# The penguin reduced her work hours recently.\nwork_hours(penguin) < previous_work_hours(penguin) = True\n\n# Based on the game state and the rules and preferences, does the penguin attack the green fields whose owner is the doctorfish?\nquestion = attack_green_fields(penguin, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the hare, if it works fewer hours than before, then we can conclude that it learns elementary resource management from the wolverine\nRule2: If the hare has a name whose first letter is the same as the first letter of the aardvark's name, then the hare learns the basics of resource management from the wolverine.\n\nThe current state of the game is as follows\nThe aardvark is named Chickpea.\nThe hare is named Lucy.\nThe hare struggles to find food.\n\nBased on the game state and the rules and preferences, does the hare learn the basics of resource management from the wolverine?\nQuestion: Does the hare learn the basics of resource management from the wolverine?",
        "idx": 239,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hare, if it works fewer hours than before, then we can conclude that it learns elementary resource management from the wolverine\nrule1() = work_hours(hare) < previous_work_hours(hare) => learn_resource_management(hare, elementary, wolverine)\n# Rule2: If the hare has a name whose first letter is the same as the first letter of the aardvark's name, then the hare learns the basics of resource management from the wolverine.\nrule2() = first_letter(name(hare)) == first_letter(name(aardvark)) => learn_resource_management(hare, basics, wolverine)\n\n# The current state of the game is as follows\n# The aardvark is named Chickpea\nname(aardvark) = \"Chickpea\"\n# The hare is named Lucy\nname(hare) = \"Lucy\"\n# The hare struggles to find food.\nstruggles_to_find_food(hare) = True\n\n# Based on the game state and the rules and preferences, does the hare learn the basics of resource management from the wolverine?\nquestion = learn_resource_management(hare, basics, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the puffin, if it works fewer hours than before, then we can conclude that it gives a magnifier to the carp.\n\nThe current state of the game is as follows\nThe puffin reduced her work hours recently.\n\nBased on the game state and the rules and preferences, does the puffin give a magnifier to the carp?\nQuestion: Does the puffin give a magnifier to the carp?",
        "idx": 240,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the puffin, if it works fewer hours than before, then we can conclude that it gives a magnifier to the carp.\nrule1() = work_hours(puffin) < previous_work_hours(puffin) => give_magnifier(puffin, carp)\n\n# The current state of the game is as follows\n# The puffin reduced her work hours recently.\nwork_hours(puffin) < previous_work_hours(puffin) = True\n\n# Based on the game state and the rules and preferences, does the puffin give a magnifier to the carp?\nquestion = give_magnifier(puffin, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the mosquito has fewer than 3 friends, then the mosquito does not become an actual enemy of the cricket.\nRule2: If the mosquito has a name whose first letter is the same as the first letter of the black bear's name, then the mosquito does not become an actual enemy of the cricket.\n\nThe current state of the game is as follows\nThe black bear is named Bella.\nThe mosquito has 2 friends and is named Milo.\n\nBased on the game state and the rules and preferences, does the mosquito become an enemy of the cricket?\nQuestion: Does the mosquito become an enemy of the cricket?",
        "idx": 241,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the mosquito has fewer than 3 friends, then the mosquito does not become an actual enemy of the cricket\nrule1() = friends(mosquito) < 3 => not enemy(mosquito, cricket)\n# Rule2: If the mosquito has a name whose first letter is the same as the first letter of the black bear's name, then the mosquito does not become an actual enemy of the cricket.\nrule2() = first_letter(name(mosquito)) == first_letter(name(black_bear)) => not enemy(mosquito, cricket)\n\n# The current state of the game is as follows\n# The black bear is named Bella\nname(black_bear) = \"Bella\"\n# The mosquito has 2 friends, and is named Milo.\nfriends(mosquito) = 2\nname(mosquito) = \"Milo\"\n\n# Based on the game state and the rules and preferences, does the mosquito become an enemy of the cricket?\nquestion = enemy(mosquito, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The panther does not hold the same number of points as the pig, in the case where the koala attacks the green fields whose owner is the panther.\nRule2: If the eel respects the panther, then the panther holds the same number of points as the pig.\n\nThe current state of the game is as follows\nThe eel needs support from the panther.\nThe koala holds the same number of points as the panther.\n\nBased on the game state and the rules and preferences, does the panther hold the same number of points as the pig?\nQuestion: Does the panther hold the same number of points as the pig?",
        "idx": 242,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The panther does not hold the same number of points as the pig, in the case where the koala attacks the green fields whose owner is the panther\nrule1() = attack(koala, green_fields, panther) => points(panther) != points(pig)\n# Rule2: If the eel respects the panther, then the panther holds the same number of points as the pig.\nrule2() = respect(eel, panther) => points(panther) == points(pig)\n\n# The current state of the game is as follows\n# The eel needs support from the panther\nrespect(eel, panther) = True\n# The koala holds the same number of points as the panther.\npoints(koala) == points(panther) = True\n\n# Based on the game state and the rules and preferences, does the panther hold the same number of points as the pig?\nquestion = points(panther) == points(pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the whale, if it has more than 1 friend, then we can conclude that it offers a job position to the snail\nRule2: Regarding the whale, if it has a name whose first letter is the same as the first letter of the squid's name, then we can conclude that it offers a job to the snail\nRule3: If the whale works more hours than before, then the whale does not offer a job position to the snail.\n\nRule1 is preferred over Rule3\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe squid is named Bella\nThe whale has a card that is blue in color, and reduced her work hours recently\nThe whale has five friends that are adventurous and three friends that are not, and is named Tarzan.\n\nBased on the game state and the rules and preferences, does the whale offer a job to the snail?\nQuestion: Does the whale offer a job position to the snail?",
        "idx": 243,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the whale, if it has more than 1 friend, then we can conclude that it offers a job position to the snail\nrule1() = friends(whale) > 1 => offer_job_position(whale, snail)\n# Rule2: Regarding the whale, if it has a name whose first letter is the same as the first letter of the squid's name, then we can conclude that it offers a job to the snail\nrule2() = first_letter(name(whale)) == first_letter(name(squid)) => offer_job_position(whale, snail)\n# Rule3: If the whale works more hours than before, then the whale does not offer a job position to the snail.\nrule3() = work_hours(whale) > previous_work_hours(whale) => not offer_job_position(whale, snail)\n\n# Rule1 is preferred over Rule3\npreferred_rule1_over_rule3() = True\n# Rule2 is preferred over Rule3\npreferred_rule2_over_rule3() = True\n\n# The current state of the game is as follows\n# The squid is named Bella\nname(squid) = \"Bella\"\n# The whale has a card that is blue in color, and reduced her work hours recently\nhas(whale, card) = True\ncolor(card(whale), blue) = True\nreduced_work_hours(whale) = True\n# The whale has five friends that are adventurous and three friends that are not, and is named Tarzan.\nfriends(whale, adventurous) = 5\nfriends(whale, not adventurous) = 3\nname(whale) = \"Tarzan\"\n\n# Based on the game state and the rules and preferences, does the whale offer a job to the snail?\nquestion = offer_job_position(whale, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cow does not give a magnifying glass to the canary whenever at least one animal learns the basics of resource management from the koala.\n\nThe current state of the game is as follows\nThe viperfish learns the basics of resource management from the koala.\n\nBased on the game state and the rules and preferences, does the cow give a magnifier to the canary?\nQuestion: Does the cow give a magnifying glass to the canary?",
        "idx": 244,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cow does not give a magnifying glass to the canary whenever at least one animal learns the basics of resource management from the koala.\nrule1() = learn_basics_of_resource_management(animal) from koala => not give_magnifying_glass(cow, canary)\n\n# The current state of the game is as follows\n# The viperfish learns the basics of resource management from the koala.\nlearn_basics_of_resource_management(viperfish) from koala = True\n\n# Based on the game state and the rules and preferences, does the cow give a magnifier to the canary?\nquestion = give_magnifying_glass(cow, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the crocodile, if it has a card with a primary color, then we can conclude that it holds an equal number of points as the meerkat\nRule2: Regarding the crocodile, if it does not have her keys, then we can conclude that it holds the same number of points as the meerkat\nRule3: If something raises a flag of peace for the eel, then it does not hold an equal number of points as the meerkat.\nRule1 is preferred over Rule3\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe crocodile has a card that is indigo in color.\nThe crocodile is holding her keys.\n\nBased on the game state and the rules and preferences, does the crocodile hold the same number of points as the meerkat?\nQuestion: Do the crocodile and the meerkat hold the same number of points?",
        "idx": 245,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the crocodile, if it has a card with a primary color, then we can conclude that it holds an equal number of points as the meerkat\nrule1() = has_card(crocodile) & primary_color(card) => points(crocodile) == points(meerkat)\n# Rule2: Regarding the crocodile, if it does not have her keys, then we can conclude that it holds the same number of points as the meerkat\nrule2() = not has_keys(crocodile) => points(crocodile) == points(meerkat)\n# Rule3: If something raises a flag of peace for the eel, then it does not hold an equal number of points as the meerkat.\nrule3() = raise_flag_of_peace(something, eel) => not points(something) == points(meerkat)\n\n# Rule1 is preferred over Rule3\npreferred_rule1_over_rule3() = rule1() and not rule3()\n# Rule2 is preferred over Rule3\npreferred_rule2_over_rule3() = rule2() and not rule3()\n\n# The current state of the game is as follows\n# The crocodile has a card that is indigo in color\nhas_card(crocodile) = True\ncolor(card, indigo) = True\n# The crocodile is holding her keys.\nhas_keys(crocodile) = True\n\n# Based on the game state and the rules and preferences, does the crocodile hold the same number of points as the meerkat?\nquestion = points(crocodile) == points(meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the dog has more than 17 friends, then the dog does not give a magnifying glass to the caterpillar\nRule2: If the dog has a card whose color is one of the rainbow colors, then the dog gives a magnifier to the caterpillar\nRule3: If the dog has something to carry apples and oranges, then the dog does not give a magnifier to the caterpillar\nRule4: If the dog has a name whose first letter is the same as the first letter of the wolverine's name, then the dog gives a magnifying glass to the caterpillar.\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule4\nRule3 is preferred over Rule2\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe dog has a white color card and is named Pablo.\nThe dog has five friends that are kind and 2 friends that are not.\nThe wolverine is named Paco.\n\nBased on the game state and the rules and preferences, does the dog give a magnifier to the caterpillar?\nQuestion: Does the dog give a magnifier to the caterpillar?",
        "idx": 246,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the dog has more than 17 friends, then the dog does not give a magnifying glass to the caterpillar\nrule1() = friends(dog) > 17 => not give_magnifier(dog, caterpillar)\n# Rule2: If the dog has a card whose color is one of the rainbow colors, then the dog gives a magnifier to the caterpillar\nrule2() = has_color_card(dog, rainbow_colors) => give_magnifier(dog, caterpillar)\n# Rule3: If the dog has something to carry apples and oranges, then the dog does not give a magnifier to the caterpillar\nrule3() = has_item(dog, carry_apples_oranges) => not give_magnifier(dog, caterpillar)\n# Rule4: Regarding the dog, if it has a name whose first letter is the same as the first letter of the wolverine's name, then we can conclude that it gives a magnifying glass to the caterpillar.\nrule4() = first_letter(name(dog)) == first_letter(name(wolverine)) => give_magnifier(dog, caterpillar)\n\n# Rule1 is preferred over Rule2\nprefer(rule1, rule2)\n# Rule1 is preferred over Rule4\nprefer(rule1, rule4)\n# Rule3 is preferred over Rule2\nprefer(rule3, rule2)\n# Rule3 is preferred over Rule4\nprefer(rule3, rule4)\n\n# The current state of the game is as follows\n# The dog has a card that is white in color, and is named Pablo\nhas_color_card(dog, white) = True\nname(dog) = \"Pablo\"\n# The dog has five friends that are kind and 2 friends that are not\nfriends(dog, kind) = 5\nfriends(dog, not_kind) = 2\n# The wolverine is named Paco.\nname(wolverine) = \"Paco\"\n\n# Based on the game state and the rules and preferences, does the dog give a magnifier to the caterpillar?\nquestion = give_magnifier(dog, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the eel, if it has a card whose color starts with the letter \"l\", then we can conclude that it does not owe money to the squid.\nRule2: If the eel has a name whose first letter is the same as the first letter of the hummingbird's name, then the eel does not owe money to the squid.\n\nThe current state of the game is as follows\nThe eel has 11 friends.\nThe eel has a backpack.\nThe eel has a card that is black in color.\nThe eel is named Paco.\nThe hummingbird is named Pablo.\n\nBased on the game state and the rules and preferences, does the eel owe money to the squid?\nQuestion: Does the eel owe money to the squid?",
        "idx": 247,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the eel, if it has a card whose color starts with the letter \"l\", then we can conclude that it does not owe money to the squid\nrule1() = starts_with(color(card, l)) => not owe(eel, money, squid)\n# Rule2: If the eel has a name whose first letter is the same as the first letter of the hummingbird's name, then the eel does not owe $$$ to the squid.\nrule2() = first_letter(name(eel)) == first_letter(name(hummingbird)) => not owe(eel, money, squid)\n\n# The current state of the game is as follows\n# The eel has 11 friends\nfriends(eel) = 11\n# The eel has a backpack\nhas(eel, backpack) = True\n# The eel has a card that is black in color\nhas(eel, card) = True\ncolor(card, black) = True\n# The eel is named Paco\nname(eel) = \"Paco\"\n# The hummingbird is named Pablo.\nname(hummingbird) = \"Pablo\"\n\n# Based on the game state and the rules and preferences, does the eel owe money to the squid?\nquestion = owe(eel, money, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the gecko has a musical instrument, then the gecko owes money to the grasshopper.\n\nThe current state of the game is as follows\nThe gecko has some spinach.\n\nBased on the game state and the rules and preferences, does the gecko owe money to the grasshopper?\nQuestion: Does the gecko owe money to the grasshopper?",
        "idx": 248,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the gecko has a musical instrument, then the gecko owes $$$ to the grasshopper.\nrule1() = has(gecko, musical_instrument) => owes(gecko, money, grasshopper)\n\n# The current state of the game is as follows\n# The gecko has some spinach.\nhas(gecko, spinach) = True\n\n# Based on the game state and the rules and preferences, does the gecko owe money to the grasshopper?\nquestion = owes(gecko, money, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: For the cat, if the belief is that the mosquito becomes an actual enemy of the cat and the lion respects the cat, then you can add \"the cat needs the support of the gecko\" to your conclusions\nRule2: If the grizzly bear does not respect the cat, then the cat does not need the support of the gecko.\n\nThe current state of the game is as follows\nThe lion respects the cat.\nThe mosquito becomes an enemy of the cat.\n\nBased on the game state and the rules and preferences, does the cat need support from the gecko?\nQuestion: Does the cat need support from the gecko?",
        "idx": 249,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the cat, if the belief is that the mosquito becomes an actual enemy of the cat and the lion respects the cat, then you can add \"the cat needs the support of the gecko\" to your conclusions\nrule1() = becomes_enemy(mosquito, cat) & respects(lion, cat) => needs_support(cat, gecko)\n# Rule2: If the grizzly bear does not respect the cat, then the cat does not need the support of the gecko.\nrule2() = not respects(grizzly_bear, cat) => not needs_support(cat, gecko)\n\n# The current state of the game is as follows\n# The lion respects the cat\nrespects(lion, cat) = True\n# The mosquito becomes an enemy of the cat.\nbecomes_enemy(mosquito, cat) = True\n\n# Based on the game state and the rules and preferences, does the cat need support from the gecko?\nquestion = needs_support(cat, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish has more than 2 friends, then the catfish burns the warehouse that is in possession of the octopus.\nRule2: If you are positive that you saw one of the animals removes one of the pieces of the dog, you can be certain that it will not burn the warehouse of the octopus.\n\nThe current state of the game is as follows\nThe catfish removes from the board one of the pieces of the dog.\n\nBased on the game state and the rules and preferences, does the catfish burn the warehouse of the octopus?\nQuestion: Does the catfish burn the warehouse of the octopus?",
        "idx": 250,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the catfish has more than 2 friends, then the catfish burns the warehouse that is in possession of the octopus\nrule1() = friends(catfish) > 2 => burn_warehouse(catfish, octopus)\n# Rule2: If you are positive that you saw one of the animals removes one of the pieces of the dog, you can be certain that it will not burn the warehouse of the octopus.\nrule2() = remove_piece(animal, dog) => not burn_warehouse(animal, octopus)\n\n# The current state of the game is as follows\n# The catfish removes from the board one of the pieces of the dog.\nremove_piece(catfish, dog) = True\n\n# Based on the game state and the rules and preferences, does the catfish burn the warehouse of the octopus?\nquestion = burn_warehouse(catfish, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the aardvark, if it has a card with a primary color, then we can conclude that it knows the defensive plans of the cricket.\n\nThe current state of the game is as follows\nThe aardvark has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the aardvark know the defensive plans of the cricket?\nQuestion: Does the aardvark know the defensive plans of the cricket?",
        "idx": 251,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the aardvark, if it has a card with a primary color, then we can conclude that it knows the defensive plans of the cricket.\nrule1() = has_card(aardvark, primary_color) => knows_defensive_plans(aardvark, cricket)\n\n# The current state of the game is as follows\n# The aardvark has a card that is white in color.\nhas_card(aardvark, white) = True\n\n# Based on the game state and the rules and preferences, does the aardvark know the defensive plans of the cricket?\nquestion = knows_defensive_plans(aardvark, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something raises a flag of peace for the cow but does not owe money to the dog, what can you certainly conclude? You can conclude that it offers a job to the carp.\n\nThe current state of the game is as follows\nThe hippopotamus raises a peace flag for the cow but does not owe money to the dog.\n\nBased on the game state and the rules and preferences, does the hippopotamus offer a job to the carp?\nQuestion: Does the hippopotamus offer a job to the carp?",
        "idx": 252,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something raises a flag of peace for the cow but does not owe money to the dog, what can you certainly conclude? You can conclude that it offers a job to the carp.\nrule1() = raise_flag_of_peace(something, cow) & not owes(something, money, dog) => offer_job_position(something, carp)\n\n# The current state of the game is as follows\n# The hippopotamus raises a peace flag for the cow but does not owe money to the dog.\nraise_flag_of_peace(hippopotamus, cow) = True\nowes(hippopotamus, money, dog) = False\n\n# Based on the game state and the rules and preferences, does the hippopotamus offer a job to the carp?\nquestion = offer_job_position(hippopotamus, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals owes money to the viperfish, you can be certain that it will not offer a job to the canary.\n\nThe current state of the game is as follows\nThe dog has a card that is violet in color.\nThe dog is named Tarzan.\nThe dog owes money to the viperfish.\nThe salmon is named Lola.\n\nBased on the game state and the rules and preferences, does the dog offer a job to the canary?\nQuestion: Does the dog offer a job to the canary?",
        "idx": 253,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals owes $$$ to the viperfish, you can be certain that it will not offer a job to the canary.\nrule1() = owes(animal, money, viperfish) => not offer_job(animal, canary)\n\n# The current state of the game is as follows\n# The dog has a card that is violet in color\ncolor(card, violet) = True\n# The dog is named Tarzan\nname(dog, Tarzan) = True\n# The dog owes money to the viperfish\nowes(dog, money, viperfish) = True\n# The salmon is named Lola.\nname(salmon, Lola) = True\n\n# Based on the game state and the rules and preferences, does the dog offer a job to the canary?\nquestion = offer_job(dog, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not offer a job position to the buffalo, you can be certain that it will learn elementary resource management from the doctorfish without a doubt.\n\nThe current state of the game is as follows\nThe lobster does not learn the basics of resource management from the buffalo.\n\nBased on the game state and the rules and preferences, does the lobster learn the basics of resource management from the doctorfish?\nQuestion: Does the lobster learn the basics of resource management from the doctorfish?",
        "idx": 254,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not offer a job position to the buffalo, you can be certain that it will learn elementary resource management from the doctorfish without a doubt.\nrule1() = not offer_job_position(animal, buffalo) => learn_basics_of_resource_management(animal, doctorfish)\n\n# The current state of the game is as follows\n# The lobster does not learn the basics of resource management from the buffalo.\nnot learn_basics_of_resource_management(lobster, buffalo) = True\n\n# Based on the game state and the rules and preferences, does the lobster learn the basics of resource management from the doctorfish?\nquestion = learn_basics_of_resource_management(lobster, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the spider works fewer hours than before, then the spider shows her cards (all of them) to the buffalo.\n\nThe current state of the game is as follows\nThe spider reduced her work hours recently.\n\nBased on the game state and the rules and preferences, does the spider show all her cards to the buffalo?\nQuestion: Does the spider show all her cards to the buffalo?",
        "idx": 255,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the spider works fewer hours than before, then the spider shows her cards (all of them) to the buffalo.\nrule1() = reduced_work_hours(spider) => show_cards(spider, buffalo)\n\n# The current state of the game is as follows\n# The spider reduced her work hours recently.\nreduced_work_hours(spider) = True\n\n# Based on the game state and the rules and preferences, does the spider show all her cards to the buffalo?\nquestion = show_cards(spider, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the caterpillar, if it has something to drink, then we can conclude that it does not roll the dice for the hare.\nRule2: Regarding the caterpillar, if it works more hours than before, then we can conclude that it does not roll the dice for the hare.\n\nThe current state of the game is as follows\nThe caterpillar has a hot chocolate.\nThe caterpillar reduced her work hours recently.\n\nBased on the game state and the rules and preferences, does the caterpillar roll the dice for the hare?\nQuestion: Does the caterpillar roll the dice for the hare?",
        "idx": 256,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the caterpillar, if it has something to drink, then we can conclude that it does not roll the dice for the hare\nrule1() = has_drink(caterpillar) => not roll_dice(caterpillar, hare)\n# Rule2: Regarding the caterpillar, if it works more hours than before, then we can conclude that it does not roll the dice for the hare.\nrule2() = increased_work_hours(caterpillar) => not roll_dice(caterpillar, hare)\n\n# The current state of the game is as follows\n# The caterpillar has a hot chocolate\nhas_drink(caterpillar) = True\n# The caterpillar reduced her work hours recently.\nincreased_work_hours(caterpillar) = False\n\n# Based on the game state and the rules and preferences, does the caterpillar roll the dice for the hare?\nquestion = roll_dice(caterpillar, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squirrel has a high-quality paper, then the squirrel does not show all her cards to the doctorfish\nRule2: If the squirrel has a musical instrument, then the squirrel does not show all her cards to the doctorfish\nRule3: If the squirrel has a card whose color is one of the rainbow colors, then the squirrel shows all her cards to the doctorfish.\n\nRule1 is preferred over Rule3\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe squirrel has a backpack.\nThe squirrel has a card that is black in color.\n\nBased on the game state and the rules and preferences, does the squirrel show all her cards to the doctorfish?\nQuestion: Does the squirrel show all her cards to the doctorfish?",
        "idx": 257,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squirrel has a high-quality paper, then the squirrel does not show all her cards to the doctorfish\nrule1() = has(squirrel, high_quality_paper) => not show_all_cards(squirrel, doctorfish)\n# Rule2: Regarding the squirrel, if it has a musical instrument, then we can conclude that it does not show all her cards to the doctorfish\nrule2() = has(squirrel, musical_instrument) => not show_all_cards(squirrel, doctorfish)\n# Rule3: If the squirrel has a card whose color is one of the rainbow colors, then the squirrel shows her cards (all of them) to the doctorfish.\nrule3() = has(squirrel, card) and color(card) in rainbow_colors => show_all_cards(squirrel, doctorfish)\n\n# Rule1 is preferred over Rule3\nrule1 > rule3\n# Rule2 is preferred over Rule3\nrule2 > rule3\n\n# The current state of the game is as follows\n# The squirrel has a backpack\nhas(squirrel, backpack) = True\n# The squirrel has a card that is black in color.\nhas(squirrel, card) = True\ncolor(card, black) = True\n\n# Based on the game state and the rules and preferences, does the squirrel show all her cards to the doctorfish?\nquestion = show_all_cards(squirrel, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the panther, if it has more than eight friends, then we can conclude that it proceeds to the spot that is right after the spot of the donkey.\nRule2: Regarding the panther, if it took a bike from the store, then we can conclude that it proceeds to the spot right after the donkey.\nRule3: Regarding the panther, if it has a name whose first letter is the same as the first letter of the dog's name, then we can conclude that it does not proceed to the spot that is right after the spot of the donkey.\n\nRule1 is preferred over Rule3\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe dog is named Tarzan.\nThe panther has two friends and is named Teddy.\nThe panther stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the panther proceed to the spot right after the donkey?\nQuestion: Does the panther proceed to the spot right after the donkey?",
        "idx": 258,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the panther, if it has more than eight friends, then we can conclude that it proceeds to the spot that is right after the spot of the donkey\nrule1() = friends(panther) > 8 => proceed_to_spot(panther) == spot_after(donkey)\n# Rule2: Regarding the panther, if it took a bike from the store, then we can conclude that it proceeds to the spot right after the donkey\nrule2() = stole_bike(panther) => proceed_to_spot(panther) == spot_after(donkey)\n# Rule3: Regarding the panther, if it has a name whose first letter is the same as the first letter of the dog's name, then we can conclude that it does not proceed to the spot that is right after the spot of the donkey.\nrule3() = first_letter(name(panther)) == first_letter(name(dog)) => proceed_to_spot(panther) != spot_after(donkey)\n\n# Rule1 is preferred over Rule3\n# Rule2 is preferred over Rule3\n\n# The current state of the game is as follows\n# The dog is named Tarzan\nname(dog) = \"Tarzan\"\n# The panther has two friends, and is named Teddy\nfriends(panther) = 2\nname(panther) = \"Teddy\"\n# The panther stole a bike from the store.\nstole_bike(panther) = True\n\n# Based on the game state and the rules and preferences, does the panther proceed to the spot right after the donkey?\nquestion = proceed_to_spot(panther) == spot_after(donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the donkey, if it has a card whose color starts with the letter \"e\", then we can conclude that it does not offer a job to the squid.\nRule2: If the donkey has something to carry apples and oranges, then the donkey does not offer a job position to the squid.\n\nThe current state of the game is as follows\nThe donkey has a basket.\nThe donkey has a card that is red in color.\nThe sun bear attacks the green fields whose owner is the donkey.\n\nBased on the game state and the rules and preferences, does the donkey offer a job to the squid?\nQuestion: Does the donkey offer a job position to the squid?",
        "idx": 259,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the donkey, if it has a card whose color starts with the letter \"e\", then we can conclude that it does not offer a job to the squid\nrule1() = has_card(donkey, card) & color_starts_with(card, \"e\") => not offer_job_position(donkey, squid)\n# Rule2: If the donkey has something to carry apples and oranges, then the donkey does not offer a job position to the squid.\nrule2() = has(donkey, something_to_carry_apples_and_oranges) => not offer_job_position(donkey, squid)\n\n# The current state of the game is as follows\n# The donkey has a basket\nhas(donkey, basket) = True\n# The donkey has a card that is red in color\nhas_card(donkey, card) = True\ncolor(card, red) = True\n# The sun bear attacks the green fields whose owner is the donkey.\nattacks(sun_bear, green_fields, donkey) = True\n\n# Based on the game state and the rules and preferences, does the donkey offer a job to the squid?\nquestion = offer_job_position(donkey, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cat holds the same number of points as the lion whenever at least one animal removes one of the pieces of the snail.\n\nThe current state of the game is as follows\nThe cricket gives a magnifier to the snail.\n\nBased on the game state and the rules and preferences, does the cat hold the same number of points as the lion?\nQuestion: Do the cat and the lion hold the same number of points?",
        "idx": 260,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cat holds the same number of points as the lion whenever at least one animal removes one of the pieces of the snail.\nrule1() = remove_piece(snail, animal) => points(cat) == points(lion)\n\n# The current state of the game is as follows\n# The cricket gives a magnifier to the snail.\ngive(cricket, magnifier, snail) = True\n\n# Based on the game state and the rules and preferences, does the cat hold the same number of points as the lion?\nquestion = points(cat) == points(lion)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the snail, if it has a card whose color starts with the letter \"v\", then we can conclude that it knows the defensive plans of the turtle.\nRule2: If the carp becomes an enemy of the snail, then the snail is not going to know the defense plan of the turtle.\n\nThe current state of the game is as follows\nThe snail has a card that is violet in color.\n\nBased on the game state and the rules and preferences, does the snail know the defensive plans of the turtle?\nQuestion: Does the snail know the defensive plans of the turtle?",
        "idx": 261,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the snail, if it has a card whose color starts with the letter \"v\", then we can conclude that it knows the defensive plans of the turtle\nrule1() = has(snail, card) & color_starts_with(card, \"v\") => knows(snail, defensive_plans, turtle)\n# Rule2: If the carp becomes an enemy of the snail, then the snail is not going to know the defense plan of the turtle.\nrule2() = enemy(carp, snail) => not knows(snail, defensive_plans, turtle)\n\n# The current state of the game is as follows\n# The snail has a card that is violet in color.\nhas(snail, card) = True\ncolor(card, violet) = True\n\n# Based on the game state and the rules and preferences, does the snail know the defensive plans of the turtle?\nquestion = knows(snail, defensive_plans, turtle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the zander has more than 10 friends, then the zander does not know the defensive plans of the lion.\n\nThe current state of the game is as follows\nThe zander has fourteen friends.\n\nBased on the game state and the rules and preferences, does the zander know the defensive plans of the lion?\nQuestion: Does the zander know the defensive plans of the lion?",
        "idx": 262,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the zander has more than 10 friends, then the zander does not know the defensive plans of the lion.\nrule1() = friends(zander) > 10 => not know_defensive_plans(zander, lion)\n\n# The current state of the game is as follows\n# The zander has fourteen friends.\nfriends(zander) = 14\n\n# Based on the game state and the rules and preferences, does the zander know the defensive plans of the lion?\nquestion = know_defensive_plans(zander, lion)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the koala has a card whose color starts with the letter \"y\", then the koala raises a peace flag for the eagle.\n\nThe current state of the game is as follows\nThe koala has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the koala raise a peace flag for the eagle?\nQuestion: Does the koala raise a peace flag for the eagle?",
        "idx": 263,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the koala has a card whose color starts with the letter \"y\", then the koala raises a peace flag for the eagle.\nrule1() = starts_with_color(koala, \"y\") => raise_flag_of_peace(koala, eagle)\n\n# The current state of the game is as follows\n# The koala has a card that is white in color.\ncolor(koala_card) = \"white\"\n\n# Based on the game state and the rules and preferences, does the koala raise a peace flag for the eagle?\nquestion = raise_flag_of_peace(koala, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squirrel burns the warehouse that is in possession of the buffalo, then the buffalo raises a flag of peace for the octopus.\nRule2: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the spider's name, then we can conclude that it does not raise a flag of peace for the octopus.\n\nThe current state of the game is as follows\nThe buffalo is named Tarzan.\nThe spider is named Tessa.\nThe squirrel burns the warehouse of the buffalo.\n\nBased on the game state and the rules and preferences, does the buffalo raise a peace flag for the octopus?\nQuestion: Does the buffalo raise a peace flag for the octopus?",
        "idx": 264,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squirrel burns the warehouse that is in possession of the buffalo, then the buffalo raises a flag of peace for the octopus\nrule1() = burns_warehouse(squirrel, buffalo) => raise_flag_of_peace(buffalo, octopus)\n# Rule2: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the spider's name, then we can conclude that it does not raise a flag of peace for the octopus.\nrule2() = first_letter(name(buffalo)) == first_letter(name(spider)) => not raise_flag_of_peace(buffalo, octopus)\n\n# The current state of the game is as follows\n# The buffalo is named Tarzan\nname(buffalo) = \"Tarzan\"\n# The spider is named Tessa\nname(spider) = \"Tessa\"\n# The squirrel burns the warehouse of the buffalo.\nburns_warehouse(squirrel, buffalo) = True\n\n# Based on the game state and the rules and preferences, does the buffalo raise a peace flag for the octopus?\nquestion = raise_flag_of_peace(buffalo, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the kangaroo, if it has something to sit on, then we can conclude that it does not give a magnifier to the kudu\nRule2: If the kangaroo has a sharp object, then the kangaroo does not give a magnifying glass to the kudu\nRule3: If the kangaroo has a card whose color starts with the letter \"h\", then the kangaroo gives a magnifier to the kudu.\n\nRule1 is preferred over Rule3\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe kangaroo has a bench.\nThe kangaroo has a card that is white in color.\nThe kangaroo has a knapsack.\nThe kangaroo published a high-quality paper.\n\nBased on the game state and the rules and preferences, does the kangaroo give a magnifier to the kudu?\nQuestion: Does the kangaroo give a magnifier to the kudu?",
        "idx": 265,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kangaroo, if it has something to sit on, then we can conclude that it does not give a magnifier to the kudu\nrule1() = has(kangaroo, something_to_sit_on) => not give(kangaroo, magnifier, kudu)\n# Rule2: If the kangaroo has a sharp object, then the kangaroo does not give a magnifying glass to the kudu\nrule2() = has(kangaroo, sharp_object) => not give(kangaroo, magnifying_glass, kudu)\n# Rule3: If the kangaroo has a card whose color starts with the letter \"h\", then the kangaroo gives a magnifier to the kudu.\nrule3() = has(kangaroo, card) and starts_with(color(card), \"h\") => give(kangaroo, magnifier, kudu)\n\n# Rule1 is preferred over Rule3\npreference1() = rule1() > rule3()\n# Rule2 is preferred over Rule3\npreference2() = rule2() > rule3()\n\n# The current state of the game is as follows\n# The kangaroo has a bench\nhas(kangaroo, something_to_sit_on) = True\n# The kangaroo has a card that is white in color\nhas(kangaroo, card) = True\ncolor(card, white) = True\n# The kangaroo has a knapsack\nhas(kangaroo, knapsack) = True\n# The kangaroo published a high-quality paper\npublished(kangaroo, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the kangaroo give a magnifier to the kudu?\nquestion = give(kangaroo, magnifier, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the swordfish, if it has a name whose first letter is the same as the first letter of the bat's name, then we can conclude that it owes money to the aardvark.\nRule2: If the swordfish has difficulty finding food, then the swordfish does not owe money to the aardvark.\n\nThe current state of the game is as follows\nThe bat is named Mojo.\nThe swordfish dreamed of a luxury aircraft.\nThe swordfish has a card that is yellow in color, and is named Lola.\n\nBased on the game state and the rules and preferences, does the swordfish owe money to the aardvark?\nQuestion: Does the swordfish owe money to the aardvark?",
        "idx": 266,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the swordfish, if it has a name whose first letter is the same as the first letter of the bat's name, then we can conclude that it owes money to the aardvark\nrule1() = first_letter(name(swordfish)) == first_letter(name(bat)) => owes(swordfish, money, aardvark)\n# Rule2: If the swordfish has difficulty to find food, then the swordfish does not owe $$$ to the aardvark.\nrule2() = difficulty_finding_food(swordfish) => not owes(swordfish, money, aardvark)\n\n# The current state of the game is as follows\n# The bat is named Mojo\nname(bat) = \"Mojo\"\n# The swordfish dreamed of a luxury aircraft\ndreamed(swordfish, \"luxury aircraft\") = True\n# The swordfish has a card that is yellow in color, and is named Lola.\nhas(swordfish, card) = True\ncolor(card, yellow) = True\nname(card, \"Lola\") = True\n\n# Based on the game state and the rules and preferences, does the swordfish owe money to the aardvark?\nquestion = owes(swordfish, money, aardvark)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the lion, if it has a sharp object, then we can conclude that it does not become an actual enemy of the spider\nRule2: Regarding the lion, if it has something to drink, then we can conclude that it does not become an actual enemy of the spider\nRule3: If the lion is a fan of Chris Ronaldo, then the lion becomes an enemy of the spider\nRule4: If the lion has a musical instrument, then the lion becomes an enemy of the spider.\n\nRule1 is preferred over Rule3\nRule1 is preferred over Rule4\nRule2 is preferred over Rule3\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe lion has a guitar\nThe lion has a piano\nThe lion hates Chris Ronaldo.\n\nBased on the game state and the rules and preferences, does the lion become an enemy of the spider?\nQuestion: Does the lion become an enemy of the spider?",
        "idx": 267,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the lion, if it has a sharp object, then we can conclude that it does not become an actual enemy of the spider\nrule1() = has(lion, sharp_object) => not enemy(lion, spider)\n# Rule2: Regarding the lion, if it has something to drink, then we can conclude that it does not become an actual enemy of the spider\nrule2() = has(lion, drink) => not enemy(lion, spider)\n# Rule3: If the lion is a fan of Chris Ronaldo, then the lion becomes an enemy of the spider\nrule3() = fan_of(lion, Chris_Ronaldo) => enemy(lion, spider)\n# Rule4: If the lion has a musical instrument, then the lion becomes an enemy of the spider.\nrule4() = has(lion, musical_instrument) => enemy(lion, spider)\n\n# Rule1 is preferred over Rule3\nprefer(rule1, rule3)\n# Rule1 is preferred over Rule4\nprefer(rule1, rule4)\n# Rule2 is preferred over Rule3\nprefer(rule2, rule3)\n# Rule2 is preferred over Rule4\nprefer(rule2, rule4)\n\n# The current state of the game is as follows\n# The lion has a guitar\nhas(lion, guitar) = True\n# The lion has a piano\nhas(lion, piano) = True\n# The lion hates Chris Ronaldo.\nhates(lion, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the lion become an enemy of the spider?\nquestion = enemy(lion, spider)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the meerkat has fewer than 8 friends, then the meerkat does not hold an equal number of points as the hippopotamus\nRule2: If the meerkat has a high salary, then we can conclude that it does not hold the same number of points as the hippopotamus.\n\nThe current state of the game is as follows\nThe meerkat has 4 adventurous friends and one non-adventurous friend.\nThe meerkat has a low-income job.\n\nBased on the game state and the rules and preferences, does the meerkat hold the same number of points as the hippopotamus?\nQuestion: Does the meerkat hold the same number of points as the hippopotamus?",
        "idx": 268,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the meerkat has fewer than 8 friends, then the meerkat does not hold an equal number of points as the hippopotamus\nrule1() = friends(meerkat) < 8 => not equal_points(meerkat, hippopotamus)\n# Rule2: Regarding the meerkat, if it has a high salary, then we can conclude that it does not hold the same number of points as the hippopotamus.\nrule2() = salary(meerkat) == high => not equal_points(meerkat, hippopotamus)\n\n# The current state of the game is as follows\n# The meerkat has 4 friends that are adventurous and one friend that is not\nfriends(meerkat) = 4\n# The meerkat has a low-income job.\nsalary(meerkat) = low\n\n# Based on the game state and the rules and preferences, does the meerkat hold the same number of points as the hippopotamus?\nquestion = equal_points(meerkat, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The ferret does not attack the green fields whose owner is the sea bass, in the case where the pig respects the ferret.\nRule2: Regarding the ferret, if it has fewer than 17 friends, then we can conclude that it attacks the green fields whose owner is the sea bass.\n\nThe current state of the game is as follows\nThe ferret has eighteen friends.\n\nBased on the game state and the rules and preferences, does the ferret attack the green fields whose owner is the sea bass?\nQuestion: Does the ferret attack the green fields whose owner is the sea bass?",
        "idx": 269,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The ferret does not attack the green fields whose owner is the sea bass, in the case where the pig respects the ferret\nrule1() = respect(pig, ferret) => not attack(ferret, green_fields, sea_bass)\n# Rule2: Regarding the ferret, if it has fewer than 17 friends, then we can conclude that it attacks the green fields whose owner is the sea bass.\nrule2() = friends(ferret) < 17 => attack(ferret, green_fields, sea_bass)\n\n# The current state of the game is as follows\n# The ferret has eighteen friends.\nfriends(ferret) = 18\n\n# Based on the game state and the rules and preferences, does the ferret attack the green fields whose owner is the sea bass?\nquestion = attack(ferret, green_fields, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the swordfish, if it owns a luxury aircraft, then we can conclude that it rolls the dice for the sea bass.\n\nThe current state of the game is as follows\nThe crocodile holds the same number of points as the swordfish.\nThe swordfish purchased a luxury aircraft.\n\nBased on the game state and the rules and preferences, does the swordfish roll the dice for the sea bass?\nQuestion: Does the swordfish roll the dice for the sea bass?",
        "idx": 270,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the swordfish, if it owns a luxury aircraft, then we can conclude that it rolls the dice for the sea bass.\nrule1() = owns(swordfish, luxury_aircraft) => roll_dice(swordfish, sea_bass)\n\n# The current state of the game is as follows\n# The crocodile holds the same number of points as the swordfish\npoints(crocodile) == points(swordfish) = True\n# The swordfish purchased a luxury aircraft.\nowns(swordfish, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the swordfish roll the dice for the sea bass?\nquestion = roll_dice(swordfish, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal offers a job to the lion, then the starfish does not remove one of the pieces of the polar bear.\n\nThe current state of the game is as follows\nThe kudu becomes an enemy of the starfish.\nThe raven offers a job to the lion.\nThe sun bear does not knock down the fortress of the starfish.\n\nBased on the game state and the rules and preferences, does the starfish remove from the board one of the pieces of the polar bear?\nQuestion: Does the starfish remove one of the pieces of the polar bear from the board?",
        "idx": 271,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal offers a job to the lion, then the starfish does not remove one of the pieces of the polar bear.\nrule1() = offer_job_position(animal, lion) => not remove_piece(starfish, polar_bear)\n\n# The current state of the game is as follows\n# The kudu becomes an enemy of the starfish\nbecome_enemy(kudu, starfish) = True\n# The raven offers a job to the lion\noffer_job_position(raven, lion) = True\n# The sun bear does not knock down the fortress of the starfish.\nknock_down_fortress(sun_bear, starfish) = False\n\n# Based on the game state and the rules and preferences, does the starfish remove from the board one of the pieces of the polar bear?\nquestion = remove_piece(starfish, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the dog, if it has a high salary, then we can conclude that it prepares armor for the kiwi.\nRule2: Regarding the dog, if it has a name whose first letter is the same as the first letter of the aardvark's name, then we can conclude that it prepares armor for the kiwi.\n\nThe current state of the game is as follows\nThe aardvark is named Charlie.\nThe dog has a low-income job and is named Tarzan.\n\nBased on the game state and the rules and preferences, does the dog prepare armor for the kiwi?\nQuestion: Does the dog prepare armor for the kiwi?",
        "idx": 272,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the dog, if it has a high salary, then we can conclude that it prepares armor for the kiwi\nrule1() = salary(dog) == high => prepare_armor(dog, kiwi)\n# Rule2: Regarding the dog, if it has a name whose first letter is the same as the first letter of the aardvark's name, then we can conclude that it prepares armor for the kiwi.\nrule2() = first_letter(name(dog)) == first_letter(name(aardvark)) => prepare_armor(dog, kiwi)\n\n# The current state of the game is as follows\n# The aardvark is named Charlie\nname(aardvark) = \"Charlie\"\n# The dog has a low-income job, and is named Tarzan.\nsalary(dog) = low\nname(dog) = \"Tarzan\"\n\n# Based on the game state and the rules and preferences, does the dog prepare armor for the kiwi?\nquestion = prepare_armor(dog, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eel does not raise a peace flag for the tiger, then the tiger proceeds to the spot that is right after the spot of the panda bear.\n\nThe current state of the game is as follows\nThe eel does not raise a peace flag for the tiger.\n\nBased on the game state and the rules and preferences, does the tiger proceed to the spot right after the panda bear?\nQuestion: Does the tiger proceed to the spot that is right after the spot of the panda bear?",
        "idx": 273,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eel does not raise a peace flag for the tiger, then the tiger proceeds to the spot that is right after the spot of the panda bear.\nrule1() = not raise_flag_of_peace(eel, tiger) => proceed_to_spot(tiger, spot_after(panda_bear))\n\n# The current state of the game is as follows\n# The eel does not raise a peace flag for the tiger.\nraise_flag_of_peace(eel, tiger) = False\n\n# Based on the game state and the rules and preferences, does the tiger proceed to the spot right after the panda bear?\nquestion = proceed_to_spot(tiger, spot_after(panda_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tilapia has more than 1 friend, then the tilapia does not proceed to the spot that is right after the spot of the sea bass.\nRule2: Regarding the tilapia, if it has a card whose color appears in the flag of Japan, then we can conclude that it does not proceed to the spot right after the sea bass.\n\nThe current state of the game is as follows\nThe tilapia has 3 friends that are lazy and six friends that are not.\nThe tilapia has a card that is orange in color.\n\nBased on the game state and the rules and preferences, does the tilapia proceed to the spot right after the sea bass?\nQuestion: Does the tilapia proceed to the spot right after the sea bass?",
        "idx": 274,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the tilapia has more than 1 friend, then the tilapia does not proceed to the spot that is right after the spot of the sea bass\nrule1() = friends(tilapia) > 1 => not proceed_to_spot(tilapia, right_after(sea_bass))\n# Rule2: Regarding the tilapia, if it has a card whose color appears in the flag of Japan, then we can conclude that it does not proceed to the spot right after the sea bass.\nrule2() = has(tilapia, card) and color(card) in flag_colors(Japan) => not proceed_to_spot(tilapia, right_after(sea_bass))\n\n# The current state of the game is as follows\n# The tilapia has 3 friends that are lazy and six friends that are not\nfriends(tilapia) = 3 + 6 = 9\n# The tilapia has a card that is orange in color.\nhas(tilapia, card) = True\ncolor(card, orange) = True\n\n# Based on the game state and the rules and preferences, does the tilapia proceed to the spot right after the sea bass?\nquestion = proceed_to_spot(tilapia, right_after(sea_bass))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something does not remove one of the pieces of the halibut but learns the basics of resource management from the octopus because in this case it will, surely, know the defensive plans of the elephant (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe grizzly bear learns the basics of resource management from the octopus.\nThe grizzly bear removes from the board one of the pieces of the halibut.\n\nBased on the game state and the rules and preferences, does the grizzly bear know the defensive plans of the elephant?\nQuestion: Does the grizzly bear know the defensive plans of the elephant?",
        "idx": 275,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not remove one of the pieces of the halibut but learns the basics of resource management from the octopus because in this case it will, surely, know the defensive plans of the elephant (this may or may not be problematic).\nrule1() = not remove_piece(something, halibut) & learn_basics_from(something, octopus) => know_defensive_plans(something, elephant)\n\n# The current state of the game is as follows\n# The grizzly bear learns the basics of resource management from the octopus\nlearn_basics_from(grizzly_bear, octopus) = True\n# The grizzly bear removes from the board one of the pieces of the halibut.\nremove_piece(grizzly_bear, halibut) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear know the defensive plans of the elephant?\nquestion = know_defensive_plans(grizzly_bear, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not knock down the fortress of the sun bear, you can be certain that it will not prepare armor for the hippopotamus.\nRule2: If you are positive that you saw one of the animals holds an equal number of points as the catfish, you can be certain that it will also prepare armor for the hippopotamus.\n\nThe current state of the game is as follows\nThe snail holds the same number of points as the catfish.\n\nBased on the game state and the rules and preferences, does the snail prepare armor for the hippopotamus?\nQuestion: Does the snail prepare armor for the hippopotamus?",
        "idx": 276,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not knock down the fortress of the sun bear, you can be certain that it will not prepare armor for the hippopotamus\nrule1() = not knock_down_fortress(animal) => not prepare_armor(animal, hippopotamus)\n# Rule2: If you are positive that you saw one of the animals holds an equal number of points as the catfish, you can be certain that it will also prepare armor for the hippopotamus.\nrule2() = holds_equal_points(animal, catfish) => prepare_armor(animal, hippopotamus)\n\n# The current state of the game is as follows\n# The snail holds the same number of points as the catfish.\nholds_equal_points(snail, catfish) = True\n\n# Based on the game state and the rules and preferences, does the snail prepare armor for the hippopotamus?\nquestion = prepare_armor(snail, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal owes money to the kudu, then the kiwi does not show all her cards to the zander.\n\nThe current state of the game is as follows\nThe koala owes money to the kudu.\n\nBased on the game state and the rules and preferences, does the kiwi show all her cards to the zander?\nQuestion: Does the kiwi show all her cards to the zander?",
        "idx": 277,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal owes $$$ to the kudu, then the kiwi does not show all her cards to the zander.\nrule1() = owes_money(animal, kudu) => not show_all_cards(kiwi, zander)\n\n# The current state of the game is as follows\n# The koala owes money to the kudu.\nowes_money(koala, kudu) = True\n\n# Based on the game state and the rules and preferences, does the kiwi show all her cards to the zander?\nquestion = show_all_cards(kiwi, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something does not eat the food of the bat but rolls the dice for the hippopotamus because in this case it will, surely, respect the elephant (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe buffalo does not eat the food of the bat.\nThe buffalo does not roll the dice for the hippopotamus.\n\nBased on the game state and the rules and preferences, does the buffalo respect the elephant?\nQuestion: Does the buffalo respect the elephant?",
        "idx": 278,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not eat the food of the bat but rolls the dice for the hippopotamus because in this case it will, surely, respect the elephant (this may or may not be problematic).\nrule1() = not eat_food(bat, buffalo) & roll_dice(hippopotamus, buffalo) => respect(buffalo, elephant)\n\n# The current state of the game is as follows\n# The buffalo does not eat the food of the bat\neat_food(bat, buffalo) = False\n# The buffalo does not roll the dice for the hippopotamus.\nroll_dice(hippopotamus, buffalo) = False\n\n# Based on the game state and the rules and preferences, does the buffalo respect the elephant?\nquestion = respect(buffalo, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hummingbird has a name whose first letter is the same as the first letter of the mosquito's name, then the hummingbird learns elementary resource management from the amberjack.\nRule2: Regarding the hummingbird, if it has fewer than one friend, then we can conclude that it learns the basics of resource management from the amberjack.\n\nThe current state of the game is as follows\nThe hummingbird has five easy-going friends and four friends that are not easy-going.\nThe hummingbird is named Lola.\nThe mosquito is named Lucy.\n\nBased on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the amberjack?\nQuestion: Does the hummingbird learn the basics of resource management from the amberjack?",
        "idx": 279,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hummingbird has a name whose first letter is the same as the first letter of the mosquito's name, then the hummingbird learns elementary resource management from the amberjack\nrule1() = first_letter(hummingbird.name) == first_letter(mosquito.name) => learn_resource_management(hummingbird, amberjack)\n# Rule2: Regarding the hummingbird, if it has fewer than one friend, then we can conclude that it learns the basics of resource management from the amberjack.\nrule2() = friends(hummingbird) < 1 => learn_resource_management(hummingbird, amberjack)\n\n# The current state of the game is as follows\n# The hummingbird has five friends that are easy going and 4 friends that are not\nfriends(hummingbird) = 5\n# The hummingbird is named Lola\nhummingbird.name = \"Lola\"\n# The mosquito is named Lucy.\nmosquito.name = \"Lucy\"\n\n# Based on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the amberjack?\nquestion = learn_resource_management(hummingbird, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the elephant, if it created a time machine, then we can conclude that it does not attack the green fields of the sheep.\nRule2: If the elephant has a card whose color is one of the rainbow colors, then the elephant does not attack the green fields whose owner is the sheep.\n\nThe current state of the game is as follows\nThe elephant has a card that is white in color.\nThe elephant invented a time machine.\n\nBased on the game state and the rules and preferences, does the elephant attack the green fields whose owner is the sheep?\nQuestion: Does the elephant attack the green fields whose owner is the sheep?",
        "idx": 280,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the elephant, if it created a time machine, then we can conclude that it does not attack the green fields of the sheep\nrule1() = created_time_machine(elephant) => not attack_green_fields(elephant, sheep)\n# Rule2: If the elephant has a card whose color is one of the rainbow colors, then the elephant does not attack the green fields whose owner is the sheep.\nrule2() = has_rainbow_color_card(elephant) => not attack_green_fields(elephant, sheep)\n\n# The current state of the game is as follows\n# The elephant has a card that is white in color\nhas_card(elephant, card) = True\ncolor(card, white) = True\n# The elephant invented a time machine.\ncreated_time_machine(elephant) = True\n\n# Based on the game state and the rules and preferences, does the elephant attack the green fields whose owner is the sheep?\nquestion = attack_green_fields(elephant, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the cheetah, if it has a card with a primary color, then we can conclude that it does not knock down the fortress that belongs to the kangaroo.\nRule2: If the cheetah has a name whose first letter is the same as the first letter of the meerkat's name, then the cheetah knocks down the fortress of the kangaroo.\nRule3: Regarding the cheetah, if it has fewer than 16 friends, then we can conclude that it knocks down the fortress of the kangaroo.\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cheetah has a basket and has a card that is orange in color.\nThe cheetah has seventeen friends.\nThe cheetah is named Tango.\nThe meerkat is named Pashmak.\n\nBased on the game state and the rules and preferences, does the cheetah knock down the fortress of the kangaroo?\nQuestion: Does the cheetah knock down the fortress of the kangaroo?",
        "idx": 281,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cheetah, if it has a card with a primary color, then we can conclude that it does not knock down the fortress that belongs to the kangaroo\nrule1() = has(cheetah, card) and color(card) in primary_colors => not knock_down_fortress(cheetah, kangaroo)\n# Rule2: If the cheetah has a name whose first letter is the same as the first letter of the meerkat's name, then the cheetah knocks down the fortress of the kangaroo\nrule2() = first_letter(cheetah) == first_letter(meerkat) => knock_down_fortress(cheetah, kangaroo)\n# Rule3: Regarding the cheetah, if it has fewer than 16 friends, then we can conclude that it knocks down the fortress of the kangaroo.\nrule3() = friends(cheetah) < 16 => knock_down_fortress(cheetah, kangaroo)\n\n# Rule1 is preferred over Rule2\nrule1_preferred_over_rule2() = True\n# Rule1 is preferred over Rule3\nrule1_preferred_over_rule3() = True\n\n# The current state of the game is as follows\n# The cheetah has a basket, and has a card that is orange in color\nhas(cheetah, basket) = True\nhas(cheetah, card) = True\ncolor(card, orange) = True\n# The cheetah has seventeen friends\nfriends(cheetah) = 17\n# The cheetah is named Tango\nname(cheetah) = \"Tango\"\n# The meerkat is named Pashmak.\nname(meerkat) = \"Pashmak\"\n\n# Based on the game state and the rules and preferences, does the cheetah knock down the fortress of the kangaroo?\nquestion = knock_down_fortress(cheetah, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not give a magnifying glass to the kudu, you can be certain that it will need the support of the whale without a doubt.\n\nThe current state of the game is as follows\nThe blobfish is named Tarzan.\nThe cat is named Luna, struggles to find food, and does not give a magnifier to the kudu.\n\nBased on the game state and the rules and preferences, does the cat need support from the whale?\nQuestion: Does the cat need support from the whale?",
        "idx": 282,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not give a magnifying glass to the kudu, you can be certain that it will need the support of the whale without a doubt.\nrule1() = not give_magnifying_glass(animal, kudu) => need_support(animal, whale)\n\n# The current state of the game is as follows\n# The blobfish is named Tarzan\nname(blobfish) = \"Tarzan\"\n# The cat is named Luna, struggles to find food, and does not give a magnifier to the kudu.\nname(cat) = \"Luna\"\nstruggles_to_find_food(cat) = True\nnot give_magnifying_glass(cat, kudu) = True\n\n# Based on the game state and the rules and preferences, does the cat need support from the whale?\nquestion = need_support(cat, whale)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals needs support from the wolverine, you can be certain that it will not prepare armor for the zander.\n\nThe current state of the game is as follows\nThe koala needs support from the wolverine.\n\nBased on the game state and the rules and preferences, does the koala prepare armor for the zander?\nQuestion: Does the koala prepare armor for the zander?",
        "idx": 283,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals needs support from the wolverine, you can be certain that it will not prepare armor for the zander.\nrule1() = needs_support(animal, wolverine) => not prepare_armor(animal, zander)\n\n# The current state of the game is as follows\n# The koala needs support from the wolverine.\nneeds_support(koala, wolverine) = True\n\n# Based on the game state and the rules and preferences, does the koala prepare armor for the zander?\nquestion = prepare_armor(koala, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the crocodile has a name whose first letter is the same as the first letter of the squirrel's name, then the crocodile rolls the dice for the sheep.\n\nThe current state of the game is as follows\nThe crocodile is named Meadow.\nThe ferret eats the food of the koala.\nThe squirrel is named Casper.\n\nBased on the game state and the rules and preferences, does the crocodile roll the dice for the sheep?\nQuestion: Does the crocodile roll the dice for the sheep?",
        "idx": 284,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the crocodile has a name whose first letter is the same as the first letter of the squirrel's name, then the crocodile rolls the dice for the sheep.\nrule1() = first_letter(name(crocodile)) == first_letter(name(squirrel)) => roll_dice(crocodile, sheep)\n\n# The current state of the game is as follows\n# The crocodile is named Meadow\nname(crocodile) = \"Meadow\"\n# The ferret eats the food of the koala\neat_food(ferret, koala) = True\n# The squirrel is named Casper.\nname(squirrel) = \"Casper\"\n\n# Based on the game state and the rules and preferences, does the crocodile roll the dice for the sheep?\nquestion = roll_dice(crocodile, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something owes money to the koala and also winks at the kiwi because in this case it will surely proceed to the spot right after the cow (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe halibut owes money to the koala and winks at the kiwi.\nThe hare burns the warehouse of the halibut.\nThe mosquito knows the defensive plans of the halibut.\n\nBased on the game state and the rules and preferences, does the halibut proceed to the spot right after the cow?\nQuestion: Does the halibut proceed to the spot right after the cow?",
        "idx": 285,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something owes money to the koala and also winks at the kiwi because in this case it will surely proceed to the spot right after the cow (this may or may not be problematic).\nrule1() = owes_money(halibut, koala) & winks(halibut, kiwi) => proceed_after(halibut, cow)\n\n# The current state of the game is as follows\n# The halibut owes money to the koala, and winks at the kiwi\nowes_money(halibut, koala) = True\nwinks(halibut, kiwi) = True\n# The hare burns the warehouse of the halibut\nburns_warehouse(hare, halibut) = True\n# The mosquito knows the defensive plans of the halibut.\nknows_defensive_plans(mosquito, halibut) = True\n\n# Based on the game state and the rules and preferences, does the halibut proceed to the spot right after the cow?\nquestion = proceed_after(halibut, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the goldfish has a name whose first letter is the same as the first letter of the meerkat's name, then the goldfish does not hold the same number of points as the puffin.\n\nThe current state of the game is as follows\nThe goldfish is named Lola.\nThe meerkat is named Lily.\n\nBased on the game state and the rules and preferences, does the goldfish hold the same number of points as the puffin?\nQuestion: Does the goldfish hold the same number of points as the puffin?",
        "idx": 286,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the goldfish has a name whose first letter is the same as the first letter of the meerkat's name, then the goldfish does not hold the same number of points as the puffin.\nrule1() = first_letter(name(goldfish)) == first_letter(name(meerkat)) => not points(goldfish) == points(puffin)\n\n# The current state of the game is as follows\n# The goldfish is named Lola\nname(goldfish) = \"Lola\"\n# The meerkat is named Lily.\nname(meerkat) = \"Lily\"\n\n# Based on the game state and the rules and preferences, does the goldfish hold the same number of points as the puffin?\nquestion = points(goldfish) == points(puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something does not knock down the fortress that belongs to the caterpillar but it prepares armor for the kiwi, what can you certainly conclude? You can conclude that it also steals five points from the amberjack.\n\nThe current state of the game is as follows\nThe squirrel needs support from the kiwi but does not knock down the fortress of the caterpillar.\n\nBased on the game state and the rules and preferences, does the squirrel steal five points from the amberjack?\nQuestion: Does the squirrel steal five points from the amberjack?",
        "idx": 287,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not knock down the fortress that belongs to the caterpillar but it prepares armor for the kiwi, what can you certainly conclude? You can conclude that it also steals five points from the amberjack.\nrule1() = not knock_down_fortress(something, caterpillar) & prepare_armor(something, kiwi) => steal_points(something, amberjack, 5)\n\n# The current state of the game is as follows\n# The squirrel needs support from the kiwi but does not knock down the fortress of the caterpillar.\nneeds_support(squirrel, kiwi) = True\nnot knock_down_fortress(squirrel, caterpillar) = True\n\n# Based on the game state and the rules and preferences, does the squirrel steal five points from the amberjack?\nquestion = steal_points(squirrel, amberjack, 5)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals attacks the green fields of the mosquito, you can be certain that it will also learn elementary resource management from the cow.\nRule2: If something steals five points from the phoenix, then it does not learn elementary resource management from the cow.\n\nThe current state of the game is as follows\nThe sun bear attacks the green fields whose owner is the mosquito.\n\nBased on the game state and the rules and preferences, does the sun bear learn the basics of resource management from the cow?\nQuestion: Does the sun bear learn the basics of resource management from the cow?",
        "idx": 288,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals attacks the green fields of the mosquito, you can be certain that it will also learn elementary resource management from the cow\nrule1() = attacks(animal, green_fields(mosquito)) => learn_resource_management(animal, cow)\n# Rule2: If something steals five points from the phoenix, then it does not learn elementary resource management from the cow.\nrule2() = steals_points(something, 5, phoenix) => not learn_resource_management(something, cow)\n\n# The current state of the game is as follows\n# The sun bear attacks the green fields whose owner is the mosquito.\nattacks(sun_bear, green_fields(mosquito)) = True\n\n# Based on the game state and the rules and preferences, does the sun bear learn the basics of resource management from the cow?\nquestion = learn_resource_management(sun_bear, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something does not raise a peace flag for the sheep but it respects the kangaroo, what can you certainly conclude? You can conclude that it is not going to proceed to the spot right after the panda bear.\n\nThe current state of the game is as follows\nThe penguin respects the kangaroo but does not raise a peace flag for the sheep.\n\nBased on the game state and the rules and preferences, does the penguin proceed to the spot right after the panda bear?\nQuestion: Does the penguin proceed to the spot right after the panda bear?",
        "idx": 289,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not raise a peace flag for the sheep but it respects the kangaroo, what can you certainly conclude? You can conclude that it is not going to proceed to the spot right after the panda bear.\nrule1() = not raise_flag_of_peace(something, sheep) & respect(something, kangaroo) => not proceed_to_spot(something, right_after, panda_bear)\n\n# The current state of the game is as follows\n# The penguin respects the kangaroo but does not raise a peace flag for the sheep.\nrespect(penguin, kangaroo) = True\nraise_flag_of_peace(penguin, sheep) = False\n\n# Based on the game state and the rules and preferences, does the penguin proceed to the spot right after the panda bear?\nquestion = proceed_to_spot(penguin, right_after, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal respects the kiwi, then the rabbit burns the warehouse that is in possession of the caterpillar.\nRule2: If the raven does not prepare armor for the rabbit however the elephant prepares armor for the rabbit, then the rabbit will not burn the warehouse that is in possession of the caterpillar.\n\nThe current state of the game is as follows\nThe cricket needs support from the kiwi.\nThe raven does not prepare armor for the rabbit.\n\nBased on the game state and the rules and preferences, does the rabbit burn the warehouse of the caterpillar?\nQuestion: Does the rabbit burn the warehouse of the caterpillar?",
        "idx": 290,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal respects the kiwi, then the rabbit burns the warehouse that is in possession of the caterpillar\nrule1() = exists(animal) respect(animal, kiwi) => burn_warehouse(rabbit, caterpillar)\n# Rule2: If the raven does not prepare armor for the rabbit however the elephant prepares armor for the rabbit, then the rabbit will not burn the warehouse that is in possession of the caterpillar.\nrule2() = not prepare_armor(raven, rabbit) & prepare_armor(elephant, rabbit) => not burn_warehouse(rabbit, caterpillar)\n\n# The current state of the game is as follows\n# The cricket needs support from the kiwi\nneeds_support(cricket, kiwi) = True\n# The raven does not prepare armor for the rabbit.\nprepare_armor(raven, rabbit) = False\n\n# Based on the game state and the rules and preferences, does the rabbit burn the warehouse of the caterpillar?\nquestion = burn_warehouse(rabbit, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The eagle respects the starfish whenever at least one animal rolls the dice for the oscar.\n\nThe current state of the game is as follows\nThe blobfish rolls the dice for the oscar.\n\nBased on the game state and the rules and preferences, does the eagle respect the starfish?\nQuestion: Does the eagle respect the starfish?",
        "idx": 291,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The eagle respects the starfish whenever at least one animal rolls the dice for the oscar.\nrule1() = roll_dice(animal, oscar) => respect(eagle, starfish)\n\n# The current state of the game is as follows\n# The blobfish rolls the dice for the oscar.\nroll_dice(blobfish, oscar) = True\n\n# Based on the game state and the rules and preferences, does the eagle respect the starfish?\nquestion = respect(eagle, starfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something knows the defense plan of the wolverine and also gives a magnifying glass to the panther because in this case it will surely sing a victory song for the grasshopper (this may or may not be problematic)\nRule2: Regarding the jellyfish, if it has a card whose color starts with the letter \"b\", then we can conclude that it does not sing a song of victory for the grasshopper.\n\nThe current state of the game is as follows\nThe jellyfish has a card that is black in color, and knows the defensive plans of the wolverine.\n\nBased on the game state and the rules and preferences, does the jellyfish sing a victory song for the grasshopper?\nQuestion: Does the jellyfish sing a victory song for the grasshopper?",
        "idx": 292,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something knows the defense plan of the wolverine and also gives a magnifying glass to the panther because in this case it will surely sing a victory song for the grasshopper (this may or may not be problematic)\nrule1() = knows_defense_plan(something, wolverine) & gives_magnifying_glass(something, panther) => sing_victory_song(something, grasshopper)\n# Rule2: Regarding the jellyfish, if it has a card whose color starts with the letter \"b\", then we can conclude that it does not sing a song of victory for the grasshopper.\nrule2() = has(jellyfish, card) & starts_with(color(card), \"b\") => not sing_victory_song(jellyfish, grasshopper)\n\n# The current state of the game is as follows\n# The jellyfish has a card that is black in color, and knows the defensive plans of the wolverine.\nhas(jellyfish, card) = True\ncolor(card, black) = True\nknows_defense_plan(jellyfish, wolverine) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish sing a victory song for the grasshopper?\nquestion = sing_victory_song(jellyfish, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not attack the green fields whose owner is the kangaroo, you can be certain that it will not eat the food of the rabbit.\nRule2: If the squirrel steals five of the points of the donkey and the aardvark does not roll the dice for the donkey, then, inevitably, the donkey eats the food that belongs to the rabbit.\n\nThe current state of the game is as follows\nThe squirrel owes money to the donkey.\nThe aardvark does not roll the dice for the donkey.\n\nBased on the game state and the rules and preferences, does the donkey eat the food of the rabbit?\nQuestion: Does the donkey eat the food of the rabbit?",
        "idx": 293,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not attack the green fields whose owner is the kangaroo, you can be certain that it will not eat the food of the rabbit\nrule1() = not attack(animal) & owner(green_fields, kangaroo) => not eat_food(animal, rabbit)\n# Rule2: If the squirrel steals five of the points of the donkey and the aardvark does not roll the dice for the donkey, then, inevitably, the donkey eats the food that belongs to the rabbit.\nrule2() = steal_points(squirrel, donkey, 5) & not roll_dice(aardvark, donkey) => eat_food(donkey, rabbit)\n\n# The current state of the game is as follows\n# The squirrel owes money to the donkey\nowes_money(squirrel, donkey) = True\n# The aardvark does not roll the dice for the donkey.\nnot roll_dice(aardvark, donkey) = True\n\n# Based on the game state and the rules and preferences, does the donkey eat the food of the rabbit?\nquestion = eat_food(donkey, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the carp, if it has something to drink, then we can conclude that it offers a job position to the rabbit.\n\nThe current state of the game is as follows\nThe carp has a beer.\nThe carp has a black card.\nThe carp has a hot chocolate.\n\nBased on the game state and the rules and preferences, does the carp offer a job to the rabbit?\nQuestion: Does the carp offer a job position to the rabbit?",
        "idx": 294,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the carp, if it has something to drink, then we can conclude that it offers a job position to the rabbit.\nrule1() = has(carp, drink) => offer_job_position(carp, rabbit)\n\n# The current state of the game is as follows\n# The carp has a beer\nhas(carp, beer) = True\n# The carp has a card that is black in color\nhas(carp, card) and color(card, black) = True\n# The carp has a hot chocolate\nhas(carp, hot_chocolate) = True\n\n# Based on the game state and the rules and preferences, does the carp offer a job to the rabbit?\nquestion = offer_job_position(carp, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal burns the warehouse of the swordfish, then the viperfish does not roll the dice for the parrot.\n\nThe current state of the game is as follows\nThe hippopotamus burns the warehouse of the swordfish.\n\nBased on the game state and the rules and preferences, does the viperfish roll the dice for the parrot?\nQuestion: Does the viperfish roll the dice for the parrot?",
        "idx": 295,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal burns the warehouse of the swordfish, then the viperfish does not roll the dice for the parrot.\nrule1() = burn_warehouse(animal, swordfish) => not roll_dice(viperfish, parrot)\n\n# The current state of the game is as follows\n# The hippopotamus burns the warehouse of the swordfish.\nburn_warehouse(hippopotamus, swordfish) = True\n\n# Based on the game state and the rules and preferences, does the viperfish roll the dice for the parrot?\nquestion = roll_dice(viperfish, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the spider has more than 5 friends, then the spider does not hold the same number of points as the hummingbird\nRule2: If the spider has a device to connect to the internet, then it does not hold an equal number of points as the hummingbird\nRule3: The spider holds an equal number of points as the hummingbird if the canary shows her cards to the spider.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe spider has 1 energetic friend and 3 non-energetic friends.\nThe canary does not steal five points from the spider.\n\nBased on the game state and the rules and preferences, does the spider hold the same number of points as the hummingbird?\nQuestion: Does the spider hold the same number of points as the hummingbird?",
        "idx": 296,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the spider has more than 5 friends, then the spider does not hold the same number of points as the hummingbird\nrule1() = friends(spider) > 5 => not equal_points(spider, hummingbird)\n# Rule2: Regarding the spider, if it has a device to connect to the internet, then we can conclude that it does not hold an equal number of points as the hummingbird\nrule2() = has_device(spider, internet) => not equal_points(spider, hummingbird)\n# Rule3: The spider unquestionably holds an equal number of points as the hummingbird, in the case where the canary shows her cards (all of them) to the spider.\nrule3() = show_cards(canary, spider) => equal_points(spider, hummingbird)\n\n# Rule3 is preferred over Rule1\npreference1() = rule3() > rule1()\n# Rule3 is preferred over Rule2\npreference2() = rule3() > rule2()\n\n# The current state of the game is as follows\n# The spider has 1 friend that is energetic and 3 friends that are not\nfriends(spider) = 4\n# The canary does not steal five points from the spider.\nnot steal_points(canary, spider, 5) = True\n\n# Based on the game state and the rules and preferences, does the spider hold the same number of points as the hummingbird?\nquestion = equal_points(spider, hummingbird)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The blobfish offers a job to the amberjack whenever at least one animal knows the defensive plans of the tilapia.\n\nThe current state of the game is as follows\nThe pig knows the defensive plans of the tilapia.\n\nBased on the game state and the rules and preferences, does the blobfish offer a job to the amberjack?\nQuestion: Does the blobfish offer a job to the amberjack?",
        "idx": 297,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The blobfish offers a job to the amberjack whenever at least one animal knows the defensive plans of the tilapia.\nrule1() = knows_defensive_plans(pig, tilapia) => offer_job(blobfish, amberjack)\n\n# The current state of the game is as follows\n# The pig knows the defensive plans of the tilapia.\nknows_defensive_plans(pig, tilapia) = True\n\n# Based on the game state and the rules and preferences, does the blobfish offer a job to the amberjack?\nquestion = offer_job(blobfish, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish has a high salary, then the blobfish does not owe money to the oscar.\n\nThe current state of the game is as follows\nThe blobfish got a well-paid job.\n\nBased on the game state and the rules and preferences, does the blobfish owe money to the oscar?\nQuestion: Does the blobfish owe money to the oscar?",
        "idx": 298,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the blobfish has a high salary, then the blobfish does not owe $$$ to the oscar.\nrule1() = salary(blobfish) == high => not owe(blobfish, money, oscar)\n\n# The current state of the game is as follows\n# The blobfish got a well-paid job.\nsalary(blobfish) = high\n\n# Based on the game state and the rules and preferences, does the blobfish owe money to the oscar?\nquestion = owe(blobfish, money, oscar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the phoenix, if it has fewer than eleven friends, then we can conclude that it knocks down the fortress that belongs to the amberjack.\nRule2: Regarding the phoenix, if it has a name whose first letter is the same as the first letter of the blobfish's name, then we can conclude that it knocks down the fortress that belongs to the amberjack.\n\nThe current state of the game is as follows\nThe blobfish is named Paco.\nThe phoenix has thirteen friends and is named Charlie.\n\nBased on the game state and the rules and preferences, does the phoenix knock down the fortress of the amberjack?\nQuestion: Does the phoenix knock down the fortress of the amberjack?",
        "idx": 299,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the phoenix, if it has fewer than eleven friends, then we can conclude that it knocks down the fortress that belongs to the amberjack\nrule1() = friends(phoenix) < 11 => knock_down_fortress(phoenix, amberjack)\n# Rule2: Regarding the phoenix, if it has a name whose first letter is the same as the first letter of the blobfish's name, then we can conclude that it knocks down the fortress that belongs to the amberjack.\nrule2() = first_letter(name(phoenix)) == first_letter(name(blobfish)) => knock_down_fortress(phoenix, amberjack)\n\n# The current state of the game is as follows\n# The blobfish is named Paco\nname(blobfish) = \"Paco\"\n# The phoenix has thirteen friends, and is named Charlie.\nfriends(phoenix) = 13\nname(phoenix) = \"Charlie\"\n\n# Based on the game state and the rules and preferences, does the phoenix knock down the fortress of the amberjack?\nquestion = knock_down_fortress(phoenix, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the mosquito rolls the dice for the hummingbird, then the hummingbird shows all her cards to the donkey.\n\nThe current state of the game is as follows\nThe mosquito rolls the dice for the hummingbird.\n\nBased on the game state and the rules and preferences, does the hummingbird show all her cards to the donkey?\nQuestion: Does the hummingbird show all her cards to the donkey?",
        "idx": 300,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the mosquito rolls the dice for the hummingbird, then the hummingbird shows all her cards to the donkey.\nrule1() = roll_dice(mosquito, hummingbird) => show_all_cards(hummingbird, donkey)\n\n# The current state of the game is as follows\n# The mosquito rolls the dice for the hummingbird.\nroll_dice(mosquito, hummingbird) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird show all her cards to the donkey?\nquestion = show_all_cards(hummingbird, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the hare, if it has a sharp object, then we can conclude that it does not need the support of the cheetah.\nRule2: If something does not knock down the fortress that belongs to the catfish, then it needs support from the cheetah.\nRule3: Regarding the hare, if it killed the mayor, then we can conclude that it does not need support from the cheetah.\n\nRule2 is preferred over Rule1\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe hare assassinated the mayor.\nThe hare has some arugula.\n\nBased on the game state and the rules and preferences, does the hare need support from the cheetah?\nQuestion: Does the hare need support from the cheetah?",
        "idx": 301,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hare, if it has a sharp object, then we can conclude that it does not need the support of the cheetah\nrule1() = has_sharp_object(hare) => not need_support(hare, cheetah)\n# Rule2: If something does not knock down the fortress that belongs to the catfish, then it needs support from the cheetah\nrule2() = not knock_down(fortress(catfish)) => need_support(something, cheetah)\n# Rule3: Regarding the hare, if it killed the mayor, then we can conclude that it does not need support from the cheetah.\nrule3() = killed(hare, mayor) => not need_support(hare, cheetah)\n\n# Rule2 is preferred over Rule1\npreferred(rule2, rule1)\n# Rule2 is preferred over Rule3\npreferred(rule2, rule3)\n\n# The current state of the game is as follows\n# The hare assassinated the mayor\nkilled(hare, mayor) = True\n# The hare has some arugula.\nhas(hare, arugula) = True\n\n# Based on the game state and the rules and preferences, does the hare need support from the cheetah?\nquestion = need_support(hare, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals steal five points from the salmon, you can be certain that it will also show all her cards to the dog.\nRule2: For the sea bass, if the belief is that the snail sings a song of victory for the sea bass and the sheep does not become an actual enemy of the sea bass, then you can add \"the sea bass does not show all her cards to the dog\" to your conclusions.\n\nRule2 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe sea bass offers a job to the salmon.\nThe sheep does not learn the basics of resource management from the sea bass.\nThe snail does not sing a victory song for the sea bass.\n\nBased on the game state and the rules and preferences, does the sea bass show all her cards to the dog?\nQuestion: Does the sea bass show all her cards to the dog?",
        "idx": 302,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals steals five points from the salmon, you can be certain that it will also show her cards (all of them) to the dog\nrule1() = steal_points(animal, salmon, 5) => show_cards(animal, dog)\n\n# Rule2: For the sea bass, if the belief is that the snail sings a song of victory for the sea bass and the sheep does not become an actual enemy of the sea bass, then you can add \"the sea bass does not show all her cards to the dog\" to your conclusions.\nrule2() = sing_victory_song(snail, sea_bass) & not become_enemy(sheep, sea_bass) => not show_cards(sea_bass, dog)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule2, rule1)\n\n# The current state of the game is as follows\n# The sea bass offers a job to the salmon\noffer_job(sea_bass, salmon) = True\n# The sheep does not learn the basics of resource management from the sea bass\nlearn_basics(sheep, resource_management, sea_bass) = False\n# The snail does not sing a victory song for the sea bass.\nsing_victory_song(snail, sea_bass) = False\n\n# Based on the game state and the rules and preferences, does the sea bass show all her cards to the dog?\nquestion = show_cards(sea_bass, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eagle has something to sit on, then the eagle eats the food of the caterpillar.\n\nThe current state of the game is as follows\nThe eagle has a couch.\n\nBased on the game state and the rules and preferences, does the eagle eat the food of the caterpillar?\nQuestion: Does the eagle eat the food of the caterpillar?",
        "idx": 303,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eagle has something to sit on, then the eagle eats the food of the caterpillar.\nrule1() = has_something_to_sit_on(eagle) => eat_food(eagle, caterpillar)\n\n# The current state of the game is as follows\n# The eagle has a couch.\nhas_something_to_sit_on(eagle) = True\n\n# Based on the game state and the rules and preferences, does the eagle eat the food of the caterpillar?\nquestion = eat_food(eagle, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the oscar has a name whose first letter is the same as the first letter of the carp's name, then the oscar does not roll the dice for the doctorfish.\n\nThe current state of the game is as follows\nThe carp is named Beauty.\nThe oscar has a card that is red in color, and has seven friends.\nThe oscar is named Blossom.\n\nBased on the game state and the rules and preferences, does the oscar roll the dice for the doctorfish?\nQuestion: Does the oscar roll the dice for the doctorfish?",
        "idx": 304,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the oscar has a name whose first letter is the same as the first letter of the carp's name, then the oscar does not roll the dice for the doctorfish.\nrule1() = first_letter(name(oscar)) == first_letter(name(carp)) => not roll_dice(oscar, doctorfish)\n\n# The current state of the game is as follows\n# The carp is named Beauty\nname(carp) = \"Beauty\"\n# The oscar has a card that is red in color, and has seven friends\nhas_card(oscar, red) = True\nfriends(oscar) = 7\n# The oscar is named Blossom.\nname(oscar) = \"Blossom\"\n\n# Based on the game state and the rules and preferences, does the oscar roll the dice for the doctorfish?\nquestion = roll_dice(oscar, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something respects the tiger, then it does not respect the cat\nRule2: If the zander steals five points from the cricket and the hare owes money to the cricket, then the cricket respects the cat.\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe hare gives a magnifier to the cricket.\nThe zander shows all her cards to the cricket.\nThe cricket does not respect the tiger.\n\nBased on the game state and the rules and preferences, does the cricket respect the cat?\nQuestion: Does the cricket respect the cat?",
        "idx": 305,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something respects the tiger, then it does not respect the cat\nrule1() = respect(something, tiger) => not respect(something, cat)\n# Rule2: If the zander steals five points from the cricket and the hare owes money to the cricket, then the cricket respects the cat.\nrule2() = steal_points(zander, 5, cricket) & owes(hare, money, cricket) => respect(cricket, cat)\n\n# Rule2 is preferred over Rule1\npreferred_rule() = rule2() > rule1()\n\n# The current state of the game is as follows\n# The hare gives a magnifier to the cricket\ngive(hare, magnifier, cricket) = True\n# The zander shows all her cards to the cricket\nshow_cards(zander, cricket) = True\n# The cricket does not respect the tiger.\nrespect(cricket, tiger) = False\n\n# Based on the game state and the rules and preferences, does the cricket respect the cat?\nquestion = respect(cricket, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the jellyfish does not have her keys, then the jellyfish eats the food of the amberjack\nRule2: If the jellyfish has fewer than 10 friends, then the jellyfish eats the food of the amberjack.\n\nThe current state of the game is as follows\nThe jellyfish has 11 friends.\nThe jellyfish lost her keys.\n\nBased on the game state and the rules and preferences, does the jellyfish eat the food of the amberjack?\nQuestion: Does the jellyfish eat the food of the amberjack?",
        "idx": 306,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the jellyfish does not have her keys, then the jellyfish eats the food of the amberjack\nrule1() = not have_keys(jellyfish) => eat_food(jellyfish, amberjack)\n# Rule2: If the jellyfish has fewer than 10 friends, then the jellyfish eats the food of the amberjack.\nrule2() = friends(jellyfish) < 10 => eat_food(jellyfish, amberjack)\n\n# The current state of the game is as follows\n# The jellyfish has 11 friends\nfriends(jellyfish) = 11\n# The jellyfish lost her keys.\nhave_keys(jellyfish) = False\n\n# Based on the game state and the rules and preferences, does the jellyfish eat the food of the amberjack?\nquestion = eat_food(jellyfish, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal eats the food that belongs to the penguin, then the lion does not proceed to the spot that is right after the spot of the eel.\n\nThe current state of the game is as follows\nThe phoenix eats the food of the penguin.\n\nBased on the game state and the rules and preferences, does the lion proceed to the spot right after the eel?\nQuestion: Does the lion proceed to the spot right after the eel?",
        "idx": 307,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal eats the food that belongs to the penguin, then the lion does not proceed to the spot that is right after the spot of the eel.\nrule1() = eats_food(animal, penguin) => not proceed_to_spot(lion, spot_after(eel))\n\n# The current state of the game is as follows\n# The phoenix eats the food of the penguin.\neats_food(phoenix, penguin) = True\n\n# Based on the game state and the rules and preferences, does the lion proceed to the spot right after the eel?\nquestion = proceed_to_spot(lion, spot_after(eel))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the koala has fewer than ten friends, then the koala proceeds to the spot right after the rabbit.\nRule2: The koala will not proceed to the spot that is right after the spot of the rabbit, in the case where the dog does not raise a flag of peace for the koala.\nRule3: If the koala has a name whose first letter is the same as the first letter of the donkey's name, then the koala proceeds to the spot right after the rabbit.\n\nRule1 is preferred over Rule2.\nRule3 is preferred over Rule2.\n\nThe current state of the game is as follows\nThe donkey is named Meadow.\nThe koala has sixteen friends.\nThe koala is named Lola.\n\nBased on the game state and the rules and preferences, does the koala proceed to the spot right after the rabbit?\nQuestion: Does the koala proceed to the spot right after the rabbit?",
        "idx": 308,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the koala has fewer than ten friends, then the koala proceeds to the spot right after the rabbit\nrule1() = friends(koala) < 10 => proceed(koala, spot_after(rabbit))\n# Rule2: The koala will not proceed to the spot that is right after the spot of the rabbit, in the case where the dog does not raise a flag of peace for the koala\nrule2() = not raise_flag_of_peace(dog, koala) => not proceed(koala, spot_after(rabbit))\n# Rule3: If the koala has a name whose first letter is the same as the first letter of the donkey's name, then the koala proceeds to the spot right after the rabbit.\nrule3() = first_letter(name(koala)) == first_letter(name(donkey)) => proceed(koala, spot_after(rabbit))\n\n# Rule1 is preferred over Rule2\npreferred_rule1_over_rule2() = True\n# Rule3 is preferred over Rule2\npreferred_rule3_over_rule2() = True\n\n# The current state of the game is as follows\n# The donkey is named Meadow\nname(donkey) = \"Meadow\"\n# The koala has sixteen friends\nfriends(koala) = 16\n# The koala is named Lola.\nname(koala) = \"Lola\"\n\n# Based on the game state and the rules and preferences, does the koala proceed to the spot right after the rabbit?\nquestion = proceed(koala, spot_after(rabbit))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals knocks down the fortress of the zander, you can be certain that it will also sing a victory song for the wolverine.\n\nThe current state of the game is as follows\nThe lion knocks down the fortress of the zander.\n\nBased on the game state and the rules and preferences, does the lion sing a victory song for the wolverine?\nQuestion: Does the lion sing a victory song for the wolverine?",
        "idx": 309,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals knocks down the fortress of the zander, you can be certain that it will also sing a victory song for the wolverine.\nrule1() = knocks_down_fortress(animal, zander) => sing_victory_song(animal, wolverine)\n\n# The current state of the game is as follows\n# The lion knocks down the fortress of the zander.\nknocks_down_fortress(lion, zander) = True\n\n# Based on the game state and the rules and preferences, does the lion sing a victory song for the wolverine?\nquestion = sing_victory_song(lion, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish has a name whose first letter is the same as the first letter of the jellyfish's name, then the blobfish knocks down the fortress of the baboon\nRule2: The blobfish does not knock down the fortress of the baboon whenever at least one animal respects the moose.\n\nThe current state of the game is as follows\nThe jellyfish is named Teddy.\nThe kiwi respects the moose.\n\nBased on the game state and the rules and preferences, does the blobfish knock down the fortress of the baboon?\nQuestion: Does the blobfish knock down the fortress of the baboon?",
        "idx": 310,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the blobfish has a name whose first letter is the same as the first letter of the jellyfish's name, then the blobfish knocks down the fortress of the baboon\nrule1() = first_letter(name(blobfish)) == first_letter(name(jellyfish)) => knock_down_fortress(blobfish, baboon)\n# Rule2: The blobfish does not knock down the fortress of the baboon whenever at least one animal respects the moose.\nrule2() = respect(moose, animal) => not knock_down_fortress(blobfish, baboon)\n\n# The current state of the game is as follows\n# The jellyfish is named Teddy\nname(jellyfish) = \"Teddy\"\n# The kiwi respects the moose.\nrespect(kiwi, moose) = True\n\n# Based on the game state and the rules and preferences, does the blobfish knock down the fortress of the baboon?\nquestion = knock_down_fortress(blobfish, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose has something to carry apples and oranges, then the moose gives a magnifying glass to the elephant.\nRule2: If the moose has a name whose first letter is the same as the first letter of the meerkat's name, then the moose does not give a magnifier to the elephant.\n\nThe current state of the game is as follows\nThe meerkat is named Milo.\nThe moose has a cell phone.\n\nBased on the game state and the rules and preferences, does the moose give a magnifier to the elephant?\nQuestion: Does the moose give a magnifying glass to the elephant?",
        "idx": 311,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the moose has something to carry apples and oranges, then the moose gives a magnifying glass to the elephant\nrule1() = has(moose, carry_apples_oranges) => give(moose, magnifying_glass, elephant)\n# Rule2: If the moose has a name whose first letter is the same as the first letter of the meerkat's name, then the moose does not give a magnifier to the elephant.\nrule2() = first_letter(name(moose)) == first_letter(name(meerkat)) => not give(moose, magnifying_glass, elephant)\n\n# The current state of the game is as follows\n# The meerkat is named Milo\nname(meerkat) = \"Milo\"\n# The moose has a cell phone.\nhas(moose, cell_phone) = True\n\n# Based on the game state and the rules and preferences, does the moose give a magnifier to the elephant?\nquestion = give(moose, magnifying_glass, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose does not show all her cards to the spider but the canary knocks down the fortress of the spider, then the spider knows the defense plan of the kiwi unavoidably.\n\nThe current state of the game is as follows\nThe canary knocks down the fortress of the spider.\nThe moose does not show all her cards to the spider.\n\nBased on the game state and the rules and preferences, does the spider know the defensive plans of the kiwi?\nQuestion: Does the spider know the defensive plans of the kiwi?",
        "idx": 312,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the moose does not show all her cards to the spider but the canary knocks down the fortress of the spider, then the spider knows the defense plan of the kiwi unavoidably.\nrule1() = not show_all_cards(moose, spider) & knock_down_fortress(canary, spider) => know_defense_plan(spider, kiwi)\n\n# The current state of the game is as follows\n# The canary knocks down the fortress of the spider\nknock_down_fortress(canary, spider) = True\n# The moose does not show all her cards to the spider.\nnot show_all_cards(moose, spider) = True\n\n# Based on the game state and the rules and preferences, does the spider know the defensive plans of the kiwi?\nquestion = know_defense_plan(spider, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something eats the food that belongs to the cockroach, then it does not hold an equal number of points as the salmon.\n\nThe current state of the game is as follows\nThe moose eats the food of the cockroach.\n\nBased on the game state and the rules and preferences, does the moose hold the same number of points as the salmon?\nQuestion: Does the moose hold the same number of points as the salmon?",
        "idx": 313,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something eats the food that belongs to the cockroach, then it does not hold an equal number of points as the salmon.\nrule1() = eats_food(something, cockroach) => not points(something) == points(salmon)\n\n# The current state of the game is as follows\n# The moose eats the food of the cockroach.\neats_food(moose, cockroach) = True\n\n# Based on the game state and the rules and preferences, does the moose hold the same number of points as the salmon?\nquestion = points(moose) == points(salmon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not know the defensive plans of the rabbit, you can be certain that it will owe money to the carp without a doubt.\n\nThe current state of the game is as follows\nThe panther knows the defensive plans of the rabbit.\n\nBased on the game state and the rules and preferences, does the panther owe money to the carp?\nQuestion: Does the panther owe money to the carp?",
        "idx": 314,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not know the defensive plans of the rabbit, you can be certain that it will owe $$$ to the carp without a doubt.\nrule1() = not knows_defensive_plans(panther, rabbit) => owe(panther, money, carp)\n\n# The current state of the game is as follows\n# The panther knows the defensive plans of the rabbit.\nknows_defensive_plans(panther, rabbit) = True\n\n# Based on the game state and the rules and preferences, does the panther owe money to the carp?\nquestion = owe(panther, money, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squid rolls the dice for the cat and the puffin does not steal five of the points of the cat, then, inevitably, the cat raises a flag of peace for the catfish.\n\nThe current state of the game is as follows\nThe squid rolls the dice for the cat.\nThe puffin does not steal five points from the cat.\n\nBased on the game state and the rules and preferences, does the cat raise a peace flag for the catfish?\nQuestion: Does the cat raise a peace flag for the catfish?",
        "idx": 315,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squid rolls the dice for the cat and the puffin does not steal five of the points of the cat, then, inevitably, the cat raises a flag of peace for the catfish.\nrule1() = roll_dice(squid, cat) & not steal_points(puffin, cat, 5) => raise_flag_of_peace(cat, catfish)\n\n# The current state of the game is as follows\n# The squid rolls the dice for the cat\nroll_dice(squid, cat) = True\n# The puffin does not steal five points from the cat.\nnot steal_points(puffin, cat, 5) = True\n\n# Based on the game state and the rules and preferences, does the cat raise a peace flag for the catfish?\nquestion = raise_flag_of_peace(cat, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cat has a name whose first letter is the same as the first letter of the rabbit's name, then the cat does not prepare armor for the panther.\n\nThe current state of the game is as follows\nThe cat is named Milo.\nThe moose burns the warehouse of the kiwi.\nThe rabbit is named Max.\n\nBased on the game state and the rules and preferences, does the cat prepare armor for the panther?\nQuestion: Does the cat prepare armor for the panther?",
        "idx": 316,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cat has a name whose first letter is the same as the first letter of the rabbit's name, then the cat does not prepare armor for the panther.\nrule1() = first_letter(cat.name) == first_letter(rabbit.name) => not prepare_armor(cat, panther)\n\n# The current state of the game is as follows\n# The cat is named Milo\ncat.name = \"Milo\"\n# The moose burns the warehouse of the kiwi\nburn_warehouse(moose, kiwi) = True\n# The rabbit is named Max.\nrabbit.name = \"Max\"\n\n# Based on the game state and the rules and preferences, does the cat prepare armor for the panther?\nquestion = prepare_armor(cat, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the swordfish, if it has a name whose first letter is the same as the first letter of the halibut's name, then we can conclude that it respects the grizzly bear.\n\nThe current state of the game is as follows\nThe halibut is named Paco.\nThe swordfish is named Luna.\n\nBased on the game state and the rules and preferences, does the swordfish respect the grizzly bear?\nQuestion: Does the swordfish respect the grizzly bear?",
        "idx": 317,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the swordfish, if it has a name whose first letter is the same as the first letter of the halibut's name, then we can conclude that it respects the grizzly bear.\nrule1() = first_letter(name(swordfish)) == first_letter(name(halibut)) => respect(swordfish, grizzly_bear)\n\n# The current state of the game is as follows\n# The halibut is named Paco\nname(halibut) = \"Paco\"\n# The swordfish is named Luna.\nname(swordfish) = \"Luna\"\n\n# Based on the game state and the rules and preferences, does the swordfish respect the grizzly bear?\nquestion = respect(swordfish, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the lion's name, then we can conclude that it does not attack the green fields of the sun bear.\nRule2: If the buffalo has a card whose color is one of the rainbow colors, then the buffalo attacks the green fields whose owner is the sun bear.\nRule3: Regarding the buffalo, if it has a high-quality paper, then we can conclude that it attacks the green fields whose owner is the sun bear.\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe buffalo has a black card\nThe buffalo published a high-quality paper\nThe lion is named Pashmak.\n\nBased on the game state and the rules and preferences, does the buffalo attack the green fields whose owner is the sun bear?\nQuestion: Does the buffalo attack the green fields whose owner is the sun bear?",
        "idx": 318,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the lion's name, then we can conclude that it does not attack the green fields of the sun bear\nrule1() = first_letter(name(buffalo)) == first_letter(name(lion)) => not attack_green_fields(buffalo, sun_bear)\n\n# Rule2: If the buffalo has a card whose color is one of the rainbow colors, then the buffalo attacks the green fields whose owner is the sun bear\nrule2() = color(card(buffalo)) in rainbow_colors => attack_green_fields(buffalo, sun_bear)\n\n# Rule3: Regarding the buffalo, if it has a high-quality paper, then we can conclude that it attacks the green fields whose owner is the sun bear.\nrule3() = has_high_quality_paper(buffalo) => attack_green_fields(buffalo, sun_bear)\n\n# Rule1 is preferred over Rule2\n# Rule1 is preferred over Rule3\npreference(rule1, rule2) = True\npreference(rule1, rule3) = True\n\n# The current state of the game is as follows\n# The buffalo has a card that is black in color, and published a high-quality paper\ncolor(card(buffalo), black) = True\nhas_high_quality_paper(buffalo) = True\n# The lion is named Pashmak.\nname(lion) = \"Pashmak\"\n\n# Based on the game state and the rules and preferences, does the buffalo attack the green fields whose owner is the sun bear?\nquestion = attack_green_fields(buffalo, sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the salmon, if it has a musical instrument, then we can conclude that it respects the koala.\nRule2: If the salmon has a musical instrument, then the salmon does not respect the koala.\n\nThe current state of the game is as follows\nThe salmon has a cello, and has two friends that are adventurous and 8 friends that are not.\nThe salmon has a hot chocolate.\n\nBased on the game state and the rules and preferences, does the salmon respect the koala?\nQuestion: Does the salmon respect the koala?",
        "idx": 319,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the salmon, if it has a musical instrument, then we can conclude that it respects the koala\nrule1() = has(salmon, musical_instrument) => respect(salmon, koala)\n# Rule2: If the salmon has a musical instrument, then the salmon does not respect the koala.\nrule2() = has(salmon, musical_instrument) => not respect(salmon, koala)\n\n# The current state of the game is as follows\n# The salmon has a cello, and has two friends that are adventurous and 8 friends that are not\nhas(salmon, cello) = True\nfriends(salmon, adventurous) = 2\nfriends(salmon, not_adventurous) = 8\n# The salmon has a hot chocolate.\nhas(salmon, hot_chocolate) = True\n\n# Based on the game state and the rules and preferences, does the salmon respect the koala?\nquestion = respect(salmon, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the canary, if it has fewer than 4 friends, then we can conclude that it needs support from the cheetah.\nRule2: Regarding the canary, if it has a card whose color is one of the rainbow colors, then we can conclude that it needs the support of the cheetah.\n\nThe current state of the game is as follows\nThe canary has 12 friends.\nThe canary has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the canary need support from the cheetah?\nQuestion: Does the canary need support from the cheetah?",
        "idx": 320,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the canary, if it has fewer than 4 friends, then we can conclude that it needs support from the cheetah\nrule1() = friends(canary) < 4 => need_support(canary, cheetah)\n# Rule2: Regarding the canary, if it has a card whose color is one of the rainbow colors, then we can conclude that it needs the support of the cheetah.\nrule2() = has(canary, card) and color(card) in rainbow_colors => need_support(canary, cheetah)\n\n# The current state of the game is as follows\n# The canary has 12 friends\nfriends(canary) = 12\n# The canary has a card that is white in color.\nhas(canary, card) = True\ncolor(card, white) = True\n\n# Based on the game state and the rules and preferences, does the canary need support from the cheetah?\nquestion = need_support(canary, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the black bear purchased a time machine, then the black bear sings a song of victory for the hummingbird.\nRule2: If the black bear has a card whose color starts with the letter \"y\", then we can conclude that it sings a victory song for the hummingbird.\n\nThe current state of the game is as follows\nThe black bear has a card that is yellow in color and has invented a time machine.\n\nBased on the game state and the rules and preferences, does the black bear sing a victory song for the hummingbird?\nQuestion: Does the black bear sing a victory song for the hummingbird?",
        "idx": 321,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the black bear purchased a time machine, then the black bear sings a song of victory for the hummingbird\nrule1() = purchased_time_machine(black_bear) => sing_victory_song(black_bear, hummingbird)\n# Rule2: Regarding the black bear, if it has a card whose color starts with the letter \"y\", then we can conclude that it sings a victory song for the hummingbird.\nrule2() = has(black_bear, card) and color_starts_with(card, \"y\") => sing_victory_song(black_bear, hummingbird)\n\n# The current state of the game is as follows\n# The black bear has a card that is yellow in color, and invented a time machine.\nhas(black_bear, card) = True\ncolor(card, yellow) = True\npurchased_time_machine(black_bear) = True\n\n# Based on the game state and the rules and preferences, does the black bear sing a victory song for the hummingbird?\nquestion = sing_victory_song(black_bear, hummingbird)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something sings a victory song for the aardvark, then it does not raise a flag of peace for the squirrel.\nRule2: If the wolverine took a bike from the store, then the wolverine raises a peace flag for the squirrel.\nRule3: If the wolverine has a card whose color appears in the flag of Japan, then the wolverine raises a flag of peace for the squirrel.\n\nRule2 is preferred over Rule1.\nRule3 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe wolverine has a card that is orange in color and sings a victory song for the aardvark.\n\nBased on the game state and the rules and preferences, does the wolverine raise a peace flag for the squirrel?\nQuestion: Does the wolverine raise a peace flag for the squirrel?",
        "idx": 322,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something sings a victory song for the aardvark, then it does not raise a flag of peace for the squirrel\nrule1() = sings_victory_song(something, aardvark) => not raise_flag_of_peace(something, squirrel)\n# Rule2: If the wolverine took a bike from the store, then the wolverine raises a peace flag for the squirrel\nrule2() = took_bike(wolverine, store) => raise_flag_of_peace(wolverine, squirrel)\n# Rule3: If the wolverine has a card whose color appears in the flag of Japan, then the wolverine raises a flag of peace for the squirrel.\nrule3() = has_card(wolverine, card) & color(card) in flag_colors(Japan) => raise_flag_of_peace(wolverine, squirrel)\n\n# Rule2 is preferred over Rule1\npreferred_rule1() = not rule2()\n# Rule3 is preferred over Rule1\npreferred_rule2() = not rule3()\n\n# The current state of the game is as follows\n# The wolverine has a card that is orange in color, and sings a victory song for the aardvark.\nhas_card(wolverine, card) = True\ncolor(card, orange) = True\nsings_victory_song(wolverine, aardvark) = True\n\n# Based on the game state and the rules and preferences, does the wolverine raise a peace flag for the squirrel?\nquestion = raise_flag_of_peace(wolverine, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the raven has a card whose color appears in the flag of Belgium, then the raven does not know the defensive plans of the zander\nRule2: If the raven has fewer than 11 friends, then the raven knows the defensive plans of the zander\nRule3: If the raven is a fan of Chris Ronaldo, then the raven knows the defense plan of the zander\nRule4: If the raven has a name whose first letter is the same as the first letter of the puffin's name, then the raven does not know the defense plan of the zander.\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\nRule4 is preferred over Rule2\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe puffin is named Tarzan\nThe raven has a card that is orange in color, and is named Paco\nThe raven has thirteen friends\nThe raven reduced her work hours recently.\n\nBased on the game state and the rules and preferences, does the raven know the defensive plans of the zander?\nQuestion: Does the raven know the defensive plans of the zander?",
        "idx": 323,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the raven has a card whose color appears in the flag of Belgium, then the raven does not know the defensive plans of the zander\nrule1() = has_card(raven) & color(card(raven)) in flag_colors(Belgium) => not know_defensive_plans(raven, zander)\n# Rule2: If the raven has fewer than 11 friends, then the raven knows the defensive plans of the zander\nrule2() = friends(raven) < 11 => know_defensive_plans(raven, zander)\n# Rule3: If the raven is a fan of Chris Ronaldo, then the raven knows the defense plan of the zander\nrule3() = fan_of(raven, Chris_Ronaldo) => know_defensive_plans(raven, zander)\n# Rule4: If the raven has a name whose first letter is the same as the first letter of the puffin's name, then the raven does not know the defense plan of the zander.\nrule4() = first_letter(name(raven)) == first_letter(name(puffin)) => not know_defensive_plans(raven, zander)\n\n# Rule1 is preferred over Rule2\nprefer(rule1, rule2)\n# Rule1 is preferred over Rule3\nprefer(rule1, rule3)\n# Rule4 is preferred over Rule2\nprefer(rule4, rule2)\n# Rule4 is preferred over Rule3\nprefer(rule4, rule3)\n\n# The current state of the game is as follows\n# The puffin is named Tarzan\nname(puffin) = \"Tarzan\"\n# The raven has a card that is orange in color, and is named Paco\nhas_card(raven) = True\ncolor(card(raven)) = \"orange\"\nname(raven) = \"Paco\"\n# The raven has thirteen friends\nfriends(raven) = 13\n# The raven reduced her work hours recently.\nreduced_work_hours(raven) = True\n\n# Based on the game state and the rules and preferences, does the raven know the defensive plans of the zander?\nquestion = know_defensive_plans(raven, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the salmon owes money to the jellyfish and the hummingbird eats the food of the jellyfish, then the jellyfish will not know the defensive plans of the cockroach.\nRule2: Be careful when something owes money to the pig and also shows her cards (all of them) to the viperfish because in this case it will surely know the defense plan of the cockroach (this may or may not be problematic).\nRule2 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe hummingbird eats the food of the jellyfish.\nThe jellyfish owes money to the pig, and shows all her cards to the viperfish.\nThe salmon owes money to the jellyfish.\n\nBased on the game state and the rules and preferences, does the jellyfish know the defensive plans of the cockroach?\nQuestion: Does the jellyfish know the defensive plans of the cockroach?",
        "idx": 324,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the salmon owes $$$ to the jellyfish and the hummingbird eats the food of the jellyfish, then the jellyfish will not know the defensive plans of the cockroach\nrule1() = owes(salmon, money, jellyfish) & eats(hummingbird, food, jellyfish) => not know(jellyfish, defensive_plans, cockroach)\n\n# Rule2: Be careful when something owes money to the pig and also shows her cards (all of them) to the viperfish because in this case it will surely know the defense plan of the cockroach (this may or may not be problematic).\nrule2() = owes(something, money, pig) & shows_all_cards(something, viperfish) => know(something, defensive_plans, cockroach)\n\n# Rule2 is preferred over Rule1\npreferred_rule() = rule2() > rule1()\n\n# The current state of the game is as follows\n# The hummingbird eats the food of the jellyfish\neats(hummingbird, food, jellyfish) = True\n# The jellyfish owes money to the pig, and shows all her cards to the viperfish\nowes(jellyfish, money, pig) = True\nshows_all_cards(jellyfish, viperfish) = True\n# The salmon owes money to the jellyfish.\nowes(salmon, money, jellyfish) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish know the defensive plans of the cockroach?\nquestion = know(jellyfish, defensive_plans, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the caterpillar has a name whose first letter is the same as the first letter of the squid's name, then the caterpillar does not attack the green fields whose owner is the kiwi.\nRule2: Regarding the caterpillar, if it has a card whose color appears in the flag of France, then we can conclude that it does not attack the green fields whose owner is the kiwi.\n\nThe current state of the game is as follows\nThe caterpillar has a card that is red in color, and is named Meadow.\nThe squid is named Casper.\nThe zander knows the defensive plans of the caterpillar.\n\nBased on the game state and the rules and preferences, does the caterpillar attack the green fields whose owner is the kiwi?\nQuestion: Does the caterpillar attack the green fields whose owner is the kiwi?",
        "idx": 325,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the caterpillar has a name whose first letter is the same as the first letter of the squid's name, then the caterpillar does not attack the green fields whose owner is the kiwi\nrule1() = first_letter(name(caterpillar)) == first_letter(name(squid)) => not attack(caterpillar, green_fields(owner=kiwi))\n# Rule2: Regarding the caterpillar, if it has a card whose color appears in the flag of France, then we can conclude that it does not attack the green fields whose owner is the kiwi.\nrule2() = has(caterpillar, card) and color(card) in flag_colors(France) => not attack(caterpillar, green_fields(owner=kiwi))\n\n# The current state of the game is as follows\n# The caterpillar has a card that is red in color, and is named Meadow\nhas(caterpillar, card) = True\ncolor(card, red) = True\nname(caterpillar) = \"Meadow\"\n# The squid is named Casper\nname(squid) = \"Casper\"\n# The zander knows the defensive plans of the caterpillar.\nknows(zander, defensive_plans, caterpillar) = True\n\n# Based on the game state and the rules and preferences, does the caterpillar attack the green fields whose owner is the kiwi?\nquestion = attack(caterpillar, green_fields(owner=kiwi))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the raven has more than seven friends, then the raven holds the same number of points as the hare\nRule2: If the raven has published a high-quality paper, then the raven holds the same number of points as the hare.\n\nThe current state of the game is as follows\nThe octopus is named Max.\nThe raven has 1 friend that is bald and three friends that are not.\nThe raven is named Milo, and recently read a high-quality paper.\n\nBased on the game state and the rules and preferences, does the raven hold the same number of points as the hare?\nQuestion: Do the raven and the hare hold the same number of points?",
        "idx": 326,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the raven has more than seven friends, then the raven holds the same number of points as the hare\nrule1() = friends(raven) > 7 => points(raven) == points(hare)\n# Rule2: If the raven has published a high-quality paper, then the raven holds the same number of points as the hare.\nrule2() = published_paper(raven, high_quality) => points(raven) == points(hare)\n\n# The current state of the game is as follows\n# The octopus is named Max\nname(octopus, Max) = True\n# The raven has 1 friend that is bald and three friends that are not\nfriends(raven) = 4\nhas_friend(raven, bald) = True\nhas_friend(raven, not_bald) = True\nhas_friend(raven, not_bald) = True\nhas_friend(raven, not_bald) = True\n# The raven is named Milo, and recently read a high-quality paper.\nname(raven, Milo) = True\nrecently_read_paper(raven, high_quality) = True\n\n# Based on the game state and the rules and preferences, does the raven hold the same number of points as the hare?\nquestion = points(raven) == points(hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the polar bear, if it has a card with a primary color, then we can conclude that it does not steal five of the points of the leopard.\nRule2: If the elephant burns the warehouse of the polar bear and the starfish holds the same number of points as the polar bear, then the polar bear steals five of the points of the leopard.\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe elephant burns the warehouse of the polar bear.\nThe polar bear has a card that is green in color.\nThe starfish holds the same number of points as the polar bear.\n\nBased on the game state and the rules and preferences, does the polar bear steal five points from the leopard?\nQuestion: Does the polar bear steal five points from the leopard?",
        "idx": 327,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the polar bear, if it has a card with a primary color, then we can conclude that it does not steal five of the points of the leopard.\nrule1() = has_card(polar_bear, primary_color) => not steal_points(polar_bear, 5, leopard)\n\n# Rule2: If the elephant burns the warehouse of the polar bear and the starfish holds the same number of points as the polar bear, then the polar bear steals five of the points of the leopard.\nrule2() = burn_warehouse(elephant, polar_bear) & points(starfish) == points(polar_bear) => steal_points(polar_bear, 5, leopard)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2)\n\n# The current state of the game is as follows\n# The elephant burns the warehouse of the polar bear\nburn_warehouse(elephant, polar_bear) = True\n# The polar bear has a card that is green in color\nhas_card(polar_bear, green_color) = True\n# The starfish holds the same number of points as the polar bear.\npoints(starfish) == points(polar_bear) = True\n\n# Based on the game state and the rules and preferences, does the polar bear steal five points from the leopard?\nquestion = steal_points(polar_bear, 5, leopard)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the goldfish has a card whose color appears in the flag of France, then the goldfish does not knock down the fortress that belongs to the black bear.\nRule2: If the goldfish has more than 6 friends, then it does not knock down the fortress that belongs to the black bear.\n\nThe current state of the game is as follows\nThe goldfish has 11 friends.\nThe goldfish has a card that is green in color.\nThe goldfish learns the basics of resource management from the squirrel.\n\nBased on the game state and the rules and preferences, does the goldfish knock down the fortress of the black bear?\nQuestion: Does the goldfish knock down the fortress of the black bear?",
        "idx": 328,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the goldfish has a card whose color appears in the flag of France, then the goldfish does not knock down the fortress that belongs to the black bear\nrule1() = has(goldfish, card) and color(card) in flag_colors(France) => not knock_down(goldfish, fortress(black_bear))\n# Rule2: Regarding the goldfish, if it has more than 6 friends, then we can conclude that it does not knock down the fortress that belongs to the black bear.\nrule2() = friends(goldfish) > 6 => not knock_down(goldfish, fortress(black_bear))\n\n# The current state of the game is as follows\n# The goldfish has 11 friends\nfriends(goldfish) = 11\n# The goldfish has a card that is green in color\nhas(goldfish, card) = True\ncolor(card, green) = True\n# The goldfish learns the basics of resource management from the squirrel.\nlearns(goldfish, basics_of_resource_management, squirrel) = True\n\n# Based on the game state and the rules and preferences, does the goldfish knock down the fortress of the black bear?\nquestion = knock_down(goldfish, fortress(black_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the lion, if it works fewer hours than before, then we can conclude that it sings a song of victory for the koala.\n\nThe current state of the game is as follows\nThe lion has 5 friends that are bald and 3 friends that are not.\nThe lion struggles to find food.\n\nBased on the game state and the rules and preferences, does the lion sing a victory song for the koala?\nQuestion: Does the lion sing a victory song for the koala?",
        "idx": 329,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the lion, if it works fewer hours than before, then we can conclude that it sings a song of victory for the koala.\nrule1() = hours_worked(lion) < previous_hours_worked(lion) => sing_song(lion, victory, koala)\n\n# The current state of the game is as follows\n# The lion has 5 friends that are bald and 3 friends that are not\nfriends_bald(lion) = 5\nfriends_not_bald(lion) = 3\n# The lion struggles to find food.\nstruggles_to_find_food(lion) = True\n\n# Based on the game state and the rules and preferences, does the lion sing a victory song for the koala?\nquestion = sing_song(lion, victory, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The halibut unquestionably gives a magnifying glass to the gecko, in the case where the parrot does not learn the basics of resource management from the halibut.\n\nThe current state of the game is as follows\nThe parrot does not learn the basics of resource management from the halibut.\n\nBased on the game state and the rules and preferences, does the halibut give a magnifier to the gecko?\nQuestion: Does the halibut give a magnifying glass to the gecko?",
        "idx": 330,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The halibut unquestionably gives a magnifying glass to the gecko, in the case where the parrot does not learn the basics of resource management from the halibut.\nrule1() = not learn_basics(parrot, resource_management, halibut) => give_item(halibut, magnifying_glass, gecko)\n\n# The current state of the game is as follows\n# The parrot does not learn the basics of resource management from the halibut.\nlearn_basics(parrot, resource_management, halibut) = False\n\n# Based on the game state and the rules and preferences, does the halibut give a magnifier to the gecko?\nquestion = give_item(halibut, magnifying_glass, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The ferret will not prepare armor for the salmon, in the case where the jellyfish does not become an actual enemy of the ferret.\nRule2: Regarding the ferret, if it has a name whose first letter is the same as the first letter of the cheetah's name, then we can conclude that it prepares armor for the salmon.\n\nThe current state of the game is as follows\nThe cheetah is named Paco.\nThe ferret is named Peddi.\nThe jellyfish does not become an enemy of the ferret.\n\nBased on the game state and the rules and preferences, does the ferret prepare armor for the salmon?\nQuestion: Does the ferret prepare armor for the salmon?",
        "idx": 331,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The ferret will not prepare armor for the salmon, in the case where the jellyfish does not become an actual enemy of the ferret\nrule1() = not become_enemy(jellyfish, ferret) => not prepare_armor(ferret, salmon)\n# Rule2: Regarding the ferret, if it has a name whose first letter is the same as the first letter of the cheetah's name, then we can conclude that it prepares armor for the salmon.\nrule2() = first_letter(name(ferret)) == first_letter(name(cheetah)) => prepare_armor(ferret, salmon)\n\n# The current state of the game is as follows\n# The cheetah is named Paco\nname(cheetah) = \"Paco\"\n# The ferret is named Peddi\nname(ferret) = \"Peddi\"\n# The jellyfish does not become an enemy of the ferret.\nbecome_enemy(jellyfish, ferret) = False\n\n# Based on the game state and the rules and preferences, does the ferret prepare armor for the salmon?\nquestion = prepare_armor(ferret, salmon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the eagle, if it has a card whose color appears in the flag of Japan, then we can conclude that it becomes an actual enemy of the bat.\n\nThe current state of the game is as follows\nThe eagle has a card that is green in color.\n\nBased on the game state and the rules and preferences, does the eagle become an enemy of the bat?\nQuestion: Does the eagle become an enemy of the bat?",
        "idx": 332,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the eagle, if it has a card whose color appears in the flag of Japan, then we can conclude that it becomes an actual enemy of the bat.\nrule1() = has_card(eagle, card) & color(card) in flag_colors(Japan) => enemy(eagle, bat)\n\n# The current state of the game is as follows\n# The eagle has a card that is green in color.\nhas_card(eagle, card) = True\ncolor(card, green) = True\n\n# Based on the game state and the rules and preferences, does the eagle become an enemy of the bat?\nquestion = enemy(eagle, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the puffin, if it has more than five friends, then we can conclude that it knows the defensive plans of the cockroach.\n\nThe current state of the game is as follows\nThe puffin has 6 friends.\n\nBased on the game state and the rules and preferences, does the puffin know the defensive plans of the cockroach?\nQuestion: Does the puffin know the defensive plans of the cockroach?",
        "idx": 333,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the puffin, if it has more than five friends, then we can conclude that it knows the defensive plans of the cockroach.\nrule1() = friends(puffin) > 5 => knows_defensive_plans(puffin, cockroach)\n\n# The current state of the game is as follows\n# The puffin has 6 friends.\nfriends(puffin) = 6\n\n# Based on the game state and the rules and preferences, does the puffin know the defensive plans of the cockroach?\nquestion = knows_defensive_plans(puffin, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something sings a victory song for the octopus and removes one of the pieces of the catfish, what can you certainly conclude? You can conclude that it also winks at the swordfish.\nRule2: If the parrot shows her cards (all of them) to the grizzly bear, then the grizzly bear is not going to wink at the swordfish.\nRule2 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe grizzly bear removes from the board one of the pieces of the catfish.\nThe grizzly bear sings a victory song for the octopus.\nThe parrot shows all her cards to the grizzly bear.\n\nBased on the game state and the rules and preferences, does the grizzly bear wink at the swordfish?\nQuestion: Does the grizzly bear wink at the swordfish?",
        "idx": 334,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something sings a victory song for the octopus and removes one of the pieces of the catfish, what can you certainly conclude? You can conclude that it also winks at the swordfish\nrule1() = sings_victory_song(something, octopus) & removes_piece(something, catfish) => winks(something, swordfish)\n\n# Rule2: If the parrot shows her cards (all of them) to the grizzly bear, then the grizzly bear is not going to wink at the swordfish.\nrule2() = shows_cards(parrot, grizzly_bear) => not winks(grizzly_bear, swordfish)\n\n# Rule2 is preferred over Rule1\npreferred_rule() = rule2()\n\n# The current state of the game is as follows\n# The grizzly bear removes from the board one of the pieces of the catfish\nremoves_piece(grizzly_bear, catfish) = True\n# The grizzly bear sings a victory song for the octopus\nsings_victory_song(grizzly_bear, octopus) = True\n# The parrot shows all her cards to the grizzly bear.\nshows_cards(parrot, grizzly_bear) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear wink at the swordfish?\nquestion = winks(grizzly_bear, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the cat, if it has more than 10 friends, then we can conclude that it knocks down the fortress of the gecko.\n\nThe current state of the game is as follows\nThe cat has one friend.\nThe meerkat does not offer a job to the eel.\n\nBased on the game state and the rules and preferences, does the cat knock down the fortress of the gecko?\nQuestion: Does the cat knock down the fortress of the gecko?",
        "idx": 335,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cat, if it has more than 10 friends, then we can conclude that it knocks down the fortress of the gecko.\nrule1() = friends(cat) > 10 => knock_down_fortress(cat, gecko)\n\n# The current state of the game is as follows\n# The cat has one friend\nfriends(cat) = 1\n# The meerkat does not offer a job to the eel.\noffer_job_position(meerkat, eel) = False\n\n# Based on the game state and the rules and preferences, does the cat knock down the fortress of the gecko?\nquestion = knock_down_fortress(cat, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something sings a victory song for the salmon but does not roll the dice for the tilapia because in this case it will, surely, sing a victory song for the cow (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe sun bear sings a victory song for the salmon.\nThe sun bear does not roll the dice for the tilapia.\n\nBased on the game state and the rules and preferences, does the sun bear sing a victory song for the cow?\nQuestion: Does the sun bear sing a victory song for the cow?",
        "idx": 336,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something sings a victory song for the salmon but does not roll the dice for the tilapia because in this case it will, surely, sing a victory song for the cow (this may or may not be problematic).\nrule1() = sings_victory_song(something, salmon) & not roll_dice(something, tilapia) => sings_victory_song(something, cow)\n\n# The current state of the game is as follows\n# The sun bear sings a victory song for the salmon\nsings_victory_song(sun_bear, salmon) = True\n# The sun bear does not roll the dice for the tilapia.\nnot roll_dice(sun_bear, tilapia) = True\n\n# Based on the game state and the rules and preferences, does the sun bear sing a victory song for the cow?\nquestion = sings_victory_song(sun_bear, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose proceeds to the spot that is right after the spot of the squid, then the squid is not going to wink at the grasshopper.\nRule2: Regarding the squid, if it has fewer than two friends, then we can conclude that it winks at the grasshopper.\nRule3: If the squid has a card whose color appears in the flag of Netherlands, then the squid winks at the grasshopper.\n\nRule2 is preferred over Rule1.\nRule3 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe moose proceeds to the spot right after the squid.\nThe squid has 6 friends.\n\nBased on the game state and the rules and preferences, does the squid wink at the grasshopper?\nQuestion: Does the squid wink at the grasshopper?",
        "idx": 337,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the moose proceeds to the spot that is right after the spot of the squid, then the squid is not going to wink at the grasshopper\nrule1() = proceed_to_spot(moose, spot_after(squid)) => not wink(squid, grasshopper)\n# Rule2: Regarding the squid, if it has fewer than two friends, then we can conclude that it winks at the grasshopper\nrule2() = friends(squid) < 2 => wink(squid, grasshopper)\n# Rule3: If the squid has a card whose color appears in the flag of Netherlands, then the squid winks at the grasshopper.\nrule3() = has_card(squid, color_in_flag(Netherlands)) => wink(squid, grasshopper)\n\n# Rule2 is preferred over Rule1\npreferred_rule1() = not rule2()\n# Rule3 is preferred over Rule1\npreferred_rule2() = not rule3()\n\n# The current state of the game is as follows\n# The moose proceeds to the spot right after the squid\nproceed_to_spot(moose, spot_after(squid)) = True\n# The squid has 6 friends.\nfriends(squid) = 6\n\n# Based on the game state and the rules and preferences, does the squid wink at the grasshopper?\nquestion = wink(squid, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something proceeds to the spot that is right after the spot of the moose, then it becomes an actual enemy of the panther, too.\n\nThe current state of the game is as follows\nThe tiger attacks the green fields whose owner is the moose.\n\nBased on the game state and the rules and preferences, does the tiger become an enemy of the panther?\nQuestion: Does the tiger become an enemy of the panther?",
        "idx": 338,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something proceeds to the spot that is right after the spot of the moose, then it becomes an actual enemy of the panther, too.\nrule1() = proceeds_to_spot(something, spot_after(moose)) => enemy(something, panther)\n\n# The current state of the game is as follows\n# The tiger attacks the green fields whose owner is the moose.\nattacks(tiger, green_fields) & owner(green_fields, moose) = True\n\n# Based on the game state and the rules and preferences, does the tiger become an enemy of the panther?\nquestion = enemy(tiger, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal raises a flag of peace for the panda bear, then the cockroach rolls the dice for the turtle.\n\nThe current state of the game is as follows\nThe buffalo raises a peace flag for the panda bear.\nThe goldfish raises a peace flag for the cockroach.\nThe squirrel winks at the cockroach.\n\nBased on the game state and the rules and preferences, does the cockroach roll the dice for the turtle?\nQuestion: Does the cockroach roll the dice for the turtle?",
        "idx": 339,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal raises a flag of peace for the panda bear, then the cockroach rolls the dice for the turtle.\nrule1() = raise_flag_of_peace(animal, panda_bear) => roll_dice(cockroach, turtle)\n\n# The current state of the game is as follows\n# The buffalo raises a peace flag for the panda bear\nraise_flag_of_peace(buffalo, panda_bear) = True\n# The goldfish raises a peace flag for the cockroach\nraise_flag_of_peace(goldfish, cockroach) = True\n# The squirrel winks at the cockroach.\nwink(squirrel, cockroach) = True\n\n# Based on the game state and the rules and preferences, does the cockroach roll the dice for the turtle?\nquestion = roll_dice(cockroach, turtle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something knocks down the fortress of the mosquito and shows all her cards to the raven, what can you certainly conclude? You can conclude that it does not eat the food that belongs to the koala.\n\nThe current state of the game is as follows\nThe spider knocks down the fortress of the mosquito and shows all her cards to the raven.\n\nBased on the game state and the rules and preferences, does the spider eat the food of the koala?\nQuestion: Does the spider eat the food of the koala?",
        "idx": 340,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something knocks down the fortress of the mosquito and shows all her cards to the raven, what can you certainly conclude? You can conclude that it does not eat the food that belongs to the koala.\nrule1() = knocks_down_fortress(something, mosquito) & shows_all_cards(something, raven) => not eat_food(something, koala)\n\n# The current state of the game is as follows\n# The spider knocks down the fortress of the mosquito, and shows all her cards to the raven.\nknocks_down_fortress(spider, mosquito) = True\nshows_all_cards(spider, raven) = True\n\n# Based on the game state and the rules and preferences, does the spider eat the food of the koala?\nquestion = eat_food(spider, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grizzly bear does not raise a flag of peace for the cat, then the cat owes money to the gecko.\n\nThe current state of the game is as follows\nThe grizzly bear raises a peace flag for the cat.\nThe cat does not need support from the snail.\n\nBased on the game state and the rules and preferences, does the cat owe money to the gecko?\nQuestion: Does the cat owe money to the gecko?",
        "idx": 341,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grizzly bear does not raise a flag of peace for the cat, then the cat owes $$$ to the gecko.\nrule1() = not raise_flag_of_peace(grizzly_bear, cat) => owe(cat, money, gecko)\n\n# The current state of the game is as follows\n# The grizzly bear raises a peace flag for the cat\nraise_flag_of_peace(grizzly_bear, cat) = True\n# The cat does not need support from the snail.\nneed_support(cat, snail) = False\n\n# Based on the game state and the rules and preferences, does the cat owe money to the gecko?\nquestion = owe(cat, money, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the parrot, if it has a card whose color starts with the letter \"w\", then we can conclude that it shows her cards (all of them) to the meerkat.\n\nThe current state of the game is as follows\nThe parrot has a card that is white in color, and is named Meadow.\nThe raven is named Milo.\n\nBased on the game state and the rules and preferences, does the parrot show all her cards to the meerkat?\nQuestion: Does the parrot show all her cards to the meerkat?",
        "idx": 342,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the parrot, if it has a card whose color starts with the letter \"w\", then we can conclude that it shows her cards (all of them) to the meerkat.\nrule1() = starts_with(color(card, \"w\"), \"w\") => show_cards(parrot, meerkat)\n\n# The current state of the game is as follows\n# The parrot has a card that is white in color, and is named Meadow\ncolor(card, white) = True\nname(card, Meadow) = True\n# The raven is named Milo.\nname(raven, Milo) = True\n\n# Based on the game state and the rules and preferences, does the parrot show all her cards to the meerkat?\nquestion = show_cards(parrot, meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something gives a magnifier to the octopus and also becomes an actual enemy of the sheep because in this case it will surely not burn the warehouse of the cat (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe sun bear becomes an enemy of the sheep and gives a magnifier to the octopus.\n\nBased on the game state and the rules and preferences, does the sun bear burn the warehouse of the cat?\nQuestion: Does the sun bear burn the warehouse of the cat?",
        "idx": 343,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something gives a magnifier to the octopus and also becomes an actual enemy of the sheep because in this case it will surely not burn the warehouse of the cat (this may or may not be problematic).\nrule1() = give_magnifier(something, octopus) & become_enemy(something, sheep) => not burn_warehouse(sun_bear, cat)\n\n# The current state of the game is as follows\n# The sun bear becomes an enemy of the sheep, and gives a magnifier to the octopus.\nbecome_enemy(sun_bear, sheep) = True\ngive_magnifier(sun_bear, octopus) = True\n\n# Based on the game state and the rules and preferences, does the sun bear burn the warehouse of the cat?\nquestion = burn_warehouse(sun_bear, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the sun bear, if it has a card whose color starts with the letter \"w\", then we can conclude that it needs the support of the baboon.\nRule2: Regarding the sun bear, if it has a name whose first letter is the same as the first letter of the pig's name, then we can conclude that it needs support from the baboon.\n\nThe current state of the game is as follows\nThe pig is named Tessa.\nThe sun bear has a card that is green in color.\nThe sun bear has a love seat sofa, and is named Cinnamon.\n\nBased on the game state and the rules and preferences, does the sun bear need support from the baboon?\nQuestion: Does the sun bear need support from the baboon?",
        "idx": 344,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the sun bear, if it has a card whose color starts with the letter \"w\", then we can conclude that it needs the support of the baboon\nrule1() = starts_with(color(card, \"w\"), \"w\") => needs_support(sun_bear, baboon)\n# Rule2: Regarding the sun bear, if it has a name whose first letter is the same as the first letter of the pig's name, then we can conclude that it needs support from the baboon.\nrule2() = first_letter(name(sun_bear)) == first_letter(name(pig)) => needs_support(sun_bear, baboon)\n\n# The current state of the game is as follows\n# The pig is named Tessa\nname(pig) = \"Tessa\"\n# The sun bear has a card that is green in color\ncolor(card, green) = True\n# The sun bear has a love seat sofa, and is named Cinnamon.\nname(sun_bear) = \"Cinnamon\"\n\n# Based on the game state and the rules and preferences, does the sun bear need support from the baboon?\nquestion = needs_support(sun_bear, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose burns the warehouse of the polar bear, then the polar bear is not going to learn the basics of resource management from the elephant.\nRule2: If the polar bear has a card whose color starts with the letter \"o\", then the polar bear learns elementary resource management from the elephant.\nRule3: If the polar bear has more than seven friends, then we can conclude that it learns elementary resource management from the elephant.\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe polar bear has 3 friends and has a card that is orange in color.\n\nBased on the game state and the rules and preferences, does the polar bear learn the basics of resource management from the elephant?\nQuestion: Does the polar bear learn the basics of resource management from the elephant?",
        "idx": 345,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the moose burns the warehouse of the polar bear, then the polar bear is not going to learn the basics of resource management from the elephant\nrule1() = burn_warehouse(moose, polar_bear) => not learn_basics_of_resource_management(polar_bear, elephant)\n# Rule2: If the polar bear has a card whose color starts with the letter \"o\", then the polar bear learns elementary resource management from the elephant\nrule2() = has(polar_bear, card) and starts_with(color(card), \"o\") => learn_elementary_resource_management(polar_bear, elephant)\n# Rule3: Regarding the polar bear, if it has more than seven friends, then we can conclude that it learns elementary resource management from the elephant.\nrule3() = friends(polar_bear) > 7 => learn_elementary_resource_management(polar_bear, elephant)\n\n# Rule1 is preferred over Rule2\nprefer(rule1, rule2)\n# Rule1 is preferred over Rule3\nprefer(rule1, rule3)\n\n# The current state of the game is as follows\n# The polar bear has 3 friends, and has a card that is orange in color.\nfriends(polar_bear) = 3\nhas(polar_bear, card) = True\ncolor(card, orange) = True\n\n# Based on the game state and the rules and preferences, does the polar bear learn the basics of resource management from the elephant?\nquestion = learn_basics_of_resource_management(polar_bear, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something gives a magnifier to the doctorfish and also attacks the green fields of the whale because in this case it will surely not raise a peace flag for the donkey (this may or may not be problematic)\nRule2: Regarding the viperfish, if it took a bike from the store, then we can conclude that it raises a flag of peace for the donkey.\n\nThe current state of the game is as follows\nThe viperfish attacks the green fields whose owner is the whale, and gives a magnifier to the doctorfish.\n\nBased on the game state and the rules and preferences, does the viperfish raise a peace flag for the donkey?\nQuestion: Does the viperfish raise a peace flag for the donkey?",
        "idx": 346,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something gives a magnifier to the doctorfish and also attacks the green fields of the whale because in this case it will surely not raise a peace flag for the donkey (this may or may not be problematic)\nrule1() = give_magnifier(something, doctorfish) & attack_green_fields(something, whale) => not raise_flag_of_peace(something, donkey)\n# Rule2: Regarding the viperfish, if it took a bike from the store, then we can conclude that it raises a flag of peace for the donkey.\nrule2() = took_bike(viperfish, store) => raise_flag_of_peace(viperfish, donkey)\n\n# The current state of the game is as follows\n# The viperfish attacks the green fields whose owner is the whale, and gives a magnifier to the doctorfish.\nattack_green_fields(viperfish, whale) = True\ngive_magnifier(viperfish, doctorfish) = True\n\n# Based on the game state and the rules and preferences, does the viperfish raise a peace flag for the donkey?\nquestion = raise_flag_of_peace(viperfish, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sun bear has more than six friends, then the sun bear removes one of the pieces of the caterpillar.\nRule2: If the sun bear has access to an abundance of food, then it removes from the board one of the pieces of the caterpillar.\n\nThe current state of the game is as follows\nThe sun bear has 3 friends.\nThe sun bear stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the sun bear remove from the board one of the pieces of the caterpillar?\nQuestion: Does the sun bear remove from the board one of the pieces of the caterpillar?",
        "idx": 347,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sun bear has more than six friends, then the sun bear removes one of the pieces of the caterpillar\nrule1() = friends(sun_bear) > 6 => remove_piece(sun_bear, caterpillar)\n# Rule2: Regarding the sun bear, if it has access to an abundance of food, then we can conclude that it removes from the board one of the pieces of the caterpillar.\nrule2() = has_access_to_food(sun_bear) => remove_piece(sun_bear, caterpillar)\n\n# The current state of the game is as follows\n# The sun bear has 3 friends\nfriends(sun_bear) = 3\n# The sun bear stole a bike from the store.\nstole_bike(sun_bear) = True\n\n# Based on the game state and the rules and preferences, does the sun bear remove from the board one of the pieces of the caterpillar?\nquestion = remove_piece(sun_bear, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the caterpillar, if it has fewer than eight friends, then we can conclude that it proceeds to the spot that is right after the spot of the parrot.\n\nThe current state of the game is as follows\nThe caterpillar has one lazy friend and one non-lazy friend.\n\nBased on the game state and the rules and preferences, does the caterpillar proceed to the spot right after the parrot?\nQuestion: Does the caterpillar proceed to the spot right after the parrot?",
        "idx": 348,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the caterpillar, if it has fewer than eight friends, then we can conclude that it proceeds to the spot that is right after the spot of the parrot.\nrule1() = friends(caterpillar) < 8 => proceed_to_spot(caterpillar, spot_after(parrot))\n\n# The current state of the game is as follows\n# The caterpillar has one friend that is lazy and one friend that is not.\nfriends(caterpillar) = 2\n\n# Based on the game state and the rules and preferences, does the caterpillar proceed to the spot right after the parrot?\nquestion = proceed_to_spot(caterpillar, spot_after(parrot))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the aardvark has a sharp object, then the aardvark does not eat the food that belongs to the black bear.\n\nThe current state of the game is as follows\nThe aardvark has 7 friends and has a blade.\nThe aardvark has a card that is blue in color.\n\nBased on the game state and the rules and preferences, does the aardvark eat the food of the black bear?\nQuestion: Does the aardvark eat the food that belongs to the black bear?",
        "idx": 349,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the aardvark has a sharp object, then the aardvark does not eat the food that belongs to the black bear.\nrule1() = has_sharp_object(aardvark) => not eat_food(aardvark, black_bear)\n\n# The current state of the game is as follows\n# The aardvark has 7 friends, and has a blade\nfriends(aardvark) = 7\nhas_sharp_object(aardvark) = True\n# The aardvark has a card that is blue in color.\nhas_card(aardvark) = True\ncolor(card(aardvark), blue) = True\n\n# Based on the game state and the rules and preferences, does the aardvark eat the food of the black bear?\nquestion = eat_food(aardvark, black_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sea bass holds the same number of points as the eagle and the lion becomes an enemy of the eagle, then the eagle will not knock down the fortress of the hare.\nRule2: If something does not need the support of the pig, then it knocks down the fortress of the hare.\n\nThe current state of the game is as follows\nThe eagle does not show all her cards to the pig.\nThe lion does not become an enemy of the eagle.\nThe sea bass does not hold the same number of points as the eagle.\n\nBased on the game state and the rules and preferences, does the eagle knock down the fortress of the hare?\nQuestion: Does the eagle knock down the fortress of the hare?",
        "idx": 350,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sea bass holds the same number of points as the eagle and the lion becomes an enemy of the eagle, then the eagle will not knock down the fortress of the hare\nrule1() = points(sea_bass) == points(eagle) & become_enemy(lion, eagle) => not knock_down_fortress(eagle, hare)\n# Rule2: If something does not need the support of the pig, then it knocks down the fortress of the hare.\nrule2() = not need_support(something) => knock_down_fortress(something, hare)\n\n# The current state of the game is as follows\n# The eagle does not show all her cards to the pig\nshow_all_cards(eagle, pig) = False\n# The lion does not become an enemy of the eagle\nbecome_enemy(lion, eagle) = False\n# The sea bass does not hold the same number of points as the eagle.\npoints(sea_bass) == points(eagle) = False\n\n# Based on the game state and the rules and preferences, does the eagle knock down the fortress of the hare?\nquestion = knock_down_fortress(eagle, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something removes one of the pieces of the mosquito, then it holds the same number of points as the sun bear, too.\nRule2: If you are positive that you saw one of the animals burns the warehouse of the buffalo, you can be certain that it will not hold the same number of points as the sun bear.\n\nThe current state of the game is as follows\nThe parrot removes from the board one of the pieces of the mosquito.\n\nBased on the game state and the rules and preferences, does the parrot hold the same number of points as the sun bear?\nQuestion: Does the parrot hold the same number of points as the sun bear?",
        "idx": 351,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something removes one of the pieces of the mosquito, then it holds the same number of points as the sun bear, too\nrule1() = remove_piece(something, mosquito) => points(something) == points(sun_bear)\n# Rule2: If you are positive that you saw one of the animals burns the warehouse of the buffalo, you can be certain that it will not hold the same number of points as the sun bear.\nrule2() = saw_burns(animal, warehouse, buffalo) => not (points(animal) == points(sun_bear))\n\n# The current state of the game is as follows\n# The parrot removes from the board one of the pieces of the mosquito.\nremove_piece(parrot, mosquito) = True\n\n# Based on the game state and the rules and preferences, does the parrot hold the same number of points as the sun bear?\nquestion = points(parrot) == points(sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal removes from the board one of the pieces of the cat, then the hippopotamus does not give a magnifying glass to the koala.\n\nThe current state of the game is as follows\nThe hippopotamus learns the basics of resource management from the eagle.\nThe viperfish removes from the board one of the pieces of the cat.\n\nBased on the game state and the rules and preferences, does the hippopotamus give a magnifier to the koala?\nQuestion: Does the hippopotamus give a magnifying glass to the koala?",
        "idx": 352,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal removes from the board one of the pieces of the cat, then the hippopotamus does not give a magnifying glass to the koala.\nrule1() = remove_piece(animal, cat) => not give_magnifying_glass(hippopotamus, koala)\n\n# The current state of the game is as follows\n# The hippopotamus learns the basics of resource management from the eagle\nlearn_basics(hippopotamus, resource_management, eagle) = True\n# The viperfish removes from the board one of the pieces of the cat.\nremove_piece(viperfish, cat) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus give a magnifier to the koala?\nquestion = give_magnifying_glass(hippopotamus, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the penguin, if it has something to carry apples and oranges, then we can conclude that it shows her cards (all of them) to the panda bear\nRule2: The penguin does not show all her cards to the panda bear whenever at least one animal winks at the cow.\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe penguin has a flute.\nThe koala does not sing a victory song for the cow.\n\nBased on the game state and the rules and preferences, does the penguin show all her cards to the panda bear?\nQuestion: Does the penguin show all her cards to the panda bear?",
        "idx": 353,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the penguin, if it has something to carry apples and oranges, then we can conclude that it shows her cards (all of them) to the panda bear\nrule1() = has(penguin, carry(apples)) & has(penguin, carry(oranges)) => show_cards(penguin, panda_bear)\n\n# Rule2: The penguin does not show all her cards to the panda bear whenever at least one animal winks at the cow.\nrule2() = wink(animal, cow) => not show_cards(penguin, panda_bear)\n\n# Rule2 is preferred over Rule1\n\n# The current state of the game is as follows\n# The penguin has a flute\nhas(penguin, flute) = True\n# The koala does not sing a victory song for the cow.\nsing_victory_song(koala, cow) = False\n\n# Based on the game state and the rules and preferences, does the penguin show all her cards to the panda bear?\nquestion = show_cards(penguin, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The wolverine eats the food of the puffin whenever at least one animal gives a magnifier to the raven.\nRule2: If the wolverine has more than 11 friends, then the wolverine does not eat the food of the puffin.\nRule3: If the wolverine has a device to connect to the internet, then the wolverine does not eat the food of the puffin.\n\nRule1 is preferred over Rule2.\nRule1 is preferred over Rule3.\n\nThe current state of the game is as follows\nThe moose gives a magnifier to the raven.\nThe wolverine has a computer.\nThe wolverine has six wise friends and four not wise friends.\n\nBased on the game state and the rules and preferences, does the wolverine eat the food of the puffin?\nQuestion: Does the wolverine eat the food of the puffin?",
        "idx": 354,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The wolverine eats the food of the puffin whenever at least one animal gives a magnifier to the raven\nrule1() = give_magnifier(animal, raven) => eat_food(wolverine, puffin)\n# Rule2: If the wolverine has more than 11 friends, then the wolverine does not eat the food of the puffin\nrule2() = friends(wolverine) > 11 => not eat_food(wolverine, puffin)\n# Rule3: If the wolverine has a device to connect to the internet, then the wolverine does not eat the food of the puffin.\nrule3() = has_device(wolverine, internet) => not eat_food(wolverine, puffin)\n\n# Rule1 is preferred over Rule2\npreferred_rule1_over_rule2() = True\n# Rule1 is preferred over Rule3\npreferred_rule1_over_rule3() = True\n\n# The current state of the game is as follows\n# The moose gives a magnifier to the raven\ngive_magnifier(moose, raven) = True\n# The wolverine has a computer\nhas_device(wolverine, computer) = True\n# The wolverine has six friends that are wise and four friends that are not.\nfriends(wolverine, wise) = 6\nfriends(wolverine, not_wise) = 4\n\n# Based on the game state and the rules and preferences, does the wolverine eat the food of the puffin?\nquestion = eat_food(wolverine, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the ferret has a name whose first letter is the same as the first letter of the mosquito's name, then the ferret does not show all her cards to the octopus.\n\nThe current state of the game is as follows\nThe ferret is named Tarzan.\nThe mosquito is named Tango.\n\nBased on the game state and the rules and preferences, does the ferret show all her cards to the octopus?\nQuestion: Does the ferret show all her cards to the octopus?",
        "idx": 355,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the ferret has a name whose first letter is the same as the first letter of the mosquito's name, then the ferret does not show her cards (all of them) to the octopus.\nrule1() = first_letter(name(ferret)) == first_letter(name(mosquito)) => not show_cards(ferret, octopus)\n\n# The current state of the game is as follows\n# The ferret is named Tarzan\nname(ferret) = \"Tarzan\"\n# The mosquito is named Tango.\nname(mosquito) = \"Tango\"\n\n# Based on the game state and the rules and preferences, does the ferret show all her cards to the octopus?\nquestion = show_cards(ferret, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The turtle owes money to the squirrel whenever at least one animal offers a job to the bat.\n\nThe current state of the game is as follows\nThe sun bear shows all her cards to the bat.\n\nBased on the game state and the rules and preferences, does the turtle owe money to the squirrel?\nQuestion: Does the turtle owe money to the squirrel?",
        "idx": 356,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The turtle owes $$$ to the squirrel whenever at least one animal offers a job to the bat.\nrule1() = offer_job_position(animal, bat) => owes(turtle, money, squirrel)\n\n# The current state of the game is as follows\n# The sun bear shows all her cards to the bat.\nshow_cards(sun_bear, bat) = True\n\n# Based on the game state and the rules and preferences, does the turtle owe money to the squirrel?\nquestion = owes(turtle, money, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the jellyfish, if it has a card whose color starts with the letter \"l\", then we can conclude that it knows the defensive plans of the wolverine.\nRule2: If the jellyfish has a device to connect to the internet, then the jellyfish knows the defensive plans of the wolverine.\n\nThe current state of the game is as follows\nThe jellyfish has a card that is black in color, and has a cell phone.\n\nBased on the game state and the rules and preferences, does the jellyfish know the defensive plans of the wolverine?\nQuestion: Does the jellyfish know the defensive plans of the wolverine?",
        "idx": 357,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the jellyfish, if it has a card whose color starts with the letter \"l\", then we can conclude that it knows the defensive plans of the wolverine\nrule1() = starts_with(color(card, \"l\"), \"l\") => knows(jellyfish, defensive_plans(wolverine))\n# Rule2: If the jellyfish has a device to connect to the internet, then the jellyfish knows the defensive plans of the wolverine.\nrule2() = has_device(jellyfish, internet) => knows(jellyfish, defensive_plans(wolverine))\n\n# The current state of the game is as follows\n# The jellyfish has a card that is black in color, and has a cell phone.\ncolor(card, black) = True\nhas_device(jellyfish, cell_phone) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish know the defensive plans of the wolverine?\nquestion = knows(jellyfish, defensive_plans(wolverine))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The squirrel does not prepare armor for the mosquito whenever at least one animal respects the doctorfish.\n\nThe current state of the game is as follows\nThe buffalo respects the doctorfish.\n\nBased on the game state and the rules and preferences, does the squirrel prepare armor for the mosquito?\nQuestion: Does the squirrel prepare armor for the mosquito?",
        "idx": 358,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The squirrel does not prepare armor for the mosquito whenever at least one animal respects the doctorfish.\nrule1() = respect(buffalo, doctorfish) => not prepare_armor(squirrel, mosquito)\n\n# The current state of the game is as follows\n# The buffalo respects the doctorfish.\nrespect(buffalo, doctorfish) = True\n\n# Based on the game state and the rules and preferences, does the squirrel prepare armor for the mosquito?\nquestion = prepare_armor(squirrel, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the panda bear, if it has a high salary, then we can conclude that it eats the food that belongs to the cat.\n\nThe current state of the game is as follows\nThe panda bear has a hot chocolate.\nThe panda bear has a low-income job.\n\nBased on the game state and the rules and preferences, does the panda bear eat the food of the cat?\nQuestion: Does the panda bear eat the food of the cat?",
        "idx": 359,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the panda bear, if it has a high salary, then we can conclude that it eats the food that belongs to the cat.\nrule1() = salary(panda_bear) == high => eat_food(panda_bear, cat)\n\n# The current state of the game is as follows\n# The panda bear has a hot chocolate\nhas_food(panda_bear, hot_chocolate) = True\n# The panda bear has a low-income job.\nsalary(panda_bear) == low = True\n\n# Based on the game state and the rules and preferences, does the panda bear eat the food of the cat?\nquestion = eat_food(panda_bear, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the moose, if it has a name whose first letter is the same as the first letter of the pig's name, then we can conclude that it steals five of the points of the caterpillar.\n\nThe current state of the game is as follows\nThe moose is named Milo.\nThe pig is named Max.\n\nBased on the game state and the rules and preferences, does the moose steal five points from the caterpillar?\nQuestion: Does the moose steal five points from the caterpillar?",
        "idx": 360,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the moose, if it has a name whose first letter is the same as the first letter of the pig's name, then we can conclude that it steals five of the points of the caterpillar.\nrule1() = first_letter(name(moose)) == first_letter(name(pig)) => steal_points(moose, caterpillar, 5)\n\n# The current state of the game is as follows\n# The moose is named Milo\nname(moose) = \"Milo\"\n# The pig is named Max.\nname(pig) = \"Max\"\n\n# Based on the game state and the rules and preferences, does the moose steal five points from the caterpillar?\nquestion = steal_points(moose, caterpillar, 5)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the cricket, if it has more than 14 friends, then we can conclude that it does not hold the same number of points as the cow.\nRule2: If the cricket has a high-quality paper, then the cricket does not hold the same number of points as the cow.\n\nThe current state of the game is as follows\nThe cricket has four friends that are mean and four friends that are not.\nThe cricket published a high-quality paper.\nThe cricket offers a job to the panda bear.\n\nBased on the game state and the rules and preferences, does the cricket hold the same number of points as the cow?\nQuestion: Does the cricket hold the same number of points as the cow?",
        "idx": 361,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cricket, if it has more than 14 friends, then we can conclude that it does not hold the same number of points as the cow\nrule1() = friends(cricket) > 14 => not same_points(cricket, cow)\n# Rule2: If the cricket has a high-quality paper, then the cricket does not hold the same number of points as the cow.\nrule2() = has_paper(cricket, high_quality) => not same_points(cricket, cow)\n\n# The current state of the game is as follows\n# The cricket has four friends that are mean and 4 friends that are not\nfriends(cricket) = 8\n# The cricket published a high-quality paper\nhas_paper(cricket, high_quality) = True\n# The cricket offers a job to the panda bear.\noffer_job(cricket, panda_bear) = True\n\n# Based on the game state and the rules and preferences, does the cricket hold the same number of points as the cow?\nquestion = same_points(cricket, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the donkey, if it does not have her keys, then we can conclude that it winks at the mosquito.\n\nThe current state of the game is as follows\nThe donkey hates Chris Ronaldo.\n\nBased on the game state and the rules and preferences, does the donkey wink at the mosquito?\nQuestion: Does the donkey wink at the mosquito?",
        "idx": 362,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the donkey, if it does not have her keys, then we can conclude that it winks at the mosquito.\nrule1() = not have_keys(donkey) => wink(donkey, mosquito)\n\n# The current state of the game is as follows\n# The donkey hates Chris Ronaldo.\nhates(donkey, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the donkey wink at the mosquito?\nquestion = wink(donkey, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the lobster, if it has a name whose first letter is the same as the first letter of the donkey's name, then we can conclude that it winks at the swordfish.\nRule2: Regarding the lobster, if it has something to sit on, then we can conclude that it winks at the swordfish.\n\nThe current state of the game is as follows\nThe donkey is named Lily.\nThe lobster has a plastic bag.\nThe lobster is named Lucy.\n\nBased on the game state and the rules and preferences, does the lobster wink at the swordfish?\nQuestion: Does the lobster wink at the swordfish?",
        "idx": 363,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the lobster, if it has a name whose first letter is the same as the first letter of the donkey's name, then we can conclude that it winks at the swordfish\nrule1() = first_letter(name(lobster)) == first_letter(name(donkey)) => wink(lobster, swordfish)\n# Rule2: Regarding the lobster, if it has something to sit on, then we can conclude that it winks at the swordfish.\nrule2() = has_something_to_sit_on(lobster) => wink(lobster, swordfish)\n\n# The current state of the game is as follows\n# The donkey is named Lily\nname(donkey) = \"Lily\"\n# The lobster has a plastic bag\nhas_something_to_sit_on(lobster) = True\n# The lobster is named Lucy.\nname(lobster) = \"Lucy\"\n\n# Based on the game state and the rules and preferences, does the lobster wink at the swordfish?\nquestion = wink(lobster, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the starfish proceeds to the spot that is right after the spot of the cow and the dog burns the warehouse of the cow, then the cow will not wink at the cat.\n\nThe current state of the game is as follows\nThe dog burns the warehouse of the cow.\nThe starfish proceeds to the spot right after the cow.\n\nBased on the game state and the rules and preferences, does the cow wink at the cat?\nQuestion: Does the cow wink at the cat?",
        "idx": 364,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the starfish proceeds to the spot that is right after the spot of the cow and the dog burns the warehouse of the cow, then the cow will not wink at the cat.\nrule1() = proceed_to_spot(starfish, spot_after(cow)) & burn_warehouse(dog, cow) => not wink(cow, cat)\n\n# The current state of the game is as follows\n# The dog burns the warehouse of the cow\nburn_warehouse(dog, cow) = True\n# The starfish proceeds to the spot right after the cow.\nproceed_to_spot(starfish, spot_after(cow)) = True\n\n# Based on the game state and the rules and preferences, does the cow wink at the cat?\nquestion = wink(cow, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something winks at the hare but does not learn the basics of resource management from the cheetah because in this case it will, surely, need support from the donkey (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe tiger learns the basics of resource management from the cheetah.\nThe tiger winks at the hare.\n\nBased on the game state and the rules and preferences, does the tiger need support from the donkey?\nQuestion: Does the tiger need support from the donkey?",
        "idx": 365,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something winks at the hare but does not learn the basics of resource management from the cheetah because in this case it will, surely, need support from the donkey (this may or may not be problematic).\nrule1() = wink(tiger, hare) & not learn_basics_of_resource_management(tiger, cheetah) => need_support(tiger, donkey)\n\n# The current state of the game is as follows\n# The tiger learns the basics of resource management from the cheetah\nlearn_basics_of_resource_management(tiger, cheetah) = True\n# The tiger winks at the hare.\nwink(tiger, hare) = True\n\n# Based on the game state and the rules and preferences, does the tiger need support from the donkey?\nquestion = need_support(tiger, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The rabbit does not respect the polar bear whenever at least one animal respects the phoenix.\nRule2: If the rabbit is a fan of Chris Ronaldo, then we can conclude that it respects the polar bear.\n\nThe current state of the game is as follows\nThe rabbit supports Chris Ronaldo.\n\nBased on the game state and the rules and preferences, does the rabbit respect the polar bear?\nQuestion: Does the rabbit respect the polar bear?",
        "idx": 366,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The rabbit does not respect the polar bear whenever at least one animal respects the phoenix\nrule1() = exists(animal) & respect(animal, phoenix) => not respect(rabbit, polar_bear)\n# Rule2: Regarding the rabbit, if it is a fan of Chris Ronaldo, then we can conclude that it respects the polar bear.\nrule2() = fan(rabbit, Chris_Ronaldo) => respect(rabbit, polar_bear)\n\n# The current state of the game is as follows\n# The rabbit supports Chris Ronaldo.\nfan(rabbit, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the rabbit respect the polar bear?\nquestion = respect(rabbit, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the sea bass, if it has a card with a primary color, then we can conclude that it holds an equal number of points as the blobfish\nRule2: Regarding the sea bass, if it took a bike from the store, then we can conclude that it holds an equal number of points as the blobfish\nRule3: If the sea bass has more than four friends, then the sea bass does not hold the same number of points as the blobfish.\nRule1 is preferred over Rule3\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe sea bass has 10 friends, and has a card that is orange in color.\n\nBased on the game state and the rules and preferences, does the sea bass hold the same number of points as the blobfish?\nQuestion: Does the sea bass hold the same number of points as the blobfish?",
        "idx": 367,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the sea bass, if it has a card with a primary color, then we can conclude that it holds an equal number of points as the blobfish\nrule1() = has(sea_bass, card) and color(card) in primary_colors => points(sea_bass) == points(blobfish)\n# Rule2: Regarding the sea bass, if it took a bike from the store, then we can conclude that it holds an equal number of points as the blobfish\nrule2() = took_bike(sea_bass) => points(sea_bass) == points(blobfish)\n# Rule3: If the sea bass has more than four friends, then the sea bass does not hold the same number of points as the blobfish.\nrule3() = friends(sea_bass) > 4 => not (points(sea_bass) == points(blobfish))\n\n# Rule1 is preferred over Rule3\npreferred_rule1_over_rule3() = rule1() and not rule3()\n# Rule2 is preferred over Rule3\npreferred_rule2_over_rule3() = rule2() and not rule3()\n\n# The current state of the game is as follows\n# The sea bass has 10 friends, and has a card that is orange in color.\nfriends(sea_bass) = 10\nhas(sea_bass, card) = True\ncolor(card, orange) = True\n\n# Based on the game state and the rules and preferences, does the sea bass hold the same number of points as the blobfish?\nquestion = points(sea_bass) == points(blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something raises a flag of peace for the tilapia and also gives a magnifying glass to the panther because in this case it will surely roll the dice for the puffin (this may or may not be problematic)\nRule2: The hippopotamus will not roll the dice for the puffin, in the case where the meerkat does not become an enemy of the hippopotamus.\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe hippopotamus raises a peace flag for the tilapia but does not give a magnifier to the panther.\n\nBased on the game state and the rules and preferences, does the hippopotamus roll the dice for the puffin?\nQuestion: Does the hippopotamus roll the dice for the puffin?",
        "idx": 368,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something raises a flag of peace for the tilapia and also gives a magnifying glass to the panther because in this case it will surely roll the dice for the puffin (this may or may not be problematic)\nrule1() = raise_flag_of_peace(something, tilapia) & give_magnifying_glass(something, panther) => roll_dice(something, puffin)\n\n# Rule2: The hippopotamus will not roll the dice for the puffin, in the case where the meerkat does not become an enemy of the hippopotamus.\nrule2() = not become_enemy(meerkat, hippopotamus) => not roll_dice(hippopotamus, puffin)\n\n# Rule2 is preferred over Rule1\npreferred_rule() = rule2() > rule1()\n\n# The current state of the game is as follows\n# The hippopotamus raises a peace flag for the tilapia but does not give a magnifier to the panther.\nraise_flag_of_peace(hippopotamus, tilapia) = True\ngive_magnifying_glass(hippopotamus, panther) = False\n\n# Based on the game state and the rules and preferences, does the hippopotamus roll the dice for the puffin?\nquestion = roll_dice(hippopotamus, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lobster has more than 8 friends, then the lobster does not burn the warehouse of the pig.\nRule2: If the lobster took a bike from the store, then the lobster does not burn the warehouse that is in possession of the pig.\nRule3: If at least one animal gives a magnifying glass to the donkey, then the lobster burns the warehouse of the pig.\n\nRule1 is preferred over Rule3\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe lobster parked her bike in front of the store.\nThe starfish gives a magnifier to the donkey.\n\nBased on the game state and the rules and preferences, does the lobster burn the warehouse of the pig?\nQuestion: Does the lobster burn the warehouse of the pig?",
        "idx": 369,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lobster has more than 8 friends, then the lobster does not burn the warehouse of the pig\nrule1() = friends(lobster) > 8 => not burn_warehouse(lobster, pig)\n# Rule2: If the lobster took a bike from the store, then the lobster does not burn the warehouse that is in possession of the pig\nrule2() = took_bike(lobster, store) => not burn_warehouse(lobster, pig)\n# Rule3: If at least one animal gives a magnifying glass to the donkey, then the lobster burns the warehouse of the pig.\nrule3() = give_magnifying_glass(animal, donkey) => burn_warehouse(lobster, pig)\n\n# Rule1 is preferred over Rule3\n# Rule2 is preferred over Rule3\n\n# The current state of the game is as follows\n# The lobster parked her bike in front of the store\ntook_bike(lobster, store) = True\n# The starfish gives a magnifier to the donkey.\ngive_magnifying_glass(starfish, donkey) = True\n\n# Based on the game state and the rules and preferences, does the lobster burn the warehouse of the pig?\nquestion = burn_warehouse(lobster, pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kiwi has a card whose color starts with the letter \"o\", then the kiwi holds the same number of points as the grasshopper.\nRule2: Be careful when something does not wink at the caterpillar but sings a song of victory for the bat because in this case it certainly does not hold the same number of points as the grasshopper (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe kiwi has a card that is orange in color, and does not wink at the caterpillar.\nThe kiwi sings a victory song for the bat.\n\nBased on the game state and the rules and preferences, does the kiwi hold the same number of points as the grasshopper?\nQuestion: Does the kiwi hold the same number of points as the grasshopper?",
        "idx": 370,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kiwi has a card whose color starts with the letter \"o\", then the kiwi holds the same number of points as the grasshopper\nrule1() = starts_with_color(kiwi, \"o\") => points(kiwi) == points(grasshopper)\n# Rule2: Be careful when something does not wink at the caterpillar but sings a song of victory for the bat because in this case it certainly does not hold the same number of points as the grasshopper (this may or may not be problematic).\nrule2() = not wink(kiwi, caterpillar) & sings_victory_song(kiwi, bat) => not points(kiwi) == points(grasshopper)\n\n# The current state of the game is as follows\n# The kiwi has a card that is orange in color, and does not wink at the caterpillar\nstarts_with_color(kiwi, \"o\") = True\nnot wink(kiwi, caterpillar) = True\n# The kiwi sings a victory song for the bat.\nsings_victory_song(kiwi, bat) = True\n\n# Based on the game state and the rules and preferences, does the kiwi hold the same number of points as the grasshopper?\nquestion = points(kiwi) == points(grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something gives a magnifier to the sun bear, then it proceeds to the spot that is right after the spot of the black bear, too.\n\nThe current state of the game is as follows\nThe puffin attacks the green fields whose owner is the sun bear.\n\nBased on the game state and the rules and preferences, does the puffin proceed to the spot right after the black bear?\nQuestion: Does the puffin proceed to the spot right after the black bear?",
        "idx": 371,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something gives a magnifier to the sun bear, then it proceeds to the spot that is right after the spot of the black bear, too.\nrule1() = give_magnifier(something, sun_bear) => proceed_to_spot(puffin, spot_after(black_bear))\n\n# The current state of the game is as follows\n# The puffin attacks the green fields whose owner is the sun bear.\nattacks(puffin, green_fields) & owner(green_fields, sun_bear) = True\n\n# Based on the game state and the rules and preferences, does the puffin proceed to the spot right after the black bear?\nquestion = proceed_to_spot(puffin, spot_after(black_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo has published a high-quality paper, then the buffalo raises a flag of peace for the bat.\nRule2: If the buffalo has fewer than 13 friends, then we can conclude that it raises a peace flag for the bat.\n\nThe current state of the game is as follows\nThe buffalo has 2 friends that are mean and 1 friend that is not, and recently read a high-quality paper.\n\nBased on the game state and the rules and preferences, does the buffalo raise a peace flag for the bat?\nQuestion: Does the buffalo raise a peace flag for the bat?",
        "idx": 372,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the buffalo has published a high-quality paper, then the buffalo raises a flag of peace for the bat\nrule1() = publish_paper(buffalo, high_quality) => raise_flag_of_peace(buffalo, bat)\n# Rule2: Regarding the buffalo, if it has fewer than 13 friends, then we can conclude that it raises a peace flag for the bat.\nrule2() = friends(buffalo) < 13 => raise_flag_of_peace(buffalo, bat)\n\n# The current state of the game is as follows\n# The buffalo has 2 friends that are mean and 1 friend that is not, and recently read a high-quality paper.\nfriends(buffalo) = 3\nmean_friends(buffalo) = 2\nnot_mean_friends(buffalo) = 1\nrecently_read_paper(buffalo, high_quality) = True\n\n# Based on the game state and the rules and preferences, does the buffalo raise a peace flag for the bat?\nquestion = raise_flag_of_peace(buffalo, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the viperfish killed the mayor, then the viperfish does not learn elementary resource management from the tiger.\n\nThe current state of the game is as follows\nThe viperfish assassinated the mayor.\n\nBased on the game state and the rules and preferences, does the viperfish learn the basics of resource management from the tiger?\nQuestion: Does the viperfish learn the basics of resource management from the tiger?",
        "idx": 373,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the viperfish killed the mayor, then the viperfish does not learn elementary resource management from the tiger.\nrule1() = killed(viperfish, mayor) => not learn_resource_management(viperfish, tiger)\n\n# The current state of the game is as follows\n# The viperfish assassinated the mayor.\nkilled(viperfish, mayor) = True\n\n# Based on the game state and the rules and preferences, does the viperfish learn the basics of resource management from the tiger?\nquestion = learn_resource_management(viperfish, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the gecko does not need support from the canary, then the canary does not proceed to the spot right after the cat.\nRule2: If the canary has more than four friends, then the canary proceeds to the spot that is right after the spot of the cat.\nRule1 is preferred over Rule2.\n\nThe current state of the game is as follows\nThe canary has one playful friend and three non-playful friends.\n\nBased on the game state and the rules and preferences, does the canary proceed to the spot right after the cat?\nQuestion: Does the canary proceed to the spot right after the cat?",
        "idx": 374,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the gecko does not need support from the canary, then the canary does not proceed to the spot right after the cat\nrule1() = not need_support(gecko, canary) => not proceed_to_spot(canary, right_after, cat)\n\n# Rule2: If the canary has more than four friends, then the canary proceeds to the spot that is right after the spot of the cat.\nrule2() = friends(canary) > 4 => proceed_to_spot(canary, right_after, cat)\n\n# Rule1 is preferred over Rule2\npreferred_rule() = rule1()\n\n# The current state of the game is as follows\n# The canary has one friend that is playful and three friends that are not.\nfriends(canary) = 4\nplayful_friends(canary) = 1\n\n# Based on the game state and the rules and preferences, does the canary proceed to the spot right after the cat?\nquestion = proceed_to_spot(canary, right_after, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panther has a name whose first letter is the same as the first letter of the phoenix's name, then the panther does not learn the basics of resource management from the dog.\nRule2: If the panther has something to carry apples and oranges, then the panther does not learn the basics of resource management from the dog.\nRule3: For the panther, if the belief is that the sea bass raises a peace flag for the panther and the amberjack does not prepare armor for the panther, then the panther learns the basics of resource management from the dog.\n\nRule1 is preferred over Rule3.\nRule2 is preferred over Rule3.\n\nThe current state of the game is as follows\nThe panther is named Tessa.\nThe phoenix is named Bella.\nThe sea bass raises a peace flag for the panther.\nThe amberjack does not prepare armor for the panther.\n\nBased on the game state and the rules and preferences, does the panther learn the basics of resource management from the dog?\nQuestion: Does the panther learn the basics of resource management from the dog?",
        "idx": 375,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panther has a name whose first letter is the same as the first letter of the phoenix's name, then the panther does not learn the basics of resource management from the dog\nrule1() = first_letter(name(panther)) == first_letter(name(phoenix)) => not learn_basics(panther, resource_management, dog)\n# Rule2: If the panther has something to carry apples and oranges, then the panther does not learn the basics of resource management from the dog\nrule2() = has(panther, carry_apples_oranges) => not learn_basics(panther, resource_management, dog)\n# Rule3: For the panther, if the belief is that the sea bass raises a peace flag for the panther and the amberjack does not prepare armor for the panther, then you can add \"the panther learns the basics of resource management from the dog\" to your conclusions.\nrule3() = raise_flag_of_peace(sea_bass, panther) & not prepare_armor(amberjack, panther) => learn_basics(panther, resource_management, dog)\n\n# Rule1 is preferred over Rule3\npreferred_rule(rule1, rule3)\n# Rule2 is preferred over Rule3\npreferred_rule(rule2, rule3)\n\n# The current state of the game is as follows\n# The panther is named Tessa\nname(panther) = \"Tessa\"\n# The phoenix is named Bella\nname(phoenix) = \"Bella\"\n# The sea bass raises a peace flag for the panther\nraise_flag_of_peace(sea_bass, panther) = True\n# The amberjack does not prepare armor for the panther.\nprepare_armor(amberjack, panther) = False\n\n# Based on the game state and the rules and preferences, does the panther learn the basics of resource management from the dog?\nquestion = learn_basics(panther, resource_management, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something respects the phoenix, then it does not steal five points from the moose.\n\nThe current state of the game is as follows\nThe koala respects the phoenix.\n\nBased on the game state and the rules and preferences, does the koala steal five points from the moose?\nQuestion: Does the koala steal five points from the moose?",
        "idx": 376,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something respects the phoenix, then it does not steal five points from the moose.\nrule1() = respect(something, phoenix) => not steal_points(something, 5, moose)\n\n# The current state of the game is as follows\n# The koala respects the phoenix.\nrespect(koala, phoenix) = True\n\n# Based on the game state and the rules and preferences, does the koala steal five points from the moose?\nquestion = steal_points(koala, 5, moose)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something shows all her cards to the sun bear and also holds the same number of points as the hare because in this case it will surely give a magnifying glass to the kangaroo (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe buffalo burns the warehouse of the sun bear.\nThe buffalo has a card that is red in color.\nThe buffalo holds the same number of points as the hare.\nThe buffalo dreamed of a luxury aircraft.\n\nBased on the game state and the rules and preferences, does the buffalo give a magnifier to the kangaroo?\nQuestion: Does the buffalo give a magnifying glass to the kangaroo?",
        "idx": 377,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something shows all her cards to the sun bear and also holds the same number of points as the hare because in this case it will surely give a magnifying glass to the kangaroo (this may or may not be problematic).\nrule1() = show_all_cards(something, sun_bear) & points(something) == points(hare) => give_magnifying_glass(something, kangaroo)\n\n# The current state of the game is as follows\n# The buffalo burns the warehouse of the sun bear\nburn_warehouse(buffalo, sun_bear) = True\n# The buffalo has a card that is red in color\nhas_card(buffalo, red) = True\n# The buffalo holds the same number of points as the hare\npoints(buffalo) == points(hare) = True\n# The buffalo dreamed of a luxury aircraft.\ndreamed(buffalo, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the buffalo give a magnifier to the kangaroo?\nquestion = give_magnifying_glass(buffalo, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The starfish does not remove from the board one of the pieces of the amberjack whenever at least one animal owes money to the panther\nRule2: Regarding the starfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it removes one of the pieces of the amberjack\nRule3: If the starfish purchased a time machine, then the starfish removes from the board one of the pieces of the amberjack.\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe starfish has a card that is orange in color.\nThe starfish invented a time machine.\n\nBased on the game state and the rules and preferences, does the starfish remove from the board one of the pieces of the amberjack?\nQuestion: Does the starfish remove from the board one of the pieces of the amberjack?",
        "idx": 378,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The starfish does not remove from the board one of the pieces of the amberjack whenever at least one animal owes money to the panther\nrule1() = owes_money_to(panther) => not remove_piece(starfish, amberjack)\n# Rule2: Regarding the starfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it removes one of the pieces of the amberjack\nrule2() = has_card(starfish, color) & color in rainbow_colors => remove_piece(starfish, amberjack)\n# Rule3: If the starfish purchased a time machine, then the starfish removes from the board one of the pieces of the amberjack.\nrule3() = purchased_time_machine(starfish) => remove_piece(starfish, amberjack)\n\n# Rule1 is preferred over Rule2\npreferred_rule1_over_rule2() = True\n# Rule1 is preferred over Rule3\npreferred_rule1_over_rule3() = True\n\n# The current state of the game is as follows\n# The starfish has a card that is orange in color\nhas_card(starfish, color) = True\ncolor(card, orange) = True\n# The starfish invented a time machine.\npurchased_time_machine(starfish) = True\n\n# Based on the game state and the rules and preferences, does the starfish remove from the board one of the pieces of the amberjack?\nquestion = remove_piece(starfish, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the carp has a name whose first letter is the same as the first letter of the cat's name, then the carp does not need the support of the crocodile.\n\nThe current state of the game is as follows\nThe carp dreamed of a luxury aircraft and has a yellow card.\nThe carp is named Teddy.\nThe cat is named Tango.\n\nBased on the game state and the rules and preferences, does the carp need support from the crocodile?\nQuestion: Does the carp need support from the crocodile?",
        "idx": 379,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the carp has a name whose first letter is the same as the first letter of the cat's name, then the carp does not need the support of the crocodile.\nrule1() = first_letter(name(carp)) == first_letter(name(cat)) => not need_support(carp, crocodile)\n\n# The current state of the game is as follows\n# The carp dreamed of a luxury aircraft, and has a card that is yellow in color\ndreamed(carp, luxury_aircraft) = True\nhas(card(carp), color(yellow)) = True\n# The carp is named Teddy\nname(carp) = \"Teddy\"\n# The cat is named Tango.\nname(cat) = \"Tango\"\n\n# Based on the game state and the rules and preferences, does the carp need support from the crocodile?\nquestion = need_support(carp, crocodile)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the whale, if it has a card whose color is one of the rainbow colors, then we can conclude that it holds the same number of points as the grasshopper.\nRule2: Regarding the whale, if it took a bike from the store, then we can conclude that it holds an equal number of points as the grasshopper.\n\nThe current state of the game is as follows\nThe penguin needs support from the whale.\nThe whale assassinated the mayor.\nThe whale has a card that is black in color.\nThe eagle does not remove from the board one of the pieces of the whale.\n\nBased on the game state and the rules and preferences, does the whale hold the same number of points as the grasshopper?\nQuestion: Does the whale hold the same number of points as the grasshopper?",
        "idx": 380,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the whale, if it has a card whose color is one of the rainbow colors, then we can conclude that it holds the same number of points as the grasshopper\nrule1() = color(card, rainbow_colors) => points(whale) == points(grasshopper)\n# Rule2: Regarding the whale, if it took a bike from the store, then we can conclude that it holds an equal number of points as the grasshopper.\nrule2() = took_bike(whale) => points(whale) == points(grasshopper)\n\n# The current state of the game is as follows\n# The penguin needs support from the whale\nneeds_support(penguin, whale) = True\n# The whale assassinated the mayor\nassassinated(whale, mayor) = True\n# The whale has a card that is black in color\nhas_card(whale, card) = True\ncolor(card, black) = True\n# The eagle does not remove from the board one of the pieces of the whale.\nnot remove_piece(eagle, whale) = True\n\n# Based on the game state and the rules and preferences, does the whale hold the same number of points as the grasshopper?\nquestion = points(whale) == points(grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cricket has fewer than fourteen friends, then the cricket respects the kiwi.\nRule2: If the cricket voted for the mayor, then the cricket respects the kiwi.\n\nThe current state of the game is as follows\nThe cricket assassinated the mayor.\nThe cricket has five friends.\n\nBased on the game state and the rules and preferences, does the cricket respect the kiwi?\nQuestion: Does the cricket respect the kiwi?",
        "idx": 381,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cricket has fewer than fourteen friends, then the cricket respects the kiwi\nrule1() = friends(cricket) < 14 => respect(cricket, kiwi)\n# Rule2: If the cricket voted for the mayor, then the cricket respects the kiwi.\nrule2() = voted(cricket, mayor) => respect(cricket, kiwi)\n\n# The current state of the game is as follows\n# The cricket assassinated the mayor\nassassinated(cricket, mayor) = True\n# The cricket has five friends.\nfriends(cricket) = 5\n\n# Based on the game state and the rules and preferences, does the cricket respect the kiwi?\nquestion = respect(cricket, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the kangaroo, if it has a card with a primary color, then we can conclude that it does not respect the mosquito.\nRule2: If at least one animal owes money to the penguin, then the kangaroo respects the mosquito.\nRule3: If the kangaroo has something to sit on, then the kangaroo does not respect the mosquito.\n\nRule2 is preferred over Rule1\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe kangaroo has a beer.\nThe kangaroo has a card that is red in color.\n\nBased on the game state and the rules and preferences, does the kangaroo respect the mosquito?\nQuestion: Does the kangaroo respect the mosquito?",
        "idx": 382,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kangaroo, if it has a card with a primary color, then we can conclude that it does not respect the mosquito\nrule1() = has(kangaroo, card) and color(card) in primary_colors => not respect(kangaroo, mosquito)\n# Rule2: If at least one animal owes money to the penguin, then the kangaroo respects the mosquito\nrule2() = exists(animal) such that owes(animal, money, penguin) => respect(kangaroo, mosquito)\n# Rule3: If the kangaroo has something to sit on, then the kangaroo does not respect the mosquito.\nrule3() = has(kangaroo, something_to_sit_on) => not respect(kangaroo, mosquito)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2) = True\n# Rule2 is preferred over Rule3\npreferred_rule(rule3, rule2) = True\n\n# The current state of the game is as follows\n# The kangaroo has a beer\nhas(kangaroo, beer) = True\n# The kangaroo has a card that is red in color.\nhas(kangaroo, card) = True\ncolor(card, red) = True\n\n# Based on the game state and the rules and preferences, does the kangaroo respect the mosquito?\nquestion = respect(kangaroo, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the sheep, if it has fewer than 8 friends, then we can conclude that it winks at the octopus.\nRule2: Regarding the sheep, if it has something to sit on, then we can conclude that it winks at the octopus.\n\nThe current state of the game is as follows\nThe sheep has a cutter.\nThe sheep has nine friends.\n\nBased on the game state and the rules and preferences, does the sheep wink at the octopus?\nQuestion: Does the sheep wink at the octopus?",
        "idx": 383,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the sheep, if it has fewer than 8 friends, then we can conclude that it winks at the octopus\nrule1() = friends(sheep) < 8 => wink(sheep, octopus)\n# Rule2: Regarding the sheep, if it has something to sit on, then we can conclude that it winks at the octopus.\nrule2() = has(sheep, something_to_sit_on) => wink(sheep, octopus)\n\n# The current state of the game is as follows\n# The sheep has a cutter\nhas(sheep, cutter) = True\n# The sheep has nine friends.\nfriends(sheep) = 9\n\n# Based on the game state and the rules and preferences, does the sheep wink at the octopus?\nquestion = wink(sheep, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the caterpillar, if it has more than 9 friends, then we can conclude that it does not give a magnifying glass to the amberjack.\nRule2: If the sea bass proceeds to the spot that is right after the spot of the caterpillar, then the caterpillar gives a magnifier to the amberjack.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe caterpillar has two friends that are smart and 4 friends that are not, and reduced her work hours recently.\nThe sea bass proceeds to the spot right after the caterpillar.\n\nBased on the game state and the rules and preferences, does the caterpillar give a magnifier to the amberjack?\nQuestion: Does the caterpillar give a magnifier to the amberjack?",
        "idx": 384,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the caterpillar, if it has more than 9 friends, then we can conclude that it does not give a magnifying glass to the amberjack\nrule1() = friends(caterpillar) > 9 => not give_magnifying_glass(caterpillar, amberjack)\n# Rule2: If the sea bass proceeds to the spot that is right after the spot of the caterpillar, then the caterpillar gives a magnifier to the amberjack.\nrule2() = proceed_to_spot(sea_bass, spot_after(caterpillar)) => give_magnifying_glass(caterpillar, amberjack)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule2, rule1)\n\n# The current state of the game is as follows\n# The caterpillar has two friends that are smart and 4 friends that are not, and reduced her work hours recently\nfriends(caterpillar, smart) = 2\nfriends(caterpillar, not_smart) = 4\nreduced_work_hours(caterpillar) = True\n# The sea bass proceeds to the spot right after the caterpillar.\nproceed_to_spot(sea_bass, spot_after(caterpillar)) = True\n\n# Based on the game state and the rules and preferences, does the caterpillar give a magnifier to the amberjack?\nquestion = give_magnifying_glass(caterpillar, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something sings a victory song for the spider but does not show all her cards to the meerkat, what can you certainly conclude? You can conclude that it raises a peace flag for the hippopotamus.\nRule2: The hare will not raise a flag of peace for the hippopotamus, in the case where the baboon does not respect the hare.\nRule1 is preferred over Rule2.\n\nThe current state of the game is as follows\nThe hare sings a victory song for the spider.\nThe baboon does not respect the hare.\n\nBased on the game state and the rules and preferences, does the hare raise a peace flag for the hippopotamus?\nQuestion: Does the hare raise a peace flag for the hippopotamus?",
        "idx": 385,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something sings a victory song for the spider but does not show all her cards to the meerkat, what can you certainly conclude? You can conclude that it raises a peace flag for the hippopotamus\nrule1() = sings_victory_song(something, spider) & not show_all_cards(something, meerkat) => raise_flag_of_peace(something, hippopotamus)\n\n# Rule2: The hare will not raise a flag of peace for the hippopotamus, in the case where the baboon does not respect the hare.\nrule2() = not respect(baboon, hare) => not raise_flag_of_peace(hare, hippopotamus)\n\n# Rule1 is preferred over Rule2\npreferred_rule(rule1, rule2)\n\n# The current state of the game is as follows\n# The hare sings a victory song for the spider\nsings_victory_song(hare, spider) = True\n# The baboon does not respect the hare.\nrespect(baboon, hare) = False\n\n# Based on the game state and the rules and preferences, does the hare raise a peace flag for the hippopotamus?\nquestion = raise_flag_of_peace(hare, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the canary, if it killed the mayor, then we can conclude that it prepares armor for the panther.\nRule2: If the canary has a card whose color appears in the flag of Netherlands, then the canary prepares armor for the panther.\n\nThe current state of the game is as follows\nThe canary has a card that is yellow in color.\nThe canary reduced her work hours recently.\n\nBased on the game state and the rules and preferences, does the canary prepare armor for the panther?\nQuestion: Does the canary prepare armor for the panther?",
        "idx": 386,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the canary, if it killed the mayor, then we can conclude that it prepares armor for the panther\nrule1() = killed(canary, mayor) => prepare_armor(canary, panther)\n# Rule2: If the canary has a card whose color appears in the flag of Netherlands, then the canary prepares armor for the panther.\nrule2() = has(canary, card) and color(card) in flag_colors(Netherlands) => prepare_armor(canary, panther)\n\n# The current state of the game is as follows\n# The canary has a card that is yellow in color\nhas(canary, card) = True\ncolor(card, yellow) = True\n# The canary reduced her work hours recently.\nreduced_work_hours(canary) = True\n\n# Based on the game state and the rules and preferences, does the canary prepare armor for the panther?\nquestion = prepare_armor(canary, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the squid, if it has fewer than eight friends, then we can conclude that it respects the canary.\n\nThe current state of the game is as follows\nThe squid has 1 wise friend and 3 friends that are not wise.\nThe total number of friends of the squid is 4.\n\nBased on the game state and the rules and preferences, does the squid respect the canary?\nQuestion: Does the squid respect the canary?",
        "idx": 387,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the squid, if it has fewer than eight friends, then we can conclude that it respects the canary.\nrule1() = friends(squid) < 8 => respect(squid, canary)\n\n# The current state of the game is as follows\n# The squid has 1 friend that is wise and 3 friends that are not.\nfriends(squid) = 4\nwise_friends(squid) = 1\n\n# Based on the game state and the rules and preferences, does the squid respect the canary?\nquestion = respect(squid, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tilapia has a leafy green vegetable, then the tilapia sings a song of victory for the starfish\nRule2: If the cheetah raises a peace flag for the tilapia, then the tilapia is not going to sing a victory song for the starfish.\n\nThe current state of the game is as follows\nThe cheetah raises a peace flag for the tilapia.\nThe tilapia has a cutter.\nThe tilapia stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the tilapia sing a victory song for the starfish?\nQuestion: Does the tilapia sing a victory song for the starfish?",
        "idx": 388,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the tilapia has a leafy green vegetable, then the tilapia sings a song of victory for the starfish\nrule1() = has(leafy_green_vegetable, tilapia) => sing_victory_song(tilapia, starfish)\n# Rule2: If the cheetah raises a peace flag for the tilapia, then the tilapia is not going to sing a victory song for the starfish.\nrule2() = raise_flag_of_peace(cheetah, tilapia) => not sing_victory_song(tilapia, starfish)\n\n# The current state of the game is as follows\n# The cheetah raises a peace flag for the tilapia\nraise_flag_of_peace(cheetah, tilapia) = True\n# The tilapia has a cutter\nhas(cutter, tilapia) = True\n# The tilapia stole a bike from the store.\nstole_bike(tilapia, store) = True\n\n# Based on the game state and the rules and preferences, does the tilapia sing a victory song for the starfish?\nquestion = sing_victory_song(tilapia, starfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal removes from the board one of the pieces of the kiwi, then the salmon eats the food of the eel.\n\nThe current state of the game is as follows\nThe sun bear becomes an enemy of the kiwi.\n\nBased on the game state and the rules and preferences, does the salmon eat the food of the eel?\nQuestion: Does the salmon eat the food of the eel?",
        "idx": 389,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal removes from the board one of the pieces of the kiwi, then the salmon eats the food of the eel.\nrule1() = remove_piece(animal, kiwi) => eat_food(salmon, eel)\n\n# The current state of the game is as follows\n# The sun bear becomes an enemy of the kiwi.\nbecome_enemy(sun_bear, kiwi) = True\n\n# Based on the game state and the rules and preferences, does the salmon eat the food of the eel?\nquestion = eat_food(salmon, eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the panther, if it has more than ten friends, then we can conclude that it does not become an actual enemy of the donkey.\nRule2: If the panther has a card whose color is one of the rainbow colors, then the panther becomes an enemy of the donkey.\nRule3: If the panther killed the mayor, then the panther becomes an actual enemy of the donkey.\n\nRule2 is preferred over Rule1.\nRule3 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe panther assassinated the mayor.\nThe panther has a card that is black in color.\nThe panther has thirteen friends.\nThe panther is named Blossom.\nThe wolverine is named Pablo.\n\nBased on the game state and the rules and preferences, does the panther become an enemy of the donkey?\nQuestion: Does the panther become an enemy of the donkey?",
        "idx": 390,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the panther, if it has more than ten friends, then we can conclude that it does not become an actual enemy of the donkey\nrule1() = friends(panther) > 10 => not enemy(panther, donkey)\n# Rule2: If the panther has a card whose color is one of the rainbow colors, then the panther becomes an enemy of the donkey\nrule2() = has(panther, card) and color(card) in rainbow_colors => enemy(panther, donkey)\n# Rule3: If the panther killed the mayor, then the panther becomes an actual enemy of the donkey.\nrule3() = killed(panther, mayor) => enemy(panther, donkey)\n\n# Rule2 is preferred over Rule1\npreferred_rule1() = not rule2()\n# Rule3 is preferred over Rule1\npreferred_rule2() = not rule3()\n\n# The current state of the game is as follows\n# The panther assassinated the mayor\nkilled(panther, mayor) = True\n# The panther has a card that is black in color\nhas(panther, card) = True\ncolor(card, black) = True\n# The panther has thirteen friends\nfriends(panther) = 13\n# The panther is named Blossom\nname(panther) = \"Blossom\"\n# The wolverine is named Pablo.\nname(wolverine) = \"Pablo\"\n\n# Based on the game state and the rules and preferences, does the panther become an enemy of the donkey?\nquestion = enemy(panther, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the goldfish is a fan of Chris Ronaldo, then the goldfish does not prepare armor for the pig.\nRule2: If the first letter of the name of the goldfish is the same as the first letter of the name of the snail, then the goldfish does not prepare armor for the pig.\n\nThe current state of the game is as follows\nThe goldfish hates Chris Ronaldo.\nThe name of the goldfish is Pablo.\nThe name of the snail is Paco.\n\nBased on the game state and the rules and preferences, does the goldfish prepare armor for the pig?\nQuestion: Does the goldfish prepare armor for the pig?",
        "idx": 391,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the goldfish is a fan of Chris Ronaldo, then the goldfish does not prepare armor for the pig\nrule1() = fan_of(goldfish, Chris_Ronaldo) => not prepare_armor(goldfish, pig)\n# Rule2: Regarding the goldfish, if it has a name whose first letter is the same as the first letter of the snail's name, then we can conclude that it does not prepare armor for the pig.\nrule2() = first_letter(name(goldfish)) == first_letter(name(snail)) => not prepare_armor(goldfish, pig)\n\n# The current state of the game is as follows\n# The goldfish hates Chris Ronaldo\nfan_of(goldfish, Chris_Ronaldo) = False\n# The goldfish is named Pablo\nname(goldfish) = \"Pablo\"\n# The snail is named Paco.\nname(snail) = \"Paco\"\n\n# Based on the game state and the rules and preferences, does the goldfish prepare armor for the pig?\nquestion = prepare_armor(goldfish, pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tiger needs the support of the turtle and the kangaroo does not hold the same number of points as the turtle, then, inevitably, the turtle rolls the dice for the ferret.\n\nThe current state of the game is as follows\nThe tiger needs support from the turtle.\nThe kangaroo does not offer a job to the turtle.\n\nBased on the game state and the rules and preferences, does the turtle roll the dice for the ferret?\nQuestion: Does the turtle roll the dice for the ferret?",
        "idx": 392,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the tiger needs the support of the turtle and the kangaroo does not hold the same number of points as the turtle, then, inevitably, the turtle rolls the dice for the ferret.\nrule1() = needs_support(tiger, turtle) & points(kangaroo) != points(turtle) => roll_dice(turtle, ferret)\n\n# The current state of the game is as follows\n# The tiger needs support from the turtle\nneeds_support(tiger, turtle) = True\n# The kangaroo does not offer a job to the turtle.\noffer_job_position(kangaroo, turtle) = False\n\n# Based on the game state and the rules and preferences, does the turtle roll the dice for the ferret?\nquestion = roll_dice(turtle, ferret)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal prepares armor for the grasshopper, then the doctorfish knocks down the fortress that belongs to the squirrel.\n\nThe current state of the game is as follows\nThe whale prepares armor for the grasshopper.\n\nBased on the game state and the rules and preferences, does the doctorfish knock down the fortress of the squirrel?\nQuestion: Does the doctorfish knock down the fortress of the squirrel?",
        "idx": 393,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal prepares armor for the grasshopper, then the doctorfish knocks down the fortress that belongs to the squirrel.\nrule1() = prepare_armor(animal, grasshopper) => knock_down_fortress(doctorfish, squirrel)\n\n# The current state of the game is as follows\n# The whale prepares armor for the grasshopper.\nprepare_armor(whale, grasshopper) = True\n\n# Based on the game state and the rules and preferences, does the doctorfish knock down the fortress of the squirrel?\nquestion = knock_down_fortress(doctorfish, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: For the wolverine, if the belief is that the bat holds an equal number of points as the wolverine and the sheep owes money to the wolverine, then you can add that \"the wolverine is not going to attack the green fields whose owner is the goldfish\" to your conclusions.\n\nThe current state of the game is as follows\nThe bat holds the same number of points as the wolverine.\nThe sheep owes money to the wolverine.\n\nBased on the game state and the rules and preferences, does the wolverine attack the green fields whose owner is the goldfish?\nQuestion: Does the wolverine attack the green fields whose owner is the goldfish?",
        "idx": 394,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the wolverine, if the belief is that the bat holds an equal number of points as the wolverine and the sheep owes $$$ to the wolverine, then you can add that \"the wolverine is not going to attack the green fields whose owner is the goldfish\" to your conclusions.\nrule1() = points(bat) == points(wolverine) & owes(sheep, money, wolverine) => not attack(wolverine, green_fields, goldfish)\n\n# The current state of the game is as follows\n# The bat holds the same number of points as the wolverine\npoints(bat) == points(wolverine) = True\n# The sheep owes money to the wolverine.\nowes(sheep, money, wolverine) = True\n\n# Based on the game state and the rules and preferences, does the wolverine attack the green fields whose owner is the goldfish?\nquestion = attack(wolverine, green_fields, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not attack the green fields of the hippopotamus, then it steals five of the points of the raven.\n\nThe current state of the game is as follows\nThe ferret attacks the green fields whose owner is the hippopotamus.\n\nBased on the game state and the rules and preferences, does the ferret steal five points from the raven?\nQuestion: Does the ferret steal five points from the raven?",
        "idx": 395,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not attack the green fields of the hippopotamus, then it steals five of the points of the raven.\nrule1() = not attack(ferret, green_fields, hippopotamus) => steal_points(ferret, 5, raven)\n\n# The current state of the game is as follows\n# The ferret attacks the green fields whose owner is the hippopotamus.\nattack(ferret, green_fields, hippopotamus) = True\n\n# Based on the game state and the rules and preferences, does the ferret steal five points from the raven?\nquestion = steal_points(ferret, 5, raven)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something attacks the green fields whose owner is the leopard and also gives a magnifying glass to the donkey because in this case it will surely not raise a flag of peace for the canary (this may or may not be problematic)\nRule2: If the squirrel has a card whose color appears in the flag of Japan, then the squirrel raises a peace flag for the canary\nRule3: If the squirrel took a bike from the store, then the squirrel raises a flag of peace for the canary.\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe squirrel gives a magnifier to the donkey.\nThe squirrel has a yellow card.\nThe squirrel stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the squirrel raise a peace flag for the canary?\nQuestion: Does the squirrel raise a peace flag for the canary?",
        "idx": 396,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something attacks the green fields whose owner is the leopard and also gives a magnifying glass to the donkey because in this case it will surely not raise a flag of peace for the canary (this may or may not be problematic)\nrule1() = attack(green_fields, leopard) & give(magnifying_glass, donkey) => not raise_flag_of_peace(squirrel, canary)\n# Rule2: If the squirrel has a card whose color appears in the flag of Japan, then the squirrel raises a peace flag for the canary\nrule2() = has(squirrel, card) & color(card) in flag_colors(Japan) => raise_flag_of_peace(squirrel, canary)\n# Rule3: If the squirrel took a bike from the store, then the squirrel raises a flag of peace for the canary.\nrule3() = took_bike(squirrel, store) => raise_flag_of_peace(squirrel, canary)\n\n# Rule1 is preferred over Rule2\nrule1() > rule2()\n# Rule1 is preferred over Rule3\nrule1() > rule3()\n\n# The current state of the game is as follows\n# The squirrel gives a magnifier to the donkey\ngive(magnifying_glass, donkey, squirrel) = True\n# The squirrel has a card that is yellow in color\nhas(squirrel, card) = True\ncolor(card, yellow) = True\n# The squirrel stole a bike from the store.\ntook_bike(squirrel, store) = True\n\n# Based on the game state and the rules and preferences, does the squirrel raise a peace flag for the canary?\nquestion = raise_flag_of_peace(squirrel, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion has a high salary, then the lion attacks the green fields whose owner is the phoenix.\nRule2: If the lion has a leafy green vegetable, then we can conclude that it does not attack the green fields whose owner is the phoenix.\n\nRule2 is preferred over Rule1.\n\nThe current state of the game is as follows\nThe lion got a well-paid job.\nThe lion has a black card.\nThe lion has some spinach.\n\nBased on the game state and the rules and preferences, does the lion attack the green fields whose owner is the phoenix?\nQuestion: Does the lion attack the green fields whose owner is the phoenix?",
        "idx": 397,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lion has a high salary, then the lion attacks the green fields whose owner is the phoenix\nrule1() = high_salary(lion) => attack(lion, green_fields(phoenix))\n# Rule2: Regarding the lion, if it has a leafy green vegetable, then we can conclude that it does not attack the green fields whose owner is the phoenix.\nrule2() = has(lion, leafy_green_vegetable) => not attack(lion, green_fields(phoenix))\n\n# Rule2 is preferred over Rule1\npreferred_rule() = rule2()\n\n# The current state of the game is as follows\n# The lion got a well-paid job\nhigh_salary(lion) = True\n# The lion has a card that is black in color\nhas(lion, card) and color(card) == black = True\n# The lion has some spinach\nhas(lion, spinach) = True\n\n# Based on the game state and the rules and preferences, does the lion attack the green fields whose owner is the phoenix?\nquestion = attack(lion, green_fields(phoenix))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the panda bear, if it has a name whose first letter is the same as the first letter of the cow's name, then we can conclude that it rolls the dice for the swordfish.\n\nThe current state of the game is as follows\nThe cow is named Meadow.\nThe panda bear has a red card and is named Tarzan.\n\nBased on the game state and the rules and preferences, does the panda bear roll the dice for the swordfish?\nQuestion: Does the panda bear roll the dice for the swordfish?",
        "idx": 398,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the panda bear, if it has a name whose first letter is the same as the first letter of the cow's name, then we can conclude that it rolls the dice for the swordfish.\nrule1() = first_letter(name(panda_bear)) == first_letter(name(cow)) => roll_dice(panda_bear, swordfish)\n\n# The current state of the game is as follows\n# The cow is named Meadow\nname(cow) = \"Meadow\"\n# The panda bear has a card that is red in color, and is named Tarzan.\nhas(panda_bear, card) = True\ncolor(card, red) = True\nname(panda_bear) = \"Tarzan\"\n\n# Based on the game state and the rules and preferences, does the panda bear roll the dice for the swordfish?\nquestion = roll_dice(panda_bear, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the black bear has a name whose first letter is the same as the first letter of the snail's name, then the black bear removes one of the pieces of the goldfish.\nRule2: If the black bear has a device to connect to the internet, then the black bear removes one of the pieces of the goldfish.\n\nThe current state of the game is as follows\nThe black bear has a cell phone and is named Lily.\nThe snail is named Cinnamon.\n\nBased on the game state and the rules and preferences, does the black bear remove from the board one of the pieces of the goldfish?\nQuestion: Does the black bear remove one of the pieces of the goldfish from the board?",
        "idx": 399,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the black bear has a name whose first letter is the same as the first letter of the snail's name, then the black bear removes one of the pieces of the goldfish\nrule1() = first_letter(name(black_bear)) == first_letter(name(snail)) => remove_piece(black_bear, goldfish)\n# Rule2: If the black bear has a device to connect to the internet, then the black bear removes one of the pieces of the goldfish.\nrule2() = has_device(black_bear, internet) => remove_piece(black_bear, goldfish)\n\n# The current state of the game is as follows\n# The black bear has a cell phone, and is named Lily\nhas_device(black_bear, cell_phone) = True\nname(black_bear) = \"Lily\"\n# The snail is named Cinnamon.\nname(snail) = \"Cinnamon\"\n\n# Based on the game state and the rules and preferences, does the black bear remove from the board one of the pieces of the goldfish?\nquestion = remove_piece(black_bear, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals offers a job to the meerkat, you can be certain that it will not hold an equal number of points as the spider.\n\nThe current state of the game is as follows\nThe crocodile offers a job to the meerkat.\n\nBased on the game state and the rules and preferences, does the crocodile hold the same number of points as the spider?\nQuestion: Does the crocodile hold the same number of points as the spider?",
        "idx": 400,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals offers a job to the meerkat, you can be certain that it will not hold an equal number of points as the spider.\nrule1() = offer_job(animal, meerkat) => points(animal) != points(spider)\n\n# The current state of the game is as follows\n# The crocodile offers a job to the meerkat.\noffer_job(crocodile, meerkat) = True\n\n# Based on the game state and the rules and preferences, does the crocodile hold the same number of points as the spider?\nquestion = points(crocodile) == points(spider)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal shows all her cards to the halibut, then the sea bass does not become an enemy of the kangaroo.\nRule2: If something sings a song of victory for the tiger and holds an equal number of points as the eel, then it becomes an actual enemy of the kangaroo.\n\nThe current state of the game is as follows\nThe sea bass sings a victory song for the tiger but does not hold the same number of points as the eel.\n\nBased on the game state and the rules and preferences, does the sea bass become an enemy of the kangaroo?\nQuestion: Does the sea bass become an enemy of the kangaroo?",
        "idx": 401,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal shows all her cards to the halibut, then the sea bass does not become an enemy of the kangaroo\nrule1() = show_all_cards(animal) => not enemy(sea_bass, kangaroo)\n# Rule2: If you see that something sings a song of victory for the tiger and holds an equal number of points as the eel, what can you certainly conclude? You can conclude that it also becomes an actual enemy of the kangaroo.\nrule2() = sings_victory_song(something, tiger) & points(something) == points(eel) => enemy(something, kangaroo)\n\n# The current state of the game is as follows\n# The sea bass sings a victory song for the tiger but does not hold the same number of points as the eel.\nsings_victory_song(sea_bass, tiger) = True\npoints(sea_bass) == points(eel) = False\n\n# Based on the game state and the rules and preferences, does the sea bass become an enemy of the kangaroo?\nquestion = enemy(sea_bass, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The moose needs support from the catfish whenever at least one animal burns the warehouse that is in possession of the zander.\n\nThe current state of the game is as follows\nThe sheep burns the warehouse of the zander.\n\nBased on the game state and the rules and preferences, does the moose need support from the catfish?\nQuestion: Does the moose need support from the catfish?",
        "idx": 402,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The moose needs support from the catfish whenever at least one animal burns the warehouse that is in possession of the zander.\nrule1() = burn_warehouse(sheep, zander) => need_support(moose, catfish)\n\n# The current state of the game is as follows\n# The sheep burns the warehouse of the zander.\nburn_warehouse(sheep, zander) = True\n\n# Based on the game state and the rules and preferences, does the moose need support from the catfish?\nquestion = need_support(moose, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cat owes money to the lobster, then the lobster is not going to hold the same number of points as the sun bear.\n\nThe current state of the game is as follows\nThe cat owes money to the lobster.\n\nBased on the game state and the rules and preferences, does the lobster hold the same number of points as the sun bear?\nQuestion: Does the lobster hold the same number of points as the sun bear?",
        "idx": 403,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cat owes money to the lobster, then the lobster is not going to hold the same number of points as the sun bear.\nrule1() = owes(cat, money, lobster) => not points(lobster) == points(sun_bear)\n\n# The current state of the game is as follows\n# The cat owes money to the lobster.\nowes(cat, money, lobster) = True\n\n# Based on the game state and the rules and preferences, does the lobster hold the same number of points as the sun bear?\nquestion = points(lobster) == points(sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the eel, if it has a sharp object, then we can conclude that it prepares armor for the grasshopper.\nRule2: If the eel has more than fifteen friends, then the eel prepares armor for the grasshopper.\n\nThe current state of the game is as follows\nThe eel has a cell phone.\nThe eel has four friends that are kind and one friend that is not.\n\nBased on the game state and the rules and preferences, does the eel prepare armor for the grasshopper?\nQuestion: Does the eel prepare armor for the grasshopper?",
        "idx": 404,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the eel, if it has a sharp object, then we can conclude that it prepares armor for the grasshopper\nrule1() = has(eel, sharp_object) => prepare_armor(eel, grasshopper)\n# Rule2: If the eel has more than fifteen friends, then the eel prepares armor for the grasshopper.\nrule2() = friends(eel) > 15 => prepare_armor(eel, grasshopper)\n\n# The current state of the game is as follows\n# The eel has a cell phone\nhas(eel, cell_phone) = True\n# The eel has four friends that are kind and one friend that is not.\nfriends(eel) = 4\n\n# Based on the game state and the rules and preferences, does the eel prepare armor for the grasshopper?\nquestion = prepare_armor(eel, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals knows the defense plan of the cow, you can be certain that it will also remove from the board one of the pieces of the baboon.\n\nThe current state of the game is as follows\nThe meerkat knows the defensive plans of the cow.\n\nBased on the game state and the rules and preferences, does the meerkat remove from the board one of the pieces of the baboon?\nQuestion: Does the meerkat remove from the board one of the pieces of the baboon?",
        "idx": 405,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals knows the defense plan of the cow, you can be certain that it will also remove from the board one of the pieces of the baboon.\nrule1() = knows_defense_plan(animal) => remove_piece(animal, baboon)\n\n# The current state of the game is as follows\n# The meerkat knows the defensive plans of the cow.\nknows_defense_plan(meerkat) = True\n\n# Based on the game state and the rules and preferences, does the meerkat remove from the board one of the pieces of the baboon?\nquestion = remove_piece(meerkat, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the carp has a musical instrument, then the carp prepares armor for the hare\nRule2: If the carp has a name whose first letter is the same as the first letter of the tiger's name, then the carp prepares armor for the hare\nRule3: If the hummingbird steals five points from the carp, then the carp is not going to prepare armor for the hare.\nRule1 is preferred over Rule3\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe carp is named Tessa\nThe hummingbird steals five points from the carp\nThe tiger is named Bella.\n\nBased on the game state and the rules and preferences, does the carp prepare armor for the hare?\nQuestion: Does the carp prepare armor for the hare?",
        "idx": 406,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the carp has a musical instrument, then the carp prepares armor for the hare\nrule1() = has(carp, musical_instrument) => prepare_armor(carp, hare)\n# Rule2: If the carp has a name whose first letter is the same as the first letter of the tiger's name, then the carp prepares armor for the hare\nrule2() = first_letter(name(carp)) == first_letter(name(tiger)) => prepare_armor(carp, hare)\n# Rule3: If the hummingbird steals five points from the carp, then the carp is not going to prepare armor for the hare.\nrule3() = steal_points(hummingbird, carp, 5) => not prepare_armor(carp, hare)\n\n# Rule1 is preferred over Rule3\n# Rule2 is preferred over Rule3\n\n# The current state of the game is as follows\n# The carp is named Tessa\nname(carp) = \"Tessa\"\n# The hummingbird steals five points from the carp\nsteal_points(hummingbird, carp, 5) = True\n# The tiger is named Bella.\nname(tiger) = \"Bella\"\n\n# Based on the game state and the rules and preferences, does the carp prepare armor for the hare?\nquestion = prepare_armor(carp, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the aardvark has something to carry apples and oranges, then the aardvark holds an equal number of points as the buffalo.\nRule2: Regarding the aardvark, if it has a card whose color is one of the rainbow colors, then we can conclude that it holds an equal number of points as the buffalo.\n\nThe current state of the game is as follows\nThe aardvark has a card that is white in color.\nThe aardvark has a cell phone.\n\nBased on the game state and the rules and preferences, does the aardvark hold the same number of points as the buffalo?\nQuestion: Does the aardvark hold the same number of points as the buffalo?",
        "idx": 407,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the aardvark has something to carry apples and oranges, then the aardvark holds an equal number of points as the buffalo\nrule1() = has(aardvark, carry(apples)) & has(aardvark, carry(oranges)) => points(aardvark) == points(buffalo)\n# Rule2: Regarding the aardvark, if it has a card whose color is one of the rainbow colors, then we can conclude that it holds an equal number of points as the buffalo.\nrule2() = has(aardvark, card) & color(card) in rainbow_colors => points(aardvark) == points(buffalo)\n\n# The current state of the game is as follows\n# The aardvark has a card that is white in color\nhas(aardvark, card) = True\ncolor(card, white) = True\n# The aardvark has a cell phone.\nhas(aardvark, cell_phone) = True\n\n# Based on the game state and the rules and preferences, does the aardvark hold the same number of points as the buffalo?\nquestion = points(aardvark) == points(buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals shows her cards (all of them) to the koala, you can be certain that it will also remove from the board one of the pieces of the black bear.\n\nThe current state of the game is as follows\nThe elephant shows all her cards to the koala.\n\nBased on the game state and the rules and preferences, does the elephant remove from the board one of the pieces of the black bear?\nQuestion: Does the elephant remove from the board one of the pieces of the black bear?",
        "idx": 408,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals shows her cards (all of them) to the koala, you can be certain that it will also remove from the board one of the pieces of the black bear.\nrule1() = show_cards(animal) to koala => remove_piece(animal, black_bear)\n\n# The current state of the game is as follows\n# The elephant shows all her cards to the koala.\nshow_cards(elephant) to koala = True\n\n# Based on the game state and the rules and preferences, does the elephant remove from the board one of the pieces of the black bear?\nquestion = remove_piece(elephant, black_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The eel does not learn elementary resource management from the bat whenever at least one animal winks at the viperfish.\n\nThe current state of the game is as follows\nThe mosquito winks at the viperfish.\n\nBased on the game state and the rules and preferences, does the eel learn the basics of resource management from the bat?\nQuestion: Does the eel learn the basics of resource management from the bat?",
        "idx": 409,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The eel does not learn elementary resource management from the bat whenever at least one animal winks at the viperfish.\nrule1() = wink(animal, viperfish) => not learn_resource_management(eel, bat)\n\n# The current state of the game is as follows\n# The mosquito winks at the viperfish.\nwink(mosquito, viperfish) = True\n\n# Based on the game state and the rules and preferences, does the eel learn the basics of resource management from the bat?\nquestion = learn_resource_management(eel, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something steals five points from the cat and also sings a song of victory for the crocodile because in this case it will surely raise a peace flag for the catfish (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe lion has a tablet.\nThe lion is named Milo.\nThe lion steals five points from the cat.\nThe oscar is named Tango.\nThe lion does not sing a victory song for the crocodile.\n\nBased on the game state and the rules and preferences, does the lion raise a peace flag for the catfish?\nQuestion: Does the lion raise a peace flag for the catfish?",
        "idx": 410,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something steals five points from the cat and also sings a song of victory for the crocodile because in this case it will surely raise a peace flag for the catfish (this may or may not be problematic).\nrule1() = steals_points(lion, 5, cat) & sings_victory_song(lion, crocodile) => raise_flag_of_peace(lion, catfish)\n\n# The current state of the game is as follows\n# The lion has a tablet\nhas_tablet(lion) = True\n# The lion is named Milo\nname(lion) = \"Milo\"\n# The lion steals five points from the cat\nsteals_points(lion, 5, cat) = True\n# The oscar is named Tango\nname(oscar) = \"Tango\"\n# The lion does not sing a victory song for the crocodile.\nsings_victory_song(lion, crocodile) = False\n\n# Based on the game state and the rules and preferences, does the lion raise a peace flag for the catfish?\nquestion = raise_flag_of_peace(lion, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: For the sea bass, if the belief is that the catfish owes money to the sea bass and the tiger owes money to the sea bass, then you can add \"the sea bass knows the defense plan of the gecko\" to your conclusions.\n\nThe current state of the game is as follows\nThe catfish owes money to the sea bass.\nThe tiger owes money to the sea bass.\n\nBased on the game state and the rules and preferences, does the sea bass know the defensive plans of the gecko?\nQuestion: Does the sea bass know the defensive plans of the gecko?",
        "idx": 411,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the sea bass, if the belief is that the catfish owes money to the sea bass and the tiger owes money to the sea bass, then you can add \"the sea bass knows the defense plan of the gecko\" to your conclusions.\nrule1() = owes(catfish, money, sea_bass) & owes(tiger, money, sea_bass) => knows(sea_bass, defense_plan, gecko)\n\n# The current state of the game is as follows\n# The catfish owes money to the sea bass\nowes(catfish, money, sea_bass) = True\n# The tiger owes money to the sea bass.\nowes(tiger, money, sea_bass) = True\n\n# Based on the game state and the rules and preferences, does the sea bass know the defensive plans of the gecko?\nquestion = knows(sea_bass, defense_plan, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the dog, if it has more than 7 friends, then we can conclude that it does not learn elementary resource management from the hippopotamus.\n\nThe current state of the game is as follows\nThe dog has 12 friends.\n\nBased on the game state and the rules and preferences, does the dog learn the basics of resource management from the hippopotamus?\nQuestion: Does the dog learn the basics of resource management from the hippopotamus?",
        "idx": 412,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the dog, if it has more than 7 friends, then we can conclude that it does not learn elementary resource management from the hippopotamus.\nrule1() = friends(dog) > 7 => not learn_resource_management(dog, hippopotamus)\n\n# The current state of the game is as follows\n# The dog has 12 friends.\nfriends(dog) = 12\n\n# Based on the game state and the rules and preferences, does the dog learn the basics of resource management from the hippopotamus?\nquestion = learn_resource_management(dog, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the rabbit has a name whose first letter is the same as the first letter of the caterpillar's name, then the rabbit becomes an actual enemy of the dog.\nRule2: Regarding the rabbit, if it has a musical instrument, then we can conclude that it becomes an enemy of the dog.\n\nThe current state of the game is as follows\nThe caterpillar is named Casper.\nThe rabbit attacks the green fields whose owner is the cat.\nThe rabbit has a love seat sofa and does not learn the basics of resource management from the sheep.\nThe rabbit is named Bella.\n\nBased on the game state and the rules and preferences, does the rabbit become an enemy of the dog?\nQuestion: Does the rabbit become an enemy of the dog?",
        "idx": 413,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the rabbit has a name whose first letter is the same as the first letter of the caterpillar's name, then the rabbit becomes an actual enemy of the dog\nrule1() = first_letter(name(rabbit)) == first_letter(name(caterpillar)) => enemy(rabbit, dog)\n# Rule2: Regarding the rabbit, if it has a musical instrument, then we can conclude that it becomes an enemy of the dog.\nrule2() = has(rabbit, musical_instrument) => enemy(rabbit, dog)\n\n# The current state of the game is as follows\n# The caterpillar is named Casper\nname(caterpillar) = \"Casper\"\n# The rabbit attacks the green fields whose owner is the cat\nattacks(rabbit, green_fields, cat) = True\n# The rabbit has a love seat sofa, and does not learn the basics of resource management from the sheep\nhas(rabbit, love_seat_sofa) = True\nlearn_basics(rabbit, resource_management, sheep) = False\n# The rabbit is named Bella.\nname(rabbit) = \"Bella\"\n\n# Based on the game state and the rules and preferences, does the rabbit become an enemy of the dog?\nquestion = enemy(rabbit, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The squirrel knows the defensive plans of the kangaroo whenever at least one animal offers a job position to the black bear.\n\nThe current state of the game is as follows\nThe raven offers a job to the black bear.\n\nBased on the game state and the rules and preferences, does the squirrel know the defensive plans of the kangaroo?\nQuestion: Does the squirrel know the defensive plans of the kangaroo?",
        "idx": 414,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The squirrel knows the defensive plans of the kangaroo whenever at least one animal offers a job position to the black bear.\nrule1() = offer_job_position(animal, black_bear) => knows_defensive_plans(squirrel, kangaroo)\n\n# The current state of the game is as follows\n# The raven offers a job to the black bear.\noffer_job_position(raven, black_bear) = True\n\n# Based on the game state and the rules and preferences, does the squirrel know the defensive plans of the kangaroo?\nquestion = knows_defensive_plans(squirrel, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panther has a name whose first letter is the same as the first letter of the leopard's name, then the panther does not learn elementary resource management from the jellyfish.\n\nThe current state of the game is as follows\nThe leopard is named Peddi.\nThe panther is named Pashmak.\n\nBased on the game state and the rules and preferences, does the panther learn the basics of resource management from the jellyfish?\nQuestion: Does the panther learn the basics of resource management from the jellyfish?",
        "idx": 415,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panther has a name whose first letter is the same as the first letter of the leopard's name, then the panther does not learn elementary resource management from the jellyfish.\nrule1() = first_letter(name(panther)) == first_letter(name(leopard)) => not learn_resource_management(panther, jellyfish)\n\n# The current state of the game is as follows\n# The leopard is named Peddi\nname(leopard) = \"Peddi\"\n# The panther is named Pashmak.\nname(panther) = \"Pashmak\"\n\n# Based on the game state and the rules and preferences, does the panther learn the basics of resource management from the jellyfish?\nquestion = learn_resource_management(panther, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose has a name whose first letter is the same as the first letter of the sheep's name, then the moose shows her cards (all of them) to the squirrel.\nRule2: If the moose has a card with a primary color, then the moose does not show all her cards to the squirrel.\n\nThe current state of the game is as follows\nThe moose has a card that is orange in color, and is named Tessa.\nThe sheep is named Mojo.\n\nBased on the game state and the rules and preferences, does the moose show all her cards to the squirrel?\nQuestion: Does the moose show all her cards to the squirrel?",
        "idx": 416,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the moose has a name whose first letter is the same as the first letter of the sheep's name, then the moose shows her cards (all of them) to the squirrel\nrule1() = first_letter(name(moose)) == first_letter(name(sheep)) => show_cards(moose, squirrel)\n# Rule2: If the moose has a card with a primary color, then the moose does not show all her cards to the squirrel.\nrule2() = has_primary_color_card(moose) => not show_cards(moose, squirrel)\n\n# The current state of the game is as follows\n# The moose has a card that is orange in color, and is named Tessa\nhas_card(moose, orange) = True\nname(moose) = \"Tessa\"\n# The sheep is named Mojo.\nname(sheep) = \"Mojo\"\n\n# Based on the game state and the rules and preferences, does the moose show all her cards to the squirrel?\nquestion = show_cards(moose, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals owes money to the aardvark, you can be certain that it will also owe money to the blobfish.\n\nThe current state of the game is as follows\nThe sea bass owes money to the aardvark.\n\nBased on the game state and the rules and preferences, does the sea bass owe money to the blobfish?\nQuestion: Does the sea bass owe money to the blobfish?",
        "idx": 417,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals owes $$$ to the aardvark, you can be certain that it will also owe money to the blobfish.\nrule1() = owes(animal, money, aardvark) => owes(animal, money, blobfish)\n\n# The current state of the game is as follows\n# The sea bass owes money to the aardvark.\nowes(sea_bass, money, aardvark) = True\n\n# Based on the game state and the rules and preferences, does the sea bass owe money to the blobfish?\nquestion = owes(sea_bass, money, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cat has a card with a primary color, then the cat does not hold an equal number of points as the carp.\nRule2: If the cat has difficulty finding food, then we can conclude that it does not hold an equal number of points as the carp.\n\nThe current state of the game is as follows\nThe cat has a card that is white in color.\nThe cat struggles to find food.\n\nBased on the game state and the rules and preferences, does the cat hold the same number of points as the carp?\nQuestion: Does the cat hold the same number of points as the carp?",
        "idx": 418,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cat has a card with a primary color, then the cat does not hold an equal number of points as the carp\nrule1() = has_primary_color(card, cat) => not equal_points(cat, carp)\n# Rule2: Regarding the cat, if it has difficulty to find food, then we can conclude that it does not hold an equal number of points as the carp.\nrule2() = difficulty_finding_food(cat) => not equal_points(cat, carp)\n\n# The current state of the game is as follows\n# The cat has a card that is white in color\nhas_primary_color(card, cat) = True\ncolor(card, white) = True\n# The cat struggles to find food.\ndifficulty_finding_food(cat) = True\n\n# Based on the game state and the rules and preferences, does the cat hold the same number of points as the carp?\nquestion = equal_points(cat, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the panda bear's name, then we can conclude that it burns the warehouse of the puffin.\n\nThe current state of the game is as follows\nThe buffalo assassinated the mayor.\nThe buffalo has a card that is blue in color.\nThe name of the buffalo is Cinnamon.\nThe name of the panda bear is Tessa.\n\nBased on the game state and the rules and preferences, does the buffalo burn the warehouse of the puffin?\nQuestion: Does the buffalo burn the warehouse of the puffin?",
        "idx": 419,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the panda bear's name, then we can conclude that it burns the warehouse of the puffin.\nrule1() = first_letter(name(buffalo)) == first_letter(name(panda_bear)) => burn_warehouse(buffalo, puffin)\n\n# The current state of the game is as follows\n# The buffalo assassinated the mayor\nassassinated(buffalo, mayor) = True\n# The buffalo has a card that is blue in color\nhas_card(buffalo, blue) = True\n# The buffalo is named Cinnamon\nname(buffalo) = \"Cinnamon\"\n# The panda bear is named Tessa.\nname(panda_bear) = \"Tessa\"\n\n# Based on the game state and the rules and preferences, does the buffalo burn the warehouse of the puffin?\nquestion = burn_warehouse(buffalo, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The aardvark unquestionably proceeds to the spot right after the dog, in the case where the jellyfish sings a song of victory for the aardvark.\n\nThe current state of the game is as follows\nThe jellyfish sings a victory song for the aardvark.\n\nBased on the game state and the rules and preferences, does the aardvark proceed to the spot right after the dog?\nQuestion: Does the aardvark proceed to the spot right after the dog?",
        "idx": 420,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The aardvark unquestionably proceeds to the spot right after the dog, in the case where the jellyfish sings a song of victory for the aardvark.\nrule1() = sings_song_of_victory(jellyfish, aardvark) => proceed_to_spot_after(aardvark, dog)\n\n# The current state of the game is as follows\n# The jellyfish sings a victory song for the aardvark.\nsings_song_of_victory(jellyfish, aardvark) = True\n\n# Based on the game state and the rules and preferences, does the aardvark proceed to the spot right after the dog?\nquestion = proceed_to_spot_after(aardvark, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal owes money to the penguin, then the panda bear does not know the defensive plans of the wolverine.\n\nThe current state of the game is as follows\nThe cricket owes money to the penguin.\nThe panda bear reduced her work hours recently.\n\nBased on the game state and the rules and preferences, does the panda bear know the defensive plans of the wolverine?\nQuestion: Does the panda bear know the defensive plans of the wolverine?",
        "idx": 421,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal owes money to the penguin, then the panda bear does not know the defensive plans of the wolverine.\nrule1() = owes_money(animal, penguin) => not know_defensive_plans(panda_bear, wolverine)\n\n# The current state of the game is as follows\n# The cricket owes money to the penguin\nowes_money(cricket, penguin) = True\n# The panda bear reduced her work hours recently.\nreduced_work_hours(panda_bear) = True\n\n# Based on the game state and the rules and preferences, does the panda bear know the defensive plans of the wolverine?\nquestion = know_defensive_plans(panda_bear, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cheetah killed the mayor, then the cheetah removes from the board one of the pieces of the whale\nRule2: If the turtle respects the cheetah and the buffalo does not become an actual enemy of the cheetah, then the cheetah will never remove one of the pieces of the whale.\n\nThe current state of the game is as follows\nThe cheetah has a low-income job.\nThe turtle does not give a magnifier to the cheetah.\n\nBased on the game state and the rules and preferences, does the cheetah remove from the board one of the pieces of the whale?\nQuestion: Does the cheetah remove from the board one of the pieces of the whale?",
        "idx": 422,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cheetah killed the mayor, then the cheetah removes from the board one of the pieces of the whale\nrule1() = killed(cheetah, mayor) => remove_piece(cheetah, whale)\n# Rule2: If the turtle respects the cheetah and the buffalo does not become an actual enemy of the cheetah, then the cheetah will never remove one of the pieces of the whale.\nrule2() = respect(turtle, cheetah) & not become_enemy(buffalo, cheetah) => not remove_piece(cheetah, whale)\n\n# The current state of the game is as follows\n# The cheetah has a low-income job\njob(cheetah, low_income) = True\n# The turtle does not give a magnifier to the cheetah.\ngive_item(turtle, magnifier, cheetah) = False\n\n# Based on the game state and the rules and preferences, does the cheetah remove from the board one of the pieces of the whale?\nquestion = remove_piece(cheetah, whale)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the hippopotamus, then it offers a job position to the catfish, too.\n\nThe current state of the game is as follows\nThe goldfish rolls the dice for the hippopotamus.\n\nBased on the game state and the rules and preferences, does the goldfish offer a job to the catfish?\nQuestion: Does the goldfish offer a job to the catfish?",
        "idx": 423,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something rolls the dice for the hippopotamus, then it offers a job position to the catfish, too.\nrule1() = rolls_dice(something, hippopotamus) => offer_job_position(something, catfish)\n\n# The current state of the game is as follows\n# The goldfish rolls the dice for the hippopotamus.\nrolls_dice(goldfish, hippopotamus) = True\n\n# Based on the game state and the rules and preferences, does the goldfish offer a job to the catfish?\nquestion = offer_job_position(goldfish, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: For the squid, if the belief is that the eagle eats the food of the squid and the panther rolls the dice for the squid, then you can add that \"the squid is not going to knock down the fortress that belongs to the baboon\" to your conclusions.\n\nThe current state of the game is as follows\nThe eagle eats the food of the squid.\nThe panther rolls the dice for the squid.\nThe squid struggles to find food.\n\nBased on the game state and the rules and preferences, does the squid knock down the fortress of the baboon?\nQuestion: Does the squid knock down the fortress of the baboon?",
        "idx": 424,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the squid, if the belief is that the eagle eats the food of the squid and the panther rolls the dice for the squid, then you can add that \"the squid is not going to knock down the fortress that belongs to the baboon\" to your conclusions.\nrule1() = eat_food(eagle, squid) & roll_dice(panther, squid) => not knock_down_fortress(squid, baboon)\n\n# The current state of the game is as follows\n# The eagle eats the food of the squid\neat_food(eagle, squid) = True\n# The panther rolls the dice for the squid\nroll_dice(panther, squid) = True\n# The squid struggles to find food.\nstruggle_to_find_food(squid) = True\n\n# Based on the game state and the rules and preferences, does the squid knock down the fortress of the baboon?\nquestion = knock_down_fortress(squid, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lobster attacks the green fields of the koala and the blobfish does not burn the warehouse of the koala, then, inevitably, the koala shows all her cards to the mosquito.\n\nThe current state of the game is as follows\nThe blobfish does not burn the warehouse of the koala.\nThe lobster does not attack the green fields whose owner is the koala.\n\nBased on the game state and the rules and preferences, does the koala show all her cards to the mosquito?\nQuestion: Does the koala show all her cards to the mosquito?",
        "idx": 425,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lobster attacks the green fields of the koala and the blobfish does not burn the warehouse of the koala, then, inevitably, the koala shows all her cards to the mosquito.\nrule1() = attack(lobster, green_fields(koala)) & not burn_warehouse(blobfish, koala) => show_all_cards(koala, mosquito)\n\n# The current state of the game is as follows\n# The blobfish does not burn the warehouse of the koala\nburn_warehouse(blobfish, koala) = False\n# The lobster does not attack the green fields whose owner is the koala.\nattack(lobster, green_fields(koala)) = False\n\n# Based on the game state and the rules and preferences, does the koala show all her cards to the mosquito?\nquestion = show_all_cards(koala, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eagle does not knock down the fortress that belongs to the mosquito, then the mosquito gives a magnifier to the panther.\n\nThe current state of the game is as follows\nThe eagle does not knock down the fortress of the mosquito.\n\nBased on the game state and the rules and preferences, does the mosquito give a magnifier to the panther?\nQuestion: Does the mosquito give a magnifier to the panther?",
        "idx": 426,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eagle does not knock down the fortress that belongs to the mosquito, then the mosquito gives a magnifier to the panther.\nrule1() = not knock_down_fortress(eagle, mosquito) => give_item(mosquito, magnifier, panther)\n\n# The current state of the game is as follows\n# The eagle does not knock down the fortress of the mosquito.\nknock_down_fortress(eagle, mosquito) = False\n\n# Based on the game state and the rules and preferences, does the mosquito give a magnifier to the panther?\nquestion = give_item(mosquito, magnifier, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not hold an equal number of points as the kangaroo, then it does not eat the food that belongs to the koala.\n\nThe current state of the game is as follows\nThe carp does not hold the same number of points as the kangaroo.\n\nBased on the game state and the rules and preferences, does the carp eat the food of the koala?\nQuestion: Does the carp eat the food of the koala?",
        "idx": 427,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not hold an equal number of points as the kangaroo, then it does not eat the food that belongs to the koala.\nrule1() = not hold_same_points(something, kangaroo) => not eat_food(something, koala)\n\n# The current state of the game is as follows\n# The carp does not hold the same number of points as the kangaroo.\nhold_same_points(carp, kangaroo) = False\n\n# Based on the game state and the rules and preferences, does the carp eat the food of the koala?\nquestion = eat_food(carp, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something does not raise a peace flag for the kiwi and also does not give a magnifying glass to the eagle, what can you certainly conclude? You can conclude that it also holds the same number of points as the cricket.\n\nThe current state of the game is as follows\nThe buffalo does not become an enemy of the eagle and does not raise a peace flag for the kiwi.\n\nBased on the game state and the rules and preferences, does the buffalo hold the same number of points as the cricket?\nQuestion: Does the buffalo hold the same number of points as the cricket?",
        "idx": 428,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not raise a peace flag for the kiwi and also does not give a magnifying glass to the eagle, what can you certainly conclude? You can conclude that it also holds the same number of points as the cricket.\nrule1() = not raise_flag_of_peace(something, kiwi) & not give_magnifying_glass(something, eagle) => points(something) == points(cricket)\n\n# The current state of the game is as follows\n# The buffalo does not become an enemy of the eagle, and does not raise a peace flag for the kiwi.\nnot become_enemy(buffalo, eagle) = True\nnot raise_flag_of_peace(buffalo, kiwi) = True\n\n# Based on the game state and the rules and preferences, does the buffalo hold the same number of points as the cricket?\nquestion = points(buffalo) == points(cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The squid unquestionably respects the elephant, in the case where the goldfish does not attack the green fields of the squid.\n\nThe current state of the game is as follows\nThe grizzly bear is named Blossom.\nThe squid is named Bella.\nThe goldfish does not attack the green fields whose owner is the squid.\n\nBased on the game state and the rules and preferences, does the squid respect the elephant?\nQuestion: Does the squid respect the elephant?",
        "idx": 429,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The squid unquestionably respects the elephant, in the case where the goldfish does not attack the green fields of the squid.\nrule1() = not attack(goldfish, green_fields(squid)) => respect(squid, elephant)\n\n# The current state of the game is as follows\n# The grizzly bear is named Blossom\nname(grizzly_bear) = \"Blossom\"\n# The squid is named Bella\nname(squid) = \"Bella\"\n# The goldfish does not attack the green fields whose owner is the squid.\nnot attack(goldfish, green_fields(squid)) = True\n\n# Based on the game state and the rules and preferences, does the squid respect the elephant?\nquestion = respect(squid, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cat does not know the defense plan of the zander whenever at least one animal raises a peace flag for the hippopotamus.\n\nThe current state of the game is as follows\nThe lion raises a peace flag for the hippopotamus.\n\nBased on the game state and the rules and preferences, does the cat know the defensive plans of the zander?\nQuestion: Does the cat know the defensive plans of the zander?",
        "idx": 430,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cat does not know the defense plan of the zander whenever at least one animal raises a peace flag for the hippopotamus.\nrule1() = raise_flag_of_peace(animal, hippopotamus) => not know_defense_plan(cat, zander)\n\n# The current state of the game is as follows\n# The lion raises a peace flag for the hippopotamus.\nraise_flag_of_peace(lion, hippopotamus) = True\n\n# Based on the game state and the rules and preferences, does the cat know the defensive plans of the zander?\nquestion = know_defense_plan(cat, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the puffin, if it has a leafy green vegetable, then we can conclude that it does not eat the food that belongs to the doctorfish\nRule2: Regarding the puffin, if it has a name whose first letter is the same as the first letter of the carp's name, then we can conclude that it does not eat the food of the doctorfish\nRule3: If the puffin created a time machine, then the puffin eats the food that belongs to the doctorfish.\n\nRule1 is preferred over Rule3\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe puffin assassinated the mayor\nThe puffin has a cappuccino\nThe puffin is named Chickpea\n\nBased on the game state and the rules and preferences, does the puffin eat the food of the doctorfish?\nQuestion: Does the puffin eat the food of the doctorfish?",
        "idx": 431,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the puffin, if it has a leafy green vegetable, then we can conclude that it does not eat the food that belongs to the doctorfish\nrule1() = has(puffin, leafy_green_vegetable) => not eat_food(puffin, doctorfish)\n# Rule2: Regarding the puffin, if it has a name whose first letter is the same as the first letter of the carp's name, then we can conclude that it does not eat the food of the doctorfish\nrule2() = first_letter(name(puffin)) == first_letter(name(carp)) => not eat_food(puffin, doctorfish)\n# Rule3: If the puffin created a time machine, then the puffin eats the food that belongs to the doctorfish.\nrule3() = created_time_machine(puffin) => eat_food(puffin, doctorfish)\n\n# Rule1 is preferred over Rule3\npreferred_rule1_over_rule3() = True\n# Rule2 is preferred over Rule3\npreferred_rule2_over_rule3() = True\n\n# The current state of the game is as follows\n# The puffin assassinated the mayor\nassassinated(puffin, mayor) = True\n# The puffin has a cappuccino\nhas(puffin, cappuccino) = True\n# The puffin is named Chickpea\nname(puffin) = \"Chickpea\"\n\n# Based on the game state and the rules and preferences, does the puffin eat the food of the doctorfish?\nquestion = eat_food(puffin, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the raven has a sharp object, then the raven becomes an actual enemy of the tilapia.\n\nThe current state of the game is as follows\nThe raven has a blade.\n\nBased on the game state and the rules and preferences, does the raven become an enemy of the tilapia?\nQuestion: Does the raven become an enemy of the tilapia?",
        "idx": 432,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the raven has a sharp object, then the raven becomes an actual enemy of the tilapia.\nrule1() = has(raven, sharp_object) => enemy(raven, tilapia)\n\n# The current state of the game is as follows\n# The raven has a blade.\nhas(raven, blade) = True\n\n# Based on the game state and the rules and preferences, does the raven become an enemy of the tilapia?\nquestion = enemy(raven, tilapia)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something owes money to the raven and winks at the cheetah, what can you certainly conclude? You can conclude that it does not sing a victory song for the ferret.\n\nThe current state of the game is as follows\nThe grizzly bear owes money to the raven.\nThe grizzly bear winks at the cheetah.\nThe penguin knows the defensive plans of the crocodile.\n\nBased on the game state and the rules and preferences, does the grizzly bear sing a victory song for the ferret?\nQuestion: Does the grizzly bear sing a victory song for the ferret?",
        "idx": 433,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something owes money to the raven and winks at the cheetah, what can you certainly conclude? You can conclude that it does not sing a victory song for the ferret.\nrule1() = owes(something, money, raven) & winks(something, cheetah) => not sing_victory_song(something, ferret)\n\n# The current state of the game is as follows\n# The grizzly bear owes money to the raven\nowes(grizzly_bear, money, raven) = True\n# The grizzly bear winks at the cheetah\nwinks(grizzly_bear, cheetah) = True\n# The penguin knows the defensive plans of the crocodile.\nknows(penguin, defensive_plans, crocodile) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear sing a victory song for the ferret?\nquestion = sing_victory_song(grizzly_bear, ferret)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that one of the animals does not prepare armor for the leopard, you can be certain that it will wink at the kudu without a doubt.\nRule2: If the caterpillar prepares armor for the penguin and the canary does not owe money to the penguin, then the penguin will never wink at the kudu.\n\nThe current state of the game is as follows\nThe canary owes money to the penguin.\nThe penguin prepares armor for the leopard.\n\nBased on the game state and the rules and preferences, does the penguin wink at the kudu?\nQuestion: Does the penguin wink at the kudu?",
        "idx": 434,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not prepare armor for the leopard, you can be certain that it will wink at the kudu without a doubt\nrule1() = not prepare_armor(animal, leopard) => wink(animal, kudu)\n# Rule2: If the caterpillar prepares armor for the penguin and the canary does not owe money to the penguin, then the penguin will never wink at the kudu.\nrule2() = prepare_armor(caterpillar, penguin) & not owe_money(canary, penguin) => not wink(penguin, kudu)\n\n# The current state of the game is as follows\n# The canary owes money to the penguin\nowe_money(canary, penguin) = True\n# The penguin prepares armor for the leopard.\nprepare_armor(penguin, leopard) = True\n\n# Based on the game state and the rules and preferences, does the penguin wink at the kudu?\nquestion = wink(penguin, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the cheetah, if it has something to sit on, then we can conclude that it needs support from the moose\nRule2: If the cheetah has a device to connect to the internet, then the cheetah needs the support of the moose\nRule3: Regarding the cheetah, if it has fewer than 15 friends, then we can conclude that it does not need support from the moose.\n\nRule1 is preferred over Rule3\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cheetah has a couch and has eight friends.\nThe cheetah has some romaine lettuce.\n\nBased on the game state and the rules and preferences, does the cheetah need support from the moose?\nQuestion: Does the cheetah need support from the moose?",
        "idx": 435,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cheetah, if it has something to sit on, then we can conclude that it needs support from the moose\nrule1() = has(cheetah, something_to_sit_on) => need_support(cheetah, moose)\n# Rule2: If the cheetah has a device to connect to the internet, then the cheetah needs the support of the moose\nrule2() = has(cheetah, device_to_connect_internet) => need_support(cheetah, moose)\n# Rule3: Regarding the cheetah, if it has fewer than 15 friends, then we can conclude that it does not need support from the moose.\nrule3() = friends(cheetah) < 15 => not need_support(cheetah, moose)\n\n# Rule1 is preferred over Rule3\n# Rule2 is preferred over Rule3\n\n# The current state of the game is as follows\n# The cheetah has a couch, and has eight friends\nhas(cheetah, couch) = True\nfriends(cheetah) = 8\n# The cheetah has some romaine lettuce.\nhas(cheetah, romaine_lettuce) = True\n\n# Based on the game state and the rules and preferences, does the cheetah need support from the moose?\nquestion = need_support(cheetah, moose)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the raven, if it has fewer than twelve friends, then we can conclude that it does not raise a peace flag for the elephant.\n\nThe current state of the game is as follows\nThe raven has three friends that are kind and two friends that are not.\n\nBased on the game state and the rules and preferences, does the raven raise a peace flag for the elephant?\nQuestion: Does the raven raise a peace flag for the elephant?",
        "idx": 436,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the raven, if it has fewer than twelve friends, then we can conclude that it does not raise a peace flag for the elephant.\nrule1() = friends(raven) < 12 => not raise_flag_of_peace(raven, elephant)\n\n# The current state of the game is as follows\n# The raven has three friends that are kind and 2 friends that are not.\nfriends(raven, kind) = 3\nfriends(raven, not_kind) = 2\n\n# Based on the game state and the rules and preferences, does the raven raise a peace flag for the elephant?\nquestion = raise_flag_of_peace(raven, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cow holds the same number of points as the penguin, then the penguin winks at the cat.\n\nThe current state of the game is as follows\nThe cow knocks down the fortress of the penguin.\n\nBased on the game state and the rules and preferences, does the penguin wink at the cat?\nQuestion: Does the penguin wink at the cat?",
        "idx": 437,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cow holds the same number of points as the penguin, then the penguin winks at the cat.\nrule1() = points(cow) == points(penguin) => wink(penguin, cat)\n\n# The current state of the game is as follows\n# The cow knocks down the fortress of the penguin.\nknock_down(cow, fortress, penguin) = True\n\n# Based on the game state and the rules and preferences, does the penguin wink at the cat?\nquestion = wink(penguin, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the sun bear, if it has a card whose color is one of the rainbow colors, then we can conclude that it gives a magnifying glass to the buffalo.\nRule2: Regarding the sun bear, if it has a high salary, then we can conclude that it gives a magnifier to the buffalo.\n\nThe current state of the game is as follows\nThe sun bear got a well-paid job.\nThe sun bear has a card that is black in color.\nThe sun bear has a knife.\n\nBased on the game state and the rules and preferences, does the sun bear give a magnifier to the buffalo?\nQuestion: Does the sun bear give a magnifier to the buffalo?",
        "idx": 438,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the sun bear, if it has a card whose color is one of the rainbow colors, then we can conclude that it gives a magnifying glass to the buffalo\nrule1() = has_card(sun_bear) & color(card(sun_bear)) in rainbow_colors => give_magnifying_glass(sun_bear, buffalo)\n# Rule2: Regarding the sun bear, if it has a high salary, then we can conclude that it gives a magnifier to the buffalo.\nrule2() = has_high_salary(sun_bear) => give_magnifier(sun_bear, buffalo)\n\n# The current state of the game is as follows\n# The sun bear got a well-paid job\nhas_high_salary(sun_bear) = True\n# The sun bear has a card that is black in color\nhas_card(sun_bear) = True\ncolor(card(sun_bear), black) = True\n# The sun bear has a knife.\nhas_knife(sun_bear) = True\n\n# Based on the game state and the rules and preferences, does the sun bear give a magnifier to the buffalo?\nquestion = give_magnifier(sun_bear, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kiwi burns the warehouse of the gecko and the pig burns the warehouse that is in possession of the gecko, then the gecko will not respect the raven.\n\nThe current state of the game is as follows\nThe kiwi burns the warehouse of the gecko.\nThe pig burns the warehouse of the gecko.\n\nBased on the game state and the rules and preferences, does the gecko respect the raven?\nQuestion: Does the gecko respect the raven?",
        "idx": 439,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kiwi burns the warehouse of the gecko and the pig burns the warehouse that is in possession of the gecko, then the gecko will not respect the raven.\nrule1() = burn_warehouse(kiwi, gecko) & burn_warehouse(pig, warehouse(gecko)) => not respect(gecko, raven)\n\n# The current state of the game is as follows\n# The kiwi burns the warehouse of the gecko\nburn_warehouse(kiwi, gecko) = True\n# The pig burns the warehouse of the gecko.\nburn_warehouse(pig, warehouse(gecko)) = True\n\n# Based on the game state and the rules and preferences, does the gecko respect the raven?\nquestion = respect(gecko, raven)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal learns elementary resource management from the halibut, then the ferret removes from the board one of the pieces of the sheep.\n\nThe current state of the game is as follows\nThe koala steals five points from the halibut.\n\nBased on the game state and the rules and preferences, does the ferret remove from the board one of the pieces of the sheep?\nQuestion: Does the ferret remove from the board one of the pieces of the sheep?",
        "idx": 440,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal learns elementary resource management from the halibut, then the ferret removes from the board one of the pieces of the sheep.\nrule1() = learns_resource_management(animal, halibut) => remove_piece(ferret, sheep)\n\n# The current state of the game is as follows\n# The koala steals five points from the halibut.\nsteals_points(koala, halibut, 5) = True\n\n# Based on the game state and the rules and preferences, does the ferret remove from the board one of the pieces of the sheep?\nquestion = remove_piece(ferret, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the rabbit, if it has more than 11 friends, then we can conclude that it needs the support of the lobster.\nRule2: Regarding the rabbit, if it owns a luxury aircraft, then we can conclude that it needs the support of the lobster.\nRule3: If the rabbit has a card with a primary color, then the rabbit does not need the support of the lobster.\nRule1 is preferred over Rule3.\nRule2 is preferred over Rule3.\n\nThe current state of the game is as follows\nThe rabbit has a card that is red in color.\nThe rabbit has nine friends.\nThe rabbit purchased a luxury aircraft.\n\nBased on the game state and the rules and preferences, does the rabbit need support from the lobster?\nQuestion: Does the rabbit need support from the lobster?",
        "idx": 441,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the rabbit, if it has more than 11 friends, then we can conclude that it needs the support of the lobster\nrule1() = friends(rabbit) > 11 => needs_support(rabbit, lobster)\n# Rule2: Regarding the rabbit, if it owns a luxury aircraft, then we can conclude that it needs the support of the lobster\nrule2() = owns(rabbit, luxury_aircraft) => needs_support(rabbit, lobster)\n# Rule3: If the rabbit has a card with a primary color, then the rabbit does not need the support of the lobster.\nrule3() = has(rabbit, card) and primary_color(card) => not needs_support(rabbit, lobster)\n\n# Rule1 is preferred over Rule3\npreferred_rule1_over_rule3() = True\n# Rule2 is preferred over Rule3\npreferred_rule2_over_rule3() = True\n\n# The current state of the game is as follows\n# The rabbit has a card that is red in color\nhas(rabbit, card) = True\ncolor(card, red) = True\n# The rabbit has nine friends\nfriends(rabbit) = 9\n# The rabbit purchased a luxury aircraft\nowns(rabbit, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the rabbit need support from the lobster?\nquestion = needs_support(rabbit, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the wolverine has fewer than 13 friends, then the wolverine does not roll the dice for the canary.\n\nThe current state of the game is as follows\nThe wolverine has 10 friends.\n\nBased on the game state and the rules and preferences, does the wolverine roll the dice for the canary?\nQuestion: Does the wolverine roll the dice for the canary?",
        "idx": 442,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the wolverine has fewer than 13 friends, then the wolverine does not roll the dice for the canary.\nrule1() = friends(wolverine) < 13 => not roll_dice(wolverine, canary)\n\n# The current state of the game is as follows\n# The wolverine has 10 friends.\nfriends(wolverine) = 10\n\n# Based on the game state and the rules and preferences, does the wolverine roll the dice for the canary?\nquestion = roll_dice(wolverine, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something knocks down the fortress that belongs to the leopard and steals five of the points of the donkey, what can you certainly conclude? You can conclude that it also shows all her cards to the panther.\n\nThe current state of the game is as follows\nThe mosquito steals five points from the donkey.\nThe mosquito does not knock down the fortress of the leopard.\n\nBased on the game state and the rules and preferences, does the mosquito show all her cards to the panther?\nQuestion: Does the mosquito show all her cards to the panther?",
        "idx": 443,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something knocks down the fortress that belongs to the leopard and steals five of the points of the donkey, what can you certainly conclude? You can conclude that it also shows all her cards to the panther.\nrule1() = knock_down_fortress(something, leopard) & steal_points(something, donkey, 5) => show_all_cards(mosquito, panther)\n\n# The current state of the game is as follows\n# The mosquito steals five points from the donkey\nsteal_points(mosquito, donkey, 5) = True\n# The mosquito does not knock down the fortress of the leopard.\nknock_down_fortress(mosquito, leopard) = False\n\n# Based on the game state and the rules and preferences, does the mosquito show all her cards to the panther?\nquestion = show_all_cards(mosquito, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something does not burn the warehouse of the spider and also does not remove one of the pieces of the grizzly bear, what can you certainly conclude? You can conclude that it also eats the food of the grasshopper.\n\nThe current state of the game is as follows\nThe starfish does not burn the warehouse of the spider, and does not remove from the board one of the pieces of the grizzly bear.\n\nBased on the game state and the rules and preferences, does the starfish eat the food of the grasshopper?\nQuestion: Does the starfish eat the food of the grasshopper?",
        "idx": 444,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not burn the warehouse of the spider and also does not remove one of the pieces of the grizzly bear, what can you certainly conclude? You can conclude that it also eats the food of the grasshopper.\nrule1() = not burn_warehouse(something, spider) & not remove_piece(something, grizzly_bear) => eat_food(something, grasshopper)\n\n# The current state of the game is as follows\n# The starfish does not burn the warehouse of the spider, and does not remove from the board one of the pieces of the grizzly bear.\nburn_warehouse(starfish, spider) = False\nremove_piece(starfish, grizzly_bear) = False\n\n# Based on the game state and the rules and preferences, does the starfish eat the food of the grasshopper?\nquestion = eat_food(starfish, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panda bear has something to sit on, then the panda bear does not sing a victory song for the zander.\nRule2: If the panda bear has more than 1 friend, then it does not sing a victory song for the zander.\n\nThe current state of the game is as follows\nThe panda bear has a tablet.\nThe panda bear has four friends that are smart and four friends that are not.\n\nBased on the game state and the rules and preferences, does the panda bear sing a victory song for the zander?\nQuestion: Does the panda bear sing a victory song for the zander?",
        "idx": 445,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panda bear has something to sit on, then the panda bear does not sing a victory song for the zander\nrule1() = has(panda_bear, something_to_sit_on) => not sing_victory_song(panda_bear, zander)\n# Rule2: Regarding the panda bear, if it has more than 1 friend, then we can conclude that it does not sing a victory song for the zander.\nrule2() = friends(panda_bear) > 1 => not sing_victory_song(panda_bear, zander)\n\n# The current state of the game is as follows\n# The panda bear has a tablet\nhas(panda_bear, tablet) = True\n# The panda bear has four friends that are smart and four friends that are not.\nfriends(panda_bear) = 8\nsmart_friends(panda_bear) = 4\nnot_smart_friends(panda_bear) = 4\n\n# Based on the game state and the rules and preferences, does the panda bear sing a victory song for the zander?\nquestion = sing_victory_song(panda_bear, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sheep has more than ten friends, then the sheep winks at the kangaroo\nRule2: If something raises a peace flag for the rabbit but does not attack the green fields whose owner is the kiwi, then it does not wink at the kangaroo\nRule3: If the sheep has a sharp object, then it winks at the kangaroo.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe sheep attacks the green fields whose owner is the kiwi and raises a peace flag for the rabbit.\nThe sheep has 2 friends that are bald and 4 friends that are not.\nThe sheep has a flute.\n\nBased on the game state and the rules and preferences, does the sheep wink at the kangaroo?\nQuestion: Does the sheep wink at the kangaroo?",
        "idx": 446,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sheep has more than ten friends, then the sheep winks at the kangaroo\nrule1() = friends_count(sheep) > 10 => wink(sheep, kangaroo)\n# Rule2: If you see that something raises a peace flag for the rabbit but does not attack the green fields whose owner is the kiwi, what can you certainly conclude? You can conclude that it does not wink at the kangaroo\nrule2() = raise_flag_of_peace(something, rabbit) & not attack(something, green_fields, kiwi) => not wink(something, kangaroo)\n# Rule3: Regarding the sheep, if it has a sharp object, then we can conclude that it winks at the kangaroo.\nrule3() = has(sheep, sharp_object) => wink(sheep, kangaroo)\n\n# Rule1 is preferred over Rule2\npreferred_rule1_over_rule2() = True\n# Rule3 is preferred over Rule2\npreferred_rule3_over_rule2() = True\n\n# The current state of the game is as follows\n# The sheep attacks the green fields whose owner is the kiwi, and raises a peace flag for the rabbit\nattack(sheep, green_fields, kiwi) = True\nraise_flag_of_peace(sheep, rabbit) = True\n# The sheep has 2 friends that are bald and 4 friends that are not\nfriends_count(sheep, bald) = 2\nfriends_count(sheep, not bald) = 4\n# The sheep has a flute.\nhas(sheep, flute) = True\n\n# Based on the game state and the rules and preferences, does the sheep wink at the kangaroo?\nquestion = wink(sheep, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tilapia voted for the mayor, then the tilapia eats the food of the parrot\nRule2: If the tilapia has a sharp object, then we can conclude that it eats the food of the parrot.\n\nThe current state of the game is as follows\nThe kudu sings a victory song for the tilapia.\nThe tilapia assassinated the mayor and has a blade.\n\nBased on the game state and the rules and preferences, does the tilapia eat the food of the parrot?\nQuestion: Does the tilapia eat the food of the parrot?",
        "idx": 447,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the tilapia voted for the mayor, then the tilapia eats the food of the parrot\nrule1() = voted_for(tilapia, mayor) => eat_food(tilapia, parrot)\n# Rule2: Regarding the tilapia, if it has a sharp object, then we can conclude that it eats the food of the parrot.\nrule2() = has_sharp_object(tilapia) => eat_food(tilapia, parrot)\n\n# The current state of the game is as follows\n# The kudu sings a victory song for the tilapia\nsings_victory_song(kudu, tilapia) = True\n# The tilapia assassinated the mayor, and has a blade.\nassassinated(tilapia, mayor) = True\nhas_blade(tilapia) = True\n\n# Based on the game state and the rules and preferences, does the tilapia eat the food of the parrot?\nquestion = eat_food(tilapia, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the mosquito, if it has more than 2 friends, then we can conclude that it winks at the buffalo.\nRule2: If the phoenix winks at the mosquito, then the mosquito is not going to wink at the buffalo.\n\nThe current state of the game is as follows\nThe phoenix winks at the mosquito.\n\nBased on the game state and the rules and preferences, does the mosquito wink at the buffalo?\nQuestion: Does the mosquito wink at the buffalo?",
        "idx": 448,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the mosquito, if it has more than 2 friends, then we can conclude that it winks at the buffalo\nrule1() = friends(mosquito) > 2 => wink(mosquito, buffalo)\n# Rule2: If the phoenix winks at the mosquito, then the mosquito is not going to wink at the buffalo.\nrule2() = wink(phoenix, mosquito) => not wink(mosquito, buffalo)\n\n# The current state of the game is as follows\n# The phoenix winks at the mosquito.\nwink(phoenix, mosquito) = True\n\n# Based on the game state and the rules and preferences, does the mosquito wink at the buffalo?\nquestion = wink(mosquito, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the oscar has a device to connect to the internet, then the oscar steals five points from the sun bear.\n\nThe current state of the game is as follows\nThe oscar has a green tea.\n\nBased on the game state and the rules and preferences, does the oscar steal five points from the sun bear?\nQuestion: Does the oscar steal five points from the sun bear?",
        "idx": 449,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the oscar has a device to connect to the internet, then the oscar steals five points from the sun bear.\nrule1() = has_device(oscar, internet) => steal_points(oscar, 5, sun_bear)\n\n# The current state of the game is as follows\n# The oscar has a green tea.\nhas(oscar, green_tea) = True\n\n# Based on the game state and the rules and preferences, does the oscar steal five points from the sun bear?\nquestion = steal_points(oscar, 5, sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The grizzly bear unquestionably burns the warehouse that is in possession of the snail, in the case where the goldfish raises a flag of peace for the grizzly bear.\n\nThe current state of the game is as follows\nThe goldfish raises a peace flag for the grizzly bear.\n\nBased on the game state and the rules and preferences, does the grizzly bear burn the warehouse of the snail?\nQuestion: Does the grizzly bear burn the warehouse of the snail?",
        "idx": 450,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The grizzly bear unquestionably burns the warehouse that is in possession of the snail, in the case where the goldfish raises a flag of peace for the grizzly bear.\nrule1() = raise_flag_of_peace(goldfish, grizzly_bear) => burn_warehouse(grizzly_bear, snail)\n\n# The current state of the game is as follows\n# The goldfish raises a peace flag for the grizzly bear.\nraise_flag_of_peace(goldfish, grizzly_bear) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear burn the warehouse of the snail?\nquestion = burn_warehouse(grizzly_bear, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: For the bat, if the belief is that the lion does not prepare armor for the bat and the canary does not need support from the bat, then you can add \"the bat does not owe money to the polar bear\" to your conclusions.\n\nThe current state of the game is as follows\nThe canary does not need support from the bat.\nThe lion does not prepare armor for the bat.\n\nBased on the game state and the rules and preferences, does the bat owe money to the polar bear?\nQuestion: Does the bat owe money to the polar bear?",
        "idx": 451,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the bat, if the belief is that the lion does not prepare armor for the bat and the canary does not need support from the bat, then you can add \"the bat does not owe $$$ to the polar bear\" to your conclusions.\nrule1() = not prepare_armor(lion, bat) & not need_support(canary, bat) => not owe(bat, money, polar_bear)\n\n# The current state of the game is as follows\n# The canary does not need support from the bat\nneed_support(canary, bat) = False\n# The lion does not prepare armor for the bat.\nprepare_armor(lion, bat) = False\n\n# Based on the game state and the rules and preferences, does the bat owe money to the polar bear?\nquestion = owe(bat, money, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus does not prepare armor for the lobster but the moose prepares armor for the lobster, then the lobster winks at the viperfish unavoidably.\n\nThe current state of the game is as follows\nThe lobster reduced her work hours recently.\nThe moose prepares armor for the lobster.\nThe octopus prepares armor for the lobster.\n\nBased on the game state and the rules and preferences, does the lobster wink at the viperfish?\nQuestion: Does the lobster wink at the viperfish?",
        "idx": 452,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the octopus does not prepare armor for the lobster but the moose prepares armor for the lobster, then the lobster winks at the viperfish unavoidably.\nrule1() = not prepare_armor(octopus, lobster) & prepare_armor(moose, lobster) => wink(lobster, viperfish)\n\n# The current state of the game is as follows\n# The lobster reduced her work hours recently\nreduced_work_hours(lobster) = True\n# The moose prepares armor for the lobster\nprepare_armor(moose, lobster) = True\n# The octopus prepares armor for the lobster.\nprepare_armor(octopus, lobster) = True\n\n# Based on the game state and the rules and preferences, does the lobster wink at the viperfish?\nquestion = wink(lobster, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The elephant unquestionably prepares armor for the hare, in the case where the blobfish sings a victory song for the elephant.\n\nThe current state of the game is as follows\nThe blobfish sings a victory song for the elephant.\nThe eel raises a peace flag for the halibut.\n\nBased on the game state and the rules and preferences, does the elephant prepare armor for the hare?\nQuestion: Does the elephant prepare armor for the hare?",
        "idx": 453,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The elephant unquestionably prepares armor for the hare, in the case where the blobfish sings a victory song for the elephant.\nrule1() = sings_victory_song(blobfish, elephant) => prepare_armor(elephant, hare)\n\n# The current state of the game is as follows\n# The blobfish sings a victory song for the elephant\nsings_victory_song(blobfish, elephant) = True\n# The eel raises a peace flag for the halibut.\nraise_flag_of_peace(eel, halibut) = True\n\n# Based on the game state and the rules and preferences, does the elephant prepare armor for the hare?\nquestion = prepare_armor(elephant, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The gecko does not sing a victory song for the goldfish whenever at least one animal eats the food of the buffalo.\n\nThe current state of the game is as follows\nThe aardvark eats the food of the buffalo.\n\nBased on the game state and the rules and preferences, does the gecko sing a victory song for the goldfish?\nQuestion: Does the gecko sing a victory song for the goldfish?",
        "idx": 454,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The gecko does not sing a victory song for the goldfish whenever at least one animal eats the food of the buffalo.\nrule1() = eats_food(animal, buffalo) => not sing_victory_song(gecko, goldfish)\n\n# The current state of the game is as follows\n# The aardvark eats the food of the buffalo.\neats_food(aardvark, buffalo) = True\n\n# Based on the game state and the rules and preferences, does the gecko sing a victory song for the goldfish?\nquestion = sing_victory_song(gecko, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The sun bear knocks down the fortress that belongs to the phoenix whenever at least one animal rolls the dice for the wolverine.\n\nThe current state of the game is as follows\nThe eel steals five points from the wolverine.\n\nBased on the game state and the rules and preferences, does the sun bear knock down the fortress of the phoenix?\nQuestion: Does the sun bear knock down the fortress of the phoenix?",
        "idx": 455,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The sun bear knocks down the fortress that belongs to the phoenix whenever at least one animal rolls the dice for the wolverine.\nrule1() = roll_dice(animal) for animal in players if animal == wolverine => knock_down_fortress(sun_bear, phoenix)\n\n# The current state of the game is as follows\n# The eel steals five points from the wolverine.\nsteal_points(eel, wolverine, 5) = True\n\n# Based on the game state and the rules and preferences, does the sun bear knock down the fortress of the phoenix?\nquestion = knock_down_fortress(sun_bear, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the crocodile, if it has fewer than six friends, then we can conclude that it needs support from the panda bear.\nRule2: Regarding the crocodile, if it has a musical instrument, then we can conclude that it needs the support of the panda bear.\n\nThe current state of the game is as follows\nThe crocodile has 15 friends.\nThe crocodile has a violin.\n\nBased on the game state and the rules and preferences, does the crocodile need support from the panda bear?\nQuestion: Does the crocodile need support from the panda bear?",
        "idx": 456,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the crocodile, if it has fewer than six friends, then we can conclude that it needs support from the panda bear\nrule1() = friends(crocodile) < 6 => need_support(crocodile, panda_bear)\n# Rule2: Regarding the crocodile, if it has a musical instrument, then we can conclude that it needs the support of the panda bear.\nrule2() = has(crocodile, musical_instrument) => need_support(crocodile, panda_bear)\n\n# The current state of the game is as follows\n# The crocodile has 15 friends\nfriends(crocodile) = 15\n# The crocodile has a violin.\nhas(crocodile, violin) = True\n\n# Based on the game state and the rules and preferences, does the crocodile need support from the panda bear?\nquestion = need_support(crocodile, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The pig knocks down the fortress of the koala whenever at least one animal knows the defense plan of the sun bear.\nRule2: If the pig has more than 9 friends, then the pig does not knock down the fortress of the koala.\n\nThe current state of the game is as follows\nThe pig has fifteen friends.\n\nBased on the game state and the rules and preferences, does the pig knock down the fortress of the koala?\nQuestion: Does the pig knock down the fortress of the koala?",
        "idx": 457,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The pig knocks down the fortress of the koala whenever at least one animal knows the defense plan of the sun bear\nrule1() = knows_defense_plan(animal) & knows_defense_plan(sun_bear) => knock_down_fortress(pig, koala)\n# Rule2: If the pig has more than 9 friends, then the pig does not knock down the fortress of the koala.\nrule2() = friends(pig) > 9 => not knock_down_fortress(pig, koala)\n\n# The current state of the game is as follows\n# The pig has fifteen friends.\nfriends(pig) = 15\n\n# Based on the game state and the rules and preferences, does the pig knock down the fortress of the koala?\nquestion = knock_down_fortress(pig, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: For the ferret, if the belief is that the viperfish does not raise a peace flag for the ferret but the kudu respects the ferret, then you can add \"the ferret gives a magnifier to the leopard\" to your conclusions.\n\nThe current state of the game is as follows\nThe kudu needs support from the ferret.\nThe viperfish does not raise a peace flag for the ferret.\n\nBased on the game state and the rules and preferences, does the ferret give a magnifier to the leopard?\nQuestion: Does the ferret give a magnifier to the leopard?",
        "idx": 458,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the ferret, if the belief is that the viperfish does not raise a peace flag for the ferret but the kudu respects the ferret, then you can add \"the ferret gives a magnifier to the leopard\" to your conclusions.\nrule1() = not raise_flag_of_peace(viperfish, ferret) & respect(kudu, ferret) => give_item(ferret, magnifier, leopard)\n\n# The current state of the game is as follows\n# The kudu needs support from the ferret\nneeds_support(kudu, ferret) = True\n# The viperfish does not raise a peace flag for the ferret.\nraise_flag_of_peace(viperfish, ferret) = False\n\n# Based on the game state and the rules and preferences, does the ferret give a magnifier to the leopard?\nquestion = give_item(ferret, magnifier, leopard)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the whale, if it has fewer than 7 friends, then we can conclude that it shows all her cards to the wolverine.\nRule2: Regarding the whale, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it shows all her cards to the wolverine.\n\nThe current state of the game is as follows\nThe whale has 6 friends and has a card that is green in color.\n\nBased on the game state and the rules and preferences, does the whale show all her cards to the wolverine?\nQuestion: Does the whale show all her cards to the wolverine?",
        "idx": 459,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the whale, if it has fewer than 7 friends, then we can conclude that it shows all her cards to the wolverine\nrule1() = friends(whale) < 7 => show_cards(whale, wolverine)\n# Rule2: Regarding the whale, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it shows all her cards to the wolverine.\nrule2() = has(whale, card) and color(card) in flag_colors(Netherlands) => show_cards(whale, wolverine)\n\n# The current state of the game is as follows\n# The whale has 6 friends, and has a card that is green in color.\nfriends(whale) = 6\nhas(whale, card) = True\ncolor(card, green) = True\n\n# Based on the game state and the rules and preferences, does the whale show all her cards to the wolverine?\nquestion = show_cards(whale, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the snail has a sharp object, then the snail does not proceed to the spot that is right after the spot of the leopard.\nRule2: If the snail has fewer than 10 friends, then we can conclude that it does not proceed to the spot right after the leopard.\n\nThe current state of the game is as follows\nThe snail has a beer.\nThe snail has a white card.\nThe snail has two friends.\nThe snail invented a time machine.\n\nBased on the game state and the rules and preferences, does the snail proceed to the spot right after the leopard?\nQuestion: Does the snail proceed to the spot right after the leopard?",
        "idx": 460,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the snail has a sharp object, then the snail does not proceed to the spot that is right after the spot of the leopard\nrule1() = has(snail, sharp_object) => not proceed_to_spot(snail, right_after(leopard))\n# Rule2: Regarding the snail, if it has fewer than 10 friends, then we can conclude that it does not proceed to the spot right after the leopard.\nrule2() = friends(snail) < 10 => not proceed_to_spot(snail, right_after(leopard))\n\n# The current state of the game is as follows\n# The snail has a beer\nhas(snail, beer) = True\n# The snail has a card that is white in color\nhas(snail, card) = True\ncolor(card, white) = True\n# The snail has two friends\nfriends(snail) = 2\n# The snail invented a time machine\ninvented(snail, time_machine) = True\n\n# Based on the game state and the rules and preferences, does the snail proceed to the spot right after the leopard?\nquestion = proceed_to_spot(snail, right_after(leopard))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the amberjack, if it has something to sit on, then we can conclude that it does not learn the basics of resource management from the bat.\nRule2: If the amberjack has a card whose color is one of the rainbow colors, then the amberjack learns the basics of resource management from the bat.\nRule3: If the amberjack works more hours than before, then the amberjack does not learn elementary resource management from the bat.\nRule4: Regarding the amberjack, if it has more than 5 friends, then we can conclude that it learns elementary resource management from the bat.\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule4\nRule3 is preferred over Rule2\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe amberjack has 2 friends, one of which is adventurous and the other is not.\nThe amberjack has a card that is white in color, and recently read a high-quality paper.\n\nBased on the game state and the rules and preferences, does the amberjack learn the basics of resource management from the bat?\nQuestion: Does the amberjack learn the basics of resource management from the bat?",
        "idx": 461,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the amberjack, if it has something to sit on, then we can conclude that it does not learn the basics of resource management from the bat\nrule1() = has_something_to_sit_on(amberjack) => not learn_basics_of_resource_management(amberjack, bat)\n# Rule2: If the amberjack has a card whose color is one of the rainbow colors, then the amberjack learns the basics of resource management from the bat\nrule2() = has(amberjack, card) and color(card) in rainbow_colors => learn_basics_of_resource_management(amberjack, bat)\n# Rule3: If the amberjack works more hours than before, then the amberjack does not learn elementary resource management from the bat\nrule3() = works_more_hours(amberjack) => not learn_elementary_resource_management(amberjack, bat)\n# Rule4: Regarding the amberjack, if it has more than 5 friends, then we can conclude that it learns elementary resource management from the bat.\nrule4() = friends(amberjack) > 5 => learn_elementary_resource_management(amberjack, bat)\n\n# Rule1 is preferred over Rule2\npreference1() = rule1() > rule2()\n# Rule1 is preferred over Rule4\npreference2() = rule1() > rule4()\n# Rule3 is preferred over Rule2\npreference3() = rule3() > rule2()\n# Rule3 is preferred over Rule4\npreference4() = rule3() > rule4()\n\n# The current state of the game is as follows\n# The amberjack has 1 friend that is adventurous and one friend that is not\nfriends(amberjack) = 2\n# The amberjack has a card that is white in color, and recently read a high-quality paper.\nhas(amberjack, card) = True\ncolor(card, white) = True\nrecently_read(amberjack, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the amberjack learn the basics of resource management from the bat?\nquestion = learn_basics_of_resource_management(amberjack, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish has something to carry apples and oranges, then the catfish does not know the defensive plans of the viperfish.\nRule2: Regarding the catfish, if it has something to carry apples and oranges, then we can conclude that it knows the defensive plans of the viperfish.\nRule3: If the catfish has a name whose first letter is the same as the first letter of the dog's name, then the catfish knows the defensive plans of the viperfish.\n\nRule2 is preferred over Rule1\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe catfish has a knapsack, has a tablet, and is named Chickpea.\nThe catfish recently read a high-quality paper.\nThe dog is named Casper.\n\nBased on the game state and the rules and preferences, does the catfish know the defensive plans of the viperfish?\nQuestion: Does the catfish know the defensive plans of the viperfish?",
        "idx": 462,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the catfish has something to carry apples and oranges, then the catfish does not know the defensive plans of the viperfish\nrule1() = has(catfish, knapsack) & has(catfish, tablet) => not know_defensive_plans(catfish, viperfish)\n# Rule2: Regarding the catfish, if it has something to carry apples and oranges, then we can conclude that it knows the defensive plans of the viperfish\nrule2() = has(catfish, knapsack) & has(catfish, tablet) => know_defensive_plans(catfish, viperfish)\n# Rule3: If the catfish has a name whose first letter is the same as the first letter of the dog's name, then the catfish knows the defensive plans of the viperfish.\nrule3() = first_letter(catfish.name) == first_letter(dog.name) => know_defensive_plans(catfish, viperfish)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2)\n# Rule3 is preferred over Rule1\npreferred_rule(rule1, rule3)\n\n# The current state of the game is as follows\n# The catfish has a knapsack, has a tablet, and is named Chickpea\nhas(catfish, knapsack) = True\nhas(catfish, tablet) = True\ncatfish.name = \"Chickpea\"\n# The catfish recently read a high-quality paper\nrecently_read(catfish, \"high-quality paper\") = True\n# The dog is named Casper.\ndog.name = \"Casper\"\n\n# Based on the game state and the rules and preferences, does the catfish know the defensive plans of the viperfish?\nquestion = know_defensive_plans(catfish, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something attacks the green fields whose owner is the cockroach and also owes money to the canary because in this case it will surely not raise a flag of peace for the raven (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe cricket attacks the green fields whose owner is the cockroach.\nThe cricket owes money to the canary.\n\nBased on the game state and the rules and preferences, does the cricket raise a peace flag for the raven?\nQuestion: Does the cricket raise a peace flag for the raven?",
        "idx": 463,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something attacks the green fields whose owner is the cockroach and also owes $$$ to the canary because in this case it will surely not raise a flag of peace for the raven (this may or may not be problematic).\nrule1() = attack(cricket, green_fields, cockroach) & owes(cricket, money, canary) => not raise_flag_of_peace(cricket, raven)\n\n# The current state of the game is as follows\n# The cricket attacks the green fields whose owner is the cockroach\nattack(cricket, green_fields, cockroach) = True\n# The cricket owes money to the canary.\nowes(cricket, money, canary) = True\n\n# Based on the game state and the rules and preferences, does the cricket raise a peace flag for the raven?\nquestion = raise_flag_of_peace(cricket, raven)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the raven has a card whose color starts with the letter \"n\", then the raven burns the warehouse of the grizzly bear.\nRule2: If the raven has fewer than 4 friends, then the raven burns the warehouse of the grizzly bear.\n\nThe current state of the game is as follows\nThe raven has 5 friends, and has a card that is yellow in color.\n\nBased on the game state and the rules and preferences, does the raven burn the warehouse of the grizzly bear?\nQuestion: Does the raven burn the warehouse of the grizzly bear?",
        "idx": 464,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the raven has a card whose color starts with the letter \"n\", then the raven burns the warehouse of the grizzly bear\nrule1() = starts_with_color_letter(raven, \"n\", card) => burn_warehouse(raven, grizzly_bear)\n# Rule2: If the raven has fewer than 4 friends, then the raven burns the warehouse of the grizzly bear.\nrule2() = friends(raven) < 4 => burn_warehouse(raven, grizzly_bear)\n\n# The current state of the game is as follows\n# The raven has 5 friends, and has a card that is yellow in color.\nfriends(raven) = 5\ncolor(card, yellow) = True\n\n# Based on the game state and the rules and preferences, does the raven burn the warehouse of the grizzly bear?\nquestion = burn_warehouse(raven, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals attacks the green fields of the aardvark, you can be certain that it will also give a magnifying glass to the tiger.\nRule2: The parrot will not give a magnifying glass to the tiger, in the case where the panther does not respect the parrot.\n\nThe current state of the game is as follows\nThe parrot attacks the green fields whose owner is the aardvark.\nThe panther does not respect the parrot.\n\nBased on the game state and the rules and preferences, does the parrot give a magnifier to the tiger?\nQuestion: Does the parrot give a magnifying glass to the tiger?",
        "idx": 465,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals attacks the green fields of the aardvark, you can be certain that it will also give a magnifying glass to the tiger\nrule1() = attacks(animal, green_fields(aardvark)) => give_magnifying_glass(animal, tiger)\n# Rule2: The parrot will not give a magnifying glass to the tiger, in the case where the panther does not respect the parrot.\nrule2() = not respect(panther, parrot) => not give_magnifying_glass(parrot, tiger)\n\n# The current state of the game is as follows\n# The parrot attacks the green fields whose owner is the aardvark\nattacks(parrot, green_fields(aardvark)) = True\n# The panther does not respect the parrot.\nrespect(panther, parrot) = False\n\n# Based on the game state and the rules and preferences, does the parrot give a magnifier to the tiger?\nquestion = give_magnifying_glass(parrot, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus has a leafy green vegetable, then the octopus does not steal five points from the canary.\nRule2: If the octopus has a leafy green vegetable, then the octopus does not steal five points from the canary.\n\nThe current state of the game is as follows\nThe octopus has a piano.\nThe octopus has some spinach.\n\nBased on the game state and the rules and preferences, does the octopus steal five points from the canary?\nQuestion: Does the octopus steal five points from the canary?",
        "idx": 466,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the octopus has a leafy green vegetable, then the octopus does not steal five points from the canary\nrule1() = has(octopus, leafy_green_vegetable) => not steal_points(octopus, 5, canary)\n# Rule2: If the octopus has a leafy green vegetable, then the octopus does not steal five points from the canary.\nrule2() = has(octopus, leafy_green_vegetable) => not steal_points(octopus, 5, canary)\n\n# The current state of the game is as follows\n# The octopus has a piano\nhas(octopus, piano) = True\n# The octopus has some spinach.\nhas(octopus, spinach) = True\n\n# Based on the game state and the rules and preferences, does the octopus steal five points from the canary?\nquestion = steal_points(octopus, 5, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something does not know the defense plan of the hippopotamus but it respects the snail, what can you certainly conclude? You can conclude that it also learns elementary resource management from the kiwi.\n\nThe current state of the game is as follows\nThe catfish knows the defensive plans of the hippopotamus, and respects the snail.\n\nBased on the game state and the rules and preferences, does the catfish learn the basics of resource management from the kiwi?\nQuestion: Does the catfish learn the basics of resource management from the kiwi?",
        "idx": 467,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not know the defense plan of the hippopotamus but it respects the snail, what can you certainly conclude? You can conclude that it also learns elementary resource management from the kiwi.\nrule1() = not knows_defense_plan(something, hippopotamus) & respects(something, snail) => learns_resource_management(something, kiwi)\n\n# The current state of the game is as follows\n# The catfish knows the defensive plans of the hippopotamus, and respects the snail.\nknows_defense_plan(catfish, hippopotamus) = True\nrespects(catfish, snail) = True\n\n# Based on the game state and the rules and preferences, does the catfish learn the basics of resource management from the kiwi?\nquestion = learns_resource_management(catfish, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the gecko, if it took a bike from the store, then we can conclude that it does not know the defensive plans of the halibut.\nRule2: Regarding the gecko, if it has a sharp object, then we can conclude that it knows the defensive plans of the halibut.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe gecko has a blade.\nThe gecko stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the gecko know the defensive plans of the halibut?\nQuestion: Does the gecko know the defensive plans of the halibut?",
        "idx": 468,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the gecko, if it took a bike from the store, then we can conclude that it does not know the defensive plans of the halibut\nrule1() = took_bike(gecko, store) => not know_defensive_plans(gecko, halibut)\n# Rule2: Regarding the gecko, if it has a sharp object, then we can conclude that it knows the defensive plans of the halibut.\nrule2() = has_sharp_object(gecko) => know_defensive_plans(gecko, halibut)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2)\n\n# The current state of the game is as follows\n# The gecko has a blade\nhas_sharp_object(gecko) = True\n# The gecko stole a bike from the store.\ntook_bike(gecko, store) = True\n\n# Based on the game state and the rules and preferences, does the gecko know the defensive plans of the halibut?\nquestion = know_defensive_plans(gecko, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not need the support of the turtle, then it does not show all her cards to the cockroach.\n\nThe current state of the game is as follows\nThe mosquito does not need support from the turtle.\n\nBased on the game state and the rules and preferences, does the mosquito show all her cards to the cockroach?\nQuestion: Does the mosquito show all her cards to the cockroach?",
        "idx": 469,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not need the support of the turtle, then it does not show all her cards to the cockroach.\nrule1() = not need_support(mosquito, turtle) => not show_all_cards(mosquito, cockroach)\n\n# The current state of the game is as follows\n# The mosquito does not need support from the turtle.\nneed_support(mosquito, turtle) = False\n\n# Based on the game state and the rules and preferences, does the mosquito show all her cards to the cockroach?\nquestion = show_all_cards(mosquito, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: For the hippopotamus, if the belief is that the elephant removes one of the pieces of the hippopotamus and the caterpillar does not eat the food of the hippopotamus, then you can add \"the hippopotamus prepares armor for the amberjack\" to your conclusions.\n\nThe current state of the game is as follows\nThe elephant removes from the board one of the pieces of the hippopotamus.\nThe caterpillar does not become an enemy of the hippopotamus.\n\nBased on the game state and the rules and preferences, does the hippopotamus prepare armor for the amberjack?\nQuestion: Does the hippopotamus prepare armor for the amberjack?",
        "idx": 470,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the hippopotamus, if the belief is that the elephant removes one of the pieces of the hippopotamus and the caterpillar does not eat the food of the hippopotamus, then you can add \"the hippopotamus prepares armor for the amberjack\" to your conclusions.\nrule1() = remove_piece(elephant, hippopotamus) & not eat_food(caterpillar, hippopotamus) => prepare_armor(hippopotamus, amberjack)\n\n# The current state of the game is as follows\n# The elephant removes from the board one of the pieces of the hippopotamus\nremove_piece(elephant, hippopotamus) = True\n# The caterpillar does not become an enemy of the hippopotamus.\neat_food(caterpillar, hippopotamus) = False\n\n# Based on the game state and the rules and preferences, does the hippopotamus prepare armor for the amberjack?\nquestion = prepare_armor(hippopotamus, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not need support from the cat, then it prepares armor for the polar bear.\n\nThe current state of the game is as follows\nThe doctorfish does not need support from the cat.\n\nBased on the game state and the rules and preferences, does the doctorfish prepare armor for the polar bear?\nQuestion: Does the doctorfish prepare armor for the polar bear?",
        "idx": 471,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not need support from the cat, then it prepares armor for the polar bear.\nrule1() = not need_support(doctorfish, cat) => prepare_armor(doctorfish, polar_bear)\n\n# The current state of the game is as follows\n# The doctorfish does not need support from the cat.\nneed_support(doctorfish, cat) = False\n\n# Based on the game state and the rules and preferences, does the doctorfish prepare armor for the polar bear?\nquestion = prepare_armor(doctorfish, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eagle has a card whose color appears in the flag of Japan, then the eagle does not raise a flag of peace for the lobster.\n\nThe current state of the game is as follows\nThe eagle has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the eagle raise a peace flag for the lobster?\nQuestion: Does the eagle raise a peace flag for the lobster?",
        "idx": 472,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eagle has a card whose color appears in the flag of Japan, then the eagle does not raise a flag of peace for the lobster.\nrule1() = has_card(eagle, card) & color(card) in flag_colors(Japan) => not raise_flag_of_peace(eagle, lobster)\n\n# The current state of the game is as follows\n# The eagle has a card that is white in color.\nhas_card(eagle, card) = True\ncolor(card, white) = True\n\n# Based on the game state and the rules and preferences, does the eagle raise a peace flag for the lobster?\nquestion = raise_flag_of_peace(eagle, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cow holds the same number of points as the cheetah whenever at least one animal owes money to the oscar.\n\nThe current state of the game is as follows\nThe bat offers a job to the oscar.\n\nBased on the game state and the rules and preferences, does the cow hold the same number of points as the cheetah?\nQuestion: Do the cow and the cheetah hold the same number of points?",
        "idx": 473,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cow holds the same number of points as the cheetah whenever at least one animal owes $$$ to the oscar.\nrule1() = owes_money(animal, oscar) => points(cow) == points(cheetah)\n\n# The current state of the game is as follows\n# The bat offers a job to the oscar.\noffer_job_position(bat, oscar) = True\n\n# Based on the game state and the rules and preferences, does the cow hold the same number of points as the cheetah?\nquestion = points(cow) == points(cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something burns the warehouse of the sun bear, then it raises a peace flag for the carp, too.\nRule2: If the cricket has more than five friends, then the cricket does not raise a peace flag for the carp.\n\nThe current state of the game is as follows\nThe cricket burns the warehouse of the sun bear.\n\nBased on the game state and the rules and preferences, does the cricket raise a peace flag for the carp?\nQuestion: Does the cricket raise a peace flag for the carp?",
        "idx": 474,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something burns the warehouse of the sun bear, then it raises a peace flag for the carp, too\nrule1() = burns_warehouse(something, sun_bear) => raise_flag_of_peace(something, carp)\n# Rule2: If the cricket has more than five friends, then the cricket does not raise a peace flag for the carp.\nrule2() = friends(cricket) > 5 => not raise_flag_of_peace(cricket, carp)\n\n# The current state of the game is as follows\n# The cricket burns the warehouse of the sun bear.\nburns_warehouse(cricket, sun_bear) = True\n\n# Based on the game state and the rules and preferences, does the cricket raise a peace flag for the carp?\nquestion = raise_flag_of_peace(cricket, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something winks at the penguin and also rolls the dice for the squirrel because in this case it will surely not knock down the fortress that belongs to the canary (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe eel rolls the dice for the squirrel.\nThe eel winks at the penguin.\n\nBased on the game state and the rules and preferences, does the eel knock down the fortress of the canary?\nQuestion: Does the eel knock down the fortress of the canary?",
        "idx": 475,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something winks at the penguin and also rolls the dice for the squirrel because in this case it will surely not knock down the fortress that belongs to the canary (this may or may not be problematic).\nrule1() = winks(eel, penguin) & rolls_dice(eel, squirrel) => not knock_down_fortress(eel, canary)\n\n# The current state of the game is as follows\n# The eel rolls the dice for the squirrel\nrolls_dice(eel, squirrel) = True\n# The eel winks at the penguin.\nwinks(eel, penguin) = True\n\n# Based on the game state and the rules and preferences, does the eel knock down the fortress of the canary?\nquestion = knock_down_fortress(eel, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the lobster, if it has something to sit on, then we can conclude that it holds the same number of points as the dog.\nRule2: If the lobster has a device to connect to the internet, then the lobster holds the same number of points as the dog.\nRule3: For the lobster, if the belief is that the koala is not going to need support from the lobster but the meerkat respects the lobster, then you can add that \"the lobster is not going to hold an equal number of points as the dog\" to your conclusions.\n\nRule1 is preferred over Rule3.\nRule2 is preferred over Rule3.\n\nThe current state of the game is as follows\nThe lobster has some kale.\nThe meerkat respects the lobster.\nThe koala does not hold the same number of points as the lobster.\n\nBased on the game state and the rules and preferences, does the lobster hold the same number of points as the dog?\nQuestion: Does the lobster hold the same number of points as the dog?",
        "idx": 476,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the lobster, if it has something to sit on, then we can conclude that it holds the same number of points as the dog\nrule1() = has_something_to_sit_on(lobster) => points(lobster) == points(dog)\n# Rule2: If the lobster has a device to connect to the internet, then the lobster holds the same number of points as the dog\nrule2() = has_internet_device(lobster) => points(lobster) == points(dog)\n# Rule3: For the lobster, if the belief is that the koala is not going to need support from the lobster but the meerkat respects the lobster, then you can add that \"the lobster is not going to hold an equal number of points as the dog\" to your conclusions.\nrule3() = not need_support(koala, lobster) & respect(meerkat, lobster) => not points(lobster) == points(dog)\n\n# Rule1 is preferred over Rule3\npreferred_rule1_over_rule3() = True\n# Rule2 is preferred over Rule3\npreferred_rule2_over_rule3() = True\n\n# The current state of the game is as follows\n# The lobster has some kale\nhas_something_to_sit_on(lobster) = True\n# The meerkat respects the lobster\nrespect(meerkat, lobster) = True\n# The koala does not hold the same number of points as the lobster.\npoints(koala) == points(lobster) = False\n\n# Based on the game state and the rules and preferences, does the lobster hold the same number of points as the dog?\nquestion = points(lobster) == points(dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the halibut has a card whose color is one of the rainbow colors, then the halibut does not attack the green fields whose owner is the grizzly bear.\nRule2: If the panda bear knocks down the fortress of the halibut, then the halibut attacks the green fields whose owner is the grizzly bear.\nRule3: If the halibut does not have her keys, then it does not attack the green fields whose owner is the grizzly bear.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe halibut has a card that is black in color.\nThe panda bear knocks down the fortress of the halibut.\n\nBased on the game state and the rules and preferences, does the halibut attack the green fields whose owner is the grizzly bear?\nQuestion: Does the halibut attack the green fields whose owner is the grizzly bear?",
        "idx": 477,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the halibut has a card whose color is one of the rainbow colors, then the halibut does not attack the green fields whose owner is the grizzly bear\nrule1() = has_card(halibut) & color(card(halibut)) in rainbow_colors => not attack_green_fields(halibut, grizzly_bear)\n# Rule2: If the panda bear knocks down the fortress of the halibut, then the halibut attacks the green fields whose owner is the grizzly bear\nrule2() = knocks_down_fortress(panda_bear, halibut) => attack_green_fields(halibut, grizzly_bear)\n# Rule3: Regarding the halibut, if it does not have her keys, then we can conclude that it does not attack the green fields whose owner is the grizzly bear.\nrule3() = not have_keys(halibut) => not attack_green_fields(halibut, grizzly_bear)\n\n# Rule1 is preferred over Rule2\npreferred_rule1_over_rule2() = True\n# Rule3 is preferred over Rule2\npreferred_rule3_over_rule2() = True\n\n# The current state of the game is as follows\n# The halibut has a card that is black in color\nhas_card(halibut) = True\ncolor(card(halibut)) = black\n# The panda bear knocks down the fortress of the halibut.\nknocks_down_fortress(panda_bear, halibut) = True\n\n# Based on the game state and the rules and preferences, does the halibut attack the green fields whose owner is the grizzly bear?\nquestion = attack_green_fields(halibut, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the cat, if it has more than 14 friends, then we can conclude that it does not knock down the fortress of the grizzly bear.\nRule2: If the cat has a name whose first letter is the same as the first letter of the phoenix's name, then the cat does not knock down the fortress of the grizzly bear.\n\nThe current state of the game is as follows\nThe cat has eight friends.\nThe cat is named Tarzan.\nThe phoenix is named Teddy.\n\nBased on the game state and the rules and preferences, does the cat knock down the fortress of the grizzly bear?\nQuestion: Does the cat knock down the fortress of the grizzly bear?",
        "idx": 478,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cat, if it has more than 14 friends, then we can conclude that it does not knock down the fortress of the grizzly bear\nrule1() = friends(cat) > 14 => not knock_down_fortress(cat, grizzly_bear)\n# Rule2: If the cat has a name whose first letter is the same as the first letter of the phoenix's name, then the cat does not knock down the fortress of the grizzly bear.\nrule2() = first_letter(name(cat)) == first_letter(name(phoenix)) => not knock_down_fortress(cat, grizzly_bear)\n\n# The current state of the game is as follows\n# The cat has eight friends\nfriends(cat) = 8\n# The cat is named Tarzan\nname(cat) = \"Tarzan\"\n# The phoenix is named Teddy.\nname(phoenix) = \"Teddy\"\n\n# Based on the game state and the rules and preferences, does the cat knock down the fortress of the grizzly bear?\nquestion = knock_down_fortress(cat, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something burns the warehouse of the meerkat, then it does not need support from the phoenix.\nRule2: For the black bear, if the belief is that the hummingbird rolls the dice for the black bear and the lobster does not become an enemy of the black bear, then you can add \"the black bear needs support from the phoenix\" to your conclusions.\n\nThe current state of the game is as follows\nThe hummingbird does not roll the dice for the black bear.\nThe lobster does not become an enemy of the black bear.\n\nBased on the game state and the rules and preferences, does the black bear need support from the phoenix?\nQuestion: Does the black bear need support from the phoenix?",
        "idx": 479,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something burns the warehouse of the meerkat, then it does not need support from the phoenix\nrule1() = burns_warehouse(something, meerkat) => not need_support(something, phoenix)\n# Rule2: For the black bear, if the belief is that the hummingbird rolls the dice for the black bear and the lobster does not become an enemy of the black bear, then you can add \"the black bear needs support from the phoenix\" to your conclusions.\nrule2() = rolls_dice(hummingbird, black_bear) & not become_enemy(lobster, black_bear) => need_support(black_bear, phoenix)\n\n# The current state of the game is as follows\n# The hummingbird does not roll the dice for the black bear\nrolls_dice(hummingbird, black_bear) = False\n# The lobster does not become an enemy of the black bear.\nbecome_enemy(lobster, black_bear) = False\n\n# Based on the game state and the rules and preferences, does the black bear need support from the phoenix?\nquestion = need_support(black_bear, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something learns elementary resource management from the turtle, then it offers a job to the hummingbird, too.\n\nThe current state of the game is as follows\nThe caterpillar learns the basics of resource management from the turtle.\n\nBased on the game state and the rules and preferences, does the caterpillar offer a job to the hummingbird?\nQuestion: Does the caterpillar offer a job to the hummingbird?",
        "idx": 480,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something learns elementary resource management from the turtle, then it offers a job to the hummingbird, too.\nrule1() = learns_basics_of_resource_management(caterpillar, turtle) => offer_job_position(caterpillar, hummingbird)\n\n# The current state of the game is as follows\n# The caterpillar learns the basics of resource management from the turtle.\nlearns_basics_of_resource_management(caterpillar, turtle) = True\n\n# Based on the game state and the rules and preferences, does the caterpillar offer a job to the hummingbird?\nquestion = offer_job_position(caterpillar, hummingbird)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you are positive that you saw one of the animals burns the warehouse that is in possession of the crocodile, you can be certain that it will not respect the kiwi.\n\nThe current state of the game is as follows\nThe grizzly bear burns the warehouse of the crocodile.\n\nBased on the game state and the rules and preferences, does the grizzly bear respect the kiwi?\nQuestion: Does the grizzly bear respect the kiwi?",
        "idx": 481,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals burns the warehouse that is in possession of the crocodile, you can be certain that it will not respect the kiwi.\nrule1() = saw_burns_warehouse(animal) & in_possession(warehouse, crocodile) => not respect(animal, kiwi)\n\n# The current state of the game is as follows\n# The grizzly bear burns the warehouse of the crocodile.\nsaw_burns_warehouse(grizzly_bear) = True\nin_possession(warehouse, crocodile) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear respect the kiwi?\nquestion = respect(grizzly_bear, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the eel, if it has a card whose color is one of the rainbow colors, then we can conclude that it shows her cards (all of them) to the spider.\n\nThe current state of the game is as follows\nThe eel has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the eel show all her cards to the spider?\nQuestion: Does the eel show all her cards to the spider?",
        "idx": 482,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the eel, if it has a card whose color is one of the rainbow colors, then we can conclude that it shows her cards (all of them) to the spider.\nrule1() = has_card(eel, card) & color(card) in rainbow_colors => show_cards(eel, spider)\n\n# The current state of the game is as follows\n# The eel has a card that is white in color.\nhas_card(eel, card) = True\ncolor(card) = white\n\n# Based on the game state and the rules and preferences, does the eel show all her cards to the spider?\nquestion = show_cards(eel, spider)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the eagle, if it has a high salary, then we can conclude that it prepares armor for the dog.\nRule2: If the eagle has a name whose first letter is the same as the first letter of the halibut's name, then the eagle prepares armor for the dog.\nRule3: The eagle will not prepare armor for the dog, in the case where the salmon does not steal five points from the eagle.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe eagle has a low-income job and is named Lola.\nThe halibut is named Lucy.\n\nBased on the game state and the rules and preferences, does the eagle prepare armor for the dog?\nQuestion: Does the eagle prepare armor for the dog?",
        "idx": 483,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the eagle, if it has a high salary, then we can conclude that it prepares armor for the dog\nrule1() = salary(eagle) == high => prepare_armor(eagle, dog)\n# Rule2: If the eagle has a name whose first letter is the same as the first letter of the halibut's name, then the eagle prepares armor for the dog\nrule2() = first_letter(name(eagle)) == first_letter(name(halibut)) => prepare_armor(eagle, dog)\n# Rule3: The eagle will not prepare armor for the dog, in the case where the salmon does not steal five points from the eagle.\nrule3() = not steal_points(salmon, eagle, 5) => not prepare_armor(eagle, dog)\n\n# Rule3 is preferred over Rule1\npreferred(rule3, rule1)\n# Rule3 is preferred over Rule2\npreferred(rule3, rule2)\n\n# The current state of the game is as follows\n# The eagle has a low-income job, and is named Lola\nsalary(eagle) = low\nname(eagle) = \"Lola\"\n# The halibut is named Lucy.\nname(halibut) = \"Lucy\"\n\n# Based on the game state and the rules and preferences, does the eagle prepare armor for the dog?\nquestion = prepare_armor(eagle, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Be careful when something knocks down the fortress of the aardvark but does not hold an equal number of points as the polar bear because in this case it will, surely, not attack the green fields whose owner is the whale (this may or may not be problematic).\n\nThe current state of the game is as follows\nThe panda bear knocks down the fortress of the aardvark and prepares armor for the hummingbird.\nThe panda bear does not hold the same number of points as the polar bear.\n\nBased on the game state and the rules and preferences, does the panda bear attack the green fields whose owner is the whale?\nQuestion: Does the panda bear attack the green fields whose owner is the whale?",
        "idx": 484,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something knocks down the fortress of the aardvark but does not hold an equal number of points as the polar bear because in this case it will, surely, not attack the green fields whose owner is the whale (this may or may not be problematic).\nrule1() = knock_down_fortress(panda_bear, aardvark) & not points(panda_bear) == points(polar_bear) => not attack(panda_bear, green_fields, whale)\n\n# The current state of the game is as follows\n# The panda bear knocks down the fortress of the aardvark, and prepares armor for the hummingbird\nknock_down_fortress(panda_bear, aardvark) = True\nprepare_armor(panda_bear, hummingbird) = True\n# The panda bear does not hold the same number of points as the polar bear.\nnot points(panda_bear) == points(polar_bear) = True\n\n# Based on the game state and the rules and preferences, does the panda bear attack the green fields whose owner is the whale?\nquestion = attack(panda_bear, green_fields, whale)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the rabbit has a name whose first letter is the same as the first letter of the viperfish's name, then the rabbit knocks down the fortress of the elephant.\nRule2: If the rabbit voted for the mayor, then the rabbit knocks down the fortress that belongs to the elephant.\n\nThe current state of the game is as follows\nThe rabbit assassinated the mayor.\nThe name of the rabbit is Beauty.\nThe name of the viperfish is Tango.\n\nBased on the game state and the rules and preferences, does the rabbit knock down the fortress of the elephant?\nQuestion: Does the rabbit knock down the fortress of the elephant?",
        "idx": 485,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the rabbit has a name whose first letter is the same as the first letter of the viperfish's name, then the rabbit knocks down the fortress of the elephant\nrule1() = first_letter(name(rabbit)) == first_letter(name(viperfish)) => knock_down_fortress(rabbit, elephant)\n# Rule2: If the rabbit voted for the mayor, then the rabbit knocks down the fortress that belongs to the elephant.\nrule2() = voted_for(rabbit, mayor) => knock_down_fortress(rabbit, elephant)\n\n# The current state of the game is as follows\n# The rabbit assassinated the mayor\nassassinated(rabbit, mayor) = True\n# The rabbit is named Beauty\nname(rabbit) = \"Beauty\"\n# The viperfish is named Tango.\nname(viperfish) = \"Tango\"\n\n# Based on the game state and the rules and preferences, does the rabbit knock down the fortress of the elephant?\nquestion = knock_down_fortress(rabbit, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the black bear shows all her cards to the elephant, then the elephant learns the basics of resource management from the octopus.\n\nThe current state of the game is as follows\nThe black bear shows all her cards to the elephant.\nThe elephant has four friends.\n\nBased on the game state and the rules and preferences, does the elephant learn the basics of resource management from the octopus?\nQuestion: Does the elephant learn the basics of resource management from the octopus?",
        "idx": 486,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the black bear shows all her cards to the elephant, then the elephant learns the basics of resource management from the octopus.\nrule1() = show_cards(black_bear, elephant) => learn_basics(elephant, resource_management, octopus)\n\n# The current state of the game is as follows\n# The black bear shows all her cards to the elephant\nshow_cards(black_bear, elephant) = True\n# The elephant has four friends.\nfriends(elephant) = 4\n\n# Based on the game state and the rules and preferences, does the elephant learn the basics of resource management from the octopus?\nquestion = learn_basics(elephant, resource_management, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the phoenix, if it has more than twelve friends, then we can conclude that it does not burn the warehouse of the turtle\nRule2: If the phoenix has a card whose color is one of the rainbow colors, then the phoenix burns the warehouse of the turtle\nRule3: Regarding the phoenix, if it does not have her keys, then we can conclude that it does not burn the warehouse of the turtle\nRule4: If the phoenix has a name whose first letter is the same as the first letter of the aardvark's name, then the phoenix burns the warehouse that is in possession of the turtle.\n\nRule2 is preferred over Rule1\nRule2 is preferred over Rule3\nRule4 is preferred over Rule1\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe aardvark is named Bella\nThe phoenix has 6 friends, and has a card that is black in color\nThe phoenix lost her keys.\n\nBased on the game state and the rules and preferences, does the phoenix burn the warehouse of the turtle?\nQuestion: Does the phoenix burn the warehouse of the turtle?",
        "idx": 487,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the phoenix, if it has more than twelve friends, then we can conclude that it does not burn the warehouse of the turtle\nrule1() = friends(phoenix) > 12 => not burn_warehouse(phoenix, turtle)\n# Rule2: If the phoenix has a card whose color is one of the rainbow colors, then the phoenix burns the warehouse of the turtle\nrule2() = has(phoenix, card) and color(card) in rainbow_colors => burn_warehouse(phoenix, turtle)\n# Rule3: Regarding the phoenix, if it does not have her keys, then we can conclude that it does not burn the warehouse of the turtle\nrule3() = not has_keys(phoenix) => not burn_warehouse(phoenix, turtle)\n# Rule4: If the phoenix has a name whose first letter is the same as the first letter of the aardvark's name, then the phoenix burns the warehouse that is in possession of the turtle.\nrule4() = first_letter(name(phoenix)) == first_letter(name(aardvark)) => burn_warehouse(phoenix, turtle)\n\n# Rule2 is preferred over Rule1\npreferred_rule1() = not rule2() and rule1() => not burn_warehouse(phoenix, turtle)\n# Rule2 is preferred over Rule3\npreferred_rule2() = not rule2() and rule3() => not burn_warehouse(phoenix, turtle)\n# Rule4 is preferred over Rule1\npreferred_rule3() = not rule4() and rule1() => not burn_warehouse(phoenix, turtle)\n# Rule4 is preferred over Rule3\npreferred_rule4() = not rule4() and rule3() => not burn_warehouse(phoenix, turtle)\n\n# The current state of the game is as follows\n# The aardvark is named Bella\nname(aardvark) = \"Bella\"\n# The phoenix has 6 friends, and has a card that is black in color\nfriends(phoenix) = 6\nhas(phoenix, card) = True\ncolor(card, black) = True\n# The phoenix lost her keys.\nhas_keys(phoenix) = False\n\n# Based on the game state and the rules and preferences, does the phoenix burn the warehouse of the turtle?\nquestion = burn_warehouse(phoenix, turtle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the hummingbird, if it has a card whose color is one of the rainbow colors, then we can conclude that it learns elementary resource management from the rabbit.\n\nThe current state of the game is as follows\nThe hummingbird has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the rabbit?\nQuestion: Does the hummingbird learn the basics of resource management from the rabbit?",
        "idx": 488,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hummingbird, if it has a card whose color is one of the rainbow colors, then we can conclude that it learns elementary resource management from the rabbit.\nrule1() = has_card(hummingbird, card) & color(card) in rainbow_colors => learn_resource_management(hummingbird, rabbit)\n\n# The current state of the game is as follows\n# The hummingbird has a card that is white in color.\nhas_card(hummingbird, card) = True\ncolor(card) = white\n\n# Based on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the rabbit?\nquestion = learn_resource_management(hummingbird, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something attacks the green fields whose owner is the whale but does not prepare armor for the sun bear, what can you certainly conclude? You can conclude that it winks at the bat.\n\nThe current state of the game is as follows\nThe canary attacks the green fields whose owner is the whale.\nThe canary does not prepare armor for the sun bear.\n\nBased on the game state and the rules and preferences, does the canary wink at the bat?\nQuestion: Does the canary wink at the bat?",
        "idx": 489,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something attacks the green fields whose owner is the whale but does not prepare armor for the sun bear, what can you certainly conclude? You can conclude that it winks at the bat.\nrule1() = attacks(canary, green_fields, whale) & not prepare_armor(canary, sun_bear) => wink(canary, bat)\n\n# The current state of the game is as follows\n# The canary attacks the green fields whose owner is the whale\nattacks(canary, green_fields, whale) = True\n# The canary does not prepare armor for the sun bear.\nnot prepare_armor(canary, sun_bear) = True\n\n# Based on the game state and the rules and preferences, does the canary wink at the bat?\nquestion = wink(canary, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the gecko, if it has fewer than 15 friends, then we can conclude that it knocks down the fortress of the sheep.\nRule2: For the gecko, if the belief is that the turtle owes money to the gecko and the crocodile respects the gecko, then you can add that \"the gecko is not going to knock down the fortress of the sheep\" to your conclusions.\nRule3: If the gecko has a musical instrument, then the gecko knocks down the fortress that belongs to the sheep.\n\nRule1 is preferred over Rule2.\nRule3 is preferred over Rule2.\n\nThe current state of the game is as follows\nThe crocodile respects the gecko.\nThe gecko has a backpack.\nThe turtle owes money to the gecko.\n\nBased on the game state and the rules and preferences, does the gecko knock down the fortress of the sheep?\nQuestion: Does the gecko knock down the fortress of the sheep?",
        "idx": 490,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the gecko, if it has fewer than 15 friends, then we can conclude that it knocks down the fortress of the sheep\nrule1() = friends(gecko) < 15 => knock_down_fortress(gecko, sheep)\n# Rule2: For the gecko, if the belief is that the turtle owes $$$ to the gecko and the crocodile respects the gecko, then you can add that \"the gecko is not going to knock down the fortress of the sheep\" to your conclusions\nrule2() = owe(turtle, money, gecko) & respect(crocodile, gecko) => not knock_down_fortress(gecko, sheep)\n# Rule3: If the gecko has a musical instrument, then the gecko knocks down the fortress that belongs to the sheep.\nrule3() = has(gecko, musical_instrument) => knock_down_fortress(gecko, sheep)\n\n# Rule1 is preferred over Rule2\n# Rule3 is preferred over Rule2\n\n# The current state of the game is as follows\n# The crocodile respects the gecko\nrespect(crocodile, gecko) = True\n# The gecko has a backpack\nhas(gecko, backpack) = True\n# The turtle owes money to the gecko.\nowe(turtle, money, gecko) = True\n\n# Based on the game state and the rules and preferences, does the gecko knock down the fortress of the sheep?\nquestion = knock_down_fortress(gecko, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eel is a fan of Chris Ronaldo, then the eel knows the defense plan of the viperfish.\n\nThe current state of the game is as follows\nThe eel recently read a high-quality paper.\n\nBased on the game state and the rules and preferences, does the eel know the defensive plans of the viperfish?\nQuestion: Does the eel know the defensive plans of the viperfish?",
        "idx": 491,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eel is a fan of Chris Ronaldo, then the eel knows the defense plan of the viperfish.\nrule1() = fan_of(eel, Chris_Ronaldo) => knows_defense_plan(eel, viperfish)\n\n# The current state of the game is as follows\n# The eel recently read a high-quality paper.\nrecently_read(eel, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the eel know the defensive plans of the viperfish?\nquestion = knows_defense_plan(eel, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knocks down the fortress that belongs to the blobfish, then it eats the food of the starfish, too.\n\nThe current state of the game is as follows\nThe kudu knocks down the fortress of the blobfish.\n\nBased on the game state and the rules and preferences, does the kudu eat the food of the starfish?\nQuestion: Does the kudu eat the food of the starfish?",
        "idx": 492,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something knocks down the fortress that belongs to the blobfish, then it eats the food of the starfish, too.\nrule1() = knocks_down_fortress(something, blobfish) => eats_food(something, starfish)\n\n# The current state of the game is as follows\n# The kudu knocks down the fortress of the blobfish.\nknocks_down_fortress(kudu, blobfish) = True\n\n# Based on the game state and the rules and preferences, does the kudu eat the food of the starfish?\nquestion = eats_food(kudu, starfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal becomes an actual enemy of the squirrel, then the crocodile does not proceed to the spot that is right after the spot of the amberjack.\n\nThe current state of the game is as follows\nThe hummingbird becomes an enemy of the squirrel.\n\nBased on the game state and the rules and preferences, does the crocodile proceed to the spot right after the amberjack?\nQuestion: Does the crocodile proceed to the spot right after the amberjack?",
        "idx": 493,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal becomes an actual enemy of the squirrel, then the crocodile does not proceed to the spot that is right after the spot of the amberjack.\nrule1() = enemy(squirrel, animal) => not proceed(crocodile, spot_after(amberjack))\n\n# The current state of the game is as follows\n# The hummingbird becomes an enemy of the squirrel.\nenemy(squirrel, hummingbird) = True\n\n# Based on the game state and the rules and preferences, does the crocodile proceed to the spot right after the amberjack?\nquestion = proceed(crocodile, spot_after(amberjack))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the polar bear, if it has a card whose color is one of the rainbow colors, then we can conclude that it needs the support of the sea bass.\n\nThe current state of the game is as follows\nThe polar bear has a card that is black in color.\n\nBased on the game state and the rules and preferences, does the polar bear need support from the sea bass?\nQuestion: Does the polar bear need support from the sea bass?",
        "idx": 494,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the polar bear, if it has a card whose color is one of the rainbow colors, then we can conclude that it needs the support of the sea bass.\nrule1() = has_card(polar_bear) & color(card(polar_bear)) in rainbow_colors => need_support(polar_bear, sea_bass)\n\n# The current state of the game is as follows\n# The polar bear has a card that is black in color.\nhas_card(polar_bear) = True\ncolor(card(polar_bear)) = black\n\n# Based on the game state and the rules and preferences, does the polar bear need support from the sea bass?\nquestion = need_support(polar_bear, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the turtle has a leafy green vegetable, then the turtle needs the support of the grasshopper.\nRule2: Regarding the turtle, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not need support from the grasshopper.\nRule3: If the turtle has a name whose first letter is the same as the first letter of the lobster's name, then the turtle does not need the support of the grasshopper.\nRule4: If the turtle took a bike from the store, then the turtle needs the support of the grasshopper.\n\nRule2 is preferred over Rule1.\nRule2 is preferred over Rule4.\nRule3 is preferred over Rule1.\nRule3 is preferred over Rule4.\n\nThe current state of the game is as follows\nThe lobster is named Chickpea.\nThe turtle has some kale, is named Milo, and parked her bike in front of the store.\n\nBased on the game state and the rules and preferences, does the turtle need support from the grasshopper?\nQuestion: Does the turtle need support from the grasshopper?",
        "idx": 495,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the turtle has a leafy green vegetable, then the turtle needs the support of the grasshopper\nrule1() = has(turtle, leafy_green_vegetable) => needs_support(turtle, grasshopper)\n# Rule2: Regarding the turtle, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not need support from the grasshopper\nrule2() = has(turtle, card) and color(card) in rainbow_colors => not needs_support(turtle, grasshopper)\n# Rule3: If the turtle has a name whose first letter is the same as the first letter of the lobster's name, then the turtle does not need the support of the grasshopper\nrule3() = first_letter(turtle.name) == first_letter(lobster.name) => not needs_support(turtle, grasshopper)\n# Rule4: If the turtle took a bike from the store, then the turtle needs the support of the grasshopper.\nrule4() = took_bike(turtle, store) => needs_support(turtle, grasshopper)\n\n# Rule2 is preferred over Rule1\npreferred_rule(rule1, rule2)\n# Rule2 is preferred over Rule4\npreferred_rule(rule4, rule2)\n# Rule3 is preferred over Rule1\npreferred_rule(rule1, rule3)\n# Rule3 is preferred over Rule4\npreferred_rule(rule4, rule3)\n\n# The current state of the game is as follows\n# The lobster is named Chickpea\nlobster.name = \"Chickpea\"\n# The turtle has some kale, is named Milo, and parked her bike in front of the store.\nhas(turtle, kale) = True\nturtle.name = \"Milo\"\nparked_bike(turtle, store) = True\n\n# Based on the game state and the rules and preferences, does the turtle need support from the grasshopper?\nquestion = needs_support(turtle, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the wolverine has a name whose first letter is the same as the first letter of the black bear's name, then the wolverine does not know the defense plan of the panther.\nRule2: If the wolverine has something to sit on, then the wolverine does not know the defense plan of the panther.\n\nThe current state of the game is as follows\nThe black bear is named Luna.\nThe wolverine has a couch and is named Tessa.\n\nBased on the game state and the rules and preferences, does the wolverine know the defensive plans of the panther?\nQuestion: Does the wolverine know the defensive plans of the panther?",
        "idx": 496,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the wolverine has a name whose first letter is the same as the first letter of the black bear's name, then the wolverine does not know the defense plan of the panther\nrule1() = first_letter(name(wolverine)) == first_letter(name(black_bear)) => not know_defense_plan(wolverine, panther)\n# Rule2: If the wolverine has something to sit on, then the wolverine does not know the defense plan of the panther.\nrule2() = has_something_to_sit_on(wolverine) => not know_defense_plan(wolverine, panther)\n\n# The current state of the game is as follows\n# The black bear is named Luna\nname(black_bear) = \"Luna\"\n# The wolverine has a couch, and is named Tessa.\nname(wolverine) = \"Tessa\"\nhas_something_to_sit_on(wolverine) = True\n\n# Based on the game state and the rules and preferences, does the wolverine know the defensive plans of the panther?\nquestion = know_defense_plan(wolverine, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: Regarding the sheep, if it has a musical instrument, then we can conclude that it eats the food that belongs to the cricket.\nRule2: Regarding the sheep, if it has something to carry apples and oranges, then we can conclude that it eats the food that belongs to the cricket.\nRule3: Regarding the sheep, if it has more than 9 friends, then we can conclude that it does not eat the food of the cricket.\nRule3 is preferred over Rule1.\nRule3 is preferred over Rule2.\n\nThe current state of the game is as follows\nThe sheep has a cell phone.\nThe sheep has two easy-going friends and three not easy-going friends.\nThe sheep has a cutter.\n\nBased on the game state and the rules and preferences, does the sheep eat the food of the cricket?\nQuestion: Does the sheep eat the food of the cricket?",
        "idx": 497,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the sheep, if it has a musical instrument, then we can conclude that it eats the food that belongs to the cricket\nrule1() = has(sheep, musical_instrument) => eat_food(sheep, cricket)\n# Rule2: Regarding the sheep, if it has something to carry apples and oranges, then we can conclude that it eats the food that belongs to the cricket\nrule2() = has(sheep, carry_apples_oranges) => eat_food(sheep, cricket)\n# Rule3: Regarding the sheep, if it has more than 9 friends, then we can conclude that it does not eat the food of the cricket.\nrule3() = friends(sheep) > 9 => not eat_food(sheep, cricket)\n\n# Rule3 is preferred over Rule1\npreferred_rule1() = not rule3() and rule1()\n# Rule3 is preferred over Rule2\npreferred_rule2() = not rule3() and rule2()\n\n# The current state of the game is as follows\n# The sheep has a cell phone\nhas(sheep, cell_phone) = True\n# The sheep has two friends that are easy going and three friends that are not\nfriends(sheep) = 5\n# The sheep has a cutter.\nhas(sheep, cutter) = True\n\n# Based on the game state and the rules and preferences, does the sheep eat the food of the cricket?\nquestion = eat_food(sheep, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you see that something does not burn the warehouse that is in possession of the crocodile but it prepares armor for the swordfish, what can you certainly conclude? You can conclude that it also prepares armor for the wolverine.\nRule2: If the moose has a name whose first letter is the same as the first letter of the black bear's name, then the moose does not prepare armor for the wolverine.\nRule3: If the moose has fewer than 13 friends, then the moose does not prepare armor for the wolverine.\nRule2 is preferred over Rule1\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe black bear is named Beauty.\nThe moose is named Teddy, prepares armor for the swordfish, and does not burn the warehouse of the crocodile.\n\nBased on the game state and the rules and preferences, does the moose prepare armor for the wolverine?\nQuestion: Does the moose prepare armor for the wolverine?",
        "idx": 498,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not burn the warehouse that is in possession of the crocodile but it prepares armor for the swordfish, what can you certainly conclude? You can conclude that it also prepares armor for the wolverine\nrule1() = not burn_warehouse(something, crocodile) & prepare_armor(something, swordfish) => prepare_armor(something, wolverine)\n\n# Rule2: If the moose has a name whose first letter is the same as the first letter of the black bear's name, then the moose does not prepare armor for the wolverine\nrule2() = first_letter(name(moose)) == first_letter(name(black_bear)) => not prepare_armor(moose, wolverine)\n\n# Rule3: If the moose has fewer than 13 friends, then the moose does not prepare armor for the wolverine.\nrule3() = friends(moose) < 13 => not prepare_armor(moose, wolverine)\n\n# Rule2 is preferred over Rule1\n# Rule3 is preferred over Rule1\n\n# The current state of the game is as follows\n# The black bear is named Beauty\nname(black_bear) = \"Beauty\"\n# The moose is named Teddy, prepares armor for the swordfish, and does not burn the warehouse of the crocodile.\nname(moose) = \"Teddy\"\nprepare_armor(moose, swordfish) = True\nnot burn_warehouse(something, crocodile) = True\n\n# Based on the game state and the rules and preferences, does the moose prepare armor for the wolverine?\nquestion = prepare_armor(moose, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the turtle has a card with a primary color, then the turtle does not owe money to the eagle.\n\nThe current state of the game is as follows\nThe turtle has a card that is blue in color.\n\nBased on the game state and the rules and preferences, does the turtle owe money to the eagle?\nQuestion: Does the turtle owe money to the eagle?",
        "idx": 499,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the turtle has a card with a primary color, then the turtle does not owe money to the eagle.\nrule1() = has_card(turtle) & primary_color(card(turtle)) => not owe_money(turtle, eagle)\n\n# The current state of the game is as follows\n# The turtle has a card that is blue in color.\nhas_card(turtle) = True\nprimary_color(card(turtle)) = blue\n\n# Based on the game state and the rules and preferences, does the turtle owe money to the eagle?\nquestion = owe_money(turtle, eagle)"
    }
]