[
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the amberjack has a card whose color starts with the letter \"o\", then it removes from the board one of the pieces of the raven\nRule2: If the amberjack has more than 10 friends, then it does not give a magnifying glass to the wolverine\nRule3: If something removes from the board one of the pieces of the raven but does not give a magnifier to the wolverine, then it removes from the board one of the pieces of the carp.\n\nThe current state of the game is as follows\nThe amberjack has a card that is orange in color\nThe amberjack has 15 friends\nThe amberjack has a computer\nThe amberjack has some kale.\n\nBased on the game state and the rules and preferences, does the amberjack remove from the board one of the pieces of the carp?\nQuestion: Does the amberjack remove from the board one of the pieces of the carp?",
        "idx": 0,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the amberjack has a card whose color starts with the letter \"o\", then the amberjack removes from the board one of the pieces of the raven\nrule1() = has(amberjack, card) and starts_with(color(card), \"o\") => remove_from_board(amberjack, piece, raven)\n# Rule2: If the amberjack has more than 10 friends, then the amberjack does not give a magnifying glass to the wolverine\nrule2() = friends(amberjack) > 10 => not give(amberjack, magnifying_glass, wolverine)\n# Rule3: Be careful when something removes from the board one of the pieces of the raven but does not give a magnifier to the wolverine because in this case it will, surely, remove from the board one of the pieces of the carp (this may or may not be problematic).\nrule3() = remove_from_board(something, piece, raven) and not give(something, magnifying_glass, wolverine) => remove_from_board(something, piece, carp)\n\n# The current state of the game is as follows\n# The amberjack has a card that is orange in color, and has fifteen friends\nhas(amberjack, card) = True\ncolor(card, orange) = True\nfriends(amberjack) = 15\n# The amberjack has a computer\nhas(amberjack, computer) = True\n# The amberjack has some kale.\nhas(amberjack, kale) = True\n\n# Based on the game state and the rules and preferences, does the amberjack remove from the board one of the pieces of the carp?\nquestion = remove_from_board(amberjack, piece, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the donkey has a device to connect to the internet, then it winks at the carp\nRule2: If something proceeds to the spot that is right after the spot of the pig, then it does not raise a peace flag for the caterpillar\nRule3: If the donkey has fewer than two friends, then it winks at the carp\nRule4: The donkey proceeds to the spot right after the pig whenever at least one animal shows her cards (all of them) to the spider.\n\nThe current state of the game is as follows\nThe donkey has 2 bald friends and 6 non-bald friends\nThe donkey has a cell phone\nThe donkey has a harmonica\nThe kudu shows all her cards to the spider.\n\nBased on the game state and the rules and preferences, does the donkey raise a peace flag for the caterpillar?\nQuestion: Does the donkey raise a peace flag for the caterpillar?",
        "idx": 1,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the donkey, if it has a device to connect to the internet, then we can conclude that it winks at the carp\nrule1() = has(donkey, device_to_connect_to_internet) => wink(donkey, carp)\n# Rule2: If something proceeds to the spot that is right after the spot of the pig, then it does not raise a peace flag for the caterpillar\nrule2(something) = proceeds_to(something, spot_after(pig)) => not raise_flag_of_peace(something, caterpillar)\n# Rule3: If the donkey has fewer than two friends, then the donkey winks at the carp\nrule3() = friends(donkey, bald) + friends(donkey, not_bald) < 2 => wink(donkey, carp)\n# Rule4: The donkey proceeds to the spot right after the pig whenever at least one animal shows her cards (all of them) to the spider.\nrule4() = show_cards(animal, all_cards) to spider => proceeds_to(donkey, spot_after(pig))\n\n# The current state of the game is as follows\n# The donkey has 2 friends that are bald and 6 friends that are not, and has a cell phone\nfriends(donkey, bald) = 2\nfriends(donkey, not_bald) = 6\nhas(donkey, cell_phone) = True\n# The donkey has a harmonica\nhas(donkey, harmonica) = True\n# The kudu shows all her cards to the spider.\nshow_cards(kudu, all_cards) to spider = True\n\n# Based on the game state and the rules and preferences, does the donkey raise a peace flag for the caterpillar?\nquestion = raise_flag_of_peace(donkey, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The turtle knocks down the fortress of the black bear whenever at least one animal learns elementary resource management from the oscar\nRule2: If the tiger has difficulty to find food, then it gives a magnifier to the turtle\nRule3: If the cheetah has a card and the color of the card is one of the rainbow colors, then it attacks the green fields whose owner is the oscar\nRule4: If the tiger has a device to connect to the internet, then it gives a magnifier to the turtle\nRule5: If the cheetah has fewer than 7 friends, then it attacks the green fields of the oscar.\n\nThe current state of the game is as follows\nThe cheetah has 5 friends\nThe cheetah has a card that is white in color\nThe grasshopper winks at the koala\nThe tiger has a backpack\nThe tiger struggles to find food.\n\nBased on the game state and the rules and preferences, does the turtle knock down the fortress of the black bear?\nQuestion: Does the turtle knock down the fortress of the black bear?",
        "idx": 2,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The turtle knocks down the fortress of the black bear whenever at least one animal learns elementary resource management from the oscar\nrule1() = learn(something, elementary_resource_management_from(oscar)) => knock_down(turtle, fortress, black_bear)\n# Rule2: If the tiger has difficulty to find food, then the tiger gives a magnifier to the turtle\nrule2() = difficulty_to_find_food(tiger) => give(tiger, magnifier, turtle)\n# Rule3: If the cheetah has a card whose color is one of the rainbow colors, then the cheetah attacks the green fields whose owner is the oscar\nrule3() = has(cheetah, card) and color(card) in rainbow_colors => attack(cheetah, green_fields, oscar)\n# Rule4: Regarding the tiger, if it has a device to connect to the internet, then we can conclude that it gives a magnifier to the turtle\nrule4() = has(tiger, device_to_connect_to_internet) => give(tiger, magnifier, turtle)\n# Rule5: If the cheetah has fewer than 7 friends, then the cheetah attacks the green fields of the oscar.\nrule5() = friends(cheetah) < 7 => attack(cheetah, green_fields, oscar)\n\n# The current state of the game is as follows\n# The cheetah has 5 friends\nfriends(cheetah) = 5\n# The cheetah has a card that is white in color\nhas(cheetah, card) = True\ncolor(card, white) = True\n# The grasshopper winks at the koala\nwink(grasshopper, koala) = True\n# The tiger has a backpack\nhas(tiger, backpack) = True\n# The tiger struggles to find food.\ndifficulty_to_find_food(tiger) = True\n\n# Based on the game state and the rules and preferences, does the turtle knock down the fortress of the black bear?\nquestion = knock_down(turtle, fortress, black_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not know the defensive plans of the cat, then it will not attack the green fields of the leopard\nRule2: If something eats the food of the koala, then it rolls the dice for the leopard\nRule3: If something does not respect the kudu, then it does not raise a peace flag for the zander\nRule4: If the buffalo does not attack the green fields of the leopard but the whale rolls the dice for the leopard, then the leopard raises a flag of peace for the zander unavoidably.\n\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe whale eats the food of the koala\nThe buffalo does not know the defensive plans of the cat.\n\nBased on the game state and the rules and preferences, does the leopard raise a peace flag for the zander?\nQuestion: Does the leopard raise a peace flag for the zander?",
        "idx": 3,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not know the defensive plans of the cat, you can be certain that it will not attack the green fields of the leopard\nrule1(something) = not knows(something, defensive_plans, cat) => not attack(something, green_fields, leopard)\n# Rule2: If something eats the food that belongs to the koala, then it rolls the dice for the leopard, too\nrule2(something) = eat_food(something, food_of(koala)) => roll_dice(something, leopard)\n# Rule3: If something does not respect the kudu, then it does not raise a peace flag for the zander\nrule3(something) = not respect(something, kudu) => not raise_flag_of_peace(something, zander)\n# Rule4: If the buffalo does not attack the green fields of the leopard but the whale rolls the dice for the leopard, then the leopard raises a flag of peace for the zander unavoidably.\nrule4() = not attack(buffalo, green_fields, leopard) & roll_dice(whale, leopard) => raise_flag_of_peace(leopard, zander)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The whale eats the food of the koala\neat_food(whale, food_of(koala)) = True\n# The buffalo does not know the defensive plans of the cat.\nknows(buffalo, defensive_plans, cat) = False\n\n# Based on the game state and the rules and preferences, does the leopard raise a peace flag for the zander?\nquestion = raise_flag_of_peace(leopard, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something owes money to the grasshopper, then it knocks down the fortress of the grizzly bear, too\nRule2: If the parrot shows all her cards to the canary, then the canary winks at the cheetah\nRule3: If something needs the support of the hare, then it does not proceed to the spot right after the whale\nRule4: If the canary has fewer than ten friends, then it needs the support of the hare\nRule5: If the canary has a high salary, then it needs support from the hare.\n\nThe current state of the game is as follows\nThe canary has a cappuccino\nThe canary has a red card\nThe canary has nine friends\nThe canary owes money to the grasshopper\nThe canary has a low-income job\nThe parrot shows all her cards to the canary\n\nBased on the game state and the rules and preferences, does the canary proceed to the spot right after the whale?\nQuestion: Does the canary proceed to the spot right after the whale?",
        "idx": 4,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something owes $$$ to the grasshopper, then it knocks down the fortress of the grizzly bear, too\nrule1(something) = owes(something, money, grasshopper) => knocks_down(something, fortress, grizzly_bear)\n# Rule2: If the parrot shows her cards (all of them) to the canary, then the canary winks at the cheetah\nrule2() = shows(parrot, all_cards, canary) => winks(canary, cheetah)\n# Rule3: If something needs the support of the hare, then it does not proceed to the spot right after the whale\nrule3(something) = needs(something, support, hare) => not proceed(something, spot_right_after, whale)\n# Rule4: If the canary has fewer than ten friends, then the canary needs the support of the hare\nrule4() = friends(canary) < 10 => needs(canary, support, hare)\n# Rule5: If the canary has a high salary, then the canary needs support from the hare.\nrule5() = has_high_salary(canary) => needs(canary, support, hare)\n\n# The current state of the game is as follows\n# The canary has a cappuccino\nhas(canary, cappuccino) = True\n# The canary has a card that is red in color\nhas(canary, card) and color(card) == red = True\n# The canary has nine friends\nfriends(canary) = 9\n# The canary owes money to the grasshopper\nowes(canary, money, grasshopper) = True\n# The canary has a low-income job\nhas_low_income_job(canary) = True\n# The parrot shows all her cards to the canary\nshows(parrot, all_cards, canary) = True\n\n# Based on the game state and the rules and preferences, does the canary proceed to the spot right after the whale?\nquestion = proceed(canary, spot_right_after, whale)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not raise a peace flag for the squid, then it offers a job to the spider\nRule2: If the meerkat offers a job to the spider, then the spider gives a magnifying glass to the tilapia.\n\nThe current state of the game is as follows\nThe meerkat does not knock down the fortress of the squid.\n\nBased on the game state and the rules and preferences, does the spider give a magnifier to the tilapia?\nQuestion: Does the spider give a magnifying glass to the tilapia?",
        "idx": 5,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not raise a peace flag for the squid, then it offers a job to the spider\nrule1(something) = not raise_flag_of_peace(something, squid) => offer_job_position(something, spider)\n# Rule2: The spider unquestionably gives a magnifying glass to the tilapia, in the case where the meerkat offers a job to the spider.\nrule2() = offer_job_position(meerkat, spider) => give(spider, magnifying_glass, tilapia)\n\n# The current state of the game is as follows\n# The meerkat does not knock down the fortress of the squid.\nknock_down(meerkat, fortress, squid) = False\n\n# Based on the game state and the rules and preferences, does the spider give a magnifier to the tilapia?\nquestion = give(spider, magnifying_glass, tilapia)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the crocodile has fewer than nine friends, then it removes one of the pieces of the tiger\nRule2: If the aardvark has a device to connect to the internet, then it knows the defense plan of the tiger\nRule3: If the crocodile has a sharp object, then it does not remove one of the pieces of the tiger\nRule4: If the first letter of the name of the crocodile is the same as the first letter of the name of the koala, then the crocodile removes one of the pieces of the tiger\nRule5: If the aardvark knows the defense plan of the tiger and the crocodile does not remove one of the pieces of the tiger, then the tiger becomes an enemy of the cheetah.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe aardvark has a computer\nThe crocodile has a knife\nThe name of the crocodile is Tessa\nThe name of the koala is Casper.\n\nBased on the game state and the rules and preferences, does the tiger become an enemy of the cheetah?\nQuestion: Does the tiger become an enemy of the cheetah?",
        "idx": 6,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the crocodile has fewer than nine friends, then the crocodile removes one of the pieces of the tiger\nrule1() = friends(crocodile) < 9 => remove_piece(crocodile, tiger)\n# Rule2: If the aardvark has a device to connect to the internet, then the aardvark knows the defense plan of the tiger\nrule2() = has(aardvark, device_to_connect_to_internet) => knows(aardvark, defense_plan, tiger)\n# Rule3: Regarding the crocodile, if it has a sharp object, then we can conclude that it does not remove one of the pieces of the tiger\nrule3() = has(crocodile, sharp_object) => not remove_piece(crocodile, tiger)\n# Rule4: Regarding the crocodile, if it has a name whose first letter is the same as the first letter of the koala's name, then we can conclude that it removes one of the pieces of the tiger\nrule4() = first_letter_of(name(crocodile)) == first_letter_of(name(koala)) => remove_piece(crocodile, tiger)\n# Rule5: If the aardvark knows the defense plan of the tiger and the crocodile does not remove one of the pieces of the tiger, then, inevitably, the tiger becomes an enemy of the cheetah.\nrule5() = knows(aardvark, defense_plan, tiger) & not remove_piece(crocodile, tiger) => become_enemy(tiger, cheetah)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The aardvark has a computer\nhas(aardvark, computer) = True\n# The crocodile has a knife, and is named Tessa\nhas(crocodile, knife) = True\nname(crocodile, Tessa) = True\n# The koala is named Casper.\nname(koala, Casper) = True\n\n# Based on the game state and the rules and preferences, does the tiger become an enemy of the cheetah?\nquestion = become_enemy(tiger, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the cricket, then the lobster prepares armor for the goldfish\nRule2: If the octopus has a card whose color starts with the letter \"w\", then it raises a flag of peace for the goldfish\nRule3: If the octopus raises a peace flag for the goldfish and the lobster prepares armor for the goldfish, then the goldfish will not owe money to the kudu\nRule4: If the octopus does not have her keys, then it raises a peace flag for the goldfish.\n\nThe current state of the game is as follows\nThe donkey raises a peace flag for the lobster\nThe hare rolls the dice for the cricket\nThe octopus has a card that is white in color\nThe octopus is holding her keys.\n\nBased on the game state and the rules and preferences, does the goldfish owe money to the kudu?\nQuestion: Does the goldfish owe money to the kudu?",
        "idx": 7,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal rolls the dice for the cricket, then the lobster prepares armor for the goldfish\nrule1() = rolls_dice(something, cricket) => prepare_armor(lobster, goldfish)\n# Rule2: Regarding the octopus, if it has a card whose color starts with the letter \"w\", then we can conclude that it raises a flag of peace for the goldfish\nrule2() = has_card_with_color_starting_with(octopus, \"w\") => raise_flag_of_peace(octopus, goldfish)\n# Rule3: If the octopus raises a peace flag for the goldfish and the lobster prepares armor for the goldfish, then the goldfish will not owe money to the kudu\nrule3() = raise_flag_of_peace(octopus, goldfish) & prepare_armor(lobster, goldfish) => not owe(goldfish, money, kudu)\n# Rule4: If the octopus does not have her keys, then the octopus raises a peace flag for the goldfish.\nrule4() = not has_keys(octopus) => raise_flag_of_peace(octopus, goldfish)\n\n# The current state of the game is as follows\n# The donkey raises a peace flag for the lobster\nraise_flag_of_peace(donkey, lobster) = True\n# The hare rolls the dice for the cricket\nrolls_dice(hare, cricket) = True\n# The octopus has a card that is white in color\nhas_card_with_color(octopus, white) = True\n# The octopus is holding her keys.\nhas_keys(octopus) = True\n\n# Based on the game state and the rules and preferences, does the goldfish owe money to the kudu?\nquestion = owe(goldfish, money, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the amberjack works more hours than before, then it eats the food of the elephant\nRule2: If the first letter of the name of the amberjack is the same as the first letter of the name of the sun bear, then the amberjack eats the food of the elephant\nRule3: If something does not eat the food of the elephant, then it sings a victory song for the penguin\nRule4: The amberjack does not sing a victory song for the penguin whenever at least one animal steals five points from the cat.\n\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe name of the amberjack is Buddy\nThe amberjack owns a luxury aircraft\nThe name of the sun bear is Beauty.\n\nBased on the game state and the rules and preferences, does the amberjack sing a victory song for the penguin?\nQuestion: Does the amberjack sing a victory song for the penguin?",
        "idx": 8,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the amberjack works more hours than before, then the amberjack eats the food of the elephant\nrule1() = works_more_hours(amberjack) => eat_food(amberjack, food_of(elephant))\n# Rule2: If the amberjack has a name whose first letter is the same as the first letter of the sun bear's name, then the amberjack eats the food of the elephant\nrule2() = first_letter_of(name(amberjack)) == first_letter_of(name(sun_bear)) => eat_food(amberjack, food_of(elephant))\n# Rule3: If you are positive that one of the animals does not eat the food of the elephant, you can be certain that it will sing a victory song for the penguin without a doubt\nrule3(something) = not eat_food(something, food_of(elephant)) => sing_victory_song(something, penguin)\n# Rule4: The amberjack does not sing a victory song for the penguin whenever at least one animal steals five points from the cat.\nrule4() = steal_points(something, 5, cat) => not sing_victory_song(amberjack, penguin)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The amberjack is named Buddy\nname(amberjack, Buddy) = True\n# The amberjack purchased a luxury aircraft\nowns(amberjack, luxury_aircraft) = True\n# The sun bear is named Beauty.\nname(sun_bear, Beauty) = True\n\n# Based on the game state and the rules and preferences, does the amberjack sing a victory song for the penguin?\nquestion = sing_victory_song(amberjack, penguin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the dog has a card with a primary color, then it does not become an actual enemy of the black bear\nRule2: If something knows the defense plan of the canary and rolls the dice for the polar bear, then it attacks the green fields of the puffin\nRule3: If something attacks the green fields whose owner is the puffin, then it prepares armor for the eel\nRule4: If the dog has more than seventeen friends, then it does not become an actual enemy of the black bear\nRule5: If something does not become an enemy of the black bear, then it does not prepare armor for the eel.\n\nRule3 is preferred over Rule5\n\nThe current state of the game is as follows\nThe dog has a red card\nThe dog has 5 playful friends and 2 non-playful friends\nThe dog knows the defensive plans of the canary\nThe dog rolls the dice for the polar bear.\n\nBased on the game state and the rules and preferences, does the dog prepare armor for the eel?\nQuestion: Does the dog prepare armor for the eel?",
        "idx": 9,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the dog, if it has a card with a primary color, then we can conclude that it does not become an actual enemy of the black bear\nrule1() = has(dog, card) and color(card) in primary_colors => not become_enemy(dog, black_bear)\n# Rule2: If you see that something knows the defense plan of the canary and rolls the dice for the polar bear, what can you certainly conclude? You can conclude that it also attacks the green fields of the puffin\nrule2(something) = knows(something, defense_plan, canary) & rolls_dice(something, polar_bear) => attack(something, green_fields, puffin)\n# Rule3: If you are positive that you saw one of the animals attacks the green fields whose owner is the puffin, you can be certain that it will also prepare armor for the eel\nrule3(something) = attack(something, green_fields, puffin) => prepare_armor(something, eel)\n# Rule4: If the dog has more than seventeen friends, then the dog does not become an actual enemy of the black bear\nrule4() = friends(dog) > 17 => not become_enemy(dog, black_bear)\n# Rule5: If you are positive that one of the animals does not become an enemy of the black bear, you can be certain that it will not prepare armor for the eel.\nrule5(something) = not become_enemy(something, black_bear) => not prepare_armor(something, eel)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n\n# The current state of the game is as follows\n# The dog has a card that is red in color, has five friends that are playful and 2 friends that are not, and knows the defensive plans of the canary\nhas(dog, card) = True\ncolor(card, red) = True\nplayful_friends(dog) = 5\nnon_playful_friends(dog) = 2\nknows(dog, defense_plan, canary) = True\n# The dog rolls the dice for the polar bear.\nrolls_dice(dog, polar_bear) = True\n\n# Based on the game state and the rules and preferences, does the dog prepare armor for the eel?\nquestion = prepare_armor(dog, eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kiwi has a card with a primary color, then it holds the same number of points as the spider\nRule2: If the kiwi holds the same number of points as the spider, then the spider does not owe money to the sea bass.\n\nThe current state of the game is as follows\nThe kiwi has a card that is blue in color.\n\nBased on the game state and the rules and preferences, does the spider owe money to the sea bass?\nQuestion: Does the spider owe money to the sea bass?",
        "idx": 10,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kiwi, if it has a card with a primary color, then we can conclude that it holds the same number of points as the spider\nrule1() = has(kiwi, card) and color(card) in primary_colors => points(kiwi) == points(spider)\n# Rule2: The spider does not owe money to the sea bass, in the case where the kiwi holds the same number of points as the spider.\nrule2() = points(kiwi) == points(spider) => not owe(spider, money, sea_bass)\n\n# The current state of the game is as follows\n# The kiwi has a card that is blue in color.\nhas(kiwi, card) = True\ncolor(card, blue) = True\n\n# Based on the game state and the rules and preferences, does the spider owe money to the sea bass?\nquestion = owe(spider, money, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The kiwi does not wink at the turtle whenever at least one animal becomes an actual enemy of the cockroach\nRule2: If something gives a magnifier to the parrot, then it does not offer a job to the turtle\nRule3: If the sheep does not offer a job position to the turtle and the kiwi does not attack the green fields of the turtle, then the turtle gives a magnifier to the grasshopper.\n\nThe current state of the game is as follows\nThe sheep gives a magnifier to the parrot\nThe sun bear becomes an enemy of the cockroach.\n\nBased on the game state and the rules and preferences, does the turtle give a magnifier to the grasshopper?\nQuestion: Does the turtle give a magnifier to the grasshopper?",
        "idx": 11,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The kiwi does not wink at the turtle whenever at least one animal becomes an actual enemy of the cockroach\nrule1() = become_enemy(something, cockroach) => not wink(kiwi, turtle)\n# Rule2: If something gives a magnifier to the parrot, then it does not offer a job to the turtle\nrule2(something) = give(something, magnifier, parrot) => not offer_job_position(something, turtle)\n# Rule3: For the turtle, if the belief is that the sheep does not offer a job position to the turtle and the kiwi does not attack the green fields of the turtle, then you can add \"the turtle gives a magnifier to the grasshopper\" to your conclusions.\nrule3() = not offer_job_position(sheep, turtle) & not attack(kiwi, green_fields, turtle) => give(turtle, magnifier, grasshopper)\n\n# The current state of the game is as follows\n# The sheep gives a magnifier to the parrot\ngive(sheep, magnifier, parrot) = True\n# The sun bear becomes an enemy of the cockroach.\nbecome_enemy(sun_bear, cockroach) = True\n\n# Based on the game state and the rules and preferences, does the turtle give a magnifier to the grasshopper?\nquestion = give(turtle, magnifier, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something learns elementary resource management from the eel, then it winks at the halibut, too\nRule2: If the viperfish took a bike from the store, then it learns the basics of resource management from the eel.\n\nThe current state of the game is as follows\nThe viperfish stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the viperfish wink at the halibut?\nQuestion: Does the viperfish wink at the halibut?",
        "idx": 12,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something learns elementary resource management from the eel, then it winks at the halibut, too\nrule1(something) = learns(something, elementary_resource_management, eel) => wink(something, halibut)\n# Rule2: If the viperfish took a bike from the store, then the viperfish learns the basics of resource management from the eel.\nrule2() = took(viperfish, bike, store) => learns(viperfish, basics_of_resource_management, eel)\n\n# The current state of the game is as follows\n# The viperfish stole a bike from the store.\ntook(viperfish, bike, store) = True\n\n# Based on the game state and the rules and preferences, does the viperfish wink at the halibut?\nquestion = wink(viperfish, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sea bass burns the warehouse that is in possession of the meerkat and the gecko does not proceed to the spot right after the meerkat, then the meerkat will never give a magnifier to the donkey\nRule2: If the sea bass has a name whose first letter is the same as the first letter of the dog's name, then the sea bass burns the warehouse that is in possession of the meerkat\nRule3: The gecko does not proceed to the spot right after the meerkat, in the case where the hummingbird owes money to the gecko\nRule4: If at least one animal raises a flag of peace for the leopard, then the meerkat gives a magnifier to the donkey.\n\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe bat winks at the gecko\nThe name of the dog is Pablo\nThe hummingbird owes money to the gecko\nThe sea bass has a card that is orange in color, and is named Paco\nThe sea bass invented a time machine.\n\nBased on the game state and the rules and preferences, does the meerkat give a magnifier to the donkey?\nQuestion: Does the meerkat give a magnifier to the donkey?",
        "idx": 13,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sea bass burns the warehouse that is in possession of the meerkat and the gecko does not proceed to the spot right after the meerkat, then the meerkat will never give a magnifier to the donkey\nrule1() = burn(warehouse, meerkat, sea_bass) & not proceed(gecko, spot_right_after(meerkat)) => never_give(meerkat, magnifier, donkey)\n# Rule2: If the sea bass has a name whose first letter is the same as the first letter of the dog's name, then the sea bass burns the warehouse that is in possession of the meerkat\nrule2() = first_letter_of(name(sea_bass)) == first_letter_of(name(dog)) => burn(warehouse, meerkat, sea_bass)\n# Rule3: The gecko does not proceed to the spot right after the meerkat, in the case where the hummingbird owes $$$ to the gecko\nrule3() = owe(hummingbird, money, gecko) => not proceed(gecko, spot_right_after(meerkat))\n# Rule4: If at least one animal raises a flag of peace for the leopard, then the meerkat gives a magnifier to the donkey.\nrule4() = raise_flag_of_peace(something, leopard) => give(meerkat, magnifier, donkey)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The bat winks at the gecko\nwink(bat, gecko) = True\n# The dog is named Pablo\nname(dog, Pablo) = True\n# The hummingbird owes money to the gecko\nowe(hummingbird, money, gecko) = True\n# The sea bass has a card that is orange in color, and is named Paco\nhas(sea_bass, card) = True\ncolor(card, orange) = True\nname(sea_bass, Paco) = True\n# The sea bass invented a time machine.\ninvented(sea_bass, time_machine) = True\n\n# Based on the game state and the rules and preferences, does the meerkat give a magnifier to the donkey?\nquestion = give(meerkat, magnifier, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grizzly bear has a musical instrument, then it steals five points from the oscar\nRule2: If the turtle knows the defensive plans of the cockroach and the meerkat does not eat the food that belongs to the cockroach, then the cockroach winks at the bat\nRule3: The bat respects the panther whenever at least one animal owes money to the oscar.\n\nThe current state of the game is as follows\nThe cockroach has a banana-strawberry smoothie\nThe grizzly bear has a saxophone\nThe meerkat eats the food of the cockroach\nThe turtle knows the defensive plans of the cockroach.\n\nBased on the game state and the rules and preferences, does the bat respect the panther?\nQuestion: Does the bat respect the panther?",
        "idx": 14,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grizzly bear has a musical instrument, then the grizzly bear steals five of the points of the oscar\nrule1() = has(grizzly_bear, musical_instrument) => steal_points(grizzly_bear, 5, oscar)\n# Rule2: If the turtle knows the defensive plans of the cockroach and the meerkat does not eat the food that belongs to the cockroach, then, inevitably, the cockroach winks at the bat\nrule2() = knows(turtle, defensive_plans, cockroach) & not eat_food(meerkat, food_of(cockroach)) => wink(cockroach, bat)\n# Rule3: The bat respects the panther whenever at least one animal owes money to the oscar.\nrule3() = owes_money(something, oscar) => respect(bat, panther)\n\n# The current state of the game is as follows\n# The cockroach has a banana-strawberry smoothie\nhas(cockroach, banana_strawberry_smoothie) = True\n# The grizzly bear has a saxophone\nhas(grizzly_bear, saxophone) = True\n# The meerkat eats the food of the cockroach\neat_food(meerkat, food_of(cockroach)) = True\n# The turtle knows the defensive plans of the cockroach.\nknows(turtle, defensive_plans, cockroach) = True\n\n# Based on the game state and the rules and preferences, does the bat respect the panther?\nquestion = respect(bat, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something becomes an actual enemy of the parrot and holds the same number of points as the phoenix, then it will sing a song of victory for the goldfish.\nRule2: If something proceeds to the spot right after the cheetah, then it holds the same number of points as the phoenix.\nRule3: If something knocks down the fortress that belongs to the hummingbird, then the cricket becomes an actual enemy of the parrot.\n\nThe current state of the game is as follows\nThe cricket proceeds to the spot right after the cheetah.\nThe sheep knocks down the fortress of the hummingbird.\nThe catfish does not become an enemy of the cricket.\nThe kangaroo does not sing a victory song for the cricket.\n\nBased on the game state and the rules and preferences, does the cricket sing a victory song for the goldfish?\nQuestion: Does the cricket sing a victory song for the goldfish?",
        "idx": 15,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something becomes an actual enemy of the parrot and also holds an equal number of points as the phoenix because in this case it will surely sing a song of victory for the goldfish (this may or may not be problematic)\nrule1(something) = become_enemy(something, parrot) & points(something) == points(phoenix) => sing_victory_song(something, goldfish)\n# Rule2: If something proceeds to the spot right after the cheetah, then it holds the same number of points as the phoenix, too\nrule2(something) = proceeds_to_spot_right_after(something, cheetah) => points(something) == points(phoenix)\n# Rule3: The cricket becomes an actual enemy of the parrot whenever at least one animal knocks down the fortress that belongs to the hummingbird.\nrule3() = knock_down_fortress(something, hummingbird) => become_enemy(cricket, parrot)\n\n# The current state of the game is as follows\n# The cricket proceeds to the spot right after the cheetah\nproceeds_to_spot_right_after(cricket, cheetah) = True\n# The sheep knocks down the fortress of the hummingbird\nknock_down_fortress(sheep, hummingbird) = True\n# The catfish does not become an enemy of the cricket\nbecome_enemy(catfish, cricket) = False\n# The kangaroo does not sing a victory song for the cricket.\nsing_victory_song(kangaroo, cricket) = False\n\n# Based on the game state and the rules and preferences, does the cricket sing a victory song for the goldfish?\nquestion = sing_victory_song(cricket, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hummingbird steals five of the points of the cheetah, then the cheetah is not going to steal five of the points of the cat\nRule2: If the donkey winks at the hummingbird and the polar bear burns the warehouse of the hummingbird, then the hummingbird steals five of the points of the cheetah\nRule3: If the hummingbird has a high-quality paper, then the hummingbird does not steal five of the points of the cheetah.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe donkey winks at the hummingbird\nThe polar bear burns the warehouse of the hummingbird\n\nBased on the game state and the rules and preferences, does the cheetah steal five points from the cat?\nQuestion: Does the cheetah steal five points from the cat?",
        "idx": 16,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hummingbird steals five of the points of the cheetah, then the cheetah is not going to steal five of the points of the cat\nrule1() = steal_points(hummingbird, 5, cheetah) => not steal_points(cheetah, 5, cat)\n# Rule2: If the donkey winks at the hummingbird and the polar bear burns the warehouse of the hummingbird, then the hummingbird steals five of the points of the cheetah\nrule2() = wink(donkey, hummingbird) & burn_warehouse(polar_bear, hummingbird) => steal_points(hummingbird, 5, cheetah)\n# Rule3: If the hummingbird has a high-quality paper, then the hummingbird does not steal five of the points of the cheetah.\nrule3() = has(hummingbird, high_quality_paper) => not steal_points(hummingbird, 5, cheetah)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The donkey winks at the hummingbird\nwink(donkey, hummingbird) = True\n# The polar bear burns the warehouse of the hummingbird\nburn_warehouse(polar_bear, hummingbird) = True\n\n# Based on the game state and the rules and preferences, does the cheetah steal five points from the cat?\nquestion = steal_points(cheetah, 5, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish killed the mayor, then it knocks down the fortress that belongs to the panda bear\nRule2: If the grizzly bear has a card and the color of the card is one of the rainbow colors, then it sings a victory song for the panda bear\nRule3: If at least one animal respects the black bear, then the panda bear becomes an enemy of the kudu\nRule4: If something eats the food of the sea bass, then it does not sing a victory song for the panda bear\nRule5: If the belief is that the blobfish gives a magnifying glass to the panda bear and the grizzly bear sings a song of victory for the panda bear, then you can add \"the panda bear owes $$$ to the elephant\" to your conclusions\nRule6: If something steals five points from the viperfish but does not become an actual enemy of the kudu, then it does not owe money to the elephant.\n\nRule4 is preferred over Rule2\nRule5 is preferred over Rule6\n\nThe current state of the game is as follows\nThe blobfish assassinated the mayor\nThe grizzly bear has a card that is indigo in color\nThe oscar burns the warehouse of the black bear.\n\nBased on the game state and the rules and preferences, does the panda bear owe money to the elephant?\nQuestion: Does the panda bear owe money to the elephant?",
        "idx": 17,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the blobfish, if it killed the mayor, then we can conclude that it knocks down the fortress that belongs to the panda bear\nrule1() = killed(blobfish, mayor) => knocks_down(blobfish, fortress, panda_bear)\n# Rule2: If the grizzly bear has a card whose color is one of the rainbow colors, then the grizzly bear sings a victory song for the panda bear\nrule2() = has(grizzly_bear, card) and color(card) in rainbow_colors => sings_song_of_victory(grizzly_bear, panda_bear)\n# Rule3: If at least one animal respects the black bear, then the panda bear becomes an enemy of the kudu\nrule3(something) = respects(something, black_bear) => become_enemy(panda_bear, kudu)\n# Rule4: If something eats the food that belongs to the sea bass, then it does not sing a song of victory for the panda bear\nrule4() = eats(something, food_of(sea_bass)) => not sings_song_of_victory(something, panda_bear)\n# Rule5: For the panda bear, if the belief is that the blobfish gives a magnifying glass to the panda bear and the grizzly bear sings a song of victory for the panda bear, then you can add \"the panda bear owes $$$ to the elephant\" to your conclusions\nrule5() = belief(give(blobfish, magnifying_glass, panda_bear)) & belief(sings_song_of_victory(grizzly_bear, panda_bear)) => add_conclusion(\"the panda bear owes $$$ to the elephant\")\n# Rule6: If you see that something steals five points from the viperfish but does not become an actual enemy of the kudu, what can you certainly conclude? You can conclude that it does not owe money to the elephant.\nrule6(something) = steals_points(something, 5, viperfish) & not become_enemy(something, kudu) => conclude(not owe(something, money, elephant))\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n\n# The current state of the game is as follows\n# The blobfish assassinated the mayor\nkilled(blobfish, mayor) = True\n# The grizzly bear has a card that is indigo in color\nhas(grizzly_bear, card) = True\ncolor(card, indigo) = True\n# The oscar burns the warehouse of the black bear.\nburns(oscar, warehouse, black_bear) = True\n\n# Based on the game state and the rules and preferences, does the panda bear owe money to the elephant?\nquestion = owe(panda_bear, money, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the koala has a high-quality paper, then it becomes an enemy of the cockroach\nRule2: If something steals five points from the cat, then the bat becomes an enemy of the canary\nRule3: If something owes money to the goldfish, then it rolls the dice for the canary\nRule4: If the koala has a card and the color of the card appears in the flag of Belgium, then it becomes an enemy of the cockroach\nRule5: If the belief is that the bat becomes an enemy of the canary and the sea bass rolls the dice for the canary, then the canary eats the food of the amberjack.\n\nThe current state of the game is as follows\nThe ferret steals five points from the cat\nThe koala has a green card and does not know the defensive plans of the hippopotamus\nThe koala published a high-quality paper\nThe sea bass owes money to the goldfish.\n\nBased on the game state and the rules and preferences, does the canary eat the food of the amberjack?\nQuestion: Does the canary eat the food of the amberjack?",
        "idx": 18,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the koala has a high-quality paper, then the koala becomes an enemy of the cockroach\nrule1() = has(koala, high_quality_paper) => become_enemy(koala, cockroach)\n# Rule2: If at least one animal steals five points from the cat, then the bat becomes an enemy of the canary\nrule2() = steal_points(something, 5, cat) => become_enemy(bat, canary)\n# Rule3: If something owes $$$ to the goldfish, then it rolls the dice for the canary, too\nrule3(something) = owe(something, $$$, goldfish) => roll_dice(something, canary)\n# Rule4: Regarding the koala, if it has a card whose color appears in the flag of Belgium, then we can conclude that it becomes an enemy of the cockroach\nrule4() = has(koala, card) and color(card) in colors_of_Belgium_flag => become_enemy(koala, cockroach)\n# Rule5: For the canary, if the belief is that the bat becomes an enemy of the canary and the sea bass rolls the dice for the canary, then you can add \"the canary eats the food of the amberjack\" to your conclusions.\nrule5() = believe(become_enemy(bat, canary)) & roll_dice(sea_bass, canary) => eat_food(canary, food_of(amberjack))\n\n# The current state of the game is as follows\n# The ferret steals five points from the cat\nsteal_points(ferret, 5, cat) = True\n# The koala has a card that is green in color, and does not know the defensive plans of the hippopotamus\nhas(koala, card) = True\ncolor(card, green) = True\nnot know(koala, defensive_plans, hippopotamus) = True\n# The koala published a high-quality paper\npublished(koala, high_quality_paper) = True\n# The sea bass owes money to the goldfish.\nowe(sea_bass, $$$, goldfish) = True\n\n# Based on the game state and the rules and preferences, does the canary eat the food of the amberjack?\nquestion = eat_food(canary, food_of(amberjack))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the snail sings a victory song for the starfish, then the starfish knocks down the fortress that belongs to the gecko\nRule2: If something knocks down the fortress of the gecko, then it does not need support from the black bear.\n\nThe current state of the game is as follows\nThe snail sings a victory song for the starfish.\n\nBased on the game state and the rules and preferences, does the starfish need support from the black bear?\nQuestion: Does the starfish need support from the black bear?",
        "idx": 19,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the snail sings a victory song for the starfish, then the starfish knocks down the fortress that belongs to the gecko\nrule1() = sings(snail, victory_song, starfish) => knocks_down(starfish, fortress, gecko)\n# Rule2: If something knocks down the fortress of the gecko, then it does not need support from the black bear.\nrule2(something) = knocks_down(something, fortress, gecko) => not need_support(something, black_bear)\n\n# The current state of the game is as follows\n# The snail sings a victory song for the starfish.\nsings(snail, victory_song, starfish) = True\n\n# Based on the game state and the rules and preferences, does the starfish need support from the black bear?\nquestion = need_support(starfish, black_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cheetah has a card whose color starts with the letter \"b\", then it winks at the zander\nRule2: If the cheetah has more than two friends, then it does not wink at the zander\nRule3: If the jellyfish has a name whose first letter is the same as the first letter of the baboon's name, then it proceeds to the spot that is right after the spot of the zander\nRule4: If the cheetah has a name whose first letter is the same as the first letter of the hummingbird's name, then it winks at the zander\nRule5: If the cheetah shows all her cards to the zander and the jellyfish proceeds to the spot right after the zander, then the zander eats the food of the swordfish.\n\nRule1 is preferred over Rule2\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe name of the baboon is Milo\nThe cheetah has a black card\nThe name of the cheetah is Peddi\nThe name of the hummingbird is Lily\nThe name of the jellyfish is Max\n\nBased on the game state and the rules and preferences, does the zander eat the food of the swordfish?\nQuestion: Does the zander eat the food of the swordfish?",
        "idx": 20,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cheetah has a card whose color starts with the letter \"b\", then the cheetah winks at the zander\nrule1() = has(cheetah, card) and starts_with(color(card), \"b\") => wink(cheetah, zander)\n# Rule2: Regarding the cheetah, if it has more than two friends, then we can conclude that it does not wink at the zander\nrule2() = friends(cheetah) > 2 => not wink(cheetah, zander)\n# Rule3: Regarding the jellyfish, if it has a name whose first letter is the same as the first letter of the baboon's name, then we can conclude that it proceeds to the spot that is right after the spot of the zander\nrule3() = first_letter_of(name(jellyfish)) == first_letter_of(name(baboon)) => proceed(jellyfish, spot_after(zander))\n# Rule4: If the cheetah has a name whose first letter is the same as the first letter of the hummingbird's name, then the cheetah winks at the zander\nrule4() = first_letter_of(name(cheetah)) == first_letter_of(name(hummingbird)) => wink(cheetah, zander)\n# Rule5: If the cheetah shows her cards (all of them) to the zander and the jellyfish proceeds to the spot right after the zander, then the zander eats the food of the swordfish.\nrule5() = show_cards(cheetah, zander) & proceed(jellyfish, spot_after(zander)) => eat_food(zander, food_of(swordfish))\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The baboon is named Milo\nname(baboon, Milo) = True\n# The cheetah has a card that is black in color, and is named Peddi\nhas(cheetah, card) = True\ncolor(card, black) = True\nname(cheetah, Peddi) = True\n# The hummingbird is named Lily\nname(hummingbird, Lily) = True\n# The jellyfish is named Max.\nname(jellyfish, Max) = True\n\n# Based on the game state and the rules and preferences, does the zander eat the food of the swordfish?\nquestion = eat_food(zander, food_of(swordfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the carp needs the support of the baboon, then the baboon is not going to proceed to the spot that is right after the spot of the eel\nRule2: If the wolverine is a fan of Chris Ronaldo, then it does not attack the green fields of the eel\nRule3: The wolverine attacks the green fields whose owner is the eel whenever at least one animal burns the warehouse that is in possession of the buffalo\nRule4: If the baboon proceeds to the spot that is right after the spot of the eel and the wolverine attacks the green fields of the eel, then the eel will not steal five points from the grasshopper\nRule5: If the first letter of the name of the baboon is the same as the first letter of the name of the turtle, then the baboon proceeds to the spot right after the eel\nRule6: If the baboon has fewer than 5 friends, then it proceeds to the spot right after the eel\nRule7: If something respects the ferret, then it will not need support from the gecko\nRule8: If something does not need support from the gecko, then it will steal five points from the grasshopper.\n\nRule1 is preferred over Rule5\nRule1 is preferred over Rule6\nRule3 is preferred over Rule2\nRule8 is preferred over Rule4\n\nThe current state of the game is as follows\nThe amberjack burns the warehouse of the buffalo\nThe baboon has 15 friends\nThe name of the baboon is Peddi\nThe eel respects the ferret\nThe name of the turtle is Pashmak\nThe wolverine has a white card and hates Chris Ronaldo.\n\nBased on the game state and the rules and preferences, does the eel steal five points from the grasshopper?\nQuestion: Does the eel steal five points from the grasshopper?",
        "idx": 21,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the carp needs the support of the baboon, then the baboon is not going to proceed to the spot that is right after the spot of the eel\nrule1() = needs_support(carp, baboon) => not proceed_to_spot(baboon, right_after_spot(eel))\n# Rule2: Regarding the wolverine, if it is a fan of Chris Ronaldo, then we can conclude that it does not attack the green fields of the eel\nrule2() = fan_of(wolverine, Chris_Ronaldo) => not attack_green_fields(wolverine, eel)\n# Rule3: The wolverine attacks the green fields whose owner is the eel whenever at least one animal burns the warehouse that is in possession of the buffalo\nrule3() = burns_warehouse(something, buffalo) => attack_green_fields(wolverine, eel)\n# Rule4: If the baboon proceeds to the spot that is right after the spot of the eel and the wolverine attacks the green fields of the eel, then the eel will not steal five points from the grasshopper\nrule4() = proceed_to_spot(baboon, right_after_spot(eel)) & attack_green_fields(wolverine, eel) => not steal_points(eel, 5, grasshopper)\n# Rule5: Regarding the baboon, if it has a name whose first letter is the same as the first letter of the turtle's name, then we can conclude that it proceeds to the spot right after the eel\nrule5() = first_letter_of(name(baboon)) == first_letter_of(name(turtle)) => proceed_to_spot(baboon, right_after_spot(eel))\n# Rule6: Regarding the baboon, if it has fewer than 5 friends, then we can conclude that it proceeds to the spot right after the eel\nrule6() = friends(baboon) < 5 => proceed_to_spot(baboon, right_after_spot(eel))\n# Rule7: If you are positive that you saw one of the animals respects the ferret, you can be certain that it will not need support from the gecko\nrule7(something) = respects(something, ferret) => not needs_support(something, gecko)\n# Rule8: If you are positive that one of the animals does not need support from the gecko, you can be certain that it will steal five points from the grasshopper without a doubt.\nrule8(something) = not needs_support(something, gecko) => steal_points(something, 5, grasshopper)\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule8 is preferred over Rule4\norder(rule8) > order(rule4) = True\n\n# The current state of the game is as follows\n# The amberjack burns the warehouse of the buffalo\nburns_warehouse(amberjack, buffalo) = True\n# The baboon has 15 friends\nfriends(baboon) = 15\n# The baboon is named Peddi\nname(baboon, Peddi) = True\n# The eel respects the ferret\nrespects(eel, ferret) = True\n# The turtle is named Pashmak\nname(turtle, Pashmak) = True\n# The wolverine has a card that is white in color, and hates Chris Ronaldo.\nhas(wolverine, card) = True\ncolor(card, white) = True\nhates(wolverine, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the eel steal five points from the grasshopper?\nquestion = steal_points(eel, 5, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale does not know the defense plan of the swordfish and the cheetah burns the warehouse of the swordfish, then the swordfish will not raise a flag of peace for the gecko\nRule2: The cheetah burns the warehouse that is in possession of the swordfish whenever an animal gives a magnifying glass to the moose\nRule3: If the whale has something to sit on, then the whale does not know the defense plan of the swordfish\nRule4: If the zander raises a flag of peace for the swordfish, then the swordfish raises a flag of peace for the gecko\nRule5: If something respects the pig, then it knows the defense plan of the swordfish.\n\nRule4 is preferred over Rule1\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe squirrel gives a magnifying glass to the moose\nThe whale has a love seat sofa.\n\nBased on the game state and the rules and preferences, does the swordfish raise a peace flag for the gecko?\nQuestion: Does the swordfish raise a peace flag for the gecko?",
        "idx": 22,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the whale does not know the defense plan of the swordfish however the cheetah burns the warehouse of the swordfish, then the swordfish will not raise a flag of peace for the gecko\nrule1() = not know(whale, defense_plan, swordfish) & burn(cheetah, warehouse, swordfish) => not raise_flag_of_peace(swordfish, gecko)\n# Rule2: The cheetah burns the warehouse that is in possession of the swordfish whenever at least one animal gives a magnifying glass to the moose\nrule2() = give(something, magnifying_glass, moose) => burn(cheetah, warehouse, swordfish)\n# Rule3: If the whale has something to sit on, then the whale does not know the defense plan of the swordfish\nrule3() = has(whale, something_to_sit_on) => not know(whale, defense_plan, swordfish)\n# Rule4: If the zander raises a flag of peace for the swordfish, then the swordfish raises a flag of peace for the gecko\nrule4() = raise_flag_of_peace(zander, swordfish) => raise_flag_of_peace(swordfish, gecko)\n# Rule5: If you are positive that you saw one of the animals respects the pig, you can be certain that it will also know the defense plan of the swordfish.\nrule5(something) = respects(something, pig) => know(something, defense_plan, swordfish)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The squirrel gives a magnifier to the moose\ngive(squirrel, magnifying_glass, moose) = True\n# The whale has a love seat sofa.\nhas(whale, love_seat_sofa) = True\n\n# Based on the game state and the rules and preferences, does the swordfish raise a peace flag for the gecko?\nquestion = raise_flag_of_peace(swordfish, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knows the defensive plans of the dog and gives a magnifying glass to the dog, then it also rolls the dice for the eagle\nRule2: If something offers a job to the parrot, then it does not roll the dice for the lobster\nRule3: If something rolls the dice for the eagle, then the canary rolls the dice for the lobster.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe aardvark gives a magnifier to the dog\nThe aardvark does not know the defensive plans of the dog.\n\nBased on the game state and the rules and preferences, does the canary roll the dice for the lobster?\nQuestion: Does the canary roll the dice for the lobster?",
        "idx": 23,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something knows the defensive plans of the dog and gives a magnifying glass to the dog, what can you certainly conclude? You can conclude that it also rolls the dice for the eagle\nrule1(something) = knows(something, defensive_plans, dog) & give(something, magnifying_glass, dog) => rolls_dice(something, eagle)\n# Rule2: If something offers a job to the parrot, then it does not roll the dice for the lobster\nrule2(something) = offer_job_position(something, parrot) => not rolls_dice(something, lobster)\n# Rule3: If at least one animal rolls the dice for the eagle, then the canary rolls the dice for the lobster.\nrule3() = rolls_dice(something, eagle) => rolls_dice(canary, lobster)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The aardvark gives a magnifier to the dog\ngive(aardvark, magnifying_glass, dog) = True\n# The aardvark does not know the defensive plans of the dog.\nknows(aardvark, defensive_plans, dog) = False\n\n# Based on the game state and the rules and preferences, does the canary roll the dice for the lobster?\nquestion = rolls_dice(canary, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grizzly bear has something to drink, then it holds an equal number of points as the cheetah\nRule2: If something holds an equal number of points as the cheetah, then it learns the basics of resource management from the jellyfish\nRule3: If the grizzly bear has a musical instrument, then it holds the same number of points as the cheetah.\n\nThe current state of the game is as follows\nThe grizzly bear has a cappuccino\nThe grizzly bear has a couch.\n\nBased on the game state and the rules and preferences, does the grizzly bear learn the basics of resource management from the jellyfish?\nQuestion: Does the grizzly bear learn the basics of resource management from the jellyfish?",
        "idx": 24,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grizzly bear has something to drink, then the grizzly bear holds an equal number of points as the cheetah\nrule1() = has(grizzly_bear, drink) => points(grizzly_bear) == points(cheetah)\n# Rule2: If you are positive that you saw one of the animals holds an equal number of points as the cheetah, you can be certain that it will also learn the basics of resource management from the jellyfish\nrule2(something) = points(something) == points(cheetah) => learn(something, basics_of_resource_management, jellyfish)\n# Rule3: If the grizzly bear has a musical instrument, then the grizzly bear holds the same number of points as the cheetah.\nrule3() = has(grizzly_bear, musical_instrument) => points(grizzly_bear) == points(cheetah)\n\n# The current state of the game is as follows\n# The grizzly bear has a cappuccino\nhas(grizzly_bear, cappuccino) = True\n# The grizzly bear has a couch.\nhas(grizzly_bear, couch) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear learn the basics of resource management from the jellyfish?\nquestion = learn(grizzly_bear, basics_of_resource_management, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the hummingbird is the same as the first letter of the name of the cow, then the hummingbird does not proceed to the spot right after the moose\nRule2: If the hummingbird has a musical instrument, then it respects the cow\nRule3: If something proceeds to the spot that is right after the spot of the moose but does not respect the cow, then it will not remove one of the pieces of the halibut\nRule4: The hummingbird removes one of the pieces of the halibut whenever at least one animal respects the cricket\nRule5: If the hummingbird purchased a time machine, then it proceeds to the spot that is right after the spot of the moose\nRule6: If the hummingbird has more than three friends, then it proceeds to the spot right after the moose\nRule7: If something winks at the jellyfish, then the hummingbird does not respect the cow.\n\nRule2 is preferred over Rule7\nRule4 is preferred over Rule3\nRule5 is preferred over Rule1\nRule6 is preferred over Rule1\n\nThe current state of the game is as follows\nThe buffalo winks at the jellyfish\nThe name of the cow is Casper\nThe hummingbird has a green card\nThe name of the hummingbird is Mojo\nThe hummingbird has 7 friends\nThe hummingbird invented a time machine.\n\nBased on the game state and the rules and preferences, does the hummingbird remove from the board one of the pieces of the halibut?\nQuestion: Does the hummingbird remove from the board one of the pieces of the halibut?",
        "idx": 25,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hummingbird, if it has a name whose first letter is the same as the first letter of the cow's name, then we can conclude that it does not proceed to the spot right after the moose\nrule1() = first_letter_of(name(hummingbird)) == first_letter_of(name(cow)) => not proceed_to_spot_right_after(hummingbird, moose)\n# Rule2: Regarding the hummingbird, if it has a musical instrument, then we can conclude that it respects the cow\nrule2() = has(hummingbird, musical_instrument) => respects(hummingbird, cow)\n# Rule3: Be careful when something proceeds to the spot that is right after the spot of the moose but does not respect the cow because in this case it will, surely, not remove one of the pieces of the halibut (this may or may not be problematic)\nrule3() = proceed_to_spot_right_after(something, moose) & not respects(something, cow) => not remove_piece(hummingbird, halibut)\n# Rule4: The hummingbird removes one of the pieces of the halibut whenever at least one animal respects the cricket\nrule4() = respects(something, cricket) => remove_piece(hummingbird, halibut)\n# Rule5: Regarding the hummingbird, if it purchased a time machine, then we can conclude that it proceeds to the spot that is right after the spot of the moose\nrule5() = purchased(hummingbird, time_machine) => proceed_to_spot_right_after(hummingbird, moose)\n# Rule6: Regarding the hummingbird, if it has more than three friends, then we can conclude that it proceeds to the spot right after the moose\nrule6() = friends(hummingbird) > 3 => proceed_to_spot_right_after(hummingbird, moose)\n# Rule7: If at least one animal winks at the jellyfish, then the hummingbird does not respect the cow.\nrule7() = wink_at(something, jellyfish) => not respects(hummingbird, cow)\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n\n# The current state of the game is as follows\n# The buffalo winks at the jellyfish\nwink_at(buffalo, jellyfish) = True\n# The cow is named Casper\nname(cow, Casper) = True\n# The hummingbird has a card that is green in color, and is named Mojo\nhas(hummingbird, card) = True\ncolor(card, green) = True\nname(hummingbird, Mojo) = True\n# The hummingbird has seven friends, and invented a time machine.\nfriends(hummingbird) = 7\ninvented(hummingbird, time_machine) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird remove from the board one of the pieces of the halibut?\nquestion = remove_piece(hummingbird, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The spider will not wink at the cow if the eel does not know the defensive plans of the spider\nRule2: If the first letter of the name of the donkey is the same as the first letter of the name of the penguin, then the donkey learns the basics of resource management from the cow\nRule3: If the donkey has fewer than fourteen friends, then it learns elementary resource management from the cow\nRule4: If the spider does not wink at the cow but the donkey learns elementary resource management from the cow, then the cow offers a job position to the hare.\n\nThe current state of the game is as follows\nThe donkey has 7 friends\nThe name of the donkey is Mojo\nThe eel knows the defensive plans of the spider\nThe name of the penguin is Lola\nThe carp does not respect the spider.\n\nBased on the game state and the rules and preferences, does the cow offer a job to the hare?\nQuestion: Does the cow offer a job position to the hare?",
        "idx": 26,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The spider will not wink at the cow, in the case where the eel does not know the defensive plans of the spider\nrule1() = not know(eel, defensive_plans, spider) => not wink(spider, cow)\n# Rule2: Regarding the donkey, if it has a name whose first letter is the same as the first letter of the penguin's name, then we can conclude that it learns the basics of resource management from the cow\nrule2() = first_letter_of(name(donkey)) == first_letter_of(name(penguin)) => learn(donkey, basics_of_resource_management, cow)\n# Rule3: If the donkey has fewer than fourteen friends, then the donkey learns elementary resource management from the cow\nrule3() = friends(donkey) < 14 => learn(donkey, elementary_resource_management, cow)\n# Rule4: If the spider does not wink at the cow but the donkey learns elementary resource management from the cow, then the cow offers a job position to the hare unavoidably.\nrule4() = not wink(spider, cow) & learn(donkey, elementary_resource_management, cow) => offer_job_position(cow, hare)\n\n# The current state of the game is as follows\n# The donkey has seven friends\nfriends(donkey) = 7\n# The donkey is named Mojo\nname(donkey, Mojo) = True\n# The eel knows the defensive plans of the spider\nknow(eel, defensive_plans, spider) = True\n# The penguin is named Lola\nname(penguin, Lola) = True\n# The carp does not respect the spider.\nrespect(carp, spider) = False\n\n# Based on the game state and the rules and preferences, does the cow offer a job to the hare?\nquestion = offer_job_position(cow, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something needs support from the amberjack but does not sing a victory song for the salmon, then it gives a magnifying glass to the polar bear.\nRule2: If the moose has a card and the color of the card is one of the rainbow colors, then it needs the support of the amberjack.\nRule3: If something proceeds to the spot that is right after the spot of the panda bear, then it does not sing a song of victory for the salmon.\nRule4: If the first letter of the name of the moose is the same as the first letter of the name of the cockroach, then the moose needs the support of the amberjack.\n\nThe current state of the game is as follows\nThe name of the cockroach is Milo\nThe moose has a black card\nThe name of the moose is Mojo\nThe moose proceeds to the spot right after the panda bear.\n\nBased on the game state and the rules and preferences, does the moose give a magnifier to the polar bear?\nQuestion: Does the moose give a magnifying glass to the polar bear?",
        "idx": 27,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something needs support from the amberjack but does not sing a victory song for the salmon because in this case it will, surely, give a magnifying glass to the polar bear (this may or may not be problematic)\nrule1(something) = needs_support(something, amberjack) & not sing_victory_song(something, salmon) => give(something, magnifying_glass, polar_bear)\n# Rule2: Regarding the moose, if it has a card whose color is one of the rainbow colors, then we can conclude that it needs the support of the amberjack\nrule2() = has(moose, card) & color(card) in rainbow_colors => needs_support(moose, amberjack)\n# Rule3: If you are positive that you saw one of the animals proceeds to the spot that is right after the spot of the panda bear, you can be certain that it will not sing a song of victory for the salmon\nrule3(something) = saw(something, proceed_to_spot_after(panda_bear)) => not sing_victory_song(something, salmon)\n# Rule4: Regarding the moose, if it has a name whose first letter is the same as the first letter of the cockroach's name, then we can conclude that it needs the support of the amberjack.\nrule4() = first_letter_of(name(moose)) == first_letter_of(name(cockroach)) => needs_support(moose, amberjack)\n\n# The current state of the game is as follows\n# The cockroach is named Milo\nname(cockroach, Milo) = True\n# The moose has a card that is black in color, and is named Mojo\nhas(moose, card) = True\ncolor(card, black) = True\nname(moose, Mojo) = True\n# The moose proceeds to the spot right after the panda bear.\nproceed_to_spot_after(moose, panda_bear) = True\n\n# Based on the game state and the rules and preferences, does the moose give a magnifier to the polar bear?\nquestion = give(moose, magnifying_glass, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something prepares armor for the kudu and also winks at the penguin, then it will surely not steal five points from the ferret.\nRule2: If the black bear has a card whose color starts with the letter \"i\", then it prepares armor for the kudu.\nRule3: If something attacks the green fields whose owner is the squid, then the black bear does not wink at the penguin.\nRule4: If the salmon shows all her cards to the black bear and the sheep does not proceed to the spot that is right after the spot of the black bear, then the black bear winks at the penguin.\nRule5: If the hummingbird needs support from the black bear, then the black bear unquestionably steals five of the points of the ferret.\n\nRule3 is preferred over Rule4\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe black bear has a card that is indigo in color.\nThe salmon shows all her cards to the black bear.\nThe sheep does not proceed to the spot right after the black bear.\n\nBased on the game state and the rules and preferences, does the black bear steal five points from the ferret?\nQuestion: Does the black bear steal five points from the ferret?",
        "idx": 28,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something prepares armor for the kudu and also winks at the penguin because in this case it will surely not steal five points from the ferret (this may or may not be problematic)\nrule1() = prepare_armor(something, kudu) & wink(something, penguin) => not steal_points(black_bear, 5, ferret)\n# Rule2: Regarding the black bear, if it has a card whose color starts with the letter \"i\", then we can conclude that it prepares armor for the kudu\nrule2() = has(black_bear, card) & starts_with(color(card), \"i\") => prepare_armor(black_bear, kudu)\n# Rule3: If at least one animal attacks the green fields whose owner is the squid, then the black bear does not wink at the penguin\nrule3() = attacks(something, green_fields, owner(squid)) => not wink(black_bear, penguin)\n# Rule4: For the black bear, if the belief is that the salmon shows her cards (all of them) to the black bear and the sheep does not proceed to the spot that is right after the spot of the black bear, then you can add \"the black bear winks at the penguin\" to your conclusions\nrule4() = shows_all_cards(salmon, black_bear) & not proceed(sheep, spot_right_after(black_bear)) => wink(black_bear, penguin)\n# Rule5: The black bear unquestionably steals five of the points of the ferret, in the case where the hummingbird needs support from the black bear.\nrule5() = needs_support(hummingbird, black_bear) => steal_points(black_bear, 5, ferret)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The black bear has a card that is indigo in color\nhas(black_bear, card) = True\ncolor(card, indigo) = True\n# The salmon shows all her cards to the black bear\nshows_all_cards(salmon, black_bear) = True\n# The sheep does not proceed to the spot right after the black bear.\nproceed(sheep, spot_right_after(black_bear)) = False\n\n# Based on the game state and the rules and preferences, does the black bear steal five points from the ferret?\nquestion = steal_points(black_bear, 5, ferret)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something winks at the elephant, then the lobster gives a magnifier to the eagle\nRule2: If something steals five points from the hare and does not become an actual enemy of the sea bass, then it does not wink at the elephant\nRule3: If the pig prepares armor for the lobster and the catfish does not offer a job position to the lobster, then the lobster does not give a magnifier to the eagle\nRule4: If something does not give a magnifying glass to the caterpillar, then it does not offer a job position to the lobster\nRule5: If the oscar has fewer than 5 friends, then it winks at the elephant.\n\nRule1 is preferred over Rule3\nRule2 is preferred over Rule5\n\nThe current state of the game is as follows\nThe oscar eats the food of the sea bass\nThe oscar has 19 friends\nThe catfish does not give a magnifier to the caterpillar\n\nBased on the game state and the rules and preferences, does the lobster give a magnifier to the eagle?\nQuestion: Does the lobster give a magnifier to the eagle?",
        "idx": 29,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The lobster gives a magnifier to the eagle whenever at least one animal winks at the elephant\nrule1() = wink(something, elephant) => give(lobster, magnifier, eagle)\n# Rule2: Be careful when something does not become an actual enemy of the sea bass but steals five of the points of the hare because in this case it certainly does not wink at the elephant (this may or may not be problematic)\nrule2(something) = not become_enemy(something, sea_bass) & steal_points(something, hare, 5) => not wink(something, elephant)\n# Rule3: For the lobster, if the belief is that the pig prepares armor for the lobster and the catfish does not offer a job position to the lobster, then you can add \"the lobster does not give a magnifier to the eagle\" to your conclusions\nrule3() = belief(prepare_armor(pig, lobster)) & not offer_job_position(catfish, lobster) => not give(lobster, magnifier, eagle)\n# Rule4: If something does not give a magnifying glass to the caterpillar, then it does not offer a job position to the lobster\nrule4(something) = not give(something, magnifying_glass, caterpillar) => not offer_job_position(something, lobster)\n# Rule5: Regarding the oscar, if it has fewer than 5 friends, then we can conclude that it winks at the elephant.\nrule5() = friends(oscar) < 5 => wink(oscar, elephant)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n\n# The current state of the game is as follows\n# The oscar eats the food of the sea bass, and has 19 friends\neat_food(oscar, food_of(sea_bass)) = True\nfriends(oscar) = 19\n# The catfish does not give a magnifier to the caterpillar.\ngive(catfish, magnifier, caterpillar) = False\n\n# Based on the game state and the rules and preferences, does the lobster give a magnifier to the eagle?\nquestion = give(lobster, magnifier, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something steals five points from the salmon and needs support from the oscar, then it rolls the dice for the cockroach\nRule2: If something prepares armor for the hummingbird, then the grizzly bear steals five points from the salmon\nRule3: If the grizzly bear has a card whose color appears in the flag of Belgium, then it needs support from the oscar.\n\nThe current state of the game is as follows\nThe grizzly bear has a card that is red in color\nThe spider prepares armor for the hummingbird.\n\nBased on the game state and the rules and preferences, does the grizzly bear roll the dice for the cockroach?\nQuestion: Does the grizzly bear roll the dice for the cockroach?",
        "idx": 30,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something steals five points from the salmon and needs support from the oscar, what can you certainly conclude? You can conclude that it also rolls the dice for the cockroach\nrule1(something) = steals(something, 5, points, salmon) & needs_support(something, oscar) => rolls_dice(something, cockroach)\n# Rule2: If at least one animal prepares armor for the hummingbird, then the grizzly bear steals five points from the salmon\nrule2() = prepares_armor(something, hummingbird) => steals(grizzly_bear, 5, points, salmon)\n# Rule3: Regarding the grizzly bear, if it has a card whose color appears in the flag of Belgium, then we can conclude that it needs support from the oscar.\nrule3() = has(grizzly_bear, card) & color(card) in colors_of_Belgium_flag => needs_support(grizzly_bear, oscar)\n\n# The current state of the game is as follows\n# The grizzly bear has a card that is red in color\nhas(grizzly_bear, card) = True\ncolor(card, red) = True\n# The spider prepares armor for the hummingbird.\nprepares_armor(spider, hummingbird) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear roll the dice for the cockroach?\nquestion = rolls_dice(grizzly_bear, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something eats the food that belongs to the spider, then it will not proceed to the spot that is right after the spot of the grizzly bear\nRule2: If something sings a victory song for the parrot but does not prepare armor for the turtle, then it eats the food that belongs to the spider.\n\nThe current state of the game is as follows\nThe carp sings a victory song for the parrot\nThe carp does not prepare armor for the turtle.\n\nBased on the game state and the rules and preferences, does the carp proceed to the spot right after the grizzly bear?\nQuestion: Does the carp proceed to the spot right after the grizzly bear?",
        "idx": 31,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals eats the food that belongs to the spider, you can be certain that it will not proceed to the spot that is right after the spot of the grizzly bear\nrule1(something) = eats(something, food_of(spider)) => not proceed_to(something, spot_right_after(grizzly_bear))\n# Rule2: If you see that something sings a victory song for the parrot but does not prepare armor for the turtle, what can you certainly conclude? You can conclude that it eats the food that belongs to the spider.\nrule2(something) = sings(something, victory_song, parrot) & not prepare_armor(something, turtle) => eats(something, food_of(spider))\n\n# The current state of the game is as follows\n# The carp sings a victory song for the parrot\nsings(carp, victory_song, parrot) = True\n# The carp does not prepare armor for the turtle.\nprepare_armor(carp, turtle) = False\n\n# Based on the game state and the rules and preferences, does the carp proceed to the spot right after the grizzly bear?\nquestion = proceed_to(carp, spot_right_after(grizzly_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not knock down the fortress of the carp, then it proceeds to the spot that is right after the spot of the lion without a doubt\nRule2: The penguin will not proceed to the spot right after the lion, in the case where the koala does not sing a song of victory for the penguin\nRule3: If the squirrel is not going to burn the warehouse of the penguin but the tilapia raises a flag of peace for the penguin, then the penguin is not going to knock down the fortress of the carp.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe squirrel burns the warehouse of the penguin\nThe tilapia raises a peace flag for the penguin.\n\nBased on the game state and the rules and preferences, does the penguin proceed to the spot right after the lion?\nQuestion: Does the penguin proceed to the spot right after the lion?",
        "idx": 32,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not knock down the fortress that belongs to the carp, you can be certain that it will proceed to the spot that is right after the spot of the lion without a doubt\nrule1(something) = not knock_down(something, fortress, carp) => proceed_to(something, spot_after(lion))\n# Rule2: The penguin will not proceed to the spot right after the lion, in the case where the koala does not sing a song of victory for the penguin\nrule2() = not sing_song_of_victory(koala, penguin) => not proceed_to(penguin, spot_after(lion))\n# Rule3: For the penguin, if the belief is that the squirrel is not going to burn the warehouse of the penguin but the tilapia raises a flag of peace for the penguin, then you can add that \"the penguin is not going to knock down the fortress of the carp\" to your conclusions.\nrule3() = not burn_warehouse(squirrel, penguin) & raise_flag_of_peace(tilapia, penguin) => not knock_down(penguin, fortress, carp)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The squirrel burns the warehouse of the penguin\nburn_warehouse(squirrel, penguin) = True\n# The tilapia raises a peace flag for the penguin.\nraise_flag_of_peace(tilapia, penguin) = True\n\n# Based on the game state and the rules and preferences, does the penguin proceed to the spot right after the lion?\nquestion = proceed_to(penguin, spot_after(lion))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the goldfish has more than five friends, then it steals five points from the tilapia\nRule2: If the spider knocks down the fortress of the leopard, then the leopard respects the tilapia\nRule3: If the leopard respects the tilapia and the goldfish steals five points from the tilapia, then you can add \"the tilapia knocks down the fortress of the eagle\" to your conclusions\nRule4: If the goldfish has a high salary, then it steals five points from the tilapia.\n\nThe current state of the game is as follows\nThe goldfish has a low-income job\nThe goldfish has six friends, and is named Max\nThe kudu is named Meadow\nThe leopard published a high-quality paper\nThe spider knocks down the fortress of the leopard.\n\nBased on the game state and the rules and preferences, does the tilapia knock down the fortress of the eagle?\nQuestion: Is \"the tilapia knocks down the fortress of the eagle\" in the conclusions?",
        "idx": 33,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the goldfish, if it has more than five friends, then we can conclude that it steals five of the points of the tilapia\nrule1() = friends(goldfish) > 5 => steal_points(goldfish, 5, tilapia)\n# Rule2: If the spider knocks down the fortress that belongs to the leopard, then the leopard respects the tilapia\nrule2() = knocks_down(spider, fortress(leopard)) => respect(leopard, tilapia)\n# Rule3: For the tilapia, if the belief is that the leopard respects the tilapia and the goldfish steals five points from the tilapia, then you can add \"the tilapia knocks down the fortress of the eagle\" to your conclusions\nrule3() = respect(leopard, tilapia) & steal_points(goldfish, 5, tilapia) => add_conclusion(\"the tilapia knocks down the fortress of the eagle\")\n# Rule4: If the goldfish has a high salary, then the goldfish steals five points from the tilapia.\nrule4() = has_high_salary(goldfish) => steal_points(goldfish, 5, tilapia)\n\n# The current state of the game is as follows\n# The goldfish has a low-income job\nhas_high_salary(goldfish) = False\n# The goldfish has six friends, and is named Max\nfriends(goldfish) = 6\nname(goldfish, Max) = True\n# The kudu is named Meadow\nname(kudu, Meadow) = True\n# The leopard published a high-quality paper\npublish_paper(leopard, high_quality) = True\n# The spider knocks down the fortress of the leopard.\nknocks_down(spider, fortress(leopard)) = True\n\n# Based on the game state and the rules and preferences, does the tilapia knock down the fortress of the eagle?\nquestion = \"the tilapia knocks down the fortress of the eagle\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cockroach does not learn the basics of resource management from the hippopotamus, then the hippopotamus does not sing a victory song for the jellyfish\nRule2: If the cockroach has a high-quality paper, then it does not learn the basics of resource management from the hippopotamus\nRule3: If the cockroach has a sharp object, then it does not learn the basics of resource management from the hippopotamus.\n\nThe current state of the game is as follows\nThe cockroach has a cello\nThe cockroach published a high-quality paper\nThe cockroach does not become an enemy of the bat\nThe cockroach raises a peace flag for the panda bear.\n\nBased on the game state and the rules and preferences, does the hippopotamus sing a victory song for the jellyfish?\nQuestion: Does the hippopotamus sing a victory song for the jellyfish?",
        "idx": 34,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cockroach does not learn the basics of resource management from the hippopotamus, then the hippopotamus does not sing a victory song for the jellyfish\nrule1() = not learn(cockroach, basics_of_resource_management, hippopotamus) => not sing_victory_song(hippopotamus, jellyfish)\n# Rule2: Regarding the cockroach, if it has a high-quality paper, then we can conclude that it does not learn the basics of resource management from the hippopotamus\nrule2() = has(cockroach, high_quality_paper) => not learn(cockroach, basics_of_resource_management, hippopotamus)\n# Rule3: Regarding the cockroach, if it has a sharp object, then we can conclude that it does not learn the basics of resource management from the hippopotamus.\nrule3() = has(cockroach, sharp_object) => not learn(cockroach, basics_of_resource_management, hippopotamus)\n\n# The current state of the game is as follows\n# The cockroach has a cello\nhas(cockroach, cello) = True\n# The cockroach published a high-quality paper\npublished(cockroach, high_quality_paper) = True\n# The cockroach does not become an enemy of the bat\nnot become_enemy(cockroach, bat) = True\n# The cockroach raises a peace flag for the panda bear.\nraise_flag_of_peace(cockroach, panda_bear) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus sing a victory song for the jellyfish?\nquestion = sing_victory_song(hippopotamus, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the leopard purchased a time machine, then it learns the basics of resource management from the rabbit\nRule2: If something learns elementary resource management from the rabbit, then it respects the lobster\nRule3: If the first letter of the name of the leopard is the same as the first letter of the name of the whale, then the leopard learns elementary resource management from the rabbit\nRule4: If the leopard has a card with a primary color, then it does not learn the basics of resource management from the rabbit.\n\nRule4 is preferred over Rule1\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe leopard has a green card\nThe name of the leopard is Meadow\nThe leopard invented a time machine\nThe name of the whale is Milo.\n\nBased on the game state and the rules and preferences, does the leopard respect the lobster?\nQuestion: Does the leopard respect the lobster?",
        "idx": 35,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the leopard, if it purchased a time machine, then we can conclude that it learns the basics of resource management from the rabbit\nrule1() = purchased(leopard, time_machine) => learns(leopard, basics_of_resource_management, rabbit)\n# Rule2: If you are positive that you saw one of the animals learns elementary resource management from the rabbit, you can be certain that it will also respect the lobster\nrule2(something) = learns(something, elementary_resource_management, rabbit) => respect(something, lobster)\n# Rule3: If the leopard has a name whose first letter is the same as the first letter of the whale's name, then the leopard learns elementary resource management from the rabbit\nrule3() = first_letter_of(name(leopard)) == first_letter_of(name(whale)) => learns(leopard, elementary_resource_management, rabbit)\n# Rule4: If the leopard has a card with a primary color, then the leopard does not learn the basics of resource management from the rabbit.\nrule4() = has(leopard, card) and color(card) in primary_colors => not learns(leopard, basics_of_resource_management, rabbit)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The leopard has a card that is green in color, and is named Meadow\nhas(leopard, card) = True\ncolor(card, green) = True\nname(leopard, Meadow) = True\n# The leopard invented a time machine\ninvented(leopard, time_machine) = True\n# The whale is named Milo.\nname(whale, Milo) = True\n\n# Based on the game state and the rules and preferences, does the leopard respect the lobster?\nquestion = respect(leopard, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something proceeds to the spot that is right after the spot of the lobster but does not learn elementary resource management from the buffalo, then it will not raise a flag of peace for the eagle\nRule2: The black bear will not steal five points from the eagle, in the case where the phoenix does not raise a peace flag for the black bear\nRule3: The cheetah raises a flag of peace for the eagle, in the case where the polar bear rolls the dice for the cheetah\nRule4: If the cheetah raises a peace flag for the eagle and the black bear does not steal five points from the eagle, then the eagle prepares armor for the donkey\nRule5: The eagle will not prepare armor for the donkey, in the case where the cheetah does not become an actual enemy of the eagle.\n\nRule1 is preferred over Rule3\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cheetah proceeds to the spot right after the lobster\nThe polar bear rolls the dice for the cheetah\nThe phoenix does not raise a peace flag for the black bear.\n\nBased on the game state and the rules and preferences, does the eagle prepare armor for the donkey?\nQuestion: Does the eagle prepare armor for the donkey?",
        "idx": 36,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something proceeds to the spot that is right after the spot of the lobster but does not learn elementary resource management from the buffalo because in this case it will, surely, not raise a flag of peace for the eagle (this may or may not be problematic)\nrule1(something) = proceeds_to(something, spot_after(lobster)) & not learn(something, elementary_resource_management_from(buffalo)) => not raise_flag_of_peace(something, eagle)\n# Rule2: The black bear will not steal five points from the eagle, in the case where the phoenix does not raise a peace flag for the black bear\nrule2() = not raise_flag_of_peace(phoenix, black_bear) => not steal_points(black_bear, 5, eagle)\n# Rule3: The cheetah unquestionably raises a flag of peace for the eagle, in the case where the polar bear rolls the dice for the cheetah\nrule3() = roll_dice(polar_bear, cheetah) => raise_flag_of_peace(cheetah, eagle)\n# Rule4: For the eagle, if the belief is that the cheetah raises a peace flag for the eagle and the black bear does not steal five of the points of the eagle, then you can add \"the eagle prepares armor for the donkey\" to your conclusions\nrule4() = raise_flag_of_peace(cheetah, eagle) & not steal_points(black_bear, 5, eagle) => prepare_armor(eagle, donkey)\n# Rule5: The eagle will not prepare armor for the donkey, in the case where the cheetah does not become an actual enemy of the eagle.\nrule5() = not become_enemy(cheetah, eagle) => not prepare_armor(eagle, donkey)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cheetah proceeds to the spot right after the lobster\nproceeds_to(cheetah, spot_after(lobster)) = True\n# The polar bear rolls the dice for the cheetah\nroll_dice(polar_bear, cheetah) = True\n# The phoenix does not raise a peace flag for the black bear.\nraise_flag_of_peace(phoenix, black_bear) = False\n\n# Based on the game state and the rules and preferences, does the eagle prepare armor for the donkey?\nquestion = prepare_armor(eagle, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something becomes an enemy of the octopus, then the cricket does not owe money to the catfish\nRule2: If the cricket has a card with a primary color, then the cricket does not need the support of the goldfish\nRule3: If something does not respect the doctorfish, then it learns elementary resource management from the blobfish\nRule4: If something does not need the support of the goldfish and also does not owe money to the catfish, then it does not learn the basics of resource management from the blobfish.\n\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cricket has a blue card\nThe leopard becomes an enemy of the octopus.\n\nBased on the game state and the rules and preferences, does the cricket learn the basics of resource management from the blobfish?\nQuestion: Does the cricket learn the basics of resource management from the blobfish?",
        "idx": 37,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal becomes an enemy of the octopus, then the cricket does not owe money to the catfish\nrule1() = becomes_enemy(something, octopus) => not owe(cricket, money, catfish)\n# Rule2: If the cricket has a card with a primary color, then the cricket does not need the support of the goldfish\nrule2() = has(cricket, card) and color(card) in primary_colors => not need_support(cricket, goldfish)\n# Rule3: If you are positive that one of the animals does not respect the doctorfish, you can be certain that it will learn elementary resource management from the blobfish without a doubt\nrule3(something) = not respect(something, doctorfish) => learn(something, elementary_resource_management, blobfish)\n# Rule4: Be careful when something does not need the support of the goldfish and also does not owe money to the catfish because in this case it will surely not learn the basics of resource management from the blobfish (this may or may not be problematic).\nrule4() = not need_support(something, goldfish) and not owe(something, money, catfish) => not learn(something, basics_of_resource_management, blobfish)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cricket has a card that is blue in color\nhas(cricket, card) = True\ncolor(card, blue) = True\n# The leopard becomes an enemy of the octopus.\nbecomes_enemy(leopard, octopus) = True\n\n# Based on the game state and the rules and preferences, does the cricket learn the basics of resource management from the blobfish?\nquestion = learn(cricket, basics_of_resource_management, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kudu has a musical instrument, then it becomes an enemy of the spider\nRule2: If the kudu has fewer than 6 friends, then it becomes an enemy of the spider\nRule3: The spider sings a song of victory for the panda bear, in the case where the kudu becomes an enemy of the spider\nRule4: If the kudu has a leafy green vegetable, then it does not become an enemy of the spider.\n\nRule4 is preferred over Rule1\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe kudu has 16 friends, has a knife, and has some spinach\nThe kudu has a guitar.\n\nBased on the game state and the rules and preferences, does the spider sing a victory song for the panda bear?\nQuestion: Does the spider sing a victory song for the panda bear?",
        "idx": 38,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kudu, if it has a musical instrument, then we can conclude that it becomes an actual enemy of the spider\nrule1() = has(kudu, musical_instrument) => become_enemy(kudu, spider)\n# Rule2: If the kudu has fewer than 6 friends, then the kudu becomes an actual enemy of the spider\nrule2() = friends(kudu) < 6 => become_enemy(kudu, spider)\n# Rule3: The spider unquestionably sings a song of victory for the panda bear, in the case where the kudu becomes an enemy of the spider\nrule3() = become_enemy(kudu, spider) => sing_victory_song(spider, panda_bear)\n# Rule4: Regarding the kudu, if it has a leafy green vegetable, then we can conclude that it does not become an actual enemy of the spider.\nrule4() = has(kudu, leafy_green_vegetable) => not become_enemy(kudu, spider)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The kudu has 16 friends, has a knife, and has some spinach\nfriends(kudu) = 16\nhas(kudu, knife) = True\nhas(kudu, spinach) = True\n# The kudu has a guitar.\nhas(kudu, guitar) = True\n\n# Based on the game state and the rules and preferences, does the spider sing a victory song for the panda bear?\nquestion = sing_victory_song(spider, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the viperfish has a high-quality paper, then it does not sing a victory song for the pig\nRule2: If the dog learns the basics of resource management from the pig and the viperfish does not sing a victory song for the pig, then the pig sings a victory song for the tiger\nRule3: The viperfish sings a victory song for the pig whenever at least one animal steals five of the points of the cockroach\nRule4: If something knows the defense plan of the sea bass but does not sing a song of victory for the panther, then it learns the basics of resource management from the pig.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe dog has 2 friends, knows the defensive plans of the sea bass, and does not sing a victory song for the panther\nThe sheep steals 5 points from the cockroach\nThe viperfish has a high-quality paper\n\nBased on the game state and the rules and preferences, does the pig sing a victory song for the tiger?\nQuestion: Does the pig sing a victory song for the tiger?",
        "idx": 39,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the viperfish, if it has a high-quality paper, then we can conclude that it does not sing a song of victory for the pig\nrule1() = has(viperfish, high_quality_paper) => not sing(viperfish, victory_song, pig)\n# Rule2: If the dog learns the basics of resource management from the pig and the viperfish does not sing a victory song for the pig, then, inevitably, the pig sings a victory song for the tiger\nrule2() = learn(dog, basics_of_resource_management, pig) & not sing(viperfish, victory_song, pig) => sing(pig, victory_song, tiger)\n# Rule3: The viperfish sings a victory song for the pig whenever at least one animal steals five of the points of the cockroach\nrule3() = steals(something, 5, points, cockroach) => sing(viperfish, victory_song, pig)\n# Rule4: If you see that something knows the defense plan of the sea bass but does not sing a song of victory for the panther, what can you certainly conclude? You can conclude that it learns the basics of resource management from the pig.\nrule4(something) = knows(something, defense_plan, sea_bass) & not sing(something, victory_song, panther) => learn(something, basics_of_resource_management, pig)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The dog has two friends, knows the defensive plans of the sea bass, and does not sing a victory song for the panther\nfriends(dog) = 2\nknows(dog, defense_plan, sea_bass) = True\nnot sing(dog, victory_song, panther) = True\n# The sheep steals five points from the cockroach\nsteals(sheep, 5, points, cockroach) = True\n# The viperfish published a high-quality paper.\nhas(viperfish, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the pig sing a victory song for the tiger?\nquestion = sing(pig, victory_song, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cow does not have her keys, then it becomes an actual enemy of the tilapia\nRule2: The sun bear does not prepare armor for the tilapia whenever something sings a victory song for the parrot\nRule3: If the cow has something to carry apples and oranges, then it becomes an enemy of the tilapia\nRule4: If the first letter of the name of the cow is the same as the first letter of the name of the cockroach, then the cow does not become an enemy of the tilapia\nRule5: If the sun bear has a card and the color of the card is one of the rainbow colors, then the sun bear prepares armor for the tilapia\nRule6: If the cow becomes an actual enemy of the tilapia and the sun bear prepares armor for the tilapia, then the tilapia does not raise a flag of peace for the sea bass.\n\nRule1 is preferred over Rule4\nRule2 is preferred over Rule5\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe name of the cockroach is Paco\nThe cow has a green card and a guitar\nThe name of the cow is Luna\nThe cow lost her keys\nThe sun bear has a red card\n\nBased on the game state and the rules and preferences, does the tilapia raise a peace flag for the sea bass?\nQuestion: Does the tilapia raise a peace flag for the sea bass?",
        "idx": 40,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cow, if it does not have her keys, then we can conclude that it becomes an actual enemy of the tilapia\nrule1() = not has(cow, keys) => become_enemy(cow, tilapia)\n# Rule2: The sun bear does not prepare armor for the tilapia whenever at least one animal sings a victory song for the parrot\nrule2() = sings_victory_song(something, parrot) => not prepare_armor(sun_bear, tilapia)\n# Rule3: Regarding the cow, if it has something to carry apples and oranges, then we can conclude that it becomes an enemy of the tilapia\nrule3() = has(cow, something_to_carry_apples_and_oranges) => become_enemy(cow, tilapia)\n# Rule4: If the cow has a name whose first letter is the same as the first letter of the cockroach's name, then the cow does not become an enemy of the tilapia\nrule4() = first_letter_of(name(cow)) == first_letter_of(name(cockroach)) => not become_enemy(cow, tilapia)\n# Rule5: If the sun bear has a card whose color is one of the rainbow colors, then the sun bear prepares armor for the tilapia\nrule5() = has(sun_bear, card) and color(card) in rainbow_colors => prepare_armor(sun_bear, tilapia)\n# Rule6: For the tilapia, if the belief is that the cow becomes an actual enemy of the tilapia and the sun bear prepares armor for the tilapia, then you can add that \"the tilapia is not going to raise a flag of peace for the sea bass\" to your conclusions.\nrule6() = become_enemy(cow, tilapia) & prepare_armor(sun_bear, tilapia) => not raise_flag_of_peace(tilapia, sea_bass)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cockroach is named Paco\nname(cockroach, Paco) = True\n# The cow has a card that is green in color, has a guitar, and is named Luna\nhas(cow, card) = True\ncolor(card, green) = True\nhas(cow, guitar) = True\nname(cow, Luna) = True\n# The cow lost her keys\nhas(cow, keys) = False\n# The sun bear has a card that is red in color.\nhas(sun_bear, card) = True\ncolor(card, red) = True\n\n# Based on the game state and the rules and preferences, does the tilapia raise a peace flag for the sea bass?\nquestion = raise_flag_of_peace(tilapia, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something owes money to the elephant but does not show all her cards to the lion, then it will learn the basics of resource management from the wolverine.\nRule2: The squid gives a magnifying glass to the aardvark whenever at least one animal learns elementary resource management from the wolverine.\n\nThe current state of the game is as follows\nThe meerkat offers a job to the elephant but does not show all her cards to the lion.\n\nBased on the game state and the rules and preferences, does the squid give a magnifier to the aardvark?\nQuestion: Does the squid give a magnifying glass to the aardvark?",
        "idx": 41,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not show her cards (all of them) to the lion but owes money to the elephant because in this case it will, surely, learn the basics of resource management from the wolverine (this may or may not be problematic)\nrule1(something) = not show_cards(something, lion) & owe(something, money, elephant) => learn(something, basics_of_resource_management, wolverine)\n# Rule2: The squid gives a magnifying glass to the aardvark whenever at least one animal learns elementary resource management from the wolverine.\nrule2() = learn(something, elementary_resource_management, wolverine) => give(squid, magnifying_glass, aardvark)\n\n# The current state of the game is as follows\n# The meerkat offers a job to the elephant but does not show all her cards to the lion.\noffer_job_position(meerkat, elephant) = True\nshow_cards(meerkat, lion) = False\n\n# Based on the game state and the rules and preferences, does the squid give a magnifier to the aardvark?\nquestion = give(squid, magnifying_glass, aardvark)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something holds an equal number of points as the turtle, then it gives a magnifying glass to the phoenix\nRule2: If the oscar has a name whose first letter is the same as the first letter of the kiwi's name, then it holds an equal number of points as the turtle\nRule3: If the oscar has more than 17 friends, then it holds the same number of points as the turtle.\n\nThe current state of the game is as follows\nThe name of the kiwi is Tessa\nThe kiwi prepares armor for the oscar\nThe kudu learns the basics of resource management from the oscar\nThe oscar has 10 friends\nThe name of the oscar is Teddy\n\nBased on the game state and the rules and preferences, does the oscar give a magnifier to the phoenix?\nQuestion: Does the oscar give a magnifying glass to the phoenix?",
        "idx": 42,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals holds an equal number of points as the turtle, you can be certain that it will also give a magnifying glass to the phoenix\nrule1(something) = holds(something, points) == holds(turtle, points) => give(something, magnifying_glass, phoenix)\n# Rule2: Regarding the oscar, if it has a name whose first letter is the same as the first letter of the kiwi's name, then we can conclude that it holds an equal number of points as the turtle\nrule2() = first_letter_of(name(oscar)) == first_letter_of(name(kiwi)) => holds(oscar, points) == holds(turtle, points)\n# Rule3: If the oscar has more than 17 friends, then the oscar holds the same number of points as the turtle.\nrule3() = friends(oscar) > 17 => holds(oscar, points) == holds(turtle, points)\n\n# The current state of the game is as follows\n# The kiwi is named Tessa, and prepares armor for the oscar\nname(kiwi, Tessa) = True\nprepare_armor(kiwi, oscar) = True\n# The kudu learns the basics of resource management from the oscar\nlearn(kudu, basics_of_resource_management, oscar) = True\n# The oscar has 10 friends, and is named Teddy.\nfriends(oscar) = 10\nname(oscar, Teddy) = True\n\n# Based on the game state and the rules and preferences, does the oscar give a magnifier to the phoenix?\nquestion = give(oscar, magnifying_glass, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If you saw something rolls the dice for the wolverine, then it needs support from the squirrel\nRule2: If something steals five points from the halibut but does not need the support of the donkey, then it owes money to the salmon\nRule3: If something owes money to the salmon, then it does not need the support of the squirrel\nRule4: If the cat has a high salary, then it does not owe money to the salmon.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cat steals five points from the halibut\nThe cat does not need support from the donkey.\n\nBased on the game state and the rules and preferences, does the cat need support from the squirrel?\nQuestion: Does the cat need support from the squirrel?",
        "idx": 43,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals rolls the dice for the wolverine, you can be certain that it will also need support from the squirrel\nrule1() = saw_roll_dice(something, wolverine) => need_support(something, squirrel)\n# Rule2: If you see that something steals five of the points of the halibut but does not need the support of the donkey, what can you certainly conclude? You can conclude that it owes money to the salmon\nrule2() = steal_points(something, 5, halibut) & not need_support(something, donkey) => owe(something, money, salmon)\n# Rule3: If you are positive that you saw one of the animals owes money to the salmon, you can be certain that it will not need the support of the squirrel\nrule3() = owe(something, money, salmon) => not need_support(something, squirrel)\n# Rule4: If the cat has a high salary, then the cat does not owe $$$ to the salmon.\nrule4() = has_high_salary(cat) => not owe(cat, money, salmon)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cat steals five points from the halibut\nsteal_points(cat, 5, halibut) = True\n# The cat does not need support from the donkey.\nnot need_support(cat, donkey) = True\n\n# Based on the game state and the rules and preferences, does the cat need support from the squirrel?\nquestion = need_support(cat, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the phoenix has a card with a primary color, then it does not offer a job to the cricket\nRule2: If the phoenix offers a job position to the cricket and the oscar does not attack the green fields whose owner is the cricket, then the cricket learns the basics of resource management from the canary\nRule3: If the oscar took a bike from the store, then it does not attack the green fields whose owner is the cricket\nRule4: If the first letter of the name of the phoenix is the same as the first letter of the name of the doctorfish, then the phoenix does not offer a job to the cricket\nRule5: If something does not roll the dice for the squid and also does not show her cards to the sun bear, then it will surely attack the green fields whose owner is the cricket\nRule6: If the first letter of the name of the oscar is the same as the first letter of the name of the eagle, then the oscar does not attack the green fields of the cricket.\n\nRule5 is preferred over Rule3\nRule5 is preferred over Rule6\n\nThe current state of the game is as follows\nThe name of the doctorfish is Pashmak\nThe name of the eagle is Charlie\nThe name of the oscar is Buddy\nThe oscar offers a job to the sun bear\nThe oscar stole a bike from the store\nThe phoenix has a card that is green in color\nThe name of the phoenix is Max.\n\nBased on the game state and the rules and preferences, does the cricket learn the basics of resource management from the canary?\nQuestion: Does the cricket learn the basics of resource management from the canary?",
        "idx": 44,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the phoenix has a card with a primary color, then the phoenix does not offer a job to the cricket\nrule1() = has(phoenix, card) and color(card) in primary_colors => not offer_job_position(phoenix, cricket)\n# Rule2: For the cricket, if the belief is that the phoenix offers a job position to the cricket and the oscar does not attack the green fields whose owner is the cricket, then you can add \"the cricket learns the basics of resource management from the canary\" to your conclusions\nrule2() = belief(phoenix, offer_job_position, cricket) and not attack(oscar, green_fields, owner(cricket)) => learn(cricket, basics_of_resource_management, canary)\n# Rule3: Regarding the oscar, if it took a bike from the store, then we can conclude that it does not attack the green fields whose owner is the cricket\nrule3() = took(oscar, bike, store) => not attack(oscar, green_fields, owner(cricket))\n# Rule4: Regarding the phoenix, if it has a name whose first letter is the same as the first letter of the doctorfish's name, then we can conclude that it does not offer a job to the cricket\nrule4() = first_letter_of(name(phoenix)) == first_letter_of(name(doctorfish)) => not offer_job_position(phoenix, cricket)\n# Rule5: Be careful when something does not roll the dice for the squid and also does not show her cards (all of them) to the sun bear because in this case it will surely attack the green fields whose owner is the cricket (this may or may not be problematic)\nrule5() = not roll_dice(something, squid) and not show_cards(something, sun_bear) => attack(something, green_fields, owner(cricket))\n# Rule6: If the oscar has a name whose first letter is the same as the first letter of the eagle's name, then the oscar does not attack the green fields of the cricket.\nrule6() = first_letter_of(name(oscar)) == first_letter_of(name(eagle)) => not attack(oscar, green_fields, owner(cricket))\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n\n# The current state of the game is as follows\n# The doctorfish is named Pashmak\nname(doctorfish, Pashmak) = True\n# The eagle is named Charlie\nname(eagle, Charlie) = True\n# The oscar is named Buddy, and offers a job to the sun bear\nname(oscar, Buddy) = True\noffer_job_position(oscar, sun_bear) = True\n# The oscar stole a bike from the store\ntook(oscar, bike, store) = True\n# The phoenix has a card that is green in color\nhas(phoenix, card) = True\ncolor(card, green) = True\n# The phoenix is named Max.\nname(phoenix, Max) = True\n\n# Based on the game state and the rules and preferences, does the cricket learn the basics of resource management from the canary?\nquestion = learn(cricket, basics_of_resource_management, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the halibut has a device to connect to the internet, then it attacks the green fields of the oscar\nRule2: If the puffin offers a job position to the oscar and the halibut attacks the green fields whose owner is the oscar, then you can add \"the oscar eats the food of the moose\" to your conclusions\nRule3: If something does not learn elementary resource management from the parrot, then it will offer a job position to the oscar without a doubt\nRule4: If the puffin has something to carry apples and oranges, then it does not offer a job position to the oscar.\n\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe halibut has a computer\nThe puffin has a plastic bag\nThe puffin does not learn the basics of resource management from the parrot.\n\nBased on the game state and the rules and preferences, does the oscar eat the food of the moose?\nQuestion: Does the oscar eat the food of the moose?",
        "idx": 45,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the halibut has a device to connect to the internet, then the halibut attacks the green fields of the oscar\nrule1() = has(halibut, device_to_connect_to_internet) => attack(halibut, green_fields, oscar)\n# Rule2: For the oscar, if the belief is that the puffin offers a job position to the oscar and the halibut attacks the green fields whose owner is the oscar, then you can add \"the oscar eats the food of the moose\" to your conclusions\nrule2() = offer_job_position(puffin, oscar) & attack(halibut, green_fields, oscar) => add_conclusion(\"the oscar eats the food of the moose\")\n# Rule3: If you are positive that one of the animals does not learn elementary resource management from the parrot, you can be certain that it will offer a job position to the oscar without a doubt\nrule3(something) = not learn(something, elementary_resource_management, parrot) => offer_job_position(something, oscar)\n# Rule4: If the puffin has something to carry apples and oranges, then the puffin does not offer a job position to the oscar.\nrule4() = has(puffin, something_to_carry_apples_and_oranges) => not offer_job_position(puffin, oscar)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The halibut has a computer\nhas(halibut, computer) = True\n# The puffin has a plastic bag\nhas(puffin, plastic_bag) = True\n# The puffin does not learn the basics of resource management from the parrot.\nnot learn(puffin, elementary_resource_management, parrot) = True\n\n# Based on the game state and the rules and preferences, does the oscar eat the food of the moose?\nquestion = \"the oscar eats the food of the moose\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the leopard has a card with a primary color, then it holds the same number of points as the kangaroo\nRule2: If the leopard has more than 1 friend, then it holds an equal number of points as the kangaroo\nRule3: If something does not attack the green fields whose owner is the eel but it offers a job position to the starfish, then it sings a victory song for the viperfish\nRule4: If the leopard holds the same number of points as the kangaroo and the sea bass sings a song of victory for the kangaroo, then the kangaroo will not sing a song of victory for the viperfish\nRule5: If the sea bass has a card whose color is one of the rainbow colors, then it sings a song of victory for the kangaroo\nRule6: If the sea bass works more hours than before, then it sings a victory song for the kangaroo\nRule7: If something owes money to the cat, then the kangaroo does not attack the green fields of the eel.\n\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe leopard has 4 friends and has a card that is orange in color\nThe pig owes money to the cat\nThe sea bass has a card that is red in color\nThe sea bass reduced her work hours recently\nThe puffin does not proceed to the spot right after the kangaroo.\n\nBased on the game state and the rules and preferences, does the kangaroo sing a victory song for the viperfish?\nQuestion: Does the kangaroo sing a victory song for the viperfish?",
        "idx": 46,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the leopard has a card with a primary color, then the leopard holds the same number of points as the kangaroo\nrule1() = has(leopard, card) and color(card) in primary_colors => points(leopard) == points(kangaroo)\n# Rule2: If the leopard has more than 1 friend, then the leopard holds an equal number of points as the kangaroo\nrule2() = friends(leopard) > 1 => points(leopard) == points(kangaroo)\n# Rule3: If you see that something does not attack the green fields whose owner is the eel but it offers a job position to the starfish, what can you certainly conclude? You can conclude that it also sings a victory song for the viperfish\nrule3(something) = not attack(something, green_fields(eel)) & offer_job_position(something, starfish) => sing_victory_song(something, viperfish)\n# Rule4: If the leopard holds the same number of points as the kangaroo and the sea bass sings a song of victory for the kangaroo, then the kangaroo will not sing a song of victory for the viperfish\nrule4() = points(leopard) == points(kangaroo) & sing_victory_song(sea_bass, kangaroo) => not sing_victory_song(kangaroo, viperfish)\n# Rule5: If the sea bass has a card whose color is one of the rainbow colors, then the sea bass sings a song of victory for the kangaroo\nrule5() = has(sea_bass, card) and color(card) in rainbow_colors => sing_victory_song(sea_bass, kangaroo)\n# Rule6: If the sea bass works more hours than before, then the sea bass sings a victory song for the kangaroo\nrule6() = works_more_hours(sea_bass) => sing_victory_song(sea_bass, kangaroo)\n# Rule7: If at least one animal owes $$$ to the cat, then the kangaroo does not attack the green fields of the eel.\nrule7() = owes(something, money, cat) => not attack(kangaroo, green_fields(eel))\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The leopard has 4 friends, and has a card that is orange in color\nfriends(leopard) = 4\nhas(leopard, card) = True\ncolor(card, orange) = True\n# The pig owes money to the cat\nowes(pig, money, cat) = True\n# The sea bass has a card that is red in color\nhas(sea_bass, card) = True\ncolor(card, red) = True\n# The sea bass reduced her work hours recently\nworks_more_hours(sea_bass) = False\n# The puffin does not proceed to the spot right after the kangaroo.\nproceed(puffin, spot, kangaroo) = False\n\n# Based on the game state and the rules and preferences, does the kangaroo sing a victory song for the viperfish?\nquestion = sing_victory_song(kangaroo, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cricket gives a magnifier to the squid and the sea bass gives a magnifier to the squid, then the squid sings a song of victory for the spider\nRule2: If the eagle publishes a high-quality paper, then the eagle burns the warehouse of the zander\nRule3: If the squid has a card with a primary color, then it does not sing a song of victory for the spider\nRule4: If something sings a victory song for the spider and also removes one of the pieces of the dog, then it will surely not remove from the board one of the pieces of the parrot\nRule5: If the eagle has a card with a primary color, then it burns the warehouse that is in possession of the zander\nRule6: If something burns the warehouse of the zander, then the squid removes one of the pieces of the parrot.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule6\n\nThe current state of the game is as follows\nThe cricket gives a magnifier to the squid\nThe eagle has a yellow card and recently read a high-quality paper\nThe sea bass has the same number of points as the squid\nThe squid has a black card.\n\nBased on the game state and the rules and preferences, does the squid remove from the board one of the pieces of the parrot?\nQuestion: Does the squid remove from the board one of the pieces of the parrot?",
        "idx": 47,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the squid, if the belief is that the cricket gives a magnifier to the squid and the sea bass gives a magnifier to the squid, then you can add \"the squid sings a song of victory for the spider\" to your conclusions\nrule1() = give(cricket, magnifier, squid) & give(sea_bass, magnifier, squid) => add_conclusion(\"the squid sings a song of victory for the spider\")\n# Rule2: If the eagle has published a high-quality paper, then the eagle burns the warehouse of the zander\nrule2() = publish(eagle, high_quality_paper) => burn(eagle, warehouse, zander)\n# Rule3: Regarding the squid, if it has a card with a primary color, then we can conclude that it does not sing a song of victory for the spider\nrule3() = has(squid, card) & color(card) in primary_colors => not sing(squid, song_of_victory, spider)\n# Rule4: Be careful when something sings a victory song for the spider and also removes one of the pieces of the dog because in this case it will surely not remove from the board one of the pieces of the parrot (this may or may not be problematic)\nrule4() = sing(something, song_of_victory, spider) & remove(something, piece, dog) => not remove(something, piece, parrot)\n# Rule5: Regarding the eagle, if it has a card with a primary color, then we can conclude that it burns the warehouse that is in possession of the zander\nrule5() = has(eagle, card) & color(card) in primary_colors => burn(eagle, warehouse, zander)\n# Rule6: If at least one animal burns the warehouse of the zander, then the squid removes one of the pieces of the parrot.\nrule6() = burn(something, warehouse, zander) => remove(squid, piece, parrot)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n\n# The current state of the game is as follows\n# The cricket gives a magnifier to the squid\ngive(cricket, magnifier, squid) = True\n# The eagle has a card that is yellow in color, and recently read a high-quality paper\nhas(eagle, card) = True\ncolor(card, yellow) = True\nread(eagle, high_quality_paper) = True\n# The sea bass holds the same number of points as the squid\npoints(sea_bass) == points(squid) = True\n# The squid has a card that is black in color.\nhas(squid, card) = True\ncolor(card, black) = True\n\n# Based on the game state and the rules and preferences, does the squid remove from the board one of the pieces of the parrot?\nquestion = remove(squid, piece, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the sun bear is the same as the first letter of the name of the pig, then the sun bear does not remove one of the pieces of the viperfish\nRule2: If the sun bear removes one of the pieces of the viperfish, then the viperfish raises a flag of peace for the lobster.\nRule3: If the sun bear has fewer than five friends, then the sun bear removes one of the pieces of the viperfish.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the pig is Bella\nThe sun bear has 3 friends\nThe name of the sun bear is Beauty\n\nBased on the game state and the rules and preferences, does the viperfish raise a peace flag for the lobster?\nQuestion: Does the viperfish raise a peace flag for the lobster?",
        "idx": 48,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sun bear has a name whose first letter is the same as the first letter of the pig's name, then the sun bear does not remove from the board one of the pieces of the viperfish\nrule1() = first_letter_of(name(sun_bear)) == first_letter_of(name(pig)) => not remove_piece(sun_bear, viperfish)\n# Rule2: The viperfish unquestionably raises a flag of peace for the lobster, in the case where the sun bear removes one of the pieces of the viperfish\nrule2() = remove_piece(sun_bear, viperfish) => raise_flag_of_peace(viperfish, lobster)\n# Rule3: If the sun bear has fewer than five friends, then the sun bear removes one of the pieces of the viperfish.\nrule3() = friends(sun_bear) < 5 => remove_piece(sun_bear, viperfish)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The pig is named Bella\nname(pig, Bella) = True\n# The sun bear has three friends, and is named Beauty.\nfriends(sun_bear) = 3\nname(sun_bear, Beauty) = True\n\n# Based on the game state and the rules and preferences, does the viperfish raise a peace flag for the lobster?\nquestion = raise_flag_of_peace(viperfish, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the goldfish has more than 3 friends, then it needs support from the cheetah\nRule2: If something knows the defensive plans of the sun bear and needs the support of the cheetah, then it does not burn the warehouse that is in possession of the eel\nRule3: If the first letter of the name of the goldfish is the same as the first letter of the name of the panda bear, then the goldfish knows the defense plan of the sun bear\nRule4: If the goldfish has a card whose color starts with the letter \"e\", then it needs the support of the cheetah\nRule5: If the goldfish has a device to connect to the internet, then it knows the defense plan of the sun bear.\n\nThe current state of the game is as follows\nThe goldfish has 4 playful friends and 1 non-playful friend\nThe goldfish has a yellow card\nThe goldfish has a plastic bag\nThe name of the goldfish is Mojo\nThe name of the panda bear is Max.\n\nBased on the game state and the rules and preferences, does the goldfish burn the warehouse of the eel?\nQuestion: Does the goldfish burn the warehouse of the eel?",
        "idx": 49,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the goldfish has more than 3 friends, then the goldfish needs support from the cheetah\nrule1() = friends(goldfish) > 3 => needs_support(goldfish, cheetah)\n# Rule2: If you see that something knows the defensive plans of the sun bear and needs the support of the cheetah, what can you certainly conclude? You can conclude that it does not burn the warehouse that is in possession of the eel\nrule2(something) = knows(something, defensive_plans, sun_bear) & needs_support(something, cheetah) => not burn_warehouse(something, eel)\n# Rule3: If the goldfish has a name whose first letter is the same as the first letter of the panda bear's name, then the goldfish knows the defense plan of the sun bear\nrule3() = first_letter_of(name(goldfish)) == first_letter_of(name(panda_bear)) => knows(goldfish, defensive_plans, sun_bear)\n# Rule4: If the goldfish has a card whose color starts with the letter \"e\", then the goldfish needs the support of the cheetah\nrule4() = has(goldfish, card) and starts_with(color(card), \"e\") => needs_support(goldfish, cheetah)\n# Rule5: If the goldfish has a device to connect to the internet, then the goldfish knows the defense plan of the sun bear.\nrule5() = has(goldfish, internet_device) => knows(goldfish, defensive_plans, sun_bear)\n\n# The current state of the game is as follows\n# The goldfish has 4 friends that are playful and 1 friend that is not\nplayful_friends(goldfish) = 4\nnon_playful_friends(goldfish) = 1\n# The goldfish has a card that is yellow in color\nhas(goldfish, card) = True\ncolor(card, yellow) = True\n# The goldfish has a plastic bag\nhas(goldfish, plastic_bag) = True\n# The goldfish is named Mojo\nname(goldfish, Mojo) = True\n# The panda bear is named Max.\nname(panda_bear, Max) = True\n\n# Based on the game state and the rules and preferences, does the goldfish burn the warehouse of the eel?\nquestion = burn_warehouse(goldfish, eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squid does not remove one of the pieces of the hummingbird but the carp gives a magnifying glass to the hummingbird, then you can add \"the hummingbird attacks the green fields of the jellyfish\" to your conclusions\nRule2: Whenever at least one animal attacks the green fields whose owner is the jellyfish, the caterpillar attacks the green fields of the baboon.\n\nThe current state of the game is as follows\nThe carp gives a magnifier to the hummingbird\nThe squid does not sing a victory song for the hummingbird.\n\nBased on the game state and the rules and preferences, does the caterpillar attack the green fields whose owner is the baboon?\nQuestion: Does the caterpillar attack the green fields whose owner is the baboon?",
        "idx": 50,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the hummingbird, if the belief is that the squid does not remove one of the pieces of the hummingbird but the carp gives a magnifying glass to the hummingbird, then you can add \"the hummingbird attacks the green fields of the jellyfish\" to your conclusions\nrule1() = not remove(squid, piece, hummingbird) & give(carp, magnifying_glass, hummingbird) => add_conclusion(\"the hummingbird attacks the green fields of the jellyfish\")\n# Rule2: The caterpillar attacks the green fields of the baboon whenever at least one animal attacks the green fields whose owner is the jellyfish.\nrule2() = attacks(something, green_fields, jellyfish) => attacks(caterpillar, green_fields, baboon)\n\n# The current state of the game is as follows\n# The carp gives a magnifier to the hummingbird\ngive(carp, magnifying_glass, hummingbird) = True\n# The squid does not sing a victory song for the hummingbird.\nnot sing(squid, victory_song, hummingbird) = True\n\n# Based on the game state and the rules and preferences, does the caterpillar attack the green fields whose owner is the baboon?\nquestion = attacks(caterpillar, green_fields, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panther has something to sit on, then it proceeds to the spot that is right after the spot of the squirrel\nRule2: If the panther has a card whose color appears in the flag of Japan, then it proceeds to the spot that is right after the spot of the squirrel\nRule3: If at least one animal proceeds to the spot right after the squirrel, then the cockroach removes from the board one of the pieces of the tilapia.\n\nThe current state of the game is as follows\nThe panther has a black card and a couch.\n\nBased on the game state and the rules and preferences, does the cockroach remove from the board one of the pieces of the tilapia?\nQuestion: Does the cockroach remove from the board one of the pieces of the tilapia?",
        "idx": 51,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panther has something to sit on, then the panther proceeds to the spot that is right after the spot of the squirrel\nrule1() = has(panther, something_to_sit_on) => proceed_to_spot(panther, right_after_spot(squirrel))\n# Rule2: If the panther has a card whose color appears in the flag of Japan, then the panther proceeds to the spot that is right after the spot of the squirrel\nrule2() = has(panther, card) and color(card) in colors_of_flag(japan) => proceed_to_spot(panther, right_after_spot(squirrel))\n# Rule3: If at least one animal proceeds to the spot right after the squirrel, then the cockroach removes from the board one of the pieces of the tilapia.\nrule3() = proceed_to_spot(something, right_after_spot(squirrel)) => remove_piece(cockroach, tilapia)\n\n# The current state of the game is as follows\n# The panther has a card that is black in color, and has a couch.\nhas(panther, card) = True\ncolor(card, black) = True\nhas(panther, couch) = True\n\n# Based on the game state and the rules and preferences, does the cockroach remove from the board one of the pieces of the tilapia?\nquestion = remove_piece(cockroach, tilapia)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something burns the warehouse of the swordfish, then it does not knock down the fortress of the canary\nRule2: If the kangaroo has more than 6 friends, then it does not wink at the whale\nRule3: If the kangaroo does not have her keys, then it does not wink at the whale\nRule4: If something eats the food that belongs to the sheep, then it winks at the whale\nRule5: If something does not knock down the fortress of the canary, then it raises a peace flag for the sea bass\nRule6: If at least one animal winks at the whale, then the amberjack does not raise a peace flag for the sea bass.\n\nRule2 is preferred over Rule4\nRule3 is preferred over Rule4\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe amberjack burns the warehouse of the swordfish\nThe kangaroo eats the food of the sheep and has her keys\nThe mosquito raises a peace flag for the amberjack\nThe turtle does not become an enemy of the amberjack.\n\nBased on the game state and the rules and preferences, does the amberjack raise a peace flag for the sea bass?\nQuestion: Does the amberjack raise a peace flag for the sea bass?",
        "idx": 52,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something burns the warehouse of the swordfish, then it does not knock down the fortress of the canary\nrule1(something) = burns(something, warehouse, swordfish) => not knock_down(fortress, canary)\n# Rule2: If the kangaroo has more than 6 friends, then the kangaroo does not wink at the whale\nrule2() = friends(kangaroo) > 6 => not wink(kangaroo, whale)\n# Rule3: Regarding the kangaroo, if it does not have her keys, then we can conclude that it does not wink at the whale\nrule3() = not has(kangaroo, keys) => not wink(kangaroo, whale)\n# Rule4: If you are positive that you saw one of the animals eats the food that belongs to the sheep, you can be certain that it will also wink at the whale\nrule4(something) = eats(something, food_of(sheep)) => wink(something, whale)\n# Rule5: If you are positive that one of the animals does not knock down the fortress that belongs to the canary, you can be certain that it will raise a peace flag for the sea bass without a doubt\nrule5(something) = not knock_down(fortress, canary) => raise_flag_of_peace(something, sea_bass)\n# Rule6: If at least one animal winks at the whale, then the amberjack does not raise a peace flag for the sea bass.\nrule6() = wink(something, whale) => not raise_flag_of_peace(amberjack, sea_bass)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The amberjack burns the warehouse of the swordfish\nburns(amberjack, warehouse, swordfish) = True\n# The kangaroo eats the food of the sheep, and is holding her keys\neats(kangaroo, food_of(sheep)) = True\nhas(kangaroo, keys) = True\n# The mosquito raises a peace flag for the amberjack\nraise_flag_of_peace(mosquito, amberjack) = True\n# The turtle does not become an enemy of the amberjack.\nbecome_enemy(turtle, amberjack) = False\n\n# Based on the game state and the rules and preferences, does the amberjack raise a peace flag for the sea bass?\nquestion = raise_flag_of_peace(amberjack, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The leopard does not knock down the fortress that belongs to the carp whenever at least one animal owes money to the halibut\nRule2: If the leopard has a card whose color starts with the letter \"b\", then the leopard does not knock down the fortress that belongs to the sun bear\nRule3: If something does not knock down the fortress that belongs to the carp but knocks down the fortress of the sun bear, then it proceeds to the spot that is right after the spot of the dog\nRule4: If the leopard has something to carry apples and oranges, then the leopard knocks down the fortress of the sun bear\nRule5: If the leopard has more than ten friends, then it knocks down the fortress of the sun bear\nRule6: If the leopard has something to drink, then it does not knock down the fortress of the sun bear.\n\nRule2 is preferred over Rule4\nRule2 is preferred over Rule5\nRule6 is preferred over Rule4\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe leopard has 13 friends, has a cello, and does not roll the dice for the sea bass\nThe leopard has a club chair\nThe puffin sings a victory song for the halibut.\n\nBased on the game state and the rules and preferences, does the leopard proceed to the spot right after the dog?\nQuestion: Does the leopard proceed to the spot right after the dog?",
        "idx": 53,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The leopard does not knock down the fortress that belongs to the carp whenever at least one animal owes $$$ to the halibut\nrule1() = owes(something, money, halibut) => not knock_down(leopard, fortress, carp)\n# Rule2: If the leopard has a card whose color starts with the letter \"b\", then the leopard does not knock down the fortress that belongs to the sun bear\nrule2() = has(leopard, card) and starts_with(color(card), \"b\") => not knock_down(leopard, fortress, sun_bear)\n# Rule3: Be careful when something does not knock down the fortress that belongs to the carp but knocks down the fortress of the sun bear because in this case it will, surely, proceed to the spot that is right after the spot of the dog (this may or may not be problematic)\nrule3() = not knock_down(something, fortress, carp) and knock_down(something, fortress, sun_bear) => proceed_to_spot(something, right_after_spot(dog))\n# Rule4: If the leopard has something to carry apples and oranges, then the leopard knocks down the fortress of the sun bear\nrule4() = has(leopard, something_to_carry_apples_and_oranges) => knock_down(leopard, fortress, sun_bear)\n# Rule5: Regarding the leopard, if it has more than ten friends, then we can conclude that it knocks down the fortress of the sun bear\nrule5() = friends(leopard) > 10 => knock_down(leopard, fortress, sun_bear)\n# Rule6: Regarding the leopard, if it has something to drink, then we can conclude that it does not knock down the fortress of the sun bear.\nrule6() = has(leopard, something_to_drink) => not knock_down(leopard, fortress, sun_bear)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The leopard has 13 friends, has a cello, and does not roll the dice for the sea bass\nfriends(leopard) = 13\nhas(leopard, cello) = True\nnot roll_dice(leopard, sea_bass) = True\n# The leopard has a club chair\nhas(leopard, club_chair) = True\n# The puffin sings a victory song for the halibut.\nsing_victory_song(puffin, halibut) = True\n\n# Based on the game state and the rules and preferences, does the leopard proceed to the spot right after the dog?\nquestion = proceed_to_spot(leopard, right_after_spot(dog))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panther eats the food of the canary, then the canary removes one of the pieces of the whale\nRule2: If the first letter of the name of the panther is the same as the first letter of the name of the zander, then the panther eats the food of the canary\nRule3: If the squirrel eats the food of the panther, then the panther does not eat the food of the canary\nRule4: If the crocodile respects the squirrel, then the squirrel attacks the green fields of the bat.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe crocodile respects the squirrel\nThe name of the panther is Casper\nThe name of the zander is Chickpea\n\nBased on the game state and the rules and preferences, does the canary remove from the board one of the pieces of the whale?\nQuestion: Does the canary remove from the board one of the pieces of the whale?",
        "idx": 54,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panther eats the food of the canary, then the canary removes one of the pieces of the whale\nrule1() = eat_food(panther, food_of(canary)) => remove_piece(canary, whale)\n# Rule2: If the panther has a name whose first letter is the same as the first letter of the zander's name, then the panther eats the food of the canary\nrule2() = first_letter_of(name(panther)) == first_letter_of(name(zander)) => eat_food(panther, food_of(canary))\n# Rule3: If the squirrel eats the food that belongs to the panther, then the panther is not going to eat the food that belongs to the canary\nrule3() = eat_food(squirrel, food_of(panther)) => not eat_food(panther, food_of(canary))\n# Rule4: If the crocodile respects the squirrel, then the squirrel attacks the green fields of the bat.\nrule4() = respect(crocodile, squirrel) => attack(squirrel, green_fields, bat)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The crocodile respects the squirrel\nrespect(crocodile, squirrel) = True\n# The panther is named Casper\nname(panther, Casper) = True\n# The zander is named Chickpea.\nname(zander, Chickpea) = True\n\n# Based on the game state and the rules and preferences, does the canary remove from the board one of the pieces of the whale?\nquestion = remove_piece(canary, whale)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the polar bear has a musical instrument, then it does not show all her cards to the hummingbird\nRule2: If the first letter of the name of the polar bear is the same as the first letter of the name of the zander, then the polar bear does not show all her cards to the hummingbird\nRule3: If the polar bear has a card and the color of the card is one of the colors of the flag of Netherlands, then it shows all her cards to the hummingbird\nRule4: If something sings a song of victory for the penguin but does not steal five points from the wolverine, then it does not owe money to the hummingbird\nRule5: If the polar bear shows all her cards to the hummingbird and the sea bass does not owe money to the hummingbird, then the hummingbird will never wink at the cheetah\nRule6: If the raven does not offer a job position to the hummingbird, then the hummingbird winks at the cheetah\nRule7: If the polar bear does not have her keys, then it shows all her cards to the hummingbird.\n\nRule1 is preferred over Rule3\nRule1 is preferred over Rule7\nRule2 is preferred over Rule3\nRule2 is preferred over Rule7\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe polar bear has a yellow card\nThe polar bear lost her keys\nThe name of the polar bear is Teddy\nThe sea bass sings a victory song for the penguin but does not steal five points from the wolverine\nThe name of the zander is Max\n\nBased on the game state and the rules and preferences, does the hummingbird wink at the cheetah?\nQuestion: Does the hummingbird wink at the cheetah?",
        "idx": 55,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the polar bear has a musical instrument, then the polar bear does not show her cards (all of them) to the hummingbird\nrule1() = has(polar_bear, musical_instrument) => not show_cards(polar_bear, hummingbird)\n# Rule2: If the polar bear has a name whose first letter is the same as the first letter of the zander's name, then the polar bear does not show all her cards to the hummingbird\nrule2() = first_letter_of(name(polar_bear)) == first_letter_of(name(zander)) => not show_cards(polar_bear, hummingbird)\n# Rule3: Regarding the polar bear, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it shows all her cards to the hummingbird\nrule3() = has(polar_bear, card) and color(card) in colors_of(flag_of_Netherlands) => show_cards(polar_bear, hummingbird)\n# Rule4: If you see that something sings a song of victory for the penguin but does not steal five points from the wolverine, what can you certainly conclude? You can conclude that it does not owe $$$ to the hummingbird\nrule4(something) = sings(something, song_of_victory, penguin) & not steal_points(something, 5, wolverine) => not owe(something, money, hummingbird)\n# Rule5: If the polar bear shows her cards (all of them) to the hummingbird and the sea bass does not owe $$$ to the hummingbird, then the hummingbird will never wink at the cheetah\nrule5() = show_cards(polar_bear, hummingbird) & not owe(sea_bass, money, hummingbird) => not wink(hummingbird, cheetah)\n# Rule6: If the raven does not offer a job position to the hummingbird, then the hummingbird winks at the cheetah\nrule6() = not offer_job_position(raven, hummingbird) => wink(hummingbird, cheetah)\n# Rule7: Regarding the polar bear, if it does not have her keys, then we can conclude that it shows all her cards to the hummingbird.\nrule7() = not has(polar_bear, keys) => show_cards(polar_bear, hummingbird)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The polar bear has a card that is yellow in color, and lost her keys\nhas(polar_bear, card) = True\ncolor(card, yellow) = True\nlost(polar_bear, keys) = True\n# The polar bear is named Teddy\nname(polar_bear, Teddy) = True\n# The sea bass sings a victory song for the penguin but does not steal five points from the wolverine\nsings(sea_bass, song_of_victory, penguin) = True\nnot steal_points(sea_bass, 5, wolverine) = True\n# The zander is named Max\nname(zander, Max) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird wink at the cheetah?\nquestion = wink(hummingbird, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something removes one of the pieces of the halibut and removes from the board one of the pieces of the oscar, then it knows the defensive plans of the oscar\nRule2: If something does not learn the basics of resource management from the kangaroo, then it does not hold the same number of points as the cricket\nRule3: If something does not know the defense plan of the oscar, then it holds an equal number of points as the cricket.\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cockroach removes from the board one of the pieces of the halibut\nThe cockroach removes from the board one of the pieces of the oscar.\n\nBased on the game state and the rules and preferences, does the cockroach hold the same number of points as the cricket?\nQuestion: Does the cockroach hold the same number of points as the cricket?",
        "idx": 56,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something removes one of the pieces of the halibut and removes from the board one of the pieces of the oscar, what can you certainly conclude? You can conclude that it also knows the defensive plans of the oscar\nrule1() = remove(something, piece, halibut) & remove(something, piece, oscar) => knows(something, defensive_plans, oscar)\n# Rule2: If something does not learn the basics of resource management from the kangaroo, then it does not hold the same number of points as the cricket\nrule2(something) = not learn(something, basics_of_resource_management, kangaroo) => not points(something) == points(cricket)\n# Rule3: If you are positive that one of the animals does not know the defense plan of the oscar, you can be certain that it will hold an equal number of points as the cricket without a doubt.\nrule3(something) = not knows(something, defensive_plans, oscar) => points(something) == points(cricket)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cockroach removes from the board one of the pieces of the halibut\nremove(cockroach, piece, halibut) = True\n# The cockroach removes from the board one of the pieces of the oscar.\nremove(cockroach, piece, oscar) = True\n\n# Based on the game state and the rules and preferences, does the cockroach hold the same number of points as the cricket?\nquestion = points(cockroach) == points(cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the wolverine has a card whose color appears in the flag of Italy, then it knows the defensive plans of the penguin\nRule2: If something removes from the board one of the pieces of the snail and gives a magnifier to the tilapia, then it does not know the defense plan of the penguin\nRule3: If at least one animal knows the defense plan of the penguin, then the jellyfish proceeds to the spot right after the cow\nRule4: If the buffalo needs support from the jellyfish, then the jellyfish is not going to proceed to the spot right after the cow.\n\nRule2 is preferred over Rule1\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe wolverine has a card that is white in color\nThe wolverine removes from the board one of the pieces of the snail.\n\nBased on the game state and the rules and preferences, does the jellyfish proceed to the spot right after the cow?\nQuestion: Does the jellyfish proceed to the spot right after the cow?",
        "idx": 57,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the wolverine has a card whose color appears in the flag of Italy, then the wolverine knows the defensive plans of the penguin\nrule1() = has(wolverine, card) and color(card) in colors_of(flag_of_italy) => knows(wolverine, defensive_plans, penguin)\n# Rule2: If you see that something removes from the board one of the pieces of the snail and gives a magnifier to the tilapia, what can you certainly conclude? You can conclude that it does not know the defense plan of the penguin\nrule2(something) = remove(something, piece, snail) & give(something, magnifier, tilapia) => not knows(something, defensive_plans, penguin)\n# Rule3: If at least one animal knows the defense plan of the penguin, then the jellyfish proceeds to the spot right after the cow\nrule3() = knows(something, defensive_plans, penguin) => proceed(jellyfish, spot_right_after(cow))\n# Rule4: If the buffalo needs support from the jellyfish, then the jellyfish is not going to proceed to the spot right after the cow.\nrule4() = needs_support(buffalo, jellyfish) => not proceed(jellyfish, spot_right_after(cow))\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The wolverine has a card that is white in color\nhas(wolverine, card) = True\ncolor(card, white) = True\n# The wolverine removes from the board one of the pieces of the snail.\nremove(wolverine, piece, snail) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish proceed to the spot right after the cow?\nquestion = proceed(jellyfish, spot_right_after(cow))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cockroach removes one of the pieces of the parrot, then the parrot proceeds to the spot that is right after the spot of the tiger\nRule2: If the parrot has something to sit on, then it does not proceed to the spot right after the tiger\nRule3: If the parrot proceeds to the spot right after the tiger, then the tiger does not remove from the board one of the pieces of the moose\nRule4: If the parrot has a musical instrument, then it does not proceed to the spot that is right after the spot of the tiger.\n\nRule2 is preferred over Rule1\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cockroach removes from the board one of the pieces of the parrot\nThe parrot has green tea.\n\nBased on the game state and the rules and preferences, does the tiger remove from the board one of the pieces of the moose?\nQuestion: Does the tiger remove from the board one of the pieces of the moose?",
        "idx": 58,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The parrot unquestionably proceeds to the spot that is right after the spot of the tiger, in the case where the cockroach removes one of the pieces of the parrot\nrule1() = remove(cockroach, piece, parrot) => proceed(parrot, spot_right_after(tiger))\n# Rule2: Regarding the parrot, if it has something to sit on, then we can conclude that it does not proceed to the spot right after the tiger\nrule2() = has(parrot, something_to_sit_on) => not proceed(parrot, spot_right_after(tiger))\n# Rule3: The tiger does not remove from the board one of the pieces of the moose, in the case where the parrot proceeds to the spot right after the tiger\nrule3() = proceed(parrot, spot_right_after(tiger)) => not remove(tiger, piece, moose)\n# Rule4: If the parrot has a musical instrument, then the parrot does not proceed to the spot that is right after the spot of the tiger.\nrule4() = has(parrot, musical_instrument) => not proceed(parrot, spot_right_after(tiger))\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cockroach removes from the board one of the pieces of the parrot\nremove(cockroach, piece, parrot) = True\n# The parrot has a green tea.\nhas(parrot, green_tea) = True\n\n# Based on the game state and the rules and preferences, does the tiger remove from the board one of the pieces of the moose?\nquestion = remove(tiger, piece, moose)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hummingbird has something to carry apples and oranges, then it attacks the green fields whose owner is the snail\nRule2: If the hummingbird does not attack the green fields whose owner is the snail, then the snail holds an equal number of points as the eel\nRule3: If the hummingbird has more than 13 friends, then it attacks the green fields of the snail.\n\nThe current state of the game is as follows\nThe hummingbird has a plastic bag\nThe hummingbird has 1 energetic friend and 2 non-energetic friends.\n\nBased on the game state and the rules and preferences, does the snail hold the same number of points as the eel?\nQuestion: Does the snail hold the same number of points as the eel?",
        "idx": 59,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hummingbird, if it has something to carry apples and oranges, then we can conclude that it attacks the green fields whose owner is the snail\nrule1() = has(hummingbird, carry_apples_oranges) => attack(hummingbird, green_fields(snail))\n# Rule2: If the hummingbird does not attack the green fields whose owner is the snail, then the snail holds an equal number of points as the eel\nrule2() = not attack(hummingbird, green_fields(snail)) => points(snail) == points(eel)\n# Rule3: Regarding the hummingbird, if it has more than 13 friends, then we can conclude that it attacks the green fields of the snail.\nrule3() = friends(hummingbird) > 13 => attack(hummingbird, green_fields(snail))\n\n# The current state of the game is as follows\n# The hummingbird has a plastic bag\nhas(hummingbird, plastic_bag) = True\n# The hummingbird has one friend that is energetic and 2 friends that are not.\nenergetic_friends(hummingbird) = 1\nnon_energetic_friends(hummingbird) = 2\n\n# Based on the game state and the rules and preferences, does the snail hold the same number of points as the eel?\nquestion = points(snail) == points(eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panther has more than four friends, then it eats the food that belongs to the dog\nRule2: If the panther eats the food of the dog, then the dog knows the defense plan of the jellyfish.\n\nThe current state of the game is as follows\nThe panther has 7 friends.\n\nBased on the game state and the rules and preferences, does the dog know the defensive plans of the jellyfish?\nQuestion: Does the dog know the defensive plans of the jellyfish?",
        "idx": 60,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panther has more than four friends, then the panther eats the food that belongs to the dog\nrule1() = friends(panther) > 4 => eat_food(panther, food_of(dog))\n# Rule2: If the panther eats the food of the dog, then the dog knows the defense plan of the jellyfish.\nrule2() = eat_food(panther, food_of(dog)) => knows(dog, defense_plans, jellyfish)\n\n# The current state of the game is as follows\n# The panther has 7 friends.\nfriends(panther) = 7\n\n# Based on the game state and the rules and preferences, does the dog know the defensive plans of the jellyfish?\nquestion = knows(dog, defense_plans, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the parrot is the same as the first letter of the name of the doctorfish, then the parrot steals five points from the lobster\nRule2: If something steals five points from the lobster and sings a victory song for the bat, then it does not owe money to the cat\nRule3: If the parrot created a time machine, then it steals five points from the lobster\nRule4: If something eats the food of the ferret, then the parrot sings a victory song for the bat.\n\nThe current state of the game is as follows\nThe name of the doctorfish is Blossom\nThe octopus eats the food of the ferret\nThe parrot invented a time machine\nThe name of the parrot is Lola\n\nBased on the game state and the rules and preferences, does the parrot owe money to the cat?\nQuestion: Does the parrot owe money to the cat?",
        "idx": 61,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the parrot has a name whose first letter is the same as the first letter of the doctorfish's name, then the parrot steals five of the points of the lobster\nrule1() = first_letter_of(name(parrot)) == first_letter_of(name(doctorfish)) => steal_points(parrot, 5, lobster)\n# Rule2: Be careful when something steals five points from the lobster and also sings a victory song for the bat because in this case it will surely not owe money to the cat (this may or may not be problematic)\nrule2() = steal_points(something, 5, lobster) & sing_victory_song(something, bat) => not owe(something, money, cat)\n# Rule3: Regarding the parrot, if it created a time machine, then we can conclude that it steals five points from the lobster\nrule3() = created(parrot, time_machine) => steal_points(parrot, 5, lobster)\n# Rule4: If at least one animal eats the food of the ferret, then the parrot sings a victory song for the bat.\nrule4() = eat_food(something, food_of(ferret)) => sing_victory_song(parrot, bat)\n\n# The current state of the game is as follows\n# The doctorfish is named Blossom\nname(doctorfish, Blossom) = True\n# The octopus eats the food of the ferret\neat_food(octopus, food_of(ferret)) = True\n# The parrot invented a time machine, and is named Lola.\ncreated(parrot, time_machine) = True\nname(parrot, Lola) = True\n\n# Based on the game state and the rules and preferences, does the parrot owe money to the cat?\nquestion = owe(parrot, money, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the kiwi rolls the dice for the cheetah and the kangaroo does not roll the dice for the cheetah, then you can add \"the cheetah shows her cards (all of them) to the dog\" to your conclusions\nRule2: If the cheetah supports Chris Ronaldo, then it does not learn the basics of resource management from the phoenix\nRule3: If at least one animal knows the defensive plans of the koala, then the cheetah learns the basics of resource management from the phoenix\nRule4: If something does not learn the basics of resource management from the phoenix but rolls the dice for the spider, then it certainly does not show all her cards to the dog\nRule5: If something does not prepare armor for the eagle, then it rolls the dice for the cheetah\nRule6: If the kangaroo has a card whose color starts with the letter \"r\", then the kangaroo does not roll the dice for the cheetah.\n\nRule1 is preferred over Rule4\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cheetah supports Chris Ronaldo\nThe kangaroo has a banana-strawberry smoothie\nThe kangaroo has a black card\nThe rabbit knows the defensive plans of the koala\nThe kiwi does not prepare armor for the eagle.\n\nBased on the game state and the rules and preferences, does the cheetah show all her cards to the dog?\nQuestion: Does the cheetah show all her cards to the dog?",
        "idx": 62,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the cheetah, if the belief is that the kiwi rolls the dice for the cheetah and the kangaroo does not roll the dice for the cheetah, then you can add \"the cheetah shows her cards (all of them) to the dog\" to your conclusions\nrule1() = belief(kiwi, rolls_dice, cheetah) & not belief(kangaroo, rolls_dice, cheetah) => add_conclusion(cheetah, shows_cards, all, dog)\n# Rule2: Regarding the cheetah, if it is a fan of Chris Ronaldo, then we can conclude that it does not learn the basics of resource management from the phoenix\nrule2() = supports(cheetah, Chris_Ronaldo) => not learn(cheetah, basics_of_resource_management, phoenix)\n# Rule3: If at least one animal knows the defensive plans of the koala, then the cheetah learns the basics of resource management from the phoenix\nrule3() = knows(something, defensive_plans, koala) => learn(cheetah, basics_of_resource_management, phoenix)\n# Rule4: Be careful when something does not learn the basics of resource management from the phoenix but rolls the dice for the spider because in this case it certainly does not show all her cards to the dog (this may or may not be problematic)\nrule4() = not learn(something, basics_of_resource_management, phoenix) & rolls_dice(something, spider) => not show_cards(something, all, dog)\n# Rule5: If something does not prepare armor for the eagle, then it rolls the dice for the cheetah\nrule5() = not prepare_armor(something, eagle) => rolls_dice(something, cheetah)\n# Rule6: If the kangaroo has a card whose color starts with the letter \"r\", then the kangaroo does not roll the dice for the cheetah.\nrule6() = has(kangaroo, card) & starts_with(color_of(card), \"r\") => not rolls_dice(kangaroo, cheetah)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cheetah supports Chris Ronaldo\nsupports(cheetah, Chris_Ronaldo) = True\n# The kangaroo has a banana-strawberry smoothie, and has a card that is black in color\nhas(kangaroo, banana_strawberry_smoothie) = True\nhas(kangaroo, card) = True\ncolor_of(card, black) = True\n# The rabbit knows the defensive plans of the koala\nknows(rabbit, defensive_plans, koala) = True\n# The kiwi does not prepare armor for the eagle.\nprepare_armor(kiwi, eagle) = False\n\n# Based on the game state and the rules and preferences, does the cheetah show all her cards to the dog?\nquestion = shows_cards(cheetah, all, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job to the bat, then the mosquito owes money to the phoenix\nRule2: If the panda bear has fewer than 14 friends, then it offers a job position to the bat.\n\nThe current state of the game is as follows\nThe panda bear has 2 playful friends and 4 friends that are not playful.\n\nBased on the game state and the rules and preferences, does the mosquito owe money to the phoenix?\nQuestion: Does the mosquito owe money to the phoenix?",
        "idx": 63,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal offers a job to the bat, then the mosquito owes money to the phoenix\nrule1() = offer_job_position(something, bat) => owe(mosquito, money, phoenix)\n# Rule2: If the panda bear has fewer than 14 friends, then the panda bear offers a job position to the bat.\nrule2() = friends(panda_bear) < 14 => offer_job_position(panda_bear, bat)\n\n# The current state of the game is as follows\n# The panda bear has two friends that are playful and 4 friends that are not.\nplayful_friends(panda_bear) = 2\nnon_playful_friends(panda_bear) = 4\n\n# Based on the game state and the rules and preferences, does the mosquito owe money to the phoenix?\nquestion = owe(mosquito, money, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon owns a luxury aircraft, then it needs the support of the jellyfish\nRule2: If something needs the support of the jellyfish, then it does not know the defensive plans of the tiger\nRule3: If the baboon has a card and the color of the card starts with the letter \"n\", then it needs support from the jellyfish.\n\nThe current state of the game is as follows\nThe baboon has a card that is indigo in color\nThe baboon purchased a luxury aircraft.\n\nBased on the game state and the rules and preferences, does the baboon know the defensive plans of the tiger?\nQuestion: Does the baboon know the defensive plans of the tiger?",
        "idx": 64,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the baboon owns a luxury aircraft, then the baboon needs the support of the jellyfish\nrule1() = owns(baboon, luxury_aircraft) => needs_support(baboon, jellyfish)\n# Rule2: If you are positive that you saw one of the animals needs the support of the jellyfish, you can be certain that it will not know the defensive plans of the tiger\nrule2(something) = needs_support(something, jellyfish) => not know(something, defensive_plans, tiger)\n# Rule3: Regarding the baboon, if it has a card whose color starts with the letter \"n\", then we can conclude that it needs support from the jellyfish.\nrule3() = has(baboon, card) and starts_with(color(card), \"n\") => needs_support(baboon, jellyfish)\n\n# The current state of the game is as follows\n# The baboon has a card that is indigo in color\nhas(baboon, card) = True\ncolor(card, indigo) = True\n# The baboon purchased a luxury aircraft.\nowns(baboon, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the baboon know the defensive plans of the tiger?\nquestion = know(baboon, defensive_plans, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the meerkat has a card and the color of the card is one of the rainbow colors, then the meerkat owes money to the cockroach\nRule2: If the meerkat steals five points from the cockroach, then the cockroach learns the basics of resource management from the cow\nRule3: If the moose knows the defense plan of the cockroach, then the cockroach does not learn the basics of resource management from the cow.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe meerkat has a yellow card.\n\nBased on the game state and the rules and preferences, does the cockroach learn the basics of resource management from the cow?\nQuestion: Does the cockroach learn the basics of resource management from the cow?",
        "idx": 65,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the meerkat has a card whose color is one of the rainbow colors, then the meerkat owes money to the cockroach\nrule1() = has(meerkat, card) and color(card) in rainbow_colors => owe(meerkat, money, cockroach)\n# Rule2: If the meerkat steals five of the points of the cockroach, then the cockroach learns the basics of resource management from the cow\nrule2() = steal_points(meerkat, 5, cockroach) => learn(cockroach, basics_of_resource_management, cow)\n# Rule3: If the moose knows the defense plan of the cockroach, then the cockroach is not going to learn the basics of resource management from the cow.\nrule3() = knows(moose, defense_plan, cockroach) => not learn(cockroach, basics_of_resource_management, cow)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The meerkat has a card that is yellow in color.\nhas(meerkat, card) = True\ncolor(card, yellow) = True\n\n# Based on the game state and the rules and preferences, does the cockroach learn the basics of resource management from the cow?\nquestion = learn(cockroach, basics_of_resource_management, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish has fewer than 5 friends, then it does not know the defense plan of the meerkat\nRule2: If the catfish has a card with a primary color, then it does not know the defense plan of the meerkat\nRule3: If something knocks down the fortress of the halibut, then it does not become an actual enemy of the phoenix\nRule4: If something winks at the elephant, then it does not know the defensive plans of the pig\nRule5: If something does not become an actual enemy of the phoenix and also does not know the defense plan of the meerkat, then it knows the defensive plans of the pig\nRule6: If the catfish has something to carry apples and oranges, then it winks at the elephant.\n\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe catfish has a red card\nThe fortress of the halibut is knocked down by the catfish\nThe catfish has a knapsack\nThe catfish has 6 friends.\n\nBased on the game state and the rules and preferences, does the catfish know the defensive plans of the pig?\nQuestion: Does the catfish know the defensive plans of the pig?",
        "idx": 66,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the catfish has fewer than 5 friends, then the catfish does not know the defense plan of the meerkat\nrule1() = friends(catfish) < 5 => not know(catfish, defense_plan, meerkat)\n# Rule2: If the catfish has a card with a primary color, then the catfish does not know the defense plan of the meerkat\nrule2() = has(catfish, card) and color(card) in primary_colors => not know(catfish, defense_plan, meerkat)\n# Rule3: If something knocks down the fortress of the halibut, then it does not become an actual enemy of the phoenix\nrule3(something) = knocks_down(something, fortress, halibut) => not become_enemy(something, phoenix)\n# Rule4: If you are positive that you saw one of the animals winks at the elephant, you can be certain that it will not know the defensive plans of the pig\nrule4(something) = saw(something, wink, elephant) => not know(something, defense_plan, pig)\n# Rule5: Be careful when something does not become an actual enemy of the phoenix and also does not know the defense plan of the meerkat because in this case it will surely know the defensive plans of the pig (this may or may not be problematic)\nrule5(something) = not become_enemy(something, phoenix) and not know(something, defense_plan, meerkat) => know(something, defense_plan, pig)\n# Rule6: If the catfish has something to carry apples and oranges, then the catfish winks at the elephant.\nrule6() = has(catfish, knapsack) and carries(catfish, apples) and carries(catfish, oranges) => wink(catfish, elephant)\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The catfish has a card that is red in color, and knocks down the fortress of the halibut\nhas(catfish, card) = True\ncolor(card, red) = True\nknocks_down(catfish, fortress, halibut) = True\n# The catfish has a knapsack, and has six friends.\nhas(catfish, knapsack) = True\nfriends(catfish) = 6\n\n# Based on the game state and the rules and preferences, does the catfish know the defensive plans of the pig?\nquestion = know(catfish, defense_plan, pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something eats the food that belongs to the dog and owes money to the doctorfish, then it will burn the warehouse of the panda bear.\nRule2: If the aardvark does not burn the warehouse of the panda bear, then the panda bear does not learn elementary resource management from the halibut.\nRule3: If something learns elementary resource management from the koala, then the aardvark does not burn the warehouse of the panda bear.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe aardvark owes money to the doctorfish\nThe leopard learns the basics of resource management from the koala.\n\nBased on the game state and the rules and preferences, does the panda bear learn the basics of resource management from the halibut?\nQuestion: Does the panda bear learn the basics of resource management from the halibut?",
        "idx": 67,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something eats the food that belongs to the dog and also owes $$$ to the doctorfish because in this case it will surely burn the warehouse of the panda bear (this may or may not be problematic)\nrule1(something) = eat_food(something, food_of(dog)) & owe(something, money, doctorfish) => burn_warehouse(panda_bear)\n# Rule2: If the aardvark does not burn the warehouse that is in possession of the panda bear, then the panda bear does not learn elementary resource management from the halibut\nrule2() = not burn_warehouse(aardvark, panda_bear) => not learn(panda_bear, elementary_resource_management, halibut)\n# Rule3: If at least one animal learns elementary resource management from the koala, then the aardvark does not burn the warehouse of the panda bear.\nrule3() = learn(something, elementary_resource_management, koala) => not burn_warehouse(aardvark, panda_bear)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The aardvark owes money to the doctorfish\nowe(aardvark, money, doctorfish) = True\n# The leopard learns the basics of resource management from the koala.\nlearn(leopard, basics_of_resource_management, koala) = True\n\n# Based on the game state and the rules and preferences, does the panda bear learn the basics of resource management from the halibut?\nquestion = learn(panda_bear, basics_of_resource_management, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the polar bear has a name whose first letter is the same as the first letter of the whale's name, then the polar bear does not attack the green fields of the zander\nRule2: If the polar bear does not have her keys, then it does not attack the green fields whose owner is the zander\nRule3: If the polar bear does not attack the green fields whose owner is the zander and the starfish does not knock down the fortress of the zander, then the zander attacks the green fields of the grasshopper\nRule4: If something eats the food of the elephant, then the polar bear attacks the green fields whose owner is the zander\nRule5: If the starfish has something to drink, then it knocks down the fortress of the zander.\n\nRule1 is preferred over Rule4\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe name of the polar bear is Teddy\nThe polar bear lost her keys\nThe starfish has a banana-strawberry smoothie\nThe name of the whale is Pashmak.\n\nBased on the game state and the rules and preferences, does the zander attack the green fields whose owner is the grasshopper?\nQuestion: Does the zander attack the green fields whose owner is the grasshopper?",
        "idx": 68,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the polar bear has a name whose first letter is the same as the first letter of the whale's name, then the polar bear does not attack the green fields of the zander\nrule1() = first_letter_of(name(polar_bear)) == first_letter_of(name(whale)) => not attack(polar_bear, green_fields, zander)\n# Rule2: Regarding the polar bear, if it does not have her keys, then we can conclude that it does not attack the green fields whose owner is the zander\nrule2() = not has(polar_bear, keys) => not attack(polar_bear, green_fields, zander)\n# Rule3: For the zander, if the belief is that the polar bear does not attack the green fields whose owner is the zander and the starfish does not knock down the fortress of the zander, then you can add \"the zander attacks the green fields of the grasshopper\" to your conclusions\nrule3() = not attack(polar_bear, green_fields, zander) & not knock_down(starfish, fortress, zander) => attack(zander, green_fields, grasshopper)\n# Rule4: If at least one animal eats the food that belongs to the elephant, then the polar bear attacks the green fields whose owner is the zander\nrule4() = eat_food(something, food_of(elephant)) => attack(polar_bear, green_fields, zander)\n# Rule5: Regarding the starfish, if it has something to drink, then we can conclude that it knocks down the fortress of the zander.\nrule5() = has(starfish, drink) => knock_down(starfish, fortress, zander)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The polar bear is named Teddy\nname(polar_bear, Teddy) = True\n# The polar bear lost her keys\nhas(polar_bear, keys) = False\n# The starfish has a banana-strawberry smoothie\nhas(starfish, banana_strawberry_smoothie) = True\n# The whale is named Pashmak.\nname(whale, Pashmak) = True\n\n# Based on the game state and the rules and preferences, does the zander attack the green fields whose owner is the grasshopper?\nquestion = attack(zander, green_fields, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something gives a magnifying glass to the doctorfish and burns the warehouse that is in possession of the lobster, then it also gives a magnifier to the kiwi\nRule2: If something gives a magnifier to the kiwi, then it needs support from the wolverine.\n\nThe current state of the game is as follows\nThe sun bear burns the warehouse of the lobster and gives a magnifier to the doctorfish.\n\nBased on the game state and the rules and preferences, does the sun bear need support from the wolverine?\nQuestion: Does the sun bear need support from the wolverine?",
        "idx": 69,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something gives a magnifying glass to the doctorfish and burns the warehouse that is in possession of the lobster, what can you certainly conclude? You can conclude that it also gives a magnifier to the kiwi\nrule1() = give(something, magnifying_glass, doctorfish) & burn(something, warehouse, lobster) => give(something, magnifier, kiwi)\n# Rule2: If something gives a magnifier to the kiwi, then it needs support from the wolverine, too.\nrule2() = give(something, magnifier, kiwi) => need_support(something, wolverine)\n\n# The current state of the game is as follows\n# The sun bear burns the warehouse of the lobster, and gives a magnifier to the doctorfish.\nburn(sun_bear, warehouse, lobster) = True\ngive(sun_bear, magnifying_glass, doctorfish) = True\n\n# Based on the game state and the rules and preferences, does the sun bear need support from the wolverine?\nquestion = need_support(sun_bear, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tiger has a card with a primary color, then it needs the support of the eagle\nRule2: If the tiger does not have her keys, then it needs the support of the eagle\nRule3: If something needs the support of the eagle, then it does not remove one of the pieces of the doctorfish.\n\nThe current state of the game is as follows\nThe tiger has a blue card\nThe tiger is holding her keys.\n\nBased on the game state and the rules and preferences, does the tiger remove from the board one of the pieces of the doctorfish?\nQuestion: Does the tiger remove from the board one of the pieces of the doctorfish?",
        "idx": 70,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the tiger has a card with a primary color, then the tiger needs the support of the eagle\nrule1() = has(tiger, card) and color(card) in primary_colors => needs_support(tiger, eagle)\n# Rule2: Regarding the tiger, if it does not have her keys, then we can conclude that it needs support from the eagle\nrule2() = not has(tiger, keys) => needs_support(tiger, eagle)\n# Rule3: If something needs the support of the eagle, then it does not remove one of the pieces of the doctorfish.\nrule3(something) = needs_support(something, eagle) => not remove_piece(something, doctorfish)\n\n# The current state of the game is as follows\n# The tiger has a card that is blue in color, and is holding her keys.\nhas(tiger, card) = True\ncolor(card, blue) = True\nhas(tiger, keys) = True\n\n# Based on the game state and the rules and preferences, does the tiger remove from the board one of the pieces of the doctorfish?\nquestion = remove_piece(tiger, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish attacks the green fields of the mosquito and the jellyfish learns the basics of resource management from the mosquito, then the mosquito will not offer a job position to the donkey\nRule2: If something does not learn elementary resource management from the koala, then it offers a job to the donkey\nRule3: If the mosquito has fewer than four friends, then the mosquito does not learn elementary resource management from the koala\nRule4: If the jellyfish has something to sit on, then the jellyfish eats the food that belongs to the mosquito.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe jellyfish has a flute\nThe mosquito has 6 energetic friends and 4 non-energetic friends\nThe raven does not proceed to the spot right after the sea bass.\n\nBased on the game state and the rules and preferences, does the mosquito offer a job to the donkey?\nQuestion: Does the mosquito offer a job position to the donkey?",
        "idx": 71,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the catfish attacks the green fields of the mosquito and the jellyfish learns the basics of resource management from the mosquito, then the mosquito will not offer a job position to the donkey\nrule1() = attack(catfish, green_fields, mosquito) & learn(jellyfish, basics_of_resource_management, mosquito) => not offer_job_position(mosquito, donkey)\n# Rule2: If something does not learn elementary resource management from the koala, then it offers a job to the donkey\nrule2(something) = not learn(something, elementary_resource_management, koala) => offer_job_position(something, donkey)\n# Rule3: If the mosquito has fewer than four friends, then the mosquito does not learn elementary resource management from the koala\nrule3() = friends(mosquito) < 4 => not learn(mosquito, elementary_resource_management, koala)\n# Rule4: If the jellyfish has something to sit on, then the jellyfish eats the food that belongs to the mosquito.\nrule4() = has(jellyfish, something_to_sit_on) => eat_food(jellyfish, food_of(mosquito))\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The jellyfish has a flute\nhas(jellyfish, flute) = True\n# The mosquito has six friends that are energetic and 4 friends that are not\nenergetic_friends(mosquito) = 6\nnon_energetic_friends(mosquito) = 4\n# The raven does not proceed to the spot right after the sea bass.\nproceed(raven, spot_right_after(sea_bass)) = False\n\n# Based on the game state and the rules and preferences, does the mosquito offer a job to the donkey?\nquestion = offer_job_position(mosquito, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus has a device to connect to the internet, then it offers a job to the sea bass\nRule2: If something raises a flag of peace for the whale, then the elephant rolls the dice for the cow\nRule3: If something offers a job to the amberjack and offers a job to the sea bass, then it does not offer a job position to the hippopotamus\nRule4: If the octopus has more than four friends, then it does not offer a job position to the sea bass\nRule5: If the octopus has a leafy green vegetable, then it does not offer a job position to the sea bass\nRule6: If the octopus killed the mayor, then it offers a job position to the amberjack\nRule7: The octopus offers a job position to the hippopotamus whenever something rolls the dice for the cow.\n\nRule4 is preferred over Rule1\nRule5 is preferred over Rule1\nRule7 is preferred over Rule3\n\nThe current state of the game is as follows\nThe carp raises a peace flag for the whale\nThe octopus assassinated the mayor, and has a computer\nThe octopus has a tablet.\n\nBased on the game state and the rules and preferences, does the octopus offer a job to the hippopotamus?\nQuestion: Does the octopus offer a job to the hippopotamus?",
        "idx": 72,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the octopus has a device to connect to the internet, then the octopus offers a job to the sea bass\nrule1() = has(octopus, device_to_connect_to_internet) => offer_job_position(octopus, sea_bass)\n# Rule2: If at least one animal raises a flag of peace for the whale, then the elephant rolls the dice for the cow\nrule2() = raise_flag_of_peace(something, whale) => roll_dice(elephant, cow)\n# Rule3: If you see that something offers a job to the amberjack and offers a job to the sea bass, what can you certainly conclude? You can conclude that it does not offer a job position to the hippopotamus\nrule3(something) = offer_job_position(something, amberjack) & offer_job_position(something, sea_bass) => not offer_job_position(something, hippopotamus)\n# Rule4: Regarding the octopus, if it has more than four friends, then we can conclude that it does not offer a job position to the sea bass\nrule4() = friends(octopus) > 4 => not offer_job_position(octopus, sea_bass)\n# Rule5: Regarding the octopus, if it has a leafy green vegetable, then we can conclude that it does not offer a job position to the sea bass\nrule5() = has(octopus, leafy_green_vegetable) => not offer_job_position(octopus, sea_bass)\n# Rule6: Regarding the octopus, if it killed the mayor, then we can conclude that it offers a job position to the amberjack\nrule6() = killed(octopus, mayor) => offer_job_position(octopus, amberjack)\n# Rule7: The octopus offers a job position to the hippopotamus whenever at least one animal rolls the dice for the cow.\nrule7() = roll_dice(something, cow) => offer_job_position(octopus, hippopotamus)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n\n# The current state of the game is as follows\n# The carp raises a peace flag for the whale\nraise_flag_of_peace(carp, whale) = True\n# The octopus assassinated the mayor, and has a computer\nkilled(octopus, mayor) = True\nhas(octopus, computer) = True\n# The octopus has a tablet.\nhas(octopus, tablet) = True\n\n# Based on the game state and the rules and preferences, does the octopus offer a job to the hippopotamus?\nquestion = offer_job_position(octopus, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the snail is the same as the first letter of the name of the amberjack, then the snail needs the support of the lobster\nRule2: If the snail has more than 4 friends, then it does not offer a job to the buffalo\nRule3: If something needs support from the lobster but does not offer a job position to the buffalo, then it will not burn the warehouse of the pig.\nRule4: If the snail has a card with a primary color, then it needs the support of the lobster.\n\nThe current state of the game is as follows\nThe name of the amberjack is Buddy\nThe snail has 6 friends\nThe snail has a card that is orange in color\nThe name of the snail is Beauty.\n\nBased on the game state and the rules and preferences, does the snail burn the warehouse of the pig?\nQuestion: Does the snail burn the warehouse of the pig?",
        "idx": 73,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the snail, if it has a name whose first letter is the same as the first letter of the amberjack's name, then we can conclude that it needs the support of the lobster\nrule1() = first_letter_of(name(snail)) == first_letter_of(name(amberjack)) => needs_support(snail, lobster)\n# Rule2: If the snail has more than 4 friends, then the snail does not offer a job to the buffalo\nrule2() = friends(snail) > 4 => not offer_job_position(snail, buffalo)\n# Rule3: Be careful when something needs support from the lobster but does not offer a job position to the buffalo because in this case it will, surely, not burn the warehouse of the pig (this may or may not be problematic)\nrule3() = needs_support(something, lobster) & not offer_job_position(something, buffalo) => not burn_warehouse(pig)\n# Rule4: If the snail has a card with a primary color, then the snail needs the support of the lobster.\nrule4() = has(snail, card) and color(card) in primary_colors => needs_support(snail, lobster)\n\n# The current state of the game is as follows\n# The amberjack is named Buddy\nname(amberjack, Buddy) = True\n# The snail has 6 friends, and has a card that is orange in color\nfriends(snail) = 6\nhas(snail, card) = True\ncolor(card, orange) = True\n# The snail is named Beauty.\nname(snail, Beauty) = True\n\n# Based on the game state and the rules and preferences, does the snail burn the warehouse of the pig?\nquestion = burn_warehouse(snail, pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something eats the food of the grizzly bear, then it does not know the defense plan of the kudu\nRule2: If something offers a job to the parrot and raises a flag of peace for the squirrel, then it respects the swordfish\nRule3: If the kudu has a high salary, then it offers a job position to the parrot\nRule4: If the squirrel knows the defense plan of the kudu, then the kudu does not respect the swordfish\nRule5: If the turtle removes from the board one of the pieces of the kudu, then the kudu does not raise a peace flag for the squirrel\nRule6: If the whale steals five of the points of the squirrel, then the squirrel knows the defense plan of the kudu.\n\nRule4 is preferred over Rule2\nRule6 is preferred over Rule1\n\nThe current state of the game is as follows\nThe kudu has 6 friends and invented a time machine\nThe turtle removes from the board one of the pieces of the kudu\nThe whale does not steal five points from the squirrel.\n\nBased on the game state and the rules and preferences, does the kudu respect the swordfish?\nQuestion: Does the kudu respect the swordfish?",
        "idx": 74,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals eats the food of the grizzly bear, you can be certain that it will not know the defense plan of the kudu\nrule1(something) = saw(something, eat, food_of(grizzly_bear)) => not know(something, defense_plan, kudu)\n# Rule2: Be careful when something offers a job to the parrot and also raises a flag of peace for the squirrel because in this case it will surely respect the swordfish (this may or may not be problematic)\nrule2(something) = offer_job_position(something, parrot) & raise_flag_of_peace(something, squirrel) => respect(something, swordfish)\n# Rule3: Regarding the kudu, if it has a high salary, then we can conclude that it offers a job position to the parrot\nrule3() = has(kudu, high_salary) => offer_job_position(kudu, parrot)\n# Rule4: The kudu does not respect the swordfish, in the case where the squirrel knows the defense plan of the kudu\nrule4() = know(squirrel, defense_plan, kudu) => not respect(kudu, swordfish)\n# Rule5: If the turtle removes from the board one of the pieces of the kudu, then the kudu is not going to raise a peace flag for the squirrel\nrule5() = remove_piece(turtle, kudu) => not raise_flag_of_peace(kudu, squirrel)\n# Rule6: If the whale steals five of the points of the squirrel, then the squirrel knows the defense plan of the kudu.\nrule6() = steal_points(whale, 5, squirrel) => know(squirrel, defense_plan, kudu)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n\n# The current state of the game is as follows\n# The kudu has 6 friends, and invented a time machine\nfriends(kudu) = 6\ninvented(kudu, time_machine) = True\n# The turtle removes from the board one of the pieces of the kudu\nremove_piece(turtle, kudu) = True\n# The whale does not steal five points from the squirrel.\nsteal_points(whale, 5, squirrel) = False\n\n# Based on the game state and the rules and preferences, does the kudu respect the swordfish?\nquestion = respect(kudu, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kiwi shows all her cards to the cockroach, then the cockroach does not respect the canary\nRule2: If the cockroach has a card whose color appears in the flag of Belgium, then the cockroach does not show all her cards to the penguin\nRule3: If the cockroach has a backpack and carries apples and oranges, then it does not show all her cards to the penguin\nRule4: If the cockroach has a sharp object, then it respects the canary\nRule5: If something does not show all her cards to the penguin but respects the canary, then it burns the warehouse of the zander\nRule6: If the snail has a card whose color starts with the letter \"w\", then it holds an equal number of points as the rabbit\nRule7: If the first letter of the name of the cockroach is the same as the first letter of the name of the eagle, then the cockroach respects the canary.\n\nRule1 is preferred over Rule4\nRule1 is preferred over Rule7\n\nThe current state of the game is as follows\nThe cockroach has a backpack and some spinach\nThe cockroach has a violet card named Blossom\nThe eagle is named Buddy\nThe snail has a white card.\n\nBased on the game state and the rules and preferences, does the cockroach burn the warehouse of the zander?\nQuestion: Does the cockroach burn the warehouse of the zander?",
        "idx": 75,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kiwi shows her cards (all of them) to the cockroach, then the cockroach is not going to respect the canary\nrule1() = show_cards(kiwi, all) => not respect(cockroach, canary)\n# Rule2: If the cockroach has a card whose color appears in the flag of Belgium, then the cockroach does not show all her cards to the penguin\nrule2() = has(cockroach, card) and color(card) in flag_colors(Belgium) => not show_cards(cockroach, all)\n# Rule3: Regarding the cockroach, if it has something to carry apples and oranges, then we can conclude that it does not show all her cards to the penguin\nrule3() = has(cockroach, backpack) and has(cockroach, apples) and has(cockroach, oranges) => not show_cards(cockroach, all)\n# Rule4: Regarding the cockroach, if it has a sharp object, then we can conclude that it respects the canary\nrule4() = has(cockroach, sharp_object) => respect(cockroach, canary)\n# Rule5: If you see that something does not show her cards (all of them) to the penguin but it respects the canary, what can you certainly conclude? You can conclude that it also burns the warehouse of the zander\nrule5() = not show_cards(something, all) & respect(something, canary) => burn_warehouse(something, zander)\n# Rule6: Regarding the snail, if it has a card whose color starts with the letter \"w\", then we can conclude that it holds an equal number of points as the rabbit\nrule6() = has(snail, card) and starts_with(color(card), \"w\") => points(snail) == points(rabbit)\n# Rule7: Regarding the cockroach, if it has a name whose first letter is the same as the first letter of the eagle's name, then we can conclude that it respects the canary.\nrule7() = first_letter_of(name(cockroach)) == first_letter_of(name(eagle)) => respect(cockroach, canary)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n\n# The current state of the game is as follows\n# The cockroach has a backpack, and has some spinach\nhas(cockroach, backpack) = True\nhas(cockroach, spinach) = True\n# The cockroach has a card that is violet in color, and is named Blossom\nhas(cockroach, card) = True\ncolor(card, violet) = True\nname(cockroach, Blossom) = True\n# The eagle is named Buddy\nname(eagle, Buddy) = True\n# The snail has a card that is white in color.\nhas(snail, card) = True\ncolor(card, white) = True\n\n# Based on the game state and the rules and preferences, does the cockroach burn the warehouse of the zander?\nquestion = burn_warehouse(cockroach, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the octopus is not going to steal five of the points of the bat but the cheetah steals five of the points of the bat, then you can add that \"the bat is not going to roll the dice for the leopard\" to your conclusions\nRule2: If the octopus has a card and the color of the card is one of the rainbow colors, then it does not steal five of the points of the bat\nRule3: If the cheetah has a device to connect to the internet, then it steals five of the points of the bat\nRule4: If the cheetah has more than eight friends, then it steals five points from the bat.\n\nThe current state of the game is as follows\nThe catfish needs support from the oscar\nThe cheetah has a cappuccino\nThe cheetah has 14 friends\nThe octopus has a card\nThe color of the card is violet\n\nBased on the game state and the rules and preferences, does the bat roll the dice for the leopard?\nQuestion: Is it concluded that the bat is not going to roll the dice for the leopard?",
        "idx": 76,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the bat, if the belief is that the octopus is not going to steal five of the points of the bat but the cheetah steals five of the points of the bat, then you can add that \"the bat is not going to roll the dice for the leopard\" to your conclusions\nrule1() = not steal(octopus, 5, points, bat) & steal(cheetah, 5, points, bat) => add_conclusion(\"the bat is not going to roll the dice for the leopard\")\n# Rule2: Regarding the octopus, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not steal five of the points of the bat\nrule2() = has(octopus, card) and color(card) in rainbow_colors => not steal(octopus, 5, points, bat)\n# Rule3: Regarding the cheetah, if it has a device to connect to the internet, then we can conclude that it steals five of the points of the bat\nrule3() = has(cheetah, device_to_connect_to_internet) => steal(cheetah, 5, points, bat)\n# Rule4: If the cheetah has more than eight friends, then the cheetah steals five points from the bat.\nrule4() = friends(cheetah) > 8 => steal(cheetah, 5, points, bat)\n\n# The current state of the game is as follows\n# The catfish needs support from the oscar\nneeds_support(catfish, oscar) = True\n# The cheetah has a cappuccino, and has fourteen friends\nhas(cheetah, cappuccino) = True\nfriends(cheetah) = 14\n# The octopus has a card that is violet in color.\nhas(octopus, card) = True\ncolor(card, violet) = True\n\n# Based on the game state and the rules and preferences, does the bat roll the dice for the leopard?\nquestion = \"the bat is not going to roll the dice for the leopard\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sheep has a card and the color of the card is one of the rainbow colors, then the sheep knows the defense plan of the raven\nRule2: If something rolls the dice for the doctorfish, then the sheep does not know the defense plan of the raven\nRule3: If the dog respects the raven and the sheep does not know the defensive plans of the raven, then the raven prepares armor for the eagle\nRule4: If the dog has a musical instrument, then it respects the raven.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe dog has a violin\nThe cow does not roll the dice for the doctorfish\nThe dog does not steal five points from the hippopotamus.\n\nBased on the game state and the rules and preferences, does the raven prepare armor for the eagle?\nQuestion: Does the raven prepare armor for the eagle?",
        "idx": 77,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sheep has a card whose color is one of the rainbow colors, then the sheep knows the defense plan of the raven\nrule1() = has(sheep, card) and color(card) in rainbow_colors => knows(sheep, defense_plan, raven)\n# Rule2: If at least one animal rolls the dice for the doctorfish, then the sheep does not know the defense plan of the raven\nrule2() = rolls_dice(something, doctorfish) => not knows(sheep, defense_plan, raven)\n# Rule3: If the dog respects the raven and the sheep does not know the defensive plans of the raven, then, inevitably, the raven prepares armor for the eagle\nrule3() = respects(dog, raven) & not knows(sheep, defense_plan, raven) => prepare_armor(raven, eagle)\n# Rule4: Regarding the dog, if it has a musical instrument, then we can conclude that it respects the raven.\nrule4() = has(dog, musical_instrument) => respects(dog, raven)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The dog has a violin\nhas(dog, violin) = True\n# The cow does not roll the dice for the doctorfish\nrolls_dice(cow, doctorfish) = False\n# The dog does not steal five points from the hippopotamus.\nsteal_points(dog, 5, hippopotamus) = False\n\n# Based on the game state and the rules and preferences, does the raven prepare armor for the eagle?\nquestion = prepare_armor(raven, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal steals five points from the panda bear, then the leopard becomes an actual enemy of the sea bass\nRule2: The leopard winks at the spider if the turtle does not learn elementary resource management from the leopard\nRule3: If something becomes an actual enemy of the dog, then it steals five points from the panda bear.\n\nThe current state of the game is as follows\nThe crocodile becomes an enemy of the dog\nThe turtle does not learn the basics of resource management from the leopard.\n\nBased on the game state and the rules and preferences, does the leopard become an enemy of the sea bass?\nQuestion: Does the leopard become an enemy of the sea bass?",
        "idx": 78,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal steals five points from the panda bear, then the leopard becomes an actual enemy of the sea bass\nrule1() = steal_points(something, 5, panda_bear) => become_enemy(leopard, sea_bass)\n# Rule2: The leopard unquestionably winks at the spider, in the case where the turtle does not learn elementary resource management from the leopard\nrule2() = not learn(turtle, elementary_resource_management, leopard) => wink(leopard, spider)\n# Rule3: If you are positive that you saw one of the animals becomes an actual enemy of the dog, you can be certain that it will also steal five points from the panda bear.\nrule3(something) = become_enemy(something, dog) => steal_points(something, 5, panda_bear)\n\n# The current state of the game is as follows\n# The crocodile becomes an enemy of the dog\nbecome_enemy(crocodile, dog) = True\n# The turtle does not learn the basics of resource management from the leopard.\nnot learn(turtle, elementary_resource_management, leopard) = True\n\n# Based on the game state and the rules and preferences, does the leopard become an enemy of the sea bass?\nquestion = become_enemy(leopard, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sea bass burns the warehouse of the kudu, then the kudu does not eat the food that belongs to the cow.\nRule2: If something becomes an actual enemy of the viperfish and raises a peace flag for the hare, then it burns the warehouse of the kudu.\n\nThe current state of the game is as follows\nThe sea bass becomes an enemy of the viperfish\nThe sea bass raises a peace flag for the hare.\n\nBased on the game state and the rules and preferences, does the kudu eat the food of the cow?\nQuestion: Does the kudu eat the food that belongs to the cow?",
        "idx": 79,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The kudu does not eat the food that belongs to the cow, in the case where the sea bass burns the warehouse of the kudu\nrule1() = burns_warehouse(sea_bass, kudu) => not eat(kudu, food_of(cow))\n# Rule2: If you see that something becomes an actual enemy of the viperfish and raises a peace flag for the hare, what can you certainly conclude? You can conclude that it also burns the warehouse of the kudu.\nrule2(something) = become_enemy(something, viperfish) & raise_flag_of_peace(something, hare) => burns_warehouse(something, kudu)\n\n# The current state of the game is as follows\n# The sea bass becomes an enemy of the viperfish\nbecome_enemy(sea_bass, viperfish) = True\n# The sea bass raises a peace flag for the hare.\nraise_flag_of_peace(sea_bass, hare) = True\n\n# Based on the game state and the rules and preferences, does the kudu eat the food of the cow?\nquestion = eat(kudu, food_of(cow))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panda bear does not proceed to the spot that is right after the spot of the koala, then the koala eats the food that belongs to the squid\nRule2: If the first letter of the name of the panda bear is the same as the first letter of the name of the cat, then the panda bear does not proceed to the spot right after the koala\nRule3: If the starfish does not eat the food of the octopus and the dog does not roll the dice for the octopus, then you can add \"the octopus prepares armor for the polar bear\" to your conclusions.\n\nThe current state of the game is as follows\nThe name of the cat is Peddi\nThe dog rolls the dice for the octopus\nThe name of the panda bear is Lily\nThe panda bear reduced her work hours recently\nThe starfish does not eat the food of the octopus.\n\nBased on the game state and the rules and preferences, does the koala eat the food of the squid?\nQuestion: Does the koala eat the food of the squid?",
        "idx": 80,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panda bear does not proceed to the spot that is right after the spot of the koala, then the koala eats the food that belongs to the squid\nrule1() = not proceed_to_spot(panda_bear, spot_after(koala)) => eat_food(koala, food_of(squid))\n# Rule2: Regarding the panda bear, if it has a name whose first letter is the same as the first letter of the cat's name, then we can conclude that it does not proceed to the spot right after the koala\nrule2() = first_letter_of(name(panda_bear)) == first_letter_of(name(cat)) => not proceed_to_spot(panda_bear, spot_after(koala))\n# Rule3: For the octopus, if the belief is that the starfish does not eat the food that belongs to the octopus and the dog does not roll the dice for the octopus, then you can add \"the octopus prepares armor for the polar bear\" to your conclusions.\nrule3() = not eat_food(starfish, food_of(octopus)) & not roll_dice(dog, octopus) => add_conclusion(\"the octopus prepares armor for the polar bear\")\n\n# The current state of the game is as follows\n# The cat is named Peddi\nname(cat, Peddi) = True\n# The dog rolls the dice for the octopus\nroll_dice(dog, octopus) = True\n# The panda bear is named Lily\nname(panda_bear, Lily) = True\n# The panda bear reduced her work hours recently\nreduce_work_hours(panda_bear) = True\n# The starfish does not eat the food of the octopus.\nnot eat_food(starfish, food_of(octopus)) = True\n\n# Based on the game state and the rules and preferences, does the koala eat the food of the squid?\nquestion = eat_food(koala, food_of(squid))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squid owns a luxury aircraft, then it needs support from the bat\nRule2: If the squid has more than fourteen friends, then it needs support from the bat\nRule3: If the first letter of the name of the bat is the same as the first letter of the name of the jellyfish, then the bat prepares armor for the starfish\nRule4: If the eel does not show all her cards to the bat, then the bat raises a peace flag for the moose\nRule5: If the bat has a card and the color of the card appears in the flag of Belgium, then the bat prepares armor for the starfish\nRule6: If the turtle gives a magnifying glass to the bat and the squid needs support from the bat, then the bat will not sing a victory song for the parrot\nRule7: If something raises a peace flag for the moose and prepares armor for the starfish, then it sings a song of victory for the parrot.\n\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe bat has a white card and struggles to find food\nThe name of the bat is Bella\nThe name of the jellyfish is Blossom\nThe squid has 3 bald friends and 6 non-bald friends, and owns a luxury aircraft\nThe eel does not show all her cards to the bat.\n\nBased on the game state and the rules and preferences, does the bat sing a victory song for the parrot?\nQuestion: Does the bat sing a victory song for the parrot?",
        "idx": 81,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squid owns a luxury aircraft, then the squid needs support from the bat\nrule1() = owns(squid, luxury_aircraft) => needs_support(squid, bat)\n# Rule2: If the squid has more than fourteen friends, then the squid needs support from the bat\nrule2() = friends(squid) > 14 => needs_support(squid, bat)\n# Rule3: Regarding the bat, if it has a name whose first letter is the same as the first letter of the jellyfish's name, then we can conclude that it prepares armor for the starfish\nrule3() = first_letter_of(name(bat)) == first_letter_of(name(jellyfish)) => prepares_armor(bat, starfish)\n# Rule4: If the eel does not show her cards (all of them) to the bat, then the bat raises a peace flag for the moose\nrule4() = not show_cards(eel, bat) => raise_flag_of_peace(bat, moose)\n# Rule5: If the bat has a card whose color appears in the flag of Belgium, then the bat prepares armor for the starfish\nrule5() = has(bat, card) and color(card) in flag_colors(Belgium) => prepares_armor(bat, starfish)\n# Rule6: If the turtle gives a magnifying glass to the bat and the squid needs the support of the bat, then the bat will not sing a victory song for the parrot\nrule6() = give(turtle, magnifying_glass, bat) & needs_support(squid, bat) => not sing_song_of_victory(bat, parrot)\n# Rule7: If you see that something raises a peace flag for the moose and prepares armor for the starfish, what can you certainly conclude? You can conclude that it also sings a song of victory for the parrot.\nrule7(something) = raise_flag_of_peace(something, moose) & prepares_armor(something, starfish) => sing_song_of_victory(something, parrot)\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The bat has a card that is white in color, and struggles to find food\nhas(bat, card) = True\ncolor(card, white) = True\nstruggles_to_find_food(bat) = True\n# The bat is named Bella\nname(bat, Bella) = True\n# The jellyfish is named Blossom\nname(jellyfish, Blossom) = True\n# The squid has 3 friends that are bald and six friends that are not, and purchased a luxury aircraft\nbald_friends(squid) = 3\nnon_bald_friends(squid) = 6\nowns(squid, luxury_aircraft) = True\n# The eel does not show all her cards to the bat.\nshow_cards(eel, bat) = False\n\n# Based on the game state and the rules and preferences, does the bat sing a victory song for the parrot?\nquestion = sing_song_of_victory(bat, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo has more than 10 friends, then it shows all her cards to the mosquito\nRule2: The kangaroo does not show her cards to the mosquito if the doctorfish removes one of her pieces\nRule3: If something shows all her cards to the mosquito and winks at the parrot, then it does not remove one of the pieces of the panther\nRule4: If the canary owes money to the kangaroo, then the kangaroo winks at the parrot.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe canary owes money to the kangaroo\nThe hippopotamus burns the warehouse of the goldfish\nThe kangaroo has 17 friends.\n\nBased on the game state and the rules and preferences, does the kangaroo remove from the board one of the pieces of the panther?\nQuestion: Does the kangaroo remove from the board one of the pieces of the panther?",
        "idx": 82,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kangaroo, if it has more than 10 friends, then we can conclude that it shows all her cards to the mosquito\nrule1() = friends(kangaroo) > 10 => show_all_cards(kangaroo, mosquito)\n# Rule2: The kangaroo does not show her cards (all of them) to the mosquito, in the case where the doctorfish removes one of the pieces of the kangaroo\nrule2() = remove_piece(doctorfish, kangaroo) => not show_all_cards(kangaroo, mosquito)\n# Rule3: If you see that something shows all her cards to the mosquito and winks at the parrot, what can you certainly conclude? You can conclude that it does not remove one of the pieces of the panther\nrule3(something) = show_all_cards(something, mosquito) & wink(something, parrot) => not remove_piece(something, panther)\n# Rule4: If the canary owes money to the kangaroo, then the kangaroo winks at the parrot.\nrule4() = owe(canary, money, kangaroo) => wink(kangaroo, parrot)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The canary owes money to the kangaroo\nowe(canary, money, kangaroo) = True\n# The hippopotamus burns the warehouse of the goldfish\nburn(hippopotamus, warehouse, goldfish) = True\n# The kangaroo has 17 friends.\nfriends(kangaroo) = 17\n\n# Based on the game state and the rules and preferences, does the kangaroo remove from the board one of the pieces of the panther?\nquestion = remove_piece(kangaroo, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the eel rolls the dice for the elephant and the meerkat does not sing a song of victory for the elephant, then you can add \"the elephant learns elementary resource management from the swordfish\" to your conclusions\nRule2: If at least one animal owes money to the lobster, then the eel rolls the dice for the elephant\nRule3: If at least one animal eats the food that belongs to the polar bear, then the meerkat sings a victory song for the elephant\nRule4: If the first letter of the name of the eel is the same as the first letter of the name of the panda bear, then the eel does not roll the dice for the elephant.\n\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe hippopotamus owes money to the lobster\nThe octopus eats the food of the polar bear\nThe name of the panda bear is Lucy\nThe canary does not eat the food of the meerkat.\n\nBased on the game state and the rules and preferences, does the elephant learn the basics of resource management from the swordfish?\nQuestion: Does the elephant learn elementary resource management from the swordfish?",
        "idx": 83,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the elephant, if the belief is that the eel rolls the dice for the elephant and the meerkat does not sing a song of victory for the elephant, then you can add \"the elephant learns elementary resource management from the swordfish\" to your conclusions\nrule1() = belief(eel_rolls_dice_for(elephant)) & not sing_song_of_victory(meerkat, elephant) => add_conclusion(\"the elephant learns elementary resource management from the swordfish\")\n# Rule2: If at least one animal owes money to the lobster, then the eel rolls the dice for the elephant\nrule2() = owes(something, money, lobster) => eel_rolls_dice_for(elephant)\n# Rule3: If at least one animal eats the food that belongs to the polar bear, then the meerkat sings a victory song for the elephant\nrule3() = eats_food(something, food_of(polar_bear)) => sing_song_of_victory(meerkat, elephant)\n# Rule4: Regarding the eel, if it has a name whose first letter is the same as the first letter of the panda bear's name, then we can conclude that it does not roll the dice for the elephant.\nrule4() = first_letter_of(name(eel)) == first_letter_of(name(panda_bear)) => not eel_rolls_dice_for(elephant)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The hippopotamus owes money to the lobster\nowes(hippopotamus, money, lobster) = True\n# The octopus eats the food of the polar bear\neats_food(octopus, food_of(polar_bear)) = True\n# The panda bear is named Lucy\nname(panda_bear, Lucy) = True\n# The canary does not eat the food of the meerkat.\nnot eats_food(canary, food_of(meerkat)) = True\n\n# Based on the game state and the rules and preferences, does the elephant learn the basics of resource management from the swordfish?\nquestion = \"the elephant learns elementary resource management from the swordfish\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The moose does not burn the warehouse of the ferret whenever at least one animal owes money to the amberjack\nRule2: If the moose has more than eight friends, then it attacks the green fields whose owner is the octopus\nRule3: If the moose has something to drink, then it attacks the green fields whose owner is the octopus\nRule4: If something attacks the green fields whose owner is the octopus, then it burns the warehouse of the ferret.\n\nRule1 is preferred over Rule4\n\nThe current state of the game is as follows\nThe moose has a tablet\nThe moose has 14 friends.\n\nBased on the game state and the rules and preferences, does the moose burn the warehouse of the ferret?\nQuestion: Does the moose burn the warehouse of the ferret?",
        "idx": 84,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The moose does not burn the warehouse of the ferret whenever at least one animal owes $$$ to the amberjack\nrule1() = owes(something, money, amberjack) => not burn_warehouse(moose, ferret)\n# Rule2: If the moose has more than eight friends, then the moose attacks the green fields whose owner is the octopus\nrule2() = friends(moose) > 8 => attack(moose, green_fields, octopus)\n# Rule3: Regarding the moose, if it has something to drink, then we can conclude that it attacks the green fields whose owner is the octopus\nrule3() = has(moose, drink) => attack(moose, green_fields, octopus)\n# Rule4: If something attacks the green fields whose owner is the octopus, then it burns the warehouse of the ferret, too.\nrule4() = attack(something, green_fields, octopus) => burn_warehouse(something, ferret)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n\n# The current state of the game is as follows\n# The moose has a tablet\nhas(moose, tablet) = True\n# The moose has fourteen friends.\nfriends(moose) = 14\n\n# Based on the game state and the rules and preferences, does the moose burn the warehouse of the ferret?\nquestion = burn_warehouse(moose, ferret)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the rabbit is the same as the first letter of the name of the penguin, then the rabbit attacks the green fields of the bat\nRule2: If the rabbit attacks the green fields whose owner is the bat and the kiwi eats the food of the bat, then the bat sings a victory song for the jellyfish\nRule3: If something burns the warehouse of the doctorfish and also eats the food that belongs to the tiger, then it will not sing a song of victory for the jellyfish\nRule4: If the bat has a musical instrument, then it burns the warehouse of the doctorfish\nRule5: If the rabbit is a fan of Chris Ronaldo, then it attacks the green fields whose owner is the bat\nRule6: If something knocks down the fortress of the buffalo, then it eats the food of the tiger, too\nRule7: If the bat has more than six friends, then it burns the warehouse that is in possession of the doctorfish.\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe bat has a green tea\nThe bat has eleven friends\nThe bat knocks down the fortress of the buffalo\nThe name of the penguin is Tarzan\nThe name of the rabbit is Max\nThe rabbit supports Chris Ronaldo\n\nBased on the game state and the rules and preferences, does the bat sing a victory song for the jellyfish?\nQuestion: Does the bat sing a victory song for the jellyfish?",
        "idx": 85,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the rabbit, if it has a name whose first letter is the same as the first letter of the penguin's name, then we can conclude that it attacks the green fields of the bat\nrule1() = first_letter_of(name(rabbit)) == first_letter_of(name(penguin)) => attack(rabbit, green_fields, bat)\n# Rule2: If the rabbit attacks the green fields whose owner is the bat and the kiwi eats the food of the bat, then the bat sings a victory song for the jellyfish\nrule2() = attack(rabbit, green_fields, bat) & eat_food(kiwi, food_of(bat)) => sing_victory_song(bat, jellyfish)\n# Rule3: Be careful when something burns the warehouse of the doctorfish and also eats the food that belongs to the tiger because in this case it will surely not sing a song of victory for the jellyfish (this may or may not be problematic)\nrule3(something) = burn_warehouse(something, warehouse_of(doctorfish)) & eat_food(something, food_of(tiger)) => not sing_victory_song(something, jellyfish)\n# Rule4: If the bat has a musical instrument, then the bat burns the warehouse of the doctorfish\nrule4() = has(bat, musical_instrument) => burn_warehouse(bat, warehouse_of(doctorfish))\n# Rule5: Regarding the rabbit, if it is a fan of Chris Ronaldo, then we can conclude that it attacks the green fields whose owner is the bat\nrule5() = supports(rabbit, Chris_Ronaldo) => attack(rabbit, green_fields, bat)\n# Rule6: If something knocks down the fortress of the buffalo, then it eats the food of the tiger, too\nrule6(something) = knock_down(something, fortress_of(buffalo)) => eat_food(something, food_of(tiger))\n# Rule7: Regarding the bat, if it has more than six friends, then we can conclude that it burns the warehouse that is in possession of the doctorfish.\nrule7() = friends(bat) > 6 => burn_warehouse(bat, warehouse_of(doctorfish))\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The bat has a green tea\nhas(bat, green_tea) = True\n# The bat has eleven friends\nfriends(bat) = 11\n# The bat knocks down the fortress of the buffalo\nknock_down(bat, fortress_of(buffalo)) = True\n# The penguin is named Tarzan\nname(penguin, Tarzan) = True\n# The rabbit is named Max, and supports Chris Ronaldo.\nname(rabbit, Max) = True\nsupports(rabbit, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the bat sing a victory song for the jellyfish?\nquestion = sing_victory_song(bat, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the leopard has fewer than 2 friends, then it does not respect the donkey\nRule2: If the first letter of the name of the leopard is the same as the first letter of the name of the catfish, then it does not owe money to the oscar\nRule3: If at least one animal raises a flag of peace for the parrot, then the leopard does not show all her cards to the puffin\nRule4: If something respects the donkey but does not owe money to the oscar, then it shows all her cards to the puffin\nRule5: If something owes money to the sea bass, then it respects the donkey\nRule6: If the leopard has a sharp object, then it does not respect the donkey.\n\nRule1 is preferred over Rule5\nRule4 is preferred over Rule3\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe name of the catfish is Luna\nThe leopard has one friend\nThe name of the leopard is Lucy\nThe leopard owes money to the sea bass.\n\nBased on the game state and the rules and preferences, does the leopard show all her cards to the puffin?\nQuestion: Does the leopard show all her cards to the puffin?",
        "idx": 86,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the leopard, if it has fewer than 2 friends, then we can conclude that it does not respect the donkey\nrule1() = friends(leopard) < 2 => not respect(leopard, donkey)\n# Rule2: Regarding the leopard, if it has a name whose first letter is the same as the first letter of the catfish's name, then we can conclude that it does not owe $$$ to the oscar\nrule2() = first_letter_of(name(leopard)) == first_letter_of(name(catfish)) => not owe(leopard, money, oscar)\n# Rule3: The leopard does not show her cards (all of them) to the puffin whenever at least one animal raises a flag of peace for the parrot\nrule3() = raise_flag_of_peace(something, parrot) => not show_cards(leopard, puffin)\n# Rule4: If you see that something respects the donkey but does not owe $$$ to the oscar, what can you certainly conclude? You can conclude that it shows her cards (all of them) to the puffin\nrule4() = respect(something, donkey) & not owe(something, money, oscar) => show_cards(something, puffin)\n# Rule5: If you are positive that you saw one of the animals owes $$$ to the sea bass, you can be certain that it will also respect the donkey\nrule5() = owe(something, money, sea_bass) => respect(something, donkey)\n# Rule6: Regarding the leopard, if it has a sharp object, then we can conclude that it does not respect the donkey.\nrule6() = has(leopard, sharp_object) => not respect(leopard, donkey)\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The catfish is named Luna\nname(catfish, Luna) = True\n# The leopard has one friend\nfriends(leopard) = 1\n# The leopard is named Lucy, and owes money to the sea bass.\nname(leopard, Lucy) = True\nowe(leopard, money, sea_bass) = True\n\n# Based on the game state and the rules and preferences, does the leopard show all her cards to the puffin?\nquestion = show_cards(leopard, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job to the lobster, then it respects the zander, too\nRule2: If something sings a victory song for the jellyfish but does not respect the kudu, then it raises a flag of peace for the blobfish\nRule3: If the first letter of the name of the phoenix is the same as the first letter of the name of the panda bear, then the phoenix does not know the defense plan of the zander\nRule4: If the leopard rolls the dice for the zander, then the zander does not sing a song of victory for the jellyfish\nRule5: If the zander has a device to connect to the internet, then it sings a victory song for the jellyfish\nRule6: If something needs support from the bat, then the zander does not respect the kudu\nRule7: If the mosquito proceeds to the spot that is right after the spot of the leopard, then the leopard does not respect the zander.\n\nRule1 is preferred over Rule7\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe carp needs support from the bat\nThe leopard rolls the dice for the zander\nThe mosquito proceeds to the spot right after the leopard\nThe name of the panda bear is Lola\nThe name of the phoenix is Lily\nThe zander has a cell phone.\n\nBased on the game state and the rules and preferences, does the zander raise a peace flag for the blobfish?\nQuestion: Does the zander raise a peace flag for the blobfish?",
        "idx": 87,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something offers a job to the lobster, then it respects the zander, too\nrule1(something) = offer_job_position(something, lobster) => respect(something, zander)\n# Rule2: Be careful when something sings a victory song for the jellyfish but does not respect the kudu because in this case it will, surely, raise a flag of peace for the blobfish (this may or may not be problematic)\nrule2(something) = sing_victory_song(something, jellyfish) & not respect(something, kudu) => raise_flag_of_peace(something, blobfish)\n# Rule3: Regarding the phoenix, if it has a name whose first letter is the same as the first letter of the panda bear's name, then we can conclude that it does not know the defense plan of the zander\nrule3() = first_letter_of(name(phoenix)) == first_letter_of(name(panda_bear)) => not know(phoenix, defense_plan, zander)\n# Rule4: The zander does not sing a song of victory for the jellyfish, in the case where the leopard rolls the dice for the zander\nrule4() = roll_dice(leopard, zander) => not sing_victory_song(zander, jellyfish)\n# Rule5: Regarding the zander, if it has a device to connect to the internet, then we can conclude that it sings a victory song for the jellyfish\nrule5() = has(zander, device_to_connect_to_internet) => sing_victory_song(zander, jellyfish)\n# Rule6: If at least one animal needs support from the bat, then the zander does not respect the kudu\nrule6() = needs_support(something, bat) => not respect(zander, kudu)\n# Rule7: If the mosquito proceeds to the spot that is right after the spot of the leopard, then the leopard is not going to respect the zander.\nrule7() = proceed(mosquito, spot_after(leopard)) => not respect(leopard, zander)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The carp needs support from the bat\nneeds_support(carp, bat) = True\n# The leopard rolls the dice for the zander\nroll_dice(leopard, zander) = True\n# The mosquito proceeds to the spot right after the leopard\nproceed(mosquito, spot_after(leopard)) = True\n# The panda bear is named Lola\nname(panda_bear, Lola) = True\n# The phoenix is named Lily\nname(phoenix, Lily) = True\n# The zander has a cell phone.\nhas(zander, cell_phone) = True\n\n# Based on the game state and the rules and preferences, does the zander raise a peace flag for the blobfish?\nquestion = raise_flag_of_peace(zander, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the halibut prepares armor for the cow, then the cow does not raise a flag of peace for the raven\nRule2: If the cow has more than two friends, then the cow raises a peace flag for the raven\nRule3: If something raises a flag of peace for the raven and does not attack the green fields of the crocodile, then it does not knock down the fortress of the hare\nRule4: If the carp removes one of the pieces of the cow and the swordfish knocks down the fortress of the cow, then the cow does not attack the green fields of the crocodile\nRule5: The cow attacks the green fields whose owner is the crocodile whenever at least one animal burns the warehouse of the oscar.\n\nRule1 is preferred over Rule2\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe carp removes one of the pieces of the cow\nThe cow has 4 friends\nThe swordfish knocks down the fortress of the cow.\n\nBased on the game state and the rules and preferences, does the cow knock down the fortress of the hare?\nQuestion: Does the cow knock down the fortress of the hare?",
        "idx": 88,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the halibut prepares armor for the cow, then the cow is not going to raise a flag of peace for the raven\nrule1() = prepare_armor(halibut, cow) => not raise_flag_of_peace(cow, raven)\n# Rule2: If the cow has more than two friends, then the cow raises a peace flag for the raven\nrule2() = friends(cow) > 2 => raise_flag_of_peace(cow, raven)\n# Rule3: Be careful when something does not attack the green fields of the crocodile but raises a flag of peace for the raven because in this case it certainly does not knock down the fortress of the hare (this may or may not be problematic)\nrule3(something) = not attack(something, green_fields, crocodile) & raise_flag_of_peace(something, raven) => not knock_down_fortress(cow, hare)\n# Rule4: If the carp removes from the board one of the pieces of the cow and the swordfish knocks down the fortress that belongs to the cow, then the cow will not attack the green fields of the crocodile\nrule4() = remove(carp, piece, cow) & knock_down_fortress(swordfish, cow) => not attack(cow, green_fields, crocodile)\n# Rule5: The cow attacks the green fields whose owner is the crocodile whenever at least one animal burns the warehouse of the oscar.\nrule5() = burn_warehouse(something, oscar) => attack(cow, green_fields, crocodile)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The carp removes from the board one of the pieces of the cow\nremove(carp, piece, cow) = True\n# The cow has 4 friends\nfriends(cow) = 4\n# The swordfish knocks down the fortress of the cow.\nknock_down_fortress(swordfish, cow) = True\n\n# Based on the game state and the rules and preferences, does the cow knock down the fortress of the hare?\nquestion = knock_down_fortress(cow, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kiwi prepares armor for the lion, then the lion becomes an actual enemy of the kudu\nRule2: If the elephant has a sharp object, then it needs the support of the kudu\nRule3: If the elephant needs support from the kudu and the whale knocks down the fortress of the kudu, then the kudu is not going to proceed to the spot that is right after the spot of the penguin\nRule4: If the whale has a card with a primary color, then it knocks down the fortress that belongs to the kudu\nRule5: If the lion gives a magnifying glass to the kudu, then the kudu proceeds to the spot that is right after the spot of the penguin\nRule6: If the jellyfish does not sing a song of victory for the elephant, then the elephant does not need the support of the kudu\nRule7: If the elephant has a device to connect to the internet, then it needs support from the kudu.\n\nRule2 is preferred over Rule6\nRule5 is preferred over Rule3\nRule7 is preferred over Rule6\n\nThe current state of the game is as follows\nThe elephant has a computer and a knife\nThe kiwi shows all her cards to the lion\nThe lion has a bench and a green card\nThe whale has a yellow card.\n\nBased on the game state and the rules and preferences, does the kudu proceed to the spot right after the penguin?\nQuestion: Does the kudu proceed to the spot right after the penguin?",
        "idx": 89,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kiwi prepares armor for the lion, then the lion becomes an actual enemy of the kudu\nrule1() = prepare_armor(kiwi, lion) => become_enemy(lion, kudu)\n# Rule2: If the elephant has a sharp object, then the elephant needs the support of the kudu\nrule2() = has(elephant, sharp_object) => needs_support(elephant, kudu)\n# Rule3: For the kudu, if the belief is that the elephant needs support from the kudu and the whale knocks down the fortress of the kudu, then you can add that \"the kudu is not going to proceed to the spot that is right after the spot of the penguin\" to your conclusions\nrule3() = needs_support(elephant, kudu) & knocks_down_fortress(whale, kudu) => add_conclusion(kudu, \"the kudu is not going to proceed to the spot that is right after the spot of the penguin\")\n# Rule4: If the whale has a card with a primary color, then the whale knocks down the fortress that belongs to the kudu\nrule4() = has(whale, card) and color(card) in primary_colors => knocks_down_fortress(whale, kudu)\n# Rule5: If the lion gives a magnifying glass to the kudu, then the kudu proceeds to the spot that is right after the spot of the penguin\nrule5() = give(lion, magnifying_glass, kudu) => proceed_to_spot(kudu, right_after_spot(penguin))\n# Rule6: If the jellyfish does not sing a song of victory for the elephant, then the elephant does not need the support of the kudu\nrule6() = not sing_song_of_victory(jellyfish, elephant) => not needs_support(elephant, kudu)\n# Rule7: If the elephant has a device to connect to the internet, then the elephant needs support from the kudu.\nrule7() = has(elephant, device_to_connect_to_internet) => needs_support(elephant, kudu)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n\n# The current state of the game is as follows\n# The elephant has a computer, and has a knife\nhas(elephant, computer) = True\nhas(elephant, knife) = True\n# The kiwi shows all her cards to the lion\nshow_all_cards(kiwi, lion) = True\n# The lion has a bench, and has a card that is green in color\nhas(lion, bench) = True\nhas(lion, card) = True\ncolor(card, green) = True\n# The whale has a card that is yellow in color.\nhas(whale, card) = True\ncolor(card, yellow) = True\n\n# Based on the game state and the rules and preferences, does the kudu proceed to the spot right after the penguin?\nquestion = proceed_to_spot(kudu, right_after_spot(penguin))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something attacks the green fields whose owner is the cheetah but does not sing a victory song for the eel, then it will not offer a job to the moose.\nRule2: If the rabbit has a card whose color starts with the letter \"r\", then it shows all her cards to the moose.\nRule3: If the kudu does not offer a job to the moose but the rabbit shows all her cards to the moose, then you can add \"the moose needs support from the goldfish\" to your conclusions.\nRule4: If the rabbit has fewer than 12 friends, then it does not show all her cards to the moose.\nRule5: If the rabbit killed the mayor, then it shows all her cards to the moose.\n\nRule2 is preferred over Rule4\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe kudu attacks the green fields whose owner is the cheetah, has some spinach, and does not sing a victory song for the eel\nThe kudu is holding her keys\nThe name of the panda bear is Pablo\nThe rabbit assassinated the mayor, and is named Charlie\nThe rabbit has a card that is green in color, and has six friends.\n\nBased on the game state and the rules and preferences, does the moose need support from the goldfish?\nQuestion: Does the moose need support from the goldfish?",
        "idx": 90,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something attacks the green fields whose owner is the cheetah but does not sing a victory song for the eel because in this case it will, surely, not offer a job to the moose (this may or may not be problematic)\nrule1() = attacks(something, green_fields, owner(cheetah)) & not sing_victory_song(something, eel) => not offer_job_position(something, moose)\n# Rule2: Regarding the rabbit, if it has a card whose color starts with the letter \"r\", then we can conclude that it shows her cards (all of them) to the moose\nrule2() = has(rabbit, card) & starts_with(color(card), \"r\") => show_cards(rabbit, all, moose)\n# Rule3: For the moose, if the belief is that the kudu does not offer a job to the moose but the rabbit shows her cards (all of them) to the moose, then you can add \"the moose needs support from the goldfish\" to your conclusions\nrule3() = not offer_job_position(kudu, moose) & show_cards(rabbit, all, moose) => add_conclusion(moose, \"the moose needs support from the goldfish\")\n# Rule4: If the rabbit has fewer than 12 friends, then the rabbit does not show her cards (all of them) to the moose\nrule4() = friends(rabbit) < 12 => not show_cards(rabbit, all, moose)\n# Rule5: If the rabbit killed the mayor, then the rabbit shows all her cards to the moose.\nrule5() = killed(rabbit, mayor) => show_cards(rabbit, all, moose)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The kudu attacks the green fields whose owner is the cheetah, has some spinach, and does not sing a victory song for the eel\nattacks(kudu, green_fields, owner(cheetah)) = True\nhas(kudu, spinach) = True\nnot sing_victory_song(kudu, eel) = True\n# The kudu is holding her keys\nholds(kudu, keys) = True\n# The panda bear is named Pablo\nname(panda_bear, Pablo) = True\n# The rabbit assassinated the mayor, and is named Charlie\nkilled(rabbit, mayor) = True\nname(rabbit, Charlie) = True\n# The rabbit has a card that is green in color, and has six friends.\nhas(rabbit, card) = True\ncolor(card, green) = True\nfriends(rabbit) = 6\n\n# Based on the game state and the rules and preferences, does the moose need support from the goldfish?\nquestion = has_conclusion(moose, \"the moose needs support from the goldfish\")"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the starfish has a high salary, then it does not need support from the grasshopper\nRule2: If the panda bear and the mosquito attack the green fields of the starfish, then the starfish needs support from the grasshopper\nRule3: If the rabbit knows the defense plan of the starfish, then the starfish is not going to offer a job position to the caterpillar\nRule4: If the starfish has a device to connect to the internet, then it does not need support from the grasshopper\nRule5: If something shows all her cards to the hippopotamus, then it knows the defensive plans of the starfish.\n\nRule1 is preferred over Rule2\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe mosquito attacks the green fields whose owner is the starfish\nThe panda bear attacks the green fields whose owner is the starfish\nThe rabbit shows all her cards to the hippopotamus\nThe starfish has a flute\nThe rabbit does not owe money to the ferret.\n\nBased on the game state and the rules and preferences, does the starfish offer a job to the caterpillar?\nQuestion: Does the starfish offer a job to the caterpillar?",
        "idx": 91,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the starfish has a high salary, then the starfish does not need support from the grasshopper\nrule1() = has(starfish, high_salary) => not need_support(starfish, grasshopper)\n# Rule2: For the starfish, if the belief is that the panda bear attacks the green fields of the starfish and the mosquito attacks the green fields of the starfish, then you can add \"the starfish needs support from the grasshopper\" to your conclusions\nrule2() = belief(panda_bear, attacks_green_fields(starfish)) & belief(mosquito, attacks_green_fields(starfish)) => add_conclusion(\"the starfish needs support from the grasshopper\")\n# Rule3: If the rabbit knows the defense plan of the starfish, then the starfish is not going to offer a job position to the caterpillar\nrule3() = knows(rabbit, defense_plan, starfish) => not offer_job_position(starfish, caterpillar)\n# Rule4: If the starfish has a device to connect to the internet, then the starfish does not need support from the grasshopper\nrule4() = has(starfish, device_to_connect_to_internet) => not need_support(starfish, grasshopper)\n# Rule5: If you are positive that you saw one of the animals shows all her cards to the hippopotamus, you can be certain that it will also know the defensive plans of the starfish.\nrule5(something) = show_all_cards(something, hippopotamus) => knows(something, defensive_plans, starfish)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The mosquito attacks the green fields whose owner is the starfish\nattacks_green_fields(mosquito, starfish) = True\n# The panda bear attacks the green fields whose owner is the starfish\nattacks_green_fields(panda_bear, starfish) = True\n# The rabbit shows all her cards to the hippopotamus\nshow_all_cards(rabbit, hippopotamus) = True\n# The starfish has a flute\nhas(starfish, flute) = True\n# The rabbit does not owe money to the ferret.\nowe(rabbit, money, ferret) = False\n\n# Based on the game state and the rules and preferences, does the starfish offer a job to the caterpillar?\nquestion = offer_job_position(starfish, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The carp owes money to the panda bear if the viperfish does not eat the food of the carp\nRule2: If something raises a peace flag for the spider, then it does not eat the food that belongs to the carp.\n\nThe current state of the game is as follows\nThe viperfish does not raise a peace flag for the spider.\n\nBased on the game state and the rules and preferences, does the carp owe money to the panda bear?\nQuestion: Does the carp owe money to the panda bear?",
        "idx": 92,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The carp unquestionably owes money to the panda bear, in the case where the viperfish does not eat the food of the carp\nrule1() = not eat_food(viperfish, food_of(carp)) => owe(carp, money, panda_bear)\n# Rule2: If something raises a peace flag for the spider, then it does not eat the food that belongs to the carp.\nrule2(something) = raise_flag_of_peace(something, spider) => not eat_food(something, food_of(carp))\n\n# The current state of the game is as follows\n# The viperfish does not raise a peace flag for the spider.\nraise_flag_of_peace(viperfish, spider) = False\n\n# Based on the game state and the rules and preferences, does the carp owe money to the panda bear?\nquestion = owe(carp, money, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something gives a magnifier to the sheep, then it needs the support of the meerkat\nRule2: If something needs support from the meerkat, then it burns the warehouse of the jellyfish.\n\nThe current state of the game is as follows\nThe zander gives a magnifier to the sheep.\n\nBased on the game state and the rules and preferences, does the zander burn the warehouse of the jellyfish?\nQuestion: Does the zander burn the warehouse of the jellyfish?",
        "idx": 93,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals gives a magnifier to the sheep, you can be certain that it will also need the support of the meerkat\nrule1(something) = give(something, magnifier, sheep) => need_support(something, meerkat)\n# Rule2: If something needs support from the meerkat, then it burns the warehouse of the jellyfish, too.\nrule2(something) = need_support(something, meerkat) => burn_warehouse(something, jellyfish)\n\n# The current state of the game is as follows\n# The zander gives a magnifier to the sheep.\ngive(zander, magnifier, sheep) = True\n\n# Based on the game state and the rules and preferences, does the zander burn the warehouse of the jellyfish?\nquestion = burn_warehouse(zander, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose created a time machine, then it winks at the ferret\nRule2: If the moose has more than six friends, then it winks at the ferret\nRule3: If the cockroach respects the zander, then the zander knows the defensive plans of the goldfish\nRule4: If something winks at the ferret, then the zander does not know the defense plan of the goldfish.\n\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe moose has 3 friends\nThe moose invented a time machine.\n\nBased on the game state and the rules and preferences, does the zander know the defensive plans of the goldfish?\nQuestion: Does the zander know the defensive plans of the goldfish?",
        "idx": 94,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the moose created a time machine, then the moose winks at the ferret\nrule1() = created(moose, time_machine) => wink(moose, ferret)\n# Rule2: Regarding the moose, if it has more than six friends, then we can conclude that it winks at the ferret\nrule2() = friends(moose) > 6 => wink(moose, ferret)\n# Rule3: If the cockroach respects the zander, then the zander knows the defensive plans of the goldfish\nrule3() = respects(cockroach, zander) => knows(zander, defensive_plans, goldfish)\n# Rule4: If at least one animal winks at the ferret, then the zander does not know the defense plan of the goldfish.\nrule4() = wink(something, ferret) => not knows(zander, defensive_plans, goldfish)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The moose has 3 friends\nfriends(moose) = 3\n# The moose invented a time machine.\ncreated(moose, time_machine) = True\n\n# Based on the game state and the rules and preferences, does the zander know the defensive plans of the goldfish?\nquestion = knows(zander, defensive_plans, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something raises a flag of peace for the salmon, then it will not respect the parrot\nRule2: If the hippopotamus does not respect the parrot, then the parrot respects the meerkat\nRule3: If the hippopotamus has more than six friends, then it respects the parrot.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe hippopotamus has 11 friends.\n\nBased on the game state and the rules and preferences, does the parrot respect the meerkat?\nQuestion: Does the parrot respect the meerkat?",
        "idx": 95,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals raises a flag of peace for the salmon, you can be certain that it will not respect the parrot\nrule1() = raise_flag_of_peace(something, salmon) => not respect(something, parrot)\n# Rule2: The parrot unquestionably respects the meerkat, in the case where the hippopotamus does not respect the parrot\nrule2() = not respect(hippopotamus, parrot) => respect(parrot, meerkat)\n# Rule3: Regarding the hippopotamus, if it has more than six friends, then we can conclude that it respects the parrot.\nrule3() = friends(hippopotamus) > 6 => respect(hippopotamus, parrot)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The hippopotamus has 11 friends.\nfriends(hippopotamus) = 11\n\n# Based on the game state and the rules and preferences, does the parrot respect the meerkat?\nquestion = respect(parrot, meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something gives a magnifier to the eel and also becomes an enemy of the penguin, then it will surely owe money to the koala.\nRule2: If something offers a job position to the squid, then the salmon does not become an enemy of the penguin.\nRule3: If the cockroach proceeds to the spot that is right after the spot of the salmon and the turtle becomes an enemy of the salmon, then the salmon gives a magnifier to the eel.\nRule4: If the salmon created a time machine, then the salmon becomes an enemy of the penguin.\n\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cockroach proceeds to the spot right after the salmon\nThe salmon invented a time machine\nThe turtle becomes an enemy of the salmon.\n\nBased on the game state and the rules and preferences, does the salmon owe money to the koala?\nQuestion: Does the salmon owe money to the koala?",
        "idx": 96,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something gives a magnifier to the eel and also becomes an actual enemy of the penguin because in this case it will surely owe money to the koala (this may or may not be problematic)\nrule1(something) = give(something, magnifier, eel) & become_enemy(something, penguin) => owe(something, money, koala)\n# Rule2: If at least one animal offers a job position to the squid, then the salmon does not become an enemy of the penguin\nrule2() = offer_job_position(something, squid) => not become_enemy(salmon, penguin)\n# Rule3: If the cockroach proceeds to the spot that is right after the spot of the salmon and the turtle becomes an enemy of the salmon, then the salmon gives a magnifier to the eel\nrule3() = proceed(cockroach, spot_after(salmon)) & become_enemy(turtle, salmon) => give(salmon, magnifier, eel)\n# Rule4: If the salmon created a time machine, then the salmon becomes an enemy of the penguin.\nrule4() = created(salmon, time_machine) => become_enemy(salmon, penguin)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cockroach proceeds to the spot right after the salmon\nproceed(cockroach, spot_after(salmon)) = True\n# The salmon invented a time machine\ncreated(salmon, time_machine) = True\n# The turtle becomes an enemy of the salmon.\nbecome_enemy(turtle, salmon) = True\n\n# Based on the game state and the rules and preferences, does the salmon owe money to the koala?\nquestion = owe(salmon, money, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the elephant knocks down the fortress that belongs to the cat and the octopus knows the defense plan of the cat, then you can add that \"the cat is not going to wink at the baboon\" to your conclusions\nRule2: If you are positive that you saw one of the animals needs support from the donkey, you can be certain that it will also knock down the fortress of the cat\nRule3: If the octopus has a sharp object, then the octopus knows the defensive plans of the cat.\n\nThe current state of the game is as follows\nThe elephant needs support from the donkey\nThe octopus has a cutter.\n\nBased on the game state and the rules and preferences, does the cat wink at the baboon?\nQuestion: Does the cat wink at the baboon?",
        "idx": 97,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the cat, if the belief is that the elephant knocks down the fortress that belongs to the cat and the octopus knows the defense plan of the cat, then you can add that \"the cat is not going to wink at the baboon\" to your conclusions\nrule1() = belief(elephant, knocks_down_fortress(cat)) & knows(octopus, defense_plan, cat) => add_conclusion(\"the cat is not going to wink at the baboon\")\n# Rule2: If you are positive that you saw one of the animals needs support from the donkey, you can be certain that it will also knock down the fortress of the cat\nrule2(something) = needs_support(something, donkey) => knocks_down_fortress(something, cat)\n# Rule3: If the octopus has a sharp object, then the octopus knows the defensive plans of the cat.\nrule3() = has(octopus, sharp_object) => knows(octopus, defense_plan, cat)\n\n# The current state of the game is as follows\n# The elephant needs support from the donkey\nneeds_support(elephant, donkey) = True\n# The octopus has a cutter.\nhas(octopus, cutter) = True\n\n# Based on the game state and the rules and preferences, does the cat wink at the baboon?\nquestion = \"the cat is not going to wink at the baboon\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish has a leafy green vegetable, then it rolls the dice for the tiger\nRule2: If the catfish has a device to connect to the internet, then it does not roll the dice for the tiger\nRule3: If the first letter of the name of the meerkat is the same as the first letter of the name of the buffalo, then the meerkat learns elementary resource management from the tiger\nRule4: If the catfish rolls the dice for the tiger and the meerkat learns the basics of resource management from the tiger, then you can add \"the tiger attacks the green fields whose owner is the raven\" to your conclusions\nRule5: If at least one animal raises a peace flag for the penguin, then the meerkat does not learn the basics of resource management from the tiger\nRule6: If the catfish has more than fifteen wise friends, then it does not roll the dice for the tiger.\n\nRule2 is preferred over Rule1\nRule5 is preferred over Rule3\nRule6 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the buffalo is Blossom\nThe catfish has a bench\nThe catfish has 5 wise friends and 2 non-wise friends\nThe name of the meerkat is Buddy\n\nBased on the game state and the rules and preferences, does the tiger attack the green fields whose owner is the raven?\nQuestion: Does the tiger attack the green fields whose owner is the raven?",
        "idx": 98,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the catfish, if it has a leafy green vegetable, then we can conclude that it rolls the dice for the tiger\nrule1() = has(catfish, leafy_green_vegetable) => roll_dice(catfish, tiger)\n# Rule2: If the catfish has a device to connect to the internet, then the catfish does not roll the dice for the tiger\nrule2() = has(catfish, internet_device) => not roll_dice(catfish, tiger)\n# Rule3: If the meerkat has a name whose first letter is the same as the first letter of the buffalo's name, then the meerkat learns elementary resource management from the tiger\nrule3() = first_letter_of(name(meerkat)) == first_letter_of(name(buffalo)) => learn(meerkat, elementary_resource_management, tiger)\n# Rule4: For the tiger, if the belief is that the catfish rolls the dice for the tiger and the meerkat learns the basics of resource management from the tiger, then you can add \"the tiger attacks the green fields whose owner is the raven\" to your conclusions\nrule4() = roll_dice(catfish, tiger) & learn(meerkat, basics_of_resource_management, tiger) => add_conclusion(\"the tiger attacks the green fields whose owner is the raven\")\n# Rule5: The meerkat does not learn the basics of resource management from the tiger whenever at least one animal raises a peace flag for the penguin\nrule5() = raise_flag_of_peace(something, penguin) => not learn(meerkat, basics_of_resource_management, tiger)\n# Rule6: Regarding the catfish, if it has more than fifteen friends, then we can conclude that it does not roll the dice for the tiger.\nrule6() = friends(catfish) > 15 => not roll_dice(catfish, tiger)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n\n# The current state of the game is as follows\n# The buffalo is named Blossom\nname(buffalo, Blossom) = True\n# The catfish has a bench\nhas(catfish, bench) = True\n# The catfish has five friends that are wise and 2 friends that are not\nwise_friends(catfish) = 5\nnon_wise_friends(catfish) = 2\n# The meerkat is named Buddy\nname(meerkat, Buddy) = True\n\n# Based on the game state and the rules and preferences, does the tiger attack the green fields whose owner is the raven?\nquestion = \"the tiger attacks the green fields whose owner is the raven\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eel winks at the carp and the aardvark raises a flag of peace for the carp, then you can add \"the carp eats the food of the tiger\" to your conclusions\nRule2: The tiger learns the basics of resource management from the squid, in the case where the carp eats the food that belongs to the tiger.\n\nThe current state of the game is as follows\nThe aardvark raises a peace flag for the carp\nThe eel winks at the carp.\n\nBased on the game state and the rules and preferences, does the tiger learn the basics of resource management from the squid?\nQuestion: Does the tiger learn the basics of resource management from the squid?",
        "idx": 99,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the carp, if the belief is that the eel winks at the carp and the aardvark raises a flag of peace for the carp, then you can add \"the carp eats the food of the tiger\" to your conclusions\nrule1() = wink(eel, carp) & raise_flag_of_peace(aardvark, carp) => add_conclusion(\"the carp eats the food of the tiger\")\n# Rule2: The tiger unquestionably learns the basics of resource management from the squid, in the case where the carp eats the food that belongs to the tiger.\nrule2() = eats_food(carp, food_of(tiger)) => learn(tiger, basics_of_resource_management, squid)\n\n# The current state of the game is as follows\n# The aardvark raises a peace flag for the carp\nraise_flag_of_peace(aardvark, carp) = True\n# The eel winks at the carp.\nwink(eel, carp) = True\n\n# Based on the game state and the rules and preferences, does the tiger learn the basics of resource management from the squid?\nquestion = learn(tiger, basics_of_resource_management, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cheetah has a device to connect to the internet, then it does not remove one of the pieces of the bat\nRule2: If the first letter of the name of the cheetah is the same as the first letter of the name of the goldfish, then the cheetah does not remove one of the pieces of the bat\nRule3: If something does not remove one of the pieces of the bat, then it will not attack the green fields whose owner is the tiger.\n\nThe current state of the game is as follows\nThe cheetah has a computer\nThe name of the cheetah is Luna\nThe name of the goldfish is Buddy\n\nBased on the game state and the rules and preferences, does the cheetah attack the green fields whose owner is the tiger?\nQuestion: Does the cheetah attack the green fields whose owner is the tiger?",
        "idx": 100,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cheetah has a device to connect to the internet, then the cheetah does not remove one of the pieces of the bat\nrule1() = has(cheetah, device_to_connect_to_internet) => not remove(cheetah, piece_of_bat)\n# Rule2: If the cheetah has a name whose first letter is the same as the first letter of the goldfish's name, then the cheetah does not remove one of the pieces of the bat\nrule2() = first_letter_of(name(cheetah)) == first_letter_of(name(goldfish)) => not remove(cheetah, piece_of_bat)\n# Rule3: If you are positive that one of the animals does not remove one of the pieces of the bat, you can be certain that it will not attack the green fields whose owner is the tiger.\nrule3(something) = not remove(something, piece_of_bat) => not attack(green_fields, owner(tiger))\n\n# The current state of the game is as follows\n# The cheetah has a computer, and is named Luna\nhas(cheetah, computer) = True\nname(cheetah, Luna) = True\n# The goldfish is named Buddy.\nname(goldfish, Buddy) = True\n\n# Based on the game state and the rules and preferences, does the cheetah attack the green fields whose owner is the tiger?\nquestion = attack(green_fields, owner(tiger))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something gives a magnifying glass to the eel, then it will also give a magnifier to the canary\nRule2: If something gives a magnifying glass to the snail but does not knock down the fortress of the sheep, then it will give a magnifier to the eel.\n\nThe current state of the game is as follows\nThe buffalo gives a magnifying glass to the snail\nThe buffalo knocks down the fortress of the sheep.\n\nBased on the game state and the rules and preferences, does the buffalo give a magnifier to the canary?\nQuestion: Does the buffalo give a magnifier to the canary?",
        "idx": 101,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals gives a magnifying glass to the eel, you can be certain that it will also give a magnifier to the canary\nrule1(something) = give(something, magnifying_glass, eel) => give(something, magnifier, canary)\n# Rule2: Be careful when something gives a magnifying glass to the snail but does not knock down the fortress of the sheep because in this case it will, surely, give a magnifier to the eel (this may or may not be problematic).\nrule2() = give(something, magnifying_glass, snail) & not knock_down(fortress, sheep) => give(something, magnifier, eel)\n\n# The current state of the game is as follows\n# The buffalo gives a magnifier to the snail\ngive(buffalo, magnifying_glass, snail) = True\n# The buffalo knocks down the fortress of the sheep.\nknock_down(fortress, sheep) = True\n\n# Based on the game state and the rules and preferences, does the buffalo give a magnifier to the canary?\nquestion = give(buffalo, magnifier, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something learns the basics of resource management from the cow, then the dog does not prepare armor for the swordfish\nRule2: If something does not prepare armor for the swordfish, then it will not steal five points from the carp\nRule3: If something burns the warehouse of the tilapia, then the gecko respects the dog\nRule4: If the gecko respects the dog, then the dog steals five points from the carp.\n\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe gecko has a white card\nThe gecko has a knife\nThe jellyfish burns the warehouse of the tilapia\nThe sheep learns the basics of resource management from the cow.\n\nBased on the game state and the rules and preferences, does the dog steal five points from the carp?\nQuestion: Does the dog steal five points from the carp?",
        "idx": 102,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal learns the basics of resource management from the cow, then the dog does not prepare armor for the swordfish\nrule1(something) = learns(something, basics_of_resource_management, cow) => not prepare_armor(dog, swordfish)\n# Rule2: If you are positive that one of the animals does not prepare armor for the swordfish, you can be certain that it will not steal five of the points of the carp\nrule2(something) = not prepare_armor(something, swordfish) => not steal_points(something, 5, carp)\n# Rule3: If at least one animal burns the warehouse that is in possession of the tilapia, then the gecko respects the dog\nrule3(something) = burns(something, warehouse, tilapia) => respect(gecko, dog)\n# Rule4: The dog unquestionably steals five points from the carp, in the case where the gecko respects the dog.\nrule4() = respect(gecko, dog) => steal_points(dog, 5, carp)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The gecko has a card that is white in color\nhas(gecko, card) and color(card, white) = True\n# The gecko has a knife\nhas(gecko, knife) = True\n# The jellyfish burns the warehouse of the tilapia\nburns(jellyfish, warehouse, tilapia) = True\n# The sheep learns the basics of resource management from the cow.\nlearns(sheep, basics_of_resource_management, cow) = True\n\n# Based on the game state and the rules and preferences, does the dog steal five points from the carp?\nquestion = steal_points(dog, 5, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kudu has a card whose color appears in the flag of Belgium, then it eats the food of the dog\nRule2: If the kudu eats the food of the dog, then the dog does not hold an equal number of points as the rabbit.\n\nThe current state of the game is as follows\nThe kudu has a yellow card\nThe kudu knows the defensive plans of the meerkat but does not proceed to the spot right after the ferret.\n\nBased on the game state and the rules and preferences, does the dog hold the same number of points as the rabbit?\nQuestion: Does the dog hold the same number of points as the rabbit?",
        "idx": 103,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kudu, if it has a card whose color appears in the flag of Belgium, then we can conclude that it eats the food of the dog\nrule1() = has(kudu, card) and color(card) in colors_of_Belgium_flag => eats(kudu, food_of(dog))\n# Rule2: If the kudu eats the food of the dog, then the dog is not going to hold an equal number of points as the rabbit.\nrule2() = eats(kudu, food_of(dog)) => not equal_points(dog, rabbit)\n\n# The current state of the game is as follows\n# The kudu has a card that is yellow in color\nhas(kudu, card) = True\ncolor(card, yellow) = True\n# The kudu knows the defensive plans of the meerkat but does not proceed to the spot right after the ferret.\nknows(kudu, defensive_plans, meerkat) = True\nnot proceed(kudu, spot_right_after(ferret)) = True\n\n# Based on the game state and the rules and preferences, does the dog hold the same number of points as the rabbit?\nquestion = equal_points(dog, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the kangaroo, then it steals five points from the oscar\nRule2: If something does not owe money to the hippopotamus, then it does not steal five points from the oscar\nRule3: If the buffalo has a card and the color of the card is one of the rainbow colors, then it rolls the dice for the kangaroo.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe buffalo has a card that is black in color.\n\nBased on the game state and the rules and preferences, does the buffalo steal five points from the oscar?\nQuestion: Does the buffalo steal five points from the oscar?",
        "idx": 104,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something rolls the dice for the kangaroo, then it steals five points from the oscar, too\nrule1(something) = rolls_dice(something, kangaroo) => steals_points(something, 5, oscar)\n# Rule2: If something does not owe $$$ to the hippopotamus, then it does not steal five of the points of the oscar\nrule2(something) = not owe(something, money, hippopotamus) => not steals_points(something, 5, oscar)\n# Rule3: Regarding the buffalo, if it has a card whose color is one of the rainbow colors, then we can conclude that it rolls the dice for the kangaroo.\nrule3() = has(buffalo, card) and color(card) in rainbow_colors => rolls_dice(buffalo, kangaroo)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The buffalo has a card that is black in color.\nhas(buffalo, card) = True\ncolor(card, black) = True\n\n# Based on the game state and the rules and preferences, does the buffalo steal five points from the oscar?\nquestion = steals_points(buffalo, 5, oscar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the aardvark, then it knocks down the fortress that belongs to the donkey, too\nRule2: If something gives a magnifying glass to the bat, then the amberjack rolls the dice for the aardvark.\n\nThe current state of the game is as follows\nThe tiger gives a magnifying glass to the bat.\n\nBased on the game state and the rules and preferences, does the amberjack knock down the fortress of the donkey?\nQuestion: Does the amberjack knock down the fortress of the donkey?",
        "idx": 105,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something rolls the dice for the aardvark, then it knocks down the fortress that belongs to the donkey, too\nrule1(something) = rolls_dice(something, aardvark) => knocks_down_fortress(something, donkey)\n# Rule2: If at least one animal gives a magnifying glass to the bat, then the amberjack rolls the dice for the aardvark.\nrule2() = give(something, magnifying_glass, bat) => rolls_dice(amberjack, aardvark)\n\n# The current state of the game is as follows\n# The tiger gives a magnifier to the bat.\ngive(tiger, magnifying_glass, bat) = True\n\n# Based on the game state and the rules and preferences, does the amberjack knock down the fortress of the donkey?\nquestion = knocks_down_fortress(amberjack, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kudu has a card and the color of the card is one of the colors in the flag of France, then it does not prepare armor for the puffin\nRule2: If the kudu has a sharp object, then it does not prepare armor for the puffin\nRule3: If the parrot shows all her cards to the puffin and the kudu prepares armor for the puffin, then the puffin will not learn the basics of resource management from the buffalo\nRule4: If the kudu has something to carry apples and oranges, then it prepares armor for the puffin\nRule5: If the kudu has more than fourteen friends, then it prepares armor for the puffin\nRule6: If something eats the food of the wolverine, then the parrot shows all her cards to the puffin.\n\nRule1 is preferred over Rule4\nRule1 is preferred over Rule5\nRule2 is preferred over Rule4\nRule2 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cheetah eats the food of the wolverine\nThe kudu has 10 friends, has a basket, and has a saxophone\nThe parrot assassinated the mayor.\n\nBased on the game state and the rules and preferences, does the puffin learn the basics of resource management from the buffalo?\nQuestion: Does the puffin learn the basics of resource management from the buffalo?",
        "idx": 106,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kudu, if it has a card whose color appears in the flag of France, then we can conclude that it does not prepare armor for the puffin\nrule1() = has(kudu, card) and color(card) in flag_of_france_colors => not prepare_armor(kudu, puffin)\n# Rule2: If the kudu has a sharp object, then the kudu does not prepare armor for the puffin\nrule2() = has(kudu, sharp_object) => not prepare_armor(kudu, puffin)\n# Rule3: If the parrot shows her cards (all of them) to the puffin and the kudu prepares armor for the puffin, then the puffin will not learn the basics of resource management from the buffalo\nrule3() = show_cards(parrot, all_cards) & prepare_armor(kudu, puffin) => not learn(puffin, basics_of_resource_management, buffalo)\n# Rule4: If the kudu has something to carry apples and oranges, then the kudu prepares armor for the puffin\nrule4() = has(kudu, something_to_carry_apples_and_oranges) => prepare_armor(kudu, puffin)\n# Rule5: Regarding the kudu, if it has more than fourteen friends, then we can conclude that it prepares armor for the puffin\nrule5() = friends(kudu) > 14 => prepare_armor(kudu, puffin)\n# Rule6: If at least one animal eats the food that belongs to the wolverine, then the parrot shows her cards (all of them) to the puffin.\nrule6() = eat_food(something, food_of(wolverine)) => show_cards(parrot, all_cards)\n\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cheetah eats the food of the wolverine\neat_food(cheetah, food_of(wolverine)) = True\n# The kudu has 10 friends, has a basket, and has a saxophone\nfriends(kudu) = 10\nhas(kudu, basket) = True\nhas(kudu, saxophone) = True\n# The parrot assassinated the mayor.\nassassinate(parrot, mayor) = True\n\n# Based on the game state and the rules and preferences, does the puffin learn the basics of resource management from the buffalo?\nquestion = learn(puffin, basics_of_resource_management, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not respect the hummingbird, then it will not learn the basics of resource management from the zander\nRule2: If the pig has a musical instrument, then it will not learn the basics of resource management from the buffalo\nRule3: If the pig has a device to connect to the internet, then it will not learn elementary resource management from the buffalo\nRule4: The zander attacks the green fields of the meerkat whenever at least one animal learns the basics of resource management from the buffalo\nRule5: If the name of the kudu starts with the same letter as the name of the cricket, then the kudu learns elementary resource management from the zander\nRule6: If the octopus becomes an actual enemy of the pig, then the pig learns the basics of resource management from the buffalo\nRule7: If the spider does not knock down the fortress that belongs to the zander and the kudu does not learn elementary resource management from the zander, then the zander does not attack the green fields of the meerkat.\n\nRule2 is preferred over Rule6\nRule3 is preferred over Rule6\nRule4 is preferred over Rule7\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the cricket is Milo\nThe octopus owes money to the pig\nThe pig has some arugula\nThe kudu does not respect the hummingbird.\n\nBased on the game state and the rules and preferences, does the zander attack the green fields whose owner is the meerkat?\nQuestion: Does the zander attack the green fields whose owner is the meerkat?",
        "idx": 107,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not respect the hummingbird, you can be certain that it will not learn the basics of resource management from the zander\nrule1(something) = not respect(something, hummingbird) => not learn(something, basics_of_resource_management, zander)\n# Rule2: If the pig has a musical instrument, then the pig does not learn the basics of resource management from the buffalo\nrule2() = has(pig, musical_instrument) => not learn(pig, basics_of_resource_management, buffalo)\n# Rule3: Regarding the pig, if it has a device to connect to the internet, then we can conclude that it does not learn elementary resource management from the buffalo\nrule3() = has(pig, internet_device) => not learn(pig, elementary_resource_management, buffalo)\n# Rule4: The zander attacks the green fields of the meerkat whenever at least one animal learns the basics of resource management from the buffalo\nrule4() = learn(something, basics_of_resource_management, buffalo) => attack(zander, green_fields, meerkat)\n# Rule5: Regarding the kudu, if it has a name whose first letter is the same as the first letter of the cricket's name, then we can conclude that it learns elementary resource management from the zander\nrule5() = first_letter_of(name(kudu)) == first_letter_of(name(cricket)) => learn(kudu, elementary_resource_management, zander)\n# Rule6: If the octopus becomes an actual enemy of the pig, then the pig learns the basics of resource management from the buffalo\nrule6() = become_enemy(octopus, pig) => learn(pig, basics_of_resource_management, buffalo)\n# Rule7: For the zander, if the belief is that the spider does not knock down the fortress that belongs to the zander and the kudu does not learn elementary resource management from the zander, then you can add \"the zander does not attack the green fields of the meerkat\" to your conclusions.\nrule7() = not knock_down(spider, fortress, zander) & not learn(kudu, elementary_resource_management, zander) => not attack(zander, green_fields, meerkat)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n# Rule4 is preferred over Rule7\norder(rule4) > order(rule7) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cricket is named Milo\nname(cricket, Milo) = True\n# The octopus owes money to the pig\nowe(octopus, money, pig) = True\n# The pig has some arugula\nhas(pig, arugula) = True\n# The kudu does not respect the hummingbird.\nrespect(kudu, hummingbird) = False\n\n# Based on the game state and the rules and preferences, does the zander attack the green fields whose owner is the meerkat?\nquestion = attack(zander, green_fields, meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The squid knocks down the fortress of the leopard if the baboon winks at the squid\nRule2: The baboon winks at the squid whenever at least one animal removes from the board one of the pieces of the lion.\n\nThe current state of the game is as follows\nThe ferret removes from the board one of the pieces of the lion.\n\nBased on the game state and the rules and preferences, does the squid knock down the fortress of the leopard?\nQuestion: Does the squid knock down the fortress of the leopard?",
        "idx": 108,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The squid unquestionably knocks down the fortress that belongs to the leopard, in the case where the baboon winks at the squid\nrule1() = wink(baboon, squid) => knock_down(squid, fortress, leopard)\n# Rule2: The baboon winks at the squid whenever at least one animal removes from the board one of the pieces of the lion.\nrule2() = remove_piece(something, lion) => wink(baboon, squid)\n\n# The current state of the game is as follows\n# The ferret removes from the board one of the pieces of the lion.\nremove_piece(ferret, lion) = True\n\n# Based on the game state and the rules and preferences, does the squid knock down the fortress of the leopard?\nquestion = knock_down(squid, fortress, leopard)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something owes money to the whale, then it steals five points from the canary\nRule2: If the moose has a card whose color appears in the flag of Italy, then it owes money to the meerkat\nRule3: If something owes money to the meerkat, then the sea bass does not steal five points from the canary.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe moose has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the sea bass steal five points from the canary?\nQuestion: Does the sea bass steal five points from the canary?",
        "idx": 109,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals owes money to the whale, you can be certain that it will also steal five points from the canary\nrule1(something) = owes(something, money, whale) => steal_points(something, 5, canary)\n# Rule2: Regarding the moose, if it has a card whose color appears in the flag of Italy, then we can conclude that it owes $$$ to the meerkat\nrule2() = has(moose, card) and color(card) in colors_of_Italy_flag => owes(moose, money, meerkat)\n# Rule3: If at least one animal owes money to the meerkat, then the sea bass does not steal five points from the canary.\nrule3() = owes(something, money, meerkat) => not steal_points(sea_bass, 5, canary)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The moose has a card that is white in color.\nhas(moose, card) = True\ncolor(card, white) = True\n\n# Based on the game state and the rules and preferences, does the sea bass steal five points from the canary?\nquestion = steal_points(sea_bass, 5, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the panther but does not remove one of the pieces of the cat, then it does not raise a peace flag for the octopus\nRule2: If something knocks down the fortress of the elephant, then it raises a flag of peace for the octopus\nRule3: If the bat created a time machine, then it needs the support of the octopus\nRule4: If the sun bear raises a peace flag for the octopus and the bat needs support from the octopus, then the octopus holds the same number of points as the turtle.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe bat invented a time machine\nThe sun bear knows the defensive plans of the elephant and offers a job to the cat.\n\nBased on the game state and the rules and preferences, does the octopus hold the same number of points as the turtle?\nQuestion: Does the octopus hold the same number of points as the turtle?",
        "idx": 110,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something rolls the dice for the panther but does not remove one of the pieces of the cat, what can you certainly conclude? You can conclude that it does not raise a peace flag for the octopus\nrule1() = roll_dice(something, panther) & not remove_piece(something, cat) => not raise_flag_of_peace(something, octopus)\n# Rule2: If something knocks down the fortress of the elephant, then it raises a flag of peace for the octopus, too\nrule2() = knock_down(something, fortress, elephant) => raise_flag_of_peace(something, octopus)\n# Rule3: Regarding the bat, if it created a time machine, then we can conclude that it needs the support of the octopus\nrule3() = created(bat, time_machine) => needs_support(bat, octopus)\n# Rule4: For the octopus, if the belief is that the sun bear raises a peace flag for the octopus and the bat needs support from the octopus, then you can add \"the octopus holds the same number of points as the turtle\" to your conclusions.\nrule4() = raise_flag_of_peace(sun_bear, octopus) & needs_support(bat, octopus) => points(octopus) == points(turtle)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The bat invented a time machine\ncreated(bat, time_machine) = True\n# The sun bear knows the defensive plans of the elephant, and offers a job to the cat.\nknows(sun_bear, defensive_plans, elephant) = True\noffer_job_position(sun_bear, cat) = True\n\n# Based on the game state and the rules and preferences, does the octopus hold the same number of points as the turtle?\nquestion = points(octopus) == points(turtle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the bat raises a peace flag for the dog, then the dog knows the defense plan of the octopus\nRule2: If something becomes an actual enemy of the wolverine, then the octopus does not become an actual enemy of the hippopotamus\nRule3: If something burns the warehouse of the meerkat but does not prepare armor for the leopard, then it does not know the defense plan of the octopus\nRule4: If the dog knows the defense plan of the octopus, then the octopus becomes an enemy of the hippopotamus.\n\nRule2 is preferred over Rule4\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe bat raises a peace flag for the dog\nThe dog burns the warehouse of the meerkat.\n\nBased on the game state and the rules and preferences, does the octopus become an enemy of the hippopotamus?\nQuestion: Does the octopus become an enemy of the hippopotamus?",
        "idx": 111,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The dog unquestionably knows the defense plan of the octopus, in the case where the bat raises a peace flag for the dog\nrule1() = raise_flag_of_peace(bat, dog) => knows(dog, defense_plan, octopus)\n# Rule2: The octopus does not become an actual enemy of the hippopotamus whenever at least one animal becomes an actual enemy of the wolverine\nrule2() = become_enemy(something, wolverine) => not become_enemy(octopus, hippopotamus)\n# Rule3: If you see that something burns the warehouse of the meerkat but does not prepare armor for the leopard, what can you certainly conclude? You can conclude that it does not know the defense plan of the octopus\nrule3(something) = burn_warehouse(something, meerkat) & not prepare_armor(something, leopard) => not knows(something, defense_plan, octopus)\n# Rule4: If the dog knows the defense plan of the octopus, then the octopus becomes an enemy of the hippopotamus.\nrule4() = knows(dog, defense_plan, octopus) => become_enemy(octopus, hippopotamus)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The bat raises a peace flag for the dog\nraise_flag_of_peace(bat, dog) = True\n# The dog burns the warehouse of the meerkat.\nburn_warehouse(dog, meerkat) = True\n\n# Based on the game state and the rules and preferences, does the octopus become an enemy of the hippopotamus?\nquestion = become_enemy(octopus, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cat has a card and the color of the card is one of the rainbow colors, then the cat gives a magnifier to the leopard\nRule2: If the carp holds an equal number of points as the leopard and the cat is not going to give a magnifier to the leopard, then the leopard is not going to learn elementary resource management from the doctorfish\nRule3: If the viperfish removes a piece of the leopard, then the leopard learns the basics of resource management from the doctorfish\nRule4: If the carp has a card and the color of the card is a primary color, then the carp holds an equal number of points as the leopard\nRule5: If the cat does not have her keys, then the cat does not give a magnifier to the leopard.\n\nRule3 is preferred over Rule2\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe carp has a card that is red in color\nThe cat has a card that is orange in color\nThe cat has some arugula\nThe cat lost her keys\n\nBased on the game state and the rules and preferences, does the leopard learn the basics of resource management from the doctorfish?\nQuestion: Does the leopard learn the basics of resource management from the doctorfish?",
        "idx": 112,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cat has a card whose color is one of the rainbow colors, then the cat gives a magnifier to the leopard\nrule1() = has(cat, card) and color(card) in rainbow_colors => give(cat, magnifier, leopard)\n# Rule2: For the leopard, if the belief is that the cat is not going to give a magnifier to the leopard but the carp holds an equal number of points as the leopard, then you can add that \"the leopard is not going to learn elementary resource management from the doctorfish\" to your conclusions\nrule2() = not give(cat, magnifier, leopard) & points(carp) == points(leopard) => not learn(leopard, elementary_resource_management, doctorfish)\n# Rule3: If the viperfish removes one of the pieces of the leopard, then the leopard learns the basics of resource management from the doctorfish\nrule3() = remove(viperfish, piece, leopard) => learn(leopard, basics_of_resource_management, doctorfish)\n# Rule4: Regarding the carp, if it has a card with a primary color, then we can conclude that it holds an equal number of points as the leopard\nrule4() = has(carp, card) and color(card) in primary_colors => points(carp) == points(leopard)\n# Rule5: If the cat does not have her keys, then the cat does not give a magnifier to the leopard.\nrule5() = not has(cat, keys) => not give(cat, magnifier, leopard)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The carp has a card that is red in color\nhas(carp, card) and color(card, red) = True\n# The cat has a card that is orange in color, has some arugula, and lost her keys.\nhas(cat, card) and color(card, orange) = True\nhas(cat, arugula) = True\nnot has(cat, keys) = True\n\n# Based on the game state and the rules and preferences, does the leopard learn the basics of resource management from the doctorfish?\nquestion = learn(leopard, basics_of_resource_management, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the donkey has a musical instrument, then it needs the support of the dog\nRule2: If the donkey has a card with a primary color, then it holds an equal number of points as the kangaroo\nRule3: If something holds an equal number of points as the kangaroo and also needs the support of the dog, then it offers a job position to the cricket\nRule4: If the donkey has a sharp object, then it holds the same number of points as the kangaroo\nRule5: If the first letter of the name of the donkey is the same as the first letter of the name of the octopus, then the donkey does not need the support of the dog\nRule6: If the leopard removes one of the pieces of the donkey, then the donkey is not going to offer a job position to the cricket.\n\nRule3 is preferred over Rule6\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe donkey has a black card\nThe donkey has a piano\nThe name of the donkey is Luna\nThe donkey has a saxophone.\n\nBased on the game state and the rules and preferences, does the donkey offer a job to the cricket?\nQuestion: Does the donkey offer a job to the cricket?",
        "idx": 113,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the donkey, if it has a musical instrument, then we can conclude that it needs the support of the dog\nrule1() = has(donkey, musical_instrument) => needs_support(donkey, dog)\n# Rule2: If the donkey has a card with a primary color, then the donkey holds an equal number of points as the kangaroo\nrule2() = has(donkey, card) and color(card) in primary_colors => points(donkey) == points(kangaroo)\n# Rule3: Be careful when something holds an equal number of points as the kangaroo and also needs the support of the dog because in this case it will surely offer a job position to the cricket (this may or may not be problematic)\nrule3(something) = points(something) == points(kangaroo) and needs_support(something, dog) => offer_job_position(something, cricket)\n# Rule4: Regarding the donkey, if it has a sharp object, then we can conclude that it holds the same number of points as the kangaroo\nrule4() = has(donkey, sharp_object) => points(donkey) == points(kangaroo)\n# Rule5: If the donkey has a name whose first letter is the same as the first letter of the octopus's name, then the donkey does not need the support of the dog\nrule5() = first_letter_of(name(donkey)) == first_letter_of(name(octopus)) => not needs_support(donkey, dog)\n# Rule6: If the leopard removes one of the pieces of the donkey, then the donkey is not going to offer a job position to the cricket.\nrule6() = remove_piece(leopard, donkey) => not offer_job_position(donkey, cricket)\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The donkey has a card that is black in color, has a piano, and is named Luna\nhas(donkey, card) = True\ncolor(card, black) = True\nhas(donkey, piano) = True\nname(donkey, Luna) = True\n# The donkey has a saxophone.\nhas(donkey, saxophone) = True\n\n# Based on the game state and the rules and preferences, does the donkey offer a job to the cricket?\nquestion = offer_job_position(donkey, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something burns the warehouse of the meerkat, then the zander does not owe money to the bat\nRule2: If the tilapia knows the defense plan of the zander, then the zander is not going to owe money to the phoenix\nRule3: If the ferret knocks down the fortress of the tilapia and the snail burns the warehouse that is in possession of the tilapia, then the tilapia knows the defense plan of the zander\nRule4: If the puffin shows her cards to the zander, then the zander owes money to the bat\nRule5: If something winks at the panda bear, then it owes money to the cat, too\nRule6: If something owes money to the cat but does not owe money to the bat, then it owes money to the phoenix.\n\nRule4 is preferred over Rule1\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe baboon burns the warehouse of the meerkat\nThe ferret knocks down the fortress of the tilapia\nThe snail burns the warehouse of the tilapia\nThe squirrel rolls the dice for the dog\nThe zander winks at the panda bear.\n\nBased on the game state and the rules and preferences, does the zander owe money to the phoenix?\nQuestion: Does the zander owe money to the phoenix?",
        "idx": 114,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal burns the warehouse of the meerkat, then the zander does not owe $$$ to the bat\nrule1() = burns_warehouse(something, meerkat) => not owe(zander, money, bat)\n# Rule2: If the tilapia knows the defense plan of the zander, then the zander is not going to owe $$$ to the phoenix\nrule2() = knows(tilapia, defense_plan, zander) => not owe(zander, money, phoenix)\n# Rule3: If the ferret knocks down the fortress of the tilapia and the snail burns the warehouse that is in possession of the tilapia, then the tilapia knows the defense plan of the zander\nrule3() = knocks_down(ferret, fortress, tilapia) & burns_warehouse(snail, warehouse_of(tilapia)) => knows(tilapia, defense_plan, zander)\n# Rule4: If the puffin shows her cards (all of them) to the zander, then the zander owes $$$ to the bat\nrule4() = shows_cards(puffin, all_cards) to zander => owe(zander, money, bat)\n# Rule5: If something winks at the panda bear, then it owes money to the cat, too\nrule5(something) = winks(something, panda_bear) => owe(something, money, cat)\n# Rule6: Be careful when something owes $$$ to the cat but does not owe money to the bat because in this case it will, surely, owe money to the phoenix (this may or may not be problematic).\nrule6(something) = owe(something, money, cat) & not owe(something, money, bat) => owe(something, money, phoenix)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The baboon burns the warehouse of the meerkat\nburns_warehouse(baboon, meerkat) = True\n# The ferret knocks down the fortress of the tilapia\nknocks_down(ferret, fortress, tilapia) = True\n# The snail burns the warehouse of the tilapia\nburns_warehouse(snail, warehouse_of(tilapia)) = True\n# The squirrel rolls the dice for the dog\nrolls_dice(squirrel, dog) = True\n# The zander winks at the panda bear.\nwinks(zander, panda_bear) = True\n\n# Based on the game state and the rules and preferences, does the zander owe money to the phoenix?\nquestion = owe(zander, money, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something winks at the crocodile and also eats the food of the octopus, then it prepares armor for the turtle.\nRule2: If the eagle prepares armor for the turtle and the squid burns the warehouse that is in possession of the turtle, then the turtle will not roll the dice for the polar bear.\nRule3: The squid burns the warehouse of the turtle whenever at least one animal rolls the dice for the rabbit.\nRule4: If something proceeds to the spot that is right after the spot of the cow, then it will not prepare armor for the turtle.\nRule5: If the squid has fewer than 13 wise friends, then it does not burn the warehouse that is in possession of the turtle.\n\nRule3 is preferred over Rule5\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe dog rolls the dice for the rabbit\nThe eagle eats the food of the octopus\nThe eagle winks at the crocodile\nThe squid has 9 wise friends and 1 non-wise friend.\n\nBased on the game state and the rules and preferences, does the turtle roll the dice for the polar bear?\nQuestion: Does the turtle roll the dice for the polar bear?",
        "idx": 115,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something winks at the crocodile and also eats the food of the octopus because in this case it will surely prepare armor for the turtle (this may or may not be problematic)\nrule1() = winks(something, crocodile) & eats_food(something, food_of(octopus)) => prepare_armor(something, turtle)\n# Rule2: If the eagle prepares armor for the turtle and the squid burns the warehouse that is in possession of the turtle, then the turtle will not roll the dice for the polar bear\nrule2() = prepare_armor(eagle, turtle) & burn_warehouse(squid, turtle) => not roll_dice(turtle, polar_bear)\n# Rule3: The squid burns the warehouse of the turtle whenever at least one animal rolls the dice for the rabbit\nrule3() = roll_dice(something, rabbit) => burn_warehouse(squid, turtle)\n# Rule4: If you are positive that you saw one of the animals proceeds to the spot that is right after the spot of the cow, you can be certain that it will not prepare armor for the turtle\nrule4() = proceeds_to_spot(something, spot_after(spot_of(cow))) => not prepare_armor(something, turtle)\n# Rule5: Regarding the squid, if it has fewer than 13 friends, then we can conclude that it does not burn the warehouse that is in possession of the turtle.\nrule5() = friends(squid) < 13 => not burn_warehouse(squid, turtle)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The dog rolls the dice for the rabbit\nroll_dice(dog, rabbit) = True\n# The eagle eats the food of the octopus\neats_food(eagle, food_of(octopus)) = True\n# The eagle winks at the crocodile\nwinks(eagle, crocodile) = True\n# The squid has 9 friends that are wise and 1 friend that is not.\nwise_friends(squid) = 9\nnon_wise_friends(squid) = 1\n\n# Based on the game state and the rules and preferences, does the turtle roll the dice for the polar bear?\nquestion = roll_dice(turtle, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something eats the food of the panda bear, then the tilapia does not eat the food that belongs to the blobfish\nRule2: If something proceeds to the spot that is right after the spot of the blobfish, then it knocks down the fortress that belongs to the wolverine, too\nRule3: If the ferret has a card whose color appears in the flag of Japan, then the ferret shows her cards to the tilapia\nRule4: If the cow has something to drink, then the cow knows the defensive plans of the tilapia\nRule5: If something needs the support of the ferret and also burns the warehouse that is in possession of the sea bass, then it will surely eat the food that belongs to the blobfish.\n\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cow has a cappuccino\nThe ferret has a red card\nThe tilapia burns the warehouse of the sea bass and needs support from the ferret.\n\nBased on the game state and the rules and preferences, does the tilapia knock down the fortress of the wolverine?\nQuestion: Does the tilapia knock down the fortress of the wolverine?",
        "idx": 116,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal eats the food of the panda bear, then the tilapia does not eat the food that belongs to the blobfish\nrule1() = eat_food(something, food_of(panda_bear)) => not eat_food(tilapia, food_of(blobfish))\n# Rule2: If something proceeds to the spot that is right after the spot of the blobfish, then it knocks down the fortress that belongs to the wolverine, too\nrule2(something) = proceed(something, spot_after(blobfish)) => knock_down_fortress(something, wolverine)\n# Rule3: If the ferret has a card whose color appears in the flag of Japan, then the ferret shows her cards (all of them) to the tilapia\nrule3() = has(ferret, card) and color(card) in colors_of(flag_of_Japan) => show_cards(ferret, tilapia)\n# Rule4: If the cow has something to drink, then the cow knows the defensive plans of the tilapia\nrule4() = has(cow, drink) => knows(cow, defensive_plans, tilapia)\n# Rule5: Be careful when something needs the support of the ferret and also burns the warehouse that is in possession of the sea bass because in this case it will surely eat the food that belongs to the blobfish (this may or may not be problematic).\nrule5(something) = needs_support(something, ferret) & burns_warehouse(something, sea_bass) => eat_food(something, food_of(blobfish))\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cow has a cappuccino\nhas(cow, cappuccino) = True\n# The ferret has a card that is red in color\nhas(ferret, card) and color(card, red) = True\n# The tilapia burns the warehouse of the sea bass, and needs support from the ferret.\nburns_warehouse(tilapia, sea_bass) = True\nneeds_support(tilapia, ferret) = True\n\n# Based on the game state and the rules and preferences, does the tilapia knock down the fortress of the wolverine?\nquestion = knock_down_fortress(tilapia, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something steals five points from the panther and also learns the basics of resource management from the bat, then it will surely need the support of the elephant.\nRule2: If the squid proceeds to the spot right after the panda bear and the bat does not proceed to the spot that is right after the spot of the panda bear, then you can add \"the panda bear steals five of the points of the panther\" to your conclusions.\nRule3: If the panda bear supports Chris Ronaldo, then it learns the basics of resource management from the bat.\n\nThe current state of the game is as follows\nThe buffalo becomes an enemy of the panda bear\nThe panda bear supports Chris Ronaldo\nThe squid proceeds to the spot right after the panda bear\nThe bat does not proceed to the spot right after the panda bear\n\nBased on the game state and the rules and preferences, does the panda bear need support from the elephant?\nQuestion: Does the panda bear need support from the elephant?",
        "idx": 117,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something steals five points from the panther and also learns the basics of resource management from the bat because in this case it will surely need the support of the elephant (this may or may not be problematic)\nrule1(something) = steals(something, 5, panther) & learns(something, basics_of_resource_management, bat) => need_support(something, elephant)\n# Rule2: For the panda bear, if the belief is that the squid proceeds to the spot right after the panda bear and the bat does not proceed to the spot that is right after the spot of the panda bear, then you can add \"the panda bear steals five of the points of the panther\" to your conclusions\nrule2() = proceed(squid, spot_right_after, panda_bear) & not proceed(bat, spot_right_after, panda_bear) => add_conclusion(\"the panda bear steals five of the points of the panther\")\n# Rule3: If the panda bear is a fan of Chris Ronaldo, then the panda bear learns the basics of resource management from the bat.\nrule3() = fan(panda_bear, Chris_Ronaldo) => learns(panda_bear, basics_of_resource_management, bat)\n\n# The current state of the game is as follows\n# The buffalo becomes an enemy of the panda bear\nbecome_enemy(buffalo, panda_bear) = True\n# The panda bear supports Chris Ronaldo\nsupports(panda_bear, Chris_Ronaldo) = True\n# The squid proceeds to the spot right after the panda bear\nproceed(squid, spot_right_after, panda_bear) = True\n# The bat does not proceed to the spot right after the panda bear\nnot proceed(bat, spot_right_after, panda_bear) = True\n\n# Based on the game state and the rules and preferences, does the panda bear need support from the elephant?\nquestion = need_support(panda_bear, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job to the kangaroo but does not know the defense plan of the kudu, then it does not owe money to the baboon.\nRule2: If something respects the wolverine, then it does not offer a job to the kangaroo\nRule3: If the whale shows all her cards to the zander, then the zander does not know the defensive plans of the kudu\nRule4: If something needs the support of the spider, then it offers a job position to the kangaroo, too.\n\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe whale shows all her cards to the zander\nThe zander has a low-income job, needs support from the spider, and respects the wolverine\nThe zander has some spinach.\n\nBased on the game state and the rules and preferences, does the zander owe money to the baboon?\nQuestion: Does the zander owe money to the baboon?",
        "idx": 118,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something offers a job to the kangaroo but does not know the defense plan of the kudu because in this case it will, surely, not owe money to the baboon (this may or may not be problematic)\nrule1(something) = offer_job_position(something, kangaroo) & not know(something, defense_plan, kudu) => not owe(something, money, baboon)\n# Rule2: If something respects the wolverine, then it does not offer a job to the kangaroo\nrule2(something) = respect(something, wolverine) => not offer_job_position(something, kangaroo)\n# Rule3: If the whale shows all her cards to the zander, then the zander is not going to know the defensive plans of the kudu\nrule3() = show_all_cards(whale, zander) => not know(zander, defense_plan, kudu)\n# Rule4: If something needs the support of the spider, then it offers a job position to the kangaroo, too.\nrule4(something) = needs_support(something, spider) => offer_job_position(something, kangaroo)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The whale shows all her cards to the zander\nshow_all_cards(whale, zander) = True\n# The zander has a low-income job, needs support from the spider, and respects the wolverine\nhas(zander, job, low_income) = True\nneeds_support(zander, spider) = True\nrespect(zander, wolverine) = True\n# The zander has some spinach.\nhas(zander, spinach) = True\n\n# Based on the game state and the rules and preferences, does the zander owe money to the baboon?\nquestion = owe(zander, money, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the gecko needs support from the sun bear and the eel does not steal five points from the sun bear, then the sun bear offers a job position to the canary\nRule2: If the first letter of the name of the gecko is the same as the first letter of the name of the tiger, then the gecko needs the support of the sun bear\nRule3: If the eel works fewer hours than before, then the eel does not steal five points from the sun bear\nRule4: If the eel has a card and the color of the card appears in the flag of France, then the eel does not steal five points from the sun bear.\n\nThe current state of the game is as follows\nThe eel has a yellow card\nThe eel works fewer hours than before\nThe name of the gecko is Pashmak\nThe name of the tiger is Lily\n\nBased on the game state and the rules and preferences, does the sun bear offer a job to the canary?\nQuestion: Does the sun bear offer a job position to the canary?",
        "idx": 119,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the gecko needs support from the sun bear and the eel does not steal five points from the sun bear, then, inevitably, the sun bear offers a job position to the canary\nrule1() = needs_support(gecko, sun_bear) & not steal_points(eel, 5, sun_bear) => offer_job_position(sun_bear, canary)\n# Rule2: Regarding the gecko, if it has a name whose first letter is the same as the first letter of the tiger's name, then we can conclude that it needs the support of the sun bear\nrule2() = first_letter_of(name(gecko)) == first_letter_of(name(tiger)) => needs_support(gecko, sun_bear)\n# Rule3: If the eel works fewer hours than before, then the eel does not steal five of the points of the sun bear\nrule3() = works_fewer_hours(eel) => not steal_points(eel, 5, sun_bear)\n# Rule4: If the eel has a card whose color appears in the flag of France, then the eel does not steal five points from the sun bear.\nrule4() = has(eel, card) and color(card) in flag_of_france_colors => not steal_points(eel, 5, sun_bear)\n\n# The current state of the game is as follows\n# The eel has a card that is yellow in color\nhas(eel, card) = True\ncolor(card, yellow) = True\n# The eel reduced her work hours recently\nworks_fewer_hours(eel) = True\n# The gecko is named Pashmak\nname(gecko, Pashmak) = True\n# The tiger is named Lily.\nname(tiger, Lily) = True\n\n# Based on the game state and the rules and preferences, does the sun bear offer a job to the canary?\nquestion = offer_job_position(sun_bear, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panda bear has something to sit on, then it does not knock down the fortress that belongs to the squid\nRule2: If the panda bear does not knock down the fortress of the squid and the kangaroo does not burn the warehouse that is in possession of the squid, then the squid knows the defensive plans of the meerkat\nRule3: If the kangaroo has fewer than eleven friends, then it does not burn the warehouse of the squid.\n\nThe current state of the game is as follows\nThe name of the blobfish is Lucy\nThe kangaroo has 4 friends\nThe name of the kangaroo is Lola\nThe kangaroo has reduced work hours\nThe panda bear has a couch.\n\nBased on the game state and the rules and preferences, does the squid know the defensive plans of the meerkat?\nQuestion: Does the squid know the defensive plans of the meerkat?",
        "idx": 120,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the panda bear, if it has something to sit on, then we can conclude that it does not knock down the fortress that belongs to the squid\nrule1() = has(panda_bear, something_to_sit_on) => not knock_down(panda_bear, fortress, squid)\n# Rule2: If the panda bear does not knock down the fortress of the squid and the kangaroo does not burn the warehouse that is in possession of the squid, then the squid knows the defensive plans of the meerkat\nrule2() = not knock_down(panda_bear, fortress, squid) & not burn(kangaroo, warehouse, squid) => knows(squid, defensive_plans, meerkat)\n# Rule3: If the kangaroo has fewer than eleven friends, then the kangaroo does not burn the warehouse of the squid.\nrule3() = friends(kangaroo) < 11 => not burn(kangaroo, warehouse, squid)\n\n# The current state of the game is as follows\n# The blobfish is named Lucy\nname(blobfish, Lucy) = True\n# The kangaroo has four friends\nfriends(kangaroo) = 4\n# The kangaroo is named Lola, and reduced her work hours recently\nname(kangaroo, Lola) = True\nreduced_work_hours(kangaroo) = True\n# The panda bear has a couch.\nhas(panda_bear, couch) = True\n\n# Based on the game state and the rules and preferences, does the squid know the defensive plans of the meerkat?\nquestion = knows(squid, defensive_plans, meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion killed the mayor, then it rolls the dice for the hippopotamus\nRule2: If the first letter of the name of the lion is the same as the first letter of the name of the tilapia, then the lion sings a victory song for the polar bear\nRule3: If the eel removes one of the pieces of the lion, then the lion does not sing a victory song for the polar bear\nRule4: If something sings a victory song for the polar bear and rolls the dice for the hippopotamus, then it does not show all her cards to the canary\nRule5: If something needs support from the parrot, then it shows all her cards to the canary.\n\nRule3 is preferred over Rule2\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe lion assassinated the mayor\nThe name of the lion is Meadow\nThe name of the tilapia is Mojo.\n\nBased on the game state and the rules and preferences, does the lion show all her cards to the canary?\nQuestion: Does the lion show all her cards to the canary?",
        "idx": 121,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lion killed the mayor, then the lion rolls the dice for the hippopotamus\nrule1() = killed(lion, mayor) => roll_dice(lion, hippopotamus)\n# Rule2: Regarding the lion, if it has a name whose first letter is the same as the first letter of the tilapia's name, then we can conclude that it sings a victory song for the polar bear\nrule2() = first_letter_of(name(lion)) == first_letter_of(name(tilapia)) => sing_victory_song(lion, polar_bear)\n# Rule3: If the eel removes one of the pieces of the lion, then the lion is not going to sing a victory song for the polar bear\nrule3() = remove_piece(eel, lion) => not sing_victory_song(lion, polar_bear)\n# Rule4: If you see that something sings a victory song for the polar bear and rolls the dice for the hippopotamus, what can you certainly conclude? You can conclude that it does not show all her cards to the canary\nrule4(something) = sing_victory_song(something, polar_bear) & roll_dice(something, hippopotamus) => not show_all_cards(something, canary)\n# Rule5: If you are positive that you saw one of the animals needs support from the parrot, you can be certain that it will also show all her cards to the canary.\nrule5(something) = needs_support(something, parrot) => show_all_cards(something, canary)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The lion assassinated the mayor\nkilled(lion, mayor) = True\n# The lion is named Meadow\nname(lion, Meadow) = True\n# The tilapia is named Mojo.\nname(tilapia, Mojo) = True\n\n# Based on the game state and the rules and preferences, does the lion show all her cards to the canary?\nquestion = show_all_cards(lion, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale attacks the green fields of the moose, then the moose respects the tilapia\nRule2: If the first letter of the name of the moose is the same as the first letter of the name of the black bear, then the moose proceeds to the spot right after the eel\nRule3: If something offers a job to the sea bass but does not respect the tilapia, then it does not wink at the gecko\nRule4: If the moose killed the mayor, then it does not respect the tilapia\nRule5: If the moose has a card whose color starts with the letter \"w\", then it proceeds to the spot that is right after the spot of the eel\nRule6: If something proceeds to the spot right after the eel, then it winks at the gecko.\n\nRule1 is preferred over Rule4\nRule6 is preferred over Rule3\n\nThe current state of the game is as follows\nThe name of the black bear is Tango\nThe moose has a red card\nThe name of the moose is Max\nThe whale does not offer a job to the moose.\n\nBased on the game state and the rules and preferences, does the moose wink at the gecko?\nQuestion: Does the moose wink at the gecko?",
        "idx": 122,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the whale attacks the green fields of the moose, then the moose respects the tilapia\nrule1() = attacks(whale, green_fields, moose) => respect(moose, tilapia)\n# Rule2: Regarding the moose, if it has a name whose first letter is the same as the first letter of the black bear's name, then we can conclude that it proceeds to the spot right after the eel\nrule2() = first_letter_of(name(moose)) == first_letter_of(name(black_bear)) => proceed_to_spot_right_after(moose, eel)\n# Rule3: If you see that something offers a job to the sea bass but does not respect the tilapia, what can you certainly conclude? You can conclude that it does not wink at the gecko\nrule3(something) = offer_job_position(something, sea_bass) & not respect(something, tilapia) => not wink(something, gecko)\n# Rule4: Regarding the moose, if it killed the mayor, then we can conclude that it does not respect the tilapia\nrule4() = killed(moose, mayor) => not respect(moose, tilapia)\n# Rule5: Regarding the moose, if it has a card whose color starts with the letter \"w\", then we can conclude that it proceeds to the spot that is right after the spot of the eel\nrule5() = has(moose, card) and starts_with(color_of(card), \"w\") => proceed_to_spot_right_after(moose, eel)\n# Rule6: If something proceeds to the spot right after the eel, then it winks at the gecko, too.\nrule6(something) = proceed_to_spot_right_after(something, eel) => wink(something, gecko)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n\n# The current state of the game is as follows\n# The black bear is named Tango\nname(black_bear, Tango) = True\n# The moose has a card that is red in color\nhas(moose, card) = True\ncolor_of(card, red) = True\n# The moose is named Max\nname(moose, Max) = True\n# The whale does not offer a job to the moose.\noffer_job_position(whale, moose) = False\n\n# Based on the game state and the rules and preferences, does the moose wink at the gecko?\nquestion = wink(moose, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hummingbird does not become an enemy of the koala and the cheetah winks at the koala, then the koala will not show all her cards to the cockroach\nRule2: If something does not show all her cards to the cockroach and also does not give a magnifying glass to the raven, then it attacks the green fields whose owner is the viperfish\nRule3: If the kiwi winks at the koala, then the koala will not give a magnifier to the raven.\n\nThe current state of the game is as follows\nThe cheetah winks at the koala\nThe kiwi winks at the koala\nThe wolverine proceeds to the spot right after the koala\nThe hummingbird does not become an enemy of the koala.\n\nBased on the game state and the rules and preferences, does the koala attack the green fields whose owner is the viperfish?\nQuestion: Does the koala attack the green fields whose owner is the viperfish?",
        "idx": 123,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hummingbird does not become an actual enemy of the koala however the cheetah winks at the koala, then the koala will not show her cards (all of them) to the cockroach\nrule1() = not become_enemy(hummingbird, koala) & wink(cheetah, koala) => not show_cards(koala, cockroach)\n# Rule2: If you see that something does not show all her cards to the cockroach and also does not give a magnifying glass to the raven, what can you certainly conclude? You can conclude that it also attacks the green fields whose owner is the viperfish\nrule2(something) = not show_cards(something, cockroach) & not give(something, magnifying_glass, raven) => attack(koala, green_fields, owner=viperfish)\n# Rule3: If the kiwi winks at the koala, then the koala is not going to give a magnifier to the raven.\nrule3() = wink(kiwi, koala) => not give(koala, magnifying_glass, raven)\n\n# The current state of the game is as follows\n# The cheetah winks at the koala\nwink(cheetah, koala) = True\n# The kiwi winks at the koala\nwink(kiwi, koala) = True\n# The wolverine proceeds to the spot right after the koala\nproceed(wolverine, spot_right_after(koala)) = True\n# The hummingbird does not become an enemy of the koala.\nbecome_enemy(hummingbird, koala) = False\n\n# Based on the game state and the rules and preferences, does the koala attack the green fields whose owner is the viperfish?\nquestion = attack(koala, green_fields, owner=viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not knock down the fortress that belongs to the gecko, then it will burn the warehouse of the hummingbird without a doubt\nRule2: If something burns the warehouse of the hummingbird, then it does not know the defense plan of the catfish.\n\nThe current state of the game is as follows\nThe moose does not knock down the fortress of the gecko.\n\nBased on the game state and the rules and preferences, does the moose know the defensive plans of the catfish?\nQuestion: Does the moose know the defensive plans of the catfish?",
        "idx": 124,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not knock down the fortress that belongs to the gecko, you can be certain that it will burn the warehouse of the hummingbird without a doubt\nrule1(something) = not knock_down(something, fortress, gecko) => burn_warehouse(hummingbird)\n# Rule2: If something burns the warehouse that is in possession of the hummingbird, then it does not know the defense plan of the catfish.\nrule2() = burn_warehouse(something) => not know(something, defense_plan, catfish)\n\n# The current state of the game is as follows\n# The moose does not knock down the fortress of the gecko.\nknock_down(moose, fortress, gecko) = False\n\n# Based on the game state and the rules and preferences, does the moose know the defensive plans of the catfish?\nquestion = know(moose, defense_plan, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the goldfish creates a time machine, then it removes one of the pieces of the doctorfish\nRule2: If the cow winks at the doctorfish, then the doctorfish attacks the green fields of the cheetah\nRule3: If the goldfish does not remove one of the pieces of the doctorfish, but the elephant shows all her cards to the doctorfish, then the doctorfish will not become an enemy of the kangaroo\nRule4: If something attacks the green fields of the cheetah and offers a job to the lion, then it becomes an enemy of the kangaroo\nRule5: If the doctorfish has a card whose color is one of the rainbow colors, then it does not offer a job to the lion\nRule6: The doctorfish offers a job to the lion if the penguin raises a peace flag for the doctorfish\nRule7: The goldfish does not remove one of the pieces of the doctorfish whenever something eats the food of the blobfish.\n\nRule3 is preferred over Rule4\nRule5 is preferred over Rule6\nRule7 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cow offers a job to the doctorfish\nThe goldfish is holding her keys\nThe penguin raises a peace flag for the doctorfish.\n\nBased on the game state and the rules and preferences, does the doctorfish become an enemy of the kangaroo?\nQuestion: Does the doctorfish become an enemy of the kangaroo?",
        "idx": 125,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the goldfish created a time machine, then the goldfish removes one of the pieces of the doctorfish\nrule1() = created(goldfish, time_machine) => remove_piece(goldfish, doctorfish)\n# Rule2: If the cow winks at the doctorfish, then the doctorfish attacks the green fields whose owner is the cheetah\nrule2() = wink(cow, doctorfish) => attack(doctorfish, green_fields(cheetah))\n# Rule3: If the goldfish does not remove from the board one of the pieces of the doctorfish however the elephant shows her cards (all of them) to the doctorfish, then the doctorfish will not become an actual enemy of the kangaroo\nrule3() = not remove_piece(goldfish, doctorfish) & show_cards(elephant, all_cards, doctorfish) => not become_enemy(doctorfish, kangaroo)\n# Rule4: If you see that something attacks the green fields of the cheetah and offers a job to the lion, what can you certainly conclude? You can conclude that it also becomes an actual enemy of the kangaroo\nrule4(something) = attack(something, green_fields(cheetah)) & offer_job_position(something, lion) => become_enemy(something, kangaroo)\n# Rule5: Regarding the doctorfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not offer a job to the lion\nrule5() = has(doctorfish, card) & color(card) in rainbow_colors => not offer_job_position(doctorfish, lion)\n# Rule6: The doctorfish unquestionably offers a job position to the lion, in the case where the penguin raises a flag of peace for the doctorfish\nrule6() = raise_flag_of_peace(penguin, doctorfish) => offer_job_position(doctorfish, lion)\n# Rule7: The goldfish does not remove one of the pieces of the doctorfish whenever at least one animal eats the food of the blobfish.\nrule7() = eat_food(something, food_of(blobfish)) => not remove_piece(goldfish, doctorfish)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cow offers a job to the doctorfish\noffer_job_position(cow, doctorfish) = True\n# The goldfish is holding her keys\nhas(goldfish, keys) = True\n# The penguin raises a peace flag for the doctorfish.\nraise_flag_of_peace(penguin, doctorfish) = True\n\n# Based on the game state and the rules and preferences, does the doctorfish become an enemy of the kangaroo?\nquestion = become_enemy(doctorfish, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the octopus is the same as the first letter of the name of the jellyfish, then the octopus does not respect the sheep\nRule2: If the octopus does not respect the sheep, then the sheep eats the food that belongs to the parrot\nRule3: If the octopus has a card and the color of the card is one of the rainbow colors, then the octopus does not respect the sheep.\n\nThe current state of the game is as follows\nThe name of the jellyfish is Casper\nThe octopus has a yellow card\nThe name of the octopus is Peddi\n\nBased on the game state and the rules and preferences, does the sheep eat the food of the parrot?\nQuestion: Does the sheep eat the food of the parrot?",
        "idx": 126,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the octopus has a name whose first letter is the same as the first letter of the jellyfish's name, then the octopus does not respect the sheep\nrule1() = first_letter_of(name(octopus)) == first_letter_of(name(jellyfish)) => not respect(octopus, sheep)\n# Rule2: If the octopus does not respect the sheep, then the sheep eats the food that belongs to the parrot\nrule2() = not respect(octopus, sheep) => eat_food(sheep, food_of(parrot))\n# Rule3: If the octopus has a card whose color is one of the rainbow colors, then the octopus does not respect the sheep.\nrule3() = has(octopus, card) and color(card) in rainbow_colors => not respect(octopus, sheep)\n\n# The current state of the game is as follows\n# The jellyfish is named Casper\nname(jellyfish, Casper) = True\n# The octopus has a card that is yellow in color, and is named Peddi.\nhas(octopus, card) = True\ncolor(card, yellow) = True\nname(octopus, Peddi) = True\n\n# Based on the game state and the rules and preferences, does the sheep eat the food of the parrot?\nquestion = eat_food(sheep, food_of(parrot))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something removes one of the pieces of the viperfish and also steals five of the points of the spider, then it will surely not learn the basics of resource management from the aardvark.\nRule2: If something proceeds to the spot that is right after the spot of the oscar, then it will also steal five of the points of the spider.\nRule3: If the puffin has a leafy green vegetable, then it removes from the board one of the pieces of the viperfish.\nRule4: If the puffin has a high salary, then it does not remove from the board one of the pieces of the viperfish.\n\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe puffin has some spinach\nThe puffin proceeds to the spot right after the oscar.\n\nBased on the game state and the rules and preferences, does the puffin learn the basics of resource management from the aardvark?\nQuestion: Does the puffin learn the basics of resource management from the aardvark?",
        "idx": 127,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something removes one of the pieces of the viperfish and also steals five of the points of the spider because in this case it will surely not learn the basics of resource management from the aardvark (this may or may not be problematic)\nrule1(something) = remove_piece(something, viperfish) & steal_points(something, 5, spider) => not learn(something, basics_of_resource_management, aardvark)\n# Rule2: If you are positive that you saw one of the animals proceeds to the spot that is right after the spot of the oscar, you can be certain that it will also steal five of the points of the spider\nrule2(something) = proceed_to_spot(something, spot_after(oscar)) => steal_points(something, 5, spider)\n# Rule3: Regarding the puffin, if it has a leafy green vegetable, then we can conclude that it removes from the board one of the pieces of the viperfish\nrule3() = has(puffin, leafy_green_vegetable) => remove_piece(puffin, viperfish)\n# Rule4: Regarding the puffin, if it has a high salary, then we can conclude that it does not remove from the board one of the pieces of the viperfish.\nrule4() = has_high_salary(puffin) => not remove_piece(puffin, viperfish)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The puffin has some spinach\nhas(puffin, spinach) = True\n# The puffin proceeds to the spot right after the oscar.\nproceed_to_spot(puffin, spot_after(oscar)) = True\n\n# Based on the game state and the rules and preferences, does the puffin learn the basics of resource management from the aardvark?\nquestion = learn(puffin, basics_of_resource_management, aardvark)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the carp is not going to respect the kangaroo but the jellyfish rolls the dice for the kangaroo, then you can add that \"the kangaroo is not going to respect the salmon\" to your conclusions\nRule2: The parrot removes one of the pieces of the octopus whenever something eats the food that belongs to the sheep\nRule3: If the cockroach does not know the defensive plans of the kangaroo, then the kangaroo respects the salmon\nRule4: If something does not respect the salmon, then it holds the same number of points as the halibut.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe kudu eats the food of the sheep\nThe carp does not respect the kangaroo\nThe jellyfish does not roll the dice for the kangaroo.\n\nBased on the game state and the rules and preferences, does the kangaroo hold the same number of points as the halibut?\nQuestion: Does the kangaroo hold the same number of points as the halibut?",
        "idx": 128,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the kangaroo, if the belief is that the carp is not going to respect the kangaroo but the jellyfish rolls the dice for the kangaroo, then you can add that \"the kangaroo is not going to respect the salmon\" to your conclusions\nrule1() = not respect(carp, kangaroo) & roll_dice(jellyfish, kangaroo) => add_conclusion(\"the kangaroo is not going to respect the salmon\")\n# Rule2: The parrot removes one of the pieces of the octopus whenever at least one animal eats the food that belongs to the sheep\nrule2() = eat_food(something, food_of(sheep)) => remove_piece(parrot, octopus)\n# Rule3: If the cockroach does not know the defensive plans of the kangaroo, then the kangaroo respects the salmon\nrule3() = not know(cockroach, defensive_plans, kangaroo) => respect(kangaroo, salmon)\n# Rule4: If something does not respect the salmon, then it holds the same number of points as the halibut.\nrule4(something) = not respect(something, salmon) => points(something) == points(halibut)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The kudu eats the food of the sheep\neat_food(kudu, food_of(sheep)) = True\n# The carp does not respect the kangaroo\nrespect(carp, kangaroo) = False\n# The jellyfish does not roll the dice for the kangaroo.\nroll_dice(jellyfish, kangaroo) = False\n\n# Based on the game state and the rules and preferences, does the kangaroo hold the same number of points as the halibut?\nquestion = points(kangaroo) == points(halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something raises a peace flag for the cat, then the gecko burns the warehouse that is in possession of the parrot\nRule2: If the snail created a time machine, then it does not raise a peace flag for the cat\nRule3: If the first letter of the name of the snail is the same as the first letter of the name of the leopard, then the snail raises a peace flag for the cat\nRule4: If the snail has something to sit on, then it raises a peace flag for the cat.\n\nRule3 is preferred over Rule2\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe name of the leopard is Lucy\nThe snail has romaine lettuce\nThe snail invented a time machine\nThe name of the snail is Lola\n\nBased on the game state and the rules and preferences, does the gecko burn the warehouse of the parrot?\nQuestion: Does the gecko burn the warehouse of the parrot?",
        "idx": 129,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal raises a flag of peace for the cat, then the gecko burns the warehouse that is in possession of the parrot\nrule1() = raise_flag_of_peace(something, cat) => burn_warehouse(gecko, warehouse_of(parrot))\n# Rule2: Regarding the snail, if it created a time machine, then we can conclude that it does not raise a flag of peace for the cat\nrule2() = created(snail, time_machine) => not raise_flag_of_peace(snail, cat)\n# Rule3: If the snail has a name whose first letter is the same as the first letter of the leopard's name, then the snail raises a peace flag for the cat\nrule3() = first_letter_of(name(snail)) == first_letter_of(name(leopard)) => raise_flag_of_peace(snail, cat)\n# Rule4: Regarding the snail, if it has something to sit on, then we can conclude that it raises a peace flag for the cat.\nrule4() = has(snail, something_to_sit_on) => raise_flag_of_peace(snail, cat)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The leopard is named Lucy\nname(leopard, Lucy) = True\n# The snail has some romaine lettuce, invented a time machine, and is named Lola.\nhas(snail, romaine_lettuce) = True\ncreated(snail, time_machine) = True\nname(snail, Lola) = True\n\n# Based on the game state and the rules and preferences, does the gecko burn the warehouse of the parrot?\nquestion = burn_warehouse(gecko, warehouse_of(parrot))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The whale will not need the support of the ferret if the doctorfish does not become an enemy of the whale\nRule2: If the first letter of the name of the whale is the same as the first letter of the name of the panda bear, then the whale does not sing a song of victory for the dog\nRule3: If the whale took a bike from the store, then it does not sing a song of victory for the dog\nRule4: If something owes money to the squid, then the whale needs the support of the ferret\nRule5: If something needs the support of the ferret but does not sing a victory song for the dog, then it will not learn elementary resource management from the kudu.\n\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the panda bear is Lola\nThe raven owes money to the squid\nThe name of the whale is Milo\nThe whale stole a bike from the store\nThe doctorfish does not become an enemy of the whale.\n\nBased on the game state and the rules and preferences, does the whale learn the basics of resource management from the kudu?\nQuestion: Does the whale learn the basics of resource management from the kudu?",
        "idx": 130,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The whale will not need the support of the ferret, in the case where the doctorfish does not become an enemy of the whale\nrule1() = not become_enemy(doctorfish, whale) => not need_support(whale, ferret)\n# Rule2: Regarding the whale, if it has a name whose first letter is the same as the first letter of the panda bear's name, then we can conclude that it does not sing a song of victory for the dog\nrule2() = first_letter_of(name(whale)) == first_letter_of(name(panda_bear)) => not sing_song_of_victory(whale, dog)\n# Rule3: Regarding the whale, if it took a bike from the store, then we can conclude that it does not sing a song of victory for the dog\nrule3() = took(whale, bike, store) => not sing_song_of_victory(whale, dog)\n# Rule4: If at least one animal owes money to the squid, then the whale needs the support of the ferret\nrule4() = owes(something, money, squid) => need_support(whale, ferret)\n# Rule5: Be careful when something needs the support of the ferret but does not sing a victory song for the dog because in this case it will, surely, not learn elementary resource management from the kudu (this may or may not be problematic).\nrule5() = need_support(something, ferret) & not sing_song_of_victory(something, dog) => not learn(something, elementary_resource_management_from(kudu))\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The panda bear is named Lola\nname(panda_bear, Lola) = True\n# The raven owes money to the squid\nowes(raven, money, squid) = True\n# The whale is named Milo, and stole a bike from the store\nname(whale, Milo) = True\ntook(whale, bike, store) = True\n# The doctorfish does not become an enemy of the whale.\nbecome_enemy(doctorfish, whale) = False\n\n# Based on the game state and the rules and preferences, does the whale learn the basics of resource management from the kudu?\nquestion = learn(whale, elementary_resource_management_from(kudu))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the donkey has something to sit on, then it respects the squirrel\nRule2: If the first letter of the name of the kangaroo is the same as the first letter of the name of the catfish, then the kangaroo needs the support of the squirrel\nRule3: If the donkey owes money to the squirrel and the kangaroo needs support from the squirrel, then the squirrel becomes an enemy of the kiwi.\n\nThe current state of the game is as follows\nThe name of the catfish is Lola\nThe donkey has a love seat sofa\nThe donkey has 5 friends\nThe name of the donkey is Meadow\nThe name of the kangaroo is Luna\nThe kangaroo offers a job to the eel\nThe kangaroo winks at the kudu\nThe name of the koala is Lucy\n\nBased on the game state and the rules and preferences, does the squirrel become an enemy of the kiwi?\nQuestion: Does the squirrel become an enemy of the kiwi?",
        "idx": 131,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the donkey has something to sit on, then the donkey respects the squirrel\nrule1() = has(donkey, something_to_sit_on) => respect(donkey, squirrel)\n# Rule2: Regarding the kangaroo, if it has a name whose first letter is the same as the first letter of the catfish's name, then we can conclude that it needs the support of the squirrel\nrule2() = first_letter_of(name(kangaroo)) == first_letter_of(name(catfish)) => needs_support(kangaroo, squirrel)\n# Rule3: For the squirrel, if the belief is that the donkey owes $$$ to the squirrel and the kangaroo needs support from the squirrel, then you can add \"the squirrel becomes an enemy of the kiwi\" to your conclusions.\nrule3() = belief(donkey, owes_money, squirrel) & needs_support(kangaroo, squirrel) => become_enemy(squirrel, kiwi)\n\n# The current state of the game is as follows\n# The catfish is named Lola\nname(catfish, Lola) = True\n# The donkey has a love seat sofa\nhas(donkey, love_seat_sofa) = True\n# The donkey has five friends\nfriends(donkey) = 5\n# The donkey is named Meadow\nname(donkey, Meadow) = True\n# The kangaroo is named Luna, and offers a job to the eel\nname(kangaroo, Luna) = True\noffer_job_position(kangaroo, eel) = True\n# The kangaroo winks at the kudu\nwink(kangaroo, kudu) = True\n# The koala is named Lucy.\nname(koala, Lucy) = True\n\n# Based on the game state and the rules and preferences, does the squirrel become an enemy of the kiwi?\nquestion = become_enemy(squirrel, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the polar bear is a fan of Chris Ronaldo, then it does not hold the same number of points as the canary\nRule2: The polar bear holds an equal number of points as the canary whenever at least one animal offers a job to the hippopotamus\nRule3: If something does not wink at the cow, then it does not steal five points from the rabbit\nRule4: If the polar bear has more than 16 friends, then it does not hold the same number of points as the canary\nRule5: If something holds an equal number of points as the canary, then it steals five points from the rabbit.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule5\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe mosquito offers a job to the hippopotamus\nThe polar bear has 7 lazy friends and 3 non-lazy friends.\n\nBased on the game state and the rules and preferences, does the polar bear steal five points from the rabbit?\nQuestion: Does the polar bear steal five points from the rabbit?",
        "idx": 132,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the polar bear, if it is a fan of Chris Ronaldo, then we can conclude that it does not hold the same number of points as the canary\nrule1() = fan(polar_bear, Chris_Ronaldo) => not hold_same_number_of_points(polar_bear, canary)\n# Rule2: The polar bear holds an equal number of points as the canary whenever at least one animal offers a job to the hippopotamus\nrule2() = offer_job_position(something, hippopotamus) => hold_same_number_of_points(polar_bear, canary)\n# Rule3: If something does not wink at the cow, then it does not steal five points from the rabbit\nrule3(something) = not wink(something, cow) => not steal_points(something, 5, rabbit)\n# Rule4: If the polar bear has more than 16 friends, then the polar bear does not hold the same number of points as the canary\nrule4() = friends(polar_bear) > 16 => not hold_same_number_of_points(polar_bear, canary)\n# Rule5: If you are positive that you saw one of the animals holds an equal number of points as the canary, you can be certain that it will also steal five of the points of the rabbit.\nrule5(something) = hold_same_number_of_points(something, canary) => steal_points(something, 5, rabbit)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The mosquito offers a job to the hippopotamus\noffer_job_position(mosquito, hippopotamus) = True\n# The polar bear has 7 friends that are lazy and 3 friends that are not.\nlazy_friends(polar_bear) = 7\nnon_lazy_friends(polar_bear) = 3\n\n# Based on the game state and the rules and preferences, does the polar bear steal five points from the rabbit?\nquestion = steal_points(polar_bear, 5, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The parrot does not know the defense plan of the blobfish whenever at least one animal winks at the buffalo\nRule2: If something does not burn the warehouse of the squid but it needs support from the swordfish, then it winks at the buffalo.\n\nThe current state of the game is as follows\nThe cat needs support from the swordfish but does not burn the warehouse of the squid.\n\nBased on the game state and the rules and preferences, does the parrot know the defensive plans of the blobfish?\nQuestion: Does the parrot know the defensive plans of the blobfish?",
        "idx": 133,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The parrot does not know the defense plan of the blobfish whenever at least one animal winks at the buffalo\nrule1() = wink(something, buffalo) => not know(parrot, defensive_plans, blobfish)\n# Rule2: If you see that something does not burn the warehouse that is in possession of the squid but it needs support from the swordfish, what can you certainly conclude? You can conclude that it also winks at the buffalo.\nrule2(something) = not burn(something, warehouse(squid)) & needs_support(something, swordfish) => wink(something, buffalo)\n\n# The current state of the game is as follows\n# The cat needs support from the swordfish but does not burn the warehouse of the squid.\nneeds_support(cat, swordfish) = True\nnot burn(cat, warehouse(squid)) = True\n\n# Based on the game state and the rules and preferences, does the parrot know the defensive plans of the blobfish?\nquestion = know(parrot, defensive_plans, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the pig rolls the dice for the carp and the doctorfish does not raise a flag of peace for the carp, then you can add \"the carp needs the support of the baboon\" to your conclusions\nRule2: If the bat proceeds to the spot that is right after the spot of the doctorfish, then the doctorfish does not raise a peace flag for the carp\nRule3: If something knocks down the fortress that belongs to the kangaroo but does not remove from the board one of the pieces of the buffalo, then it will roll the dice for the carp.\n\nThe current state of the game is as follows\nThe pig knocks down the fortress of the kangaroo but does not remove from the board one of the pieces of the buffalo\nThe bat does not proceed to the spot right after the doctorfish.\n\nBased on the game state and the rules and preferences, does the carp need support from the baboon?\nQuestion: Does the carp need support from the baboon?",
        "idx": 134,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the carp, if the belief is that the pig rolls the dice for the carp and the doctorfish does not raise a flag of peace for the carp, then you can add \"the carp needs the support of the baboon\" to your conclusions\nrule1() = belief(pig, rolls_dice_for(carp)) & not raise_flag_of_peace(doctorfish, carp) => add_conclusion(\"the carp needs the support of the baboon\")\n# Rule2: The doctorfish does not raise a peace flag for the carp, in the case where the bat proceeds to the spot that is right after the spot of the doctorfish\nrule2() = proceed_to_spot(bat, spot_after(doctorfish)) => not raise_flag_of_peace(doctorfish, carp)\n# Rule3: Be careful when something does not remove from the board one of the pieces of the buffalo but knocks down the fortress that belongs to the kangaroo because in this case it will, surely, roll the dice for the carp (this may or may not be problematic).\nrule3() = not remove_from_board(something, piece_of(buffalo)) & knocks_down(something, fortress_of(kangaroo)) => rolls_dice_for(something, carp)\n\n# The current state of the game is as follows\n# The pig knocks down the fortress of the kangaroo but does not remove from the board one of the pieces of the buffalo\nknocks_down(pig, fortress_of(kangaroo)) = True\nremove_from_board(pig, piece_of(buffalo)) = False\n# The bat does not proceed to the spot right after the doctorfish.\nproceed_to_spot(bat, spot_after(doctorfish)) = False\n\n# Based on the game state and the rules and preferences, does the carp need support from the baboon?\nquestion = \"the carp needs the support of the baboon\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panther does not remove one of the pieces of the eagle from the board, then the eagle will not give a magnifier to the cheetah\nRule2: If something owes money to the leopard, then it owes $$$ to the cheetah, too\nRule3: If the eagle does not give a magnifier to the cheetah but the jellyfish owes money to the cheetah, then the cheetah eats the food that belongs to the cockroach unavoidably.\n\nThe current state of the game is as follows\nThe jellyfish owes money to the leopard\nThe eagle does not become an enemy of the hare\nThe panther does not remove one of the pieces of the eagle from the board\nThe whale does not remove one of the pieces of the jellyfish.\n\nBased on the game state and the rules and preferences, does the cheetah eat the food of the cockroach?\nQuestion: Does the cheetah eat the food of the cockroach?",
        "idx": 135,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The eagle will not give a magnifier to the cheetah, in the case where the panther does not remove from the board one of the pieces of the eagle\nrule1() = not remove(panther, piece, eagle) => not give(eagle, magnifier, cheetah)\n# Rule2: If something owes money to the leopard, then it owes $$$ to the cheetah, too\nrule2(something) = owe(something, money, leopard) => owe(something, $$$, cheetah)\n# Rule3: If the eagle does not give a magnifier to the cheetah but the jellyfish owes money to the cheetah, then the cheetah eats the food that belongs to the cockroach unavoidably.\nrule3() = not give(eagle, magnifier, cheetah) & owe(jellyfish, money, cheetah) => eat(cheetah, food, cockroach)\n\n# The current state of the game is as follows\n# The jellyfish owes money to the leopard\nowe(jellyfish, money, leopard) = True\n# The eagle does not become an enemy of the hare\nbecome_enemy(eagle, hare) = False\n# The panther does not remove from the board one of the pieces of the eagle\nremove(panther, piece, eagle) = False\n# The whale does not remove from the board one of the pieces of the jellyfish.\nremove(whale, piece, jellyfish) = False\n\n# Based on the game state and the rules and preferences, does the cheetah eat the food of the cockroach?\nquestion = eat(cheetah, food, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the oscar has a sharp object, then it knows the defensive plans of the gecko\nRule2: If the oscar supports Chris Ronaldo, then it knows the defensive plans of the gecko\nRule3: If the oscar has more than 3 friends, then it does not give a magnifying glass to the turtle\nRule4: If something knows the defense plan of the gecko but does not give a magnifier to the turtle, then it does not eat the food that belongs to the grizzly bear.\n\nThe current state of the game is as follows\nThe oscar has 3 wise friends and 1 unwise friend\nThe oscar has a cappuccino\nThe oscar supports Chris Ronaldo.\n\nBased on the game state and the rules and preferences, does the oscar eat the food of the grizzly bear?\nQuestion: Does the oscar eat the food of the grizzly bear?",
        "idx": 136,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the oscar, if it has a sharp object, then we can conclude that it knows the defensive plans of the gecko\nrule1() = has(oscar, sharp_object) => knows(oscar, defensive_plans, gecko)\n# Rule2: If the oscar is a fan of Chris Ronaldo, then the oscar knows the defensive plans of the gecko\nrule2() = supports(oscar, Chris_Ronaldo) => knows(oscar, defensive_plans, gecko)\n# Rule3: If the oscar has more than 3 friends, then the oscar does not give a magnifying glass to the turtle\nrule3() = friends(oscar) > 3 => not give(oscar, magnifying_glass, turtle)\n# Rule4: If you see that something knows the defense plan of the gecko but does not give a magnifier to the turtle, what can you certainly conclude? You can conclude that it does not eat the food that belongs to the grizzly bear.\nrule4(something) = knows(something, defensive_plans, gecko) & not give(something, magnifying_glass, turtle) => not eat(something, food_of(grizzly_bear))\n\n# The current state of the game is as follows\n# The oscar has 3 friends that are wise and 1 friend that is not, and has a cappuccino\nwise_friends(oscar) = 3\nunwise_friends(oscar) = 1\nhas(oscar, cappuccino) = True\n# The oscar supports Chris Ronaldo.\nsupports(oscar, Chris_Ronaldo) = True\n\n# Based on the game state and the rules and preferences, does the oscar eat the food of the grizzly bear?\nquestion = eat(oscar, food_of(grizzly_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knows the defense plan of the hummingbird and also sings a victory song for the canary, then it will surely not burn the warehouse of the mosquito.\nRule2: If the zander burns the warehouse of the kudu, then the kudu knows the defense plan of the bat.\nRule3: If at least one animal becomes an enemy of the octopus, then the parrot knows the defense plan of the hummingbird.\nRule4: If something knows the defensive plans of the bat, then the parrot burns the warehouse of the mosquito.\n\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe crocodile becomes an enemy of the octopus\nThe hippopotamus becomes an enemy of the kudu\nThe phoenix attacks the green fields whose owner is the kudu\nThe zander does not burn the warehouse of the kudu.\n\nBased on the game state and the rules and preferences, does the parrot burn the warehouse of the mosquito?\nQuestion: Does the parrot burn the warehouse of the mosquito?",
        "idx": 137,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something knows the defense plan of the hummingbird and also sings a victory song for the canary because in this case it will surely not burn the warehouse of the mosquito (this may or may not be problematic)\nrule1(something) = knows(something, defense_plan, hummingbird) & sings_victory_song(something, canary) => not burn_warehouse(parrot, mosquito)\n# Rule2: The kudu unquestionably knows the defense plan of the bat, in the case where the zander burns the warehouse of the kudu\nrule2() = burn_warehouse(zander, kudu) => knows(kudu, defense_plan, bat)\n# Rule3: If at least one animal becomes an enemy of the octopus, then the parrot knows the defense plan of the hummingbird\nrule3() = becomes_enemy(something, octopus) => knows(parrot, defense_plan, hummingbird)\n# Rule4: The parrot burns the warehouse of the mosquito whenever at least one animal knows the defensive plans of the bat.\nrule4() = knows(something, defense_plan, bat) => burn_warehouse(parrot, mosquito)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The crocodile becomes an enemy of the octopus\nbecomes_enemy(crocodile, octopus) = True\n# The hippopotamus becomes an enemy of the kudu\nbecomes_enemy(hippopotamus, kudu) = True\n# The phoenix attacks the green fields whose owner is the kudu\nattacks(phoenix, green_fields, kudu) = True\n# The zander does not burn the warehouse of the kudu.\nburn_warehouse(zander, kudu) = False\n\n# Based on the game state and the rules and preferences, does the parrot burn the warehouse of the mosquito?\nquestion = burn_warehouse(parrot, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something respects the tilapia, then it rolls the dice for the cockroach\nRule2: If something rolls the dice for the cockroach, then the zander respects the dog\nRule3: If the blobfish steals five points from the salmon and the lion holds the same number of points as the salmon, then the salmon is not going to roll the dice for the cockroach.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe blobfish steals five points from the salmon\nThe lion holds the same number of points as the salmon\nThe salmon respects the tilapia.\n\nBased on the game state and the rules and preferences, does the zander respect the dog?\nQuestion: Does the zander respect the dog?",
        "idx": 138,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals respects the tilapia, you can be certain that it will also roll the dice for the cockroach\nrule1(something) = respects(something, tilapia) => roll_dice(something, cockroach)\n# Rule2: If at least one animal rolls the dice for the cockroach, then the zander respects the dog\nrule2() = roll_dice(something, cockroach) => respects(zander, dog)\n# Rule3: For the salmon, if the belief is that the blobfish steals five of the points of the salmon and the lion holds the same number of points as the salmon, then you can add that \"the salmon is not going to roll the dice for the cockroach\" to your conclusions.\nrule3() = steals(blobfish, 5, points, salmon) & points(lion) == points(salmon) => not roll_dice(salmon, cockroach)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The blobfish steals five points from the salmon\nsteals(blobfish, 5, points, salmon) = True\n# The lion holds the same number of points as the salmon\npoints(lion) == points(salmon) = True\n# The salmon respects the tilapia.\nrespects(salmon, tilapia) = True\n\n# Based on the game state and the rules and preferences, does the zander respect the dog?\nquestion = respects(zander, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The panther will not become an enemy of the raven if the cow does not owe money to the panther\nRule2: The raven does not hold the same number of points as the carp if the panther becomes an enemy of the raven\nRule3: If the panther has a card with a primary color, then it becomes an enemy of the raven\nRule4: If the panther has fewer than two friends, then it becomes an actual enemy of the raven.\n\nRule3 is preferred over Rule1\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe panther has 8 friends\nThe panther has a green card\nThe cow does not owe money to the panther.\n\nBased on the game state and the rules and preferences, does the raven hold the same number of points as the carp?\nQuestion: Does the raven hold the same number of points as the carp?",
        "idx": 139,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The panther will not become an enemy of the raven, in the case where the cow does not owe money to the panther\nrule1() = not owe(cow, money, panther) => not become_enemy(panther, raven)\n# Rule2: The raven does not hold the same number of points as the carp, in the case where the panther becomes an enemy of the raven\nrule2() = become_enemy(panther, raven) => points(raven) != points(carp)\n# Rule3: If the panther has a card with a primary color, then the panther becomes an enemy of the raven\nrule3() = has(panther, card) and color(card) in primary_colors => become_enemy(panther, raven)\n# Rule4: Regarding the panther, if it has fewer than two friends, then we can conclude that it becomes an actual enemy of the raven.\nrule4() = friends(panther) < 2 => become_enemy(panther, raven)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The panther has 8 friends\nfriends(panther) = 8\n# The panther has a card that is green in color\nhas(panther, card) = True\ncolor(card, green) = True\n# The cow does not owe money to the panther.\nowe(cow, money, panther) = False\n\n# Based on the game state and the rules and preferences, does the raven hold the same number of points as the carp?\nquestion = points(raven) == points(carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the doctorfish knocks down the fortress of the pig, then the pig raises a flag of peace for the tilapia\nRule2: If something eats the food of the cat, then it attacks the green fields whose owner is the tilapia, too\nRule3: If the pig raises a peace flag for the tilapia and the canary attacks the green fields of the tilapia, then the tilapia learns the basics of resource management from the tiger.\n\nThe current state of the game is as follows\nThe canary eats the food of the cat\nThe doctorfish prepares armor for the pig.\n\nBased on the game state and the rules and preferences, does the tilapia learn the basics of resource management from the tiger?\nQuestion: Does the tilapia learn the basics of resource management from the tiger?",
        "idx": 140,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the doctorfish knocks down the fortress of the pig, then the pig raises a flag of peace for the tilapia\nrule1() = knocks_down(doctorfish, fortress, pig) => raise_flag_of_peace(pig, tilapia)\n# Rule2: If something eats the food of the cat, then it attacks the green fields whose owner is the tilapia, too\nrule2(something) = eats_food(something, food, cat) => attacks(something, green_fields, owner(tilapia))\n# Rule3: If the pig raises a peace flag for the tilapia and the canary attacks the green fields of the tilapia, then the tilapia learns the basics of resource management from the tiger.\nrule3() = raise_flag_of_peace(pig, tilapia) & attacks(canary, green_fields, owner(tilapia)) => learn(tilapia, basics_of_resource_management, tiger)\n\n# The current state of the game is as follows\n# The canary eats the food of the cat\neats_food(canary, food, cat) = True\n# The doctorfish prepares armor for the pig.\nprepares_armor(doctorfish, pig) = True\n\n# Based on the game state and the rules and preferences, does the tilapia learn the basics of resource management from the tiger?\nquestion = learn(tilapia, basics_of_resource_management, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something becomes an enemy of the squid but does not remove one of the pieces of the dog, then it will steal five points from the mosquito.\nRule2: If something learns elementary resource management from the puffin, then it removes one of the pieces of the dog.\nRule3: If something rolls the dice for the blobfish, then it does not remove one of the pieces of the dog.\nRule4: If the oscar does not remove one of the pieces of the lion and the spider does not raise a peace flag for the lion, then the lion becomes an enemy of the squid.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe lion learns the basics of resource management from the puffin and rolls the dice for the blobfish.\nThe oscar does not remove one of the pieces of the lion.\nThe spider does not raise a peace flag for the lion.\n\nBased on the game state and the rules and preferences, does the lion steal five points from the mosquito?\nQuestion: Does the lion steal five points from the mosquito?",
        "idx": 141,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something becomes an actual enemy of the squid but does not remove from the board one of the pieces of the dog because in this case it will, surely, steal five of the points of the mosquito (this may or may not be problematic)\nrule1(something) = become_enemy(something, squid) & not remove(dog, piece) => steal_points(mosquito, 5)\n# Rule2: If you are positive that you saw one of the animals learns elementary resource management from the puffin, you can be certain that it will also remove one of the pieces of the dog\nrule2(something) = learn(something, elementary_resource_management_from(puffin)) => remove(dog, piece)\n# Rule3: If something rolls the dice for the blobfish, then it does not remove one of the pieces of the dog\nrule3(something) = rolls_dice(something, blobfish) => not remove(dog, piece)\n# Rule4: For the lion, if the belief is that the oscar does not remove from the board one of the pieces of the lion and the spider does not raise a flag of peace for the lion, then you can add \"the lion becomes an enemy of the squid\" to your conclusions.\nrule4() = not remove(oscar, piece, lion) & not raise_flag_of_peace(spider, lion) => become_enemy(lion, squid)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The lion learns the basics of resource management from the puffin, and rolls the dice for the blobfish\nlearn(lion, basics_of_resource_management_from(puffin)) = True\nrolls_dice(lion, blobfish) = True\n# The oscar does not remove from the board one of the pieces of the lion\nnot remove(oscar, piece, lion) = True\n# The spider does not raise a peace flag for the lion.\nnot raise_flag_of_peace(spider, lion) = True\n\n# Based on the game state and the rules and preferences, does the lion steal five points from the mosquito?\nquestion = steal_points(mosquito, 5)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the jellyfish is the same as the first letter of the name of the squid, then the jellyfish does not sing a song of victory for the canary\nRule2: If the jellyfish has a device to connect to the internet, then it does not give a magnifying glass to the halibut\nRule3: If something does not give a magnifying glass to the halibut and also does not sing a victory song for the canary, then it does not offer a job position to the swordfish\nRule4: If the jellyfish has a card and the color of the card is one of the rainbow colors, then it does not sing a victory song for the canary.\n\nThe current state of the game is as follows\nThe jellyfish has a card that is indigo in color\nThe jellyfish has a cell phone\nThe name of the jellyfish is Pashmak\nThe name of the squid is Lucy\n\nBased on the game state and the rules and preferences, does the jellyfish offer a job to the swordfish?\nQuestion: Does the jellyfish offer a job to the swordfish?",
        "idx": 142,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the jellyfish has a name whose first letter is the same as the first letter of the squid's name, then the jellyfish does not sing a song of victory for the canary\nrule1() = first_letter_of(name(jellyfish)) == first_letter_of(name(squid)) => not sing(jellyfish, song_of_victory, canary)\n# Rule2: Regarding the jellyfish, if it has a device to connect to the internet, then we can conclude that it does not give a magnifying glass to the halibut\nrule2() = has(jellyfish, device_to_connect_to_internet) => not give(jellyfish, magnifying_glass, halibut)\n# Rule3: If you see that something does not give a magnifying glass to the halibut and also does not sing a victory song for the canary, what can you certainly conclude? You can conclude that it also does not offer a job position to the swordfish\nrule3(something) = not give(something, magnifying_glass, halibut) & not sing(something, song_of_victory, canary) => not offer_job_position(something, swordfish)\n# Rule4: Regarding the jellyfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not sing a victory song for the canary.\nrule4() = has(jellyfish, card) and color(card) in rainbow_colors => not sing(jellyfish, song_of_victory, canary)\n\n# The current state of the game is as follows\n# The jellyfish has a card that is indigo in color, has a cell phone, and is named Pashmak\nhas(jellyfish, card) = True\ncolor(card, indigo) = True\nhas(jellyfish, cell_phone) = True\nname(jellyfish, Pashmak) = True\n# The squid is named Lucy.\nname(squid, Lucy) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish offer a job to the swordfish?\nquestion = offer_job_position(jellyfish, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not remove from the board one of the pieces of the hummingbird, then it will knock down the fortress of the sea bass without a doubt\nRule2: The sun bear does not remove from the board one of the pieces of the hummingbird whenever something removes from the board one of the pieces of the lobster.\n\nThe current state of the game is as follows\nThe polar bear does not remove from the board one of the pieces of the lobster.\n\nBased on the game state and the rules and preferences, does the sun bear knock down the fortress of the sea bass?\nQuestion: Does the sun bear knock down the fortress of the sea bass?",
        "idx": 143,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not remove from the board one of the pieces of the hummingbird, you can be certain that it will knock down the fortress of the sea bass without a doubt\nrule1(something) = not remove(something, piece, hummingbird) => knock_down_fortress(something, sea_bass)\n# Rule2: The sun bear does not remove from the board one of the pieces of the hummingbird whenever at least one animal removes from the board one of the pieces of the lobster.\nrule2() = remove(something, piece, lobster) => not remove(sun_bear, piece, hummingbird)\n\n# The current state of the game is as follows\n# The polar bear does not remove from the board one of the pieces of the lobster.\nnot remove(polar_bear, piece, lobster) = True\n\n# Based on the game state and the rules and preferences, does the sun bear knock down the fortress of the sea bass?\nquestion = knock_down_fortress(sun_bear, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something prepares armor for the kudu, then it shows all its cards to the lobster\nRule2: If something learns elementary resource management from the starfish and does not remove one of the pieces of the leopard from the board, then it prepares armor for the kudu.\n\nThe current state of the game is as follows\nThe canary has a card that is indigo in color\nThe canary does not remove one of the pieces of the leopard from the board\nThe canary learns the basics of resource management from the starfish.\n\nBased on the game state and the rules and preferences, does the canary show all her cards to the lobster?\nQuestion: Does the canary show all her cards to the lobster?",
        "idx": 144,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals prepares armor for the kudu, you can be certain that it will also show her cards (all of them) to the lobster\nrule1(something) = prepare_armor(something, kudu) => show_cards(something, all, lobster)\n# Rule2: Be careful when something does not remove from the board one of the pieces of the leopard but learns elementary resource management from the starfish because in this case it will, surely, prepare armor for the kudu (this may or may not be problematic).\nrule2(something) = not remove(something, leopard_piece) & learn(something, elementary_resource_management, starfish) => prepare_armor(something, kudu)\n\n# The current state of the game is as follows\n# The canary has a card that is indigo in color, and does not remove from the board one of the pieces of the leopard\nhas(canary, card) = True\ncolor(card, indigo) = True\nnot remove(canary, leopard_piece) = True\n# The canary learns the basics of resource management from the starfish.\nlearn(canary, elementary_resource_management, starfish) = True\n\n# Based on the game state and the rules and preferences, does the canary show all her cards to the lobster?\nquestion = show_cards(canary, all, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo does not learn elementary resource management from the puffin, then the puffin shows her cards (all of them) to the hippopotamus\nRule2: The puffin does not show her cards (all of them) to the hippopotamus whenever at least one animal steals five points from the cricket\nRule3: If something does not burn the warehouse of the blobfish but shows all her cards to the hippopotamus, then it certainly does not show all her cards to the buffalo\nRule4: If at least one animal shows all her cards to the hippopotamus, then the puffin does not burn the warehouse that is in possession of the blobfish.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe kangaroo steals five points from the cricket\nThe panda bear shows all her cards to the hippopotamus\nThe kangaroo does not learn the basics of resource management from the puffin.\n\nBased on the game state and the rules and preferences, does the puffin show all her cards to the buffalo?\nQuestion: Does the puffin show all her cards to the buffalo?",
        "idx": 145,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kangaroo does not learn elementary resource management from the puffin, then the puffin shows her cards (all of them) to the hippopotamus\nrule1() = not learn(kangaroo, elementary_resource_management, puffin) => show_cards(puffin, all, hippopotamus)\n# Rule2: The puffin does not show her cards (all of them) to the hippopotamus whenever at least one animal steals five points from the cricket\nrule2() = steals(something, 5_points, cricket) => not show_cards(puffin, all, hippopotamus)\n# Rule3: Be careful when something does not burn the warehouse of the blobfish but shows all her cards to the hippopotamus because in this case it certainly does not show all her cards to the buffalo (this may or may not be problematic)\nrule3(something) = not burn(something, warehouse, blobfish) & show_cards(something, all, hippopotamus) => not show_cards(something, all, buffalo)\n# Rule4: If at least one animal shows all her cards to the hippopotamus, then the puffin does not burn the warehouse that is in possession of the blobfish.\nrule4() = show_cards(something, all, hippopotamus) => not burn(warehouse, blobfish)\n\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The kangaroo steals five points from the cricket\nsteals(kangaroo, 5_points, cricket) = True\n# The panda bear shows all her cards to the hippopotamus\nshow_cards(panda_bear, all, hippopotamus) = True\n# The kangaroo does not learn the basics of resource management from the puffin.\nlearn(kangaroo, elementary_resource_management, puffin) = False\n\n# Based on the game state and the rules and preferences, does the puffin show all her cards to the buffalo?\nquestion = show_cards(puffin, all, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the oscar has more than 12 friends, then it removes one of the pieces of the octopus\nRule2: If the first letter of the name of the oscar is the same as the first letter of the name of the eel, then the oscar removes one of the pieces of the octopus\nRule3: If something removes one of the pieces of the octopus, then it owes money to the gecko\nRule4: If something needs the support of the salmon, then it does not owe money to the gecko.\n\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe name of the eel is Tessa\nThe oscar has 3 wise friends and 1 non-wise friend\nThe oscar owes money to the swordfish\nThe name of the oscar is Bella\n\nBased on the game state and the rules and preferences, does the oscar owe money to the gecko?\nQuestion: Does the oscar owe money to the gecko?",
        "idx": 146,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the oscar has more than 12 friends, then the oscar removes one of the pieces of the octopus\nrule1() = friends(oscar) > 12 => remove_piece(oscar, octopus)\n# Rule2: Regarding the oscar, if it has a name whose first letter is the same as the first letter of the eel's name, then we can conclude that it removes from the board one of the pieces of the octopus\nrule2() = first_letter_of(name(oscar)) == first_letter_of(name(eel)) => remove_piece(oscar, octopus)\n# Rule3: If something removes from the board one of the pieces of the octopus, then it owes $$$ to the gecko, too\nrule3(something) = remove_piece(something, octopus) => owe(something, money, gecko)\n# Rule4: If something needs the support of the salmon, then it does not owe money to the gecko.\nrule4(something) = needs_support(something, salmon) => not owe(something, money, gecko)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The eel is named Tessa\nname(eel, Tessa) = True\n# The oscar has 3 friends that are wise and one friend that is not, and owes money to the swordfish\nwise_friends(oscar) = 3\nnon_wise_friends(oscar) = 1\nowe(oscar, money, swordfish) = True\n# The oscar is named Bella.\nname(oscar, Bella) = True\n\n# Based on the game state and the rules and preferences, does the oscar owe money to the gecko?\nquestion = owe(oscar, money, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something prepares armor for the cheetah but does not become an enemy of the jellyfish, then it proceeds to the spot that is right after the spot of the snail\nRule2: If the first letter of the name of the squid is the same as the first letter of the name of the pig, then the squid prepares armor for the cheetah\nRule3: If the squid does not have her keys, then it prepares armor for the cheetah\nRule4: If the squid has something to sit on, then it does not become an enemy of the jellyfish\nRule5: If the black bear gives a magnifying glass to the squid and the kiwi does not offer a job position to the squid, then the squid will never prepare armor for the cheetah\nRule6: If the squid has a musical instrument, then it does not become an enemy of the jellyfish\nRule7: If something raises a flag of peace for the spider, then it becomes an actual enemy of the jellyfish, too\nRule8: If something raises a peace flag for the pig, then it will not proceed to the spot right after the snail.\n\nRule5 is preferred over Rule2\nRule5 is preferred over Rule3\nRule7 is preferred over Rule4\nRule7 is preferred over Rule6\nRule8 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the pig is Paco\nThe squid has a tablet\nThe name of the squid is Lola\nThe squid lost her keys\nThe squid has a trumpet\nThe kiwi does not offer a job to the squid.\n\nBased on the game state and the rules and preferences, does the squid proceed to the spot right after the snail?\nQuestion: Does the squid proceed to the spot right after the snail?",
        "idx": 147,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something prepares armor for the cheetah but does not become an enemy of the jellyfish, what can you certainly conclude? You can conclude that it proceeds to the spot that is right after the spot of the snail\nrule1() = prepare_armor(something, cheetah) & not become_enemy(something, jellyfish) => proceed_to_spot(something, right_after(snail))\n# Rule2: If the squid has a name whose first letter is the same as the first letter of the pig's name, then the squid prepares armor for the cheetah\nrule2() = first_letter_of(name(squid)) == first_letter_of(name(pig)) => prepare_armor(squid, cheetah)\n# Rule3: Regarding the squid, if it does not have her keys, then we can conclude that it prepares armor for the cheetah\nrule3() = not has(squid, keys) => prepare_armor(squid, cheetah)\n# Rule4: If the squid has something to sit on, then the squid does not become an enemy of the jellyfish\nrule4() = has(squid, something_to_sit_on) => not become_enemy(squid, jellyfish)\n# Rule5: If the black bear gives a magnifying glass to the squid and the kiwi does not offer a job position to the squid, then the squid will never prepare armor for the cheetah\nrule5() = give(black_bear, magnifying_glass, squid) & not offer_job_position(kiwi, squid) => not prepare_armor(squid, cheetah)\n# Rule6: Regarding the squid, if it has a musical instrument, then we can conclude that it does not become an enemy of the jellyfish\nrule6() = has(squid, musical_instrument) => not become_enemy(squid, jellyfish)\n# Rule7: If something raises a flag of peace for the spider, then it becomes an actual enemy of the jellyfish, too\nrule7(something) = raise_flag_of_peace(something, spider) => become_enemy(something, jellyfish)\n# Rule8: If you are positive that you saw one of the animals raises a peace flag for the pig, you can be certain that it will not proceed to the spot right after the snail.\nrule8() = raise_flag_of_peace(something, pig) => not proceed_to_spot(something, right_after(snail))\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n# Rule8 is preferred over Rule1\norder(rule8) > order(rule1) = True\n\n# The current state of the game is as follows\n# The pig is named Paco\nname(pig, Paco) = True\n# The squid has a tablet, is named Lola, and lost her keys\nhas(squid, tablet) = True\nname(squid, Lola) = True\nlost(squid, keys) = True\n# The squid has a trumpet\nhas(squid, trumpet) = True\n# The kiwi does not offer a job to the squid.\noffer_job_position(kiwi, squid) = False\n\n# Based on the game state and the rules and preferences, does the squid proceed to the spot right after the snail?\nquestion = proceed_to_spot(squid, right_after(snail))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the points of something are equal to the points of the hippopotamus, then the crocodile has the same number of points as the penguin\nRule2: If the pig has a device to connect to the internet, then it removes from the board one of the pieces of the penguin\nRule3: If the first letter of the name of the pig is the same as the first letter of the name of the rabbit, then the pig does not remove one of the pieces of the penguin\nRule4: If the pig has a card and the color of the card is one of the rainbow colors, then the pig removes one of the pieces of the penguin\nRule5: If the crocodile has the same number of points as the penguin and the pig removes from the board one of the pieces of the penguin, then the conclusion is that \"the penguin is not going to eat the food that belongs to the halibut\"\n\nRule2 is preferred over Rule3\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe eel has the same number of points as the hippopotamus\nThe pig has a white card\nThe name of the pig is Lola\nThe pig has a cell phone\nThe name of the rabbit is Lily\n\nBased on the game state and the rules and preferences, does the penguin eat the food of the halibut?\nQuestion: Does the penguin eat the food of the halibut?",
        "idx": 148,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal holds the same number of points as the hippopotamus, then the crocodile holds an equal number of points as the penguin\nrule1(something) = points(something) == points(hippopotamus) => points(crocodile) == points(penguin)\n# Rule2: If the pig has a device to connect to the internet, then the pig removes from the board one of the pieces of the penguin\nrule2() = has(pig, device_to_connect_to_internet) => remove_piece(pig, penguin)\n# Rule3: Regarding the pig, if it has a name whose first letter is the same as the first letter of the rabbit's name, then we can conclude that it does not remove one of the pieces of the penguin\nrule3() = first_letter_of(name(pig)) == first_letter_of(name(rabbit)) => not remove_piece(pig, penguin)\n# Rule4: If the pig has a card whose color is one of the rainbow colors, then the pig removes one of the pieces of the penguin\nrule4() = has(pig, card) and color(card) in rainbow_colors => remove_piece(pig, penguin)\n# Rule5: For the penguin, if the belief is that the crocodile holds the same number of points as the penguin and the pig removes from the board one of the pieces of the penguin, then you can add that \"the penguin is not going to eat the food that belongs to the halibut\" to your conclusions.\nrule5() = points(crocodile) == points(penguin) and remove_piece(pig, penguin) => add_conclusion(\"the penguin is not going to eat the food that belongs to the halibut\")\n\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The eel holds the same number of points as the hippopotamus\npoints(eel) == points(hippopotamus) = True\n# The pig has a card that is white in color, and is named Lola\nhas(pig, card) = True\ncolor(card, white) = True\nname(pig, Lola) = True\n# The pig has a cell phone\nhas(pig, cell_phone) = True\n# The rabbit is named Lily.\nname(rabbit, Lily) = True\n\n# Based on the game state and the rules and preferences, does the penguin eat the food of the halibut?\nquestion = \"the penguin is not going to eat the food that belongs to the halibut\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the puffin does not sing a song of victory for the phoenix, then the phoenix sings a victory song for the rabbit\nRule2: If something offers a job to the panther, then it does not sing a victory song for the phoenix\nRule3: If something offers a job position to the moose but does not show all her cards to the gecko, then it does not sing a victory song for the rabbit\nRule4: If the phoenix has something to sit on, then it shows all her cards to the gecko\nRule5: If the squid knocks down the fortress of the puffin and the crocodile does not know the defensive plans of the puffin, then the puffin sings a song of victory for the phoenix\nRule6: If the phoenix does not have her keys, then it shows all her cards to the gecko\nRule7: If the phoenix has more than six friends, then it does not show all her cards to the gecko.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule7\nRule5 is preferred over Rule2\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe phoenix has a cello\nThe phoenix has 4 lazy friends and 6 active friends\nThe squid rolls the dice for the puffin\nThe puffin does not offer a job to the panther.\n\nBased on the game state and the rules and preferences, does the phoenix sing a victory song for the rabbit?\nQuestion: Does the phoenix sing a victory song for the rabbit?",
        "idx": 149,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the puffin does not sing a song of victory for the phoenix, then the phoenix sings a victory song for the rabbit\nrule1() = not sing(puffin, song_of_victory, phoenix) => sing(phoenix, victory_song, rabbit)\n# Rule2: If something offers a job to the panther, then it does not sing a victory song for the phoenix\nrule2(something) = offer_job_position(something, panther) => not sing(something, victory_song, phoenix)\n# Rule3: If you see that something offers a job position to the moose but does not show all her cards to the gecko, what can you certainly conclude? You can conclude that it does not sing a victory song for the rabbit\nrule3(something) = offer_job_position(something, moose) & not show_all_cards(something, gecko) => not sing(something, victory_song, rabbit)\n# Rule4: If the phoenix has something to sit on, then the phoenix shows all her cards to the gecko\nrule4() = has(phoenix, something_to_sit_on) => show_all_cards(phoenix, gecko)\n# Rule5: If the squid knocks down the fortress of the puffin and the crocodile does not know the defensive plans of the puffin, then, inevitably, the puffin sings a song of victory for the phoenix\nrule5() = knock_down(squid, fortress, puffin) & not know(crocodile, defensive_plans, puffin) => sing(puffin, song_of_victory, phoenix)\n# Rule6: Regarding the phoenix, if it does not have her keys, then we can conclude that it shows her cards (all of them) to the gecko\nrule6() = not has(phoenix, keys) => show_all_cards(phoenix, gecko)\n# Rule7: Regarding the phoenix, if it has more than six friends, then we can conclude that it does not show all her cards to the gecko.\nrule7() = friends(phoenix) > 6 => not show_all_cards(phoenix, gecko)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule7\norder(rule4) > order(rule7) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The phoenix has a cello\nhas(phoenix, cello) = True\n# The phoenix has four friends that are lazy and 6 friends that are not\nlazy_friends(phoenix) = 4\nactive_friends(phoenix) = 6\n# The squid rolls the dice for the puffin\nroll_dice(squid, puffin) = True\n# The puffin does not offer a job to the panther.\noffer_job_position(puffin, panther) = False\n\n# Based on the game state and the rules and preferences, does the phoenix sing a victory song for the rabbit?\nquestion = sing(phoenix, victory_song, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon does not prepare armor for the ferret, then the ferret owes money to the sea bass\nRule2: If something burns the warehouse of the lobster but does not offer a job to the buffalo, then it does not prepare armor for the ferret\nRule3: If the first letter of the name of the baboon is the same as the first letter of the name of the cheetah, then the baboon prepares armor for the ferret.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe baboon burns the warehouse of the lobster but does not offer a job to the buffalo\nThe name of the baboon is Pablo\n\nBased on the game state and the rules and preferences, does the ferret owe money to the sea bass?\nQuestion: Does the ferret owe money to the sea bass?",
        "idx": 150,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the baboon does not prepare armor for the ferret, then the ferret owes $$$ to the sea bass\nrule1() = not prepare_armor(baboon, ferret) => owe(ferret, money, sea_bass)\n# Rule2: Be careful when something does not offer a job to the buffalo but burns the warehouse of the lobster because in this case it certainly does not prepare armor for the ferret (this may or may not be problematic)\nrule2(something) = not offer_job_position(something, buffalo) & burn_warehouse(something, lobster) => not prepare_armor(something, ferret)\n# Rule3: If the baboon has a name whose first letter is the same as the first letter of the cheetah's name, then the baboon prepares armor for the ferret.\nrule3() = first_letter_of(name(baboon)) == first_letter_of(name(cheetah)) => prepare_armor(baboon, ferret)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The baboon burns the warehouse of the lobster but does not offer a job to the buffalo\nburn_warehouse(baboon, lobster) = True\noffer_job_position(baboon, buffalo) = False\n# The baboon is named Pablo.\nname(baboon, Pablo) = True\n\n# Based on the game state and the rules and preferences, does the ferret owe money to the sea bass?\nquestion = owe(ferret, money, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the black bear prepares armor for the cow and the dog does not give a magnifying glass to the cow, then you can add \"the cow does not attack the green fields of the whale\" to your conclusions\nRule2: If the dog has something to drink, then the dog gives a magnifying glass to the cow\nRule3: If something does not roll the dice for the viperfish, then it does not give a magnifying glass to the cow\nRule4: If the dog has a name whose first letter is the same as the first letter of the sea bass's name, then the dog gives a magnifier to the cow\nRule5: The black bear does not prepare armor for the cow, in the case where the mosquito attacks the green fields whose owner is the black bear\nRule6: If something proceeds to the spot that is right after the spot of the penguin and also winks at the caterpillar, then it will surely prepare armor for the cow.\n\nRule2 is preferred over Rule3\nRule4 is preferred over Rule3\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe black bear proceeds to the spot right after the penguin\nThe black bear winks at the caterpillar\nThe name of the dog is Tango\nThe mosquito attacks the green fields whose owner is the black bear\nThe name of the sea bass is Buddy\nThe dog does not roll the dice for the viperfish.\n\nBased on the game state and the rules and preferences, does the cow attack the green fields whose owner is the whale?\nQuestion: Does the cow attack the green fields whose owner is the whale?",
        "idx": 151,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the cow, if the belief is that the black bear prepares armor for the cow and the dog does not give a magnifying glass to the cow, then you can add \"the cow does not attack the green fields of the whale\" to your conclusions\nrule1() = belief(black_bear, prepares_armor, cow) & not give(dog, magnifying_glass, cow) => add_conclusion(\"the cow does not attack the green fields of the whale\")\n# Rule2: If the dog has something to drink, then the dog gives a magnifying glass to the cow\nrule2() = has(dog, drink) => give(dog, magnifying_glass, cow)\n# Rule3: If something does not roll the dice for the viperfish, then it does not give a magnifying glass to the cow\nrule3(something) = not roll_dice(something, viperfish) => not give(something, magnifying_glass, cow)\n# Rule4: If the dog has a name whose first letter is the same as the first letter of the sea bass's name, then the dog gives a magnifier to the cow\nrule4() = first_letter_of(name(dog)) == first_letter_of(name(sea_bass)) => give(dog, magnifying_glass, cow)\n# Rule5: The black bear does not prepare armor for the cow, in the case where the mosquito attacks the green fields whose owner is the black bear\nrule5() = attack(mosquito, green_fields, owner(black_bear)) => not prepare_armor(black_bear, cow)\n# Rule6: Be careful when something proceeds to the spot that is right after the spot of the penguin and also winks at the caterpillar because in this case it will surely prepare armor for the cow (this may or may not be problematic).\nrule6(something) = proceeds_to_spot(something, right_after_spot(penguin)) & winks(something, caterpillar) => prepare_armor(something, cow)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The black bear proceeds to the spot right after the penguin\nproceeds_to_spot(black_bear, right_after_spot(penguin)) = True\n# The black bear winks at the caterpillar\nwinks(black_bear, caterpillar) = True\n# The dog is named Tango\nname(dog, Tango) = True\n# The mosquito attacks the green fields whose owner is the black bear\nattack(mosquito, green_fields, owner(black_bear)) = True\n# The sea bass is named Buddy\nname(sea_bass, Buddy) = True\n# The dog does not roll the dice for the viperfish.\nroll_dice(dog, viperfish) = False\n\n# Based on the game state and the rules and preferences, does the cow attack the green fields whose owner is the whale?\nquestion = attack(cow, green_fields, owner(whale))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale has fewer than 14 friends, then it owes money to the leopard\nRule2: If the ferret gives a magnifying glass to the leopard and the whale owes money to the leopard, then the leopard gives a magnifier to the rabbit\nRule3: The ferret gives a magnifying glass to the leopard, in the case where the parrot does not hold the same number of points as the ferret\nRule4: The leopard does not give a magnifier to the rabbit whenever at least one animal rolls the dice for the dog\nRule5: If the name of the whale starts with the same letter as the name of the blobfish, then the whale owes money to the leopard.\n\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe name of the blobfish is Beauty\nThe ferret has 1 friend\nThe parrot holds the same number of points as the ferret\nThe whale has one wise friend and one non-wise friend\nThe name of the whale is Peddi\n\nBased on the game state and the rules and preferences, does the leopard give a magnifier to the rabbit?\nQuestion: Does the leopard give a magnifier to the rabbit?",
        "idx": 152,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the whale has fewer than 14 friends, then the whale owes money to the leopard\nrule1() = friends(whale) < 14 => owe(whale, money, leopard)\n# Rule2: If the ferret gives a magnifying glass to the leopard and the whale owes $$$ to the leopard, then the leopard gives a magnifier to the rabbit\nrule2() = give(ferret, magnifying_glass, leopard) & owe(whale, money, leopard) => give(leopard, magnifier, rabbit)\n# Rule3: The ferret unquestionably gives a magnifying glass to the leopard, in the case where the parrot does not hold the same number of points as the ferret\nrule3() = not points(parrot) == points(ferret) => give(ferret, magnifying_glass, leopard)\n# Rule4: The leopard does not give a magnifier to the rabbit whenever at least one animal rolls the dice for the dog\nrule4() = roll_dice(something, dog) => not give(leopard, magnifier, rabbit)\n# Rule5: Regarding the whale, if it has a name whose first letter is the same as the first letter of the blobfish's name, then we can conclude that it owes money to the leopard.\nrule5() = first_letter_of(name(whale)) == first_letter_of(name(blobfish)) => owe(whale, money, leopard)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The blobfish is named Beauty\nname(blobfish, Beauty) = True\n# The ferret has 1 friend\nfriends(ferret) = 1\n# The parrot holds the same number of points as the ferret\npoints(parrot) == points(ferret) = True\n# The whale has one friend that is wise and one friend that is not\nwise_friends(whale) = 1\nnon_wise_friends(whale) = 1\n# The whale is named Peddi\nname(whale, Peddi) = True\n\n# Based on the game state and the rules and preferences, does the leopard give a magnifier to the rabbit?\nquestion = give(leopard, magnifier, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If an animal does not offer a job to the bat, then it will remove one of the pieces of the koala.\nRule2: If the hummingbird gives a magnifying glass to the leopard and the gecko offers a job to the leopard, then the leopard will not offer a job to the bat.\n\nThe current state of the game is as follows\nThe gecko offers a job to the leopard\nThe hummingbird gives a magnifying glass to the leopard\n\nBased on the game state and the rules and preferences, does the leopard remove from the board one of the pieces of the koala?\nQuestion: Does the leopard remove from the board one of the pieces of the koala?",
        "idx": 153,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not offer a job to the bat, you can be certain that it will remove one of the pieces of the koala without a doubt\nrule1(something) = not offer_job_position(something, bat) => remove_piece(leopard, koala)\n# Rule2: If the hummingbird gives a magnifier to the leopard and the gecko offers a job to the leopard, then the leopard will not offer a job to the bat.\nrule2() = give(hummingbird, magnifier, leopard) & offer_job_position(gecko, leopard) => not offer_job_position(leopard, bat)\n\n# The current state of the game is as follows\n# The gecko offers a job to the leopard\noffer_job_position(gecko, leopard) = True\n# The hummingbird gives a magnifier to the leopard\n# Background information: magnifier is the same as magnifying glass\ngive(hummingbird, magnifying_glass, leopard) = True\n\n# Based on the game state and the rules and preferences, does the leopard remove from the board one of the pieces of the koala?\nquestion = remove_piece(leopard, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something raises a flag of peace for the octopus, then the squirrel does not proceed to the spot that is right after the spot of the caterpillar\nRule2: If the squirrel has a card whose color appears in the flag of Italy, then the squirrel does not show her cards to the wolverine\nRule3: If the squirrel has a sharp object, then the squirrel does not show all her cards to the wolverine\nRule4: If the first letter of the name of the squirrel is the same as the first letter of the name of the doctorfish, then the squirrel does not eat the food of the swordfish\nRule5: If something becomes an enemy of the cockroach, then the dog raises a flag of peace for the octopus\nRule6: If something does not show all her cards to the wolverine and also does not eat the food of the swordfish, then it proceeds to the spot that is right after the spot of the caterpillar.\n\nRule1 is preferred over Rule6\n\nThe current state of the game is as follows\nThe name of the doctorfish is Chickpea\nThe eagle becomes an enemy of the cockroach\nThe squirrel has a green card, a love seat sofa, and a saxophone\nThe name of the squirrel is Casper\nThe squirrel owns a luxury aircraft.\n\nBased on the game state and the rules and preferences, does the squirrel proceed to the spot right after the caterpillar?\nQuestion: Does the squirrel proceed to the spot right after the caterpillar?",
        "idx": 154,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal raises a flag of peace for the octopus, then the squirrel does not proceed to the spot that is right after the spot of the caterpillar\nrule1() = raise_flag_of_peace(something, octopus) => not proceed(squirrel, spot_right_after(caterpillar))\n# Rule2: If the squirrel has a card whose color appears in the flag of Italy, then the squirrel does not show her cards (all of them) to the wolverine\nrule2() = has(squirrel, card) and color(card) in flag_of_Italy_colors => not show_cards(squirrel, wolverine)\n# Rule3: If the squirrel has a sharp object, then the squirrel does not show all her cards to the wolverine\nrule3() = has(squirrel, sharp_object) => not show_cards(squirrel, wolverine)\n# Rule4: If the squirrel has a name whose first letter is the same as the first letter of the doctorfish's name, then the squirrel does not eat the food of the swordfish\nrule4() = first_letter_of(name(squirrel)) == first_letter_of(name(doctorfish)) => not eat_food(squirrel, food_of(swordfish))\n# Rule5: If at least one animal becomes an actual enemy of the cockroach, then the dog raises a flag of peace for the octopus\nrule5() = become_enemy(something, cockroach) => raise_flag_of_peace(dog, octopus)\n# Rule6: If you see that something does not show all her cards to the wolverine and also does not eat the food of the swordfish, what can you certainly conclude? You can conclude that it also proceeds to the spot that is right after the spot of the caterpillar.\nrule6(something) = not show_cards(something, wolverine) & not eat_food(something, food_of(swordfish)) => proceed(something, spot_right_after(caterpillar))\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n\n# The current state of the game is as follows\n# The doctorfish is named Chickpea\nname(doctorfish, Chickpea) = True\n# The eagle becomes an enemy of the cockroach\nbecome_enemy(eagle, cockroach) = True\n# The squirrel has a card that is green in color, has a love seat sofa, and has a saxophone\nhas(squirrel, card) = True\ncolor(card, green) = True\nhas(squirrel, love_seat_sofa) = True\nhas(squirrel, saxophone) = True\n# The squirrel is named Casper, and purchased a luxury aircraft.\nname(squirrel, Casper) = True\nowns(squirrel, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the squirrel proceed to the spot right after the caterpillar?\nquestion = proceed(squirrel, spot_right_after(caterpillar))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the gecko has a card whose color starts with the letter \"n\", then it does not show all her cards to the cricket\nRule2: If the first letter of the name of the gecko is the same as the first letter of the name of the lion, then the gecko does not show all her cards to the cricket\nRule3: If something proceeds to the spot right after the parrot but does not offer a job to the grasshopper, then it shows all her cards to the cricket\nRule4: If the hummingbird eats the food of the buffalo and the phoenix prepares armor for the buffalo, then the buffalo burns the warehouse that is in possession of the cricket\nRule5: If the sea bass prepares armor for the buffalo, then the buffalo is not going to burn the warehouse of the cricket\nRule6: If the buffalo respects the cricket, then the cricket offers a job to the starfish.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe gecko has a card that is indigo in color, is named Lily, and does not offer a job to the grasshopper\nThe hummingbird eats the food of the buffalo\nThe lion is named Beauty\nThe phoenix prepares armor for the buffalo.\n\nBased on the game state and the rules and preferences, does the cricket offer a job to the starfish?\nQuestion: Does the cricket offer a job to the starfish?",
        "idx": 155,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the gecko has a card whose color starts with the letter \"n\", then the gecko does not show all her cards to the cricket\nrule1() = starts_with(color(card, \"n\")) => not show_all_cards(gecko, cricket)\n# Rule2: Regarding the gecko, if it has a name whose first letter is the same as the first letter of the lion's name, then we can conclude that it does not show her cards (all of them) to the cricket\nrule2() = first_letter_of(name(gecko)) == first_letter_of(name(lion)) => not show_all_cards(gecko, cricket)\n# Rule3: If you see that something proceeds to the spot right after the parrot but does not offer a job to the grasshopper, what can you certainly conclude? You can conclude that it shows her cards (all of them) to the cricket\nrule3(something) = spot_after(parrot, something) & not offer_job_position(something, grasshopper) => show_all_cards(something, cricket)\n# Rule4: For the buffalo, if the belief is that the hummingbird eats the food that belongs to the buffalo and the phoenix prepares armor for the buffalo, then you can add \"the buffalo burns the warehouse that is in possession of the cricket\" to your conclusions\nrule4() = eat_food(hummingbird, food_of(buffalo)) & prepare_armor(phoenix, buffalo) => burn_warehouse(buffalo, cricket)\n# Rule5: If the sea bass prepares armor for the buffalo, then the buffalo is not going to burn the warehouse of the cricket\nrule5() = prepare_armor(sea_bass, buffalo) => not burn_warehouse(buffalo, cricket)\n# Rule6: If the buffalo respects the cricket, then the cricket offers a job to the starfish.\nrule6() = respect(buffalo, cricket) => offer_job_position(cricket, starfish)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The gecko has a card that is indigo in color, is named Lily, and does not offer a job to the grasshopper\nhas(gecko, card) = True\ncolor(card, indigo) = True\nname(gecko, Lily) = True\nnot offer_job_position(gecko, grasshopper) = True\n# The hummingbird eats the food of the buffalo\neat_food(hummingbird, food_of(buffalo)) = True\n# The lion is named Beauty\nname(lion, Beauty) = True\n# The phoenix prepares armor for the buffalo.\nprepare_armor(phoenix, buffalo) = True\n\n# Based on the game state and the rules and preferences, does the cricket offer a job to the starfish?\nquestion = offer_job_position(cricket, starfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the hare is the same as the first letter of the name of the tilapia, then the hare raises a flag of peace for the halibut\nRule2: If the hare has a sharp object, then the hare raises a flag of peace for the halibut\nRule3: The halibut does not become an enemy of the grizzly bear if the moose holds an equal number of points as the halibut\nRule4: The halibut becomes an enemy of the grizzly bear if the hare raises a peace flag for the halibut\nRule5: If the moose has a musical instrument, then the moose holds the same number of points as the halibut.\n\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe hare has 1 loyal friend and 1 disloyal friend\nThe hare has a green tea\nThe name of the hare is Max\nThe moose has a violin\nThe name of the tilapia is Meadow.\n\nBased on the game state and the rules and preferences, does the halibut become an enemy of the grizzly bear?\nQuestion: Does the halibut become an enemy of the grizzly bear?",
        "idx": 156,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hare has a name whose first letter is the same as the first letter of the tilapia's name, then the hare raises a flag of peace for the halibut\nrule1() = first_letter_of(name(hare)) == first_letter_of(name(tilapia)) => raise_flag_of_peace(hare, halibut)\n# Rule2: If the hare has a sharp object, then the hare raises a flag of peace for the halibut\nrule2() = has(hare, sharp_object) => raise_flag_of_peace(hare, halibut)\n# Rule3: The halibut does not become an enemy of the grizzly bear, in the case where the moose holds an equal number of points as the halibut\nrule3() = points(moose) == points(halibut) => not become_enemy(halibut, grizzly_bear)\n# Rule4: The halibut unquestionably becomes an actual enemy of the grizzly bear, in the case where the hare raises a peace flag for the halibut\nrule4() = raise_flag_of_peace(hare, halibut) => become_enemy(halibut, grizzly_bear)\n# Rule5: If the moose has a musical instrument, then the moose holds the same number of points as the halibut.\nrule5() = has(moose, musical_instrument) => points(moose) == points(halibut)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The hare has 1 friend that is loyal and 1 friend that is not, and has a green tea\nloyal_friends(hare) = 1\ndisloyal_friends(hare) = 1\nhas(hare, green_tea) = True\n# The hare is named Max\nname(hare, Max) = True\n# The moose has a violin\nhas(moose, violin) = True\n# The tilapia is named Meadow.\nname(tilapia, Meadow) = True\n\n# Based on the game state and the rules and preferences, does the halibut become an enemy of the grizzly bear?\nquestion = become_enemy(halibut, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon has something to sit on, then it attacks the green fields whose owner is the gecko\nRule2: If the tilapia does not owe money to the cow, then the cow does not hold the same number of points as the ferret\nRule3: If the tilapia has a card whose color appears in the flag of France, then it does not owe money to the cow\nRule4: If the tilapia has a device to connect to the internet, then it does not owe money to the cow.\n\nThe current state of the game is as follows\nThe baboon has a love seat sofa\nThe tilapia has a white card\nThe tilapia has a cello.\n\nBased on the game state and the rules and preferences, does the cow hold the same number of points as the ferret?\nQuestion: Does the cow hold the same number of points as the ferret?",
        "idx": 157,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the baboon has something to sit on, then the baboon attacks the green fields whose owner is the gecko\nrule1() = has(baboon, something_to_sit_on) => attack(baboon, green_fields, owner(gecko))\n# Rule2: If the tilapia does not owe money to the cow, then the cow does not hold the same number of points as the ferret\nrule2() = not owe(tilapia, money, cow) => points(cow) != points(ferret)\n# Rule3: Regarding the tilapia, if it has a card whose color appears in the flag of France, then we can conclude that it does not owe money to the cow\nrule3() = has(tilapia, card) and color(card) in flag_of_france_colors => not owe(tilapia, money, cow)\n# Rule4: Regarding the tilapia, if it has a device to connect to the internet, then we can conclude that it does not owe money to the cow.\nrule4() = has(tilapia, device_to_connect_to_internet) => not owe(tilapia, money, cow)\n\n# The current state of the game is as follows\n# The baboon has a love seat sofa\nhas(baboon, love_seat_sofa) = True\n# The tilapia has a card that is white in color\nhas(tilapia, card) = True\ncolor(card, white) = True\n# The tilapia has a cello.\nhas(tilapia, cello) = True\n\n# Based on the game state and the rules and preferences, does the cow hold the same number of points as the ferret?\nquestion = points(cow) == points(ferret)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the rabbit has more than three friends, then it offers a job position to the kangaroo\nRule2: If the rabbit has something to sit on, then it does not offer a job position to the kangaroo\nRule3: The viperfish sings a victory song for the sea bass whenever at least one animal knows the defense plan of the kangaroo\nRule4: The viperfish does not sing a song of victory for the sea bass, in the case where the mosquito holds an equal number of points as the viperfish\nRule5: If the rabbit has a card whose color starts with the letter \"i\", then it offers a job to the kangaroo.\n\nRule2 is preferred over Rule1\nRule2 is preferred over Rule5\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe rabbit has a violet card\nThe rabbit has 4 kind friends\nThe rabbit has 4 non-kind friends\n\nBased on the game state and the rules and preferences, does the viperfish sing a victory song for the sea bass?\nQuestion: Does the viperfish sing a victory song for the sea bass?",
        "idx": 158,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the rabbit, if it has more than three friends, then we can conclude that it offers a job position to the kangaroo\nrule1() = friends(rabbit) > 3 => offer_job_position(rabbit, kangaroo)\n# Rule2: If the rabbit has something to sit on, then the rabbit does not offer a job position to the kangaroo\nrule2() = has(rabbit, something_to_sit_on) => not offer_job_position(rabbit, kangaroo)\n# Rule3: The viperfish sings a victory song for the sea bass whenever at least one animal knows the defense plan of the kangaroo\nrule3() = knows(something, defense_plan, kangaroo) => sing_victory_song(viperfish, sea_bass)\n# Rule4: The viperfish does not sing a song of victory for the sea bass, in the case where the mosquito holds an equal number of points as the viperfish\nrule4() = points(mosquito) == points(viperfish) => not sing_victory_song(viperfish, sea_bass)\n# Rule5: If the rabbit has a card whose color starts with the letter \"i\", then the rabbit offers a job to the kangaroo.\nrule5() = has(rabbit, card) and starts_with(color(card), \"i\") => offer_job_position(rabbit, kangaroo)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The rabbit has a card that is violet in color\nhas(rabbit, card) = True\ncolor(card, violet) = True\n# The rabbit has four friends that are kind and four friends that are not.\nkind_friends(rabbit) = 4\nnon_kind_friends(rabbit) = 4\n\n# Based on the game state and the rules and preferences, does the viperfish sing a victory song for the sea bass?\nquestion = sing_victory_song(viperfish, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sun bear has a musical instrument, then it sings a victory song for the penguin\nRule2: If something sings a song of victory for the penguin, then it respects the hare, too\nRule3: If the sun bear has something to carry apples and oranges, then it does not sing a song of victory for the penguin.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe sun bear has a backpack\nThe sun bear has a flute.\n\nBased on the game state and the rules and preferences, does the sun bear respect the hare?\nQuestion: Does the sun bear respect the hare?",
        "idx": 159,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sun bear has a musical instrument, then the sun bear sings a victory song for the penguin\nrule1() = has(sun_bear, musical_instrument) => sings(sun_bear, victory_song, penguin)\n# Rule2: If something sings a song of victory for the penguin, then it respects the hare, too\nrule2(something) = sings(something, victory_song, penguin) => respects(something, hare)\n# Rule3: Regarding the sun bear, if it has something to carry apples and oranges, then we can conclude that it does not sing a song of victory for the penguin.\nrule3() = has(sun_bear, something_to_carry_apples_and_oranges) => not sings(sun_bear, victory_song, penguin)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The sun bear has a backpack\nhas(sun_bear, backpack) = True\n# The sun bear has a flute.\nhas(sun_bear, flute) = True\n\n# Based on the game state and the rules and preferences, does the sun bear respect the hare?\nquestion = respects(sun_bear, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the polar bear is the same as the first letter of the name of the cricket, then the polar bear does not know the defensive plans of the eagle\nRule2: If the spider does not respect the cricket, then the cricket does not raise a flag of peace for the eagle\nRule3: If the polar bear is not going to know the defense plan of the eagle but the cricket raises a flag of peace for the eagle, then the eagle is not going to knock down the fortress of the gecko\nRule4: If something attacks the green fields whose owner is the catfish, then it knocks down the fortress of the gecko, too\nRule5: If the cricket has a card whose color appears in the flag of Italy, then the cricket raises a flag of peace for the eagle\nRule6: If the cricket has a leafy green vegetable, then it raises a flag of peace for the eagle\nRule7: If the polar bear has fewer than six friends, then it does not know the defense plan of the eagle.\n\nRule2 is preferred over Rule5\nRule2 is preferred over Rule6\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cricket has a blue card and some kale\nThe name of the cricket is Max\nThe polar bear has 13 friends and is named Mojo.\n\nBased on the game state and the rules and preferences, does the eagle knock down the fortress of the gecko?\nQuestion: Does the eagle knock down the fortress of the gecko?",
        "idx": 160,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the polar bear has a name whose first letter is the same as the first letter of the cricket's name, then the polar bear does not know the defensive plans of the eagle\nrule1() = first_letter_of(name(polar_bear)) == first_letter_of(name(cricket)) => not know(polar_bear, defensive_plans, eagle)\n# Rule2: If the spider does not respect the cricket, then the cricket does not raise a flag of peace for the eagle\nrule2() = not respect(spider, cricket) => not raise_flag_of_peace(cricket, eagle)\n# Rule3: For the eagle, if the belief is that the polar bear is not going to know the defense plan of the eagle but the cricket raises a flag of peace for the eagle, then you can add that \"the eagle is not going to knock down the fortress of the gecko\" to your conclusions\nrule3() = not know(polar_bear, defensive_plans, eagle) & raise_flag_of_peace(cricket, eagle) => add_conclusion(eagle, \"the eagle is not going to knock down the fortress of the gecko\")\n# Rule4: If something attacks the green fields whose owner is the catfish, then it knocks down the fortress of the gecko, too\nrule4() = attack(something, green_fields_of(catfish)) => knock_down_fortress(something, gecko)\n# Rule5: If the cricket has a card whose color appears in the flag of Italy, then the cricket raises a flag of peace for the eagle\nrule5() = has(cricket, card) and color(card) in colors_of_italian_flag => raise_flag_of_peace(cricket, eagle)\n# Rule6: Regarding the cricket, if it has a leafy green vegetable, then we can conclude that it raises a flag of peace for the eagle\nrule6() = has(cricket, leafy_green_vegetable) => raise_flag_of_peace(cricket, eagle)\n# Rule7: If the polar bear has fewer than six friends, then the polar bear does not know the defense plan of the eagle.\nrule7() = friends(polar_bear) < 6 => not know(polar_bear, defensive_plans, eagle)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cricket has a card that is blue in color, and has some kale\nhas(cricket, card) = True\ncolor(card, blue) = True\nhas(cricket, kale) = True\n# The cricket is named Max\nname(cricket, Max) = True\n# The polar bear has 13 friends, and is named Mojo.\nfriends(polar_bear) = 13\nname(polar_bear, Mojo) = True\n\n# Based on the game state and the rules and preferences, does the eagle knock down the fortress of the gecko?\nquestion = knock_down_fortress(eagle, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the carp starts with the same letter as the name of the ferret, then the carp becomes an enemy of the hare\nRule2: If the carp does not become an enemy of the hare, then the hare respects the cheetah.\n\nThe current state of the game is as follows\nThe name of the carp is Milo\nThe name of the ferret is Max.\n\nBased on the game state and the rules and preferences, does the hare respect the cheetah?\nQuestion: Does the hare respect the cheetah?",
        "idx": 161,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the carp, if it has a name whose first letter is the same as the first letter of the ferret's name, then we can conclude that it becomes an enemy of the hare\nrule1() = first_letter_of(name(carp)) == first_letter_of(name(ferret)) => become_enemy(carp, hare)\n# Rule2: If the carp does not become an enemy of the hare, then the hare respects the cheetah.\nrule2() = not become_enemy(carp, hare) => respect(hare, cheetah)\n\n# The current state of the game is as follows\n# The carp is named Milo\nname(carp, Milo) = True\n# The ferret is named Max.\nname(ferret, Max) = True\n\n# Based on the game state and the rules and preferences, does the hare respect the cheetah?\nquestion = respect(hare, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the salmon is the same as the first letter of the name of the penguin, then the salmon knocks down the fortress of the sea bass\nRule2: If the salmon has something to carry apples and oranges, then it does not knock down the fortress that belongs to the sea bass\nRule3: If the salmon has something to drink, then it knocks down the fortress of the sea bass\nRule4: If something knocks down the fortress of the sea bass, then it removes from the board one of the pieces of the carp\nRule5: If the salmon has fewer than three friends, then it does not knock down the fortress that belongs to the sea bass.\n\nRule2 is preferred over Rule1\nRule2 is preferred over Rule3\nRule5 is preferred over Rule1\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe name of the penguin is Pablo\nThe salmon has 9 friends\nThe salmon has some romaine lettuce\nThe name of the salmon is Peddi\n\nBased on the game state and the rules and preferences, does the salmon remove from the board one of the pieces of the carp?\nQuestion: Does the salmon remove from the board one of the pieces of the carp?",
        "idx": 162,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the salmon, if it has a name whose first letter is the same as the first letter of the penguin's name, then we can conclude that it knocks down the fortress of the sea bass\nrule1() = first_letter_of(name(salmon)) == first_letter_of(name(penguin)) => knock_down_fortress(salmon, sea_bass)\n# Rule2: Regarding the salmon, if it has something to carry apples and oranges, then we can conclude that it does not knock down the fortress that belongs to the sea bass\nrule2() = has(salmon, something_to_carry(apples, oranges)) => not knock_down_fortress(salmon, sea_bass)\n# Rule3: Regarding the salmon, if it has something to drink, then we can conclude that it knocks down the fortress of the sea bass\nrule3() = has(salmon, drink) => knock_down_fortress(salmon, sea_bass)\n# Rule4: If you are positive that you saw one of the animals knocks down the fortress of the sea bass, you can be certain that it will also remove from the board one of the pieces of the carp\nrule4(something) = knock_down_fortress(something, sea_bass) => remove_from_board(something, piece_of(carp))\n# Rule5: Regarding the salmon, if it has fewer than three friends, then we can conclude that it does not knock down the fortress that belongs to the sea bass.\nrule5() = friends(salmon) < 3 => not knock_down_fortress(salmon, sea_bass)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The penguin is named Pablo\nname(penguin, Pablo) = True\n# The salmon has 9 friends, and has some romaine lettuce\nfriends(salmon) = 9\nhas(salmon, romaine_lettuce) = True\n# The salmon is named Peddi.\nname(salmon, Peddi) = True\n\n# Based on the game state and the rules and preferences, does the salmon remove from the board one of the pieces of the carp?\nquestion = remove_from_board(salmon, piece_of(carp))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something winks at the whale but does not knock down the fortress that belongs to the kiwi, then it does not owe money to the phoenix.\nRule2: If the salmon killed the mayor, then it winks at the whale\nRule3: If the salmon has a card whose color starts with the letter \"b\", then it does not knock down the fortress that belongs to the kiwi.\n\nThe current state of the game is as follows\nThe salmon assassinated the mayor\nThe salmon has a card that is black in color.\n\nBased on the game state and the rules and preferences, does the salmon owe money to the phoenix?\nQuestion: Does the salmon owe money to the phoenix?",
        "idx": 163,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something winks at the whale but does not knock down the fortress that belongs to the kiwi because in this case it will, surely, not owe money to the phoenix (this may or may not be problematic)\nrule1(something) = winks(something, whale) & not knock_down(something, fortress, kiwi) => not owe(something, money, phoenix)\n# Rule2: Regarding the salmon, if it killed the mayor, then we can conclude that it winks at the whale\nrule2() = killed(salmon, mayor) => winks(salmon, whale)\n# Rule3: If the salmon has a card whose color starts with the letter \"b\", then the salmon does not knock down the fortress that belongs to the kiwi.\nrule3() = has(salmon, card) & starts_with(color(card), \"b\") => not knock_down(salmon, fortress, kiwi)\n\n# The current state of the game is as follows\n# The salmon assassinated the mayor\nkilled(salmon, mayor) = True\n# The salmon has a card that is black in color.\nhas(salmon, card) = True\ncolor(card, black) = True\n\n# Based on the game state and the rules and preferences, does the salmon owe money to the phoenix?\nquestion = owe(salmon, money, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the dog has a high salary, then it does not owe money to the puffin\nRule2: If the snail created a time machine, then it does not raise a peace flag for the puffin\nRule3: If something eats the food of the buffalo, then the dog owes money to the puffin\nRule4: If the snail does not become an actual enemy of the puffin but the dog owes money to the puffin, then the puffin knocks down the fortress of the viperfish unavoidably.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe moose eats the food of the buffalo\nThe snail invented a time machine and did not steal five points from the canary\nThe snail does not proceed to the spot right after the hummingbird.\n\nBased on the game state and the rules and preferences, does the puffin knock down the fortress of the viperfish?\nQuestion: Does the puffin knock down the fortress of the viperfish?",
        "idx": 164,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the dog has a high salary, then the dog does not owe $$$ to the puffin\nrule1() = has_high_salary(dog) => not owe(dog, $$$, puffin)\n# Rule2: If the snail created a time machine, then the snail does not raise a peace flag for the puffin\nrule2() = created(snail, time_machine) => not raise_flag_of_peace(snail, puffin)\n# Rule3: If at least one animal eats the food that belongs to the buffalo, then the dog owes money to the puffin\nrule3() = eat_food(something, food_of(buffalo)) => owe(dog, money, puffin)\n# Rule4: If the snail does not become an actual enemy of the puffin but the dog owes $$$ to the puffin, then the puffin knocks down the fortress of the viperfish unavoidably.\nrule4() = not become_enemy(snail, puffin) & owe(dog, $$$, puffin) => knock_down_fortress(puffin, viperfish)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The moose eats the food of the buffalo\neat_food(moose, food_of(buffalo)) = True\n# The snail invented a time machine, and does not steal five points from the canary\ninvent(snail, time_machine) = True\nnot_steal(snail, 5_points, canary) = True\n# The snail does not proceed to the spot right after the hummingbird.\nnot_proceed(snail, spot_right_after(hummingbird)) = True\n\n# Based on the game state and the rules and preferences, does the puffin knock down the fortress of the viperfish?\nquestion = knock_down_fortress(puffin, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the rabbit offers a job position to the squirrel and the cheetah proceeds to the spot right after the squirrel, then the squirrel offers a job to the canary\nRule2: If the rabbit has a sharp object, then the rabbit offers a job to the squirrel\nRule3: If the sea bass respects the cheetah, then the cheetah proceeds to the spot that is right after the spot of the squirrel\nRule4: If the rabbit does not have her keys, then the rabbit offers a job to the squirrel.\n\nThe current state of the game is as follows\nThe rabbit has some arugula\nThe rabbit lost her keys\nThe sea bass respects the cheetah.\n\nBased on the game state and the rules and preferences, does the squirrel offer a job to the canary?\nQuestion: Does the squirrel offer a job to the canary?",
        "idx": 165,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the rabbit offers a job position to the squirrel and the cheetah proceeds to the spot right after the squirrel, then the squirrel offers a job to the canary\nrule1() = offer_job_position(rabbit, squirrel) & proceed_to_spot(cheetah, right_after(squirrel)) => offer_job_position(squirrel, canary)\n# Rule2: If the rabbit has a sharp object, then the rabbit offers a job to the squirrel\nrule2() = has(rabbit, sharp_object) => offer_job_position(rabbit, squirrel)\n# Rule3: If the sea bass respects the cheetah, then the cheetah proceeds to the spot that is right after the spot of the squirrel\nrule3() = respect(sea_bass, cheetah) => proceed_to_spot(cheetah, right_after(squirrel))\n# Rule4: If the rabbit does not have her keys, then the rabbit offers a job to the squirrel.\nrule4() = not has(rabbit, keys) => offer_job_position(rabbit, squirrel)\n\n# The current state of the game is as follows\n# The rabbit has some arugula\nhas(rabbit, arugula) = True\n# The rabbit lost her keys\nhas(rabbit, keys) = False\n# The sea bass respects the cheetah.\nrespect(sea_bass, cheetah) = True\n\n# Based on the game state and the rules and preferences, does the squirrel offer a job to the canary?\nquestion = offer_job_position(squirrel, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the viperfish, then the black bear does not learn elementary resource management from the cheetah\nRule2: If the cockroach has a card and the color of the card starts with the letter \"o\", then the cockroach rolls the dice for the viperfish\nRule3: If the cockroach has a high salary, then the cockroach rolls the dice for the viperfish.\n\nThe current state of the game is as follows\nThe cockroach has a card that is orange in color\nThe cockroach has a low-income job\nThe tiger does not respect the cockroach.\n\nBased on the game state and the rules and preferences, does the black bear learn the basics of resource management from the cheetah?\nQuestion: Does the black bear learn elementary resource management from the cheetah?",
        "idx": 166,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal rolls the dice for the viperfish, then the black bear does not learn elementary resource management from the cheetah\nrule1() = rolls_dice(something, viperfish) => not learn(black_bear, elementary_resource_management, cheetah)\n# Rule2: Regarding the cockroach, if it has a card whose color starts with the letter \"o\", then we can conclude that it rolls the dice for the viperfish\nrule2() = has(cockroach, card) and starts_with(color(card), \"o\") => rolls_dice(cockroach, viperfish)\n# Rule3: If the cockroach has a high salary, then the cockroach rolls the dice for the viperfish.\nrule3() = salary(cockroach) == high => rolls_dice(cockroach, viperfish)\n\n# The current state of the game is as follows\n# The cockroach has a card that is orange in color\nhas(cockroach, card) = True\ncolor(card, orange) = True\n# The cockroach has a low-income job\nsalary(cockroach) == low = True\n# The tiger does not respect the cockroach.\nrespect(tiger, cockroach) = False\n\n# Based on the game state and the rules and preferences, does the black bear learn the basics of resource management from the cheetah?\nquestion = learn(black_bear, elementary_resource_management, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squirrel has a musical instrument, then it raises a peace flag for the cockroach\nRule2: If the leopard took a bike from the store, then it proceeds to the spot that is right after the spot of the tiger\nRule3: If something needs the support of the cockroach, then it becomes an enemy of the snail\nRule4: If the first letter of the name of the squirrel is the same as the first letter of the name of the grizzly bear, then the squirrel raises a peace flag for the cockroach.\n\nThe current state of the game is as follows\nThe name of the grizzly bear is Charlie\nThe leopard stole a bike from the store\nThe squirrel has a white card, a violin, and is named Chickpea.\n\nBased on the game state and the rules and preferences, does the squirrel become an enemy of the snail?\nQuestion: Does the squirrel become an enemy of the snail?",
        "idx": 167,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squirrel has a musical instrument, then the squirrel raises a peace flag for the cockroach\nrule1() = has(squirrel, musical_instrument) => raise_flag_of_peace(squirrel, cockroach)\n# Rule2: Regarding the leopard, if it took a bike from the store, then we can conclude that it proceeds to the spot that is right after the spot of the tiger\nrule2() = took(leopard, bike, store) => proceed(leopard, spot_after(tiger))\n# Rule3: If something needs the support of the cockroach, then it becomes an enemy of the snail, too\nrule3(something) = needs(something, support, cockroach) => become_enemy(something, snail)\n# Rule4: Regarding the squirrel, if it has a name whose first letter is the same as the first letter of the grizzly bear's name, then we can conclude that it raises a flag of peace for the cockroach.\nrule4() = first_letter_of(name(squirrel)) == first_letter_of(name(grizzly_bear)) => raise_flag_of_peace(squirrel, cockroach)\n\n# The current state of the game is as follows\n# The grizzly bear is named Charlie\nname(grizzly_bear, Charlie) = True\n# The leopard stole a bike from the store\ntook(leopard, bike, store) = True\n# The squirrel has a card that is white in color, has a violin, and is named Chickpea.\nhas(squirrel, card) = True\ncolor(card, white) = True\nhas(squirrel, violin) = True\nname(squirrel, Chickpea) = True\n\n# Based on the game state and the rules and preferences, does the squirrel become an enemy of the snail?\nquestion = become_enemy(squirrel, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The hippopotamus needs support from the caterpillar whenever at least one animal gives a magnifying glass to the squirrel\nRule2: If something winks at the rabbit, then the hare gives a magnifier to the squirrel\nRule3: If something does not attack the green fields whose owner is the koala, then it rolls the dice for the hippopotamus\nRule4: The cricket does not show all her cards to the hippopotamus whenever at least one animal learns elementary resource management from the bat\nRule5: If the cricket has fewer than 6 friends, then it shows her cards (all of them) to the hippopotamus\nRule6: If the first letter of the name of the cricket is the same as the first letter of the name of the swordfish, then it shows her cards (all of them) to the hippopotamus.\n\nRule5 is preferred over Rule4\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cheetah winks at the rabbit\nThe name of the cricket is Beauty\nThe sea bass learns the basics of resource management from the bat\nThe name of the swordfish is Max\nThe lobster does not attack the green fields whose owner is the koala.\n\nBased on the game state and the rules and preferences, does the hippopotamus need support from the caterpillar?\nQuestion: Does the hippopotamus need support from the caterpillar?",
        "idx": 168,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The hippopotamus needs support from the caterpillar whenever at least one animal gives a magnifying glass to the squirrel\nrule1() = give(something, magnifying_glass, squirrel) => support(hippopotamus, caterpillar)\n# Rule2: If at least one animal winks at the rabbit, then the hare gives a magnifier to the squirrel\nrule2() = wink(something, rabbit) => give(hare, magnifying_glass, squirrel)\n# Rule3: If something does not attack the green fields whose owner is the koala, then it rolls the dice for the hippopotamus\nrule3(something) = not attack(something, green_fields, owner(koala)) => roll_dice(something, hippopotamus)\n# Rule4: The cricket does not show all her cards to the hippopotamus whenever at least one animal learns elementary resource management from the bat\nrule4() = learn(something, elementary_resource_management, bat) => not show_all_cards(cricket, hippopotamus)\n# Rule5: Regarding the cricket, if it has fewer than 6 friends, then we can conclude that it shows her cards (all of them) to the hippopotamus\nrule5() = friends(cricket) < 6 => show_all_cards(cricket, hippopotamus)\n# Rule6: Regarding the cricket, if it has a name whose first letter is the same as the first letter of the swordfish's name, then we can conclude that it shows her cards (all of them) to the hippopotamus.\nrule6() = first_letter_of(name(cricket)) == first_letter_of(name(swordfish)) => show_all_cards(cricket, hippopotamus)\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cheetah winks at the rabbit\nwink(cheetah, rabbit) = True\n# The cricket is named Beauty\nname(cricket, Beauty) = True\n# The sea bass learns the basics of resource management from the bat\nlearn(sea_bass, basics_of_resource_management, bat) = True\n# The swordfish is named Max\nname(swordfish, Max) = True\n# The lobster does not attack the green fields whose owner is the koala.\nnot attack(lobster, green_fields, owner(koala)) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus need support from the caterpillar?\nquestion = support(hippopotamus, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cheetah has more than eight friends, then it gives a magnifying glass to the sheep\nRule2: If the penguin eats the food of the sheep, then the sheep is not going to become an enemy of the tiger\nRule3: If something gives a magnifying glass to the gecko, then it becomes an enemy of the tiger\nRule4: The tilapia gives a magnifier to the sheep, in the case where the bat does not attack the green fields whose owner is the tilapia\nRule5: If something knocks down the fortress of the octopus, then it does not give a magnifying glass to the sheep\nRule6: If the cheetah has a card with a primary color, then it gives a magnifier to the sheep\nRule7: If the cheetah gives a magnifying glass to the sheep and the tilapia gives a magnifier to the sheep, then the sheep is not going to knock down the fortress of the salmon\nRule8: If something prepares armor for the squirrel and becomes an enemy of the tiger, then it knocks down the fortress that belongs to the salmon.\n\nRule2 is preferred over Rule3\nRule5 is preferred over Rule1\nRule5 is preferred over Rule6\nRule8 is preferred over Rule7\n\nThe current state of the game is as follows\nThe cheetah has a card that is red in color\nThe cheetah has one friend\nThe phoenix gives a magnifier to the tilapia\nThe sheep gives a magnifier to the gecko\nThe bat does not attack the green fields whose owner is the tilapia.\n\nBased on the game state and the rules and preferences, does the sheep knock down the fortress of the salmon?\nQuestion: Does the sheep knock down the fortress of the salmon?",
        "idx": 169,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cheetah, if it has more than eight friends, then we can conclude that it gives a magnifying glass to the sheep\nrule1() = friends(cheetah) > 8 => give(cheetah, magnifying_glass, sheep)\n# Rule2: If the penguin eats the food that belongs to the sheep, then the sheep is not going to become an enemy of the tiger\nrule2() = eat_food(penguin, food_of(sheep)) => not become_enemy(sheep, tiger)\n# Rule3: If you are positive that you saw one of the animals gives a magnifying glass to the gecko, you can be certain that it will also become an enemy of the tiger\nrule3(something) = give(something, magnifying_glass, gecko) => become_enemy(something, tiger)\n# Rule4: The tilapia unquestionably gives a magnifier to the sheep, in the case where the bat does not attack the green fields whose owner is the tilapia\nrule4() = not attack(bat, green_fields(owned_by(tilapia))) => give(tilapia, magnifying_glass, sheep)\n# Rule5: If you are positive that you saw one of the animals knocks down the fortress of the octopus, you can be certain that it will not give a magnifying glass to the sheep\nrule5(something) = knock_down(something, fortress(octopus)) => not give(something, magnifying_glass, sheep)\n# Rule6: If the cheetah has a card with a primary color, then the cheetah gives a magnifier to the sheep\nrule6() = has(cheetah, card) and color(card) in primary_colors => give(cheetah, magnifying_glass, sheep)\n# Rule7: For the sheep, if the belief is that the cheetah gives a magnifying glass to the sheep and the tilapia gives a magnifier to the sheep, then you can add that \"the sheep is not going to knock down the fortress of the salmon\" to your conclusions\nrule7() = give(cheetah, magnifying_glass, sheep) & give(tilapia, magnifying_glass, sheep) => not knock_down(sheep, fortress(salmon))\n# Rule8: If you see that something prepares armor for the squirrel and becomes an enemy of the tiger, what can you certainly conclude? You can conclude that it also knocks down the fortress that belongs to the salmon.\nrule8(something) = prepare_armor(something, squirrel) & become_enemy(something, tiger) => knock_down(something, fortress(salmon))\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n\n# The current state of the game is as follows\n# The cheetah has a card that is red in color\nhas(cheetah, card) = True\ncolor(card, red) = True\n# The cheetah has one friend\nfriends(cheetah) = 1\n# The phoenix gives a magnifier to the tilapia\ngive(phoenix, magnifying_glass, tilapia) = True\n# The sheep gives a magnifier to the gecko\ngive(sheep, magnifying_glass, gecko) = True\n# The bat does not attack the green fields whose owner is the tilapia.\nnot attack(bat, green_fields(owned_by(tilapia))) = True\n\n# Based on the game state and the rules and preferences, does the sheep knock down the fortress of the salmon?\nquestion = knock_down(sheep, fortress(salmon))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something attacks the green fields of the raven, then it does not prepare armor for the hippopotamus\nRule2: The hippopotamus raises a peace flag for the cow if the grasshopper removes one of the pieces of the hippopotamus\nRule3: If the grasshopper has a sharp object, then it prepares armor for the hippopotamus.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe grasshopper has a knife.\n\nBased on the game state and the rules and preferences, does the hippopotamus raise a peace flag for the cow?\nQuestion: Does the hippopotamus raise a peace flag for the cow?",
        "idx": 170,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something attacks the green fields of the raven, then it does not prepare armor for the hippopotamus\nrule1(something) = attacks(something, green_fields, raven) => not prepare_armor(something, hippopotamus)\n# Rule2: The hippopotamus unquestionably raises a peace flag for the cow, in the case where the grasshopper removes one of the pieces of the hippopotamus\nrule2() = remove(grasshopper, piece, hippopotamus) => raise_flag_of_peace(hippopotamus, cow)\n# Rule3: If the grasshopper has a sharp object, then the grasshopper prepares armor for the hippopotamus.\nrule3() = has(grasshopper, sharp_object) => prepare_armor(grasshopper, hippopotamus)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The grasshopper has a knife.\nhas(grasshopper, knife) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus raise a peace flag for the cow?\nquestion = raise_flag_of_peace(hippopotamus, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the carp does not sing a victory song for the baboon, then the baboon winks at the panda bear\nRule2: If something does not proceed to the spot right after the sun bear, then it does not wink at the panda bear\nRule3: If the kangaroo owes money to the carp and the raven prepares armor for the carp, then the carp will not sing a song of victory for the baboon.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe kangaroo owes money to the carp\nThe raven prepares armor for the carp.\n\nBased on the game state and the rules and preferences, does the baboon wink at the panda bear?\nQuestion: Does the baboon wink at the panda bear?",
        "idx": 171,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the carp does not sing a victory song for the baboon, then the baboon winks at the panda bear\nrule1() = not sing(carp, victory_song, baboon) => wink(baboon, panda_bear)\n# Rule2: If something does not proceed to the spot right after the sun bear, then it does not wink at the panda bear\nrule2(something) = not proceed(something, spot_right_after(sun_bear)) => not wink(something, panda_bear)\n# Rule3: If the kangaroo owes $$$ to the carp and the raven prepares armor for the carp, then the carp will not sing a song of victory for the baboon.\nrule3() = owe(kangaroo, money, carp) & prepare_armor(raven, carp) => not sing(carp, victory_song, baboon)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The kangaroo owes money to the carp\nowe(kangaroo, money, carp) = True\n# The raven prepares armor for the carp.\nprepare_armor(raven, carp) = True\n\n# Based on the game state and the rules and preferences, does the baboon wink at the panda bear?\nquestion = wink(baboon, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the jellyfish holds the same number of points as the halibut and the oscar winks at the halibut, then the halibut will not know the defense plan of the cockroach\nRule2: If the jellyfish has a leafy green vegetable, then it holds an equal number of points as the halibut\nRule3: If the oscar works more hours than before, then it winks at the halibut\nRule4: If the oscar has fewer than eleven friends, then it winks at the halibut.\n\nThe current state of the game is as follows\nThe name of the catfish is Paco\nThe jellyfish has kale\nThe name of the jellyfish is Pashmak\nThe oscar has 10 friends\nThe oscar reduced her work hours recently.\n\nBased on the game state and the rules and preferences, does the halibut know the defensive plans of the cockroach?\nQuestion: Does the halibut know the defensive plans of the cockroach?",
        "idx": 172,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the jellyfish holds the same number of points as the halibut and the oscar winks at the halibut, then the halibut will not know the defense plan of the cockroach\nrule1() = points(jellyfish) == points(halibut) & winks(oscar, halibut) => not know(halibut, defense_plans, cockroach)\n# Rule2: Regarding the jellyfish, if it has a leafy green vegetable, then we can conclude that it holds an equal number of points as the halibut\nrule2() = has(jellyfish, leafy_green_vegetable) => points(jellyfish) == points(halibut)\n# Rule3: Regarding the oscar, if it works more hours than before, then we can conclude that it winks at the halibut\nrule3() = works_more_hours(oscar) => winks(oscar, halibut)\n# Rule4: Regarding the oscar, if it has fewer than eleven friends, then we can conclude that it winks at the halibut.\nrule4() = friends(oscar) < 11 => winks(oscar, halibut)\n\n# The current state of the game is as follows\n# The catfish is named Paco\nname(catfish, Paco) = True\n# The jellyfish has some kale\nhas(jellyfish, kale) = True\n# The jellyfish is named Pashmak\nname(jellyfish, Pashmak) = True\n# The oscar has 10 friends\nfriends(oscar) = 10\n# The oscar reduced her work hours recently.\nreduced_work_hours(oscar) = True\n\n# Based on the game state and the rules and preferences, does the halibut know the defensive plans of the cockroach?\nquestion = know(halibut, defense_plans, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal owes money to the cheetah, then the cricket eats the food of the salmon\nRule2: If something does not prepare armor for the catfish, then it will not eat the food of the salmon\nRule3: If the wolverine does not become an enemy of the moose but the sun bear owes money to the moose, then the moose becomes an enemy of the cheetah unavoidably.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe sun bear owes money to the moose\nThe wolverine does not become an enemy of the moose.\n\nBased on the game state and the rules and preferences, does the cricket eat the food of the salmon?\nQuestion: Does the cricket eat the food of the salmon?",
        "idx": 173,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal owes $$$ to the cheetah, then the cricket eats the food of the salmon\nrule1() = owes(something, money, cheetah) => eat_food(cricket, food_of(salmon))\n# Rule2: If you are positive that one of the animals does not prepare armor for the catfish, you can be certain that it will not eat the food of the salmon\nrule2(something) = not prepare_armor(something, catfish) => not eat_food(something, food_of(salmon))\n# Rule3: If the wolverine does not become an enemy of the moose but the sun bear owes money to the moose, then the moose becomes an enemy of the cheetah unavoidably.\nrule3() = not become_enemy(wolverine, moose) & owes(sun_bear, money, moose) => become_enemy(moose, cheetah)\n\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The sun bear owes money to the moose\nowes(sun_bear, money, moose) = True\n# The wolverine does not become an enemy of the moose.\nnot become_enemy(wolverine, moose) = True\n\n# Based on the game state and the rules and preferences, does the cricket eat the food of the salmon?\nquestion = eat_food(cricket, food_of(salmon))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the doctorfish has a card and the color of the card is one of the rainbow colors, then it eats the food of the wolverine\nRule2: If the doctorfish purchased a time machine, then it eats the food of the wolverine\nRule3: If at least one animal shows all her cards to the puffin, then the doctorfish does not eat the food that belongs to the wolverine\nRule4: The wolverine shows all her cards to the sheep if the doctorfish eats the food that belongs to the wolverine.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe doctorfish has a card\nThe color of the card is red\nThe doctorfish invented a time machine\n\nBased on the game state and the rules and preferences, does the wolverine show all her cards to the sheep?\nQuestion: Does the wolverine show all her cards to the sheep?",
        "idx": 174,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the doctorfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it eats the food of the wolverine\nrule1() = has(doctorfish, card) and color(card) in rainbow_colors => eats(doctorfish, food_of(wolverine))\n# Rule2: Regarding the doctorfish, if it purchased a time machine, then we can conclude that it eats the food of the wolverine\nrule2() = purchased(doctorfish, time_machine) => eats(doctorfish, food_of(wolverine))\n# Rule3: If at least one animal shows all her cards to the puffin, then the doctorfish does not eat the food that belongs to the wolverine\nrule3() = show_all_cards(something) => not eats(doctorfish, food_of(wolverine))\n# Rule4: The wolverine unquestionably shows her cards (all of them) to the sheep, in the case where the doctorfish eats the food that belongs to the wolverine.\nrule4() = eats(doctorfish, food_of(wolverine)) => show_all_cards(wolverine, sheep)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The doctorfish has a card that is red in color\nhas(doctorfish, card) = True\ncolor(card, red) = True\n# The doctorfish invented a time machine\ninvented(doctorfish, time_machine) = True\n\n# Based on the game state and the rules and preferences, does the wolverine show all her cards to the sheep?\nquestion = show_all_cards(wolverine, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kudu sings a victory song for the sun bear and the crocodile gives a magnifying glass to the sun bear, then the sun bear does not need support from the hummingbird\nRule2: If the lobster sings a victory song for the kudu, then the kudu sings a victory song for the sun bear\nRule3: If something does not hold the same number of points as the cat, then it gives a magnifying glass to the sun bear.\n\nThe current state of the game is as follows\nThe kudu has a low-income job\nThe kudu has some arugula\nThe lobster sings a victory song for the kudu\nThe crocodile does not hold the same number of points as the cat.\n\nBased on the game state and the rules and preferences, does the sun bear need support from the hummingbird?\nQuestion: Does the sun bear need support from the hummingbird?",
        "idx": 175,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the sun bear, if the belief is that the kudu sings a victory song for the sun bear and the crocodile gives a magnifying glass to the sun bear, then you can add that \"the sun bear is not going to need support from the hummingbird\" to your conclusions\nrule1() = sings(kudu, victory_song, sun_bear) & give(crocodile, magnifying_glass, sun_bear) => not need_support(sun_bear, hummingbird)\n# Rule2: The kudu unquestionably sings a song of victory for the sun bear, in the case where the lobster sings a victory song for the kudu\nrule2() = sings(lobster, victory_song, kudu) => sings(kudu, victory_song, sun_bear)\n# Rule3: If you are positive that one of the animals does not hold the same number of points as the cat, you can be certain that it will give a magnifier to the sun bear without a doubt.\nrule3(something) = not points(something) == points(cat) => give(something, magnifying_glass, sun_bear)\n\n# The current state of the game is as follows\n# The kudu has a low-income job\nhas(kudu, job, low_income) = True\n# The kudu has some arugula\nhas(kudu, arugula) = True\n# The lobster sings a victory song for the kudu\nsings(lobster, victory_song, kudu) = True\n# The crocodile does not hold the same number of points as the cat.\npoints(crocodile) != points(cat) = True\n\n# Based on the game state and the rules and preferences, does the sun bear need support from the hummingbird?\nquestion = need_support(sun_bear, hummingbird)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the black bear is the same as the first letter of the name of the cheetah, then the black bear does not sing a victory song for the kudu\nRule2: If the spider has something to drink, then it eats the food that belongs to the black bear\nRule3: If the black bear has more than 9 friends, then it sings a song of victory for the kudu\nRule4: If the lobster attacks the green fields of the black bear and the spider prepares armor for the black bear, then the black bear gives a magnifier to the eel\nRule5: The lobster attacks the green fields of the black bear if the polar bear respects the lobster\nRule6: If the black bear has a leafy green vegetable, then it sings a victory song for the kudu\nRule7: If the meerkat does not give a magnifying glass to the black bear, then the black bear sings a song of victory for the puffin.\n\nRule3 is preferred over Rule1\nRule6 is preferred over Rule1\n\nThe current state of the game is as follows\nThe black bear has a violin and is named Charlie\nThe cheetah is named Meadow\nThe meerkat gives a magnifier to the black bear\nThe polar bear respects the lobster\nThe spider has a well-paid job, a beer, and a saxophone.\n\nBased on the game state and the rules and preferences, does the black bear give a magnifier to the eel?\nQuestion: Does the black bear give a magnifier to the eel?",
        "idx": 176,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the black bear has a name whose first letter is the same as the first letter of the cheetah's name, then the black bear does not sing a victory song for the kudu\nrule1() = first_letter_of(name(black_bear)) == first_letter_of(name(cheetah)) => not sing(black_bear, victory_song, kudu)\n# Rule2: If the spider has something to drink, then the spider eats the food that belongs to the black bear\nrule2() = has(spider, drink) => eat(spider, food_of(black_bear))\n# Rule3: Regarding the black bear, if it has more than 9 friends, then we can conclude that it sings a song of victory for the kudu\nrule3() = friends(black_bear) > 9 => sing(black_bear, victory_song, kudu)\n# Rule4: For the black bear, if the belief is that the lobster attacks the green fields whose owner is the black bear and the spider prepares armor for the black bear, then you can add \"the black bear gives a magnifier to the eel\" to your conclusions\nrule4() = belief(lobster, attacks, green_fields_of(black_bear)) & prepare_armor(spider, black_bear) => add_conclusion(\"the black bear gives a magnifier to the eel\")\n# Rule5: The lobster unquestionably attacks the green fields whose owner is the black bear, in the case where the polar bear respects the lobster\nrule5() = respect(polar_bear, lobster) => attacks(lobster, green_fields_of(black_bear))\n# Rule6: Regarding the black bear, if it has a leafy green vegetable, then we can conclude that it sings a victory song for the kudu\nrule6() = has(black_bear, leafy_green_vegetable) => sing(black_bear, victory_song, kudu)\n# Rule7: If the meerkat does not give a magnifying glass to the black bear, then the black bear sings a song of victory for the puffin.\nrule7() = not give(meerkat, magnifying_glass, black_bear) => sing(black_bear, victory_song, puffin)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n\n# The current state of the game is as follows\n# The black bear has a violin, and is named Charlie\nname(black_bear, Charlie) = True\nhas(black_bear, violin) = True\n# The cheetah is named Meadow\nname(cheetah, Meadow) = True\n# The meerkat gives a magnifier to the black bear\ngive(meerkat, magnifying_glass, black_bear) = True\n# The polar bear respects the lobster\nrespect(polar_bear, lobster) = True\n# The spider got a well-paid job, has a beer, and has a saxophone.\nhas(spider, job) = True\nhas(spider, beer) = True\nhas(spider, saxophone) = True\n\n# Based on the game state and the rules and preferences, does the black bear give a magnifier to the eel?\nquestion = add_conclusion(\"the black bear gives a magnifier to the eel\")"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not steal five points from the parrot but it knows the defense plan of the wolverine, then it also attacks the green fields whose owner is the hippopotamus\nRule2: The snail does not attack the green fields whose owner is the hippopotamus whenever at least one animal steals five of the points of the puffin\nRule3: If something winks at the squirrel, then it knows the defense plan of the wolverine\nRule4: If something learns the basics of resource management from the mosquito, then the snail does not steal five points from the parrot\nRule5: If something knocks down the fortress that belongs to the zander, then it does not know the defense plan of the wolverine.\n\nRule2 is preferred over Rule1\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe moose learns the basics of resource management from the mosquito\nThe snail winks at the squirrel.\n\nBased on the game state and the rules and preferences, does the snail attack the green fields whose owner is the hippopotamus?\nQuestion: Does the snail attack the green fields whose owner is the hippopotamus?",
        "idx": 177,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not steal five points from the parrot but it knows the defense plan of the wolverine, what can you certainly conclude? You can conclude that it also attacks the green fields whose owner is the hippopotamus\nrule1(something) = not steal(something, 5_points, parrot) & knows(something, defense_plan, wolverine) => attack(something, green_fields, owner(hippopotamus))\n# Rule2: The snail does not attack the green fields whose owner is the hippopotamus whenever at least one animal steals five of the points of the puffin\nrule2() = not steal(something, 5_points, puffin) => not attack(snail, green_fields, owner(hippopotamus))\n# Rule3: If you are positive that you saw one of the animals winks at the squirrel, you can be certain that it will also know the defense plan of the wolverine\nrule3(something) = wink(something, squirrel) => knows(something, defense_plan, wolverine)\n# Rule4: If at least one animal learns the basics of resource management from the mosquito, then the snail does not steal five points from the parrot\nrule4() = learn(something, basics_of_resource_management, mosquito) => not steal(snail, 5_points, parrot)\n# Rule5: If something knocks down the fortress that belongs to the zander, then it does not know the defense plan of the wolverine.\nrule5(something) = knocks_down(something, fortress, owner(zander)) => not knows(something, defense_plan, wolverine)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The moose learns the basics of resource management from the mosquito\nlearn(moose, basics_of_resource_management, mosquito) = True\n# The snail winks at the squirrel.\nwink(snail, squirrel) = True\n\n# Based on the game state and the rules and preferences, does the snail attack the green fields whose owner is the hippopotamus?\nquestion = attack(snail, green_fields, owner(hippopotamus))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the tiger starts with the same letter as the name of the sea bass, then the tiger does not become an enemy of the cat\nRule2: If something respects the eel and does not become an actual enemy of the cat, then it does not sing a victory song for the grizzly bear\nRule3: If something eats the food of the panda bear, then the tiger sings a victory song for the grizzly bear\nRule4: If the tiger has a card with a primary color, then it does not become an actual enemy of the cat\nRule5: If the cockroach learns elementary resource management from the tiger and the penguin does not attack the green fields whose owner is the tiger, then the tiger respects the eel.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cockroach learns the basics of resource management from the tiger\nThe koala eats the food of the tiger\nThe name of the sea bass is Milo\nThe tiger has a blue card\nThe name of the tiger is Paco\nThe penguin does not attack the green fields whose owner is the tiger.\n\nBased on the game state and the rules and preferences, does the tiger sing a victory song for the grizzly bear?\nQuestion: Does the tiger sing a victory song for the grizzly bear?",
        "idx": 178,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the tiger, if it has a name whose first letter is the same as the first letter of the sea bass's name, then we can conclude that it does not become an enemy of the cat\nrule1() = first_letter_of(name(tiger)) == first_letter_of(name(sea_bass)) => not become_enemy(tiger, cat)\n# Rule2: Be careful when something does not become an actual enemy of the cat but respects the eel because in this case it certainly does not sing a victory song for the grizzly bear (this may or may not be problematic)\nrule2(something) = not become_enemy(something, cat) & respect(something, eel) => not sing_victory_song(something, grizzly_bear)\n# Rule3: If at least one animal eats the food of the panda bear, then the tiger sings a victory song for the grizzly bear\nrule3() = eat_food(something, food_of(panda_bear)) => sing_victory_song(tiger, grizzly_bear)\n# Rule4: Regarding the tiger, if it has a card with a primary color, then we can conclude that it does not become an actual enemy of the cat\nrule4() = has(tiger, card) & color(card) in primary_colors => not become_enemy(tiger, cat)\n# Rule5: For the tiger, if the belief is that the cockroach learns elementary resource management from the tiger and the penguin does not attack the green fields whose owner is the tiger, then you can add \"the tiger respects the eel\" to your conclusions.\nrule5() = learn(cockroach, elementary_resource_management_from(tiger)) & not attack(penguin, green_fields, owner=tiger) => respect(tiger, eel)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cockroach learns the basics of resource management from the tiger\nlearn(cockroach, elementary_resource_management_from(tiger)) = True\n# The koala eats the food of the tiger\neat_food(koala, food_of(tiger)) = True\n# The sea bass is named Milo\nname(sea_bass, Milo) = True\n# The tiger has a card that is blue in color\nhas(tiger, card) = True\ncolor(card, blue) = True\n# The tiger is named Paco\nname(tiger, Paco) = True\n# The penguin does not attack the green fields whose owner is the tiger.\nnot attack(penguin, green_fields, owner=tiger) = True\n\n# Based on the game state and the rules and preferences, does the tiger sing a victory song for the grizzly bear?\nquestion = sing_victory_song(tiger, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something removes one of the pieces of the swordfish, then the sea bass burns the warehouse that is in possession of the snail\nRule2: If something steals five points from the grasshopper but does not proceed to the spot that is right after the spot of the donkey, then it will remove from the board one of the pieces of the swordfish.\n\nThe current state of the game is as follows\nThe amberjack does not proceed to the spot right after the donkey, and does not steal five points from the grasshopper.\n\nBased on the game state and the rules and preferences, does the sea bass burn the warehouse of the snail?\nQuestion: Does the sea bass burn the warehouse of the snail?",
        "idx": 179,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal removes one of the pieces of the swordfish, then the sea bass burns the warehouse that is in possession of the snail\nrule1() = remove(something, piece, swordfish) => burn(warehouse, snail)\n# Rule2: Be careful when something steals five of the points of the grasshopper but does not proceed to the spot that is right after the spot of the donkey because in this case it will, surely, remove from the board one of the pieces of the swordfish (this may or may not be problematic).\n\n# The current state of the game is as follows\n# The amberjack does not proceed to the spot right after the donkey, and does not steal five points from the grasshopper.\nproceed(amberjack, spot_right_after(donkey)) = False\nsteal_points(amberjack, 5, grasshopper) = False\n\n# Based on the game state and the rules and preferences, does the sea bass burn the warehouse of the snail?\nquestion = burn(warehouse, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eel killed the mayor, then it respects the lobster\nRule2: If the squid becomes an actual enemy of the caterpillar, then the caterpillar does not knock down the fortress that belongs to the lobster\nRule3: If the eel respects the lobster and the caterpillar does not knock down the fortress that belongs to the lobster, then the lobster steals five points from the halibut.\n\nThe current state of the game is as follows\nThe eel assassinated the mayor\nThe squid becomes an enemy of the caterpillar.\n\nBased on the game state and the rules and preferences, does the lobster steal five points from the halibut?\nQuestion: Does the lobster steal five points from the halibut?",
        "idx": 180,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the eel, if it killed the mayor, then we can conclude that it respects the lobster\nrule1() = killed(eel, mayor) => respects(eel, lobster)\n# Rule2: The caterpillar does not knock down the fortress that belongs to the lobster, in the case where the squid becomes an actual enemy of the caterpillar\nrule2() = become_enemy(squid, caterpillar) => not knock_down(caterpillar, fortress, lobster)\n# Rule3: For the lobster, if the belief is that the eel respects the lobster and the caterpillar does not knock down the fortress that belongs to the lobster, then you can add \"the lobster steals five points from the halibut\" to your conclusions.\nrule3() = respects(eel, lobster) & not knock_down(caterpillar, fortress, lobster) => steal_points(lobster, 5, halibut)\n\n# The current state of the game is as follows\n# The eel assassinated the mayor\nkilled(eel, mayor) = True\n# The squid becomes an enemy of the caterpillar.\nbecome_enemy(squid, caterpillar) = True\n\n# Based on the game state and the rules and preferences, does the lobster steal five points from the halibut?\nquestion = steal_points(lobster, 5, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sun bear does not offer a job to the swordfish and the wolverine does not remove from the board one of the pieces of the swordfish, then the swordfish will never burn the warehouse of the halibut\nRule2: If something removes from the board one of the pieces of the viperfish, then it will not remove one of the pieces of the swordfish\nRule3: The sun bear does not offer a job to the swordfish, in the case where the elephant gives a magnifying glass to the sun bear\nRule4: The swordfish burns the warehouse that is in possession of the halibut whenever at least one animal gives a magnifying glass to the parrot.\n\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe elephant gives a magnifier to the sun bear\nThe sun bear has a violet card\nThe wolverine removes from the board one of the pieces of the viperfish.\n\nBased on the game state and the rules and preferences, does the swordfish burn the warehouse of the halibut?\nQuestion: Does the swordfish burn the warehouse of the halibut?",
        "idx": 181,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sun bear does not offer a job to the swordfish and the wolverine does not remove from the board one of the pieces of the swordfish, then the swordfish will never burn the warehouse of the halibut\nrule1() = not offer_job_position(sun_bear, swordfish) & not remove_piece(wolverine, swordfish) => never_burn_warehouse(swordfish, halibut)\n# Rule2: If you are positive that you saw one of the animals removes from the board one of the pieces of the viperfish, you can be certain that it will not remove one of the pieces of the swordfish\nrule2(something) = remove_piece(something, viperfish) => not remove_piece(something, swordfish)\n# Rule3: The sun bear does not offer a job to the swordfish, in the case where the elephant gives a magnifying glass to the sun bear\nrule3() = give(elephant, magnifying_glass, sun_bear) => not offer_job_position(sun_bear, swordfish)\n# Rule4: The swordfish burns the warehouse that is in possession of the halibut whenever at least one animal gives a magnifying glass to the parrot.\nrule4() = give(something, magnifying_glass, parrot) => burn_warehouse(swordfish, warehouse_of(halibut))\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The elephant gives a magnifier to the sun bear\ngive(elephant, magnifying_glass, sun_bear) = True\n# The sun bear has a card that is violet in color\nhas(sun_bear, card) = True\ncolor(card, violet) = True\n# The wolverine removes from the board one of the pieces of the viperfish.\nremove_piece(wolverine, viperfish) = True\n\n# Based on the game state and the rules and preferences, does the swordfish burn the warehouse of the halibut?\nquestion = burn_warehouse(swordfish, warehouse_of(halibut))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sea bass proceeds to the spot that is right after the spot of the polar bear, then the polar bear learns elementary resource management from the sun bear\nRule2: If the sun bear owns a luxury aircraft, then the sun bear prepares armor for the crocodile\nRule3: If the sun bear has more than 2 friends, then the sun bear prepares armor for the crocodile\nRule4: If the polar bear learns elementary resource management from the sun bear and the cricket removes from the board one of the pieces of the sun bear, then the sun bear removes from the board one of the pieces of the puffin\nRule5: The cricket removes from the board one of the pieces of the sun bear whenever at least one animal sings a victory song for the koala\nRule6: If something prepares armor for the grizzly bear and prepares armor for the crocodile, then it does not remove from the board one of the pieces of the puffin\nRule7: If something does not burn the warehouse that is in possession of the squirrel, then it does not learn elementary resource management from the sun bear.\n\nRule6 is preferred over Rule4\nRule7 is preferred over Rule1\n\nThe current state of the game is as follows\nThe kiwi sings a victory song for the koala\nThe sea bass gives a magnifying glass to the polar bear\nThe sun bear dreamed of a luxury aircraft\nThe sun bear has 3 energetic friends and 5 non-energetic friends.\n\nBased on the game state and the rules and preferences, does the sun bear remove from the board one of the pieces of the puffin?\nQuestion: Does the sun bear remove from the board one of the pieces of the puffin?",
        "idx": 182,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sea bass proceeds to the spot that is right after the spot of the polar bear, then the polar bear learns elementary resource management from the sun bear\nrule1() = proceed(sea_bass, spot_after(polar_bear)) => learn(polar_bear, elementary_resource_management_from(sun_bear))\n# Rule2: If the sun bear owns a luxury aircraft, then the sun bear prepares armor for the crocodile\nrule2() = owns(sun_bear, luxury_aircraft) => prepare_armor(sun_bear, crocodile)\n# Rule3: If the sun bear has more than 2 friends, then the sun bear prepares armor for the crocodile\nrule3() = friends(sun_bear) > 2 => prepare_armor(sun_bear, crocodile)\n# Rule4: If the polar bear learns elementary resource management from the sun bear and the cricket removes from the board one of the pieces of the sun bear, then the sun bear removes from the board one of the pieces of the puffin\nrule4() = learn(polar_bear, elementary_resource_management_from(sun_bear)) & remove(cricket, piece, sun_bear) => remove(sun_bear, piece, puffin)\n# Rule5: The cricket removes from the board one of the pieces of the sun bear whenever at least one animal sings a victory song for the koala\nrule5() = sings(victory_song, animal, koala) => remove(cricket, piece, sun_bear)\n# Rule6: If you see that something prepares armor for the grizzly bear and prepares armor for the crocodile, what can you certainly conclude? You can conclude that it does not remove from the board one of the pieces of the puffin\nrule6(something) = prepare_armor(something, grizzly_bear) & prepare_armor(something, crocodile) => not remove(something, piece, puffin)\n# Rule7: If something does not burn the warehouse that is in possession of the squirrel, then it does not learn elementary resource management from the sun bear.\nrule7(something) = not burn(something, warehouse, squirrel) => not learn(something, elementary_resource_management_from(sun_bear))\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n\n# The current state of the game is as follows\n# The kiwi sings a victory song for the koala\nsings(victory_song, kiwi, koala) = True\n# The sea bass gives a magnifier to the polar bear\n# Background information: magnifier is the same as magnifying glass\ngive(sea_bass, magnifying_glass, polar_bear) = True\n# The sun bear dreamed of a luxury aircraft\ndream(sun_bear, luxury_aircraft) = True\n# The sun bear has 3 friends that are energetic and 5 friends that are not.\nenergetic_friends(sun_bear) = 3\nnon_energetic_friends(sun_bear) = 5\n\n# Based on the game state and the rules and preferences, does the sun bear remove from the board one of the pieces of the puffin?\nquestion = remove(sun_bear, piece, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal holds an equal number of points as the buffalo, then the sheep learns elementary resource management from the squirrel\nRule2: If the moose has fewer than seven friends, then the moose holds the same number of points as the buffalo.\n\nThe current state of the game is as follows\nThe moose has five friends.\n\nBased on the game state and the rules and preferences, does the sheep learn the basics of resource management from the squirrel?\nQuestion: Does the sheep learn the basics of resource management from the squirrel?",
        "idx": 183,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal holds an equal number of points as the buffalo, then the sheep learns elementary resource management from the squirrel\nrule1(something) = points(something) == points(buffalo) => learn(sheep, elementary_resource_management_from(squirrel))\n# Rule2: If the moose has fewer than seven friends, then the moose holds the same number of points as the buffalo.\nrule2() = friends(moose) < 7 => points(moose) == points(buffalo)\n\n# The current state of the game is as follows\n# The moose has five friends.\nfriends(moose) = 5\n\n# Based on the game state and the rules and preferences, does the sheep learn the basics of resource management from the squirrel?\nquestion = learn(sheep, elementary_resource_management_from(squirrel))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the hare is the same as the first letter of the name of the starfish, then the hare burns the warehouse that is in possession of the cockroach\nRule2: If the swordfish purchased a time machine, then it becomes an enemy of the baboon\nRule3: The baboon does not become an actual enemy of the lobster whenever at least one animal burns the warehouse of the cockroach\nRule4: If the swordfish has a card and the color of the card is one of the rainbow colors, then it becomes an actual enemy of the baboon.\n\nThe current state of the game is as follows\nThe name of the hare is Paco\nThe name of the starfish is Pashmak\nThe swordfish has a card that is yellow in color\nThe swordfish invented a time machine.\n\nBased on the game state and the rules and preferences, does the baboon become an enemy of the lobster?\nQuestion: Does the baboon become an enemy of the lobster?",
        "idx": 184,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hare has a name whose first letter is the same as the first letter of the starfish's name, then the hare burns the warehouse that is in possession of the cockroach\nrule1() = first_letter_of(name(hare)) == first_letter_of(name(starfish)) => burn_warehouse(hare, cockroach)\n# Rule2: If the swordfish purchased a time machine, then the swordfish becomes an enemy of the baboon\nrule2() = purchased(swordfish, time_machine) => become_enemy(swordfish, baboon)\n# Rule3: The baboon does not become an actual enemy of the lobster whenever at least one animal burns the warehouse of the cockroach\nrule3() = not burn_warehouse(something, cockroach) => not become_enemy(baboon, lobster)\n# Rule4: Regarding the swordfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it becomes an actual enemy of the baboon.\nrule4() = has(swordfish, card) and color(card) in rainbow_colors => become_enemy(swordfish, baboon)\n\n# The current state of the game is as follows\n# The hare is named Paco\nname(hare, Paco) = True\n# The starfish is named Pashmak\nname(starfish, Pashmak) = True\n# The swordfish has a card that is yellow in color, and invented a time machine.\nhas(swordfish, card) = True\ncolor(card, yellow) = True\ninvented(swordfish, time_machine) = True\n\n# Based on the game state and the rules and preferences, does the baboon become an enemy of the lobster?\nquestion = become_enemy(baboon, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the viperfish is the same as the first letter of the name of the kangaroo, then the viperfish does not raise a peace flag for the wolverine\nRule2: If the viperfish raises a peace flag for the wolverine and the polar bear learns elementary resource management from the wolverine, then the conclusion is \"the wolverine proceeds to the spot that is right after the spot of the panther\"\nRule3: If the donkey shows all her cards to the polar bear, then the polar bear learns the basics of resource management from the wolverine\nRule4: If the viperfish owns a luxury aircraft, then the viperfish does not raise a peace flag for the wolverine.\n\nThe current state of the game is as follows\nThe donkey shows all her cards to the polar bear\nThe name of the kangaroo is Lucy\nThe viperfish owns a luxury aircraft\nThe name of the viperfish is Lola\n\nBased on the game state and the rules and preferences, does the wolverine proceed to the spot right after the panther?\nQuestion: Does the wolverine proceed to the spot that is right after the spot of the panther?",
        "idx": 185,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the viperfish has a name whose first letter is the same as the first letter of the kangaroo's name, then the viperfish does not raise a peace flag for the wolverine\nrule1() = first_letter_of(name(viperfish)) == first_letter_of(name(kangaroo)) => not raise_flag_of_peace(viperfish, wolverine)\n# Rule2: For the wolverine, if the belief is that the viperfish raises a peace flag for the wolverine and the polar bear learns elementary resource management from the wolverine, then you can add \"the wolverine proceeds to the spot that is right after the spot of the panther\" to your conclusions\nrule2() = raise_flag_of_peace(viperfish, wolverine) & learns(polar_bear, elementary_resource_management, wolverine) => add_conclusion(\"the wolverine proceeds to the spot that is right after the spot of the panther\")\n# Rule3: The polar bear unquestionably learns the basics of resource management from the wolverine, in the case where the donkey shows all her cards to the polar bear\nrule3() = shows_all_cards(donkey, polar_bear) => learns(polar_bear, basics_of_resource_management, wolverine)\n# Rule4: If the viperfish owns a luxury aircraft, then the viperfish does not raise a peace flag for the wolverine.\nrule4() = owns(viperfish, luxury_aircraft) => not raise_flag_of_peace(viperfish, wolverine)\n\n# The current state of the game is as follows\n# The donkey shows all her cards to the polar bear\nshows_all_cards(donkey, polar_bear) = True\n# The kangaroo is named Lucy\nname(kangaroo, Lucy) = True\n# The viperfish dreamed of a luxury aircraft, and is named Lola.\nowns(viperfish, luxury_aircraft) = True\nname(viperfish, Lola) = True\n\n# Based on the game state and the rules and preferences, does the wolverine proceed to the spot right after the panther?\nquestion = \"the wolverine proceeds to the spot that is right after the spot of the panther\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo is a fan of Chris Ronaldo, then it attacks the green fields of the aardvark\nRule2: If the kangaroo has a card with a primary color, then it does not attack the green fields of the aardvark\nRule3: If the kudu owns a luxury aircraft, then it respects the dog\nRule4: If something attacks the green fields of the aardvark, then the kudu gives a magnifying glass to the sheep\nRule5: If the kangaroo has fewer than six friends, then it attacks the green fields of the aardvark\nRule6: If the first letter of the name of the kudu is the same as the first letter of the name of the pig, then the kudu respects the dog\nRule7: If something does not prepare armor for the jellyfish but it respects the dog, then it does not give a magnifier to the sheep.\n\nRule1 is preferred over Rule2\nRule5 is preferred over Rule2\nRule7 is preferred over Rule4\n\nThe current state of the game is as follows\nThe kangaroo has a beer\nThe kangaroo has 15 friends\nThe kangaroo supports Chris Ronaldo\nThe kangaroo has a card that is red in color\nThe kudu dreamed of a luxury aircraft\nThe kudu has a computer\nThe kudu has romaine lettuce\nThe name of the kudu is Max\nThe name of the pig is Meadow\n\nBased on the game state and the rules and preferences, does the kudu give a magnifier to the sheep?\nQuestion: Does the kudu give a magnifier to the sheep?",
        "idx": 186,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kangaroo, if it is a fan of Chris Ronaldo, then we can conclude that it attacks the green fields of the aardvark\nrule1() = fan_of(kangaroo, Chris_Ronaldo) => attack(kangaroo, green_fields, aardvark)\n# Rule2: Regarding the kangaroo, if it has a card with a primary color, then we can conclude that it does not attack the green fields of the aardvark\nrule2() = has(kangaroo, card) and color(card) in primary_colors => not attack(kangaroo, green_fields, aardvark)\n# Rule3: Regarding the kudu, if it owns a luxury aircraft, then we can conclude that it respects the dog\nrule3() = owns(kudu, luxury_aircraft) => respect(kudu, dog)\n# Rule4: If at least one animal attacks the green fields of the aardvark, then the kudu gives a magnifying glass to the sheep\nrule4() = attack(something, green_fields, aardvark) => give(kudu, magnifying_glass, sheep)\n# Rule5: If the kangaroo has fewer than six friends, then the kangaroo attacks the green fields of the aardvark\nrule5() = friends(kangaroo) < 6 => attack(kangaroo, green_fields, aardvark)\n# Rule6: Regarding the kudu, if it has a name whose first letter is the same as the first letter of the pig's name, then we can conclude that it respects the dog\nrule6() = first_letter_of(name(kudu)) == first_letter_of(name(pig)) => respect(kudu, dog)\n# Rule7: If you see that something does not prepare armor for the jellyfish but it respects the dog, what can you certainly conclude? You can conclude that it is not going to give a magnifier to the sheep.\nrule7(something) = not prepare_armor(something, jellyfish) & respect(something, dog) => not give(something, magnifying_glass, sheep)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n\n# The current state of the game is as follows\n# The kangaroo has a beer, has fifteen friends, and supports Chris Ronaldo\nhas(kangaroo, beer) = True\nfriends(kangaroo) = 15\nsupports(kangaroo, Chris_Ronaldo) = True\n# The kangaroo has a card that is red in color\nhas(kangaroo, card) = True\ncolor(card, red) = True\n# The kudu dreamed of a luxury aircraft, and has a computer\ndream(kudu, luxury_aircraft) = True\nhas(kudu, computer) = True\n# The kudu has some romaine lettuce, and is named Max\nhas(kudu, romaine_lettuce) = True\nname(kudu, Max) = True\n# The pig is named Meadow.\nname(pig, Meadow) = True\n\n# Based on the game state and the rules and preferences, does the kudu give a magnifier to the sheep?\nquestion = give(kudu, magnifying_glass, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The halibut will not attack the green fields of the cockroach, in the case where the black bear does not need the support of the halibut\nRule2: If the halibut attacks the green fields whose owner is the cockroach, then the cockroach is not going to burn the warehouse of the parrot\nRule3: If something proceeds to the spot that is right after the spot of the gecko, then the cockroach does not respect the panther\nRule4: If the tilapia does not roll the dice for the cockroach and the zander does not attack the green fields of the cockroach, then the cockroach respects the panther\nRule5: If something knocks down the fortress of the doctorfish and respects the panther, then it burns the warehouse that is in possession of the parrot\nRule6: If the halibut has a musical instrument, then it attacks the green fields whose owner is the cockroach.\n\nRule1 is preferred over Rule6\nRule3 is preferred over Rule4\nRule5 is preferred over Rule2\n\nThe current state of the game is as follows\nThe halibut has a trumpet\nThe tilapia does not roll the dice for the cockroach\nThe zander does not attack the green fields whose owner is the cockroach.\n\nBased on the game state and the rules and preferences, does the cockroach burn the warehouse of the parrot?\nQuestion: Does the cockroach burn the warehouse of the parrot?",
        "idx": 187,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The halibut will not attack the green fields of the cockroach, in the case where the black bear does not need the support of the halibut\nrule1() = not need_support(black_bear, halibut) => not attack(halibut, green_fields, cockroach)\n# Rule2: If the halibut attacks the green fields whose owner is the cockroach, then the cockroach is not going to burn the warehouse of the parrot\nrule2() = attack(halibut, green_fields, cockroach) => not burn(warehouse, parrot)\n# Rule3: If at least one animal proceeds to the spot that is right after the spot of the gecko, then the cockroach does not respect the panther\nrule3(something) = proceed(something, spot_after(gecko)) => not respect(cockroach, panther)\n# Rule4: For the cockroach, if the belief is that the tilapia does not roll the dice for the cockroach and the zander does not attack the green fields of the cockroach, then you can add \"the cockroach respects the panther\" to your conclusions\nrule4() = not roll_dice(tilapia, cockroach) & not attack(zander, green_fields, cockroach) => respect(cockroach, panther)\n# Rule5: If you see that something knocks down the fortress of the doctorfish and respects the panther, what can you certainly conclude? You can conclude that it also burns the warehouse that is in possession of the parrot\nrule5(something) = knock_down(something, fortress, doctorfish) & respect(something, panther) => burn(warehouse, parrot)\n# Rule6: Regarding the halibut, if it has a musical instrument, then we can conclude that it attacks the green fields whose owner is the cockroach.\nrule6() = has(halibut, musical_instrument) => attack(halibut, green_fields, cockroach)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n\n# The current state of the game is as follows\n# The halibut has a trumpet\nhas(halibut, trumpet) = True\n# The tilapia does not roll the dice for the cockroach\nroll_dice(tilapia, cockroach) = False\n# The zander does not attack the green fields whose owner is the cockroach.\nattack(zander, green_fields, cockroach) = False\n\n# Based on the game state and the rules and preferences, does the cockroach burn the warehouse of the parrot?\nquestion = burn(warehouse, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something burns the warehouse of the raven and sings a victory song for the panda bear, then it attacks the green fields of the baboon\nRule2: If something does not knock down the fortress of the aardvark, then it gives a magnifier to the raven\nRule3: If something does not prepare armor for the donkey, then it sings a song of victory for the panda bear.\n\nThe current state of the game is as follows\nThe pig does not knock down the fortress of the aardvark, and does not prepare armor for the donkey.\n\nBased on the game state and the rules and preferences, does the pig attack the green fields whose owner is the baboon?\nQuestion: Does the pig attack the green fields whose owner is the baboon?",
        "idx": 188,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something burns the warehouse of the raven and sings a victory song for the panda bear, what can you certainly conclude? You can conclude that it also attacks the green fields of the baboon\nrule1() = burn(warehouse, raven) & sing_victory_song(something, panda_bear) => attack(green_fields, baboon)\n# Rule2: If something does not knock down the fortress of the aardvark, then it gives a magnifier to the raven\nrule2() = not knock_down(fortress, aardvark) => give(something, magnifier, raven)\n# Rule3: If something does not prepare armor for the donkey, then it sings a song of victory for the panda bear.\nrule3() = not prepare_armor(something, donkey) => sing_victory_song(something, panda_bear)\n\n# The current state of the game is as follows\n# The pig does not knock down the fortress of the aardvark, and does not prepare armor for the donkey.\nnot knock_down(fortress, aardvark) = True\nnot prepare_armor(pig, donkey) = True\n\n# Based on the game state and the rules and preferences, does the pig attack the green fields whose owner is the baboon?\nquestion = attack(green_fields, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not prepare armor for the ferret, then it raises a peace flag for the rabbit\nRule2: If the meerkat has a card with a primary color, then it steals five of the points of the cheetah\nRule3: If something steals five of the points of the cheetah, then it burns the warehouse that is in possession of the catfish.\n\nThe current state of the game is as follows\nThe meerkat has a card that is red in color\nThe eel does not prepare armor for the ferret.\n\nBased on the game state and the rules and preferences, does the meerkat burn the warehouse of the catfish?\nQuestion: Does the meerkat burn the warehouse of the catfish?",
        "idx": 189,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not prepare armor for the ferret, then it raises a peace flag for the rabbit\nrule1(something) = not prepare_armor(something, ferret) => raise_flag_of_peace(something, rabbit)\n# Rule2: Regarding the meerkat, if it has a card with a primary color, then we can conclude that it steals five of the points of the cheetah\nrule2() = has(meerkat, card) and color(card) in primary_colors => steal_points(meerkat, 5, cheetah)\n# Rule3: If you are positive that you saw one of the animals steals five of the points of the cheetah, you can be certain that it will also burn the warehouse that is in possession of the catfish.\nrule3(something) = steal_points(something, 5, cheetah) => burn_warehouse(something, catfish)\n\n# The current state of the game is as follows\n# The meerkat has a card that is red in color\nhas(meerkat, card) = True\ncolor(card, red) = True\n# The eel does not prepare armor for the ferret.\nprepare_armor(eel, ferret) = False\n\n# Based on the game state and the rules and preferences, does the meerkat burn the warehouse of the catfish?\nquestion = burn_warehouse(meerkat, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job position to the penguin, then it will not learn the basics of resource management from the cricket\nRule2: If the hummingbird has something to drink, then it offers a job position to the penguin\nRule3: If the hummingbird is a fan of Chris Ronaldo, then it offers a job position to the penguin\nRule4: If the bat does not attack the green fields whose owner is the cockroach, then the cockroach removes one of the pieces of the hummingbird\nRule5: If the sheep does not have her keys, then it needs the support of the hummingbird.\n\nThe current state of the game is as follows\nThe cow holds the same number of points as the starfish\nThe hummingbird has a hot chocolate\nThe hummingbird hates Chris Ronaldo\nThe sheep lost her keys\nThe bat does not attack the green fields whose owner is the cockroach.\n\nBased on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the cricket?\nQuestion: Does the hummingbird learn the basics of resource management from the cricket?",
        "idx": 190,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals offers a job position to the penguin, you can be certain that it will not learn the basics of resource management from the cricket\nrule1(something) = saw(something, offer_job_position, penguin) => not learn(something, basics_of_resource_management, cricket)\n# Rule2: If the hummingbird has something to drink, then the hummingbird offers a job to the penguin\nrule2() = has(hummingbird, drink) => offer_job_position(hummingbird, penguin)\n# Rule3: Regarding the hummingbird, if it is a fan of Chris Ronaldo, then we can conclude that it offers a job position to the penguin\nrule3() = fan_of(hummingbird, Chris_Ronaldo) => offer_job_position(hummingbird, penguin)\n# Rule4: If the bat does not attack the green fields whose owner is the cockroach, then the cockroach removes one of the pieces of the hummingbird\nrule4() = not attack(bat, green_fields, owner=cockroach) => remove_piece(cockroach, hummingbird)\n# Rule5: Regarding the sheep, if it does not have her keys, then we can conclude that it needs the support of the hummingbird.\nrule5() = not have(sheep, keys) => need_support(sheep, hummingbird)\n\n# The current state of the game is as follows\n# The cow holds the same number of points as the starfish\npoints(cow) == points(starfish) = True\n# The hummingbird has a hot chocolate\nhas(hummingbird, hot_chocolate) = True\n# The hummingbird hates Chris Ronaldo\nhates(hummingbird, Chris_Ronaldo) = True\n# The sheep lost her keys\nhave(sheep, keys) = False\n# The bat does not attack the green fields whose owner is the cockroach.\nattack(bat, green_fields, owner=cockroach) = False\n\n# Based on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the cricket?\nquestion = learn(hummingbird, basics_of_resource_management, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the koala owes money to the polar bear, then the polar bear raises a flag of peace for the elephant\nRule2: If the leopard respects the koala and the lobster does not roll the dice for the koala, then the koala owes money to the polar bear\nRule3: If the kudu has a name whose first letter is the same as the first letter of the viperfish's name, then the kudu attacks the green fields of the snail.\n\nThe current state of the game is as follows\nThe name of the kudu is Lily\nThe leopard respects the koala\nThe lobster rolls the dice for the koala\nThe name of the viperfish is Lola\n\nBased on the game state and the rules and preferences, does the polar bear raise a peace flag for the elephant?\nQuestion: Does the polar bear raise a peace flag for the elephant?",
        "idx": 191,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The polar bear unquestionably raises a flag of peace for the elephant, in the case where the koala owes $$$ to the polar bear\nrule1() = owe(koala, money, polar_bear) => raise_flag_of_peace(polar_bear, elephant)\n# Rule2: If the leopard respects the koala and the lobster does not roll the dice for the koala, then, inevitably, the koala owes $$$ to the polar bear\nrule2() = respect(leopard, koala) & not roll_dice(lobster, koala) => owe(koala, money, polar_bear)\n# Rule3: If the kudu has a name whose first letter is the same as the first letter of the viperfish's name, then the kudu attacks the green fields of the snail.\nrule3() = first_letter_of(name(kudu)) == first_letter_of(name(viperfish)) => attack(kudu, green_fields, snail)\n\n# The current state of the game is as follows\n# The kudu is named Lily\nname(kudu, Lily) = True\n# The leopard respects the koala\nrespect(leopard, koala) = True\n# The lobster rolls the dice for the koala\nroll_dice(lobster, koala) = True\n# The viperfish is named Lola.\nname(viperfish, Lola) = True\n\n# Based on the game state and the rules and preferences, does the polar bear raise a peace flag for the elephant?\nquestion = raise_flag_of_peace(polar_bear, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the crocodile is the same as the first letter of the name of the canary, then the crocodile needs the support of the squid\nRule2: The squid does not know the defense plan of the doctorfish whenever something winks at the raven\nRule3: If the crocodile needs support from the squid and the kiwi does not owe money to the squid, then the squid knows the defense plan of the doctorfish\nRule4: If the kiwi has a high salary, then it does not owe money to the squid.\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe name of the canary is Lucy\nThe crocodile has a flute\nThe crocodile has 12 friends\nThe name of the crocodile is Lily\nThe kiwi got a well-paid job.\n\nBased on the game state and the rules and preferences, does the squid know the defensive plans of the doctorfish?\nQuestion: Does the squid know the defensive plans of the doctorfish?",
        "idx": 192,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the crocodile, if it has a name whose first letter is the same as the first letter of the canary's name, then we can conclude that it needs the support of the squid\nrule1() = first_letter_of(name(crocodile)) == first_letter_of(name(canary)) => needs_support(crocodile, squid)\n# Rule2: The squid does not know the defense plan of the doctorfish whenever at least one animal winks at the raven\nrule2() = winked_at(something, raven) => not know(squid, defense_plan, doctorfish)\n# Rule3: For the squid, if the belief is that the crocodile needs support from the squid and the kiwi does not owe money to the squid, then you can add \"the squid knows the defense plan of the doctorfish\" to your conclusions\nrule3() = needs_support(crocodile, squid) & not owe(kiwi, money, squid) => know(squid, defense_plan, doctorfish)\n# Rule4: Regarding the kiwi, if it has a high salary, then we can conclude that it does not owe $$$ to the squid.\nrule4() = has_high_salary(kiwi) => not owe(kiwi, money, squid)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The canary is named Lucy\nname(canary, Lucy) = True\n# The crocodile has a flute, has twelve friends, and is named Lily\nhas(crocodile, flute) = True\nfriends(crocodile) = 12\nname(crocodile, Lily) = True\n# The kiwi got a well-paid job.\ngot_job(kiwi, well_paid) = True\n\n# Based on the game state and the rules and preferences, does the squid know the defensive plans of the doctorfish?\nquestion = know(squid, defense_plan, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the swordfish has a musical instrument, then it steals five points from the hummingbird\nRule2: The hummingbird does not roll the dice for the eagle, in the case where the swordfish steals five points from the hummingbird.\n\nThe current state of the game is as follows\nThe swordfish has a cello.\n\nBased on the game state and the rules and preferences, does the hummingbird roll the dice for the eagle?\nQuestion: Does the hummingbird roll the dice for the eagle?",
        "idx": 193,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the swordfish, if it has a musical instrument, then we can conclude that it steals five of the points of the hummingbird\nrule1() = has(swordfish, musical_instrument) => steal_points(swordfish, 5, hummingbird)\n# Rule2: The hummingbird does not roll the dice for the eagle, in the case where the swordfish steals five points from the hummingbird.\nrule2() = steal_points(swordfish, 5, hummingbird) => not roll_dice(hummingbird, eagle)\n\n# The current state of the game is as follows\n# The swordfish has a cello.\nhas(swordfish, cello) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird roll the dice for the eagle?\nquestion = roll_dice(hummingbird, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The black bear will not learn the basics of resource management from the hippopotamus, in the case where the blobfish does not raise a peace flag for the black bear\nRule2: If the belief is that the hare is not going to roll the dice for the hippopotamus but the sea bass steals five points from the hippopotamus, then you can add that \"the hippopotamus is not going to wink at the crocodile\" to your conclusions\nRule3: The sea bass does not steal five points from the hippopotamus whenever at least one animal attacks the green fields of the ferret\nRule4: If the black bear learns elementary resource management from the hippopotamus, then the hippopotamus winks at the crocodile\nRule5: If the swordfish does not knock down the fortress that belongs to the black bear, then the black bear learns elementary resource management from the hippopotamus\nRule6: If the first letter of the name of the sea bass is the same as the first letter of the name of the starfish, then the sea bass steals five of the points of the hippopotamus\nRule7: If the sea bass killed the mayor, then the sea bass steals five of the points of the hippopotamus.\n\nRule1 is preferred over Rule5\nRule3 is preferred over Rule6\nRule3 is preferred over Rule7\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe blobfish holds the same number of points as the black bear\nThe sea bass assassinated the mayor\nThe name of the sea bass is Tango\nThe name of the starfish is Tessa\nThe swordfish does not need support from the black bear.\n\nBased on the game state and the rules and preferences, does the hippopotamus wink at the crocodile?\nQuestion: Does the hippopotamus wink at the crocodile?",
        "idx": 194,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The black bear will not learn the basics of resource management from the hippopotamus, in the case where the blobfish does not raise a peace flag for the black bear\nrule1() = not raise_flag_of_peace(blobfish, black_bear) => not learn(black_bear, basics_of_resource_management, hippopotamus)\n# Rule2: For the hippopotamus, if the belief is that the hare is not going to roll the dice for the hippopotamus but the sea bass steals five points from the hippopotamus, then you can add that \"the hippopotamus is not going to wink at the crocodile\" to your conclusions\nrule2() = not roll_dice(hare, hippopotamus) & steal_points(sea_bass, 5, hippopotamus) => not wink(hippopotamus, crocodile)\n# Rule3: The sea bass does not steal five points from the hippopotamus whenever at least one animal attacks the green fields of the ferret\nrule3() = attack(something, green_fields, ferret) => not steal_points(sea_bass, 5, hippopotamus)\n# Rule4: If the black bear learns elementary resource management from the hippopotamus, then the hippopotamus winks at the crocodile\nrule4() = learn(black_bear, elementary_resource_management, hippopotamus) => wink(hippopotamus, crocodile)\n# Rule5: If the swordfish does not knock down the fortress that belongs to the black bear, then the black bear learns elementary resource management from the hippopotamus\nrule5() = not knock_down(swordfish, fortress, black_bear) => learn(black_bear, elementary_resource_management, hippopotamus)\n# Rule6: Regarding the sea bass, if it has a name whose first letter is the same as the first letter of the starfish's name, then we can conclude that it steals five of the points of the hippopotamus\nrule6() = first_letter_of(name(sea_bass)) == first_letter_of(name(starfish)) => steal_points(sea_bass, 5, hippopotamus)\n# Rule7: If the sea bass killed the mayor, then the sea bass steals five of the points of the hippopotamus.\nrule7() = killed(sea_bass, mayor) => steal_points(sea_bass, 5, hippopotamus)\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The blobfish holds the same number of points as the black bear\npoints(blobfish) == points(black_bear) = True\n# The sea bass assassinated the mayor\nkilled(sea_bass, mayor) = True\n# The sea bass is named Tango\nname(sea_bass, Tango) = True\n# The starfish is named Tessa\nname(starfish, Tessa) = True\n# The swordfish does not need support from the black bear.\nneed_support(swordfish, black_bear) = False\n\n# Based on the game state and the rules and preferences, does the hippopotamus wink at the crocodile?\nquestion = wink(hippopotamus, crocodile)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon has a high-quality paper, then it offers a job position to the panther\nRule2: If the baboon has a leafy green vegetable, then it offers a job to the panther\nRule3: If the salmon rolls the dice for the panther and the baboon offers a job to the panther, then the panther raises a peace flag for the kudu\nRule4: If the caterpillar removes one of the pieces of the salmon, then the salmon rolls the dice for the panther.\n\nThe current state of the game is as follows\nThe baboon has a computer and published a high-quality paper\nThe caterpillar removes one of the pieces of the salmon.\n\nBased on the game state and the rules and preferences, does the panther raise a peace flag for the kudu?\nQuestion: Does the panther raise a peace flag for the kudu?",
        "idx": 195,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the baboon has a high-quality paper, then the baboon offers a job position to the panther\nrule1() = has(baboon, high_quality_paper) => offer_job_position(baboon, panther)\n# Rule2: If the baboon has a leafy green vegetable, then the baboon offers a job to the panther\nrule2() = has(baboon, leafy_green_vegetable) => offer_job_position(baboon, panther)\n# Rule3: For the panther, if the belief is that the salmon rolls the dice for the panther and the baboon offers a job to the panther, then you can add \"the panther raises a peace flag for the kudu\" to your conclusions\nrule3() = belief(salmon_rolls_dice_for(panther)) & offer_job_position(baboon, panther) => raise_flag_of_peace(panther, kudu)\n# Rule4: The salmon unquestionably rolls the dice for the panther, in the case where the caterpillar removes one of the pieces of the salmon.\nrule4() = remove(caterpillar, piece, salmon) => rolls_dice(salmon, panther)\n\n# The current state of the game is as follows\n# The baboon has a computer, and published a high-quality paper\nhas(baboon, computer) = True\npublished(baboon, high_quality_paper) = True\n# The caterpillar removes from the board one of the pieces of the salmon.\nremove(caterpillar, piece, salmon) = True\n\n# Based on the game state and the rules and preferences, does the panther raise a peace flag for the kudu?\nquestion = raise_flag_of_peace(panther, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion has more than 1 friend, then it knows the defensive plans of the goldfish\nRule2: If the turtle does not become an actual enemy of the goldfish and the lion does not know the defensive plans of the goldfish, then the goldfish does not attack the green fields of the parrot\nRule3: If the eagle owes money to the lion, then the lion does not know the defense plan of the goldfish\nRule4: If something eats the food that belongs to the donkey, then it becomes an actual enemy of the goldfish\nRule5: If the squid gives a magnifier to the turtle, then the turtle is not going to become an actual enemy of the goldfish.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe eagle owes money to the lion\nThe squid gives a magnifier to the turtle.\n\nBased on the game state and the rules and preferences, does the goldfish attack the green fields whose owner is the parrot?\nQuestion: Does the goldfish attack the green fields whose owner is the parrot?",
        "idx": 196,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lion has more than 1 friend, then the lion knows the defensive plans of the goldfish\nrule1() = friends(lion) > 1 => knows(lion, defensive_plans, goldfish)\n# Rule2: For the goldfish, if the belief is that the turtle does not become an actual enemy of the goldfish and the lion does not know the defensive plans of the goldfish, then you can add \"the goldfish does not attack the green fields of the parrot\" to your conclusions\nrule2() = not become_enemy(turtle, goldfish) & not knows(lion, defensive_plans, goldfish) => not attack(goldfish, green_fields, parrot)\n# Rule3: The lion does not know the defense plan of the goldfish, in the case where the eagle owes $$$ to the lion\nrule3() = owe(eagle, money, lion) => not knows(lion, defensive_plans, goldfish)\n# Rule4: If you are positive that you saw one of the animals eats the food that belongs to the donkey, you can be certain that it will also become an actual enemy of the goldfish\nrule4(something) = eat_food(something, food_of(donkey)) => become_enemy(something, goldfish)\n# Rule5: If the squid gives a magnifier to the turtle, then the turtle is not going to become an actual enemy of the goldfish.\nrule5() = give(squid, magnifier, turtle) => not become_enemy(turtle, goldfish)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The eagle owes money to the lion\nowe(eagle, money, lion) = True\n# The squid gives a magnifier to the turtle.\ngive(squid, magnifier, turtle) = True\n\n# Based on the game state and the rules and preferences, does the goldfish attack the green fields whose owner is the parrot?\nquestion = attack(goldfish, green_fields, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the salmon does not sing a victory song for the amberjack, then the amberjack rolls the dice for the baboon\nRule2: If something raises a peace flag for the grasshopper, then the salmon sings a victory song for the amberjack\nRule3: If the first letter of the name of the salmon is the same as the first letter of the name of the elephant, then the salmon does not sing a victory song for the amberjack.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe name of the elephant is Lola\nThe rabbit proceeds to the spot right after the grasshopper\nThe name of the salmon is Meadow.\n\nBased on the game state and the rules and preferences, does the amberjack roll the dice for the baboon?\nQuestion: Does the amberjack roll the dice for the baboon?",
        "idx": 197,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the salmon does not sing a victory song for the amberjack, then the amberjack rolls the dice for the baboon\nrule1() = not sing_victory_song(salmon, amberjack) => roll_dice(amberjack, baboon)\n# Rule2: If at least one animal raises a peace flag for the grasshopper, then the salmon sings a victory song for the amberjack\nrule2() = raise_flag_of_peace(something, grasshopper) => sing_victory_song(salmon, amberjack)\n# Rule3: If the salmon has a name whose first letter is the same as the first letter of the elephant's name, then the salmon does not sing a victory song for the amberjack.\nrule3() = first_letter_of(name(salmon)) == first_letter_of(name(elephant)) => not sing_victory_song(salmon, amberjack)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The elephant is named Lola\nname(elephant, Lola) = True\n# The rabbit proceeds to the spot right after the grasshopper\nproceeds_to_spot(rabbit, right_after(grasshopper)) = True\n# The salmon is named Meadow.\nname(salmon, Meadow) = True\n\n# Based on the game state and the rules and preferences, does the amberjack roll the dice for the baboon?\nquestion = roll_dice(amberjack, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squirrel has a card whose color appears in the flag of Netherlands, then it shows all her cards to the turtle\nRule2: The catfish knows the defensive plans of the elephant whenever at least one animal shows all her cards to the turtle\nRule3: If the grizzly bear needs support from the catfish, then the catfish is not going to burn the warehouse that is in possession of the octopus\nRule4: If the hummingbird prepares armor for the catfish and the polar bear respects the catfish, then the catfish offers a job position to the buffalo\nRule5: If the first letter of the name of the catfish is the same as the first letter of the name of the goldfish, then the catfish burns the warehouse of the octopus\nRule6: If the squirrel voted for the mayor, then it shows all her cards to the turtle\nRule7: If the catfish has a musical instrument, then it does not offer a job position to the buffalo\nRule8: If the catfish has something to carry apples and oranges, then the catfish burns the warehouse that is in possession of the octopus.\n\nRule3 is preferred over Rule5\nRule3 is preferred over Rule8\nRule7 is preferred over Rule4\n\nThe current state of the game is as follows\nThe catfish has a knapsack\nThe name of the catfish is Tango\nThe name of the goldfish is Pashmak\nThe hummingbird prepares armor for the catfish\nThe polar bear respects the catfish\nThe squirrel assassinated the mayor\nThe squirrel has a white card\nThe squirrel does not roll the dice for the phoenix.\n\nBased on the game state and the rules and preferences, does the catfish know the defensive plans of the elephant?\nQuestion: Does the catfish know the defensive plans of the elephant?",
        "idx": 198,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the squirrel, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it shows her cards (all of them) to the turtle\nrule1() = has(squirrel, card) and color(card) in flag_colors(Netherlands) => show_cards(squirrel, all, turtle)\n# Rule2: The catfish knows the defensive plans of the elephant whenever at least one animal shows all her cards to the turtle\nrule2() = show_cards(something, all, turtle) => knows(catfish, defensive_plans, elephant)\n# Rule3: If the grizzly bear needs support from the catfish, then the catfish is not going to burn the warehouse that is in possession of the octopus\nrule3() = needs_support(grizzly_bear, catfish) => not burn_warehouse(catfish, octopus)\n# Rule4: If the hummingbird prepares armor for the catfish and the polar bear respects the catfish, then the catfish offers a job position to the buffalo\nrule4() = prepare_armor(hummingbird, catfish) & respect(polar_bear, catfish) => offer_job_position(catfish, buffalo)\n# Rule5: If the catfish has a name whose first letter is the same as the first letter of the goldfish's name, then the catfish burns the warehouse of the octopus\nrule5() = first_letter_of(name(catfish)) == first_letter_of(name(goldfish)) => burn_warehouse(catfish, octopus)\n# Rule6: If the squirrel voted for the mayor, then the squirrel shows all her cards to the turtle\nrule6() = voted(squirrel, mayor) => show_cards(squirrel, all, turtle)\n# Rule7: If the catfish has a musical instrument, then the catfish does not offer a job position to the buffalo\nrule7() = has(catfish, musical_instrument) => not offer_job_position(catfish, buffalo)\n# Rule8: If the catfish has something to carry apples and oranges, then the catfish burns the warehouse that is in possession of the octopus.\nrule8() = has(catfish, something_to_carry_apples_and_oranges) => burn_warehouse(catfish, octopus)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule3 is preferred over Rule8\norder(rule3) > order(rule8) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n\n# The current state of the game is as follows\n# The catfish has a knapsack, and is named Tango\nhas(catfish, knapsack) = True\nname(catfish, Tango) = True\n# The goldfish is named Pashmak\nname(goldfish, Pashmak) = True\n# The hummingbird prepares armor for the catfish\nprepare_armor(hummingbird, catfish) = True\n# The polar bear respects the catfish\nrespect(polar_bear, catfish) = True\n# The squirrel assassinated the mayor, has a card that is white in color, and does not roll the dice for the phoenix.\nassassinated(squirrel, mayor) = True\nhas(squirrel, card) = True\ncolor(card, white) = True\nnot roll_dice(squirrel, phoenix) = True\n\n# Based on the game state and the rules and preferences, does the catfish know the defensive plans of the elephant?\nquestion = knows(catfish, defensive_plans, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knocks down the fortress that belongs to the carp, then it does not raise a peace flag for the cat\nRule2: If the dog has more than twenty friends, then it raises a peace flag for the cat\nRule3: If the dog has a musical instrument, then it raises a peace flag for the cat\nRule4: If the dog has a card whose color appears in the flag of Japan, then it sings a song of victory for the parrot\nRule5: If something raises a peace flag for the cat and sings a song of victory for the parrot, then it does not offer a job to the snail.\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe dog has a red card and a violin\nThe dog has ten friends.\n\nBased on the game state and the rules and preferences, does the dog offer a job to the snail?\nQuestion: Does the dog offer a job to the snail?",
        "idx": 199,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals knocks down the fortress that belongs to the carp, you can be certain that it will not raise a peace flag for the cat\nrule1(something) = knocks_down(something, fortress_of(carp)) => not raise_flag_of_peace(something, cat)\n# Rule2: Regarding the dog, if it has more than twenty friends, then we can conclude that it raises a flag of peace for the cat\nrule2() = friends(dog) > 20 => raise_flag_of_peace(dog, cat)\n# Rule3: Regarding the dog, if it has a musical instrument, then we can conclude that it raises a flag of peace for the cat\nrule3() = has(dog, musical_instrument) => raise_flag_of_peace(dog, cat)\n# Rule4: If the dog has a card whose color appears in the flag of Japan, then the dog sings a song of victory for the parrot\nrule4() = has(dog, card) and color(card) in flag_colors(japan) => sing_song_of_victory(dog, parrot)\n# Rule5: If you see that something raises a flag of peace for the cat and sings a song of victory for the parrot, what can you certainly conclude? You can conclude that it does not offer a job to the snail.\nrule5(something) = raise_flag_of_peace(something, cat) & sing_song_of_victory(something, parrot) => not offer_job_position(something, snail)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The dog has a card that is red in color, and has a violin\nhas(dog, card) = True\ncolor(card, red) = True\nhas(dog, violin) = True\n# The dog has ten friends.\nfriends(dog) = 10\n\n# Based on the game state and the rules and preferences, does the dog offer a job to the snail?\nquestion = offer_job_position(dog, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the cow starts with the same letter as the name of the viperfish, then the cow does not learn elementary resource management from the spider\nRule2: If something raises a flag of peace for the eel and steals five points from the amberjack, then it learns elementary resource management from the spider\nRule3: If the dog has fewer than seven friends, then it becomes an enemy of the spider\nRule4: If the dog took a bike from the store, then it becomes an enemy of the spider\nRule5: If the cow does not learn elementary resource management from the spider and the dog becomes an enemy of the spider, then the spider knows the defensive plans of the puffin.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cow raises a peace flag for the eel\nThe cow steals five points from the amberjack\nThe dog has 16 friends\nThe dog stole a bike from the store\nThe name of the viperfish is Max.\n\nBased on the game state and the rules and preferences, does the spider know the defensive plans of the puffin?\nQuestion: Does the spider know the defensive plans of the puffin?",
        "idx": 200,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cow, if it has a name whose first letter is the same as the first letter of the viperfish's name, then we can conclude that it does not learn elementary resource management from the spider\nrule1() = first_letter_of(name(cow)) == first_letter_of(name(viperfish)) => not learn(cow, elementary_resource_management, spider)\n# Rule2: If you see that something raises a flag of peace for the eel and steals five points from the amberjack, what can you certainly conclude? You can conclude that it also learns elementary resource management from the spider\nrule2() = raise_flag_of_peace(something, eel) & steal_points(something, 5, amberjack) => learn(something, elementary_resource_management, spider)\n# Rule3: Regarding the dog, if it has fewer than seven friends, then we can conclude that it becomes an actual enemy of the spider\nrule3() = friends(dog) < 7 => become_enemy(dog, spider)\n# Rule4: Regarding the dog, if it took a bike from the store, then we can conclude that it becomes an enemy of the spider\nrule4() = took(dog, bike, store) => become_enemy(dog, spider)\n# Rule5: For the spider, if the belief is that the cow does not learn elementary resource management from the spider but the dog becomes an enemy of the spider, then you can add \"the spider knows the defensive plans of the puffin\" to your conclusions.\nrule5() = not learn(cow, elementary_resource_management, spider) & become_enemy(dog, spider) => know(spider, defensive_plans, puffin)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cow raises a peace flag for the eel\nraise_flag_of_peace(cow, eel) = True\n# The cow steals five points from the amberjack\nsteal_points(cow, 5, amberjack) = True\n# The dog has 16 friends\nfriends(dog) = 16\n# The dog stole a bike from the store\ntook(dog, bike, store) = True\n# The viperfish is named Max.\nname(viperfish, Max) = True\n\n# Based on the game state and the rules and preferences, does the spider know the defensive plans of the puffin?\nquestion = know(spider, defensive_plans, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something steals five points from the kudu and offers a job to the hummingbird, then it owes money to the moose\nRule2: If the starfish does not burn the warehouse of the jellyfish, then the jellyfish offers a job position to the hummingbird\nRule3: If the first letter of the name of the jellyfish is the same as the first letter of the name of the cricket, then the jellyfish does not offer a job to the hummingbird\nRule4: If the jellyfish has a card whose color appears in the flag of France, then it steals five of the points of the kudu\nRule5: If the jellyfish has a musical instrument, then it does not offer a job to the hummingbird.\n\nRule3 is preferred over Rule2\nRule5 is preferred over Rule2\n\nThe current state of the game is as follows\nThe jellyfish has a cappuccino\nThe name of the jellyfish is Lucy\nThe jellyfish has a card that is red in color\nThe starfish does not burn the warehouse of the jellyfish.\n\nBased on the game state and the rules and preferences, does the jellyfish owe money to the moose?\nQuestion: Does the jellyfish owe money to the moose?",
        "idx": 201,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something steals five points from the kudu and offers a job to the hummingbird, what can you certainly conclude? You can conclude that it also owes money to the moose\nrule1() = steal_points(something, 5, kudu) & offer_job_position(something, hummingbird) => owe(something, money, moose)\n# Rule2: If the starfish does not burn the warehouse of the jellyfish, then the jellyfish offers a job position to the hummingbird\nrule2() = not burn(starfish, warehouse, jellyfish) => offer_job_position(jellyfish, hummingbird)\n# Rule3: If the jellyfish has a name whose first letter is the same as the first letter of the cricket's name, then the jellyfish does not offer a job to the hummingbird\nrule3() = first_letter_of(name(jellyfish)) == first_letter_of(name(cricket)) => not offer_job_position(jellyfish, hummingbird)\n# Rule4: Regarding the jellyfish, if it has a card whose color appears in the flag of France, then we can conclude that it steals five of the points of the kudu\nrule4() = has(jellyfish, card) and color(card) in flag_of_france_colors => steal_points(jellyfish, 5, kudu)\n# Rule5: If the jellyfish has a musical instrument, then the jellyfish does not offer a job to the hummingbird.\nrule5() = has(jellyfish, musical_instrument) => not offer_job_position(jellyfish, hummingbird)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n\n# The current state of the game is as follows\n# The jellyfish has a cappuccino, and is named Lucy\nhas(jellyfish, cappuccino) = True\nname(jellyfish, Lucy) = True\n# The jellyfish has a card that is red in color\nhas(jellyfish, card) = True\ncolor(card, red) = True\n# The starfish does not burn the warehouse of the jellyfish.\nburn(starfish, warehouse, jellyfish) = False\n\n# Based on the game state and the rules and preferences, does the jellyfish owe money to the moose?\nquestion = owe(jellyfish, money, moose)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something burns the warehouse of the gecko, then it offers a job position to the buffalo\nRule2: If the lobster has more than five friends, then it attacks the green fields of the halibut\nRule3: If the amberjack has a card with a primary color, then it steals five points from the halibut\nRule4: If the amberjack has a leafy green vegetable, then it steals five points from the halibut\nRule5: If the halibut has a card whose color appears in the flag of Netherlands, then it burns the warehouse of the gecko\nRule6: If the amberjack steals five points from the halibut and the lobster attacks the green fields whose owner is the halibut, then the halibut will not offer a job position to the buffalo\nRule7: If the amberjack has more than 18 friends, then it does not steal five points from the halibut\nRule8: If the first letter of the name of the halibut is the same as the first letter of the name of the koala, then it burns the warehouse of the gecko\nRule9: If the amberjack has a high salary, then it does not steal five points from the halibut.\n\nRule6 is preferred over Rule1\nRule7 is preferred over Rule3\nRule7 is preferred over Rule4\nRule9 is preferred over Rule3\nRule9 is preferred over Rule4\n\nThe current state of the game is as follows\nThe amberjack has a yellow card and some spinach\nThe amberjack has 10 friends\nThe halibut has a white card\nThe halibut does not show all her cards to the canary\nThe name of the halibut is Lily\nThe halibut raises a peace flag for the doctorfish\nThe name of the koala is Tango\nThe lobster has 3 bald friends and 3 non-bald friends.\n\nBased on the game state and the rules and preferences, does the halibut offer a job position to the buffalo?\nQuestion: Does the halibut offer a job position to the buffalo?",
        "idx": 202,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals burns the warehouse of the gecko, you can be certain that it will also offer a job to the buffalo\nrule1(something) = burns_warehouse(something, gecko) => offer_job_position(something, buffalo)\n# Rule2: Regarding the lobster, if it has more than five friends, then we can conclude that it attacks the green fields of the halibut\nrule2() = friends(lobster) > 5 => attacks(lobster, green_fields, halibut)\n# Rule3: If the amberjack has a card with a primary color, then the amberjack steals five points from the halibut\nrule3() = has(amberjack, card) and color(card) in primary_colors => steal_points(amberjack, 5, halibut)\n# Rule4: Regarding the amberjack, if it has a leafy green vegetable, then we can conclude that it steals five of the points of the halibut\nrule4() = has(amberjack, leafy_green_vegetable) => steal_points(amberjack, 5, halibut)\n# Rule5: If the halibut has a card whose color appears in the flag of Netherlands, then the halibut burns the warehouse of the gecko\nrule5() = has(halibut, card) and color(card) in colors_of(flag_of_Netherlands) => burns_warehouse(halibut, gecko)\n# Rule6: If the amberjack steals five of the points of the halibut and the lobster attacks the green fields whose owner is the halibut, then the halibut will not offer a job position to the buffalo\nrule6() = steal_points(amberjack, 5, halibut) & attacks(lobster, green_fields, halibut) => not offer_job_position(halibut, buffalo)\n# Rule7: Regarding the amberjack, if it has more than 18 friends, then we can conclude that it does not steal five of the points of the halibut\nrule7() = friends(amberjack) > 18 => not steal_points(amberjack, 5, halibut)\n# Rule8: Regarding the halibut, if it has a name whose first letter is the same as the first letter of the koala's name, then we can conclude that it burns the warehouse of the gecko\nrule8() = first_letter_of(name(halibut)) == first_letter_of(name(koala)) => burns_warehouse(halibut, gecko)\n# Rule9: If the amberjack has a high salary, then the amberjack does not steal five of the points of the halibut.\nrule9() = has(amberjack, high_salary) => not steal_points(amberjack, 5, halibut)\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n# Rule7 is preferred over Rule4\norder(rule7) > order(rule4) = True\n# Rule9 is preferred over Rule3\norder(rule9) > order(rule3) = True\n# Rule9 is preferred over Rule4\norder(rule9) > order(rule4) = True\n\n# The current state of the game is as follows\n# The amberjack has a card that is yellow in color, has some spinach, and has ten friends\nhas(amberjack, card) and color(card, yellow) = True\nhas(amberjack, spinach) = True\nfriends(amberjack) = 10\n# The halibut has a card that is white in color, and does not show all her cards to the canary\nhas(halibut, card) and color(card, white) = True\nshow_all_cards(halibut, canary) = False\n# The halibut is named Lily, and raises a peace flag for the doctorfish\nname(halibut, Lily) = True\nraise_flag_of_peace(halibut, doctorfish) = True\n# The koala is named Tango\nname(koala, Tango) = True\n# The lobster has 3 friends that are bald and 3 friends that are not.\nbald_friends(lobster) = 3\nnon_bald_friends(lobster) = 3\n\n# Based on the game state and the rules and preferences, does the halibut offer a job to the buffalo?\nquestion = offer_job_position(halibut, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo took a bike from the store, then it does not become an enemy of the starfish\nRule2: If the penguin has a card whose color starts with the letter \"l\", then it does not hold an equal number of points as the starfish\nRule3: If the buffalo has fewer than one friend, then it becomes an enemy of the starfish\nRule4: If the penguin has something to drink, then it holds the same number of points as the starfish\nRule5: If something respects the doctorfish, then it will not become an enemy of the buffalo\nRule6: If the penguin has fewer than fifteen friends, then it does not hold an equal number of points as the starfish\nRule7: If the buffalo becomes an actual enemy of the starfish and the penguin does not hold an equal number of points as the starfish, then the starfish knows the defensive plans of the eel\nRule8: If something owes money to the panda bear but does not become an enemy of the buffalo, then it does not know the defense plan of the eel\nRule9: If the first letter of the name of the buffalo is the same as the first letter of the name of the dog, then the buffalo becomes an enemy of the starfish.\n\nRule1 is preferred over Rule3\nRule1 is preferred over Rule9\nRule2 is preferred over Rule4\nRule6 is preferred over Rule4\nRule8 is preferred over Rule7\n\nThe current state of the game is as follows\nThe buffalo has 2 friends, one of them is easy going and the other is not\nThe name of the buffalo is Milo\nThe buffalo stole a bike from the store\nThe name of the dog is Mojo\nThe penguin has a blue card\nThe penguin has 6 friends\nThe starfish has a tablet\nThe starfish respects the doctorfish.\n\nBased on the game state and the rules and preferences, does the starfish know the defensive plans of the eel?\nQuestion: Does the starfish know the defensive plans of the eel?",
        "idx": 203,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the buffalo, if it took a bike from the store, then we can conclude that it does not become an enemy of the starfish\nrule1() = took(buffalo, bike, store) => not become_enemy(buffalo, starfish)\n# Rule2: If the penguin has a card whose color starts with the letter \"l\", then the penguin does not hold an equal number of points as the starfish\nrule2() = starts_with(color(card, \"l\")) => not equal_points(penguin, starfish)\n# Rule3: If the buffalo has fewer than one friend, then the buffalo becomes an enemy of the starfish\nrule3() = friends(buffalo) < 1 => become_enemy(buffalo, starfish)\n# Rule4: Regarding the penguin, if it has something to drink, then we can conclude that it holds the same number of points as the starfish\nrule4() = has(penguin, drink) => equal_points(penguin, starfish)\n# Rule5: If you are positive that you saw one of the animals respects the doctorfish, you can be certain that it will not become an enemy of the buffalo\nrule5(something) = respects(something, doctorfish) => not become_enemy(something, buffalo)\n# Rule6: If the penguin has fewer than fifteen friends, then the penguin does not hold an equal number of points as the starfish\nrule6() = friends(penguin) < 15 => not equal_points(penguin, starfish)\n# Rule7: If the buffalo becomes an actual enemy of the starfish and the penguin does not hold an equal number of points as the starfish, then, inevitably, the starfish knows the defensive plans of the eel\nrule7() = become_enemy(buffalo, starfish) & not equal_points(penguin, starfish) => knows(starfish, defensive_plans, eel)\n# Rule8: If you see that something owes $$$ to the panda bear but does not become an enemy of the buffalo, what can you certainly conclude? You can conclude that it does not know the defense plan of the eel\nrule8(something) = owe(something, money, panda_bear) & not become_enemy(something, buffalo) => not knows(something, defense_plan, eel)\n# Rule9: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the dog's name, then we can conclude that it becomes an enemy of the starfish.\nrule9() = first_letter_of(name(buffalo)) == first_letter_of(name(dog)) => become_enemy(buffalo, starfish)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule1 is preferred over Rule9\norder(rule1) > order(rule9) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n\n# The current state of the game is as follows\n# The buffalo has 1 friend that is easy going and 1 friend that is not, and is named Milo\nfriends(buffalo) = 2\nhas_friend(buffalo, easy_going) = True\nhas_friend(buffalo, not_easy_going) = True\nname(buffalo, Milo) = True\n# The buffalo stole a bike from the store\ntook(buffalo, bike, store) = True\n# The dog is named Mojo\nname(dog, Mojo) = True\n# The penguin has a card that is blue in color, and has six friends\nhas(penguin, card) = True\ncolor(card, blue) = True\nfriends(penguin) = 6\n# The starfish has a tablet\nhas(starfish, tablet) = True\n# The starfish respects the doctorfish.\nrespects(starfish, doctorfish) = True\n\n# Based on the game state and the rules and preferences, does the starfish know the defensive plans of the eel?\nquestion = knows(starfish, defensive_plans, eel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the moose gives a magnifier to the panda bear, then the panda bear proceeds to the spot right after the kangaroo\nRule2: If something proceeds to the spot right after the kangaroo, then the kiwi gives a magnifier to the squid.\n\nThe current state of the game is as follows\nThe moose gives a magnifier to the panda bear.\n\nBased on the game state and the rules and preferences, does the kiwi give a magnifier to the squid?\nQuestion: Does the kiwi give a magnifier to the squid?",
        "idx": 204,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The panda bear unquestionably proceeds to the spot right after the kangaroo, in the case where the moose gives a magnifier to the panda bear\nrule1() = give(moose, magnifier, panda_bear) => proceed(panda_bear, spot_right_after(kangaroo))\n# Rule2: The kiwi gives a magnifier to the squid whenever at least one animal proceeds to the spot right after the kangaroo.\nrule2() = proceed(something, spot_right_after(kangaroo)) => give(kiwi, magnifier, squid)\n\n# The current state of the game is as follows\n# The moose gives a magnifier to the panda bear.\ngive(moose, magnifier, panda_bear) = True\n\n# Based on the game state and the rules and preferences, does the kiwi give a magnifier to the squid?\nquestion = give(kiwi, magnifier, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not roll the dice for the donkey, then it will not sing a song of victory for the catfish\nRule2: If the halibut has a card whose color starts with the letter \"e\", then it does not need support from the canary\nRule3: If the canary does not show all her cards to the halibut and the phoenix does not knock down the fortress of the halibut, then the halibut sings a song of victory for the catfish\nRule4: The halibut removes from the board one of the pieces of the jellyfish whenever at least one animal holds the same number of points as the panther\nRule5: If the halibut has a name whose first letter is the same as the first letter of the eagle's name, then the halibut does not need the support of the canary\nRule6: If something sings a victory song for the catfish but does not need the support of the canary, then it will not remove one of the pieces of the jellyfish\nRule7: If the kudu learns elementary resource management from the halibut, then the halibut needs the support of the canary.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule6\nRule7 is preferred over Rule2\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe name of the eagle is Casper\nThe halibut has a card that is red in color\nThe name of the halibut is Cinnamon\nThe canary does not show all her cards to the halibut\nThe phoenix does not knock down the fortress of the halibut\n\nBased on the game state and the rules and preferences, does the halibut remove from the board one of the pieces of the jellyfish?\nQuestion: Does the halibut remove from the board one of the pieces of the jellyfish?",
        "idx": 205,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not roll the dice for the donkey, you can be certain that it will not sing a song of victory for the catfish\nrule1(something) = not roll_dice(something, donkey) => not sing_song_of_victory(something, catfish)\n# Rule2: Regarding the halibut, if it has a card whose color starts with the letter \"e\", then we can conclude that it does not need support from the canary\nrule2() = has(halibut, card) and starts_with(color_of(card), \"e\") => not need_support(halibut, canary)\n# Rule3: If the canary does not show all her cards to the halibut and the phoenix does not knock down the fortress of the halibut, then the halibut sings a song of victory for the catfish\nrule3() = not show_all_cards(canary, halibut) & not knock_down(phoenix, fortress_of(halibut)) => sing_song_of_victory(halibut, catfish)\n# Rule4: The halibut removes from the board one of the pieces of the jellyfish whenever at least one animal holds the same number of points as the panther\nrule4() = exists(something) such that points(something) == points(panther) => remove_piece(halibut, jellyfish)\n# Rule5: If the halibut has a name whose first letter is the same as the first letter of the eagle's name, then the halibut does not need the support of the canary\nrule5() = first_letter_of(name(halibut)) == first_letter_of(name(eagle)) => not need_support(halibut, canary)\n# Rule6: Be careful when something sings a victory song for the catfish but does not need the support of the canary because in this case it will, surely, not remove one of the pieces of the jellyfish (this may or may not be problematic)\nrule6() = sing_song_of_victory(something, catfish) & not need_support(something, canary) => not remove_piece(something, jellyfish)\n# Rule7: The halibut unquestionably needs the support of the canary, in the case where the kudu learns elementary resource management from the halibut.\nrule7() = learn(kudu, elementary_resource_management_from(halibut)) => need_support(halibut, canary)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The eagle is named Casper\nname(eagle, Casper) = True\n# The halibut has a card that is red in color\nhas(halibut, card) = True\ncolor_of(card, red) = True\n# The halibut is named Cinnamon\nname(halibut, Cinnamon) = True\n# The canary does not show all her cards to the halibut\nshow_all_cards(canary, halibut) = False\n# The phoenix does not knock down the fortress of the halibut\nknock_down(phoenix, fortress_of(halibut)) = False\n\n# Based on the game state and the rules and preferences, does the halibut remove from the board one of the pieces of the jellyfish?\nquestion = remove_piece(halibut, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the halibut is the same as the first letter of the name of the ferret, then the halibut shows all her cards to the tiger\nRule2: If the halibut has more than twelve friends, then it attacks the green fields whose owner is the hummingbird\nRule3: If the halibut has a card whose color appears in the flag of Belgium, then it shows all her cards to the tiger\nRule4: If something becomes an enemy of the hummingbird and shows all her cards to the tiger, then it also attacks the green fields of the kangaroo\nRule5: If the halibut has difficulty finding food, then it attacks the green fields whose owner is the hummingbird.\n\nThe current state of the game is as follows\nThe name of the ferret is Beauty\nThe halibut has a black card\nThe name of the halibut is Paco\nThe halibut struggles to find food\nThe halibut has 13 friends.\n\nBased on the game state and the rules and preferences, does the halibut attack the green fields whose owner is the kangaroo?\nQuestion: Does the halibut attack the green fields whose owner is the kangaroo?",
        "idx": 206,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the halibut has a name whose first letter is the same as the first letter of the ferret's name, then the halibut shows all her cards to the tiger\nrule1() = first_letter_of(name(halibut)) == first_letter_of(name(ferret)) => show_all_cards(halibut, tiger)\n# Rule2: If the halibut has more than twelve friends, then the halibut attacks the green fields whose owner is the hummingbird\nrule2() = friends(halibut) > 12 => attack_green_fields(halibut, owner(hummingbird))\n# Rule3: If the halibut has a card whose color appears in the flag of Belgium, then the halibut shows all her cards to the tiger\nrule3() = has(halibut, card) and color(card) in colors_of_flag(Belgium) => show_all_cards(halibut, tiger)\n# Rule4: If you see that something becomes an enemy of the hummingbird and shows all her cards to the tiger, what can you certainly conclude? You can conclude that it also attacks the green fields of the kangaroo\nrule4() = become_enemy(something, hummingbird) & show_all_cards(something, tiger) => attack_green_fields(something, owner(kangaroo))\n# Rule5: Regarding the halibut, if it has difficulty to find food, then we can conclude that it attacks the green fields whose owner is the hummingbird.\nrule5() = has_difficulty(halibut, find_food) => attack_green_fields(halibut, owner(hummingbird))\n\n# The current state of the game is as follows\n# The ferret is named Beauty\nname(ferret, Beauty) = True\n# The halibut has a card that is black in color, is named Paco, and struggles to find food\nhas(halibut, card) = True\ncolor(card, black) = True\nname(halibut, Paco) = True\nstruggles_to_find_food(halibut) = True\n# The halibut has thirteen friends.\nfriends(halibut) = 13\n\n# Based on the game state and the rules and preferences, does the halibut attack the green fields whose owner is the kangaroo?\nquestion = attack_green_fields(halibut, owner(kangaroo))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tiger does not prepare armor for the panther, then the panther does not hold an equal number of points as the starfish\nRule2: If the first letter of the name of the panther is the same as the first letter of the name of the moose, then the panther holds the same number of points as the starfish\nRule3: The canary owes money to the sun bear whenever at least one animal proceeds to the spot right after the puffin\nRule4: If the panther has a high salary, then it holds an equal number of points as the starfish\nRule5: If the canary has more than ten friends, then it does not owe money to the sun bear\nRule6: If the panther has a card whose color is one of the rainbow colors, then it shows all her cards to the sheep\nRule7: If the panther has something to drink, then it shows all her cards to the sheep\nRule8: If something holds the same number of points as the starfish and shows all her cards to the sheep, then it removes one of the pieces of the jellyfish.\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule4\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe crocodile proceeds to the spot right after the puffin\nThe name of the moose is Tango\nThe panther got a well-paid job\nThe panther has a black card\nThe panther has a hot chocolate\nThe name of the panther is Max\n\nBased on the game state and the rules and preferences, does the panther remove from the board one of the pieces of the jellyfish?\nQuestion: Does the panther remove from the board one of the pieces of the jellyfish?",
        "idx": 207,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the tiger does not prepare armor for the panther, then the panther does not hold an equal number of points as the starfish\nrule1() = not prepare_armor(tiger, panther) => not hold_equal_points(panther, starfish)\n# Rule2: Regarding the panther, if it has a name whose first letter is the same as the first letter of the moose's name, then we can conclude that it holds the same number of points as the starfish\nrule2() = first_letter_of(name(panther)) == first_letter_of(name(moose)) => hold_equal_points(panther, starfish)\n# Rule3: The canary owes money to the sun bear whenever at least one animal proceeds to the spot right after the puffin\nrule3() = proceed_to_spot(animal) == spot_right_after(puffin) => owe(canary, money, sun_bear)\n# Rule4: Regarding the panther, if it has a high salary, then we can conclude that it holds an equal number of points as the starfish\nrule4() = has_high_salary(panther) => hold_equal_points(panther, starfish)\n# Rule5: Regarding the canary, if it has more than ten friends, then we can conclude that it does not owe money to the sun bear\nrule5() = friends(canary) > 10 => not owe(canary, money, sun_bear)\n# Rule6: Regarding the panther, if it has a card whose color is one of the rainbow colors, then we can conclude that it shows her cards (all of them) to the sheep\nrule6() = has(panther, card) and color(card) in rainbow_colors => show_cards(panther, all, sheep)\n# Rule7: Regarding the panther, if it has something to drink, then we can conclude that it shows her cards (all of them) to the sheep\nrule7() = has(panther, drink) => show_cards(panther, all, sheep)\n# Rule8: If you see that something holds the same number of points as the starfish and shows all her cards to the sheep, what can you certainly conclude? You can conclude that it also removes one of the pieces of the jellyfish.\nrule8() = hold_equal_points(something, starfish) & show_cards(something, all, sheep) => remove_piece(something, jellyfish)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The crocodile proceeds to the spot right after the puffin\nproceed_to_spot(crocodile) == spot_right_after(puffin) = True\n# The moose is named Tango\nname(moose, Tango) = True\n# The panther got a well-paid job, and has a card that is black in color\ngot_well_paid_job(panther) = True\nhas(panther, card) = True\ncolor(card, black) = True\n# The panther has a hot chocolate, and is named Max.\nhas(panther, hot_chocolate) = True\nname(panther, Max) = True\n\n# Based on the game state and the rules and preferences, does the panther remove from the board one of the pieces of the jellyfish?\nquestion = remove_piece(panther, jellyfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hare has something to carry apples and oranges, then it does not sing a victory song for the cat\nRule2: If the hare has a high salary, then it sings a song of victory for the cat\nRule3: If the hare has a card whose color starts with the letter \"l\", then it sings a victory song for the cat\nRule4: If the first letter of the name of the hare is the same as the first letter of the name of the lobster, then the hare winks at the phoenix\nRule5: If the hare has something to drink, then it winks at the phoenix\nRule6: If something sings a victory song for the cat and also winks at the phoenix, then it will surely not prepare armor for the carp.\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe hare has a well-paid job\nThe hare has a black card\nThe hare has a cello\nThe name of the hare is Meadow\nThe name of the lobster is Max\n\nBased on the game state and the rules and preferences, does the hare prepare armor for the carp?\nQuestion: Does the hare prepare armor for the carp?",
        "idx": 208,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hare, if it has something to carry apples and oranges, then we can conclude that it does not sing a victory song for the cat\nrule1() = has(hare, something_to_carry_apples_and_oranges) => not sing_victory_song(hare, cat)\n# Rule2: Regarding the hare, if it has a high salary, then we can conclude that it sings a song of victory for the cat\nrule2() = has_high_salary(hare) => sing_victory_song(hare, cat)\n# Rule3: If the hare has a card whose color starts with the letter \"l\", then the hare sings a victory song for the cat\nrule3() = has(hare, card) and starts_with(color_of(card), \"l\") => sing_victory_song(hare, cat)\n# Rule4: If the hare has a name whose first letter is the same as the first letter of the lobster's name, then the hare winks at the phoenix\nrule4() = first_letter_of(name(hare)) == first_letter_of(name(lobster)) => wink(hare, phoenix)\n# Rule5: Regarding the hare, if it has something to drink, then we can conclude that it winks at the phoenix\nrule5() = has(hare, something_to_drink) => wink(hare, phoenix)\n# Rule6: Be careful when something sings a victory song for the cat and also winks at the phoenix because in this case it will surely not prepare armor for the carp (this may or may not be problematic).\nrule6() = sing_victory_song(something, cat) & wink(something, phoenix) => not prepare_armor(something, carp)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The hare got a well-paid job\nhas_high_salary(hare) = True\n# The hare has a card that is black in color\nhas(hare, card) = True\ncolor_of(card, black) = True\n# The hare has a cello\nhas(hare, cello) = True\n# The hare is named Meadow\nname(hare, Meadow) = True\n# The lobster is named Max\nname(lobster, Max) = True\n\n# Based on the game state and the rules and preferences, does the hare prepare armor for the carp?\nquestion = prepare_armor(hare, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eel has difficulty finding food, then it respects the leopard\nRule2: If the eel has something to carry apples and oranges, then it respects the leopard\nRule3: If something becomes an enemy of the leopard, then the octopus offers a job position to the carp.\n\nThe current state of the game is as follows\nThe eel has a cutter and struggles to find food.\n\nBased on the game state and the rules and preferences, does the octopus offer a job to the carp?\nQuestion: Does the octopus offer a job position to the carp?",
        "idx": 209,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eel has difficulty to find food, then the eel respects the leopard\nrule1() = has_difficulty(eel, find_food) => respect(eel, leopard)\n# Rule2: Regarding the eel, if it has something to carry apples and oranges, then we can conclude that it respects the leopard\nrule2() = has(eel, something_to_carry(apples, oranges)) => respect(eel, leopard)\n# Rule3: If at least one animal becomes an actual enemy of the leopard, then the octopus offers a job position to the carp.\nrule3(something) = become_enemy(something, leopard) => offer_job_position(octopus, carp)\n\n# The current state of the game is as follows\n# The eel has a cutter, and struggles to find food.\nhas(eel, cutter) = True\nstruggles_to_find_food(eel) = True\n\n# Based on the game state and the rules and preferences, does the octopus offer a job to the carp?\nquestion = offer_job_position(octopus, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the tilapia shows all her cards to the meerkat and the kiwi owes money to the meerkat, then you can add \"the meerkat respects the swordfish\" to your conclusions\nRule2: If at least one animal respects the swordfish, then the viperfish learns the basics of resource management from the mosquito.\n\nThe current state of the game is as follows\nThe kiwi owes money to the meerkat\nThe tilapia shows all her cards to the meerkat.\n\nBased on the game state and the rules and preferences, does the viperfish learn the basics of resource management from the mosquito?\nQuestion: Does the viperfish learn the basics of resource management from the mosquito?",
        "idx": 210,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the meerkat, if the belief is that the tilapia shows all her cards to the meerkat and the kiwi owes money to the meerkat, then you can add \"the meerkat respects the swordfish\" to your conclusions\nrule1() = shows(tilapia, all_cards, meerkat) & owes(kiwi, money, meerkat) => add_conclusion(\"the meerkat respects the swordfish\")\n# Rule2: If at least one animal respects the swordfish, then the viperfish learns the basics of resource management from the mosquito.\nrule2() = respects(something, swordfish) => learn(viperfish, basics_of_resource_management, mosquito)\n\n# The current state of the game is as follows\n# The kiwi owes money to the meerkat\nowes(kiwi, money, meerkat) = True\n# The tilapia shows all her cards to the meerkat.\nshows(tilapia, all_cards, meerkat) = True\n\n# Based on the game state and the rules and preferences, does the viperfish learn the basics of resource management from the mosquito?\nquestion = learn(viperfish, basics_of_resource_management, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hare has a card with a primary color, then it learns the basics of resource management from the pig\nRule2: If something raises a peace flag for the hare, then the pig owes money to the rabbit\nRule3: If the hare learns elementary resource management from the pig, then the pig does not owe money to the rabbit\nRule4: If the hare has published a high-quality paper, then it learns the basics of resource management from the pig.\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe hare has a card that is blue in color\nThe hare recently read a high-quality paper.\n\nBased on the game state and the rules and preferences, does the pig owe money to the rabbit?\nQuestion: Does the pig owe money to the rabbit?",
        "idx": 211,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hare has a card with a primary color, then the hare learns the basics of resource management from the pig\nrule1() = has(hare, card) and color(card) in primary_colors => learn(hare, basics_of_resource_management, pig)\n# Rule2: If at least one animal raises a peace flag for the hare, then the pig owes $$$ to the rabbit\nrule2() = raise_flag_of_peace(something, hare) => owe(pig, money, rabbit)\n# Rule3: The pig does not owe money to the rabbit, in the case where the hare learns elementary resource management from the pig\nrule3() = learn(hare, elementary_resource_management, pig) => not owe(pig, money, rabbit)\n# Rule4: Regarding the hare, if it has published a high-quality paper, then we can conclude that it learns the basics of resource management from the pig.\nrule4() = published(hare, high_quality_paper) => learn(hare, basics_of_resource_management, pig)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The hare has a card that is blue in color\nhas(hare, card) = True\ncolor(card, blue) = True\n# The hare recently read a high-quality paper.\nrecently_read(hare, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the pig owe money to the rabbit?\nquestion = owe(pig, money, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the buffalo prepares armor for the halibut and the penguin does not respect the halibut, then you can add \"the halibut does not owe $$$ to the panther\" to your conclusions\nRule2: If the halibut does not owe $$$ to the panther, then the panther learns the basics of resource management from the goldfish.\n\nThe current state of the game is as follows\nThe buffalo prepares armor for the halibut\nThe dog prepares armor for the hare\nThe penguin respects the halibut.\n\nBased on the game state and the rules and preferences, does the panther learn the basics of resource management from the goldfish?\nQuestion: Does the panther learn the basics of resource management from the goldfish?",
        "idx": 212,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the halibut, if the belief is that the buffalo prepares armor for the halibut and the penguin does not respect the halibut, then you can add \"the halibut does not owe $$$ to the panther\" to your conclusions\nrule1() = prepare_armor(buffalo, halibut) & not respect(penguin, halibut) => add_conclusion(\"the halibut does not owe $$$ to the panther\")\n# Rule2: If the halibut does not owe $$$ to the panther, then the panther learns the basics of resource management from the goldfish.\nrule2() = not owe(halibut, money, panther) => learn(panther, basics_of_resource_management, goldfish)\n\n# The current state of the game is as follows\n# The buffalo prepares armor for the halibut\nprepare_armor(buffalo, halibut) = True\n# The dog prepares armor for the hare\nprepare_armor(dog, hare) = True\n# The penguin respects the halibut.\nrespect(penguin, halibut) = True\n\n# Based on the game state and the rules and preferences, does the panther learn the basics of resource management from the goldfish?\nquestion = learn(panther, basics_of_resource_management, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the koala has fewer than six friends, then it does not attack the green fields of the baboon\nRule2: If the koala has something to carry apples and oranges, then it does not attack the green fields whose owner is the baboon\nRule3: If the penguin owes money to the koala and the panda bear becomes an enemy of the koala, then the koala steals five points from the salmon\nRule4: If something holds an equal number of points as the black bear, then it does not roll the dice for the lion\nRule5: If something steals five points from the salmon but does not attack the green fields of the baboon, then it rolls the dice for the lion.\n\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe koala has 1 friend\nThe koala has a cell phone\nThe panda bear becomes an enemy of the koala\nThe penguin owes money to the koala.\n\nBased on the game state and the rules and preferences, does the koala roll the dice for the lion?\nQuestion: Does the koala roll the dice for the lion?",
        "idx": 213,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the koala has fewer than six friends, then the koala does not attack the green fields of the baboon\nrule1() = friends(koala) < 6 => not attack(koala, green_fields, baboon)\n# Rule2: If the koala has something to carry apples and oranges, then the koala does not attack the green fields whose owner is the baboon\nrule2() = has(koala, carry_apples_and_oranges) => not attack(koala, green_fields, owner(baboon))\n# Rule3: If the penguin owes $$$ to the koala and the panda bear becomes an enemy of the koala, then the koala steals five points from the salmon\nrule3() = owe(penguin, money, koala) & become_enemy(panda_bear, koala) => steal_points(koala, 5, salmon)\n# Rule4: If something holds an equal number of points as the black bear, then it does not roll the dice for the lion\nrule4(something) = points(something) == points(black_bear) => not roll_dice(something, lion)\n# Rule5: If you see that something steals five of the points of the salmon but does not attack the green fields of the baboon, what can you certainly conclude? You can conclude that it rolls the dice for the lion.\nrule5(something) = steal_points(something, 5, salmon) & not attack(something, green_fields, baboon) => roll_dice(something, lion)\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The koala has 1 friend\nfriends(koala) = 1\n# The koala has a cell phone\nhas(koala, cell_phone) = True\n# The panda bear becomes an enemy of the koala\nbecome_enemy(panda_bear, koala) = True\n# The penguin owes money to the koala.\nowe(penguin, money, koala) = True\n\n# Based on the game state and the rules and preferences, does the koala roll the dice for the lion?\nquestion = roll_dice(koala, lion)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job to the canary, then the oscar does not sing a victory song for the swordfish\nRule2: If something attacks the green fields whose owner is the ferret and does not respect the leopard, then it offers a job position to the canary\nRule3: If something shows all her cards to the halibut, then the oscar does not prepare armor for the canary.\n\nThe current state of the game is as follows\nThe dog shows all her cards to the halibut\nThe squirrel attacks the green fields whose owner is the ferret\nThe squirrel does not respect the leopard.\n\nBased on the game state and the rules and preferences, does the oscar sing a victory song for the swordfish?\nQuestion: Does the oscar sing a victory song for the swordfish?",
        "idx": 214,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal offers a job to the canary, then the oscar does not sing a victory song for the swordfish\nrule1() = offer_job_position(something, canary) => not sing_victory_song(oscar, swordfish)\n# Rule2: If you see that something does not respect the leopard but it attacks the green fields whose owner is the ferret, what can you certainly conclude? You can conclude that it also offers a job position to the canary\nrule2(something) = not respect(something, leopard) & attacks(something, green_fields, owner(ferret)) => offer_job_position(something, canary)\n# Rule3: If at least one animal shows all her cards to the halibut, then the oscar does not prepare armor for the canary.\nrule3() = show_all_cards(something, halibut) => not prepare_armor(oscar, canary)\n\n# The current state of the game is as follows\n# The dog shows all her cards to the halibut\nshow_all_cards(dog, halibut) = True\n# The squirrel attacks the green fields whose owner is the ferret\nattacks(squirrel, green_fields, owner(ferret)) = True\n# The squirrel does not respect the leopard.\nnot respect(squirrel, leopard) = True\n\n# Based on the game state and the rules and preferences, does the oscar sing a victory song for the swordfish?\nquestion = sing_victory_song(oscar, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knows the defensive plans of the panther, then the black bear does not learn the basics of resource management from the jellyfish\nRule2: If something gives a magnifier to the pig and learns the basics of resource management from the jellyfish, then it eats the food of the zander\nRule3: If the parrot removes from the board one of the pieces of the black bear and the wolverine does not eat the food that belongs to the black bear, then the black bear gives a magnifier to the pig.\n\nThe current state of the game is as follows\nThe crocodile knows the defensive plans of the panther\nThe parrot removes from the board one of the pieces of the black bear\nThe wolverine does not eat the food of the black bear.\n\nBased on the game state and the rules and preferences, does the black bear eat the food of the zander?\nQuestion: Does the black bear eat the food of the zander?",
        "idx": 215,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The black bear does not learn the basics of resource management from the jellyfish whenever at least one animal knows the defensive plans of the panther\nrule1() = knows(something, defensive_plans, panther) => not learn(black_bear, basics_of_resource_management, jellyfish)\n# Rule2: If you see that something gives a magnifier to the pig and learns the basics of resource management from the jellyfish, what can you certainly conclude? You can conclude that it also eats the food of the zander\nrule2(something) = give(something, magnifier, pig) & learn(something, basics_of_resource_management, jellyfish) => eat(something, food_of(zander))\n# Rule3: For the black bear, if the belief is that the parrot removes from the board one of the pieces of the black bear and the wolverine does not eat the food that belongs to the black bear, then you can add \"the black bear gives a magnifier to the pig\" to your conclusions.\nrule3() = remove(parrot, piece, black_bear) & not eat(wolverine, food_of(black_bear)) => give(black_bear, magnifier, pig)\n\n# The current state of the game is as follows\n# The crocodile knows the defensive plans of the panther\nknows(crocodile, defensive_plans, panther) = True\n# The parrot removes from the board one of the pieces of the black bear\nremove(parrot, piece, black_bear) = True\n# The wolverine does not eat the food of the black bear.\nnot eat(wolverine, food_of(black_bear)) = True\n\n# Based on the game state and the rules and preferences, does the black bear eat the food of the zander?\nquestion = eat(black_bear, food_of(zander))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job position to the turtle, then it eats the food of the parrot, too\nRule2: If the grizzly bear eats the food of the parrot and the squid shows all her cards to the parrot, then the parrot knocks down the fortress that belongs to the blobfish\nRule3: The squid shows her cards to the parrot whenever at least one animal becomes an actual enemy of the raven.\n\nThe current state of the game is as follows\nThe cockroach becomes an enemy of the raven\nThe grizzly bear offers a job to the turtle.\n\nBased on the game state and the rules and preferences, does the parrot knock down the fortress of the blobfish?\nQuestion: Does the parrot knock down the fortress that belongs to the blobfish?",
        "idx": 216,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something offers a job position to the turtle, then it eats the food of the parrot, too\nrule1(something) = offer_job_position(something, turtle) => eat_food(something, food_of(parrot))\n# Rule2: For the parrot, if the belief is that the grizzly bear eats the food of the parrot and the squid shows all her cards to the parrot, then you can add \"the parrot knocks down the fortress that belongs to the blobfish\" to your conclusions\nrule2() = eat_food(grizzly_bear, food_of(parrot)) & show_all_cards(squid, parrot) => knock_down_fortress(parrot, fortress_of(blobfish))\n# Rule3: The squid shows her cards (all of them) to the parrot whenever at least one animal becomes an actual enemy of the raven.\nrule3() = become_enemy(something, raven) => show_all_cards(squid, parrot)\n\n# The current state of the game is as follows\n# The cockroach becomes an enemy of the raven\nbecome_enemy(cockroach, raven) = True\n# The grizzly bear offers a job to the turtle.\noffer_job_position(grizzly_bear, turtle) = True\n\n# Based on the game state and the rules and preferences, does the parrot knock down the fortress of the blobfish?\nquestion = knock_down_fortress(parrot, fortress_of(blobfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the baboon has a card with a primary color, then it steals five of the points of the leopard\nRule2: If the baboon has a musical instrument, then it does not offer a job to the puffin\nRule3: If something steals five of the points of the leopard and does not offer a job to the puffin, then it does not offer a job to the kudu\nRule4: If the polar bear winks at the baboon and the catfish does not roll the dice for the baboon, then the baboon offers a job to the puffin.\n\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe baboon has a card that is red in color\nThe baboon has a saxophone\nThe polar bear winks at the baboon.\n\nBased on the game state and the rules and preferences, does the baboon offer a job to the kudu?\nQuestion: Does the baboon offer a job to the kudu?",
        "idx": 217,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the baboon, if it has a card with a primary color, then we can conclude that it steals five of the points of the leopard\nrule1() = has(baboon, card) and color(card) in primary_colors => steal_points(baboon, 5, leopard)\n# Rule2: If the baboon has a musical instrument, then the baboon does not offer a job to the puffin\nrule2() = has(baboon, musical_instrument) => not offer_job_position(baboon, puffin)\n# Rule3: If you see that something does not offer a job to the puffin but it steals five of the points of the leopard, what can you certainly conclude? You can conclude that it is not going to offer a job to the kudu\nrule3() = not offer_job_position(something, puffin) & steal_points(something, 5, leopard) => not offer_job_position(something, kudu)\n# Rule4: For the baboon, if the belief is that the polar bear winks at the baboon and the catfish does not roll the dice for the baboon, then you can add \"the baboon offers a job to the puffin\" to your conclusions.\nrule4() = belief(polar_bear, winks_at, baboon) & not roll_dice(catfish, baboon) => offer_job_position(baboon, puffin)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The baboon has a card that is red in color\nhas(baboon, card) = True\ncolor(card, red) = True\n# The baboon has a saxophone\nhas(baboon, saxophone) = True\n# The polar bear winks at the baboon.\nbelief(polar_bear, winks_at, baboon) = True\n\n# Based on the game state and the rules and preferences, does the baboon offer a job to the kudu?\nquestion = offer_job_position(baboon, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not owe money to the cow and also does not offer a job to the grizzly bear, then it does not offer a job position to the tilapia\nRule2: If the tilapia has a card whose color appears in the flag of Japan, then it does not respect the octopus\nRule3: The tilapia offers a job to the viperfish if the zander does not offer a job to the tilapia\nRule4: If the first letter of the name of the tilapia is the same as the first letter of the name of the penguin, then the tilapia does not respect the octopus.\n\nThe current state of the game is as follows\nThe name of the penguin is Lily\nThe snail steals five points from the tilapia\nThe tilapia has a green card\nThe name of the tilapia is Casper\nThe zander owes money to the cow\nThe zander does not offer a job to the grizzly bear.\n\nBased on the game state and the rules and preferences, does the tilapia offer a job to the viperfish?\nQuestion: Does the tilapia offer a job to the viperfish?",
        "idx": 218,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not owe $$$ to the cow and also does not offer a job to the grizzly bear, what can you certainly conclude? You can conclude that it also does not offer a job position to the tilapia\nrule1(something) = not owe(something, money, cow) & not offer_job_position(something, grizzly_bear) => not offer_job_position(something, tilapia)\n# Rule2: Regarding the tilapia, if it has a card whose color appears in the flag of Japan, then we can conclude that it does not respect the octopus\nrule2() = has(tilapia, card) & color(card) in colors_of_flag(Japan) => not respect(tilapia, octopus)\n# Rule3: The tilapia unquestionably offers a job to the viperfish, in the case where the zander does not offer a job to the tilapia\nrule3() = not offer_job_position(zander, tilapia) => offer_job_position(tilapia, viperfish)\n# Rule4: Regarding the tilapia, if it has a name whose first letter is the same as the first letter of the penguin's name, then we can conclude that it does not respect the octopus.\nrule4() = first_letter_of(name(tilapia)) == first_letter_of(name(penguin)) => not respect(tilapia, octopus)\n\n# The current state of the game is as follows\n# The penguin is named Lily\nname(penguin, Lily) = True\n# The snail steals five points from the tilapia\nsteal(snail, 5, points, tilapia) = True\n# The tilapia has a card that is green in color, and is named Casper\nhas(tilapia, card) = True\ncolor(card, green) = True\nname(tilapia, Casper) = True\n# The zander owes money to the cow\nowe(zander, money, cow) = True\n# The zander does not offer a job to the grizzly bear.\noffer_job_position(zander, grizzly_bear) = False\n\n# Based on the game state and the rules and preferences, does the tilapia offer a job to the viperfish?\nquestion = offer_job_position(tilapia, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal shows all her cards to the polar bear, then the leopard owes money to the cow\nRule2: If the jellyfish has a high-quality paper, then the jellyfish shows all her cards to the polar bear.\n\nThe current state of the game is as follows\nThe name of the canary is Luna\nThe name of the jellyfish is Lola\nThe jellyfish published a high-quality paper.\n\nBased on the game state and the rules and preferences, does the leopard owe money to the cow?\nQuestion: Does the leopard owe money to the cow?",
        "idx": 219,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal shows her cards (all of them) to the polar bear, then the leopard owes $$$ to the cow\nrule1() = show_cards(something, polar_bear) => owe(leopard, money, cow)\n# Rule2: If the jellyfish has a high-quality paper, then the jellyfish shows all her cards to the polar bear.\nrule2() = has(jellyfish, high_quality_paper) => show_cards(jellyfish, polar_bear)\n\n# The current state of the game is as follows\n# The canary is named Luna\nname(canary, Luna) = True\n# The jellyfish is named Lola\nname(jellyfish, Lola) = True\n# The jellyfish published a high-quality paper.\nhas(jellyfish, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the leopard owe money to the cow?\nquestion = owe(leopard, money, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eel has something to drink, then it does not show all her cards to the jellyfish\nRule2: If the turtle has a card with a primary color, then it does not give a magnifying glass to the mosquito\nRule3: The turtle gives a magnifier to the mosquito whenever at least one animal knows the defensive plans of the koala\nRule4: The turtle does not become an enemy of the gecko whenever at least one animal shows all her cards to the jellyfish\nRule5: If something gives a magnifier to the mosquito and also learns the basics of resource management from the starfish, then it becomes an enemy of the gecko\nRule6: If something prepares armor for the buffalo, then it learns elementary resource management from the starfish\nRule7: If at least one animal respects the raven, then the eel shows all her cards to the jellyfish.\n\nRule3 is preferred over Rule2\nRule4 is preferred over Rule5\nRule7 is preferred over Rule1\n\nThe current state of the game is as follows\nThe eel has a beer\nThe snail respects the raven\nThe turtle got a well-paid job, has a card that is violet in color, and prepares armor for the buffalo\nThe wolverine knows the defensive plans of the koala.\n\nBased on the game state and the rules and preferences, does the turtle become an enemy of the gecko?\nQuestion: Does the turtle become an enemy of the gecko?",
        "idx": 220,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the eel, if it has something to drink, then we can conclude that it does not show her cards (all of them) to the jellyfish\nrule1() = has(eel, drink) => not show_cards(eel, all, jellyfish)\n# Rule2: Regarding the turtle, if it has a card with a primary color, then we can conclude that it does not give a magnifying glass to the mosquito\nrule2() = has(turtle, card) and color(card) in primary_colors => not give(turtle, magnifying_glass, mosquito)\n# Rule3: The turtle gives a magnifier to the mosquito whenever at least one animal knows the defensive plans of the koala\nrule3() = knows(something, defensive_plans, koala) => give(turtle, magnifying_glass, mosquito)\n# Rule4: The turtle does not become an enemy of the gecko whenever at least one animal shows all her cards to the jellyfish\nrule4() = show_cards(something, all, jellyfish) => not become_enemy(turtle, gecko)\n# Rule5: Be careful when something gives a magnifier to the mosquito and also learns the basics of resource management from the starfish because in this case it will surely become an enemy of the gecko (this may or may not be problematic)\nrule5() = give(something, magnifying_glass, mosquito) & learn(something, basics_of_resource_management, starfish) => become_enemy(something, gecko)\n# Rule6: If you are positive that you saw one of the animals prepares armor for the buffalo, you can be certain that it will also learn elementary resource management from the starfish\nrule6() = prepare_armor(something, buffalo) => learn(something, elementary_resource_management, starfish)\n# Rule7: If at least one animal respects the raven, then the eel shows her cards (all of them) to the jellyfish.\nrule7() = respects(something, raven) => show_cards(eel, all, jellyfish)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n\n# The current state of the game is as follows\n# The eel has a beer\nhas(eel, beer) = True\n# The snail respects the raven\nrespects(snail, raven) = True\n# The turtle got a well-paid job, has a card that is violet in color, and prepares armor for the buffalo\ngot_job(turtle, well_paid) = True\nhas(turtle, card) = True\ncolor(card(turtle), violet) = True\nprepare_armor(turtle, buffalo) = True\n# The wolverine knows the defensive plans of the koala.\nknows(wolverine, defensive_plans, koala) = True\n\n# Based on the game state and the rules and preferences, does the turtle become an enemy of the gecko?\nquestion = become_enemy(turtle, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something raises a flag of peace for the goldfish, then it steals five points of the amberjack\nRule2: If the whale has something to drink, then it does not steal five points of the amberjack\nRule3: If something steals five points from the amberjack, then the tiger owes money to the cat.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe whale does not raise a peace flag for the goldfish.\n\nBased on the game state and the rules and preferences, does the tiger owe money to the cat?\nQuestion: Does the tiger owe money to the cat?",
        "idx": 221,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals raises a flag of peace for the goldfish, you can be certain that it will also steal five of the points of the amberjack\nrule1() = raise_flag_of_peace(something, goldfish) => steal_points(something, 5, amberjack)\n# Rule2: Regarding the whale, if it has something to drink, then we can conclude that it does not steal five of the points of the amberjack\nrule2() = has(whale, drink) => not steal_points(whale, 5, amberjack)\n# Rule3: If at least one animal steals five points from the amberjack, then the tiger owes $$$ to the cat.\nrule3() = steal_points(something, 5, amberjack) => owe(tiger, money, cat)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The whale does not raise a peace flag for the goldfish.\nraise_flag_of_peace(whale, goldfish) = False\n\n# Based on the game state and the rules and preferences, does the tiger owe money to the cat?\nquestion = owe(tiger, money, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the koala has fewer than six friends, then it eats the food of the starfish\nRule2: The koala eats the food of the buffalo, if the snail does not knock down the fortress of the koala\nRule3: If something owes money to the cheetah, then it does not eat the food that belongs to the buffalo\nRule4: If something eats the food that belongs to the buffalo and eats the food of the starfish, then it knocks down the fortress of the hippopotamus\nRule5: The polar bear raises a flag of peace for the zander whenever at least one animal sings a song of victory for the squid\nRule6: If the koala killed the mayor, then it eats the food that belongs to the starfish.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cat sings a victory song for the squid\nThe koala assassinated the mayor\nThe koala has 6 mean friends and 2 non-mean friends\nThe polar bear respects the catfish\nThe snail does not knock down the fortress of the koala.\n\nBased on the game state and the rules and preferences, does the koala knock down the fortress of the hippopotamus?\nQuestion: Does the koala knock down the fortress of the hippopotamus?",
        "idx": 222,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the koala, if it has fewer than six friends, then we can conclude that it eats the food of the starfish\nrule1() = friends(koala) < 6 => eat_food(koala, food_of(starfish))\n# Rule2: The koala unquestionably eats the food of the buffalo, in the case where the snail does not knock down the fortress that belongs to the koala\nrule2() = not knock_down(snail, fortress_of(koala)) => eat_food(koala, food_of(buffalo))\n# Rule3: If something owes money to the cheetah, then it does not eat the food that belongs to the buffalo\nrule3(something) = owe(something, money, cheetah) => not eat_food(something, food_of(buffalo))\n# Rule4: If you see that something eats the food that belongs to the buffalo and eats the food of the starfish, what can you certainly conclude? You can conclude that it also knocks down the fortress of the hippopotamus\nrule4(something) = eat_food(something, food_of(buffalo)) & eat_food(something, food_of(starfish)) => knock_down(something, fortress_of(hippopotamus))\n# Rule5: The polar bear raises a flag of peace for the zander whenever at least one animal sings a song of victory for the squid\nrule5() = sings_song_of_victory(something, squid) => raise_flag_of_peace(polar_bear, zander)\n# Rule6: If the koala killed the mayor, then the koala eats the food that belongs to the starfish.\nrule6() = killed(koala, mayor) => eat_food(koala, food_of(starfish))\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cat sings a victory song for the squid\nsings_song_of_victory(cat, squid) = True\n# The koala assassinated the mayor\nkilled(koala, mayor) = True\n# The koala has six friends that are mean and 2 friends that are not\nmean_friends(koala) = 6\nnon_mean_friends(koala) = 2\n# The polar bear respects the catfish\nrespects(polar_bear, catfish) = True\n# The snail does not knock down the fortress of the koala.\nknock_down(snail, fortress_of(koala)) = False\n\n# Based on the game state and the rules and preferences, does the koala knock down the fortress of the hippopotamus?\nquestion = knock_down(koala, fortress_of(hippopotamus))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grasshopper has a device to connect to the internet, then it does not need support from the starfish\nRule2: If something needs the support of the starfish, then it will not sing a victory song for the snail\nRule3: If the black bear knows the defense plan of the grasshopper, then the grasshopper needs the support of the starfish\nRule4: If the grasshopper has something to sit on, then it does not need the support of the starfish.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe black bear knows the defensive plans of the grasshopper\nThe grasshopper has a flute.\n\nBased on the game state and the rules and preferences, does the grasshopper sing a victory song for the snail?\nQuestion: Does the grasshopper sing a victory song for the snail?",
        "idx": 223,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grasshopper has a device to connect to the internet, then the grasshopper does not need support from the starfish\nrule1() = has(grasshopper, device_to_connect_to_internet) => not need_support(grasshopper, starfish)\n# Rule2: If you are positive that you saw one of the animals needs the support of the starfish, you can be certain that it will not sing a victory song for the snail\nrule2(something) = needs_support(something, starfish) => not sing_victory_song(something, snail)\n# Rule3: If the black bear knows the defense plan of the grasshopper, then the grasshopper needs the support of the starfish\nrule3() = knows(black_bear, defense_plans, grasshopper) => need_support(grasshopper, starfish)\n# Rule4: Regarding the grasshopper, if it has something to sit on, then we can conclude that it does not need the support of the starfish.\nrule4() = has(grasshopper, something_to_sit_on) => not need_support(grasshopper, starfish)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The black bear knows the defensive plans of the grasshopper\nknows(black_bear, defense_plans, grasshopper) = True\n# The grasshopper has a flute.\nhas(grasshopper, flute) = True\n\n# Based on the game state and the rules and preferences, does the grasshopper sing a victory song for the snail?\nquestion = sing_victory_song(grasshopper, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something learns the basics of resource management from the kiwi, then the spider knocks down the fortress that belongs to the octopus\nRule2: If the first letter of the name of the snail is the same as the first letter of the name of the hummingbird, then the snail does not learn the basics of resource management from the kiwi\nRule3: If the squid gives a magnifier to the snail and the phoenix knows the defensive plans of the snail, then the snail learns the basics of resource management from the kiwi\nRule4: If the snail has a sharp object, then it does not learn elementary resource management from the kiwi.\n\nRule2 is preferred over Rule3\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe phoenix knows the defensive plans of the snail\nThe snail has a bench\nThe name of the snail is Meadow\nThe squid does not give a magnifier to the snail.\n\nBased on the game state and the rules and preferences, does the spider knock down the fortress of the octopus?\nQuestion: Does the spider knock down the fortress of the octopus?",
        "idx": 224,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal learns the basics of resource management from the kiwi, then the spider knocks down the fortress that belongs to the octopus\nrule1(something) = learns(something, basics_of_resource_management, kiwi) => knock_down(spider, fortress, octopus)\n# Rule2: If the snail has a name whose first letter is the same as the first letter of the hummingbird's name, then the snail does not learn the basics of resource management from the kiwi\nrule2() = first_letter_of(name(snail)) == first_letter_of(name(hummingbird)) => not learns(snail, basics_of_resource_management, kiwi)\n# Rule3: If the squid gives a magnifier to the snail and the phoenix knows the defensive plans of the snail, then the snail learns the basics of resource management from the kiwi\nrule3() = give(squid, magnifier, snail) & knows(phoenix, defensive_plans, snail) => learns(snail, basics_of_resource_management, kiwi)\n# Rule4: If the snail has a sharp object, then the snail does not learn elementary resource management from the kiwi.\nrule4() = has(snail, sharp_object) => not learns(snail, elementary_resource_management, kiwi)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The phoenix knows the defensive plans of the snail\nknows(phoenix, defensive_plans, snail) = True\n# The snail has a bench, and is named Meadow\nhas(snail, bench) = True\nname(snail, Meadow) = True\n# The squid does not give a magnifier to the snail.\ngive(squid, magnifier, snail) = False\n\n# Based on the game state and the rules and preferences, does the spider knock down the fortress of the octopus?\nquestion = knock_down(spider, fortress, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The oscar steals five points from the crocodile whenever something attacks the green fields whose owner is the canary\nRule2: If the parrot learns elementary resource management from the oscar, then the oscar does not steal five points from the crocodile\nRule3: If the pig has a leafy green vegetable, then the pig attacks the green fields whose owner is the canary\nRule4: If the pig has fewer than eight friends, then it attacks the green fields of the canary.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the catfish is Paco\nThe pig has a violin\nThe pig has six friends\nThe name of the pig is Beauty\nThe pig stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the oscar steal five points from the crocodile?\nQuestion: Does the oscar steal five points from the crocodile?",
        "idx": 225,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The oscar steals five points from the crocodile whenever at least one animal attacks the green fields whose owner is the canary\nrule1() = attack(something, green_fields, owner(canary)) => steal(oscar, 5, points, crocodile)\n# Rule2: If the parrot learns elementary resource management from the oscar, then the oscar is not going to steal five points from the crocodile\nrule2() = learn(parrot, elementary_resource_management, oscar) => not steal(oscar, 5, points, crocodile)\n# Rule3: If the pig has a leafy green vegetable, then the pig attacks the green fields whose owner is the canary\nrule3() = has(pig, leafy_green_vegetable) => attack(pig, green_fields, owner(canary))\n# Rule4: Regarding the pig, if it has fewer than eight friends, then we can conclude that it attacks the green fields of the canary.\nrule4() = friends(pig) < 8 => attack(pig, green_fields, owner(canary))\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The catfish is named Paco\nname(catfish, Paco) = True\n# The pig has a violin, and has six friends\nhas(pig, violin) = True\nfriends(pig) = 6\n# The pig is named Beauty\nname(pig, Beauty) = True\n# The pig stole a bike from the store.\nsteal(pig, bike, store) = True\n\n# Based on the game state and the rules and preferences, does the oscar steal five points from the crocodile?\nquestion = steal(oscar, 5, points, crocodile)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not knock down the fortress of the puffin and also does not know the defense plan of the crocodile, then it knows the defensive plans of the catfish\nRule2: The catfish will not raise a peace flag for the cockroach if the panther does not know the defense plan of the catfish\nRule3: If the lion needs support from the catfish and the grizzly bear removes one of the pieces of the catfish, then the catfish raises a peace flag for the cockroach\nRule4: The panther does not know the defense plan of the catfish whenever at least one animal offers a job to the grizzly bear\nRule5: If something shows all her cards to the cheetah, then it will not need the support of the catfish\nRule6: The lion needs support from the catfish if the grasshopper prepares armor for the lion.\n\nRule1 is preferred over Rule4\nRule3 is preferred over Rule2\nRule5 is preferred over Rule6\n\nThe current state of the game is as follows\nThe grasshopper prepares armor for the lion\nThe kudu offers a job to the grizzly bear\nThe panther does not knock down the fortress of the puffin.\n\nBased on the game state and the rules and preferences, does the catfish raise a peace flag for the cockroach?\nQuestion: Does the catfish raise a peace flag for the cockroach?",
        "idx": 226,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not knock down the fortress that belongs to the puffin and also does not know the defense plan of the crocodile, what can you certainly conclude? You can conclude that it also knows the defensive plans of the catfish\nrule1(something) = not knock_down(something, fortress, puffin) & not know(something, defense_plan, crocodile) => knows(something, defense_plan, catfish)\n# Rule2: The catfish will not raise a peace flag for the cockroach, in the case where the panther does not know the defense plan of the catfish\nrule2() = not know(panther, defense_plan, catfish) => not raise_flag_of_peace(catfish, cockroach)\n# Rule3: If the lion needs support from the catfish and the grizzly bear removes one of the pieces of the catfish, then the catfish raises a peace flag for the cockroach\nrule3() = needs_support(lion, catfish) & remove(grizzly_bear, piece, catfish) => raise_flag_of_peace(catfish, cockroach)\n# Rule4: The panther does not know the defense plan of the catfish whenever at least one animal offers a job to the grizzly bear\nrule4() = offer_job_position(something, grizzly_bear) => not know(panther, defense_plan, catfish)\n# Rule5: If you are positive that you saw one of the animals shows all her cards to the cheetah, you can be certain that it will not need the support of the catfish\nrule5(something) = show_all_cards(something, cheetah) => not needs_support(something, catfish)\n# Rule6: The lion unquestionably needs support from the catfish, in the case where the grasshopper prepares armor for the lion.\nrule6() = prepare_armor(grasshopper, lion) => needs_support(lion, catfish)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n\n# The current state of the game is as follows\n# The grasshopper prepares armor for the lion\nprepare_armor(grasshopper, lion) = True\n# The kudu offers a job to the grizzly bear\noffer_job_position(kudu, grizzly_bear) = True\n# The panther does not knock down the fortress of the puffin.\nnot knock_down(panther, fortress, puffin) = True\n\n# Based on the game state and the rules and preferences, does the catfish raise a peace flag for the cockroach?\nquestion = raise_flag_of_peace(catfish, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the lion starts with the same letter as the name of the crocodile, then the lion removes one of the pieces of the squid\nRule2: If the starfish works more hours than before, then it does not burn the warehouse of the squid\nRule3: If something raises a peace flag for the squirrel, then the lion does not remove one of the pieces of the squid\nRule4: If something raises a peace flag for the starfish, then it does not need the support of the squid\nRule5: If the name of the starfish starts with the same letter as the name of the viperfish, then the starfish burns the warehouse of the squid\nRule6: If the lion does not remove one of the pieces of the squid and the squirrel does not need the support of the squid, then the squid steals five of the points of the mosquito\nRule7: If the starfish has a card with a primary color, then it does not burn the warehouse of the squid.\n\nRule2 is preferred over Rule5\nRule3 is preferred over Rule1\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cow raises a peace flag for the squirrel\nThe name of the crocodile is Paco\nThe lion has 10 friends and is named Pashmak\nThe name of the starfish is Tango\nThe starfish reduced her work hours recently\nThe name of the viperfish is Tarzan\nThe squirrel does not raise a peace flag for the starfish.\n\nBased on the game state and the rules and preferences, does the squid steal five points from the mosquito?\nQuestion: Does the squid steal five points from the mosquito?",
        "idx": 227,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the lion, if it has a name whose first letter is the same as the first letter of the crocodile's name, then we can conclude that it removes from the board one of the pieces of the squid\nrule1() = first_letter_of(name(lion)) == first_letter_of(name(crocodile)) => remove_piece(lion, squid)\n# Rule2: If the starfish works more hours than before, then the starfish does not burn the warehouse that is in possession of the squid\nrule2() = works_more_hours(starfish) => not burn_warehouse(starfish, squid)\n# Rule3: If at least one animal raises a flag of peace for the squirrel, then the lion does not remove from the board one of the pieces of the squid\nrule3() = raise_flag_of_peace(something, squirrel) => not remove_piece(lion, squid)\n# Rule4: If you are positive that you saw one of the animals raises a peace flag for the starfish, you can be certain that it will not need the support of the squid\nrule4(something) = raise_flag_of_peace(something, starfish) => not need_support(something, squid)\n# Rule5: Regarding the starfish, if it has a name whose first letter is the same as the first letter of the viperfish's name, then we can conclude that it burns the warehouse of the squid\nrule5() = first_letter_of(name(starfish)) == first_letter_of(name(viperfish)) => burn_warehouse(starfish, squid)\n# Rule6: If the lion does not remove one of the pieces of the squid and the squirrel does not need the support of the squid, then the squid steals five of the points of the mosquito\nrule6() = not remove_piece(lion, squid) & not need_support(squirrel, squid) => steal_points(squid, 5, mosquito)\n# Rule7: Regarding the starfish, if it has a card with a primary color, then we can conclude that it does not burn the warehouse of the squid.\nrule7() = has_card(starfish) & primary_color(card(starfish)) => not burn_warehouse(starfish, squid)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cow raises a peace flag for the squirrel\nraise_flag_of_peace(cow, squirrel) = True\n# The crocodile is named Paco\nname(crocodile, Paco) = True\n# The lion has ten friends, and is named Pashmak\nfriends(lion) = 10\nname(lion, Pashmak) = True\n# The starfish is named Tango\nname(starfish, Tango) = True\n# The starfish reduced her work hours recently\nworks_more_hours(starfish) = False\n# The viperfish is named Tarzan\nname(viperfish, Tarzan) = True\n# The squirrel does not raise a peace flag for the starfish.\nraise_flag_of_peace(squirrel, starfish) = False\n\n# Based on the game state and the rules and preferences, does the squid steal five points from the mosquito?\nquestion = steal_points(squid, 5, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something proceeds to the spot right after the puffin, then it steals five points from the gecko\nRule2: If the grasshopper steals five points from the gecko, then the gecko learns the basics of resource management from the koala\nRule3: If the tilapia learns elementary resource management from the gecko, then the gecko does not learn elementary resource management from the koala.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe grasshopper proceeds to the spot right after the puffin\nThe grasshopper struggles to find food.\n\nBased on the game state and the rules and preferences, does the gecko learn the basics of resource management from the koala?\nQuestion: Does the gecko learn the basics of resource management from the koala?",
        "idx": 228,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something proceeds to the spot right after the puffin, then it steals five points from the gecko, too\nrule1(something) = proceeds_to(something, spot_right_after(puffin)) => steals_points(something, 5, gecko)\n# Rule2: The gecko unquestionably learns the basics of resource management from the koala, in the case where the grasshopper steals five of the points of the gecko\nrule2() = steals_points(grasshopper, 5, gecko) => learn(gecko, basics_of_resource_management, koala)\n# Rule3: If the tilapia learns elementary resource management from the gecko, then the gecko is not going to learn elementary resource management from the koala.\nrule3() = learn(tilapia, elementary_resource_management, gecko) => not learn(gecko, elementary_resource_management, koala)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The grasshopper proceeds to the spot right after the puffin, and struggles to find food.\nproceeds_to(grasshopper, spot_right_after(puffin)) = True\nstruggles_to_find_food(grasshopper) = True\n\n# Based on the game state and the rules and preferences, does the gecko learn the basics of resource management from the koala?\nquestion = learn(gecko, basics_of_resource_management, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something learns the basics of resource management from the kiwi, then it does not roll the dice for the sun bear\nRule2: If something does not give a magnifying glass to the hummingbird, then it will roll the dice for the sun bear\nRule3: If the black bear eats the food of the leopard, then the leopard learns the basics of resource management from the kiwi\nRule4: If something removes one of the pieces of the donkey and shows all her cards to the cheetah, then it does not give a magnifier to the hummingbird.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe black bear eats the food of the leopard\nThe leopard has an orange card\nThe leopard removes one of the pieces of the donkey\nThe leopard shows all her cards to the cheetah\n\nBased on the game state and the rules and preferences, does the leopard roll the dice for the sun bear?\nQuestion: Does the leopard roll the dice for the sun bear?",
        "idx": 229,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something learns the basics of resource management from the kiwi, then it does not roll the dice for the sun bear\nrule1(something) = learns(something, basics_of_resource_management, kiwi) => not roll_dice(something, sun_bear)\n# Rule2: If you are positive that one of the animals does not give a magnifying glass to the hummingbird, you can be certain that it will roll the dice for the sun bear without a doubt\nrule2(something) = not give(something, magnifying_glass, hummingbird) => roll_dice(something, sun_bear)\n# Rule3: If the black bear eats the food of the leopard, then the leopard learns the basics of resource management from the kiwi\nrule3() = eats(black_bear, food_of(leopard)) => learns(leopard, basics_of_resource_management, kiwi)\n# Rule4: If you see that something removes one of the pieces of the donkey and shows all her cards to the cheetah, what can you certainly conclude? You can conclude that it does not give a magnifier to the hummingbird.\nrule4(something) = removes(something, piece_of(donkey)) & shows_all_cards(something, cheetah) => not give(something, magnifying_glass, hummingbird)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The black bear eats the food of the leopard\neats(black_bear, food_of(leopard)) = True\n# The leopard has a card that is orange in color, removes from the board one of the pieces of the donkey, and shows all her cards to the cheetah.\nhas(leopard, card) and color(card, orange) = True\nremoves(leopard, piece_of(donkey)) = True\nshows_all_cards(leopard, cheetah) = True\n\n# Based on the game state and the rules and preferences, does the leopard roll the dice for the sun bear?\nquestion = roll_dice(leopard, sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale has more than eight friends, then it does not know the defensive plans of the panther\nRule2: If the whale knows the defense plan of the panther and the black bear does not know the defensive plans of the panther, then the panther knocks down the fortress that belongs to the swordfish\nRule3: If the black bear has a leafy green vegetable, then it does not know the defensive plans of the panther\nRule4: If something knocks down the fortress that belongs to the grizzly bear and respects the spider, then it knows the defensive plans of the panther\nRule5: If the black bear has a device to connect to the internet, then it does not know the defensive plans of the panther\nRule6: If the halibut has a card whose color is one of the rainbow colors, then it raises a peace flag for the sun bear\nRule7: If something needs support from the snail, then the black bear knows the defensive plans of the panther.\n\nRule1 is preferred over Rule4\nRule3 is preferred over Rule7\nRule5 is preferred over Rule7\n\nThe current state of the game is as follows\nThe black bear has a cutter\nThe dog needs support from the snail\nThe halibut has a yellow card\nThe whale knocks down the fortress of the grizzly bear and respects the spider\nThe halibut does not roll the dice for the zander.\n\nBased on the game state and the rules and preferences, does the panther knock down the fortress of the swordfish?\nQuestion: Does the panther knock down the fortress that belongs to the swordfish?",
        "idx": 230,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the whale, if it has more than eight friends, then we can conclude that it does not know the defensive plans of the panther\nrule1() = friends(whale) > 8 => not know(whale, defensive_plans, panther)\n# Rule2: For the panther, if the belief is that the whale knows the defense plan of the panther and the black bear does not know the defensive plans of the panther, then you can add \"the panther knocks down the fortress that belongs to the swordfish\" to your conclusions\nrule2() = know(whale, defensive_plans, panther) & not know(black_bear, defensive_plans, panther) => conclude(panther, knocks_down_fortress, swordfish)\n# Rule3: Regarding the black bear, if it has a leafy green vegetable, then we can conclude that it does not know the defensive plans of the panther\nrule3() = has(black_bear, leafy_green_vegetable) => not know(black_bear, defensive_plans, panther)\n# Rule4: If you see that something knocks down the fortress that belongs to the grizzly bear and respects the spider, what can you certainly conclude? You can conclude that it also knows the defensive plans of the panther\nrule4() = conclude(something, knocks_down_fortress, grizzly_bear) & respects(something, spider) => know(something, defensive_plans, panther)\n# Rule5: If the black bear has a device to connect to the internet, then the black bear does not know the defensive plans of the panther\nrule5() = has(black_bear, internet_device) => not know(black_bear, defensive_plans, panther)\n# Rule6: Regarding the halibut, if it has a card whose color is one of the rainbow colors, then we can conclude that it raises a peace flag for the sun bear\nrule6() = has(halibut, card) and color(card) in rainbow_colors => raise_flag_of_peace(halibut, sun_bear)\n# Rule7: If at least one animal needs support from the snail, then the black bear knows the defensive plans of the panther.\nrule7() = needs_support(something, snail) => know(black_bear, defensive_plans, panther)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n# Rule5 is preferred over Rule7\norder(rule5) > order(rule7) = True\n\n# The current state of the game is as follows\n# The black bear has a cutter\nhas(black_bear, cutter) = True\n# The dog needs support from the snail\nneeds_support(dog, snail) = True\n# The halibut has a card that is yellow in color\nhas(halibut, card) = True\ncolor(card, yellow) = True\n# The whale knocks down the fortress of the grizzly bear, and respects the spider\nknocks_down_fortress(whale, grizzly_bear) = True\nrespects(whale, spider) = True\n# The halibut does not roll the dice for the zander.\nnot roll_dice(halibut, zander) = True\n\n# Based on the game state and the rules and preferences, does the panther knock down the fortress of the swordfish?\nquestion = conclude(panther, knocks_down_fortress, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal respects the hummingbird, then the spider offers a job to the tiger\nRule2: If something attacks the green fields of the puffin and also gives a magnifier to the koala, then it respects the hummingbird.\n\nThe current state of the game is as follows\nThe grizzly bear attacks the green fields of the puffin\nThe grizzly bear gives a magnifier to the koala\n\nBased on the game state and the rules and preferences, does the spider offer a job to the tiger?\nQuestion: Does the spider offer a job to the tiger?",
        "idx": 231,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal respects the hummingbird, then the spider offers a job to the tiger\nrule1() = respect(something, hummingbird) => offer_job(spider, tiger)\n# Rule2: Be careful when something attacks the green fields of the puffin and also gives a magnifier to the koala because in this case it will surely respect the hummingbird (this may or may not be problematic).\nrule2() = attack(something, green_fields, puffin) & give(something, magnifier, koala) => respect(something, hummingbird)\n\n# The current state of the game is as follows\n# The grizzly bear attacks the green fields whose owner is the puffin\nattack(grizzly_bear, green_fields, puffin) = True\n# The grizzly bear gives a magnifier to the koala\ngive(grizzly_bear, magnifier, koala) = True\n\n# Based on the game state and the rules and preferences, does the spider offer a job to the tiger?\nquestion = offer_job(spider, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale took a bike from the store, then it does not knock down the fortress that belongs to the oscar\nRule2: The oscar will not show all her cards to the octopus, in the case where the whale does not knock down the fortress that belongs to the oscar\nRule3: If the whale has fewer than 6 friends, then it knocks down the fortress of the oscar\nRule4: If the first letter of the name of the whale is the same as the first letter of the name of the tiger, then the whale knocks down the fortress that belongs to the oscar\nRule5: If the whale has a card whose color starts with the letter \"e\", then it does not knock down the fortress of the oscar.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule5\nRule4 is preferred over Rule1\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe whale has a yellow card\nThe name of the whale is Luna\nThe whale has 10 friends\nThe whale took a bike from the store.\n\nBased on the game state and the rules and preferences, does the oscar show all her cards to the octopus?\nQuestion: Does the oscar show all her cards to the octopus?",
        "idx": 232,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the whale, if it took a bike from the store, then we can conclude that it does not knock down the fortress that belongs to the oscar\nrule1() = took_bike(whale) => not knock_down_fortress(whale, oscar)\n# Rule2: The oscar will not show all her cards to the octopus, in the case where the whale does not knock down the fortress that belongs to the oscar\nrule2() = not knock_down_fortress(whale, oscar) => not show_all_cards(oscar, octopus)\n# Rule3: Regarding the whale, if it has fewer than 6 friends, then we can conclude that it knocks down the fortress of the oscar\nrule3() = friends(whale) < 6 => knock_down_fortress(whale, oscar)\n# Rule4: If the whale has a name whose first letter is the same as the first letter of the tiger's name, then the whale knocks down the fortress that belongs to the oscar\nrule4() = first_letter_of(name(whale)) == first_letter_of(name(tiger)) => knock_down_fortress(whale, oscar)\n# Rule5: If the whale has a card whose color starts with the letter \"e\", then the whale does not knock down the fortress of the oscar.\nrule5() = color_starts_with(whale, \"e\") => not knock_down_fortress(whale, oscar)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The whale has a card that is yellow in color, and is named Luna\nhas(whale, card) = True\ncolor(card, yellow) = True\nname(whale, Luna) = True\n# The whale has ten friends, and stole a bike from the store.\nfriends(whale) = 10\ntook_bike(whale) = True\n\n# Based on the game state and the rules and preferences, does the oscar show all her cards to the octopus?\nquestion = show_all_cards(oscar, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the viperfish is the same as the first letter of the name of the cheetah, then the viperfish removes one of the pieces of the cricket\nRule2: If the viperfish does not remove one of the pieces of the cricket, then the cricket offers a job to the gecko\nRule3: If the viperfish has fewer than 11 friends, then it removes from the board one of the pieces of the cricket.\n\nThe current state of the game is as follows\nThe name of the cheetah is Meadow\nThe viperfish has 1 friend\nThe name of the viperfish is Cinnamon\n\nBased on the game state and the rules and preferences, does the cricket offer a job to the gecko?\nQuestion: Does the cricket offer a job to the gecko?",
        "idx": 233,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the viperfish, if it has a name whose first letter is the same as the first letter of the cheetah's name, then we can conclude that it removes one of the pieces of the cricket\nrule1() = first_letter_of(name(viperfish)) == first_letter_of(name(cheetah)) => remove_piece(viperfish, cricket)\n# Rule2: If the viperfish does not remove one of the pieces of the cricket, then the cricket offers a job to the gecko\nrule2() = not remove_piece(viperfish, cricket) => offer_job_position(cricket, gecko)\n# Rule3: Regarding the viperfish, if it has fewer than 11 friends, then we can conclude that it removes from the board one of the pieces of the cricket.\nrule3() = friends(viperfish) < 11 => remove_piece(viperfish, cricket)\n\n# The current state of the game is as follows\n# The cheetah is named Meadow\nname(cheetah, Meadow) = True\n# The viperfish has 1 friend, and is named Cinnamon.\nfriends(viperfish) = 1\nname(viperfish, Cinnamon) = True\n\n# Based on the game state and the rules and preferences, does the cricket offer a job to the gecko?\nquestion = offer_job_position(cricket, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the oscar eats the food of the amberjack, then the amberjack prepares armor for the black bear\nRule2: If something eats the food of the phoenix, then the black bear does not know the defense plan of the doctorfish\nRule3: If the aardvark has fewer than fifteen friends, then it needs support from the black bear\nRule4: If something steals five points from the squirrel and five points from the eagle, then it does not prepare armor for the black bear\nRule5: If something burns the warehouse of the sheep, then the aardvark does not need the support of the black bear\nRule6: If the amberjack prepares armor for the black bear and the aardvark does not need the support of the black bear, then the black bear knows the defensive plans of the doctorfish.\n\nRule1 is preferred over Rule4\nRule2 is preferred over Rule6\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe aardvark has 1 kind friend and 7 unkind friends, and has a beer\nThe amberjack steals five points from the eagle\nThe amberjack steals five points from the squirrel\nThe gecko burns the warehouse of the sheep\nThe oscar eats the food of the amberjack.\n\nBased on the game state and the rules and preferences, does the black bear know the defensive plans of the doctorfish?\nQuestion: Does the black bear know the defensive plans of the doctorfish?",
        "idx": 234,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The amberjack unquestionably prepares armor for the black bear, in the case where the oscar eats the food of the amberjack\nrule1() = eats_food(oscar, food_of(amberjack)) => prepare_armor(amberjack, black_bear)\n# Rule2: The black bear does not know the defense plan of the doctorfish whenever at least one animal eats the food that belongs to the phoenix\nrule2() = eats_food(something, food_of(phoenix)) => not know(black_bear, defense_plan, doctorfish)\n# Rule3: Regarding the aardvark, if it has fewer than fifteen friends, then we can conclude that it needs support from the black bear\nrule3() = friends(aardvark) < 15 => needs_support(aardvark, black_bear)\n# Rule4: If you see that something steals five of the points of the squirrel and steals five of the points of the eagle, what can you certainly conclude? You can conclude that it does not prepare armor for the black bear\nrule4() = steals_points(something, squirrel, 5) & steals_points(something, eagle, 5) => not prepare_armor(something, black_bear)\n# Rule5: If at least one animal burns the warehouse that is in possession of the sheep, then the aardvark does not need the support of the black bear\nrule5() = burns_warehouse(something, warehouse_of(sheep)) => not needs_support(aardvark, black_bear)\n# Rule6: For the black bear, if the belief is that the amberjack prepares armor for the black bear and the aardvark does not need the support of the black bear, then you can add \"the black bear knows the defensive plans of the doctorfish\" to your conclusions.\nrule6() = prepare_armor(amberjack, black_bear) & not needs_support(aardvark, black_bear) => know(black_bear, defense_plan, doctorfish)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The aardvark has 1 friend that is kind and 7 friends that are not, and has a beer\nkind_friends(aardvark) = 1\nunkind_friends(aardvark) = 7\nhas(aardvark, beer) = True\n# The amberjack steals five points from the eagle\nsteals_points(amberjack, eagle, 5) = True\n# The amberjack steals five points from the squirrel\nsteals_points(amberjack, squirrel, 5) = True\n# The gecko burns the warehouse of the sheep\nburns_warehouse(gecko, warehouse_of(sheep)) = True\n# The oscar eats the food of the amberjack.\neats_food(oscar, food_of(amberjack)) = True\n\n# Based on the game state and the rules and preferences, does the black bear know the defensive plans of the doctorfish?\nquestion = know(black_bear, defense_plan, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the snail works more hours than before, then it does not raise a peace flag for the kudu\nRule2: If something does not sing a song of victory for the eel and also does not raise a flag of peace for the kudu, then it will surely not sing a victory song for the salmon\nRule3: If at least one animal owes money to the phoenix, then the snail sings a song of victory for the salmon\nRule4: If the first letter of the name of the snail is the same as the first letter of the name of the black bear, then the snail does not raise a peace flag for the kudu\nRule5: If the snail has a leafy green vegetable, then it does not sing a victory song for the eel.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe name of the black bear is Luna\nThe snail has some arugula\nThe snail reduced her work hours recently\nThe name of the snail is Lily\n\nBased on the game state and the rules and preferences, does the snail sing a victory song for the salmon?\nQuestion: Does the snail sing a victory song for the salmon?",
        "idx": 235,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the snail, if it works more hours than before, then we can conclude that it does not raise a peace flag for the kudu\nrule1() = works_more_hours(snail) => not raise_flag_of_peace(snail, kudu)\n# Rule2: Be careful when something does not sing a song of victory for the eel and also does not raise a flag of peace for the kudu because in this case it will surely not sing a victory song for the salmon (this may or may not be problematic)\nrule2(something) = not sing_song_of_victory(something, eel) & not raise_flag_of_peace(something, kudu) => not sing_song_of_victory(something, salmon)\n# Rule3: If at least one animal owes $$$ to the phoenix, then the snail sings a song of victory for the salmon\nrule3() = owes(something, money, phoenix) => sing_song_of_victory(snail, salmon)\n# Rule4: Regarding the snail, if it has a name whose first letter is the same as the first letter of the black bear's name, then we can conclude that it does not raise a flag of peace for the kudu\nrule4() = first_letter_of(name(snail)) == first_letter_of(name(black_bear)) => not raise_flag_of_peace(snail, kudu)\n# Rule5: If the snail has a leafy green vegetable, then the snail does not sing a victory song for the eel.\nrule5() = has(snail, leafy_green_vegetable) => not sing_song_of_victory(snail, eel)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The black bear is named Luna\nname(black_bear, Luna) = True\n# The snail has some arugula, and reduced her work hours recently\nhas(snail, arugula) = True\nreduced_work_hours(snail) = True\n# The snail is named Lily.\nname(snail, Lily) = True\n\n# Based on the game state and the rules and preferences, does the snail sing a victory song for the salmon?\nquestion = sing_song_of_victory(snail, salmon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus has a sharp object, then it attacks the green fields of the polar bear\nRule2: If the octopus has a card whose color starts with the letter \"y\", then it attacks the green fields of the polar bear\nRule3: If the lobster has more than two friends, then it burns the warehouse of the polar bear\nRule4: The blobfish eats the food that belongs to the polar bear whenever at least one animal offers a job position to the swordfish\nRule5: If the lobster works more hours than before, then it burns the warehouse of the polar bear\nRule6: If the octopus does not attack the green fields whose owner is the polar bear but the lobster burns the warehouse of the polar bear, then the polar bear prepares armor for the koala unavoidably.\n\nThe current state of the game is as follows\nThe kiwi holds the same number of points as the swordfish\nThe lobster assassinated the mayor\nThe lobster has 5 friends\nThe octopus has a backpack\nThe octopus has a card that is yellow in color.\n\nBased on the game state and the rules and preferences, does the polar bear prepare armor for the koala?\nQuestion: Does the polar bear prepare armor for the koala?",
        "idx": 236,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the octopus, if it has a sharp object, then we can conclude that it attacks the green fields of the polar bear\nrule1() = has(octopus, sharp_object) => attack(octopus, green_fields, polar_bear)\n# Rule2: If the octopus has a card whose color starts with the letter \"y\", then the octopus attacks the green fields of the polar bear\nrule2() = has(octopus, card) and starts_with(color(card), \"y\") => attack(octopus, green_fields, polar_bear)\n# Rule3: If the lobster has more than two friends, then the lobster burns the warehouse of the polar bear\nrule3() = friends(lobster) > 2 => burn(lobster, warehouse, polar_bear)\n# Rule4: The blobfish eats the food that belongs to the polar bear whenever at least one animal offers a job position to the swordfish\nrule4() = offer_job_position(something, swordfish) => eat(blobfish, food, polar_bear)\n# Rule5: If the lobster works more hours than before, then the lobster burns the warehouse of the polar bear\nrule5() = works_more_hours(lobster) => burn(lobster, warehouse, polar_bear)\n# Rule6: If the octopus does not attack the green fields whose owner is the polar bear but the lobster burns the warehouse of the polar bear, then the polar bear prepares armor for the koala unavoidably.\nrule6() = not attack(octopus, green_fields, polar_bear) & burn(lobster, warehouse, polar_bear) => prepare_armor(polar_bear, koala)\n\n# The current state of the game is as follows\n# The kiwi holds the same number of points as the swordfish\npoints(kiwi) == points(swordfish) = True\n# The lobster assassinated the mayor\nassassinate(lobster, mayor) = True\n# The lobster has 5 friends\nfriends(lobster) = 5\n# The octopus has a backpack\nhas(octopus, backpack) = True\n# The octopus has a card that is yellow in color.\nhas(octopus, card) = True\ncolor(card, yellow) = True\n\n# Based on the game state and the rules and preferences, does the polar bear prepare armor for the koala?\nquestion = prepare_armor(polar_bear, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something steals five of the points of the caterpillar, then the spider does not wink at the cat\nRule2: If something attacks the green fields whose owner is the grizzly bear, then the cat learns the basics of resource management from the blobfish\nRule3: If the spider has a high salary, then the spider winks at the cat\nRule4: If the spider winks at the cat and the tiger does not become an actual enemy of the cat, then the cat will never learn elementary resource management from the blobfish\nRule5: If something rolls the dice for the lobster and also learns elementary resource management from the mosquito, then it will surely attack the green fields whose owner is the grizzly bear.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cheetah learns the basics of resource management from the mosquito and rolls the dice for the lobster\nThe spider has a well-paid job.\n\nBased on the game state and the rules and preferences, does the cat learn the basics of resource management from the blobfish?\nQuestion: Does the cat learn the basics of resource management from the blobfish?",
        "idx": 237,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal steals five of the points of the caterpillar, then the spider does not wink at the cat\nrule1() = steal_points(something, caterpillar, 5) => not wink(spider, cat)\n# Rule2: If at least one animal attacks the green fields whose owner is the grizzly bear, then the cat learns the basics of resource management from the blobfish\nrule2() = attack(something, green_fields, owner(grizzly_bear)) => learn(cat, basics_of_resource_management, blobfish)\n# Rule3: If the spider has a high salary, then the spider winks at the cat\nrule3() = has_high_salary(spider) => wink(spider, cat)\n# Rule4: If the spider winks at the cat and the tiger does not become an actual enemy of the cat, then the cat will never learn elementary resource management from the blobfish\nrule4() = wink(spider, cat) & not become_enemy(tiger, cat) => not learn(cat, elementary_resource_management, blobfish)\n# Rule5: Be careful when something rolls the dice for the lobster and also learns elementary resource management from the mosquito because in this case it will surely attack the green fields whose owner is the grizzly bear (this may or may not be problematic).\nrule5() = roll_dice(something, lobster) & learn(something, elementary_resource_management, mosquito) => attack(something, green_fields, owner(grizzly_bear))\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cheetah learns the basics of resource management from the mosquito, and rolls the dice for the lobster\nlearn(cheetah, basics_of_resource_management, mosquito) = True\nroll_dice(cheetah, lobster) = True\n# The spider got a well-paid job.\nhas_high_salary(spider) = True\n\n# Based on the game state and the rules and preferences, does the cat learn the basics of resource management from the blobfish?\nquestion = learn(cat, basics_of_resource_management, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the ferret does not learn the basics of resource management from the buffalo, then the buffalo raises a peace flag for the penguin\nRule2: If the cow has a card whose color appears in the flag of Italy, then the cow raises a peace flag for the dog\nRule3: If something raises a peace flag for the oscar, then the buffalo does not raise a peace flag for the penguin\nRule4: If the cow has a sharp object, then it raises a peace flag for the dog\nRule5: If the parrot works fewer hours than before, then it offers a job to the penguin\nRule6: If the parrot offers a job to the penguin and the buffalo does not raise a peace flag for the penguin, then the penguin does not attack the green fields of the doctorfish.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cow has a white card\nThe cow has a trumpet\nThe name of the parrot is Meadow\nThe parrot works fewer hours than before\nThe polar bear raises a peace flag for the oscar\nThe name of the tiger is Mojo\nThe ferret does not learn the basics of resource management from the buffalo.\n\nBased on the game state and the rules and preferences, does the penguin attack the green fields whose owner is the doctorfish?\nQuestion: Does the penguin attack the green fields whose owner is the doctorfish?",
        "idx": 238,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the ferret does not learn the basics of resource management from the buffalo, then the buffalo raises a peace flag for the penguin\nrule1() = not learn(ferret, basics_of_resource_management, buffalo) => raise_flag_of_peace(buffalo, penguin)\n# Rule2: If the cow has a card whose color appears in the flag of Italy, then the cow raises a peace flag for the dog\nrule2() = has(cow, card) and color(card) in colors_of_italian_flag => raise_flag_of_peace(cow, dog)\n# Rule3: If at least one animal raises a flag of peace for the oscar, then the buffalo does not raise a peace flag for the penguin\nrule3() = raise_flag_of_peace(something, oscar) => not raise_flag_of_peace(buffalo, penguin)\n# Rule4: Regarding the cow, if it has a sharp object, then we can conclude that it raises a flag of peace for the dog\nrule4() = has(cow, sharp_object) => raise_flag_of_peace(cow, dog)\n# Rule5: If the parrot works fewer hours than before, then the parrot offers a job to the penguin\nrule5() = works_fewer_hours(parrot) => offer_job(parrot, penguin)\n# Rule6: For the penguin, if the belief is that the parrot offers a job to the penguin and the buffalo does not raise a peace flag for the penguin, then you can add \"the penguin does not attack the green fields of the doctorfish\" to your conclusions.\nrule6() = offer_job(parrot, penguin) & not raise_flag_of_peace(buffalo, penguin) => not attack(penguin, green_fields_of(doctorfish))\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cow has a card that is white in color\nhas(cow, card) = True\ncolor(card, white) = True\n# The cow has a trumpet\nhas(cow, trumpet) = True\n# The parrot is named Meadow\nname(parrot, Meadow) = True\n# The parrot reduced her work hours recently\nworks_fewer_hours(parrot) = True\n# The polar bear raises a peace flag for the oscar\nraise_flag_of_peace(polar_bear, oscar) = True\n# The tiger is named Mojo\nname(tiger, Mojo) = True\n# The ferret does not learn the basics of resource management from the buffalo.\nlearn(ferret, basics_of_resource_management, buffalo) = False\n\n# Based on the game state and the rules and preferences, does the penguin attack the green fields whose owner is the doctorfish?\nquestion = attack(penguin, green_fields_of(doctorfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The doctorfish does not learn elementary resource management from the hare whenever at least one piece of the starfish is removed\nRule2: If the jellyfish removes one of the pieces of the sun bear, then the sun bear does not owe $$$ to the hare\nRule3: The doctorfish learns the basics of resource management from the hare if the viperfish attacks the green fields of the doctorfish\nRule4: If the doctorfish learns the basics of resource management from the hare and the sun bear owes $$$ to the hare, then the hare learns the basics of resource management from the wolverine\nRule5: If something eats the food of the elephant, then the sun bear owes $$$ to the hare.\n\nRule1 is preferred over Rule3\nRule2 is preferred over Rule5\n\nThe current state of the game is as follows\nThe eel eats the food of the elephant\nThe viperfish does not attack the green fields whose owner is the doctorfish.\n\nBased on the game state and the rules and preferences, does the hare learn the basics of resource management from the wolverine?\nQuestion: Does the hare learn the basics of resource management from the wolverine?",
        "idx": 239,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The doctorfish does not learn elementary resource management from the hare whenever at least one animal removes one of the pieces of the starfish\nrule1() = remove(something, piece, starfish) => not learn(doctorfish, elementary_resource_management, hare)\n# Rule2: If the jellyfish removes from the board one of the pieces of the sun bear, then the sun bear is not going to owe $$$ to the hare\nrule2() = remove(jellyfish, piece, sun_bear) => not owe(sun_bear, $$$, hare)\n# Rule3: The doctorfish unquestionably learns the basics of resource management from the hare, in the case where the viperfish attacks the green fields of the doctorfish\nrule3() = attack(viperfish, green_fields, doctorfish) => learn(doctorfish, basics_of_resource_management, hare)\n# Rule4: If the doctorfish learns the basics of resource management from the hare and the sun bear owes $$$ to the hare, then the hare learns the basics of resource management from the wolverine\nrule4() = learn(doctorfish, basics_of_resource_management, hare) & owe(sun_bear, $$$, hare) => learn(hare, basics_of_resource_management, wolverine)\n# Rule5: If at least one animal eats the food that belongs to the elephant, then the sun bear owes $$$ to the hare.\nrule5() = eat_food(something, food_of(elephant)) => owe(sun_bear, $$$, hare)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n\n# The current state of the game is as follows\n# The eel eats the food of the elephant\neat_food(eel, food_of(elephant)) = True\n# The viperfish does not attack the green fields whose owner is the doctorfish.\nattack(viperfish, green_fields, doctorfish) = False\n\n# Based on the game state and the rules and preferences, does the hare learn the basics of resource management from the wolverine?\nquestion = learn(hare, basics_of_resource_management, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something owes $$$ to the sun bear, then it knocks down the fortress that belongs to the puffin, too\nRule2: If the belief is that the eagle does not knock down the fortress that belongs to the puffin and the canary does not burn the warehouse of the puffin, then you can add \"the puffin gives a magnifier to the carp\" to your conclusions\nRule3: If the eagle has something to drink, then it does not knock down the fortress that belongs to the puffin\nRule4: If the tilapia eats the food that belongs to the canary, then the canary burns the warehouse of the puffin\nRule5: If the canary has more than 10 friends, then it does not burn the warehouse that is in possession of the puffin.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe canary has 14 friends\nThe eagle has a hot chocolate.\n\nBased on the game state and the rules and preferences, does the puffin give a magnifier to the carp?\nQuestion: Does the puffin give a magnifier to the carp?",
        "idx": 240,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something owes $$$ to the sun bear, then it knocks down the fortress that belongs to the puffin, too\nrule1(something) = owe(something, $$$, sun_bear) => knock_down(something, fortress, puffin)\n# Rule2: For the puffin, if the belief is that the eagle does not knock down the fortress that belongs to the puffin and the canary does not burn the warehouse of the puffin, then you can add \"the puffin gives a magnifier to the carp\" to your conclusions\nrule2() = not knock_down(eagle, fortress, puffin) & not burn(canary, warehouse, puffin) => add_conclusion(puffin_gives_magnifier_to(carp))\n# Rule3: If the eagle has something to drink, then the eagle does not knock down the fortress that belongs to the puffin\nrule3() = has(eagle, drink) => not knock_down(eagle, fortress, puffin)\n# Rule4: The canary unquestionably burns the warehouse of the puffin, in the case where the tilapia eats the food that belongs to the canary\nrule4() = eat_food(tilapia, food_of(canary)) => burn(canary, warehouse, puffin)\n# Rule5: Regarding the canary, if it has more than 10 friends, then we can conclude that it does not burn the warehouse that is in possession of the puffin.\nrule5() = friends(canary) > 10 => not burn(canary, warehouse, puffin)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The canary has 14 friends\nfriends(canary) = 14\n# The eagle has a hot chocolate.\nhas(eagle, hot_chocolate) = True\n\n# Based on the game state and the rules and preferences, does the puffin give a magnifier to the carp?\nquestion = add_conclusion(puffin_gives_magnifier_to(carp))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the cockroach rolls the dice for the mosquito and the oscar knocks down the fortress that belongs to the mosquito, then you can add that \"the mosquito is not going to proceed to the spot right after the donkey\" to your conclusions\nRule2: If at least one animal becomes an enemy of the snail, then the mosquito proceeds to the spot that is right after the spot of the donkey\nRule3: If something proceeds to the spot that is right after the spot of the donkey, then it does not become an enemy of the cricket.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe doctorfish becomes an enemy of the snail\nThe oscar knocks down the fortress of the mosquito.\n\nBased on the game state and the rules and preferences, does the mosquito become an enemy of the cricket?\nQuestion: Does the mosquito become an enemy of the cricket?",
        "idx": 241,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the mosquito, if the belief is that the cockroach rolls the dice for the mosquito and the oscar knocks down the fortress that belongs to the mosquito, then you can add that \"the mosquito is not going to proceed to the spot right after the donkey\" to your conclusions\nrule1() = belief(roll_dice, cockroach, mosquito) & knocks_down(oscar, fortress, mosquito) => add_conclusion(\"the mosquito is not going to proceed to the spot right after the donkey\")\n# Rule2: If at least one animal becomes an enemy of the snail, then the mosquito proceeds to the spot that is right after the spot of the donkey\nrule2() = becomes_enemy(something, snail) => proceeds_to(mosquito, spot_right_after(donkey))\n# Rule3: If something proceeds to the spot that is right after the spot of the donkey, then it does not become an enemy of the cricket.\nrule3() = proceeds_to(something, spot_right_after(donkey)) => not becomes_enemy(something, cricket)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The doctorfish becomes an enemy of the snail\nbecomes_enemy(doctorfish, snail) = True\n# The oscar knocks down the fortress of the mosquito.\nknocks_down(oscar, fortress, mosquito) = True\n\n# Based on the game state and the rules and preferences, does the mosquito become an enemy of the cricket?\nquestion = becomes_enemy(mosquito, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the koala needs support from the panther, then the panther does not hold an equal number of points as the pig\nRule2: If the panther has something to drink, then it learns elementary resource management from the eel\nRule3: If the koala killed the mayor, then it needs support from the panther\nRule4: If something shows all of her cards to the halibut and learns the basics of resource management from the eel, then it holds the same number of points as the pig\nRule5: If the panther has a card whose color starts with the letter \"b\", then it shows all of her cards to the halibut.\n\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe koala parked her bike in front of the store\nThe panther has a cappuccino\nThe panther has a card that is indigo in color.\n\nBased on the game state and the rules and preferences, does the panther hold the same number of points as the pig?\nQuestion: Does the panther hold the same number of points as the pig?",
        "idx": 242,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The panther does not hold an equal number of points as the pig, in the case where the koala needs support from the panther\nrule1() = needs_support(koala, panther) => points(panther) != points(pig)\n# Rule2: If the panther has something to drink, then the panther learns elementary resource management from the eel\nrule2() = has(panther, drink) => learn(panther, elementary_resource_management, eel)\n# Rule3: Regarding the koala, if it killed the mayor, then we can conclude that it needs support from the panther\nrule3() = killed(koala, mayor) => needs_support(koala, panther)\n# Rule4: Be careful when something shows her cards (all of them) to the halibut and also learns the basics of resource management from the eel because in this case it will surely hold the same number of points as the pig (this may or may not be problematic)\nrule4(something) = show_cards(something, halibut) & learn(something, basics_of_resource_management, eel) => points(something) == points(pig)\n# Rule5: If the panther has a card whose color starts with the letter \"b\", then the panther shows her cards (all of them) to the halibut.\nrule5() = has(panther, card) and starts_with(color(card), \"b\") => show_cards(panther, halibut)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The koala parked her bike in front of the store\nparked(koala, bike, front_of(store)) = True\n# The panther has a cappuccino\nhas(panther, cappuccino) = True\n# The panther has a card that is indigo in color.\nhas(panther, card) = True\ncolor(card, indigo) = True\n\n# Based on the game state and the rules and preferences, does the panther hold the same number of points as the pig?\nquestion = points(panther) == points(pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something proceeds to the spot that is right after the spot of the penguin, then it offers a job to the snail, too\nRule2: If the whale has more than two friends, then it proceeds to the spot that is right after the spot of the penguin\nRule3: If the moose offers a job position to the whale and the caterpillar gives a magnifying glass to the whale, then the whale does not offer a job position to the snail\nRule4: If the moose supports Chris Ronaldo, then it offers a job position to the whale.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe moose has a couch\nThe moose has a knife\nThe moose supports Chris Ronaldo\nThe whale has 6 friends.\n\nBased on the game state and the rules and preferences, does the whale offer a job to the snail?\nQuestion: Does the whale offer a job to the snail?",
        "idx": 243,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something proceeds to the spot that is right after the spot of the penguin, then it offers a job to the snail, too\nrule1(something) = proceeds_to_right_after(something, spot_of(penguin)) => offer_job_position(something, snail)\n# Rule2: Regarding the whale, if it has more than two friends, then we can conclude that it proceeds to the spot that is right after the spot of the penguin\nrule2() = friends(whale) > 2 => proceeds_to_right_after(whale, spot_of(penguin))\n# Rule3: For the whale, if the belief is that the moose offers a job position to the whale and the caterpillar gives a magnifying glass to the whale, then you can add that \"the whale is not going to offer a job position to the snail\" to your conclusions\nrule3() = offer_job_position(moose, whale) & give(caterpillar, magnifying_glass, whale) => not offer_job_position(whale, snail)\n# Rule4: If the moose is a fan of Chris Ronaldo, then the moose offers a job position to the whale.\nrule4() = supports(moose, Chris_Ronaldo) => offer_job_position(moose, whale)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The moose has a couch\nhas(moose, couch) = True\n# The moose has a knife, and supports Chris Ronaldo\nhas(moose, knife) = True\nsupports(moose, Chris_Ronaldo) = True\n# The whale has 6 friends.\nfriends(whale) = 6\n\n# Based on the game state and the rules and preferences, does the whale offer a job to the snail?\nquestion = offer_job_position(whale, snail)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squid has a high salary, then it learns the basics of resource management from the viperfish\nRule2: The cow does not give a magnifying glass to the canary whenever at least one animal learns elementary resource management from the viperfish.\n\nThe current state of the game is as follows\nThe squid has a well-paid job.\n\nBased on the game state and the rules and preferences, does the cow give a magnifier to the canary?\nQuestion: Does the cow give a magnifying glass to the canary?",
        "idx": 244,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the squid, if it has a high salary, then we can conclude that it learns the basics of resource management from the viperfish\nrule1() = has(squid, high_salary) => learn(squid, basics_of_resource_management, viperfish)\n# Rule2: The cow does not give a magnifying glass to the canary whenever at least one animal learns elementary resource management from the viperfish.\nrule2() = learn(something, elementary_resource_management, viperfish) => not give(cow, magnifying_glass, canary)\n\n# The current state of the game is as follows\n# The squid got a well-paid job.\nhas(squid, high_salary) = True\n\n# Based on the game state and the rules and preferences, does the cow give a magnifier to the canary?\nquestion = give(cow, magnifying_glass, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something owes money to the leopard and learns elementary resource management from the sea bass, then it holds an equal number of points as the meerkat\nRule2: If the ferret raises a peace flag for the crocodile, then the crocodile does not hold an equal number of points as the meerkat\nRule3: If the crocodile has a name whose first letter is the same as the first letter of the puffin's name, then the crocodile owes money to the leopard\nRule4: If something respects the phoenix, then the crocodile learns the basics of resource management from the sea bass\nRule5: If the cockroach owes money to the ferret and the black bear becomes an enemy of the ferret, then the ferret raises a flag of peace for the crocodile.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe black bear becomes an enemy of the ferret\nThe blobfish prepares armor for the phoenix\nThe cockroach owes money to the ferret\nThe name of the crocodile is Pablo\nThe name of the puffin is Pashmak.\n\nBased on the game state and the rules and preferences, does the crocodile hold the same number of points as the meerkat?\nQuestion: Does the crocodile hold the same number of points as the meerkat?",
        "idx": 245,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something owes money to the leopard and learns elementary resource management from the sea bass, what can you certainly conclude? You can conclude that it also holds an equal number of points as the meerkat\nrule1(something) = owes(something, money, leopard) & learns(something, elementary_resource_management_from(sea_bass)) => points(something) == points(meerkat)\n# Rule2: If the ferret raises a peace flag for the crocodile, then the crocodile is not going to hold an equal number of points as the meerkat\nrule2() = raise_flag_of_peace(ferret, crocodile) => not points(crocodile) == points(meerkat)\n# Rule3: If the crocodile has a name whose first letter is the same as the first letter of the puffin's name, then the crocodile owes $$$ to the leopard\nrule3() = first_letter_of(name(crocodile)) == first_letter_of(name(puffin)) => owes(crocodile, money, leopard)\n# Rule4: If at least one animal respects the phoenix, then the crocodile learns the basics of resource management from the sea bass\nrule4() = respects(something, phoenix) => learns(crocodile, basics_of_resource_management_from(sea_bass))\n# Rule5: For the ferret, if the belief is that the cockroach prepares armor for the ferret and the black bear becomes an enemy of the ferret, then you can add \"the ferret raises a flag of peace for the crocodile\" to your conclusions.\nrule5() = prepares_armor(cockroach, ferret) & becomes_enemy(black_bear, ferret) => raise_flag_of_peace(ferret, crocodile)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The black bear becomes an enemy of the ferret\nbecomes_enemy(black_bear, ferret) = True\n# The blobfish prepares armor for the phoenix\nprepares_armor(blobfish, phoenix) = True\n# The cockroach owes money to the ferret\nowes(cockroach, money, ferret) = True\n# The crocodile is named Pablo\nname(crocodile, Pablo) = True\n# The puffin is named Pashmak.\nname(puffin, Pashmak) = True\n\n# Based on the game state and the rules and preferences, does the crocodile hold the same number of points as the meerkat?\nquestion = points(crocodile) == points(meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the kudu, then it does not show all her cards to the dog\nRule2: If the pig has something to sit on, then the pig knocks down the fortress of the elephant\nRule3: If the wolverine created a time machine, then the wolverine owes $$$ to the dog\nRule4: If the amberjack does not show all her cards to the dog and the wolverine owes $$$ to the dog, then the dog gives a magnifying glass to the caterpillar unavoidably\nRule5: If something knocks down the fortress of the elephant, then the dog does not give a magnifying glass to the caterpillar.\n\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe amberjack rolls the dice for the kudu\nThe penguin burns the warehouse of the pig\nThe pig has a love seat sofa\nThe wolverine invented a time machine.\n\nBased on the game state and the rules and preferences, does the dog give a magnifier to the caterpillar?\nQuestion: Does the dog give a magnifying glass to the caterpillar?",
        "idx": 246,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something rolls the dice for the kudu, then it does not show all her cards to the dog\nrule1(something) = rolls_dice(something, kudu) => not show_all_cards(something, dog)\n# Rule2: If the pig has something to sit on, then the pig knocks down the fortress of the elephant\nrule2() = has(pig, something_to_sit_on) => knocks_down(pig, fortress, elephant)\n# Rule3: If the wolverine created a time machine, then the wolverine owes $$$ to the dog\nrule3() = created(wolverine, time_machine) => owes(wolverine, $$$, dog)\n# Rule4: If the amberjack does not show her cards (all of them) to the dog but the wolverine owes $$$ to the dog, then the dog gives a magnifying glass to the caterpillar unavoidably\nrule4() = not show_all_cards(amberjack, dog) & owes(wolverine, $$$, dog) => give(dog, magnifying_glass, caterpillar)\n# Rule5: If at least one animal knocks down the fortress of the elephant, then the dog does not give a magnifying glass to the caterpillar.\nrule5(something) = knocks_down(something, fortress, elephant) => not give(dog, magnifying_glass, caterpillar)\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The amberjack rolls the dice for the kudu\nrolls_dice(amberjack, kudu) = True\n# The penguin burns the warehouse of the pig\nburns(penguin, warehouse, pig) = True\n# The pig has a love seat sofa\nhas(pig, love_seat_sofa) = True\n# The wolverine invented a time machine.\ncreated(wolverine, time_machine) = True\n\n# Based on the game state and the rules and preferences, does the dog give a magnifier to the caterpillar?\nquestion = give(dog, magnifying_glass, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish has a name whose first letter is the same as the first letter of the whale's name, then the catfish becomes an enemy of the eel\nRule2: If something rolls the dice for the dog but does not wink at the cow, then it does not raise a flag of peace for the eel\nRule3: If the hummingbird does not raise a peace flag for the eel, then the eel does not owe money to the squid\nRule4: If the hare knocks down the fortress of the catfish and the tiger does not offer a job to the catfish, then the catfish does not become an enemy of the eel\nRule5: The eel owes money to the squid, unless the catfish becomes an enemy of the eel.\n\nRule3 is preferred over Rule5\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the catfish is Tango\nThe hare knocks down the fortress of the catfish\nThe hummingbird rolls the dice for the dog but does not wink at the cow\nThe name of the whale is Tarzan\nThe tiger does not offer a job to the catfish.\n\nBased on the game state and the rules and preferences, does the eel owe money to the squid?\nQuestion: Does the eel owe money to the squid?",
        "idx": 247,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the catfish has a name whose first letter is the same as the first letter of the whale's name, then the catfish becomes an actual enemy of the eel\nrule1() = first_letter_of(name(catfish)) == first_letter_of(name(whale)) => become_enemy(catfish, eel)\n# Rule2: Be careful when something does not wink at the cow but rolls the dice for the dog because in this case it certainly does not raise a flag of peace for the eel (this may or may not be problematic)\nrule2(something) = not wink(something, cow) & roll_dice(something, dog) => not raise_flag_of_peace(something, eel)\n# Rule3: If the hummingbird does not raise a peace flag for the eel, then the eel does not owe $$$ to the squid\nrule3() = not raise_flag_of_peace(hummingbird, eel) => not owe(eel, money, squid)\n# Rule4: For the catfish, if the belief is that the hare knocks down the fortress that belongs to the catfish and the tiger does not offer a job to the catfish, then you can add \"the catfish does not become an enemy of the eel\" to your conclusions\nrule4() = knocks_down(hare, fortress, catfish) & not offer_job_position(tiger, catfish) => not become_enemy(catfish, eel)\n# Rule5: The eel unquestionably owes money to the squid, in the case where the catfish does not become an enemy of the eel.\nrule5() = not become_enemy(catfish, eel) => owe(eel, money, squid)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The catfish is named Tango\nname(catfish, Tango) = True\n# The hare knocks down the fortress of the catfish\nknocks_down(hare, fortress, catfish) = True\n# The hummingbird rolls the dice for the dog but does not wink at the cow\nroll_dice(hummingbird, dog) = True\nwink(hummingbird, cow) = False\n# The whale is named Tarzan\nname(whale, Tarzan) = True\n# The tiger does not offer a job to the catfish.\noffer_job_position(tiger, catfish) = False\n\n# Based on the game state and the rules and preferences, does the eel owe money to the squid?\nquestion = owe(eel, money, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the raven winks at the cat and the wolverine learns elementary resource management from the cat, then the cat will not show all her cards to the gecko\nRule2: If the cat shows all her cards to the gecko, then the gecko owes money to the grasshopper\nRule3: If the cat created a time machine, then it shows all her cards to the gecko\nRule4: If the cat has more than 7 friends, then it shows all her cards to the gecko.\n\nRule1 is preferred over Rule3\nRule1 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cat assassinated the mayor\nThe cat has one lazy friend and one non-lazy friend\nThe raven is not an enemy of the cat.\n\nBased on the game state and the rules and preferences, does the gecko owe money to the grasshopper?\nQuestion: Does the gecko owe money to the grasshopper?",
        "idx": 248,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the raven winks at the cat and the wolverine learns elementary resource management from the cat, then the cat will not show all her cards to the gecko\nrule1() = wink(raven, cat) & learn(wolverine, elementary_resource_management_from(cat)) => not show_all_cards(cat, gecko)\n# Rule2: If the cat shows her cards (all of them) to the gecko, then the gecko owes $$$ to the grasshopper\nrule2() = show_all_cards(cat, gecko) => owe(gecko, money, grasshopper)\n# Rule3: Regarding the cat, if it created a time machine, then we can conclude that it shows her cards (all of them) to the gecko\nrule3() = created(cat, time_machine) => show_all_cards(cat, gecko)\n# Rule4: If the cat has more than 7 friends, then the cat shows all her cards to the gecko.\nrule4() = friends(cat) > 7 => show_all_cards(cat, gecko)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cat assassinated the mayor\nassassinated(cat, mayor) = True\n# The cat has one friend that is lazy and one friend that is not\nlazy_friends(cat) = 1\nnon_lazy_friends(cat) = 1\n# The raven does not become an enemy of the cat.\nbecome_enemy(raven, cat) = False\n\n# Based on the game state and the rules and preferences, does the gecko owe money to the grasshopper?\nquestion = owe(gecko, money, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the mosquito becomes an enemy of the cat and the lion respects the cat, then you can add \"the cat needs the support of the gecko\" to your conclusions\nRule2: If the grizzly bear does not respect the cat, then the cat does not need support from the gecko\nRule3: If the lion has a card whose color starts with the letter \"w\", then it respects the cat\nRule4: If the mosquito has more than 5 friends, then it becomes an enemy of the cat\nRule5: If the mosquito owns a luxury aircraft, then it does not become an actual enemy of the cat.\n\nRule2 is preferred over Rule1\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe lion becomes an enemy of the jellyfish\nThe lion has a card that is white in color\nThe lion owes money to the black bear\nThe mosquito has 14 friends.\n\nBased on the game state and the rules and preferences, does the cat need support from the gecko?\nQuestion: Does the cat need support from the gecko?",
        "idx": 249,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the cat, if the belief is that the mosquito becomes an enemy of the cat and the lion respects the cat, then you can add \"the cat needs the support of the gecko\" to your conclusions\nrule1() = believes(mosquito, becomes_enemy, cat) & respects(lion, cat) => add_conclusion(\"the cat needs the support of the gecko\")\n# Rule2: If the grizzly bear does not respect the cat, then the cat does not need support from the gecko\nrule2() = not respects(grizzly_bear, cat) => not need_support(cat, gecko)\n# Rule3: Regarding the lion, if it has a card whose color starts with the letter \"w\", then we can conclude that it respects the cat\nrule3() = has(lion, card) & starts_with(color(card), \"w\") => respects(lion, cat)\n# Rule4: Regarding the mosquito, if it has more than 5 friends, then we can conclude that it becomes an enemy of the cat\nrule4() = friends(mosquito) > 5 => becomes_enemy(mosquito, cat)\n# Rule5: If the mosquito owns a luxury aircraft, then the mosquito does not become an actual enemy of the cat.\nrule5() = owns(mosquito, luxury_aircraft) => not becomes_enemy(mosquito, cat)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The lion becomes an enemy of the jellyfish\nbecomes_enemy(lion, jellyfish) = True\n# The lion has a card that is white in color, and owes money to the black bear\nhas(lion, card) = True\ncolor(card, white) = True\nowes(lion, money, black_bear) = True\n# The mosquito has 14 friends.\nfriends(mosquito) = 14\n\n# Based on the game state and the rules and preferences, does the cat need support from the gecko?\nquestion = need_support(cat, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not attack the green fields of the halibut, then it burns the warehouse that is in possession of the octopus\nRule2: If something removes from the board one of the pieces of the polar bear, then the catfish does not burn the warehouse that is in possession of the octopus\nRule3: If something raises a flag of peace for the cockroach, then the aardvark removes one of the pieces of the polar bear.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe snail raises a peace flag for the cockroach.\n\nBased on the game state and the rules and preferences, does the catfish burn the warehouse of the octopus?\nQuestion: Does the catfish burn the warehouse of the octopus?",
        "idx": 250,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not attack the green fields of the halibut, then it burns the warehouse that is in possession of the octopus\nrule1(something) = not attack(something, green_fields, halibut) => burn_warehouse(octopus)\n# Rule2: If at least one animal removes from the board one of the pieces of the polar bear, then the catfish does not burn the warehouse that is in possession of the octopus\nrule2() = remove_from_board(something, piece, polar_bear) => not burn_warehouse(octopus)\n# Rule3: If at least one animal raises a flag of peace for the cockroach, then the aardvark removes one of the pieces of the polar bear.\nrule3() = raise_flag_of_peace(something, cockroach) => remove_from_board(aardvark, piece, polar_bear)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The snail raises a peace flag for the cockroach.\nraise_flag_of_peace(snail, cockroach) = True\n\n# Based on the game state and the rules and preferences, does the catfish burn the warehouse of the octopus?\nquestion = burn_warehouse(catfish, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the aardvark has something to carry apples and oranges, then it owes $$$ to the dog\nRule2: If something owes money to the dog, then it knows the defensive plans of the cricket.\n\nThe current state of the game is as follows\nThe aardvark has romaine lettuce.\n\nBased on the game state and the rules and preferences, does the aardvark know the defensive plans of the cricket?\nQuestion: Does the aardvark know the defensive plans of the cricket?",
        "idx": 251,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the aardvark, if it has something to carry apples and oranges, then we can conclude that it owes $$$ to the dog\nrule1() = has(aardvark, something_to_carry_apples_and_oranges) => owes(aardvark, $$$, dog)\n# Rule2: If you are positive that you saw one of the animals owes money to the dog, you can be certain that it will also know the defensive plans of the cricket.\nrule2(something) = owes(something, $$$, dog) => knows(something, defensive_plans, cricket)\n\n# The current state of the game is as follows\n# The aardvark has some romaine lettuce.\nhas(aardvark, romaine_lettuce) = True\n\n# Based on the game state and the rules and preferences, does the aardvark know the defensive plans of the cricket?\nquestion = knows(aardvark, defensive_plans, cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something eats the food of the cricket, then it proceeds to the spot right after the whale\nRule2: If something attacks the green fields whose owner is the baboon and gives a magnifying glass to the ferret, then it does not proceed to the spot that is right after the spot of the whale\nRule3: If at least one animal proceeds to the spot right after the whale, then the hippopotamus offers a job to the carp.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe polar bear attacks the green fields whose owner is the baboon\nThe polar bear eats the food of the cricket\n\nBased on the game state and the rules and preferences, does the hippopotamus offer a job to the carp?\nQuestion: Does the hippopotamus offer a job to the carp?",
        "idx": 252,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals eats the food that belongs to the cricket, you can be certain that it will also proceed to the spot right after the whale\nrule1(something) = eats_food(something, food_of(cricket)) => proceed_to_spot(something, spot_right_after(whale))\n# Rule2: If you see that something attacks the green fields whose owner is the baboon and gives a magnifying glass to the ferret, what can you certainly conclude? You can conclude that it does not proceed to the spot that is right after the spot of the whale\nrule2() = attacks(something, green_fields_of(baboon)) & give(something, magnifying_glass, ferret) => not proceed_to_spot(something, spot_right_after(whale))\n# Rule3: If at least one animal proceeds to the spot right after the whale, then the hippopotamus offers a job to the carp.\nrule3() = proceed_to_spot(something, spot_right_after(whale)) => offer_job_position(hippopotamus, carp)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The polar bear attacks the green fields whose owner is the baboon\nattacks(polar_bear, green_fields_of(baboon)) = True\n# The polar bear eats the food of the cricket\neats_food(polar_bear, food_of(cricket)) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus offer a job to the carp?\nquestion = offer_job_position(hippopotamus, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the dog has something to sit on, then it does not knock down the fortress of the snail\nRule2: If the grizzly bear does not owe money to the dog, then the dog does not offer a job position to the canary\nRule3: If the tilapia does not offer a job to the dog but the puffin burns the warehouse of the dog, then the dog knocks down the fortress of the snail unavoidably\nRule4: If the first letter of the name of the dog is the same as the first letter of the name of the eel, then the dog does not knock down the fortress of the snail\nRule5: If the caterpillar does not show all her cards to the dog, then the dog will not become an enemy of the grizzly bear\nRule6: If something does not become an actual enemy of the grizzly bear and also does not knock down the fortress of the snail, then it offers a job to the canary\nRule7: If the grizzly bear has a leafy green vegetable, then it does not owe money to the dog.\n\nRule2 is preferred over Rule6\nRule3 is preferred over Rule1\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe dog has a beer\nThe name of the dog is Charlie\nThe name of the eel is Casper\nThe grizzly bear has some spinach\nThe caterpillar does not show all her cards to the dog\nThe tilapia does not offer a job to the dog.\n\nBased on the game state and the rules and preferences, does the dog offer a job to the canary?\nQuestion: Does the dog offer a job to the canary?",
        "idx": 253,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the dog has something to sit on, then the dog does not knock down the fortress of the snail\nrule1() = has(dog, something_to_sit_on) => not knock_down(dog, fortress, snail)\n# Rule2: If the grizzly bear does not owe money to the dog, then the dog does not offer a job position to the canary\nrule2() = not owe(grizzly_bear, money, dog) => not offer_job_position(dog, canary)\n# Rule3: If the tilapia does not offer a job to the dog but the puffin burns the warehouse of the dog, then the dog knocks down the fortress of the snail unavoidably\nrule3() = not offer_job_position(tilapia, dog) & burn_warehouse(puffin, dog) => knock_down(dog, fortress, snail)\n# Rule4: If the dog has a name whose first letter is the same as the first letter of the eel's name, then the dog does not knock down the fortress of the snail\nrule4() = first_letter_of(name(dog)) == first_letter_of(name(eel)) => not knock_down(dog, fortress, snail)\n# Rule5: The dog will not become an enemy of the grizzly bear, in the case where the caterpillar does not show her cards (all of them) to the dog\nrule5() = not show_all_cards(caterpillar, dog) => not become_enemy(dog, grizzly_bear)\n# Rule6: If you see that something does not become an actual enemy of the grizzly bear and also does not knock down the fortress of the snail, what can you certainly conclude? You can conclude that it also offers a job to the canary\nrule6(something) = not become_enemy(something, grizzly_bear) & not knock_down(something, fortress, snail) => offer_job_position(something, canary)\n# Rule7: Regarding the grizzly bear, if it has a leafy green vegetable, then we can conclude that it does not owe money to the dog.\nrule7() = has(grizzly_bear, leafy_green_vegetable) => not owe(grizzly_bear, money, dog)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The dog has a beer, and is named Charlie\nhas(dog, beer) = True\nname(dog, Charlie) = True\n# The eel is named Casper\nname(eel, Casper) = True\n# The grizzly bear has some spinach\nhas(grizzly_bear, spinach) = True\n# The caterpillar does not show all her cards to the dog\nshow_all_cards(caterpillar, dog) = False\n# The tilapia does not offer a job to the dog.\noffer_job_position(tilapia, dog) = False\n\n# Based on the game state and the rules and preferences, does the dog offer a job to the canary?\nquestion = offer_job_position(dog, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squirrel works fewer hours than before, then it does not owe money to the lobster\nRule2: If the squirrel does not owe money to the lobster but the buffalo steals five points from the lobster, then the lobster learns elementary resource management from the doctorfish unavoidably\nRule3: If the buffalo killed the mayor, then the buffalo steals five points from the lobster\nRule4: If the squirrel has a card and the color of the card is one of the rainbow colors, then it owes money to the lobster\nRule5: If the first letter of the name of the squirrel is the same as the first letter of the name of the canary, then the squirrel does not owe money to the lobster\nRule6: If the buffalo has more than sixteen friends, then it steals five points from the lobster.\n\nRule1 is preferred over Rule4\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe buffalo has 1 easy-going friend and 8 non-easy-going friends\nThe buffalo struggles to find food\nThe name of the canary is Peddi\nThe squirrel has an orange card\nThe squirrel is named Charlie and reduced her work hours recently.\n\nBased on the game state and the rules and preferences, does the lobster learn the basics of resource management from the doctorfish?\nQuestion: Does the lobster learn the basics of resource management from the doctorfish?",
        "idx": 254,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the squirrel, if it works fewer hours than before, then we can conclude that it does not owe $$$ to the lobster\nrule1() = work_hours(squirrel) < previous_work_hours(squirrel) => not owe(squirrel, money, lobster)\n# Rule2: If the squirrel does not owe money to the lobster but the buffalo steals five of the points of the lobster, then the lobster learns elementary resource management from the doctorfish unavoidably\nrule2() = not owe(squirrel, money, lobster) & steal_points(buffalo, 5, lobster) => learn(lobster, elementary_resource_management_from(doctorfish))\n# Rule3: If the buffalo killed the mayor, then the buffalo steals five points from the lobster\nrule3() = kill(buffalo, mayor) => steal_points(buffalo, 5, lobster)\n# Rule4: Regarding the squirrel, if it has a card whose color is one of the rainbow colors, then we can conclude that it owes money to the lobster\nrule4() = has(squirrel, card) and color(card) in rainbow_colors => owe(squirrel, money, lobster)\n# Rule5: Regarding the squirrel, if it has a name whose first letter is the same as the first letter of the canary's name, then we can conclude that it does not owe money to the lobster\nrule5() = first_letter_of(name(squirrel)) == first_letter_of(name(canary)) => not owe(squirrel, money, lobster)\n# Rule6: If the buffalo has more than sixteen friends, then the buffalo steals five of the points of the lobster.\nrule6() = friends(buffalo) > 16 => steal_points(buffalo, 5, lobster)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The buffalo has 1 friend that is easy going and eight friends that are not\neasy_going_friends(buffalo) = 1\nnon_easy_going_friends(buffalo) = 8\n# The buffalo struggles to find food\nstruggles_to_find_food(buffalo) = True\n# The canary is named Peddi\nname(canary, Peddi) = True\n# The squirrel has a card that is orange in color\nhas(squirrel, card) = True\ncolor(card, orange) = True\n# The squirrel is named Charlie, and reduced her work hours recently.\nname(squirrel, Charlie) = True\nwork_hours(squirrel) < previous_work_hours(squirrel) = True\n\n# Based on the game state and the rules and preferences, does the lobster learn the basics of resource management from the doctorfish?\nquestion = learn(lobster, elementary_resource_management_from(doctorfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the eel is the same as the first letter of the name of the bat, then the eel respects the spider\nRule2: If the raven does not eat the food of the spider but the eel respects the spider, then the spider shows her cards (all of them) to the buffalo\nRule3: If at least one animal holds an equal number of points as the squirrel, then the raven does not eat the food of the spider.\n\nThe current state of the game is as follows\nThe name of the bat is Meadow\nThe name of the eel is Milo\nThe raven has 1 wise friend and 3 non-wise friends\nThe salmon holds the same number of points as the squirrel.\n\nBased on the game state and the rules and preferences, does the spider show all her cards to the buffalo?\nQuestion: Does the spider show all her cards to the buffalo?",
        "idx": 255,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eel has a name whose first letter is the same as the first letter of the bat's name, then the eel respects the spider\nrule1() = first_letter_of(name(eel)) == first_letter_of(name(bat)) => respect(eel, spider)\n# Rule2: For the spider, if the belief is that the raven does not eat the food that belongs to the spider but the eel respects the spider, then you can add \"the spider shows her cards (all of them) to the buffalo\" to your conclusions\nrule2() = not eat_food(raven, food_of(spider)) & respect(eel, spider) => add_conclusion(spider, show_cards(all), buffalo)\n# Rule3: If at least one animal holds an equal number of points as the squirrel, then the raven does not eat the food of the spider.\nrule3() = holds_equal_points(something, squirrel) => not eat_food(raven, food_of(spider))\n\n# The current state of the game is as follows\n# The bat is named Meadow\nname(bat, Meadow) = True\n# The eel is named Milo\nname(eel, Milo) = True\n# The raven has 1 friend that is wise and three friends that are not\nwise_friends(raven) = 1\nnon_wise_friends(raven) = 3\n# The salmon holds the same number of points as the squirrel.\nholds_equal_points(salmon, squirrel) = True\n\n# Based on the game state and the rules and preferences, does the spider show all her cards to the buffalo?\nquestion = show_cards(spider, all, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the caterpillar has fewer than 4 friends, then it removes from the board one of the pieces of the squid\nRule2: If the caterpillar has a card whose color starts with the letter \"y\", then it removes one of the pieces of the squid\nRule3: The caterpillar does not remove one of the pieces of the squid if the black bear burns the warehouse that is in possession of the caterpillar\nRule4: If something removes one of the pieces of the squid, then it does not roll the dice for the hare.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe caterpillar has a yellow card\nThe caterpillar has 5 friends.\n\nBased on the game state and the rules and preferences, does the caterpillar roll the dice for the hare?\nQuestion: Does the caterpillar roll the dice for the hare?",
        "idx": 256,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the caterpillar, if it has fewer than 4 friends, then we can conclude that it removes from the board one of the pieces of the squid\nrule1() = friends(caterpillar) < 4 => remove_piece(caterpillar, squid)\n# Rule2: If the caterpillar has a card whose color starts with the letter \"y\", then the caterpillar removes one of the pieces of the squid\nrule2() = starts_with(color(card(caterpillar)), \"y\") => remove_piece(caterpillar, squid)\n# Rule3: The caterpillar does not remove one of the pieces of the squid, in the case where the black bear burns the warehouse that is in possession of the caterpillar\nrule3() = burn_warehouse(black_bear, warehouse(caterpillar)) => not remove_piece(caterpillar, squid)\n# Rule4: If you are positive that you saw one of the animals removes from the board one of the pieces of the squid, you can be certain that it will not roll the dice for the hare.\nrule4(something) = remove_piece(something, squid) => not roll_dice(something, hare)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The caterpillar has a card that is yellow in color\ncolor(card(caterpillar), yellow) = True\n# The caterpillar has five friends.\nfriends(caterpillar) = 5\n\n# Based on the game state and the rules and preferences, does the caterpillar roll the dice for the hare?\nquestion = roll_dice(caterpillar, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squirrel has a musical instrument, then it does not attack the green fields whose owner is the whale\nRule2: If the caterpillar sings a victory song for the squirrel and the puffin needs the support of the squirrel, then the squirrel prepares armor for the sun bear\nRule3: If the first letter of the name of the squirrel is the same as the first letter of the name of the octopus, then the squirrel does not attack the green fields whose owner is the whale\nRule4: If the first letter of the name of the moose is the same as the first letter of the name of the polar bear, then the moose does not burn the warehouse that is in possession of the squirrel\nRule5: If something winks at the sheep, then it will not prepare armor for the sun bear\nRule6: If the squirrel has a device to connect to the internet, then it attacks the green fields of the whale\nRule7: If the moose does not burn the warehouse of the squirrel, then the squirrel shows all her cards to the doctorfish\nRule8: If the squirrel has a high salary, then it attacks the green fields of the whale.\n\nRule5 is preferred over Rule2\nRule6 is preferred over Rule1\nRule6 is preferred over Rule3\nRule8 is preferred over Rule1\nRule8 is preferred over Rule3\n\nThe current state of the game is as follows\nThe caterpillar sings a victory song for the squirrel\nThe name of the moose is Lola\nThe name of the octopus is Tango\nThe name of the polar bear is Pablo\nThe puffin needs support from the squirrel\nThe squirrel has a cappuccino\nThe squirrel has a low-income job\nThe squirrel has a tablet\n\nBased on the game state and the rules and preferences, does the squirrel show all her cards to the doctorfish?\nQuestion: Does the squirrel show all her cards to the doctorfish?",
        "idx": 257,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the squirrel has a musical instrument, then the squirrel does not attack the green fields whose owner is the whale\nrule1() = has(squirrel, musical_instrument) => not attack(squirrel, green_fields, owner(whale))\n# Rule2: If the caterpillar sings a victory song for the squirrel and the puffin needs the support of the squirrel, then the squirrel prepares armor for the sun bear\nrule2() = sings(caterpillar, victory_song, squirrel) & needs_support(puffin, squirrel) => prepare_armor(squirrel, sun_bear)\n# Rule3: Regarding the squirrel, if it has a name whose first letter is the same as the first letter of the octopus's name, then we can conclude that it does not attack the green fields whose owner is the whale\nrule3() = first_letter_of(name(squirrel)) == first_letter_of(name(octopus)) => not attack(squirrel, green_fields, owner(whale))\n# Rule4: Regarding the moose, if it has a name whose first letter is the same as the first letter of the polar bear's name, then we can conclude that it does not burn the warehouse that is in possession of the squirrel\nrule4() = first_letter_of(name(moose)) == first_letter_of(name(polar_bear)) => not burn(warehouse, possession(squirrel))\n# Rule5: If you are positive that you saw one of the animals winks at the sheep, you can be certain that it will not prepare armor for the sun bear\nrule5(something) = saw_wink(something, sheep) => not prepare_armor(something, sun_bear)\n# Rule6: If the squirrel has a device to connect to the internet, then the squirrel attacks the green fields of the whale\nrule6() = has(squirrel, internet_device) => attack(squirrel, green_fields, owner(whale))\n# Rule7: If the moose does not burn the warehouse of the squirrel, then the squirrel shows all her cards to the doctorfish\nrule7() = not burn(warehouse, possession(squirrel)) => show_all_cards(squirrel, doctorfish)\n# Rule8: Regarding the squirrel, if it has a high salary, then we can conclude that it attacks the green fields of the whale.\nrule8() = salary(squirrel) == high => attack(squirrel, green_fields, owner(whale))\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n# Rule8 is preferred over Rule1\norder(rule8) > order(rule1) = True\n# Rule8 is preferred over Rule3\norder(rule8) > order(rule3) = True\n\n# The current state of the game is as follows\n# The caterpillar sings a victory song for the squirrel\nsings(caterpillar, victory_song, squirrel) = True\n# The moose is named Lola\nname(moose, Lola) = True\n# The octopus is named Tango\nname(octopus, Tango) = True\n# The polar bear is named Pablo\nname(polar_bear, Pablo) = True\n# The puffin needs support from the squirrel\nneeds_support(puffin, squirrel) = True\n# The squirrel has a cappuccino\nhas(squirrel, cappuccino) = True\n# The squirrel has a low-income job\nsalary(squirrel) == low_income = True\n# The squirrel has a tablet\nhas(squirrel, tablet) = True\n\n# Based on the game state and the rules and preferences, does the squirrel show all her cards to the doctorfish?\nquestion = show_all_cards(squirrel, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the turtle has more than six friends, then it knocks down the fortress of the panther\nRule2: If the turtle has a card with a primary color, then it knocks down the fortress that belongs to the panther\nRule3: If something winks at the canary and also knocks down the fortress that belongs to the rabbit, then it will surely not knock down the fortress that belongs to the panther\nRule4: The snail burns the warehouse of the panther whenever something eats the food that belongs to the puffin\nRule5: If something winks at the starfish, then the carp respects the blobfish\nRule6: If the turtle knocks down the fortress of the panther and the snail burns the warehouse that is in possession of the panther, then the panther proceeds to the spot right after the donkey.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe kiwi winks at the starfish\nThe turtle has 1 friend\nThe turtle has a card that is red in color\nThe turtle knocks down the fortress of the rabbit\nThe viperfish eats the food of the puffin.\n\nBased on the game state and the rules and preferences, does the panther proceed to the spot right after the donkey?\nQuestion: Does the panther proceed to the spot right after the donkey?",
        "idx": 258,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the turtle has more than six friends, then the turtle knocks down the fortress of the panther\nrule1() = friends(turtle) > 6 => knock_down(turtle, fortress, panther)\n# Rule2: If the turtle has a card with a primary color, then the turtle knocks down the fortress that belongs to the panther\nrule2() = has(turtle, card) and color(card) in primary_colors => knock_down(turtle, fortress, panther)\n# Rule3: Be careful when something winks at the canary and also knocks down the fortress that belongs to the rabbit because in this case it will surely not knock down the fortress that belongs to the panther (this may or may not be problematic)\nrule3(something) = winks(something, canary) and knock_down(something, fortress, rabbit) => not knock_down(something, fortress, panther)\n# Rule4: The snail burns the warehouse of the panther whenever at least one animal eats the food that belongs to the puffin\nrule4() = eat_food(something, food_of(puffin)) => burn(snail, warehouse, panther)\n# Rule5: If at least one animal winks at the starfish, then the carp respects the blobfish\nrule5() = winks(something, starfish) => respect(carp, blobfish)\n# Rule6: If the turtle knocks down the fortress of the panther and the snail burns the warehouse that is in possession of the panther, then the panther proceeds to the spot right after the donkey.\nrule6() = knock_down(turtle, fortress, panther) and burn(snail, warehouse, panther) => proceed(panther, spot_right_after(donkey))\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The kiwi winks at the starfish\nwinks(kiwi, starfish) = True\n# The turtle has 1 friend\nfriends(turtle) = 1\n# The turtle has a card that is red in color\nhas(turtle, card) = True\ncolor(card, red) = True\n# The turtle knocks down the fortress of the rabbit\nknock_down(turtle, fortress, rabbit) = True\n# The viperfish eats the food of the puffin.\neat_food(viperfish, food_of(puffin)) = True\n\n# Based on the game state and the rules and preferences, does the panther proceed to the spot right after the donkey?\nquestion = proceed(panther, spot_right_after(donkey))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The donkey offers a job to the squid, in the case where the phoenix does not hold an equal number of points as the donkey\nRule2: If the starfish has more than six loyal friends, then it steals five points from the donkey\nRule3: If the starfish steals five of the points of the donkey, then the donkey does not offer a job to the squid.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe phoenix rolls the dice for the starfish\nThe starfish has 8 loyal friends and 2 disloyal friends.\n\nBased on the game state and the rules and preferences, does the donkey offer a job to the squid?\nQuestion: Does the donkey offer a job to the squid?",
        "idx": 259,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The donkey unquestionably offers a job to the squid, in the case where the phoenix does not hold an equal number of points as the donkey\nrule1() = points(phoenix) != points(donkey) => offer_job_position(donkey, squid)\n# Rule2: Regarding the starfish, if it has more than six friends, then we can conclude that it steals five points from the donkey\nrule2() = friends(starfish) > 6 => steal_points(starfish, 5, donkey)\n# Rule3: If the starfish steals five of the points of the donkey, then the donkey is not going to offer a job to the squid.\nrule3() = steal_points(starfish, 5, donkey) => not offer_job_position(donkey, squid)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The phoenix rolls the dice for the starfish\nroll_dice(phoenix, starfish) = True\n# The starfish has eight friends that are loyal and two friends that are not.\nloyal_friends(starfish) = 8\ndisloyal_friends(starfish) = 2\n\n# Based on the game state and the rules and preferences, does the donkey offer a job to the squid?\nquestion = offer_job_position(donkey, squid)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the amberjack gives a magnifier to the cat, then the cat attacks the green fields of the cricket\nRule2: If something attacks the green fields of the cricket and shows all her cards to the snail, then it holds an equal number of points as the lion\nRule3: If the cat works more hours than before, then it does not attack the green fields whose owner is the cricket\nRule4: If something gives a magnifying glass to the ferret, then it shows all her cards to the snail.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe amberjack gives a magnifier to the cat\nThe cat has 12 friends and reduced her work hours recently\nThe cat does not give a magnifier to the ferret.\n\nBased on the game state and the rules and preferences, does the cat hold the same number of points as the lion?\nQuestion: Does the cat hold the same number of points as the lion?",
        "idx": 260,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cat unquestionably attacks the green fields of the cricket, in the case where the amberjack gives a magnifier to the cat\nrule1() = give(amberjack, magnifier, cat) => attack(cat, green_fields, cricket)\n# Rule2: Be careful when something attacks the green fields of the cricket and also shows her cards (all of them) to the snail because in this case it will surely hold an equal number of points as the lion (this may or may not be problematic)\nrule2(something) = attack(something, green_fields, cricket) & show_cards(something, all_cards, snail) => points(something) == points(lion)\n# Rule3: Regarding the cat, if it works more hours than before, then we can conclude that it does not attack the green fields whose owner is the cricket\nrule3() = work_hours(cat) > previous_work_hours(cat) => not attack(cat, green_fields, cricket)\n# Rule4: If something gives a magnifying glass to the ferret, then it shows all her cards to the snail, too.\nrule4(something) = give(something, magnifying_glass, ferret) => show_cards(something, all_cards, snail)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The amberjack gives a magnifier to the cat\ngive(amberjack, magnifier, cat) = True\n# The cat has 12 friends, and reduced her work hours recently\nfriends(cat) = 12\nwork_hours(cat) < previous_work_hours(cat) = True\n# The cat does not give a magnifier to the ferret.\ngive(cat, magnifying_glass, ferret) = False\n\n# Based on the game state and the rules and preferences, does the cat hold the same number of points as the lion?\nquestion = points(cat) == points(lion)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo gives a magnifier to the snail, then the snail knows the defensive plans of the turtle\nRule2: The snail does not know the defense plan of the turtle whenever at least one animal needs the support of the carp\nRule3: If the first letter of the name of the buffalo is the same as the first letter of the name of the leopard, then the buffalo gives a magnifying glass to the snail.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the buffalo is Tango\nThe name of the leopard is Teddy.\n\nBased on the game state and the rules and preferences, does the snail know the defensive plans of the turtle?\nQuestion: Does the snail know the defensive plans of the turtle?",
        "idx": 261,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the buffalo gives a magnifier to the snail, then the snail knows the defensive plans of the turtle\nrule1() = give(buffalo, magnifier, snail) => knows(snail, defensive_plans, turtle)\n# Rule2: The snail does not know the defense plan of the turtle whenever at least one animal needs the support of the carp\nrule2() = needs_support(something, carp) => not knows(snail, defensive_plans, turtle)\n# Rule3: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the leopard's name, then we can conclude that it gives a magnifying glass to the snail.\nrule3() = first_letter_of(name(buffalo)) == first_letter_of(name(leopard)) => give(buffalo, magnifying_glass, snail)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The buffalo is named Tango\nname(buffalo, Tango) = True\n# The leopard is named Teddy.\nname(leopard, Teddy) = True\n\n# Based on the game state and the rules and preferences, does the snail know the defensive plans of the turtle?\nquestion = knows(snail, defensive_plans, turtle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not burn the warehouse that is in possession of the ferret, then it does not sing a victory song for the zander\nRule2: If the whale does not sing a victory song for the zander and the oscar does not attack the green fields of the zander, then the zander does not know the defense plan of the lion\nRule3: If something owes money to the aardvark and sings a victory song for the octopus, then it does not attack the green fields of the zander.\n\nThe current state of the game is as follows\nThe oscar owes money to the aardvark and sings a victory song for the octopus\nThe whale does not burn the warehouse of the ferret.\n\nBased on the game state and the rules and preferences, does the zander know the defensive plans of the lion?\nQuestion: Does the zander know the defensive plans of the lion?",
        "idx": 262,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not burn the warehouse that is in possession of the ferret, then it does not sing a victory song for the zander\nrule1(something) = not burn(something, warehouse(ferret)) => not sing(victory_song, something, zander)\n# Rule2: For the zander, if the belief is that the whale does not sing a victory song for the zander and the oscar does not attack the green fields of the zander, then you can add \"the zander does not know the defense plan of the lion\" to your conclusions\nrule2() = not sing(victory_song, whale, zander) & not attack(oscar, green_fields(zander)) => not know(zander, defense_plan, lion)\n# Rule3: If you see that something owes money to the aardvark and sings a victory song for the octopus, what can you certainly conclude? You can conclude that it does not attack the green fields of the zander.\nrule3(something) = owe(something, money, aardvark) & sing(victory_song, something, octopus) => not attack(something, green_fields(zander))\n\n# The current state of the game is as follows\n# The oscar owes money to the aardvark, and sings a victory song for the octopus\nowe(oscar, money, aardvark) = True\nsing(victory_song, oscar, octopus) = True\n# The whale does not burn the warehouse of the ferret.\nburn(whale, warehouse(ferret)) = False\n\n# Based on the game state and the rules and preferences, does the zander know the defensive plans of the lion?\nquestion = know(zander, defense_plan, lion)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the eel is the same as the first letter of the name of the sheep, then the eel rolls the dice for the koala\nRule2: If the eel eats the food of the koala, then the koala raises a flag of peace for the eagle.\n\nThe current state of the game is as follows\nThe name of the eel is Lola\nThe name of the sheep is Lucy.\n\nBased on the game state and the rules and preferences, does the koala raise a peace flag for the eagle?\nQuestion: Does the koala raise a peace flag for the eagle?",
        "idx": 263,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eel has a name whose first letter is the same as the first letter of the sheep's name, then the eel rolls the dice for the koala\nrule1() = first_letter_of(name(eel)) == first_letter_of(name(sheep)) => roll_dice(eel, koala)\n# Rule2: The koala unquestionably raises a flag of peace for the eagle, in the case where the eel eats the food of the koala.\nrule2() = eat_food(eel, food_of(koala)) => raise_flag_of_peace(koala, eagle)\n\n# The current state of the game is as follows\n# The eel is named Lola\nname(eel, Lola) = True\n# The sheep is named Lucy.\nname(sheep, Lucy) = True\n\n# Based on the game state and the rules and preferences, does the koala raise a peace flag for the eagle?\nquestion = raise_flag_of_peace(koala, eagle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something learns the basics of resource management from the viperfish, then the buffalo does not raise a flag of peace for the octopus\nRule2: The kangaroo learns elementary resource management from the buffalo, in the case where the moose winks at the kangaroo\nRule3: If the kangaroo learns the basics of resource management from the buffalo and the squirrel does not hold the same number of points as the buffalo, then the buffalo raises a peace flag for the octopus\nRule4: If something does not proceed to the spot that is right after the spot of the amberjack, then it will not hold an equal number of points as the buffalo\nRule5: If the halibut has a name whose first letter is the same as the first letter of the grizzly bear's name, then the halibut learns the basics of resource management from the viperfish\nRule6: If the halibut has a card and the color of the card is one of the rainbow colors, then the halibut learns elementary resource management from the viperfish.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the grizzly bear is Tarzan\nThe halibut has a blue card\nThe name of the halibut is Chickpea\nThe halibut does not become an enemy of the cat\nThe moose winks at the kangaroo\nThe parrot winks at the kangaroo\nThe squirrel learns the basics of resource management from the amberjack but does not proceed to the spot right after the amberjack.\n\nBased on the game state and the rules and preferences, does the buffalo raise a peace flag for the octopus?\nQuestion: Does the buffalo raise a peace flag for the octopus?",
        "idx": 264,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal learns the basics of resource management from the viperfish, then the buffalo does not raise a flag of peace for the octopus\nrule1(something) = learns(something, basics_of_resource_management, viperfish) => not raise_flag_of_peace(buffalo, octopus)\n# Rule2: The kangaroo unquestionably learns elementary resource management from the buffalo, in the case where the moose winks at the kangaroo\nrule2() = winks(moose, kangaroo) => learns(kangaroo, elementary_resource_management, buffalo)\n# Rule3: If the kangaroo learns the basics of resource management from the buffalo and the squirrel does not hold the same number of points as the buffalo, then, inevitably, the buffalo raises a peace flag for the octopus\nrule3() = learns(kangaroo, basics_of_resource_management, buffalo) & points(squirrel) != points(buffalo) => raise_flag_of_peace(buffalo, octopus)\n# Rule4: If you are positive that one of the animals does not proceed to the spot that is right after the spot of the amberjack, you can be certain that it will not hold an equal number of points as the buffalo\nrule4(something) = not proceed_to(something, spot_right_after(amberjack)) => points(something) != points(buffalo)\n# Rule5: If the halibut has a name whose first letter is the same as the first letter of the grizzly bear's name, then the halibut learns the basics of resource management from the viperfish\nrule5() = first_letter_of(name(halibut)) == first_letter_of(name(grizzly_bear)) => learns(halibut, basics_of_resource_management, viperfish)\n# Rule6: Regarding the halibut, if it has a card whose color is one of the rainbow colors, then we can conclude that it learns elementary resource management from the viperfish.\nrule6() = has(halibut, card) and color(card) in rainbow_colors => learns(halibut, elementary_resource_management, viperfish)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The grizzly bear is named Tarzan\nname(grizzly_bear, Tarzan) = True\n# The halibut has a card that is blue in color\nhas(halibut, card) = True\ncolor(card, blue) = True\n# The halibut is named Chickpea, and does not become an enemy of the cat\nname(halibut, Chickpea) = True\nbecome_enemy(halibut, cat) = False\n# The moose winks at the kangaroo\nwinks(moose, kangaroo) = True\n# The parrot winks at the kangaroo\nwinks(parrot, kangaroo) = True\n# The squirrel learns the basics of resource management from the amberjack but does not proceed to the spot right after the amberjack.\nlearns(squirrel, basics_of_resource_management, amberjack) = True\nproceed_to(squirrel, spot_right_after(amberjack)) = False\n\n# Based on the game state and the rules and preferences, does the buffalo raise a peace flag for the octopus?\nquestion = raise_flag_of_peace(buffalo, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo has a high salary, then it does not learn elementary resource management from the hummingbird\nRule2: If something holds the same number of points as the grasshopper but does not offer a job to the viperfish, then it will not give a magnifying glass to the kudu\nRule3: If at least one animal gives a magnifier to the baboon, then the kangaroo holds an equal number of points as the grasshopper\nRule4: If the kangaroo has a card whose color appears in the flag of France, then it does not offer a job to the viperfish\nRule5: If the sheep does not burn the warehouse of the kangaroo and the whale does not steal five points from the kangaroo, then the kangaroo learns the basics of resource management from the hummingbird\nRule6: If the kangaroo has a device to connect to the internet, then it does not offer a job to the viperfish.\n\nRule1 is preferred over Rule5\n\nThe current state of the game is as follows\nThe name of the cow is Casper\nThe hummingbird gives a magnifier to the baboon\nThe kangaroo has a card that is indigo in color\nThe kangaroo has 14 friends\nThe kangaroo knocks down the fortress of the catfish\nThe kangaroo has a cell phone\nThe name of the kangaroo is Bella\nThe sheep does not burn the warehouse of the kangaroo\nThe whale does not steal five points from the kangaroo\n\nBased on the game state and the rules and preferences, does the kangaroo give a magnifier to the kudu?\nQuestion: Does the kangaroo give a magnifier to the kudu?",
        "idx": 265,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kangaroo has a high salary, then the kangaroo does not learn elementary resource management from the hummingbird\nrule1() = has(kangaroo, high_salary) => not learn(kangaroo, elementary_resource_management, hummingbird)\n# Rule2: Be careful when something holds the same number of points as the grasshopper but does not offer a job to the viperfish because in this case it will, surely, not give a magnifying glass to the kudu (this may or may not be problematic)\nrule2(something) = points(something) == points(grasshopper) & not offer_job_position(something, viperfish) => not give(something, magnifying_glass, kudu)\n# Rule3: If at least one animal gives a magnifier to the baboon, then the kangaroo holds an equal number of points as the grasshopper\nrule3() = give(something, magnifying_glass, baboon) => points(kangaroo) == points(grasshopper)\n# Rule4: Regarding the kangaroo, if it has a card whose color appears in the flag of France, then we can conclude that it does not offer a job to the viperfish\nrule4() = has(kangaroo, card) and color(card) in flag_of_france_colors => not offer_job_position(kangaroo, viperfish)\n# Rule5: For the kangaroo, if the belief is that the sheep does not burn the warehouse that is in possession of the kangaroo and the whale does not steal five of the points of the kangaroo, then you can add \"the kangaroo learns the basics of resource management from the hummingbird\" to your conclusions\nrule5() = not burn(warehouse, sheep, kangaroo) & not steal(points, whale, 5, kangaroo) => learn(kangaroo, basics_of_resource_management, hummingbird)\n# Rule6: If the kangaroo has a device to connect to the internet, then the kangaroo does not offer a job to the viperfish.\nrule6() = has(kangaroo, device_to_connect_to_internet) => not offer_job_position(kangaroo, viperfish)\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cow is named Casper\nname(cow, Casper) = True\n# The hummingbird gives a magnifier to the baboon\ngive(hummingbird, magnifying_glass, baboon) = True\n# The kangaroo has a card that is indigo in color, has fourteen friends, and knocks down the fortress of the catfish\nhas(kangaroo, card) = True\ncolor(card, indigo) = True\nfriends(kangaroo) = 14\nknocks_down(kangaroo, fortress, catfish) = True\n# The kangaroo has a cell phone, and is named Bella\nhas(kangaroo, cell_phone) = True\nname(kangaroo, Bella) = True\n# The sheep does not burn the warehouse of the kangaroo\nburn(warehouse, sheep, kangaroo) = False\n# The whale does not steal five points from the kangaroo\nsteal(points, whale, 5, kangaroo) = False\n\n# Based on the game state and the rules and preferences, does the kangaroo give a magnifier to the kudu?\nquestion = give(kangaroo, magnifying_glass, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the bat has fewer than 16 friends, then it does not knock down the fortress of the swordfish\nRule2: If the ferret knows the defensive plans of the swordfish and the bat does not knock down the fortress of the swordfish, then the swordfish owes money to the aardvark\nRule3: If the panther respects the swordfish, then the swordfish does not owe money to the aardvark\nRule4: If the bat has something to drink, then it knocks down the fortress that belongs to the swordfish\nRule5: If the first letter of the name of the bat is the same as the first letter of the name of the wolverine, then the bat knocks down the fortress of the swordfish\nRule6: If the ferret has a device to connect to the internet, then it knows the defensive plans of the swordfish.\n\nRule2 is preferred over Rule3\nRule4 is preferred over Rule1\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe bat has 1 easy-going friend and 3 non-easy-going friends\nThe bat has a beer\nThe ferret has a computer\nThe wolverine is named Lucy.\n\nBased on the game state and the rules and preferences, does the swordfish owe money to the aardvark?\nQuestion: Does the swordfish owe money to the aardvark?",
        "idx": 266,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the bat has fewer than 16 friends, then the bat does not knock down the fortress of the swordfish\nrule1() = friends(bat) < 16 => not knock_down_fortress(bat, swordfish)\n# Rule2: For the swordfish, if the belief is that the ferret knows the defensive plans of the swordfish and the bat does not knock down the fortress of the swordfish, then you can add \"the swordfish owes $$$ to the aardvark\" to your conclusions\nrule2() = knows(ferret, defensive_plans, swordfish) & not knock_down_fortress(bat, swordfish) => add_conclusion(\"the swordfish owes $$$ to the aardvark\")\n# Rule3: If the panther respects the swordfish, then the swordfish is not going to owe money to the aardvark\nrule3() = respects(panther, swordfish) => not owe(swordfish, money, aardvark)\n# Rule4: If the bat has something to drink, then the bat knocks down the fortress that belongs to the swordfish\nrule4() = has(bat, drink) => knock_down_fortress(bat, swordfish)\n# Rule5: Regarding the bat, if it has a name whose first letter is the same as the first letter of the wolverine's name, then we can conclude that it knocks down the fortress of the swordfish\nrule5() = first_letter_of(name(bat)) == first_letter_of(name(wolverine)) => knock_down_fortress(bat, swordfish)\n# Rule6: If the ferret has a device to connect to the internet, then the ferret knows the defensive plans of the swordfish.\nrule6() = has(ferret, device_to_connect_to_internet) => knows(ferret, defensive_plans, swordfish)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The bat has 1 friend that is easy going and three friends that are not\neasy_going_friends(bat) = 1\nnon_easy_going_friends(bat) = 3\n# The bat has a beer\nhas(bat, beer) = True\n# The ferret has a computer\nhas(ferret, computer) = True\n# The wolverine is named Lucy.\nname(wolverine, Lucy) = True\n\n# Based on the game state and the rules and preferences, does the swordfish owe money to the aardvark?\nquestion = owe(swordfish, money, aardvark)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something prepares armor for the cat but does not know the defense plan of the elephant, then it becomes an enemy of the spider\nRule2: If something attacks the green fields whose owner is the donkey, then the lion does not know the defense plan of the elephant\nRule3: If the cricket steals five points from the lion, then the lion is not going to become an enemy of the spider\nRule4: The lion prepares armor for the cat whenever something gives a magnifying glass to the caterpillar.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe crocodile gives a magnifier to the caterpillar\nThe oscar attacks the green fields whose owner is the donkey.\n\nBased on the game state and the rules and preferences, does the lion become an enemy of the spider?\nQuestion: Does the lion become an enemy of the spider?",
        "idx": 267,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something prepares armor for the cat but does not know the defense plan of the elephant, what can you certainly conclude? You can conclude that it becomes an enemy of the spider\nrule1(something) = prepare_armor(something, cat) & not know(something, defense_plan, elephant) => become_enemy(something, spider)\n# Rule2: If at least one animal attacks the green fields whose owner is the donkey, then the lion does not know the defense plan of the elephant\nrule2() = attack(something, green_fields, owner(donkey)) => not know(lion, defense_plan, elephant)\n# Rule3: If the cricket steals five of the points of the lion, then the lion is not going to become an enemy of the spider\nrule3() = steal(cricket, 5, points(lion)) => not become_enemy(lion, spider)\n# Rule4: The lion prepares armor for the cat whenever at least one animal gives a magnifying glass to the caterpillar.\nrule4() = give(something, magnifying_glass, caterpillar) => prepare_armor(lion, cat)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The crocodile gives a magnifier to the caterpillar\ngive(crocodile, magnifying_glass, caterpillar) = True\n# The oscar attacks the green fields whose owner is the donkey.\nattack(oscar, green_fields, owner(donkey)) = True\n\n# Based on the game state and the rules and preferences, does the lion become an enemy of the spider?\nquestion = become_enemy(lion, spider)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the meerkat has a card with a primary color, then it does not roll the dice for the halibut\nRule2: If the first letter of the name of the meerkat is the same as the first letter of the name of the leopard, then the meerkat does not roll the dice for the halibut\nRule3: If something does not roll the dice for the halibut, then it will not hold the same number of points as the hippopotamus.\n\nThe current state of the game is as follows\nThe name of the leopard is Lily\nThe meerkat has a red card\nThe name of the meerkat is Peddi\n\nBased on the game state and the rules and preferences, does the meerkat hold the same number of points as the hippopotamus?\nQuestion: Does the meerkat hold the same number of points as the hippopotamus?",
        "idx": 268,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the meerkat has a card with a primary color, then the meerkat does not roll the dice for the halibut\nrule1() = has(meerkat, card) and color(card) in primary_colors => not roll_dice(meerkat, halibut)\n# Rule2: Regarding the meerkat, if it has a name whose first letter is the same as the first letter of the leopard's name, then we can conclude that it does not roll the dice for the halibut\nrule2() = first_letter_of(name(meerkat)) == first_letter_of(name(leopard)) => not roll_dice(meerkat, halibut)\n# Rule3: If you are positive that one of the animals does not roll the dice for the halibut, you can be certain that it will not hold the same number of points as the hippopotamus.\nrule3(something) = not roll_dice(something, halibut) => not hold_same_number_of_points(something, hippopotamus)\n\n# The current state of the game is as follows\n# The leopard is named Lily\nname(leopard, Lily) = True\n# The meerkat has a card that is red in color\nhas(meerkat, card) = True\ncolor(card, red) = True\n# The meerkat is named Peddi\nname(meerkat, Peddi) = True\n\n# Based on the game state and the rules and preferences, does the meerkat hold the same number of points as the hippopotamus?\nquestion = hold_same_number_of_points(meerkat, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not steal five points from the tilapia but rolls the dice for the panda bear, then it certainly does not attack the green fields whose owner is the sea bass.\nRule2: If the ferret has fewer than five friends, then it rolls the dice for the panda bear\nRule3: If the pig knocks down the fortress of the ferret, then the ferret owes money to the gecko\nRule4: If something owes money to the gecko, then it attacks the green fields whose owner is the sea bass, too\nRule5: If the ferret took a bike from the store, then it rolls the dice for the panda bear.\n\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe ferret has 6 lazy friends and 2 non-lazy friends\nThe ferret stole a bike from the store\nThe pig did not knock down the fortress of the ferret.\n\nBased on the game state and the rules and preferences, does the ferret attack the green fields whose owner is the sea bass?\nQuestion: Does the ferret attack the green fields whose owner is the sea bass?",
        "idx": 269,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not steal five points from the tilapia but rolls the dice for the panda bear because in this case it certainly does not attack the green fields whose owner is the sea bass (this may or may not be problematic)\nrule1() = not steal(something, 5_points, tilapia) & roll_dice(something, panda_bear) => not attack(something, green_fields, owner(sea_bass))\n# Rule2: If the ferret has fewer than five friends, then the ferret rolls the dice for the panda bear\nrule2() = friends(ferret) < 5 => roll_dice(ferret, panda_bear)\n# Rule3: If the pig knocks down the fortress of the ferret, then the ferret owes $$$ to the gecko\nrule3() = knock_down(pig, fortress, ferret) => owe(ferret, $$$, gecko)\n# Rule4: If something owes money to the gecko, then it attacks the green fields whose owner is the sea bass, too\nrule4() = owe(something, $$$, gecko) => attack(something, green_fields, owner(sea_bass))\n# Rule5: Regarding the ferret, if it took a bike from the store, then we can conclude that it rolls the dice for the panda bear.\nrule5() = took(ferret, bike, store) => roll_dice(ferret, panda_bear)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The ferret has 6 friends that are lazy and 2 friends that are not\nlazy_friends(ferret) = 6\nnon_lazy_friends(ferret) = 2\n# The ferret stole a bike from the store\ntook(ferret, bike, store) = True\n# The pig does not knock down the fortress of the ferret.\nknock_down(pig, fortress, ferret) = False\n\n# Based on the game state and the rules and preferences, does the ferret attack the green fields whose owner is the sea bass?\nquestion = attack(ferret, green_fields, owner(sea_bass))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the mosquito burns the warehouse of the hummingbird, then the hummingbird proceeds to the spot right after the halibut.\nRule2: If something attacks the green fields of the squirrel and does not hold an equal number of points as the kiwi, then it proceeds to the spot that is right after the spot of the viperfish.\nRule3: If something proceeds to the spot that is right after the spot of the viperfish, then it rolls the dice for the sea bass.\n\nThe current state of the game is as follows\nThe mosquito burns the warehouse of the hummingbird.\nThe swordfish attacks the green fields of the squirrel.\nThe swordfish does not hold the same number of points as the kiwi.\n\nBased on the game state and the rules and preferences, does the swordfish roll the dice for the sea bass?\nQuestion: Does the swordfish roll the dice for the sea bass?",
        "idx": 270,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The hummingbird unquestionably proceeds to the spot right after the halibut, in the case where the mosquito burns the warehouse that is in possession of the hummingbird\nrule1() = burns(mosquito, warehouse, hummingbird) => proceed(hummingbird, spot_right_after(halibut))\n# Rule2: Be careful when something does not hold an equal number of points as the kiwi but attacks the green fields whose owner is the squirrel because in this case it will, surely, proceed to the spot that is right after the spot of the viperfish (this may or may not be problematic)\nrule2(something) = not equal_points(something, kiwi) & attacks(something, green_fields, squirrel) => proceed(something, spot_right_after(viperfish))\n# Rule3: If something proceeds to the spot that is right after the spot of the viperfish, then it rolls the dice for the sea bass, too.\nrule3(something) = proceed(something, spot_right_after(viperfish)) => roll_dice(something, sea_bass)\n\n# The current state of the game is as follows\n# The mosquito burns the warehouse of the hummingbird\nburns(mosquito, warehouse, hummingbird) = True\n# The swordfish attacks the green fields whose owner is the squirrel\nattacks(swordfish, green_fields, squirrel) = True\n# The swordfish does not hold the same number of points as the kiwi.\nequal_points(swordfish, kiwi) = False\n\n# Based on the game state and the rules and preferences, does the swordfish roll the dice for the sea bass?\nquestion = roll_dice(swordfish, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something proceeds to the spot that is right after the spot of the doctorfish and raises a flag of peace for the panda bear, then it does not offer a job position to the lion\nRule2: If the tilapia does not eat the food that belongs to the sun bear, then the sun bear knocks down the fortress that belongs to the starfish\nRule3: If the first letter of the name of the raven is the same as the first letter of the name of the black bear, then the raven offers a job position to the lion\nRule4: If something offers a job position to the lion, then the starfish does not remove one of the pieces of the polar bear\nRule5: If something does not need support from the cat, then it becomes an enemy of the starfish\nRule6: If at least one animal burns the warehouse of the goldfish, then the sun bear does not knock down the fortress that belongs to the starfish\nRule7: If the raven voted for the mayor, then the raven offers a job position to the lion.\n\nRule1 is preferred over Rule3\nRule1 is preferred over Rule7\nRule2 is preferred over Rule6\n\nThe current state of the game is as follows\nThe name of the black bear is Max\nThe grizzly bear burned the warehouse of the goldfish\nThe kudu offered a job to the carp\nThe kudu does not need support from the cat\nThe name of the raven is Meadow\nThe raven assassinated the mayor\nThe raven proceeds to the spot right after the doctorfish.\n\nBased on the game state and the rules and preferences, does the starfish remove from the board one of the pieces of the polar bear?\nQuestion: Does the starfish remove from the board one of the pieces of the polar bear?",
        "idx": 271,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something proceeds to the spot that is right after the spot of the doctorfish and raises a flag of peace for the panda bear, what can you certainly conclude? You can conclude that it does not offer a job position to the lion\nrule1() = proceeds_to(something, spot_after(doctorfish)) & raise_flag_of_peace(something, panda_bear) => not offer_job_position(something, lion)\n# Rule2: If the tilapia does not eat the food that belongs to the sun bear, then the sun bear knocks down the fortress that belongs to the starfish\nrule2() = not eat_food(tilapia, food_of(sun_bear)) => knock_down_fortress(sun_bear, starfish)\n# Rule3: If the raven has a name whose first letter is the same as the first letter of the black bear's name, then the raven offers a job to the lion\nrule3() = first_letter_of(name(raven)) == first_letter_of(name(black_bear)) => offer_job_position(raven, lion)\n# Rule4: If at least one animal offers a job position to the lion, then the starfish does not remove one of the pieces of the polar bear\nrule4() = offer_job_position(something, lion) => not remove_piece(starfish, polar_bear)\n# Rule5: If you are positive that one of the animals does not need support from the cat, you can be certain that it will become an enemy of the starfish without a doubt\nrule5(something) = not need_support(something, cat) => become_enemy(something, starfish)\n# Rule6: The sun bear does not knock down the fortress that belongs to the starfish whenever at least one animal burns the warehouse of the goldfish\nrule6() = burn_warehouse(something, goldfish) => not knock_down_fortress(sun_bear, starfish)\n# Rule7: If the raven voted for the mayor, then the raven offers a job position to the lion.\nrule7() = voted_for(raven, mayor) => offer_job_position(raven, lion)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n\n# The current state of the game is as follows\n# The black bear is named Max\nname(black_bear, Max) = True\n# The grizzly bear burns the warehouse of the goldfish\nburn_warehouse(grizzly_bear, goldfish) = True\n# The kudu offers a job to the carp but does not need support from the cat\noffer_job_position(kudu, carp) = True\nnot need_support(kudu, cat) = True\n# The raven assassinated the mayor, and is named Meadow\nname(raven, Meadow) = True\nassassinate(raven, mayor) = True\n# The raven proceeds to the spot right after the doctorfish.\nproceeds_to(raven, spot_after(doctorfish)) = True\n\n# Based on the game state and the rules and preferences, does the starfish remove from the board one of the pieces of the polar bear?\nquestion = remove_piece(starfish, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the aardvark has fewer than five friends, then the aardvark does not show all her cards to the dog\nRule2: If the aardvark does not learn the basics of resource management from the dog, then the dog prepares armor for the kiwi\nRule3: If the aardvark has a card with a primary color, then the aardvark does not show her cards to the dog.\n\nThe current state of the game is as follows\nThe aardvark has a card that is white in color\nThe aardvark has one friend\nThe cat does not know the defensive plans of the aardvark\nThe leopard does not know the defensive plans of the aardvark.\n\nBased on the game state and the rules and preferences, does the dog prepare armor for the kiwi?\nQuestion: Does the dog prepare armor for the kiwi?",
        "idx": 272,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the aardvark has fewer than five friends, then the aardvark does not show all her cards to the dog\nrule1() = friends(aardvark) < 5 => not show_cards(aardvark, dog)\n# Rule2: If the aardvark does not learn the basics of resource management from the dog, then the dog prepares armor for the kiwi\nrule2() = not learn(aardvark, basics_of_resource_management, dog) => prepare_armor(dog, kiwi)\n# Rule3: If the aardvark has a card with a primary color, then the aardvark does not show her cards (all of them) to the dog.\nrule3() = has(aardvark, card) and color(card) in primary_colors => not show_cards(aardvark, dog)\n\n# The current state of the game is as follows\n# The aardvark has a card that is white in color\nhas(aardvark, card) = True\ncolor(card, white) = True\n# The aardvark has one friend\nfriends(aardvark) = 1\n# The cat does not know the defensive plans of the aardvark\nknows(cat, defensive_plans, aardvark) = False\n# The leopard does not know the defensive plans of the aardvark.\nknows(leopard, defensive_plans, aardvark) = False\n\n# Based on the game state and the rules and preferences, does the dog prepare armor for the kiwi?\nquestion = prepare_armor(dog, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The tiger proceeds to the spot right after the panda bear whenever at least one animal raises a flag of peace for the eel\nRule2: The salmon does not raise a peace flag for the eel whenever at least one animal respects the grizzly bear\nRule3: If the salmon created a time machine, then it raises a peace flag for the eel.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe leopard respects the grizzly bear\nThe salmon invented a time machine.\n\nBased on the game state and the rules and preferences, does the tiger proceed to the spot right after the panda bear?\nQuestion: Does the tiger proceed to the spot right after the panda bear?",
        "idx": 273,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The tiger proceeds to the spot right after the panda bear whenever at least one animal raises a flag of peace for the eel\nrule1() = raise_flag_of_peace(something, eel) => proceed(tiger, spot_right_after(panda_bear))\n# Rule2: The salmon does not raise a peace flag for the eel whenever at least one animal respects the grizzly bear\nrule2() = respect(something, grizzly_bear) => not raise_flag_of_peace(salmon, eel)\n# Rule3: Regarding the salmon, if it created a time machine, then we can conclude that it raises a peace flag for the eel.\nrule3() = created(salmon, time_machine) => raise_flag_of_peace(salmon, eel)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The leopard respects the grizzly bear\nrespect(leopard, grizzly_bear) = True\n# The salmon invented a time machine.\ncreated(salmon, time_machine) = True\n\n# Based on the game state and the rules and preferences, does the tiger proceed to the spot right after the panda bear?\nquestion = proceed(tiger, spot_right_after(panda_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion rolls the dice for the tilapia and the kudu does not roll the dice for the tilapia, then the tilapia will never proceed to the spot right after the sea bass\nRule2: If the kudu has a sharp object, then the kudu does not roll the dice for the tilapia\nRule3: The lion rolls the dice for the tilapia whenever at least one animal rolls the dice for the parrot.\n\nThe current state of the game is as follows\nThe kudu has a blade\nThe panda bear rolls the dice for the parrot.\n\nBased on the game state and the rules and preferences, does the tilapia proceed to the spot right after the sea bass?\nQuestion: Does the tilapia proceed to the spot right after the sea bass?",
        "idx": 274,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lion rolls the dice for the tilapia and the kudu does not roll the dice for the tilapia, then the tilapia will never proceed to the spot right after the sea bass\nrule1() = roll_dice(lion, tilapia) & not roll_dice(kudu, tilapia) => not proceed(tilapia, spot_right_after(sea_bass))\n# Rule2: If the kudu has a sharp object, then the kudu does not roll the dice for the tilapia\nrule2() = has(kudu, sharp_object) => not roll_dice(kudu, tilapia)\n# Rule3: The lion rolls the dice for the tilapia whenever at least one animal rolls the dice for the parrot.\nrule3() = roll_dice(lion, tilapia) if roll_dice(something, parrot)\n\n# The current state of the game is as follows\n# The kudu has a blade\nhas(kudu, blade) = True\n# The panda bear rolls the dice for the parrot.\nroll_dice(panda_bear, parrot) = True\n\n# Based on the game state and the rules and preferences, does the tilapia proceed to the spot right after the sea bass?\nquestion = proceed(tilapia, spot_right_after(sea_bass))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something winks at the halibut, then the grizzly bear knows the defensive plans of the elephant\nRule2: If something does not owe money to the lobster and also does not attack the green fields of the hummingbird, then it rolls the dice for the halibut.\n\nThe current state of the game is as follows\nThe crocodile does not attack the green fields whose owner is the hummingbird, and does not owe money to the lobster.\n\nBased on the game state and the rules and preferences, does the grizzly bear know the defensive plans of the elephant?\nQuestion: Does the grizzly bear know the defensive plans of the elephant?",
        "idx": 275,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal winks at the halibut, then the grizzly bear knows the defensive plans of the elephant\nrule1() = wink(something, halibut) => knows(grizzly_bear, defensive_plans, elephant)\n# Rule2: If you see that something does not owe $$$ to the lobster and also does not attack the green fields of the hummingbird, what can you certainly conclude? You can conclude that it also rolls the dice for the halibut.\nrule2(something) = not owe(something, money, lobster) & not attack(something, green_fields, hummingbird) => roll_dice(something, halibut)\n\n# The current state of the game is as follows\n# The crocodile does not attack the green fields whose owner is the hummingbird, and does not owe money to the lobster.\nnot attack(crocodile, green_fields, hummingbird) = True\nnot owe(crocodile, money, lobster) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear know the defensive plans of the elephant?\nquestion = knows(grizzly_bear, defensive_plans, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cheetah has a high salary, then it learns the basics of resource management from the snail\nRule2: If the catfish has a device to connect to the internet, then it does not attack the green fields whose owner is the snail\nRule3: If the cheetah learns the basics of resource management from the snail and the catfish attacks the green fields of the snail, then the snail prepares armor for the hippopotamus\nRule4: If something does not become an enemy of the rabbit, then it attacks the green fields whose owner is the snail\nRule5: If something does not offer a job to the sun bear, then it does not prepare armor for the hippopotamus\nRule6: The cheetah does not learn elementary resource management from the snail whenever at least one animal owes money to the sun bear.\n\nRule2 is preferred over Rule4\nRule5 is preferred over Rule3\nRule6 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cheetah has a high salary\nThe catfish does not become an enemy of the rabbit\n\nBased on the game state and the rules and preferences, does the snail prepare armor for the hippopotamus?\nQuestion: Does the snail prepare armor for the hippopotamus?",
        "idx": 276,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cheetah has a high salary, then the cheetah learns the basics of resource management from the snail\nrule1() = has(cheetah, high_salary) => learn(cheetah, basics_of_resource_management, snail)\n# Rule2: If the catfish has a device to connect to the internet, then the catfish does not attack the green fields whose owner is the snail\nrule2() = has(catfish, internet_device) => not attack(catfish, green_fields, owner(snail))\n# Rule3: For the snail, if the belief is that the cheetah learns the basics of resource management from the snail and the catfish attacks the green fields of the snail, then you can add \"the snail prepares armor for the hippopotamus\" to your conclusions\nrule3() = belief(learn(cheetah, basics_of_resource_management, snail)) & attack(catfish, green_fields, owner(snail)) => prepare_armor(snail, hippopotamus)\n# Rule4: If you are positive that one of the animals does not become an enemy of the rabbit, you can be certain that it will attack the green fields whose owner is the snail without a doubt\nrule4() = not become_enemy(something, rabbit) => attack(something, green_fields, owner(snail))\n# Rule5: If something does not offer a job to the sun bear, then it does not prepare armor for the hippopotamus\nrule5() = not offer_job_position(something, sun_bear) => not prepare_armor(something, hippopotamus)\n# Rule6: The cheetah does not learn elementary resource management from the snail whenever at least one animal owes money to the sun bear.\nrule6() = owes(something, money, sun_bear) => not learn(cheetah, elementary_resource_management, snail)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cheetah got a well-paid job\nhas(cheetah, high_salary) = True\n# The catfish does not become an enemy of the rabbit.\nnot become_enemy(catfish, rabbit) = True\n\n# Based on the game state and the rules and preferences, does the snail prepare armor for the hippopotamus?\nquestion = prepare_armor(snail, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal owes money to the kudu, then the kiwi does not show all her cards to the zander\nRule2: If the koala has something to carry apples and oranges, then it owes money to the kudu\nRule3: If the koala has fewer than sixteen friends, then it owes money to the kudu.\n\nThe current state of the game is as follows\nThe koala has a violin\nThe koala has 3 loyal friends\nThe koala has 3 disloyal friends\n\nBased on the game state and the rules and preferences, does the kiwi show all her cards to the zander?\nQuestion: Does the kiwi show all her cards to the zander?",
        "idx": 277,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal owes money to the kudu, then the kiwi does not show her cards (all of them) to the zander\nrule1() = owes(something, money, kudu) => not show_all_cards(kiwi, zander)\n# Rule2: If the koala has something to carry apples and oranges, then the koala owes money to the kudu\nrule2() = has(koala, carry_apples_oranges) => owes(koala, money, kudu)\n# Rule3: Regarding the koala, if it has fewer than sixteen friends, then we can conclude that it owes $$$ to the kudu.\nrule3() = friends(koala) < 16 => owes(koala, money, kudu)\n\n# The current state of the game is as follows\n# The koala has a violin\nhas(koala, violin) = True\n# The koala has three friends that are loyal and three friends that are not.\nloyal_friends(koala) = 3\ndisloyal_friends(koala) = 3\n\n# Based on the game state and the rules and preferences, does the kiwi show all her cards to the zander?\nquestion = show_all_cards(kiwi, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo owns a luxury aircraft, then it does not eat the food of the bat\nRule2: If the first letter of the name of the buffalo is the same as the first letter of the name of the blobfish, then the buffalo does not eat the food of the bat\nRule3: If something eats the food of the grizzly bear, then it will not roll the dice for the hippopotamus\nRule4: If something does not eat the food of the bat but it rolls the dice for the hippopotamus, then it also respects the elephant\nRule5: If the tilapia becomes an enemy of the buffalo and the panther does not wink at the buffalo, then the buffalo rolls the dice for the hippopotamus.\n\nRule3 is preferred over Rule5\n\nThe current state of the game is as follows\nThe name of the blobfish is Lucy\nThe buffalo dreamed of a luxury aircraft\nThe name of the buffalo is Lily\nThe tilapia becomes an enemy of the buffalo\nThe panther does not owe money to the buffalo.\n\nBased on the game state and the rules and preferences, does the buffalo respect the elephant?\nQuestion: Does the buffalo respect the elephant?",
        "idx": 278,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the buffalo owns a luxury aircraft, then the buffalo does not eat the food that belongs to the bat\nrule1() = owns(buffalo, luxury_aircraft) => not eat(buffalo, food_of(bat))\n# Rule2: Regarding the buffalo, if it has a name whose first letter is the same as the first letter of the blobfish's name, then we can conclude that it does not eat the food of the bat\nrule2() = first_letter_of(name(buffalo)) == first_letter_of(name(blobfish)) => not eat(buffalo, food_of(bat))\n# Rule3: If you are positive that you saw one of the animals eats the food that belongs to the grizzly bear, you can be certain that it will not roll the dice for the hippopotamus\nrule3(something) = eat(something, food_of(grizzly_bear)) => not roll_dice(something, hippopotamus)\n# Rule4: If you see that something does not eat the food that belongs to the bat but it rolls the dice for the hippopotamus, what can you certainly conclude? You can conclude that it also respects the elephant\nrule4(something) = not eat(something, food_of(bat)) & roll_dice(something, hippopotamus) => respect(something, elephant)\n# Rule5: For the buffalo, if the belief is that the tilapia becomes an enemy of the buffalo and the panther does not wink at the buffalo, then you can add \"the buffalo rolls the dice for the hippopotamus\" to your conclusions.\nrule5() = become_enemy(tilapia, buffalo) & not wink(panther, buffalo) => roll_dice(buffalo, hippopotamus)\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n\n# The current state of the game is as follows\n# The blobfish is named Lucy\nname(blobfish, Lucy) = True\n# The buffalo dreamed of a luxury aircraft, and is named Lily\ndream(buffalo, luxury_aircraft) = True\nname(buffalo, Lily) = True\n# The tilapia becomes an enemy of the buffalo\nbecome_enemy(tilapia, buffalo) = True\n# The panther does not owe money to the buffalo.\nowe(panther, money, buffalo) = False\n\n# Based on the game state and the rules and preferences, does the buffalo respect the elephant?\nquestion = respect(buffalo, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hummingbird does not have her keys, then it does not eat the food of the mosquito\nRule2: If the first letter of the name of the hummingbird is the same as the first letter of the name of the goldfish, then the hummingbird does not eat the food of the mosquito\nRule3: If the hummingbird has a card and the color of the card is one of the rainbow colors, then it does not remove from the board one of the pieces of the lobster\nRule4: If something does not remove from the board one of the pieces of the lobster and also does not eat the food that belongs to the mosquito, then it learns the basics of resource management from the amberjack\nRule5: If the black bear gives a magnifier to the hummingbird, then the hummingbird removes from the board one of the pieces of the lobster.\n\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe name of the goldfish is Cinnamon\nThe hummingbird has a violet card\nThe name of the hummingbird is Charlie\nThe hummingbird is holding her keys.\n\nBased on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the amberjack?\nQuestion: Does the hummingbird learn the basics of resource management from the amberjack?",
        "idx": 279,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hummingbird, if it does not have her keys, then we can conclude that it does not eat the food of the mosquito\nrule1() = not has(hummingbird, keys) => not eat_food(hummingbird, food_of(mosquito))\n# Rule2: Regarding the hummingbird, if it has a name whose first letter is the same as the first letter of the goldfish's name, then we can conclude that it does not eat the food of the mosquito\nrule2() = first_letter_of(name(hummingbird)) == first_letter_of(name(goldfish)) => not eat_food(hummingbird, food_of(mosquito))\n# Rule3: Regarding the hummingbird, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not remove from the board one of the pieces of the lobster\nrule3() = has(hummingbird, card) and color(card) in rainbow_colors => not remove_from_board(hummingbird, piece_of(lobster))\n# Rule4: If you see that something does not remove from the board one of the pieces of the lobster and also does not eat the food that belongs to the mosquito, what can you certainly conclude? You can conclude that it also learns the basics of resource management from the amberjack\nrule4(something) = not remove_from_board(something, piece_of(lobster)) & not eat_food(something, food_of(mosquito)) => learn(something, basics_of_resource_management_from(amberjack))\n# Rule5: If the black bear gives a magnifier to the hummingbird, then the hummingbird removes from the board one of the pieces of the lobster.\nrule5() = give(black_bear, magnifier, hummingbird) => remove_from_board(hummingbird, piece_of(lobster))\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The goldfish is named Cinnamon\nname(goldfish, Cinnamon) = True\n# The hummingbird has a card that is violet in color\nhas(hummingbird, card) = True\ncolor(card, violet) = True\n# The hummingbird is named Charlie\nname(hummingbird, Charlie) = True\n# The hummingbird is holding her keys.\nhas(hummingbird, keys) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the amberjack?\nquestion = learn(hummingbird, basics_of_resource_management_from(amberjack))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish has more than eight friends, then it gives a magnifier to the elephant\nRule2: If the first letter of the name of the blobfish is the same as the first letter of the name of the viperfish, then the blobfish gives a magnifier to the elephant\nRule3: The elephant does not attack the green fields of the sheep, in the case where the blobfish gives a magnifier to the elephant\nRule4: The blobfish does not give a magnifying glass to the elephant, in the case where the hippopotamus gives a magnifying glass to the blobfish.\n\nRule1 is preferred over Rule4\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe blobfish has 18 friends, and is named Pashmak\nThe hippopotamus gives a magnifier to the blobfish\nThe viperfish is named Luna.\n\nBased on the game state and the rules and preferences, does the elephant attack the green fields whose owner is the sheep?\nQuestion: Does the elephant attack the green fields whose owner is the sheep?",
        "idx": 280,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the blobfish, if it has more than eight friends, then we can conclude that it gives a magnifier to the elephant\nrule1() = friends(blobfish) > 8 => give(blobfish, magnifier, elephant)\n# Rule2: If the blobfish has a name whose first letter is the same as the first letter of the viperfish's name, then the blobfish gives a magnifier to the elephant\nrule2() = first_letter_of(name(blobfish)) == first_letter_of(name(viperfish)) => give(blobfish, magnifier, elephant)\n# Rule3: The elephant does not attack the green fields of the sheep, in the case where the blobfish gives a magnifier to the elephant\nrule3() = give(blobfish, magnifier, elephant) => not attack(elephant, green_fields(sheep))\n# Rule4: The blobfish does not give a magnifying glass to the elephant, in the case where the hippopotamus gives a magnifying glass to the blobfish.\nrule4() = give(hippopotamus, magnifying_glass, blobfish) => not give(blobfish, magnifier, elephant)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The blobfish has 18 friends, and is named Pashmak\nfriends(blobfish) = 18\nname(blobfish, Pashmak) = True\n# The hippopotamus gives a magnifier to the blobfish\ngive(hippopotamus, magnifying_glass, blobfish) = True\n# The viperfish is named Luna.\nname(viperfish, Luna) = True\n\n# Based on the game state and the rules and preferences, does the elephant attack the green fields whose owner is the sheep?\nquestion = attack(elephant, green_fields(sheep))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the snail does not eat the food of the cheetah, then the cheetah knocks down the fortress of the kangaroo\nRule2: If the snail took a bike from the store, then it eats the food that belongs to the cheetah\nRule3: If the snail has something to drink, then it does not eat the food of the cheetah\nRule4: If the zander raises a flag of peace for the cheetah, then the cheetah does not knock down the fortress of the kangaroo.\n\nRule2 is preferred over Rule3\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe snail has a hot chocolate and stole a bike from the store\nThe snail has 8 adventurous friends and 1 non-adventurous friend.\n\nBased on the game state and the rules and preferences, does the cheetah knock down the fortress of the kangaroo?\nQuestion: Does the cheetah knock down the fortress of the kangaroo?",
        "idx": 281,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the snail does not eat the food of the cheetah, then the cheetah knocks down the fortress of the kangaroo\nrule1() = not eat_food(snail, food_of(cheetah)) => knock_down_fortress(cheetah, kangaroo)\n# Rule2: Regarding the snail, if it took a bike from the store, then we can conclude that it eats the food that belongs to the cheetah\nrule2() = took(snail, bike, store) => eat_food(snail, food_of(cheetah))\n# Rule3: Regarding the snail, if it has something to drink, then we can conclude that it does not eat the food of the cheetah\nrule3() = has(snail, drink) => not eat_food(snail, food_of(cheetah))\n# Rule4: The cheetah does not knock down the fortress of the kangaroo, in the case where the zander raises a flag of peace for the cheetah.\nrule4() = raise_flag_of_peace(zander, cheetah) => not knock_down_fortress(cheetah, kangaroo)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The snail has a hot chocolate, and stole a bike from the store\nhas(snail, hot_chocolate) = True\ntook(snail, bike, store) = True\n# The snail has eight friends that are adventurous and one friend that is not.\nadventurous_friends(snail) = 8\nnon_adventurous_friends(snail) = 1\n\n# Based on the game state and the rules and preferences, does the cheetah knock down the fortress of the kangaroo?\nquestion = knock_down_fortress(cheetah, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cat needs support from the whale whenever at least one animal gives a magnifier to the kudu\nRule2: If the donkey has a card whose color appears in the flag of Netherlands, then it gives a magnifier to the kudu\nRule3: If the cat has a device to connect to the internet, then it does not burn the warehouse that is in possession of the moose\nRule4: If the donkey purchased a time machine, then it gives a magnifying glass to the kudu\nRule5: If the cat has more than 2 friends, then it burns the warehouse that is in possession of the moose\nRule6: If something burns the warehouse of the moose, then it does not need the support of the whale.\n\nRule1 is preferred over Rule6\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cat has a violet card\nThe cat has kale\nThe cat has 3 kind friends and 7 not kind friends\nThe donkey has a red card\nThe donkey invented a time machine\n\nBased on the game state and the rules and preferences, does the cat need support from the whale?\nQuestion: Does the cat need support from the whale?",
        "idx": 282,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cat needs support from the whale whenever at least one animal gives a magnifier to the kudu\nrule1() = give(something, magnifier, kudu) => need_support(cat, whale)\n# Rule2: Regarding the donkey, if it has a card whose color appears in the flag of Netherlands, then we can conclude that it gives a magnifier to the kudu\nrule2() = has(donkey, card) and color(card) in flag_colors(Netherlands) => give(donkey, magnifier, kudu)\n# Rule3: Regarding the cat, if it has a device to connect to the internet, then we can conclude that it does not burn the warehouse that is in possession of the moose\nrule3() = has(cat, internet_device) => not burn(cat, warehouse, moose)\n# Rule4: If the donkey purchased a time machine, then the donkey gives a magnifying glass to the kudu\nrule4() = has(donkey, time_machine) => give(donkey, magnifying_glass, kudu)\n# Rule5: If the cat has more than 2 friends, then the cat burns the warehouse that is in possession of the moose\nrule5() = friends(cat) > 2 => burn(cat, warehouse, moose)\n# Rule6: If something burns the warehouse of the moose, then it does not need the support of the whale.\nrule6() = burn(something, warehouse, moose) => not need_support(something, whale)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cat has a card that is violet in color\nhas(cat, card) and color(card) == violet = True\n# The cat has some kale\nhas(cat, kale) = True\n# The cat has three friends that are kind and 7 friends that are not\nkind_friends(cat) = 3\nnot_kind_friends(cat) = 7\n# The donkey has a card that is red in color\nhas(donkey, card) and color(card) == red = True\n# The donkey invented a time machine\ninvented(donkey, time_machine) = True\n\n# Based on the game state and the rules and preferences, does the cat need support from the whale?\nquestion = need_support(cat, whale)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the dog has a card whose color starts with the letter \"w\", then it needs support from the wolverine\nRule2: The koala does not prepare armor for the zander whenever at least one animal needs support from the wolverine.\n\nThe current state of the game is as follows\nThe dog has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the koala prepare armor for the zander?\nQuestion: Does the koala prepare armor for the zander?",
        "idx": 283,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the dog, if it has a card whose color starts with the letter \"w\", then we can conclude that it needs support from the wolverine\nrule1() = starts_with(color(card(dog)), \"w\") => needs_support(dog, wolverine)\n# Rule2: The koala does not prepare armor for the zander whenever at least one animal needs support from the wolverine.\nrule2() = exists(animal) such that needs_support(animal, wolverine) => not prepare_armor(koala, zander)\n\n# The current state of the game is as follows\n# The dog has a card that is white in color.\ncolor(card(dog), white) = True\n\n# Based on the game state and the rules and preferences, does the koala prepare armor for the zander?\nquestion = prepare_armor(koala, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something needs the support of the jellyfish, then it will also roll the dice for the sheep\nRule2: The crocodile does not roll the dice for the sheep whenever something sings a victory song for the ferret\nRule3: If the crocodile has a card with a primary color, then it needs support from the jellyfish.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe crocodile has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the crocodile roll the dice for the sheep?\nQuestion: Does the crocodile roll the dice for the sheep?",
        "idx": 284,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals needs the support of the jellyfish, you can be certain that it will also roll the dice for the sheep\nrule1(something) = needs_support(something, jellyfish) => roll_dice(something, sheep)\n# Rule2: The crocodile does not roll the dice for the sheep whenever at least one animal sings a victory song for the ferret\nrule2() = sings_victory_song(something, ferret) => not roll_dice(crocodile, sheep)\n# Rule3: Regarding the crocodile, if it has a card with a primary color, then we can conclude that it needs support from the jellyfish.\nrule3() = has(crocodile, card) and color(card) in primary_colors => needs_support(crocodile, jellyfish)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The crocodile has a card that is white in color.\nhas(crocodile, card) = True\ncolor(card, white) = True\n\n# Based on the game state and the rules and preferences, does the crocodile roll the dice for the sheep?\nquestion = roll_dice(crocodile, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hare has something to drink, then it respects the halibut\nRule2: If something learns elementary resource management from the caterpillar, then it also learns elementary resource management from the koala\nRule3: If the name of the mosquito starts with the same letter as the name of the doctorfish, then it needs support from the halibut\nRule4: If the mosquito has a card whose color starts with the letter \"b\", then it does not need support from the halibut\nRule5: The halibut proceeds to the spot that is right after the spot of the cow whenever at least one animal learns elementary resource management from the koala.\n\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe name of the doctorfish is Teddy\nThe hare burns the warehouse of the puffin and has a beer\nThe mosquito is named Tango\nThe panther learns the basics of resource management from the caterpillar.\n\nBased on the game state and the rules and preferences, does the halibut proceed to the spot right after the cow?\nQuestion: Does the halibut proceed to the spot right after the cow?",
        "idx": 285,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the hare has something to drink, then the hare respects the halibut\nrule1() = has(hare, drink) => respect(hare, halibut)\n# Rule2: If you are positive that you saw one of the animals learns elementary resource management from the caterpillar, you can be certain that it will also learn elementary resource management from the koala\nrule2(something) = learn(something, elementary_resource_management, caterpillar) => learn(something, elementary_resource_management, koala)\n# Rule3: Regarding the mosquito, if it has a name whose first letter is the same as the first letter of the doctorfish's name, then we can conclude that it needs support from the halibut\nrule3() = first_letter_of(name(mosquito)) == first_letter_of(name(doctorfish)) => needs_support(mosquito, halibut)\n# Rule4: Regarding the mosquito, if it has a card whose color starts with the letter \"b\", then we can conclude that it does not need support from the halibut\nrule4() = has(mosquito, card) and starts_with(color(card), \"b\") => not needs_support(mosquito, halibut)\n# Rule5: The halibut proceeds to the spot that is right after the spot of the cow whenever at least one animal learns elementary resource management from the koala.\nrule5() = learn(something, elementary_resource_management, koala) => proceed(halibut, spot_after(cow))\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The doctorfish is named Teddy\nname(doctorfish, Teddy) = True\n# The hare burns the warehouse of the puffin, and has a beer\nburns(hare, warehouse_of(puffin)) = True\nhas(hare, beer) = True\n# The mosquito is named Tango\nname(mosquito, Tango) = True\n# The panther learns the basics of resource management from the caterpillar.\nlearn(panther, basics_of_resource_management, caterpillar) = True\n\n# Based on the game state and the rules and preferences, does the halibut proceed to the spot right after the cow?\nquestion = proceed(halibut, spot_after(cow))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish proceeds to the spot right after the goldfish and the meerkat does not offer a job to the goldfish, then the goldfish will never hold the same number of points as the puffin\nRule2: If the catfish has a high salary, then it does not proceed to the spot that is right after the spot of the goldfish\nRule3: If the catfish has a card with a primary color, then it does not proceed to the spot that is right after the spot of the goldfish\nRule4: If the swordfish offers a job to the catfish, then the catfish proceeds to the spot that is right after the spot of the goldfish\nRule5: If the meerkat killed the mayor, then it does not offer a job position to the goldfish.\n\nRule2 is preferred over Rule4\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe name of the cat is Buddy\nThe catfish has a card that is indigo in color\nThe meerkat assassinated the mayor, and the name of the meerkat is Blossom\nThe swordfish offers a job to the catfish.\n\nBased on the game state and the rules and preferences, does the goldfish hold the same number of points as the puffin?\nQuestion: Does the goldfish hold the same number of points as the puffin?",
        "idx": 286,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the catfish proceeds to the spot right after the goldfish and the meerkat does not offer a job to the goldfish, then the goldfish will never hold the same number of points as the puffin\nrule1() = proceed(catfish, spot_after(goldfish)) & not offer_job_position(meerkat, goldfish) => never_hold(goldfish, same_points, puffin)\n# Rule2: Regarding the catfish, if it has a high salary, then we can conclude that it does not proceed to the spot that is right after the spot of the goldfish\nrule2() = has_high_salary(catfish) => not proceed(catfish, spot_after(goldfish))\n# Rule3: If the catfish has a card with a primary color, then the catfish does not proceed to the spot that is right after the spot of the goldfish\nrule3() = has_primary_color_card(catfish) => not proceed(catfish, spot_after(goldfish))\n# Rule4: If the swordfish offers a job to the catfish, then the catfish proceeds to the spot that is right after the spot of the goldfish\nrule4() = offer_job_position(swordfish, catfish) => proceed(catfish, spot_after(goldfish))\n# Rule5: Regarding the meerkat, if it killed the mayor, then we can conclude that it does not offer a job position to the goldfish.\nrule5() = killed(mayor, meerkat) => not offer_job_position(meerkat, goldfish)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cat is named Buddy\nname(cat, Buddy) = True\n# The catfish has a card that is indigo in color\nhas(catfish, card) = True\ncolor(card, indigo) = True\n# The meerkat assassinated the mayor, and is named Blossom\nname(meerkat, Blossom) = True\nkilled(mayor, meerkat) = True\n# The swordfish offers a job to the catfish.\noffer_job_position(swordfish, catfish) = True\n\n# Based on the game state and the rules and preferences, does the goldfish hold the same number of points as the puffin?\nquestion = hold(goldfish, same_points, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale has something to sit on, then it offers a job to the caterpillar\nRule2: Whenever at least one animal offers a job to the caterpillar, the squirrel steals five points of the amberjack.\n\nThe current state of the game is as follows\nThe whale has hot chocolate.\n\nBased on the game state and the rules and preferences, does the squirrel steal five points from the amberjack?\nQuestion: Does the squirrel steal five points from the amberjack?",
        "idx": 287,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the whale, if it has something to sit on, then we can conclude that it offers a job to the caterpillar\nrule1() = has(whale, something_to_sit_on) => offer_job_position(whale, caterpillar)\n# Rule2: The squirrel steals five of the points of the amberjack whenever at least one animal offers a job to the caterpillar.\nrule2() = offer_job_position(something, caterpillar) => steal_points(squirrel, 5, amberjack)\n\n# The current state of the game is as follows\n# The whale has a hot chocolate.\nhas(whale, hot_chocolate) = True\n\n# Based on the game state and the rules and preferences, does the squirrel steal five points from the amberjack?\nquestion = steal_points(squirrel, 5, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sun bear has a card whose color appears in the flag of France, then it does not attack the green fields of the mosquito\nRule2: The sun bear does not learn elementary resource management from the cow whenever at least one animal steals five of the points of the phoenix\nRule3: If something prepares armor for the kiwi and shows all her cards to the eel, then it also attacks the green fields whose owner is the mosquito\nRule4: If something attacks the green fields whose owner is the mosquito, then it learns elementary resource management from the cow, too\nRule5: If the squirrel has something to sit on, then it does not steal five of the points of the phoenix\nRule6: If the squirrel has more than 1 friend, then it steals five of the points of the phoenix\nRule7: If the first letter of the name of the squirrel is the same as the first letter of the name of the meerkat, then the squirrel does not steal five points from the phoenix.\n\nRule3 is preferred over Rule1\nRule4 is preferred over Rule2\nRule5 is preferred over Rule6\nRule7 is preferred over Rule6\n\nThe current state of the game is as follows\nThe name of the gecko is Cinnamon\nThe name of the meerkat is Blossom\nThe squirrel has 4 friends\nThe name of the squirrel is Luna\nThe sun bear has a black card, prepares armor for the kiwi, and shows all her cards to the eel\nThe name of the sun bear is Charlie\n\nBased on the game state and the rules and preferences, does the sun bear learn the basics of resource management from the cow?\nQuestion: Does the sun bear learn the basics of resource management from the cow?",
        "idx": 288,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sun bear has a card whose color appears in the flag of France, then the sun bear does not attack the green fields of the mosquito\nrule1() = has(sun_bear, card) and color(card) in colors_of_flag(France) => not attack(sun_bear, green_fields, mosquito)\n# Rule2: The sun bear does not learn elementary resource management from the cow whenever at least one animal steals five of the points of the phoenix\nrule2() = steal_points(something, 5, phoenix) => not learn(sun_bear, elementary_resource_management, cow)\n# Rule3: If you see that something prepares armor for the kiwi and shows all her cards to the eel, what can you certainly conclude? You can conclude that it also attacks the green fields whose owner is the mosquito\nrule3(something) = prepare_armor(something, kiwi) & show_cards(something, all, eel) => attack(something, green_fields, owner(mosquito))\n# Rule4: If something attacks the green fields whose owner is the mosquito, then it learns elementary resource management from the cow, too\nrule4() = attack(something, green_fields, owner(mosquito)) => learn(something, elementary_resource_management, cow)\n# Rule5: If the squirrel has something to sit on, then the squirrel does not steal five of the points of the phoenix\nrule5() = has(squirrel, something_to_sit_on) => not steal_points(squirrel, 5, phoenix)\n# Rule6: Regarding the squirrel, if it has more than 1 friend, then we can conclude that it steals five of the points of the phoenix\nrule6() = friends(squirrel) > 1 => steal_points(squirrel, 5, phoenix)\n# Rule7: If the squirrel has a name whose first letter is the same as the first letter of the meerkat's name, then the squirrel does not steal five points from the phoenix.\nrule7() = first_letter_of(name(squirrel)) == first_letter_of(name(meerkat)) => not steal_points(squirrel, 5, phoenix)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n\n# The current state of the game is as follows\n# The gecko is named Cinnamon\nname(gecko, Cinnamon) = True\n# The meerkat is named Blossom\nname(meerkat, Blossom) = True\n# The squirrel has four friends\nfriends(squirrel) = 4\n# The squirrel is named Luna\nname(squirrel, Luna) = True\n# The sun bear has a card that is black in color, prepares armor for the kiwi, and shows all her cards to the eel\nhas(sun_bear, card) = True\ncolor(card, black) = True\nprepare_armor(sun_bear, kiwi) = True\nshow_cards(sun_bear, all, eel) = True\n# The sun bear is named Charlie\nname(sun_bear, Charlie) = True\n\n# Based on the game state and the rules and preferences, does the sun bear learn the basics of resource management from the cow?\nquestion = learn(sun_bear, elementary_resource_management, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something winks at the elephant and learns elementary resource management from the grizzly bear, then it does not offer a job to the halibut\nRule2: If the belief is that the sea bass knocks down the fortress of the octopus and the raven needs support from the octopus, then the octopus shows her cards (all of them) to the koala\nRule3: If something does not proceed to the spot right after the salmon, then it learns the basics of resource management from the grizzly bear\nRule4: If the gecko has fewer than nine friends, then it winks at the elephant.\n\nThe current state of the game is as follows\nThe gecko has 2 bald friends and 2 non-bald friends\nThe gecko does not proceed to the spot right after the salmon\nThe raven needs support from the octopus\nThe sea bass knocks down the fortress of the octopus.\n\nBased on the game state and the rules and preferences, does the gecko offer a job to the halibut?\nQuestion: Does the gecko offer a job to the halibut?",
        "idx": 289,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something winks at the elephant and learns elementary resource management from the grizzly bear, what can you certainly conclude? You can conclude that it does not offer a job to the halibut\nrule1(something) = wink(something, elephant) & learn(something, elementary_resource_management_from(grizzly_bear)) => not offer_job_position(something, halibut)\n# Rule2: For the octopus, if the belief is that the sea bass knocks down the fortress of the octopus and the raven needs support from the octopus, then you can add \"the octopus shows her cards (all of them) to the koala\" to your conclusions\nrule2() = belief(sea_bass, knocks_down_fortress, octopus) & need_support(raven, octopus) => add_conclusion(octopus, show_cards(all), koala)\n# Rule3: If you are positive that one of the animals does not proceed to the spot right after the salmon, you can be certain that it will learn the basics of resource management from the grizzly bear without a doubt\nrule3(something) = not proceed(something, spot_right_after(salmon)) => learn(something, basics_of_resource_management_from(grizzly_bear))\n# Rule4: Regarding the gecko, if it has fewer than nine friends, then we can conclude that it winks at the elephant.\nrule4() = friends(gecko) < 9 => wink(gecko, elephant)\n\n# The current state of the game is as follows\n# The gecko has two friends that are bald and two friends that are not, and does not proceed to the spot right after the salmon\nbald_friends(gecko) = 2\nnon_bald_friends(gecko) = 2\nproceed(gecko, spot_right_after(salmon)) = False\n# The raven needs support from the octopus\nneed_support(raven, octopus) = True\n# The sea bass knocks down the fortress of the octopus.\nbelief(sea_bass, knocks_down_fortress, octopus) = True\n\n# Based on the game state and the rules and preferences, does the gecko offer a job to the halibut?\nquestion = offer_job_position(gecko, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knows the defense plan of the moose, then it does not burn the warehouse that is in possession of the caterpillar\nRule2: If something gives a magnifier to the polar bear, then it respects the cricket\nRule3: If something sings a song of victory for the black bear and removes from the board one of the pieces of the viperfish, then it does not respect the cricket\nRule4: If something respects the cricket, then it burns the warehouse that is in possession of the caterpillar.\n\nRule1 is preferred over Rule4\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe rabbit gives a magnifier to the polar bear\nThe rabbit removes from the board one of the pieces of the viperfish\nThe rabbit sings a victory song for the black bear\n\nBased on the game state and the rules and preferences, does the rabbit burn the warehouse of the caterpillar?\nQuestion: Does the rabbit burn the warehouse of the caterpillar?",
        "idx": 290,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something knows the defense plan of the moose, then it does not burn the warehouse that is in possession of the caterpillar\nrule1(something) = knows(something, defense_plan, moose) => not burn(warehouse, caterpillar)\n# Rule2: If you are positive that you saw one of the animals gives a magnifier to the polar bear, you can be certain that it will also respect the cricket\nrule2(something) = give(something, magnifier, polar_bear) => respect(something, cricket)\n# Rule3: If you see that something sings a song of victory for the black bear and removes from the board one of the pieces of the viperfish, what can you certainly conclude? You can conclude that it does not respect the cricket\nrule3(something) = sing_victory_song(something, black_bear) & remove_piece(something, viperfish) => not respect(something, cricket)\n# Rule4: If something respects the cricket, then it burns the warehouse that is in possession of the caterpillar, too.\nrule4(something) = respect(something, cricket) => burn(warehouse, caterpillar)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The rabbit gives a magnifier to the polar bear\ngive(rabbit, magnifier, polar_bear) = True\n# The rabbit removes from the board one of the pieces of the viperfish\nremove_piece(rabbit, viperfish) = True\n# The rabbit sings a victory song for the black bear\nsing_victory_song(rabbit, black_bear) = True\n\n# Based on the game state and the rules and preferences, does the rabbit burn the warehouse of the caterpillar?\nquestion = burn(warehouse, caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the oscar, then the eagle respects the starfish\nRule2: If the swordfish does not hold the same number of points as the blobfish and the panther learns elementary resource management from the blobfish, then you can add \"the blobfish rolls the dice for the oscar\" to your conclusions.\n\nThe current state of the game is as follows\nThe panther learns the basics of resource management from the blobfish\nThe swordfish does not hold the same number of points as the blobfish.\n\nBased on the game state and the rules and preferences, does the eagle respect the starfish?\nQuestion: Does the eagle respect the starfish?",
        "idx": 291,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal rolls the dice for the oscar, then the eagle respects the starfish\nrule1() = rolls_dice(something, oscar) => respect(eagle, starfish)\n# Rule2: For the blobfish, if the belief is that the swordfish does not hold an equal number of points as the blobfish but the panther learns elementary resource management from the blobfish, then you can add \"the blobfish rolls the dice for the oscar\" to your conclusions.\nrule2() = not equal_points(swordfish, blobfish) & learns(panther, elementary_resource_management, blobfish) => add_conclusion(\"the blobfish rolls the dice for the oscar\")\n\n# The current state of the game is as follows\n# The panther learns the basics of resource management from the blobfish\nlearns(panther, basics_of_resource_management, blobfish) = True\n# The swordfish does not hold the same number of points as the blobfish.\nequal_points(swordfish, blobfish) = False\n\n# Based on the game state and the rules and preferences, does the eagle respect the starfish?\nquestion = respect(eagle, starfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The jellyfish sings a song of victory for the grasshopper whenever at least one animal burns the warehouse of the wolverine\nRule2: The jellyfish does not sing a victory song for the grasshopper, in the case where the meerkat raises a flag of peace for the jellyfish\nRule3: If at least one animal shows her cards (all of them) to the kiwi, then the meerkat raises a flag of peace for the jellyfish.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe carp shows all her cards to the kiwi.\n\nBased on the game state and the rules and preferences, does the jellyfish sing a victory song for the grasshopper?\nQuestion: Does the jellyfish sing a victory song for the grasshopper?",
        "idx": 292,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The jellyfish sings a song of victory for the grasshopper whenever at least one animal burns the warehouse of the wolverine\nrule1() = burn_warehouse(something, wolverine) => sing_victory_song(jellyfish, grasshopper)\n# Rule2: The jellyfish does not sing a victory song for the grasshopper, in the case where the meerkat raises a flag of peace for the jellyfish\nrule2() = raise_flag_of_peace(meerkat, jellyfish) => not sing_victory_song(jellyfish, grasshopper)\n# Rule3: If at least one animal shows her cards (all of them) to the kiwi, then the meerkat raises a flag of peace for the jellyfish.\nrule3() = show_cards(something, all, kiwi) => raise_flag_of_peace(meerkat, jellyfish)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The carp shows all her cards to the kiwi.\nshow_cards(carp, all, kiwi) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish sing a victory song for the grasshopper?\nquestion = sing_victory_song(jellyfish, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the salmon needs support from the donkey and the squirrel does not give a magnifier to the donkey, then you can add \"the donkey respects the aardvark\" to your conclusions\nRule2: If something removes a piece of the ferret, then the donkey eats the food that belongs to the rabbit\nRule3: If the donkey has a card and the color of the card appears in the flag of Japan, then the donkey does not respect the aardvark\nRule4: If the donkey has fewer than eight friends, then it does not respect the aardvark\nRule5: If the first letter of the name of the parrot is the same as the first letter of the name of the leopard, then the parrot burns the warehouse of the ferret.\n\nRule3 is preferred over Rule1\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe donkey has a white card\nThe name of the leopard is Paco\nThe parrot has a bench\nThe name of the parrot is Pablo\nThe parrot lost her keys\nThe squirrel eats the food of the donkey\nThe salmon does not need support from the donkey.\n\nBased on the game state and the rules and preferences, does the donkey eat the food of the rabbit?\nQuestion: Does the donkey eat the food of the rabbit?",
        "idx": 293,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the donkey, if the belief is that the salmon needs support from the donkey and the squirrel does not give a magnifier to the donkey, then you can add \"the donkey respects the aardvark\" to your conclusions\nrule1() = belief(salmon_needs_support, donkey) & not give(squirrel, magnifier, donkey) => add_conclusion(\"the donkey respects the aardvark\")\n# Rule2: The donkey eats the food that belongs to the rabbit whenever at least one animal removes from the board one of the pieces of the ferret\nrule2() = remove_piece(something, ferret) => eat_food(donkey, food_of(rabbit))\n# Rule3: If the donkey has a card whose color appears in the flag of Japan, then the donkey does not respect the aardvark\nrule3() = has(donkey, card) & color(card) in flag_of_Japan_colors => not respect(donkey, aardvark)\n# Rule4: Regarding the donkey, if it has fewer than eight friends, then we can conclude that it does not respect the aardvark\nrule4() = friends(donkey) < 8 => not respect(donkey, aardvark)\n# Rule5: Regarding the parrot, if it has a name whose first letter is the same as the first letter of the leopard's name, then we can conclude that it burns the warehouse of the ferret.\nrule5() = first_letter_of(name(parrot)) == first_letter_of(name(leopard)) => burn_warehouse(parrot, ferret)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The donkey has a card that is white in color\nhas(donkey, card) = True\ncolor(card, white) = True\n# The leopard is named Paco\nname(leopard, Paco) = True\n# The parrot has a bench\nhas(parrot, bench) = True\n# The parrot is named Pablo\nname(parrot, Pablo) = True\n# The parrot lost her keys\nlost_keys(parrot) = True\n# The squirrel eats the food of the donkey\neat_food(squirrel, food_of(donkey)) = True\n# The salmon does not need support from the donkey.\nneed_support(salmon, donkey) = False\n\n# Based on the game state and the rules and preferences, does the donkey eat the food of the rabbit?\nquestion = eat_food(donkey, food_of(rabbit))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something needs the support of the moose, then the carp does not hold an equal number of points as the cricket\nRule2: If something holds the same number of points as the cricket and burns the warehouse that is in possession of the whale, then it offers a job to the rabbit\nRule3: If the first letter of the name of the carp is the same as the first letter of the name of the squirrel, then the carp holds an equal number of points as the cricket\nRule4: If the carp is a fan of Chris Ronaldo, then it holds an equal number of points as the cricket\nRule5: If something holds an equal number of points as the tilapia, then the carp does not burn the warehouse of the whale\nRule6: If the halibut learns the basics of resource management from the carp, then the carp does not offer a job position to the rabbit\nRule7: If the carp has something to drink, then it burns the warehouse that is in possession of the whale.\n\nRule1 is preferred over Rule3\nRule1 is preferred over Rule4\nRule5 is preferred over Rule7\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe carp has a green tea\nThe carp hates Chris Ronaldo\nThe name of the carp is Tango\nThe name of the squirrel is Teddy.\n\nBased on the game state and the rules and preferences, does the carp offer a job to the rabbit?\nQuestion: Does the carp offer a job to the rabbit?",
        "idx": 294,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal needs the support of the moose, then the carp does not hold an equal number of points as the cricket\nrule1() = needs(something, support, moose) => not hold_equal_points(carp, cricket)\n# Rule2: If you see that something holds the same number of points as the cricket and burns the warehouse that is in possession of the whale, what can you certainly conclude? You can conclude that it also offers a job to the rabbit\nrule2(something) = hold_equal_points(something, cricket) & burns_warehouse(something, whale) => offer_job_position(something, rabbit)\n# Rule3: Regarding the carp, if it has a name whose first letter is the same as the first letter of the squirrel's name, then we can conclude that it holds an equal number of points as the cricket\nrule3() = first_letter_of(name(carp)) == first_letter_of(name(squirrel)) => hold_equal_points(carp, cricket)\n# Rule4: Regarding the carp, if it is a fan of Chris Ronaldo, then we can conclude that it holds an equal number of points as the cricket\nrule4() = fan_of(carp, Chris_Ronaldo) => hold_equal_points(carp, cricket)\n# Rule5: The carp does not burn the warehouse of the whale whenever at least one animal holds an equal number of points as the tilapia\nrule5() = holds_equal_points(something, tilapia) => not burns_warehouse(carp, whale)\n# Rule6: If the halibut learns the basics of resource management from the carp, then the carp is not going to offer a job position to the rabbit\nrule6() = learns(halibut, basics_of_resource_management, carp) => not offer_job_position(carp, rabbit)\n# Rule7: If the carp has something to drink, then the carp burns the warehouse that is in possession of the whale.\nrule7() = has(carp, drink) => burns_warehouse(carp, whale)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule5 is preferred over Rule7\norder(rule5) > order(rule7) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The carp has a green tea, and hates Chris Ronaldo\nhas(carp, green_tea) = True\nhates(carp, Chris_Ronaldo) = True\n# The carp is named Tango\nname(carp, Tango) = True\n# The squirrel is named Teddy.\nname(squirrel, Teddy) = True\n\n# Based on the game state and the rules and preferences, does the carp offer a job to the rabbit?\nquestion = offer_job_position(carp, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the hippopotamus has fewer than sixteen friends, then it burns the warehouse that is in possession of the swordfish\nRule2: The hippopotamus will not burn the warehouse of the swordfish if the hummingbird does not sing a song of victory for the hippopotamus\nRule3: If something burns the warehouse that is in possession of the swordfish, then the viperfish does not roll the dice for the parrot.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe hippopotamus has 10 friends.\n\nBased on the game state and the rules and preferences, does the viperfish roll the dice for the parrot?\nQuestion: Does the viperfish roll the dice for the parrot?",
        "idx": 295,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hippopotamus, if it has fewer than sixteen friends, then we can conclude that it burns the warehouse that is in possession of the swordfish\nrule1() = friends(hippopotamus) < 16 => burn_warehouse(hippopotamus, swordfish)\n# Rule2: The hippopotamus will not burn the warehouse of the swordfish, in the case where the hummingbird does not sing a song of victory for the hippopotamus\nrule2() = not sing_song_of_victory(hummingbird, hippopotamus) => not burn_warehouse(hippopotamus, swordfish)\n# Rule3: If at least one animal burns the warehouse that is in possession of the swordfish, then the viperfish does not roll the dice for the parrot.\nrule3() = burn_warehouse(something, swordfish) => not roll_dice(viperfish, parrot)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The hippopotamus has 10 friends.\nfriends(hippopotamus) = 10\n\n# Based on the game state and the rules and preferences, does the viperfish roll the dice for the parrot?\nquestion = roll_dice(viperfish, parrot)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the turtle has a leafy green vegetable, then it removes from the board one of the pieces of the blobfish\nRule2: If the turtle has fewer than 9 friends, then it removes from the board one of the pieces of the blobfish\nRule3: If the turtle purchased a time machine, then it does not remove one of the pieces of the blobfish\nRule4: If something prepares armor for the canary and holds an equal number of points as the tiger, then it holds an equal number of points as the spider\nRule5: If the turtle has a device to connect to the internet, then it does not remove one of the pieces of the blobfish\nRule6: If the sea bass is not going to owe money to the spider but the turtle holds an equal number of points as the spider, then the spider is not going to hold an equal number of points as the hummingbird\nRule7: If something removes from the board one of the pieces of the blobfish, then the spider holds an equal number of points as the hummingbird.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\nRule5 is preferred over Rule1\nRule5 is preferred over Rule2\nRule6 is preferred over Rule7\n\nThe current state of the game is as follows\nThe turtle has 11 friends, has a cello, holds the same number of points as the tiger, and prepares armor for the canary\nThe turtle invented a time machine\nThe kangaroo does not hold the same number of points as the ferret.\n\nBased on the game state and the rules and preferences, does the spider hold the same number of points as the hummingbird?\nQuestion: Does the spider hold the same number of points as the hummingbird?",
        "idx": 296,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the turtle, if it has a leafy green vegetable, then we can conclude that it removes from the board one of the pieces of the blobfish\nrule1() = has(turtle, leafy_green_vegetable) => remove_piece(turtle, blobfish)\n# Rule2: If the turtle has fewer than 9 friends, then the turtle removes from the board one of the pieces of the blobfish\nrule2() = friends(turtle) < 9 => remove_piece(turtle, blobfish)\n# Rule3: Regarding the turtle, if it purchased a time machine, then we can conclude that it does not remove one of the pieces of the blobfish\nrule3() = purchased(turtle, time_machine) => not remove_piece(turtle, blobfish)\n# Rule4: Be careful when something prepares armor for the canary and also holds an equal number of points as the tiger because in this case it will surely hold the same number of points as the spider (this may or may not be problematic)\nrule4(something) = prepares_armor(something, canary) & holds_equal_points(something, tiger) => holds_equal_points(something, spider)\n# Rule5: Regarding the turtle, if it has a device to connect to the internet, then we can conclude that it does not remove one of the pieces of the blobfish\nrule5() = has(turtle, internet_device) => not remove_piece(turtle, blobfish)\n# Rule6: For the spider, if the belief is that the sea bass is not going to owe $$$ to the spider but the turtle holds an equal number of points as the spider, then you can add that \"the spider is not going to hold an equal number of points as the hummingbird\" to your conclusions\nrule6() = not owe(sea_bass, money, spider) & holds_equal_points(turtle, spider) => not holds_equal_points(spider, hummingbird)\n# Rule7: If at least one animal removes from the board one of the pieces of the blobfish, then the spider holds an equal number of points as the hummingbird.\nrule7() = remove_piece(something, blobfish) => holds_equal_points(spider, hummingbird)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule6 is preferred over Rule7\norder(rule6) > order(rule7) = True\n\n# The current state of the game is as follows\n# The turtle has 11 friends, has a cello, holds the same number of points as the tiger, and prepares armor for the canary\nfriends(turtle) = 11\nhas(turtle, cello) = True\nholds_equal_points(turtle, tiger) = True\nprepares_armor(turtle, canary) = True\n# The turtle invented a time machine\npurchased(turtle, time_machine) = True\n# The kangaroo does not hold the same number of points as the ferret.\nholds_equal_points(kangaroo, ferret) = False\n\n# Based on the game state and the rules and preferences, does the spider hold the same number of points as the hummingbird?\nquestion = holds_equal_points(spider, hummingbird)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knows the defensive plans of the tilapia, then the blobfish offers a job to the amberjack\nRule2: If the pig has a card and the color of the card is one of the rainbow colors, then the pig knows the defense plan of the tilapia\nRule3: If the pig has more than ten friends, then the pig knows the defensive plans of the tilapia.\n\nThe current state of the game is as follows\nThe pig has a card\nThe color of the card is orange\nThe pig has 7 friends\nThe pig has some arugula.\n\nBased on the game state and the rules and preferences, does the blobfish offer a job to the amberjack?\nQuestion: Does the blobfish offer a job to the amberjack?",
        "idx": 297,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal knows the defensive plans of the tilapia, then the blobfish offers a job to the amberjack\nrule1() = knows(something, defensive_plans, tilapia) => offer_job_position(blobfish, amberjack)\n# Rule2: If the pig has a card whose color is one of the rainbow colors, then the pig knows the defense plan of the tilapia\nrule2() = has(pig, card) and color(card) in rainbow_colors => knows(pig, defensive_plans, tilapia)\n# Rule3: If the pig has more than ten friends, then the pig knows the defensive plans of the tilapia.\nrule3() = friends(pig) > 10 => knows(pig, defensive_plans, tilapia)\n\n# The current state of the game is as follows\n# The pig has a card that is orange in color\nhas(pig, card) = True\ncolor(card, orange) = True\n# The pig has seven friends\nfriends(pig) = 7\n# The pig has some arugula.\nhas(pig, arugula) = True\n\n# Based on the game state and the rules and preferences, does the blobfish offer a job to the amberjack?\nquestion = offer_job_position(blobfish, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something respects the wolverine and does not attack its green fields, then it does not owe money to the oscar\nRule2: If something shows all her cards to the whale, then it will not attack the green fields whose owner is the wolverine\nRule3: The blobfish respects the wolverine if the kiwi respects the blobfish.\n\nThe current state of the game is as follows\nThe blobfish shows all her cards to the whale\nThe buffalo winks at the grasshopper\nThe kiwi respects the blobfish.\n\nBased on the game state and the rules and preferences, does the blobfish owe money to the oscar?\nQuestion: Does the blobfish owe money to the oscar?",
        "idx": 298,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not attack the green fields of the wolverine but respects the wolverine because in this case it certainly does not owe money to the oscar (this may or may not be problematic)\nrule1(something) = not attack(something, green_fields, wolverine) & respect(something, wolverine) => not owe(something, money, oscar)\n# Rule2: If you are positive that you saw one of the animals shows all her cards to the whale, you can be certain that it will not attack the green fields whose owner is the wolverine\nrule2(something) = saw(something, show_all_cards, whale) => not attack(green_fields, owner(wolverine))\n# Rule3: The blobfish unquestionably respects the wolverine, in the case where the kiwi respects the blobfish.\nrule3() = respect(blobfish, wolverine) & respect(kiwi, blobfish)\n\n# The current state of the game is as follows\n# The blobfish shows all her cards to the whale\nsaw(blobfish, show_all_cards, whale) = True\n# The buffalo winks at the grasshopper\nwink(buffalo, grasshopper) = True\n# The kiwi respects the blobfish.\nrespect(kiwi, blobfish) = True\n\n# Based on the game state and the rules and preferences, does the blobfish owe money to the oscar?\nquestion = owe(blobfish, money, oscar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the starfish and burns the warehouse that is in possession of the gecko, then it knocks down the fortress that belongs to the amberjack\nRule2: If something removes a piece of the hippopotamus, then it does not burn the warehouse of the gecko\nRule3: If the phoenix has something to drink, then it burns the warehouse that is in possession of the gecko\nRule4: If something knocks down the fortress that belongs to the aardvark, then it rolls the dice for the starfish.\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe phoenix has some arugula\nThe phoenix knocks down the fortress of the aardvark\n\nBased on the game state and the rules and preferences, does the phoenix knock down the fortress of the amberjack?\nQuestion: Does the phoenix knock down the fortress of the amberjack?",
        "idx": 299,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something rolls the dice for the starfish and burns the warehouse that is in possession of the gecko, what can you certainly conclude? You can conclude that it also knocks down the fortress that belongs to the amberjack\nrule1(something) = rolls_dice(something, starfish) & burns_warehouse(something, gecko) => knocks_down_fortress(something, amberjack)\n# Rule2: If you are positive that you saw one of the animals removes from the board one of the pieces of the hippopotamus, you can be certain that it will not burn the warehouse of the gecko\nrule2(something) = removes_piece(something, hippopotamus) => not burns_warehouse(something, gecko)\n# Rule3: Regarding the phoenix, if it has something to drink, then we can conclude that it burns the warehouse that is in possession of the gecko\nrule3() = has(phoenix, drink) => burns_warehouse(phoenix, gecko)\n# Rule4: If something knocks down the fortress that belongs to the aardvark, then it rolls the dice for the starfish, too.\nrule4(something) = knocks_down_fortress(something, aardvark) => rolls_dice(something, starfish)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The phoenix has some arugula\nhas(phoenix, arugula) = True\n# The phoenix knocks down the fortress of the aardvark\nknocks_down_fortress(phoenix, aardvark) = True\n\n# Based on the game state and the rules and preferences, does the phoenix knock down the fortress of the amberjack?\nquestion = knocks_down_fortress(phoenix, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the mosquito has a card and the color of the card is one of the rainbow colors, then the mosquito rolls the dice for the hummingbird\nRule2: If the mosquito has fewer than 5 friends, then it rolls the dice for the hummingbird\nRule3: If the mosquito rolls the dice for the hummingbird, then the hummingbird shows all her cards to the donkey\nRule4: If something shows all her cards to the elephant but does not prepare armor for the grizzly bear, then it does not roll the dice for the hummingbird.\n\nRule4 is preferred over Rule1\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe mosquito has a card\nThe color of the card is red\nThe mosquito has 4 energetic friends\nThe mosquito has 5 friends that are not energetic\nThe mosquito does not prepare armor for the grizzly bear.\n\nBased on the game state and the rules and preferences, does the hummingbird show all her cards to the donkey?\nQuestion: Does the hummingbird show all her cards to the donkey?",
        "idx": 300,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the mosquito has a card whose color is one of the rainbow colors, then the mosquito rolls the dice for the hummingbird\nrule1() = has(mosquito, card) and color(card) in rainbow_colors => roll_dice(mosquito, hummingbird)\n# Rule2: Regarding the mosquito, if it has fewer than 5 friends, then we can conclude that it rolls the dice for the hummingbird\nrule2() = friends(mosquito) < 5 => roll_dice(mosquito, hummingbird)\n# Rule3: If the mosquito rolls the dice for the hummingbird, then the hummingbird shows her cards (all of them) to the donkey\nrule3() = roll_dice(mosquito, hummingbird) => show_cards(hummingbird, all, donkey)\n# Rule4: If you see that something shows her cards (all of them) to the elephant but does not prepare armor for the grizzly bear, what can you certainly conclude? You can conclude that it does not roll the dice for the hummingbird.\nrule4(something) = show_cards(something, all, elephant) and not prepare_armor(something, grizzly_bear) => not roll_dice(something, hummingbird)\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The mosquito has a card that is red in color\nhas(mosquito, card) = True\ncolor(card, red) = True\n# The mosquito has four friends that are energetic and five friends that are not\nenergetic_friends(mosquito) = 4\nnon_energetic_friends(mosquito) = 5\n# The mosquito does not prepare armor for the grizzly bear.\nprepare_armor(mosquito, grizzly_bear) = False\n\n# Based on the game state and the rules and preferences, does the hummingbird show all her cards to the donkey?\nquestion = show_cards(hummingbird, all, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish has fewer than four friends, then it knocks down the fortress of the parrot\nRule2: If the hippopotamus owns a luxury aircraft, then it burns the warehouse of the hare\nRule3: If the hippopotamus has more than 8 friends, then it burns the warehouse that is in possession of the hare\nRule4: The hare does not need the support of the cheetah, in the case where the hippopotamus burns the warehouse of the hare.\n\nThe current state of the game is as follows\nThe blobfish has one friend\nThe gecko attacks the green fields whose owner is the pig\nThe hippopotamus owns a luxury aircraft\nThe hippopotamus has 17 friends.\n\nBased on the game state and the rules and preferences, does the hare need support from the cheetah?\nQuestion: Does the hare need support from the cheetah?",
        "idx": 301,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the blobfish has fewer than four friends, then the blobfish knocks down the fortress of the parrot\nrule1() = friends(blobfish) < 4 => knock_down(blobfish, fortress, parrot)\n# Rule2: Regarding the hippopotamus, if it owns a luxury aircraft, then we can conclude that it burns the warehouse of the hare\nrule2() = owns(hippopotamus, luxury_aircraft) => burn(hippopotamus, warehouse, hare)\n# Rule3: Regarding the hippopotamus, if it has more than 8 friends, then we can conclude that it burns the warehouse that is in possession of the hare\nrule3() = friends(hippopotamus) > 8 => burn(hippopotamus, warehouse, hare)\n# Rule4: The hare does not need the support of the cheetah, in the case where the hippopotamus burns the warehouse of the hare.\nrule4() = burn(hippopotamus, warehouse, hare) => not need_support(hare, cheetah)\n\n# The current state of the game is as follows\n# The blobfish has one friend\nfriends(blobfish) = 1\n# The gecko attacks the green fields whose owner is the pig\nattacks(gecko, green_fields, pig) = True\n# The hippopotamus dreamed of a luxury aircraft, and has seventeen friends.\nowns(hippopotamus, luxury_aircraft) = True\nfriends(hippopotamus) = 17\n\n# Based on the game state and the rules and preferences, does the hare need support from the cheetah?\nquestion = need_support(hare, cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sheep has a card whose color starts with the letter \"r\", then it rolls the dice for the sea bass\nRule2: If the sheep does not have her keys, then the sheep does not roll the dice for the sea bass\nRule3: If something does not prepare armor for the rabbit, then it shows her cards (all of them) to the salmon\nRule4: If the sheep has something to sit on, then it rolls the dice for the sea bass\nRule5: If the snail does not learn the basics of resource management from the sea bass and the sheep does not roll the dice for the sea bass, then the sea bass will never show her cards (all of them) to the dog\nRule6: If something eats the food of the squirrel and also shows all her cards to the salmon, then it will surely show her cards (all of them) to the dog\nRule7: If the name of the sea bass starts with the same letter as the name of the polar bear, then the sea bass eats the food of the squirrel\nRule8: If the snail took a bike from the store, then it learns elementary resource management from the sea bass\nRule9: If something does not owe money to the jellyfish, then it will not learn the basics of resource management from the sea bass\nRule10: If the sheep has fewer than 4 friends, then it does not roll the dice for the sea bass.\n\nRule10 is preferred over Rule1\nRule10 is preferred over Rule4\nRule2 is preferred over Rule1\nRule2 is preferred over Rule4\nRule5 is preferred over Rule6\nRule9 is preferred over Rule8\n\nThe current state of the game is as follows\nThe name of the polar bear is Casper\nThe name of the sea bass is Lola\nThe sea bass does not respect the rabbit\nThe sheep has 8 friends and has some kale, but lost her keys\nThe snail stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the sea bass show all her cards to the dog?\nQuestion: Does the sea bass show all her cards to the dog?",
        "idx": 302,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the sheep, if it has a card whose color starts with the letter \"r\", then we can conclude that it rolls the dice for the sea bass\nrule1() = has(sheep, card) and starts_with(color(card), \"r\") => rolls_dice(sheep, sea_bass)\n# Rule2: If the sheep does not have her keys, then the sheep does not roll the dice for the sea bass\nrule2() = not has(sheep, keys) => not rolls_dice(sheep, sea_bass)\n# Rule3: If something does not prepare armor for the rabbit, then it shows her cards (all of them) to the salmon\nrule3(something) = not prepare_armor(something, rabbit) => show_cards(something, all, salmon)\n# Rule4: Regarding the sheep, if it has something to sit on, then we can conclude that it rolls the dice for the sea bass\nrule4() = has(sheep, something_to_sit_on) => rolls_dice(sheep, sea_bass)\n# Rule5: If the snail does not learn the basics of resource management from the sea bass and the sheep does not roll the dice for the sea bass, then the sea bass will never show her cards (all of them) to the dog\nrule5() = not learn(snail, basics_of_resource_management, sea_bass) & not rolls_dice(sheep, sea_bass) => not show_cards(sea_bass, all, dog)\n# Rule6: Be careful when something eats the food of the squirrel and also shows all her cards to the salmon because in this case it will surely show her cards (all of them) to the dog (this may or may not be problematic)\nrule6(something) = eats_food(something, food_of(squirrel)) & show_cards(something, all, salmon) => show_cards(something, all, dog)\n# Rule7: Regarding the sea bass, if it has a name whose first letter is the same as the first letter of the polar bear's name, then we can conclude that it eats the food of the squirrel\nrule7() = first_letter_of(name(sea_bass)) == first_letter_of(name(polar_bear)) => eats_food(sea_bass, food_of(squirrel))\n# Rule8: Regarding the snail, if it took a bike from the store, then we can conclude that it learns elementary resource management from the sea bass\nrule8() = took(snail, bike, store) => learn(snail, elementary_resource_management, sea_bass)\n# Rule9: If you are positive that one of the animals does not owe money to the jellyfish, you can be certain that it will not learn the basics of resource management from the sea bass\nrule9(something) = not owe(something, money, jellyfish) => not learn(something, basics_of_resource_management, sea_bass)\n# Rule10: If the sheep has fewer than 4 friends, then the sheep does not roll the dice for the sea bass.\nrule10() = friends(sheep) < 4 => not rolls_dice(sheep, sea_bass)\n# Rule10 is preferred over Rule1\norder(rule10) > order(rule1) = True\n# Rule10 is preferred over Rule4\norder(rule10) > order(rule4) = True\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n# Rule9 is preferred over Rule8\norder(rule9) > order(rule8) = True\n\n# The current state of the game is as follows\n# The polar bear is named Casper\nname(polar_bear, Casper) = True\n# The sea bass is named Lola, and does not respect the rabbit\nname(sea_bass, Lola) = True\nrespect(sea_bass, rabbit) = False\n# The sheep has 8 friends, has some kale, and lost her keys\nfriends(sheep) = 8\nhas(sheep, kale) = True\nhas(sheep, keys) = False\n# The snail stole a bike from the store.\ntook(snail, bike, store) = True\n\n# Based on the game state and the rules and preferences, does the sea bass show all her cards to the dog?\nquestion = show_cards(sea_bass, all, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not proceed to the spot that is right after the spot of the panther, then it eats the food that belongs to the caterpillar\nRule2: If the eagle has a card and the color of the card is one of the rainbow colors, then it does not proceed to the spot right after the panther.\n\nThe current state of the game is as follows\nThe eagle has a card\nThe color of the card is green\n\nBased on the game state and the rules and preferences, does the eagle eat the food of the caterpillar?\nQuestion: Does the eagle eat the food of the caterpillar?",
        "idx": 303,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not proceed to the spot that is right after the spot of the panther, then it eats the food that belongs to the caterpillar\nrule1(something) = not proceed(something, spot_right_after(panther)) => eat_food(something, food_of(caterpillar))\n# Rule2: Regarding the eagle, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not proceed to the spot right after the panther.\nrule2() = has(eagle, card) and color(card) in rainbow_colors => not proceed(eagle, spot_right_after(panther))\n\n# The current state of the game is as follows\n# The eagle has a card that is green in color.\nhas(eagle, card) = True\ncolor(card, green) = True\n\n# Based on the game state and the rules and preferences, does the eagle eat the food of the caterpillar?\nquestion = eat_food(eagle, food_of(caterpillar))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the oscar has something to drink, then it does not roll the dice for the goldfish\nRule2: If the first letter of the name of the oscar is the same as the first letter of the name of the aardvark, then it rolls the dice for the carp\nRule3: If the oscar has a card with a primary color, then it rolls the dice for the carp\nRule4: If the ferret does not burn the warehouse of the oscar, then it does not steal five points from the kudu\nRule5: If the oscar created a time machine, then it does not roll the dice for the carp\nRule6: If something learns the basics of resource management from the elephant, then it rolls the dice for the goldfish, too\nRule7: If something rolls the dice for the carp, then it does not roll the dice for the doctorfish\nRule8: If the oscar has fewer than nine friends, then it steals five points from the kudu.\n\nRule5 is preferred over Rule2\nRule5 is preferred over Rule3\nRule6 is preferred over Rule1\nRule8 is preferred over Rule4\n\nThe current state of the game is as follows\nThe name of the aardvark is Buddy\nThe oscar has a blue card and a hot chocolate\nThe name of the oscar is Tessa\nThe ferret did not burn the warehouse of the oscar.\n\nBased on the game state and the rules and preferences, does the oscar roll the dice for the doctorfish?\nQuestion: Does the oscar roll the dice for the doctorfish?",
        "idx": 304,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the oscar has something to drink, then the oscar does not roll the dice for the goldfish\nrule1() = has(oscar, drink) => not roll_dice(oscar, goldfish)\n# Rule2: If the oscar has a name whose first letter is the same as the first letter of the aardvark's name, then the oscar rolls the dice for the carp\nrule2() = first_letter_of(name(oscar)) == first_letter_of(name(aardvark)) => roll_dice(oscar, carp)\n# Rule3: If the oscar has a card with a primary color, then the oscar rolls the dice for the carp\nrule3() = has(oscar, card) and color(card) in primary_colors => roll_dice(oscar, carp)\n# Rule4: If the ferret does not burn the warehouse that is in possession of the oscar, then the oscar does not steal five points from the kudu\nrule4() = not burn(ferret, warehouse, oscar) => not steal_points(oscar, 5, kudu)\n# Rule5: If the oscar created a time machine, then the oscar does not roll the dice for the carp\nrule5() = created(oscar, time_machine) => not roll_dice(oscar, carp)\n# Rule6: If something learns the basics of resource management from the elephant, then it rolls the dice for the goldfish, too\nrule6(something) = learn(something, basics_of_resource_management, elephant) => roll_dice(something, goldfish)\n# Rule7: If you are positive that you saw one of the animals rolls the dice for the carp, you can be certain that it will not roll the dice for the doctorfish\nrule7(something) = roll_dice(something, carp) => not roll_dice(something, doctorfish)\n# Rule8: Regarding the oscar, if it has fewer than nine friends, then we can conclude that it steals five points from the kudu.\nrule8() = friends(oscar) < 9 => steal_points(oscar, 5, kudu)\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n# Rule8 is preferred over Rule4\norder(rule8) > order(rule4) = True\n\n# The current state of the game is as follows\n# The aardvark is named Buddy\nname(aardvark, Buddy) = True\n# The oscar has a card that is blue in color, has a hot chocolate, and is named Tessa\nhas(oscar, card) = True\ncolor(card, blue) = True\nhas(oscar, hot_chocolate) = True\nname(oscar, Tessa) = True\n# The ferret does not burn the warehouse of the oscar.\nburn(ferret, warehouse, oscar) = False\n\n# Based on the game state and the rules and preferences, does the oscar roll the dice for the doctorfish?\nquestion = roll_dice(oscar, doctorfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the zander has fewer than eight friends, then it does not give a magnifier to the cricket\nRule2: If the canary steals five of the points of the cricket and the zander gives a magnifier to the cricket, then the cricket respects the cat\nRule3: If the canary has a name whose first letter is the same as the first letter of the pig's name, then the canary steals five of the points of the cricket\nRule4: If the canary has fewer than 7 friends, then the canary steals five of the points of the cricket\nRule5: If something respects the cheetah, then the cricket does not respect the cat\nRule6: If something does not wink at the oscar, then it gives a magnifying glass to the cricket.\n\nRule1 is preferred over Rule6\nRule5 is preferred over Rule2\n\nThe current state of the game is as follows\nThe canary has 2 playful friends and 3 non-playful friends\nThe name of the canary is Pashmak\nThe name of the pig is Paco\nThe zander does not knock down the fortress of the oscar.\n\nBased on the game state and the rules and preferences, does the cricket respect the cat?\nQuestion: Does the cricket respect the cat?",
        "idx": 305,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the zander has fewer than eight friends, then the zander does not give a magnifier to the cricket\nrule1() = friends(zander) < 8 => not give(zander, magnifier, cricket)\n# Rule2: If the canary steals five of the points of the cricket and the zander gives a magnifier to the cricket, then the cricket respects the cat\nrule2() = steal(canary, 5, points, cricket) & give(zander, magnifier, cricket) => respect(cricket, cat)\n# Rule3: If the canary has a name whose first letter is the same as the first letter of the pig's name, then the canary steals five of the points of the cricket\nrule3() = first_letter_of(name(canary)) == first_letter_of(name(pig)) => steal(canary, 5, points, cricket)\n# Rule4: If the canary has fewer than 7 friends, then the canary steals five of the points of the cricket\nrule4() = friends(canary) < 7 => steal(canary, 5, points, cricket)\n# Rule5: If at least one animal respects the cheetah, then the cricket does not respect the cat\nrule5(something) = respect(something, cheetah) => not respect(cricket, cat)\n# Rule6: If you are positive that one of the animals does not wink at the oscar, you can be certain that it will give a magnifying glass to the cricket without a doubt.\nrule6(something) = not wink(something, oscar) => give(something, magnifying_glass, cricket)\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n\n# The current state of the game is as follows\n# The canary has 2 friends that are playful and 3 friends that are not\nplayful_friends(canary) = 2\nnon_playful_friends(canary) = 3\n# The canary is named Pashmak\nname(canary, Pashmak) = True\n# The pig is named Paco\nname(pig, Paco) = True\n# The zander does not knock down the fortress of the oscar.\nknock_down(zander, fortress, oscar) = False\n\n# Based on the game state and the rules and preferences, does the cricket respect the cat?\nquestion = respect(cricket, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job to the pig, then it eats the food of the amberjack\nRule2: If something does not know the defensive plans of the lion and does not become an enemy of the squid, then it offers a job to the pig.\n\nThe current state of the game is as follows\nThe jellyfish does not become an enemy of the squid, and does not know the defensive plans of the lion.\n\nBased on the game state and the rules and preferences, does the jellyfish eat the food of the amberjack?\nQuestion: Does the jellyfish eat the food of the amberjack?",
        "idx": 306,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals offers a job to the pig, you can be certain that it will also eat the food of the amberjack\nrule1(something) = offer_job_position(something, pig) => eat_food(something, food_of(amberjack))\n# Rule2: If you see that something does not know the defensive plans of the lion and also does not become an enemy of the squid, what can you certainly conclude? You can conclude that it also offers a job to the pig.\nrule2(something) = not know(something, defensive_plans, lion) & not become_enemy(something, squid) => offer_job_position(something, pig)\n\n# The current state of the game is as follows\n# The jellyfish does not become an enemy of the squid, and does not know the defensive plans of the lion.\nnot become_enemy(jellyfish, squid) = True\nnot know(jellyfish, defensive_plans, lion) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish eat the food of the amberjack?\nquestion = eat_food(jellyfish, food_of(amberjack))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something eats the food of the penguin, then the lion does not proceed to the spot that is right after the spot of the eel\nRule2: The phoenix eats the food of the penguin whenever something shows all her cards to the penguin.\n\nThe current state of the game is as follows\nThe dog shows all her cards to the penguin.\n\nBased on the game state and the rules and preferences, does the lion proceed to the spot right after the eel?\nQuestion: Does the lion proceed to the spot right after the eel?",
        "idx": 307,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal eats the food that belongs to the penguin, then the lion does not proceed to the spot that is right after the spot of the eel\nrule1() = eat_food(something, food_of(penguin)) => not proceed(lion, spot_right_after(eel))\n# Rule2: The phoenix eats the food that belongs to the penguin whenever at least one animal shows all her cards to the penguin.\nrule2() = show_all_cards(something, penguin) => eat_food(phoenix, food_of(penguin))\n\n# The current state of the game is as follows\n# The dog shows all her cards to the penguin.\nshow_all_cards(dog, penguin) = True\n\n# Based on the game state and the rules and preferences, does the lion proceed to the spot right after the eel?\nquestion = proceed(lion, spot_right_after(eel))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not burn the warehouse of the donkey, then it proceeds to the spot that is right after the spot of the rabbit without a doubt\nRule2: If something knocks down the fortress of the halibut and learns the basics of resource management from the dog, then it does not burn the warehouse of the donkey\nRule3: The koala does not proceed to the spot right after the rabbit whenever at least one animal removes one of the pieces of the elephant.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe koala knocks down the fortress of the halibut\nThe koala removes from the board one of the pieces of the dog.\n\nBased on the game state and the rules and preferences, does the koala proceed to the spot right after the rabbit?\nQuestion: Does the koala proceed to the spot right after the rabbit?",
        "idx": 308,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not burn the warehouse that is in possession of the donkey, you can be certain that it will proceed to the spot that is right after the spot of the rabbit without a doubt\nrule1(something) = not burn_warehouse(something, donkey) => proceed_to_spot(something, spot_after(rabbit))\n# Rule2: Be careful when something knocks down the fortress that belongs to the halibut and also learns the basics of resource management from the dog because in this case it will surely not burn the warehouse of the donkey (this may or may not be problematic)\nrule2(something) = knocks_down_fortress(something, halibut) & learns_basics_of_resource_management(something, dog) => not burn_warehouse(something, donkey)\n# Rule3: The koala does not proceed to the spot right after the rabbit whenever at least one animal removes one of the pieces of the elephant.\nrule3() = remove_piece(something, elephant) => not proceed_to_spot(koala, spot_after(rabbit))\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The koala knocks down the fortress of the halibut\nknocks_down_fortress(koala, halibut) = True\n# The koala removes from the board one of the pieces of the dog.\nremove_piece(koala, dog) = True\n\n# Based on the game state and the rules and preferences, does the koala proceed to the spot right after the rabbit?\nquestion = proceed_to_spot(koala, spot_after(rabbit))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knocks down the fortress of the zander, then it sings a victory song for the wolverine, too\nRule2: If the lion does not have her keys, then it knocks down the fortress that belongs to the zander\nRule3: If the first letter of the name of the lion is the same as the first letter of the name of the leopard, then the lion knocks down the fortress that belongs to the zander.\n\nThe current state of the game is as follows\nThe name of the leopard is Tessa\nThe lion has a cell phone and lost her keys\nThe name of the lion is Lucy\n\nBased on the game state and the rules and preferences, does the lion sing a victory song for the wolverine?\nQuestion: Does the lion sing a victory song for the wolverine?",
        "idx": 309,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something knocks down the fortress of the zander, then it sings a victory song for the wolverine, too\nrule1(something) = knocks_down(something, fortress, zander) => sings_victory_song(something, wolverine)\n# Rule2: Regarding the lion, if it does not have her keys, then we can conclude that it knocks down the fortress that belongs to the zander\nrule2() = not has(lion, keys) => knocks_down(lion, fortress, zander)\n# Rule3: Regarding the lion, if it has a name whose first letter is the same as the first letter of the leopard's name, then we can conclude that it knocks down the fortress that belongs to the zander.\nrule3() = first_letter_of(name(lion)) == first_letter_of(name(leopard)) => knocks_down(lion, fortress, zander)\n\n# The current state of the game is as follows\n# The leopard is named Tessa\nname(leopard, Tessa) = True\n# The lion has a cell phone, and lost her keys\nhas(lion, cell_phone) = True\nhas(lion, keys) = False\n# The lion is named Lucy.\nname(lion, Lucy) = True\n\n# Based on the game state and the rules and preferences, does the lion sing a victory song for the wolverine?\nquestion = sings_victory_song(lion, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something sings a song of victory for the sea bass, then it respects the kiwi, too\nRule2: If the blobfish has a card and the color of the card is one of the rainbow colors, then it does not need support from the zander\nRule3: If the blobfish is a fan of Chris Ronaldo, then it needs the support of the zander\nRule4: If the blobfish has something to carry apples and oranges, then it does not need support from the zander\nRule5: If something respects the kiwi, then it does not knock down the fortress of the baboon\nRule6: If the first letter of the name of the blobfish is the same as the first letter of the name of the puffin, then the blobfish needs the support of the zander\nRule7: If something rolls the dice for the salmon, then it sings a victory song for the sun bear, too.\n\nRule2 is preferred over Rule3\nRule2 is preferred over Rule6\nRule4 is preferred over Rule3\nRule4 is preferred over Rule6\n\nThe current state of the game is as follows\nThe blobfish has a violin\nThe blobfish hates Chris Ronaldo\nThe blobfish rolls the dice for the salmon\nThe name of the blobfish is Meadow\nThe blobfish sings a victory song for the sea bass\nThe name of the puffin is Max.\n\nBased on the game state and the rules and preferences, does the blobfish knock down the fortress of the baboon?\nQuestion: Does the blobfish knock down the fortress of the baboon?",
        "idx": 310,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something sings a song of victory for the sea bass, then it respects the kiwi, too\nrule1(something) = sings(something, victory_song, sea_bass) => respects(something, kiwi)\n# Rule2: Regarding the blobfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not need support from the zander\nrule2() = has(blobfish, card) and color(card) in rainbow_colors => not need_support(blobfish, zander)\n# Rule3: Regarding the blobfish, if it is a fan of Chris Ronaldo, then we can conclude that it needs the support of the zander\nrule3() = fan_of(blobfish, Chris_Ronaldo) => need_support(blobfish, zander)\n# Rule4: If the blobfish has something to carry apples and oranges, then the blobfish does not need support from the zander\nrule4() = has(blobfish, something_to_carry_apples_and_oranges) => not need_support(blobfish, zander)\n# Rule5: If something respects the kiwi, then it does not knock down the fortress of the baboon\nrule5(something) = respects(something, kiwi) => not knock_down(something, fortress, baboon)\n# Rule6: Regarding the blobfish, if it has a name whose first letter is the same as the first letter of the puffin's name, then we can conclude that it needs the support of the zander\nrule6() = first_letter_of(name(blobfish)) == first_letter_of(name(puffin)) => need_support(blobfish, zander)\n# Rule7: If something rolls the dice for the salmon, then it sings a victory song for the sun bear, too.\nrule7(something) = rolls_dice(something, salmon) => sings(something, victory_song, sun_bear)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n\n# The current state of the game is as follows\n# The blobfish has a violin, hates Chris Ronaldo, and rolls the dice for the salmon\nhas(blobfish, violin) = True\nhates(blobfish, Chris_Ronaldo) = True\nrolls_dice(blobfish, salmon) = True\n# The blobfish is named Meadow\nname(blobfish, Meadow) = True\n# The blobfish sings a victory song for the sea bass\nsings(blobfish, victory_song, sea_bass) = True\n# The puffin is named Max.\nname(puffin, Max) = True\n\n# Based on the game state and the rules and preferences, does the blobfish knock down the fortress of the baboon?\nquestion = knock_down(blobfish, fortress, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something shows all its cards to the swordfish, then it holds an equal number of points as the squirrel\nRule2: If something gives a magnifying glass to the cow, then the moose becomes an enemy of the baboon\nRule3: If the moose has a name whose first letter is the same as the first letter of the kudu's name, then the moose removes one of the pieces of the caterpillar\nRule4: If the moose has something to drink, then it does not remove one of the pieces of the caterpillar\nRule5: If something becomes an enemy of the baboon and holds the same number of points as the squirrel, then it gives a magnifying glass to the elephant\nRule6: If the moose does not have her keys, then it removes one of the pieces of the caterpillar\nRule7: If the moose has a card whose color starts with the letter \"w\", then it does not become an enemy of the baboon.\n\nRule4 is preferred over Rule3\nRule4 is preferred over Rule6\nRule7 is preferred over Rule2\n\nThe current state of the game is as follows\nThe name of the kudu is Lucy\nThe moose has a blade, is holding her keys, and shows all her cards to the swordfish\nThe name of the moose is Lola\nThe pig steals five points from the cow.\n\nBased on the game state and the rules and preferences, does the moose give a magnifier to the elephant?\nQuestion: Does the moose give a magnifying glass to the elephant?",
        "idx": 311,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals shows her cards (all of them) to the swordfish, you can be certain that it will also hold an equal number of points as the squirrel\nrule1(something) = show_cards(something, all_cards, swordfish) => points(something) == points(squirrel)\n# Rule2: If at least one animal gives a magnifying glass to the cow, then the moose becomes an enemy of the baboon\nrule2() = give(something, magnifying_glass, cow) => become_enemy(moose, baboon)\n# Rule3: If the moose has a name whose first letter is the same as the first letter of the kudu's name, then the moose removes one of the pieces of the caterpillar\nrule3() = first_letter_of(name(moose)) == first_letter_of(name(kudu)) => remove_piece(moose, caterpillar)\n# Rule4: Regarding the moose, if it has something to drink, then we can conclude that it does not remove from the board one of the pieces of the caterpillar\nrule4() = has(moose, drink) => not remove_piece(moose, caterpillar)\n# Rule5: Be careful when something becomes an actual enemy of the baboon and also holds the same number of points as the squirrel because in this case it will surely give a magnifying glass to the elephant (this may or may not be problematic)\nrule5(something) = become_enemy(something, baboon) & points(something) == points(squirrel) => give(something, magnifying_glass, elephant)\n# Rule6: Regarding the moose, if it does not have her keys, then we can conclude that it removes one of the pieces of the caterpillar\nrule6() = not has(moose, keys) => remove_piece(moose, caterpillar)\n# Rule7: If the moose has a card whose color starts with the letter \"w\", then the moose does not become an enemy of the baboon.\nrule7() = has(moose, card) and starts_with(color(card), \"w\") => not become_enemy(moose, baboon)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n\n# The current state of the game is as follows\n# The kudu is named Lucy\nname(kudu, Lucy) = True\n# The moose has a blade, is holding her keys, and shows all her cards to the swordfish\nhas(moose, blade) = True\nholds(moose, keys) = True\nshow_cards(moose, all_cards, swordfish) = True\n# The moose is named Lola\nname(moose, Lola) = True\n# The pig steals five points from the cow.\nsteal(pig, 5_points, cow) = True\n\n# Based on the game state and the rules and preferences, does the moose give a magnifier to the elephant?\nquestion = give(moose, magnifying_glass, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the spider is the same as the first letter of the name of the tiger, then the spider raises a flag of peace for the bat\nRule2: If the spider has a card with a primary color, then it does not raise a flag of peace for the bat\nRule3: If the spider has an abundance of food, then it raises a flag of peace for the bat\nRule4: If something raises a flag of peace for the bat, then it knows the defense plan of the kiwi.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe spider has a red card\nThe spider struggles to find food\nThe name of the spider is Meadow\nThe name of the tiger is Mojo.\n\nBased on the game state and the rules and preferences, does the spider know the defensive plans of the kiwi?\nQuestion: Does the spider know the defensive plans of the kiwi?",
        "idx": 312,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the spider, if it has a name whose first letter is the same as the first letter of the tiger's name, then we can conclude that it raises a flag of peace for the bat\nrule1() = first_letter_of(name(spider)) == first_letter_of(name(tiger)) => raise_flag_of_peace(spider, bat)\n# Rule2: Regarding the spider, if it has a card with a primary color, then we can conclude that it does not raise a flag of peace for the bat\nrule2() = has(spider, card) and color(card) in primary_colors => not raise_flag_of_peace(spider, bat)\n# Rule3: If the spider has access to an abundance of food, then the spider raises a flag of peace for the bat\nrule3() = access_to_food(spider) == abundance => raise_flag_of_peace(spider, bat)\n# Rule4: If you are positive that you saw one of the animals raises a flag of peace for the bat, you can be certain that it will also know the defense plan of the kiwi.\nrule4(something) = raise_flag_of_peace(something, bat) => know(something, defense_plans, kiwi)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The spider has a card that is red in color, and struggles to find food\nhas(spider, card) = True\ncolor(card, red) = True\nstruggles_to_find_food(spider) = True\n# The spider is named Meadow\nname(spider, Meadow) = True\n# The tiger is named Mojo.\nname(tiger, Mojo) = True\n\n# Based on the game state and the rules and preferences, does the spider know the defensive plans of the kiwi?\nquestion = know(spider, defense_plans, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something eats the food of the polar bear, then the moose does not hold the same number of points as the salmon\nRule2: The donkey eats the food of the polar bear whenever something prepares armor for the kiwi.\n\nThe current state of the game is as follows\nThe carp prepares armor for the kiwi.\n\nBased on the game state and the rules and preferences, does the moose hold the same number of points as the salmon?\nQuestion: Does the moose hold the same number of points as the salmon?",
        "idx": 313,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal eats the food of the polar bear, then the moose does not hold the same number of points as the salmon\nrule1() = eat_food(something, food_of(polar_bear)) => points(moose) != points(salmon)\n# Rule2: The donkey eats the food of the polar bear whenever at least one animal prepares armor for the kiwi.\nrule2() = prepare_armor(something, kiwi) => eat_food(donkey, food_of(polar_bear))\n\n# The current state of the game is as follows\n# The carp prepares armor for the kiwi.\nprepare_armor(carp, kiwi) = True\n\n# Based on the game state and the rules and preferences, does the moose hold the same number of points as the salmon?\nquestion = points(moose) == points(salmon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something attacks the green fields of the cat, then the panther owes money to the carp\nRule2: If the amberjack owns a luxury aircraft, then it knows the defensive plans of the cat.\n\nThe current state of the game is as follows\nThe amberjack owns a luxury aircraft.\n\nBased on the game state and the rules and preferences, does the panther owe money to the carp?\nQuestion: Does the panther owe money to the carp?",
        "idx": 314,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal attacks the green fields of the cat, then the panther owes $$$ to the carp\nrule1() = attacks(something, green_fields, cat) => owe(panther, money, carp)\n# Rule2: Regarding the amberjack, if it owns a luxury aircraft, then we can conclude that it knows the defensive plans of the cat.\nrule2() = owns(amberjack, luxury_aircraft) => knows(amberjack, defensive_plans, cat)\n\n# The current state of the game is as follows\n# The amberjack purchased a luxury aircraft.\nowns(amberjack, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the panther owe money to the carp?\nquestion = owe(panther, money, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squid has more than 10 friends, then it rolls the dice for the cat\nRule2: If the squid rolls the dice for the cat and the puffin does not steal five points from the cat, then the cat raises a peace flag for the catfish\nRule3: If the first letter of the name of the puffin is the same as the first letter of the name of the lion, then the puffin does not steal five points from the cat.\n\nThe current state of the game is as follows\nThe name of the lion is Meadow\nThe name of the puffin is Mojo\nThe squid has 16 friends.\n\nBased on the game state and the rules and preferences, does the cat raise a peace flag for the catfish?\nQuestion: Does the cat raise a peace flag for the catfish?",
        "idx": 315,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the squid, if it has more than 10 friends, then we can conclude that it rolls the dice for the cat\nrule1() = friends(squid) > 10 => roll_dice(squid, cat)\n# Rule2: If the squid rolls the dice for the cat and the puffin does not steal five points from the cat, then, inevitably, the cat raises a peace flag for the catfish\nrule2() = roll_dice(squid, cat) & not steal_points(puffin, 5, cat) => raise_flag_of_peace(cat, catfish)\n# Rule3: Regarding the puffin, if it has a name whose first letter is the same as the first letter of the lion's name, then we can conclude that it does not steal five points from the cat.\nrule3() = first_letter_of(name(puffin)) == first_letter_of(name(lion)) => not steal_points(puffin, 5, cat)\n\n# The current state of the game is as follows\n# The lion is named Meadow\nname(lion, Meadow) = True\n# The puffin is named Mojo\nname(puffin, Mojo) = True\n# The squid has sixteen friends.\nfriends(squid) = 16\n\n# Based on the game state and the rules and preferences, does the cat raise a peace flag for the catfish?\nquestion = raise_flag_of_peace(cat, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal raises a peace flag for the ferret, then the gecko does not remove one of the pieces of the cat\nRule2: If an animal does not raise a peace flag for the cheetah, then it steals five points from the cat\nRule3: If the grasshopper does not learn elementary resource management from the gecko, then the gecko removes one of the pieces of the cat\nRule4: If the swordfish does not respect the cat, then the cat does not prepare armor for the panther\nRule5: If something does not hold an equal number of points as the tiger, then it does not respect the cat\nRule6: If the gecko removes one of the pieces of the cat and the koala steals five points from the cat, then the cat prepares armor for the panther.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule6\n\nThe current state of the game is as follows\nThe grasshopper does not learn the basics of resource management from the gecko\nThe koala does not raise a peace flag for the cheetah\nThe swordfish does not hold the same number of points as the tiger.\n\nBased on the game state and the rules and preferences, does the cat prepare armor for the panther?\nQuestion: Does the cat prepare armor for the panther?",
        "idx": 316,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The gecko does not remove one of the pieces of the cat whenever at least one animal raises a peace flag for the ferret\nrule1() = raise_flag_for(ferret) => not remove_piece(gecko, cat)\n# Rule2: If you are positive that one of the animals does not raise a peace flag for the cheetah, you can be certain that it will steal five points from the cat without a doubt\nrule2(something) = not raise_flag_for(cheetah) => steal_points(something, 5, cat)\n# Rule3: If the grasshopper does not learn elementary resource management from the gecko, then the gecko removes one of the pieces of the cat\nrule3() = not learn(grasshopper, elementary_resource_management, gecko) => remove_piece(gecko, cat)\n# Rule4: If the swordfish does not respect the cat, then the cat does not prepare armor for the panther\nrule4() = not respect(swordfish, cat) => not prepare_armor(cat, panther)\n# Rule5: If something does not hold an equal number of points as the tiger, then it does not respect the cat\nrule5(something) = points(something) != points(tiger) => not respect(something, cat)\n# Rule6: If the gecko removes from the board one of the pieces of the cat and the koala steals five of the points of the cat, then the cat prepares armor for the panther.\nrule6() = remove_piece(gecko, cat) & steal_points(koala, 5, cat) => prepare_armor(cat, panther)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n\n# The current state of the game is as follows\n# The grasshopper does not learn the basics of resource management from the gecko\nnot learn(grasshopper, elementary_resource_management, gecko) = True\n# The koala does not raise a peace flag for the cheetah\nnot raise_flag_for(koala, cheetah) = True\n# The swordfish does not hold the same number of points as the tiger.\npoints(swordfish) != points(tiger) = True\n\n# Based on the game state and the rules and preferences, does the cat prepare armor for the panther?\nquestion = prepare_armor(cat, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the amberjack winks at the halibut, then the halibut eats the food that belongs to the swordfish\nRule2: If the halibut eats the food that belongs to the swordfish, then the swordfish respects the grizzly bear\nRule3: If something shows all of its cards to the hippopotamus, then it will not eat the food that belongs to the swordfish.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe amberjack does not wink at the halibut.\n\nBased on the game state and the rules and preferences, does the swordfish respect the grizzly bear?\nQuestion: Does the swordfish respect the grizzly bear?",
        "idx": 317,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the amberjack winks at the halibut, then the halibut eats the food that belongs to the swordfish\nrule1() = wink(amberjack, halibut) => eat_food(halibut, food_of(swordfish))\n# Rule2: If the halibut eats the food that belongs to the swordfish, then the swordfish respects the grizzly bear\nrule2() = eat_food(halibut, food_of(swordfish)) => respect(swordfish, grizzly_bear)\n# Rule3: If you are positive that you saw one of the animals shows her cards (all of them) to the hippopotamus, you can be certain that it will not eat the food that belongs to the swordfish.\nrule3(something) = show_cards(something, all_cards) to hippopotamus => not eat_food(something, food_of(swordfish))\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The amberjack does not wink at the halibut.\nwink(amberjack, halibut) = False\n\n# Based on the game state and the rules and preferences, does the swordfish respect the grizzly bear?\nquestion = respect(swordfish, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo has fewer than 18 friends, then it knocks down the fortress of the catfish\nRule2: If the snail does not owe money to the buffalo and the donkey burns the warehouse of the buffalo, then the buffalo will not proceed to the spot right after the canary\nRule3: If the buffalo has a card whose color starts with the letter \"r\", then it does not knock down the fortress of the catfish\nRule4: If something knocks down the fortress of the catfish, then it does not attack the green fields whose owner is the sun bear\nRule5: If something does not proceed to the spot right after the canary, then it attacks the green fields whose owner is the sun bear.\n\nRule1 is preferred over Rule3\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe buffalo has 8 friends\nThe buffalo has a card that is red in color\nThe donkey burns the warehouse of the buffalo\nThe snail does not owe money to the buffalo.\n\nBased on the game state and the rules and preferences, does the buffalo attack the green fields whose owner is the sun bear?\nQuestion: Does the buffalo attack the green fields whose owner is the sun bear?",
        "idx": 318,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the buffalo has fewer than 18 friends, then the buffalo knocks down the fortress of the catfish\nrule1() = friends(buffalo) < 18 => knock_down(buffalo, fortress, catfish)\n# Rule2: If the snail does not owe $$$ to the buffalo however the donkey burns the warehouse that is in possession of the buffalo, then the buffalo will not proceed to the spot right after the canary\nrule2() = not owe(snail, money, buffalo) & burn(donkey, warehouse, buffalo) => not proceed(buffalo, spot_right_after, canary)\n# Rule3: If the buffalo has a card whose color starts with the letter \"r\", then the buffalo does not knock down the fortress of the catfish\nrule3() = has(buffalo, card) & starts_with(color(card), \"r\") => not knock_down(buffalo, fortress, catfish)\n# Rule4: If something knocks down the fortress of the catfish, then it does not attack the green fields whose owner is the sun bear\nrule4() = knock_down(something, fortress, catfish) => not attack(something, green_fields, owner(sun_bear))\n# Rule5: If something does not proceed to the spot right after the canary, then it attacks the green fields whose owner is the sun bear.\nrule5() = not proceed(something, spot_right_after, canary) => attack(something, green_fields, owner(sun_bear))\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The buffalo has 8 friends, and has a card that is red in color\nfriends(buffalo) = 8\nhas(buffalo, card) = True\ncolor(card, red) = True\n# The donkey burns the warehouse of the buffalo\nburn(donkey, warehouse, buffalo) = True\n# The snail does not owe money to the buffalo.\nowe(snail, money, buffalo) = False\n\n# Based on the game state and the rules and preferences, does the buffalo attack the green fields whose owner is the sun bear?\nquestion = attack(buffalo, green_fields, owner(sun_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something learns elementary resource management from the eagle and also knows the defensive plans of the squid, then it will surely respect the koala.\nRule2: If the gecko has a device to connect to the internet, then it becomes an enemy of the salmon\nRule3: If the gecko becomes an actual enemy of the salmon, then the salmon is not going to respect the koala\nRule4: If the first letter of the name of the salmon is the same as the first letter of the name of the wolverine, then the salmon does not learn the basics of resource management from the eagle\nRule5: If the salmon owns a luxury aircraft, then it learns the basics of resource management from the eagle\nRule6: If the salmon has a card with a primary color, then it learns elementary resource management from the eagle.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule5\nRule4 is preferred over Rule6\n\nThe current state of the game is as follows\nThe gecko has a tablet\nThe salmon has a yellow card\nThe salmon owns a luxury aircraft\nThe name of the wolverine is Meadow.\n\nBased on the game state and the rules and preferences, does the salmon respect the koala?\nQuestion: Does the salmon respect the koala?",
        "idx": 319,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something learns elementary resource management from the eagle and also knows the defensive plans of the squid because in this case it will surely respect the koala (this may or may not be problematic)\nrule1(something) = learns(something, elementary_resource_management, eagle) & knows(something, defensive_plans, squid) => respect(something, koala)\n# Rule2: Regarding the gecko, if it has a device to connect to the internet, then we can conclude that it becomes an enemy of the salmon\nrule2() = has(gecko, device_to_connect_to_internet) => become_enemy(gecko, salmon)\n# Rule3: If the gecko becomes an actual enemy of the salmon, then the salmon is not going to respect the koala\nrule3() = become_enemy(gecko, salmon) => not respect(salmon, koala)\n# Rule4: Regarding the salmon, if it has a name whose first letter is the same as the first letter of the wolverine's name, then we can conclude that it does not learn the basics of resource management from the eagle\nrule4() = first_letter_of(name(salmon)) == first_letter_of(name(wolverine)) => not learns(salmon, basics_of_resource_management, eagle)\n# Rule5: Regarding the salmon, if it owns a luxury aircraft, then we can conclude that it learns the basics of resource management from the eagle\nrule5() = owns(salmon, luxury_aircraft) => learns(salmon, basics_of_resource_management, eagle)\n# Rule6: Regarding the salmon, if it has a card with a primary color, then we can conclude that it learns elementary resource management from the eagle.\nrule6() = has(salmon, card) and color(card) in primary_colors => learns(salmon, elementary_resource_management, eagle)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n\n# The current state of the game is as follows\n# The gecko has a tablet\nhas(gecko, tablet) = True\n# The salmon has a card that is yellow in color\nhas(salmon, card) = True\ncolor(card, yellow) = True\n# The salmon purchased a luxury aircraft\nowns(salmon, luxury_aircraft) = True\n# The wolverine is named Meadow.\nname(wolverine, Meadow) = True\n\n# Based on the game state and the rules and preferences, does the salmon respect the koala?\nquestion = respect(salmon, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not steal five points from the octopus but respects the octopus, then it becomes an enemy of the canary\nRule2: If the baboon has fewer than 14 friends, then it does not become an enemy of the canary\nRule3: If the cat does not eat the food of the canary and the baboon does not become an actual enemy of the canary, then the canary needs the support of the cheetah\nRule4: If the cat has a musical instrument, then it eats the food that belongs to the canary\nRule5: If the squirrel offers a job position to the cat, then the cat does not eat the food that belongs to the canary.\n\nRule1 is preferred over Rule2\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe baboon has 6 friends\nThe baboon respects the octopus\nThe squirrel offers a job to the cat\nThe baboon does not steal five points from the octopus.\n\nBased on the game state and the rules and preferences, does the canary need support from the cheetah?\nQuestion: Does the canary need support from the cheetah?",
        "idx": 320,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something does not steal five of the points of the octopus but respects the octopus because in this case it will, surely, become an enemy of the canary (this may or may not be problematic)\nrule1(something) = not steal_points(something, 5, octopus) & respects(something, octopus) => become_enemy(something, canary)\n# Rule2: If the baboon has fewer than 14 friends, then the baboon does not become an enemy of the canary\nrule2() = friends(baboon) < 14 => not become_enemy(baboon, canary)\n# Rule3: For the canary, if the belief is that the cat does not eat the food of the canary and the baboon does not become an actual enemy of the canary, then you can add \"the canary needs the support of the cheetah\" to your conclusions\nrule3() = not eat_food(cat, food_of(canary)) & not become_enemy(baboon, canary) => add_conclusion(canary, \"the canary needs the support of the cheetah\")\n# Rule4: If the cat has a musical instrument, then the cat eats the food that belongs to the canary\nrule4() = has(cat, musical_instrument) => eat_food(cat, food_of(canary))\n# Rule5: The cat does not eat the food that belongs to the canary, in the case where the squirrel offers a job position to the cat.\nrule5() = offer_job_position(squirrel, cat) => not eat_food(cat, food_of(canary))\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The baboon has six friends\nfriends(baboon) = 6\n# The baboon respects the octopus\nrespects(baboon, octopus) = True\n# The squirrel offers a job to the cat\noffer_job_position(squirrel, cat) = True\n# The baboon does not steal five points from the octopus.\nsteal_points(baboon, 5, octopus) = False\n\n# Based on the game state and the rules and preferences, does the canary need support from the cheetah?\nquestion = \"the canary needs the support of the cheetah\" in conclusions(canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the spider but does not need the support of the moose, then it sings a song of victory for the hummingbird\nRule2: If the black bear has a leafy green vegetable, then it does not need the support of the moose\nRule3: If the first letter of the name of the black bear is the same as the first letter of the name of the ferret, then the black bear does not roll the dice for the spider\nRule4: If the grizzly bear knocks down the fortress of the black bear and the wolverine learns the basics of resource management from the black bear, then the black bear rolls the dice for the spider\nRule5: If the black bear owns a luxury aircraft, then it does not roll the dice for the spider.\n\nRule3 is preferred over Rule4\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe black bear dreamed of a luxury aircraft\nThe black bear has kale\nThe name of the black bear is Casper\nThe grizzly bear knocks down the fortress of the black bear\nThe wolverine learns the basics of resource management from the black bear\n\nBased on the game state and the rules and preferences, does the black bear sing a victory song for the hummingbird?\nQuestion: Does the black bear sing a victory song for the hummingbird?",
        "idx": 321,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something rolls the dice for the spider but does not need the support of the moose because in this case it will, surely, sing a song of victory for the hummingbird (this may or may not be problematic)\nrule1(something) = rolls_dice(something, spider) & not need_support(something, moose) => sing_victory_song(something, hummingbird)\n# Rule2: If the black bear has a leafy green vegetable, then the black bear does not need the support of the moose\nrule2() = has(black_bear, leafy_green_vegetable) => not need_support(black_bear, moose)\n# Rule3: Regarding the black bear, if it has a name whose first letter is the same as the first letter of the ferret's name, then we can conclude that it does not roll the dice for the spider\nrule3() = first_letter_of(name(black_bear)) == first_letter_of(name(ferret)) => not rolls_dice(black_bear, spider)\n# Rule4: If the grizzly bear knocks down the fortress of the black bear and the wolverine learns the basics of resource management from the black bear, then the black bear rolls the dice for the spider\nrule4() = knocks_down(grizzly_bear, fortress, black_bear) & learns(wolverine, basics_of_resource_management, black_bear) => rolls_dice(black_bear, spider)\n# Rule5: Regarding the black bear, if it owns a luxury aircraft, then we can conclude that it does not roll the dice for the spider.\nrule5() = owns(black_bear, luxury_aircraft) => not rolls_dice(black_bear, spider)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The black bear dreamed of a luxury aircraft\ndream(black_bear, luxury_aircraft) = True\n# The black bear has some kale\nhas(black_bear, kale) = True\n# The black bear is named Casper\nname(black_bear, Casper) = True\n# The grizzly bear knocks down the fortress of the black bear\nknocks_down(grizzly_bear, fortress, black_bear) = True\n# The wolverine learns the basics of resource management from the black bear\nlearns(wolverine, basics_of_resource_management, black_bear) = True\n\n# Based on the game state and the rules and preferences, does the black bear sing a victory song for the hummingbird?\nquestion = sing_victory_song(black_bear, hummingbird)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The wolverine does not raise a flag of peace for the squirrel whenever at least one animal sings a victory song for the pig\nRule2: The wolverine raises a peace flag for the squirrel, in the case where the caterpillar sings a victory song for the wolverine\nRule3: If the raven has a sharp object, then the raven sings a song of victory for the pig.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe raven has a knife.\n\nBased on the game state and the rules and preferences, does the wolverine raise a peace flag for the squirrel?\nQuestion: Does the wolverine raise a peace flag for the squirrel?",
        "idx": 322,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The wolverine does not raise a flag of peace for the squirrel whenever at least one animal sings a victory song for the pig\nrule1() = sings_victory_song(something, pig) => not raise_flag_of_peace(wolverine, squirrel)\n# Rule2: The wolverine unquestionably raises a peace flag for the squirrel, in the case where the caterpillar sings a victory song for the wolverine\nrule2() = sings_victory_song(caterpillar, wolverine) => raise_flag_of_peace(wolverine, squirrel)\n# Rule3: If the raven has a sharp object, then the raven sings a song of victory for the pig.\nrule3() = has(raven, sharp_object) => sings_victory_song(raven, pig)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The raven has a knife.\nhas(raven, knife) = True\n\n# Based on the game state and the rules and preferences, does the wolverine raise a peace flag for the squirrel?\nquestion = raise_flag_of_peace(wolverine, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not roll the dice for the caterpillar, then it knows the defense plan of the zander\nRule2: If the raven has a device to connect to the internet, then it does not roll the dice for the caterpillar\nRule3: If the baboon becomes an enemy of the hippopotamus, then the hippopotamus is not going to sing a song of victory for the raven\nRule4: The raven rolls the dice for the caterpillar if the carp needs the support of the raven\nRule5: If the hippopotamus does not sing a song of victory for the raven and the cricket holds the same number of points as the raven, then the raven will not know the defense plan of the zander.\n\nRule4 is preferred over Rule2\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe baboon becomes an enemy of the hippopotamus\nThe raven has a beer.\n\nBased on the game state and the rules and preferences, does the raven know the defensive plans of the zander?\nQuestion: Does the raven know the defensive plans of the zander?",
        "idx": 323,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not roll the dice for the caterpillar, then it knows the defense plan of the zander\nrule1(something) = not roll_dice(something, caterpillar) => knows(something, defense_plan, zander)\n# Rule2: If the raven has a device to connect to the internet, then the raven does not roll the dice for the caterpillar\nrule2() = has(raven, internet_device) => not roll_dice(raven, caterpillar)\n# Rule3: If the baboon becomes an enemy of the hippopotamus, then the hippopotamus is not going to sing a song of victory for the raven\nrule3() = become_enemy(baboon, hippopotamus) => not sing_song_of_victory(hippopotamus, raven)\n# Rule4: The raven unquestionably rolls the dice for the caterpillar, in the case where the carp needs the support of the raven\nrule4() = needs_support(carp, raven) => roll_dice(raven, caterpillar)\n# Rule5: If the hippopotamus does not sing a song of victory for the raven however the cricket holds the same number of points as the raven, then the raven will not know the defense plan of the zander.\nrule5() = not sing_song_of_victory(hippopotamus, raven) & points(cricket) == points(raven) => not knows(raven, defense_plan, zander)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The baboon becomes an enemy of the hippopotamus\nbecome_enemy(baboon, hippopotamus) = True\n# The raven has a beer.\nhas(raven, beer) = True\n\n# Based on the game state and the rules and preferences, does the raven know the defensive plans of the zander?\nquestion = knows(raven, defense_plan, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The jellyfish knows the defensive plans of the cockroach whenever at least one animal becomes an actual enemy of the whale\nRule2: If something steals five of the points of the meerkat and also sings a victory song for the salmon, then it becomes an enemy of the whale\nRule3: If the points of something are equal to the points of the viperfish, then it does not know the defense plan of the cockroach.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe kudu sings a victory song for the salmon and steals five points from the meerkat.\n\nBased on the game state and the rules and preferences, does the jellyfish know the defensive plans of the cockroach?\nQuestion: Does the jellyfish know the defensive plans of the cockroach?",
        "idx": 324,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The jellyfish knows the defensive plans of the cockroach whenever at least one animal becomes an actual enemy of the whale\nrule1() = become_enemy(something, whale) => knows(jellyfish, defensive_plans, cockroach)\n# Rule2: Be careful when something steals five of the points of the meerkat and also sings a victory song for the salmon because in this case it will surely become an enemy of the whale (this may or may not be problematic)\nrule2() = steal_points(something, 5, meerkat) & sing_victory_song(something, salmon) => become_enemy(something, whale)\n# Rule3: If you are positive that you saw one of the animals holds the same number of points as the viperfish, you can be certain that it will not know the defense plan of the cockroach.\nrule3(something) = points(something) == points(viperfish) => not knows(something, defensive_plans, cockroach)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The kudu sings a victory song for the salmon, and steals five points from the meerkat.\nsing_victory_song(kudu, salmon) = True\nsteal_points(kudu, 5, meerkat) = True\n\n# Based on the game state and the rules and preferences, does the jellyfish know the defensive plans of the cockroach?\nquestion = knows(jellyfish, defensive_plans, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not proceed to the spot that is right after the spot of the tiger and also does not hold an equal number of points as the polar bear, then it does not learn elementary resource management from the caterpillar\nRule2: If the catfish has a card with a primary color, then it learns the basics of resource management from the caterpillar\nRule3: If something raises a peace flag for the dog, then it does not know the defensive plans of the aardvark\nRule4: The baboon knows the defensive plans of the aardvark whenever at least one animal attacks the green fields of the grasshopper\nRule5: The caterpillar will not attack the green fields whose owner is the kiwi, in the case where the catfish does not learn elementary resource management from the caterpillar.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe catfish has 9 friends\nThe catfish has a card that is green in color\nThe catfish does not proceed to the spot right after the tiger\nThe sun bear attacks the green fields whose owner is the grasshopper\nThe catfish does not hold the same number of points as the polar bear.\n\nBased on the game state and the rules and preferences, does the caterpillar attack the green fields whose owner is the kiwi?\nQuestion: Does the caterpillar attack the green fields whose owner is the kiwi?",
        "idx": 325,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not proceed to the spot that is right after the spot of the tiger and also does not hold an equal number of points as the polar bear, what can you certainly conclude? You can conclude that it also does not learn elementary resource management from the caterpillar\nrule1(something) = not proceed(something, spot_right_after(tiger)) & not equal_points(something, polar_bear) => not learn(something, elementary_resource_management, caterpillar)\n# Rule2: Regarding the catfish, if it has a card with a primary color, then we can conclude that it learns the basics of resource management from the caterpillar\nrule2() = has(catfish, card) & primary_color(card) => learn(catfish, basics_of_resource_management, caterpillar)\n# Rule3: If something raises a peace flag for the dog, then it does not know the defensive plans of the aardvark\nrule3(something) = raise_flag(something, peace, dog) => not know(something, defensive_plans, aardvark)\n# Rule4: The baboon knows the defensive plans of the aardvark whenever at least one animal attacks the green fields of the grasshopper\nrule4() = attack(something, green_fields, owner(grasshopper)) => know(baboon, defensive_plans, aardvark)\n# Rule5: The caterpillar will not attack the green fields whose owner is the kiwi, in the case where the catfish does not learn elementary resource management from the caterpillar.\nrule5() = not learn(catfish, elementary_resource_management, caterpillar) => not attack(caterpillar, green_fields, owner(kiwi))\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The catfish has 9 friends, has a card that is green in color, and does not proceed to the spot right after the tiger\nfriends(catfish) = 9\nhas(catfish, card) = True\ncolor(card, green) = True\nnot proceed(catfish, spot_right_after(tiger)) = True\n# The sun bear attacks the green fields whose owner is the grasshopper\nattack(sun_bear, green_fields, owner(grasshopper)) = True\n# The catfish does not hold the same number of points as the polar bear.\nequal_points(catfish, polar_bear) = False\n\n# Based on the game state and the rules and preferences, does the caterpillar attack the green fields whose owner is the kiwi?\nquestion = attack(caterpillar, green_fields, owner(kiwi))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cockroach attacks the green fields whose owner is the raven, then the raven does not hold an equal number of points as the hare\nRule2: If something does not proceed to the spot that is right after the spot of the eel, then it will raise a peace flag for the raven\nRule3: If the cockroach has something to drink, then it attacks the green fields of the raven\nRule4: If the cockroach has more than 1 friend, then it attacks the green fields of the raven\nRule5: If the canary respects the bat, then the bat sings a song of victory for the raven\nRule6: If something raises a peace flag for the tilapia, then the cockroach does not attack the green fields whose owner is the raven\nRule7: If the bat sings a victory song for the raven and the caterpillar raises a flag of peace for the raven, then the raven holds the same number of points as the hare.\n\nRule1 is preferred over Rule7\nRule6 is preferred over Rule3\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe bat rolls the dice for the turtle\nThe cockroach has a tablet\nThe canary does not respect the bat\nThe caterpillar does not proceed to the spot right after the eel\nThe jellyfish does not raise a peace flag for the tilapia.\n\nBased on the game state and the rules and preferences, does the raven hold the same number of points as the hare?\nQuestion: Does the raven hold the same number of points as the hare?",
        "idx": 326,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The raven does not hold an equal number of points as the hare, in the case where the cockroach attacks the green fields whose owner is the raven\nrule1() = attacks(cockroach, green_fields, raven) => not equal_points(raven, hare)\n# Rule2: If you are positive that one of the animals does not proceed to the spot that is right after the spot of the eel, you can be certain that it will raise a peace flag for the raven without a doubt\nrule2(something) = not proceed_to(something, spot_right_after(eel)) => raise_flag_of_peace(something, raven)\n# Rule3: If the cockroach has something to drink, then the cockroach attacks the green fields of the raven\nrule3() = has(cockroach, drink) => attacks(cockroach, green_fields, raven)\n# Rule4: Regarding the cockroach, if it has more than 1 friend, then we can conclude that it attacks the green fields of the raven\nrule4() = friends(cockroach) > 1 => attacks(cockroach, green_fields, raven)\n# Rule5: If the canary respects the bat, then the bat sings a song of victory for the raven\nrule5() = respects(canary, bat) => sings_song_of_victory(bat, raven)\n# Rule6: If at least one animal raises a peace flag for the tilapia, then the cockroach does not attack the green fields whose owner is the raven\nrule6() = raise_flag_of_peace(something, tilapia) => not attacks(cockroach, green_fields, raven)\n# Rule7: If the bat sings a victory song for the raven and the caterpillar raises a flag of peace for the raven, then the raven holds the same number of points as the hare.\nrule7() = sings_song_of_victory(bat, raven) & raise_flag_of_peace(caterpillar, raven) => equal_points(raven, hare)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The bat rolls the dice for the turtle\nroll_dice(bat, turtle) = True\n# The cockroach has a tablet\nhas(cockroach, tablet) = True\n# The canary does not respect the bat\nrespects(canary, bat) = False\n# The caterpillar does not proceed to the spot right after the eel\nproceed_to(caterpillar, spot_right_after(eel)) = False\n# The jellyfish does not raise a peace flag for the tilapia.\nraise_flag_of_peace(jellyfish, tilapia) = False\n\n# Based on the game state and the rules and preferences, does the raven hold the same number of points as the hare?\nquestion = equal_points(raven, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the starfish is the same as the first letter of the name of the cockroach, then the starfish holds the same number of points as the polar bear\nRule2: If the polar bear does not have her keys, then it does not steal five points from the jellyfish\nRule3: If the elephant has a high-quality paper, then it burns the warehouse of the polar bear\nRule4: If the polar bear has a card whose color appears in the flag of Belgium, then it does not steal five points from the jellyfish\nRule5: If something does not steal five points from the jellyfish, then it does not steal five points from the leopard\nRule6: If the starfish has a card whose color is one of the rainbow colors, then it does not hold an equal number of points as the polar bear\nRule7: If the elephant burns the warehouse of the polar bear and the starfish holds an equal number of points as the polar bear, then the polar bear steals five points from the leopard\nRule8: If the first letter of the name of the elephant is the same as the first letter of the name of the kangaroo, then the elephant burns the warehouse of the polar bear\nRule9: If the starfish has difficulty finding food, then it does not hold an equal number of points as the polar bear.\n\nRule6 is preferred over Rule1\nRule7 is preferred over Rule5\nRule9 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the cockroach is Lily\nThe name of the elephant is Casper\nThe elephant has a high-quality paper\nThe name of the kangaroo is Milo\nThe polar bear has a white card and lost her keys\nThe starfish has a white card\nThe name of the starfish is Lola\n\nBased on the game state and the rules and preferences, does the polar bear steal five points from the leopard?\nQuestion: Does the polar bear steal five points from the leopard?",
        "idx": 327,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the starfish has a name whose first letter is the same as the first letter of the cockroach's name, then the starfish holds the same number of points as the polar bear\nrule1() = first_letter_of(name(starfish)) == first_letter_of(name(cockroach)) => points(starfish) == points(polar_bear)\n# Rule2: If the polar bear does not have her keys, then the polar bear does not steal five points from the jellyfish\nrule2() = not has(polar_bear, keys) => not steal(polar_bear, 5_points, jellyfish)\n# Rule3: If the elephant has a high-quality paper, then the elephant burns the warehouse that is in possession of the polar bear\nrule3() = has(elephant, high_quality_paper) => burn_warehouse(elephant, polar_bear)\n# Rule4: If the polar bear has a card whose color appears in the flag of Belgium, then the polar bear does not steal five points from the jellyfish\nrule4() = has(polar_bear, card) and color(card) in flag_colors(Belgium) => not steal(polar_bear, 5_points, jellyfish)\n# Rule5: If something does not steal five points from the jellyfish, then it does not steal five of the points of the leopard\nrule5() = not steal(something, 5_points, jellyfish) => not steal(something, 5_points, leopard)\n# Rule6: Regarding the starfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not hold an equal number of points as the polar bear\nrule6() = has(starfish, card) and color(card) in rainbow_colors => not points(starfish) == points(polar_bear)\n# Rule7: If the elephant burns the warehouse of the polar bear and the starfish holds an equal number of points as the polar bear, then the polar bear steals five of the points of the leopard\nrule7() = burn_warehouse(elephant, polar_bear) & points(starfish) == points(polar_bear) => steal(polar_bear, 5_points, leopard)\n# Rule8: If the elephant has a name whose first letter is the same as the first letter of the kangaroo's name, then the elephant burns the warehouse of the polar bear\nrule8() = first_letter_of(name(elephant)) == first_letter_of(name(kangaroo)) => burn_warehouse(elephant, polar_bear)\n# Rule9: If the starfish has difficulty to find food, then the starfish does not hold an equal number of points as the polar bear.\nrule9() = has_difficulty(starfish, find_food) => not points(starfish) == points(polar_bear)\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n# Rule9 is preferred over Rule1\norder(rule9) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cockroach is named Lily\nname(cockroach, Lily) = True\n# The elephant is named Casper\nname(elephant, Casper) = True\n# The elephant published a high-quality paper\nhas(elephant, high_quality_paper) = True\n# The kangaroo is named Milo\nname(kangaroo, Milo) = True\n# The polar bear has a card that is white in color, and lost her keys\nhas(polar_bear, card) and color(card, white) = True\nnot has(polar_bear, keys) = True\n# The starfish has a card that is white in color\nhas(starfish, card) and color(card, white) = True\n# The starfish is named Lola\nname(starfish, Lola) = True\n\n# Based on the game state and the rules and preferences, does the polar bear steal five points from the leopard?\nquestion = steal(polar_bear, 5_points, leopard)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the zander has fewer than ten friends, then it does not become an enemy of the goldfish\nRule2: If something needs support from the phoenix, then it does not knock down the fortress of the black bear\nRule3: If the viperfish does not proceed to the spot that is right after the spot of the goldfish and the panda bear shows all her cards to the goldfish, then the goldfish will not need the support of the phoenix\nRule4: If something does not sing a song of victory for the eagle, then it becomes an enemy of the goldfish\nRule5: If the zander voted for the mayor, then the zander does not become an enemy of the goldfish\nRule6: If the goldfish has a high salary, then it needs the support of the phoenix\nRule7: If the goldfish has something to sit on, then it needs support from the phoenix.\n\nRule1 is preferred over Rule4\nRule3 is preferred over Rule6\nRule3 is preferred over Rule7\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe goldfish has a couch\nThe goldfish has a low-income job\nThe panda bear shows all her cards to the goldfish\nThe zander assassinated the mayor\nThe zander does not sing a victory song for the eagle\n\nBased on the game state and the rules and preferences, does the goldfish knock down the fortress of the black bear?\nQuestion: Does the goldfish knock down the fortress of the black bear?",
        "idx": 328,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the zander, if it has fewer than ten friends, then we can conclude that it does not become an enemy of the goldfish\nrule1() = friends(zander) < 10 => not become_enemy(zander, goldfish)\n# Rule2: If something needs support from the phoenix, then it does not knock down the fortress of the black bear\nrule2(something) = needs_support(something, phoenix) => not knock_down(fortress, black_bear)\n# Rule3: If the viperfish does not proceed to the spot that is right after the spot of the goldfish however the panda bear shows her cards (all of them) to the goldfish, then the goldfish will not need the support of the phoenix\nrule3() = not proceed(viperfish, spot_after(goldfish)) & show_cards(panda_bear, goldfish) => not needs_support(goldfish, phoenix)\n# Rule4: If you are positive that one of the animals does not sing a song of victory for the eagle, you can be certain that it will become an actual enemy of the goldfish without a doubt\nrule4(something) = not sing_song_of_victory(something, eagle) => become_enemy(something, goldfish)\n# Rule5: If the zander voted for the mayor, then the zander does not become an actual enemy of the goldfish\nrule5() = voted_for(zander, mayor) => not become_enemy(zander, goldfish)\n# Rule6: Regarding the goldfish, if it has a high salary, then we can conclude that it needs the support of the phoenix\nrule6() = has_high_salary(goldfish) => needs_support(goldfish, phoenix)\n# Rule7: If the goldfish has something to sit on, then the goldfish needs support from the phoenix.\nrule7() = has(goldfish, something_to_sit_on) => needs_support(goldfish, phoenix)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The goldfish has a couch\nhas(goldfish, couch) = True\n# The goldfish has a low-income job\nhas_low_income_job(goldfish) = True\n# The panda bear shows all her cards to the goldfish\nshow_cards(panda_bear, goldfish) = True\n# The zander assassinated the mayor\nassassinated(zander, mayor) = True\n# The zander does not sing a victory song for the eagle\nsing_song_of_victory(zander, eagle) = False\n\n# Based on the game state and the rules and preferences, does the goldfish knock down the fortress of the black bear?\nquestion = knock_down(fortress, black_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish is not going to attack the green fields of the lion but the raven rolls the dice for the lion, then the lion is not going to sing a song of victory for the koala\nRule2: If the buffalo attacks the green fields whose owner is the lion, then the lion does not eat the food that belongs to the penguin\nRule3: If something does not eat the food of the penguin, then it sings a song of victory for the koala\nRule4: If something does not raise a peace flag for the meerkat, then it eats the food of the penguin\nRule5: If something knocks down the fortress of the cockroach, then the raven rolls the dice for the lion.\n\nRule3 is preferred over Rule1\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe buffalo eats the food of the lion\nThe moose does not burn the warehouse of the cockroach.\n\nBased on the game state and the rules and preferences, does the lion sing a victory song for the koala?\nQuestion: Does the lion sing a victory song for the koala?",
        "idx": 329,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the lion, if the belief is that the catfish is not going to attack the green fields of the lion but the raven rolls the dice for the lion, then you can add that \"the lion is not going to sing a song of victory for the koala\" to your conclusions\nrule1() = not attack(catfish, green_fields, lion) & roll_dice(raven, lion) => not sing_song_of_victory(lion, koala)\n# Rule2: The lion does not eat the food that belongs to the penguin, in the case where the buffalo attacks the green fields whose owner is the lion\nrule2() = attack(buffalo, green_fields, lion) => not eat_food(lion, food_of(penguin))\n# Rule3: If something does not eat the food of the penguin, then it sings a song of victory for the koala\nrule3(something) = not eat_food(something, food_of(penguin)) => sing_song_of_victory(something, koala)\n# Rule4: If something does not raise a peace flag for the meerkat, then it eats the food of the penguin\nrule4(something) = not raise_flag_of_peace(something, meerkat) => eat_food(something, food_of(penguin))\n# Rule5: If at least one animal knocks down the fortress of the cockroach, then the raven rolls the dice for the lion.\nrule5() = knock_down_fortress(something, cockroach) => roll_dice(raven, lion)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The buffalo eats the food of the lion\neat_food(buffalo, food_of(lion)) = True\n# The moose does not burn the warehouse of the cockroach.\nburn_warehouse(moose, cockroach) = False\n\n# Based on the game state and the rules and preferences, does the lion sing a victory song for the koala?\nquestion = sing_song_of_victory(lion, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the oscar does not hold the same number of points as the halibut and the parrot does not give a magnifier to the halibut, then you can add \"the halibut gives a magnifier to the gecko\" to your conclusions\nRule2: If the parrot has a card whose color is one of the rainbow colors, then the parrot does not give a magnifying glass to the halibut\nRule3: If something does not wink at the carp and also does not show all her cards to the meerkat, then it gives a magnifier to the halibut\nRule4: If the oscar has fewer than six friends, then the oscar does not hold an equal number of points as the halibut.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe oscar has one lazy friend and three active friends\nThe parrot has a card that is indigo in color\nThe parrot does not show all her cards to the meerkat.\n\nBased on the game state and the rules and preferences, does the halibut give a magnifier to the gecko?\nQuestion: Does the halibut give a magnifier to the gecko?",
        "idx": 330,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the halibut, if the belief is that the oscar does not hold the same number of points as the halibut and the parrot does not give a magnifier to the halibut, then you can add \"the halibut gives a magnifier to the gecko\" to your conclusions\nrule1() = not same_number_of_points(oscar, halibut) & not give(parrot, magnifier, halibut) => add_conclusion(\"the halibut gives a magnifier to the gecko\")\n# Rule2: If the parrot has a card whose color is one of the rainbow colors, then the parrot does not give a magnifying glass to the halibut\nrule2() = has(parrot, card) and color(card) in rainbow_colors => not give(parrot, magnifying_glass, halibut)\n# Rule3: If you see that something does not wink at the carp and also does not show all her cards to the meerkat, what can you certainly conclude? You can conclude that it also gives a magnifier to the halibut\nrule3(something) = not wink(something, carp) & not show_all_cards(something, meerkat) => give(something, magnifier, halibut)\n# Rule4: If the oscar has fewer than six friends, then the oscar does not hold an equal number of points as the halibut.\nrule4() = friends(oscar) < 6 => not same_number_of_points(oscar, halibut)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The oscar has one friend that is lazy and three friends that are not\nlazy_friends(oscar) = 1\nactive_friends(oscar) = 3\n# The parrot has a card that is indigo in color\nhas(parrot, card) = True\ncolor(card, indigo) = True\n# The parrot does not show all her cards to the meerkat.\nshow_all_cards(parrot, meerkat) = False\n\n# Based on the game state and the rules and preferences, does the halibut give a magnifier to the gecko?\nquestion = add_conclusion(\"the halibut gives a magnifier to the gecko\")"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The jellyfish does not become an actual enemy of the ferret whenever at least one animal becomes an enemy of the moose\nRule2: The ferret will not prepare armor for the salmon, in the case where the jellyfish does not become an enemy of the ferret\nRule3: If something eats the food of the cat, then the ferret does not wink at the carp.\n\nThe current state of the game is as follows\nThe oscar eats the food of the cat\nThe tilapia becomes an enemy of the moose.\n\nBased on the game state and the rules and preferences, does the ferret prepare armor for the salmon?\nQuestion: Does the ferret prepare armor for the salmon?",
        "idx": 331,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The jellyfish does not become an actual enemy of the ferret whenever at least one animal becomes an enemy of the moose\nrule1() = become_enemy(something, moose) => not become_enemy(jellyfish, ferret)\n# Rule2: The ferret will not prepare armor for the salmon, in the case where the jellyfish does not become an enemy of the ferret\nrule2() = not become_enemy(jellyfish, ferret) => not prepare_armor(ferret, salmon)\n# Rule3: If at least one animal eats the food that belongs to the cat, then the ferret does not wink at the carp.\nrule3() = eat_food(something, food_of(cat)) => not wink(ferret, carp)\n\n# The current state of the game is as follows\n# The oscar eats the food of the cat\neat_food(oscar, food_of(cat)) = True\n# The tilapia becomes an enemy of the moose.\nbecome_enemy(tilapia, moose) = True\n\n# Based on the game state and the rules and preferences, does the ferret prepare armor for the salmon?\nquestion = prepare_armor(ferret, salmon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not offer a job position to the octopus, then it becomes an actual enemy of the bat\nRule2: If the eagle has a card and the color of the card appears in the flag of Belgium, then it offers a job position to the octopus.\n\nThe current state of the game is as follows\nThe eagle has a card\nThe color of the card is yellow\n\nBased on the game state and the rules and preferences, does the eagle become an enemy of the bat?\nQuestion: Does the eagle become an enemy of the bat?",
        "idx": 332,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not offer a job position to the octopus, then it becomes an actual enemy of the bat\nrule1(something) = not offer_job_position(something, octopus) => become_enemy(something, bat)\n# Rule2: Regarding the eagle, if it has a card whose color appears in the flag of Belgium, then we can conclude that it offers a job position to the octopus.\nrule2() = has(eagle, card) and color(card) in colors_of_Belgium_flag => offer_job_position(eagle, octopus)\n\n# The current state of the game is as follows\n# The eagle has a card that is yellow in color.\nhas(eagle, card) = True\ncolor(card, yellow) = True\n\n# Based on the game state and the rules and preferences, does the eagle become an enemy of the bat?\nquestion = become_enemy(eagle, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something attacks the green fields whose owner is the snail, then it sings a victory song for the zander, too\nRule2: If something sings a victory song for the zander, then it knows the defense plan of the cockroach.\n\nThe current state of the game is as follows\nThe puffin attacks the green fields whose owner is the snail.\n\nBased on the game state and the rules and preferences, does the puffin know the defensive plans of the cockroach?\nQuestion: Does the puffin know the defensive plans of the cockroach?",
        "idx": 333,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something attacks the green fields whose owner is the snail, then it sings a victory song for the zander, too\nrule1(something) = attacks(something, green_fields, owner(snail)) => sings_victory_song(something, zander)\n# Rule2: If you are positive that you saw one of the animals sings a victory song for the zander, you can be certain that it will also know the defense plan of the cockroach.\nrule2(something) = sings_victory_song(something, zander) => knows(something, defense_plan, cockroach)\n\n# The current state of the game is as follows\n# The puffin attacks the green fields whose owner is the snail.\nattacks(puffin, green_fields, owner(snail)) = True\n\n# Based on the game state and the rules and preferences, does the puffin know the defensive plans of the cockroach?\nquestion = knows(puffin, defense_plan, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the parrot shows all her cards to the grizzly bear, then the grizzly bear does not wink at the swordfish\nRule2: If something knocks down the fortress of the baboon and rolls the dice for the pig, then it does not show all her cards to the grizzly bear\nRule3: If the parrot has something to sit on, then it shows all her cards to the grizzly bear\nRule4: If the parrot has a card whose color appears in the flag of Italy, then it shows all her cards to the grizzly bear\nRule5: If the carp has difficulty finding food, then it rolls the dice for the octopus.\n\nRule2 is preferred over Rule3\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe carp struggles to find food\nThe parrot has a red card\nThe parrot has a cell phone\nThe parrot knocks down the fortress of the baboon.\n\nBased on the game state and the rules and preferences, does the grizzly bear wink at the swordfish?\nQuestion: Does the grizzly bear wink at the swordfish?",
        "idx": 334,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The grizzly bear does not wink at the swordfish, in the case where the parrot shows her cards (all of them) to the grizzly bear\nrule1() = show_cards(parrot, all) => not wink(grizzly_bear, swordfish)\n# Rule2: If you see that something knocks down the fortress that belongs to the baboon and rolls the dice for the pig, what can you certainly conclude? You can conclude that it does not show all her cards to the grizzly bear\nrule2() = knock_down_fortress(something, baboon) & roll_dice(something, pig) => not show_cards(something, all)\n# Rule3: Regarding the parrot, if it has something to sit on, then we can conclude that it shows all her cards to the grizzly bear\nrule3() = has(parrot, something_to_sit_on) => show_cards(parrot, all)\n# Rule4: Regarding the parrot, if it has a card whose color appears in the flag of Italy, then we can conclude that it shows her cards (all of them) to the grizzly bear\nrule4() = has(parrot, card) and color(card) in flag_of_italy_colors => show_cards(parrot, all)\n# Rule5: Regarding the carp, if it has difficulty to find food, then we can conclude that it rolls the dice for the octopus.\nrule5() = difficulty_finding_food(carp) => roll_dice(carp, octopus)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The carp struggles to find food\ndifficulty_finding_food(carp) = True\n# The parrot has a card that is red in color\nhas(parrot, card) and color(card, red) = True\n# The parrot has a cell phone\nhas(parrot, cell_phone) = True\n# The parrot knocks down the fortress of the baboon.\nknock_down_fortress(parrot, baboon) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear wink at the swordfish?\nquestion = wink(grizzly_bear, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something burns the warehouse of the ferret, then it knocks down the fortress that belongs to the gecko, too\nRule2: If the first letter of the name of the cat is the same as the first letter of the name of the rabbit, then the cat does not burn the warehouse of the ferret\nRule3: The cat burns the warehouse of the ferret whenever something learns elementary resource management from the meerkat\nRule4: The cat will not knock down the fortress that belongs to the gecko, in the case where the canary does not become an enemy of the cat.\n\nRule2 is preferred over Rule3\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the rabbit is Bella\nThe points of the squid are equal to the points of the meerkat.\n\nBased on the game state and the rules and preferences, does the cat knock down the fortress of the gecko?\nQuestion: Does the cat knock down the fortress of the gecko?",
        "idx": 335,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something burns the warehouse of the ferret, then it knocks down the fortress that belongs to the gecko, too\nrule1(something) = burns(something, warehouse, ferret) => knocks_down(something, fortress, gecko)\n# Rule2: Regarding the cat, if it has a name whose first letter is the same as the first letter of the rabbit's name, then we can conclude that it does not burn the warehouse that is in possession of the ferret\nrule2() = first_letter_of(name(cat)) == first_letter_of(name(rabbit)) => not burns(cat, warehouse, ferret)\n# Rule3: The cat burns the warehouse of the ferret whenever at least one animal learns elementary resource management from the meerkat\nrule3() = learns(something, elementary_resource_management, meerkat) => burns(cat, warehouse, ferret)\n# Rule4: The cat will not knock down the fortress that belongs to the gecko, in the case where the canary does not become an enemy of the cat.\nrule4() = not become_enemy(canary, cat) => not knocks_down(cat, fortress, gecko)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The rabbit is named Bella\nname(rabbit, Bella) = True\n# The squid holds the same number of points as the meerkat.\npoints(squid) == points(meerkat) = True\n\n# Based on the game state and the rules and preferences, does the cat knock down the fortress of the gecko?\nquestion = knocks_down(cat, fortress, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something sings a victory song for the salmon but does not roll the dice for the tilapia, then it sings a victory song for the cow.\nRule2: If something does not learn elementary resource management from the doctorfish, then it does not roll the dice for the tilapia.\nRule3: The sun bear sings a victory song for the salmon if the leopard does not know its defense plans.\n\nThe current state of the game is as follows\nThe sun bear has 14 friends.\nThe leopard does not know the defense plans of the sun bear.\nThe sun bear does not learn the basics of resource management from the doctorfish.\n\nBased on the game state and the rules and preferences, does the sun bear sing a victory song for the cow?\nQuestion: Does the sun bear sing a victory song for the cow?",
        "idx": 336,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something sings a song of victory for the salmon but does not roll the dice for the tilapia, what can you certainly conclude? You can conclude that it sings a victory song for the cow\nrule1(something) = sings(something, victory_song, salmon) & not roll_dice(something, tilapia) => sings(something, victory_song, cow)\n# Rule2: If you are positive that one of the animals does not learn elementary resource management from the doctorfish, you can be certain that it will not roll the dice for the tilapia\nrule2(something) = not learn(something, elementary_resource_management, doctorfish) => not roll_dice(something, tilapia)\n# Rule3: The sun bear unquestionably sings a song of victory for the salmon, in the case where the leopard does not know the defense plan of the sun bear.\nrule3() = not know(leopard, defense_plans, sun_bear) => sings(sun_bear, victory_song, salmon)\n\n# The current state of the game is as follows\n# The sun bear has fourteen friends\nfriends(sun_bear) = 14\n# The leopard does not know the defensive plans of the sun bear\nknow(leopard, defense_plans, sun_bear) = False\n# The sun bear does not learn the basics of resource management from the doctorfish.\nlearn(sun_bear, elementary_resource_management, doctorfish) = False\n\n# Based on the game state and the rules and preferences, does the sun bear sing a victory song for the cow?\nquestion = sings(sun_bear, victory_song, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something removes from the board one of the pieces of the lobster, then the black bear does not know the defensive plans of the squid\nRule2: If the black bear has something to drink, then it knows the defensive plans of the squid\nRule3: If the zander has a leafy green vegetable, then it does not proceed to the spot that is right after the spot of the squid\nRule4: The cow will not become an actual enemy of the squid, in the case where the moose does not hold the same number of points as the cow\nRule5: If the zander has a name whose first letter is the same as the first letter of the koala's name, then it proceeds to the spot right after the squid\nRule6: The squid does not wink at the grasshopper, in the case where the zander proceeds to the spot right after the squid.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule5\n\nThe current state of the game is as follows\nThe black bear has a banana-strawberry smoothie\nThe name of the koala is Blossom\nThe rabbit removes from the board one of the pieces of the lobster\nThe name of the zander is Beauty\nThe moose does not hold the same number of points as the cow.\n\nBased on the game state and the rules and preferences, does the squid wink at the grasshopper?\nQuestion: Does the squid wink at the grasshopper?",
        "idx": 337,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal removes from the board one of the pieces of the lobster, then the black bear does not know the defensive plans of the squid\nrule1() = remove_piece(something, lobster) => not know(black_bear, defensive_plans, squid)\n# Rule2: Regarding the black bear, if it has something to drink, then we can conclude that it knows the defensive plans of the squid\nrule2() = has(black_bear, drink) => know(black_bear, defensive_plans, squid)\n# Rule3: If the zander has a leafy green vegetable, then the zander does not proceed to the spot that is right after the spot of the squid\nrule3() = has(zander, leafy_green_vegetable) => not proceed_to_spot(zander, right_after_spot(squid))\n# Rule4: The cow will not become an actual enemy of the squid, in the case where the moose does not hold the same number of points as the cow\nrule4() = not points(moose) == points(cow) => not become_enemy(cow, squid)\n# Rule5: If the zander has a name whose first letter is the same as the first letter of the koala's name, then the zander proceeds to the spot right after the squid\nrule5() = first_letter_of(name(zander)) == first_letter_of(name(koala)) => proceed_to_spot(zander, right_after_spot(squid))\n# Rule6: The squid does not wink at the grasshopper, in the case where the zander proceeds to the spot right after the squid.\nrule6() = proceed_to_spot(zander, right_after_spot(squid)) => not wink(squid, grasshopper)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n\n# The current state of the game is as follows\n# The black bear has a banana-strawberry smoothie\nhas(black_bear, banana_strawberry_smoothie) = True\n# The koala is named Blossom\nname(koala, Blossom) = True\n# The rabbit removes from the board one of the pieces of the lobster\nremove_piece(rabbit, lobster) = True\n# The zander is named Beauty\nname(zander, Beauty) = True\n# The moose does not hold the same number of points as the cow.\npoints(moose) == points(cow) = False\n\n# Based on the game state and the rules and preferences, does the squid wink at the grasshopper?\nquestion = wink(squid, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something attacks the green fields whose owner is the lion, then it becomes an actual enemy of the panther, too\nRule2: If the tiger has a card whose color appears in the flag of Japan, then it does not attack the green fields of the lion\nRule3: If something eats the food that belongs to the koala and does not remove from the board one of the pieces of the lobster, then it attacks the green fields whose owner is the lion.\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe tiger eats the food of the koala\nThe tiger has a white card\nThe tiger does not remove from the board one of the pieces of the lobster.\n\nBased on the game state and the rules and preferences, does the tiger become an enemy of the panther?\nQuestion: Does the tiger become an enemy of the panther?",
        "idx": 338,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something attacks the green fields whose owner is the lion, then it becomes an actual enemy of the panther, too\nrule1(something) = attacks(something, green_fields, owner(lion)) => become_enemy(something, panther)\n# Rule2: Regarding the tiger, if it has a card whose color appears in the flag of Japan, then we can conclude that it does not attack the green fields of the lion\nrule2() = has(tiger, card) and color(card) in colors_of(flag_of_Japan) => not attacks(tiger, green_fields, owner(lion))\n# Rule3: Be careful when something does not remove from the board one of the pieces of the lobster but eats the food that belongs to the koala because in this case it will, surely, attack the green fields whose owner is the lion (this may or may not be problematic).\nrule3(something) = not remove(something, piece, lobster) & eat_food(something, food_of(koala)) => attacks(something, green_fields, owner(lion))\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The tiger eats the food of the koala\neat_food(tiger, food_of(koala)) = True\n# The tiger has a card that is white in color\nhas(tiger, card) = True\ncolor(card, white) = True\n# The tiger does not remove from the board one of the pieces of the lobster.\nremove(tiger, piece, lobster) = False\n\n# Based on the game state and the rules and preferences, does the tiger become an enemy of the panther?\nquestion = become_enemy(tiger, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The cockroach does not roll the dice for the turtle, in the case where the kudu proceeds to the spot that is right after the spot of the cockroach\nRule2: If the buffalo does not raise a flag of peace for the cockroach, then the cockroach rolls the dice for the turtle\nRule3: If the buffalo has a high salary, then the buffalo does not raise a flag of peace for the cockroach.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe buffalo got a well-paid job.\n\nBased on the game state and the rules and preferences, does the cockroach roll the dice for the turtle?\nQuestion: Does the cockroach roll the dice for the turtle?",
        "idx": 339,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cockroach does not roll the dice for the turtle, in the case where the kudu proceeds to the spot that is right after the spot of the cockroach\nrule1() = proceed(kudu, spot_after(spot_of(cockroach))) => not roll_dice(cockroach, turtle)\n# Rule2: If the buffalo does not raise a flag of peace for the cockroach, then the cockroach rolls the dice for the turtle\nrule2() = not raise_flag_of_peace(buffalo, cockroach) => roll_dice(cockroach, turtle)\n# Rule3: If the buffalo has a high salary, then the buffalo does not raise a flag of peace for the cockroach.\nrule3() = has_high_salary(buffalo) => not raise_flag_of_peace(buffalo, cockroach)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The buffalo got a well-paid job.\nhas_high_salary(buffalo) = True\n\n# Based on the game state and the rules and preferences, does the cockroach roll the dice for the turtle?\nquestion = roll_dice(cockroach, turtle)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the spider has a device to connect to the internet, then it knocks down the fortress that belongs to the mosquito\nRule2: If the cricket does not raise a peace flag for the spider, then the spider does not show all her cards to the raven\nRule3: If the spider has a card whose color starts with the letter \"e\", then it knocks down the fortress of the mosquito\nRule4: If the spider has more than eight friends, then it shows all her cards to the raven\nRule5: If something knocks down the fortress that belongs to the mosquito and also shows all her cards to the raven, then it will not eat the food that belongs to the koala.\n\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe spider has a red card, a tablet, and 17 friends\nThe aardvark does not roll the dice for the spider\nThe raven does not raise a peace flag for the spider.\n\nBased on the game state and the rules and preferences, does the spider eat the food of the koala?\nQuestion: Does the spider eat the food of the koala?",
        "idx": 340,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the spider has a device to connect to the internet, then the spider knocks down the fortress that belongs to the mosquito\nrule1() = has(spider, device_to_connect_to_internet) => knock_down_fortress(spider, mosquito)\n# Rule2: If the cricket does not raise a flag of peace for the spider, then the spider does not show all her cards to the raven\nrule2() = not raise_flag_of_peace(cricket, spider) => not show_all_cards(spider, raven)\n# Rule3: If the spider has a card whose color starts with the letter \"e\", then the spider knocks down the fortress of the mosquito\nrule3() = has(spider, card) and starts_with(color(card), \"e\") => knock_down_fortress(spider, mosquito)\n# Rule4: Regarding the spider, if it has more than eight friends, then we can conclude that it shows her cards (all of them) to the raven\nrule4() = friends(spider) > 8 => show_all_cards(spider, raven)\n# Rule5: Be careful when something knocks down the fortress that belongs to the mosquito and also shows her cards (all of them) to the raven because in this case it will surely not eat the food that belongs to the koala (this may or may not be problematic).\nrule5() = knock_down_fortress(something, mosquito) & show_all_cards(something, raven) => not eat_food(something, koala)\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The spider has a card that is red in color, has a tablet, and has seventeen friends\nhas(spider, card) = True\ncolor(card, red) = True\nhas(spider, tablet) = True\nfriends(spider) = 17\n# The aardvark does not roll the dice for the spider\nroll_dice(aardvark, spider) = False\n# The raven does not raise a peace flag for the spider.\nraise_flag_of_peace(raven, spider) = False\n\n# Based on the game state and the rules and preferences, does the spider eat the food of the koala?\nquestion = eat_food(spider, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grizzly bear has a card whose color starts with the letter \"l\", then it raises a peace flag for the cat\nRule2: If the grizzly bear took a bike from the store, then it raises a flag of peace for the cat\nRule3: If the grizzly bear raises a peace flag for the cat, then the cat owes money to the gecko\nRule4: If the first letter of the name of the grizzly bear is the same as the first letter of the name of the sea bass, then the grizzly bear does not raise a flag of peace for the cat\nRule5: If the cat has a card whose color starts with the letter \"y\", then it knows the defensive plans of the sun bear\nRule6: Whenever at least one animal attacks the green fields whose owner is the cockroach, the cat removes one of the pieces of the snail.\n\nRule1 is preferred over Rule4\nRule2 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cat has a yellow card\nThe grizzly bear has a black card and hates Chris Ronaldo\nThe koala attacks the green fields whose owner is the cockroach\nThe sea bass is named Mojo\n\nBased on the game state and the rules and preferences, does the cat owe money to the gecko?\nQuestion: Does the cat owe money to the gecko?",
        "idx": 341,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the grizzly bear, if it has a card whose color starts with the letter \"l\", then we can conclude that it raises a peace flag for the cat\nrule1() = starts_with(color(card(grizzly_bear)), \"l\") => raise_flag_of_peace(grizzly_bear, cat)\n# Rule2: Regarding the grizzly bear, if it took a bike from the store, then we can conclude that it raises a flag of peace for the cat\nrule2() = took_bike(grizzly_bear) => raise_flag_of_peace(grizzly_bear, cat)\n# Rule3: The cat unquestionably owes money to the gecko, in the case where the grizzly bear raises a peace flag for the cat\nrule3() = raise_flag_of_peace(grizzly_bear, cat) => owe(cat, money, gecko)\n# Rule4: If the grizzly bear has a name whose first letter is the same as the first letter of the sea bass's name, then the grizzly bear does not raise a flag of peace for the cat\nrule4() = first_letter_of(name(grizzly_bear)) == first_letter_of(name(sea_bass)) => not raise_flag_of_peace(grizzly_bear, cat)\n# Rule5: If the cat has a card whose color starts with the letter \"y\", then the cat knows the defensive plans of the sun bear\nrule5() = starts_with(color(card(cat)), \"y\") => knows(cat, defensive_plans, sun_bear)\n# Rule6: The cat removes one of the pieces of the snail whenever at least one animal attacks the green fields whose owner is the cockroach.\nrule6() = attacks(something, green_fields(owned_by(cockroach))) => remove_piece(cat, snail)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cat has a card that is yellow in color\ncolor(card(cat), yellow) = True\n# The grizzly bear has a card that is black in color, and hates Chris Ronaldo\ncolor(card(grizzly_bear), black) = True\nhates(grizzly_bear, Chris_Ronaldo) = True\n# The koala attacks the green fields whose owner is the cockroach\nattacks(koala, green_fields(owned_by(cockroach))) = True\n# The sea bass is named Mojo\nname(sea_bass, Mojo) = True\n\n# Based on the game state and the rules and preferences, does the cat owe money to the gecko?\nquestion = owe(cat, money, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the amberjack needs the support of the parrot, then the parrot shows all her cards to the meerkat\nRule2: If the first letter of the name of the amberjack is the same as the first letter of the name of the koala, then the amberjack needs the support of the parrot\nRule3: If the lobster has an internet device, then the lobster rolls the dice for the parrot\nRule4: If the kiwi eats the food of the lobster, then the lobster does not roll the dice for the parrot\nRule5: If the amberjack owns a luxury aircraft, then the amberjack needs the support of the parrot.\n\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe amberjack dreamed of a luxury aircraft\nThe name of the amberjack is Chickpea\nThe name of the koala is Charlie\nThe lobster has a tablet.\n\nBased on the game state and the rules and preferences, does the parrot show all her cards to the meerkat?\nQuestion: Does the parrot show all her cards to the meerkat?",
        "idx": 342,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The parrot unquestionably shows her cards (all of them) to the meerkat, in the case where the amberjack needs the support of the parrot\nrule1() = needs_support(amberjack, parrot) => show_cards(parrot, meerkat)\n# Rule2: Regarding the amberjack, if it has a name whose first letter is the same as the first letter of the koala's name, then we can conclude that it needs the support of the parrot\nrule2() = first_letter_of(name(amberjack)) == first_letter_of(name(koala)) => needs_support(amberjack, parrot)\n# Rule3: If the lobster has a device to connect to the internet, then the lobster rolls the dice for the parrot\nrule3() = has(lobster, internet_device) => roll_dice(lobster, parrot)\n# Rule4: The lobster does not roll the dice for the parrot, in the case where the kiwi eats the food of the lobster\nrule4() = eat_food(kiwi, food_of(lobster)) => not roll_dice(lobster, parrot)\n# Rule5: Regarding the amberjack, if it owns a luxury aircraft, then we can conclude that it needs the support of the parrot.\nrule5() = owns(amberjack, luxury_aircraft) => needs_support(amberjack, parrot)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The amberjack dreamed of a luxury aircraft\ndream(amberjack, luxury_aircraft) = True\n# The amberjack is named Chickpea\nname(amberjack, Chickpea) = True\n# The koala is named Charlie\nname(koala, Charlie) = True\n# The lobster has a tablet.\nhas(lobster, tablet) = True\n\n# Based on the game state and the rules and preferences, does the parrot show all her cards to the meerkat?\nquestion = show_cards(parrot, meerkat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not wink at the amberjack, then it steals five points from the catfish\nRule2: If something steals five of the points of the catfish, then it does not burn the warehouse that is in possession of the cat.\n\nThe current state of the game is as follows\nThe sun bear does not wink at the amberjack.\n\nBased on the game state and the rules and preferences, does the sun bear burn the warehouse of the cat?\nQuestion: Does the sun bear burn the warehouse of the cat?",
        "idx": 343,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not wink at the amberjack, then it steals five points from the catfish\nrule1(something) = not wink(something, amberjack) => steal_points(something, 5, catfish)\n# Rule2: If something steals five of the points of the catfish, then it does not burn the warehouse that is in possession of the cat.\nrule2(something) = steal_points(something, 5, catfish) => not burn_warehouse(something, cat)\n\n# The current state of the game is as follows\n# The sun bear does not wink at the amberjack.\nwink(sun_bear, amberjack) = False\n\n# Based on the game state and the rules and preferences, does the sun bear burn the warehouse of the cat?\nquestion = burn_warehouse(sun_bear, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sun bear has a name whose first letter is the same as the first letter of the eel's name, then the sun bear does not wink at the phoenix\nRule2: If the snail knocks down the fortress of the sun bear, then the sun bear does not need the support of the baboon\nRule3: If something attacks the green fields of the jellyfish but does not wink at the phoenix, then it needs support from the baboon\nRule4: If the sun bear has something to drink, then it attacks the green fields whose owner is the jellyfish\nRule5: If the sun bear has a card with a primary color, then the sun bear does not wink at the phoenix\nRule6: If the sun bear has a high salary, then it attacks the green fields whose owner is the jellyfish.\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe name of the eel is Max\nThe sun bear has a blue card\nThe name of the sun bear is Buddy\nThe sun bear parked her bike in front of the store\nThe sun bear has a knapsack.\n\nBased on the game state and the rules and preferences, does the sun bear need support from the baboon?\nQuestion: Does the sun bear need support from the baboon?",
        "idx": 344,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sun bear has a name whose first letter is the same as the first letter of the eel's name, then the sun bear does not wink at the phoenix\nrule1() = first_letter_of(name(sun_bear)) == first_letter_of(name(eel)) => not wink(sun_bear, phoenix)\n# Rule2: The sun bear does not need the support of the baboon, in the case where the snail knocks down the fortress of the sun bear\nrule2() = knock_down(snail, fortress(sun_bear)) => not need_support(sun_bear, baboon)\n# Rule3: Be careful when something attacks the green fields of the jellyfish but does not wink at the phoenix because in this case it will, surely, need support from the baboon (this may or may not be problematic)\nrule3() = attack(something, green_fields(jellyfish)) & not wink(something, phoenix) => need_support(something, baboon)\n# Rule4: Regarding the sun bear, if it has something to drink, then we can conclude that it attacks the green fields whose owner is the jellyfish\nrule4() = has(sun_bear, drink) => attack(sun_bear, green_fields(jellyfish))\n# Rule5: If the sun bear has a card with a primary color, then the sun bear does not wink at the phoenix\nrule5() = has(sun_bear, card) & color(card) in primary_colors => not wink(sun_bear, phoenix)\n# Rule6: Regarding the sun bear, if it has a high salary, then we can conclude that it attacks the green fields whose owner is the jellyfish.\nrule6() = has_high_salary(sun_bear) => attack(sun_bear, green_fields(jellyfish))\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The eel is named Max\nname(eel, Max) = True\n# The sun bear has a card that is blue in color, is named Buddy, and parked her bike in front of the store\nhas(sun_bear, card) = True\ncolor(card, blue) = True\nname(sun_bear, Buddy) = True\nparked_bike(sun_bear, front_of(store)) = True\n# The sun bear has a knapsack.\nhas(sun_bear, knapsack) = True\n\n# Based on the game state and the rules and preferences, does the sun bear need support from the baboon?\nquestion = need_support(sun_bear, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eagle raises a peace flag for the polar bear and the hummingbird knows the defensive plans of the polar bear, then the polar bear respects the kiwi\nRule2: If the jellyfish has a name whose first letter is the same as the first letter of the salmon's name, then the jellyfish raises a flag of peace for the polar bear\nRule3: If something learns elementary resource management from the jellyfish and also respects the kiwi, then it will not learn elementary resource management from the elephant\nRule4: If something proceeds to the spot that is right after the spot of the phoenix, then it does not raise a peace flag for the polar bear\nRule5: If the jellyfish has more than ten friends, then it raises a peace flag for the polar bear\nRule6: The polar bear learns elementary resource management from the elephant if the jellyfish raises a peace flag for the polar bear.\n\nRule3 is preferred over Rule6\nRule4 is preferred over Rule2\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe eagle raises a peace flag for the polar bear\nThe hummingbird knows the defensive plans of the polar bear\nThe jellyfish has 11 friends\nThe name of the jellyfish is Bella\nThe name of the salmon is Paco\n\nBased on the game state and the rules and preferences, does the polar bear learn the basics of resource management from the elephant?\nQuestion: Does the polar bear learn the basics of resource management from the elephant?",
        "idx": 345,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eagle raises a flag of peace for the polar bear and the hummingbird knows the defensive plans of the polar bear, then the polar bear respects the kiwi\nrule1() = raise_flag_of_peace(eagle, polar_bear) & knows(hummingbird, defensive_plans, polar_bear) => respect(polar_bear, kiwi)\n# Rule2: If the jellyfish has a name whose first letter is the same as the first letter of the salmon's name, then the jellyfish raises a flag of peace for the polar bear\nrule2() = first_letter_of(name(jellyfish)) == first_letter_of(name(salmon)) => raise_flag_of_peace(jellyfish, polar_bear)\n# Rule3: Be careful when something learns elementary resource management from the jellyfish and also respects the kiwi because in this case it will surely not learn elementary resource management from the elephant (this may or may not be problematic)\nrule3(something) = learns(something, elementary_resource_management, jellyfish) & respect(something, kiwi) => not learns(something, elementary_resource_management, elephant)\n# Rule4: If something proceeds to the spot that is right after the spot of the phoenix, then it does not raise a peace flag for the polar bear\nrule4(something) = proceeds_to(something, spot_after(phoenix)) => not raise_flag_of_peace(something, polar_bear)\n# Rule5: Regarding the jellyfish, if it has more than ten friends, then we can conclude that it raises a peace flag for the polar bear\nrule5() = friends(jellyfish) > 10 => raise_flag_of_peace(jellyfish, polar_bear)\n# Rule6: The polar bear unquestionably learns elementary resource management from the elephant, in the case where the jellyfish raises a peace flag for the polar bear.\nrule6() = raise_flag_of_peace(jellyfish, polar_bear) => learns(polar_bear, elementary_resource_management, elephant)\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The eagle raises a peace flag for the polar bear\nraise_flag_of_peace(eagle, polar_bear) = True\n# The hummingbird knows the defensive plans of the polar bear\nknows(hummingbird, defensive_plans, polar_bear) = True\n# The jellyfish has eleven friends\nfriends(jellyfish) = 11\n# The jellyfish is named Bella\nname(jellyfish, Bella) = True\n# The salmon is named Paco.\nname(salmon, Paco) = True\n\n# Based on the game state and the rules and preferences, does the polar bear learn the basics of resource management from the elephant?\nquestion = learns(polar_bear, elementary_resource_management, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not steal five points from the hummingbird, then it raises a peace flag for the donkey\nRule2: If the sheep does not give a magnifier to the viperfish and the doctorfish does not attack the green fields of the viperfish, then the viperfish does not raise a peace flag for the donkey\nRule3: If the doctorfish has fewer than eleven friends, then it does not attack the green fields of the viperfish\nRule4: If the doctorfish has something to drink, then it does not attack the green fields of the viperfish\nRule5: If something does not sing a victory song for the meerkat, then it does not give a magnifier to the viperfish.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe doctorfish has 8 friends\nThe doctorfish has some arugula\nThe sheep does not sing a victory song for the meerkat.\n\nBased on the game state and the rules and preferences, does the viperfish raise a peace flag for the donkey?\nQuestion: Does the viperfish raise a peace flag for the donkey?",
        "idx": 346,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not steal five points from the hummingbird, you can be certain that it will raise a peace flag for the donkey without a doubt\nrule1() = not steal(something, 5, hummingbird) => raise_flag_of_peace(something, donkey)\n# Rule2: For the viperfish, if the belief is that the sheep does not give a magnifier to the viperfish and the doctorfish does not attack the green fields of the viperfish, then you can add \"the viperfish does not raise a flag of peace for the donkey\" to your conclusions\nrule2() = not give(sheep, magnifier, viperfish) & not attack(doctorfish, green_fields, viperfish) => not raise_flag_of_peace(viperfish, donkey)\n# Rule3: If the doctorfish has fewer than eleven friends, then the doctorfish does not attack the green fields of the viperfish\nrule3() = friends(doctorfish) < 11 => not attack(doctorfish, green_fields, viperfish)\n# Rule4: Regarding the doctorfish, if it has something to drink, then we can conclude that it does not attack the green fields of the viperfish\nrule4() = has(doctorfish, drink) => not attack(doctorfish, green_fields, viperfish)\n# Rule5: If you are positive that one of the animals does not sing a song of victory for the meerkat, you can be certain that it will not give a magnifier to the viperfish.\nrule5() = not sing(something, song_of_victory, meerkat) => not give(something, magnifier, viperfish)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The doctorfish has 8 friends\nfriends(doctorfish) = 8\n# The doctorfish has some arugula\nhas(doctorfish, arugula) = True\n# The sheep does not sing a victory song for the meerkat.\nnot sing(sheep, song_of_victory, meerkat) = True\n\n# Based on the game state and the rules and preferences, does the viperfish raise a peace flag for the donkey?\nquestion = raise_flag_of_peace(viperfish, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something eats the food of the wolverine, then it removes one of the pieces of the caterpillar\nRule2: If the sun bear has something to carry apples and oranges, then it eats the food of the wolverine\nRule3: If the sun bear has a leafy green vegetable, then it does not eat the food that belongs to the wolverine.\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe sun bear has a banana-strawberry smoothie.\n\nBased on the game state and the rules and preferences, does the sun bear remove from the board one of the pieces of the caterpillar?\nQuestion: Does the sun bear remove from the board one of the pieces of the caterpillar?",
        "idx": 347,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something eats the food of the wolverine, then it removes one of the pieces of the caterpillar, too\nrule1(something) = eats_food(something, food_of(wolverine)) => remove_piece(caterpillar)\n# Rule2: If the sun bear has something to carry apples and oranges, then the sun bear eats the food of the wolverine\nrule2() = has(sun_bear, carry_apples_oranges) => eats_food(sun_bear, food_of(wolverine))\n# Rule3: If the sun bear has a leafy green vegetable, then the sun bear does not eat the food that belongs to the wolverine.\nrule3() = has(sun_bear, leafy_green_vegetable) => not eats_food(sun_bear, food_of(wolverine))\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The sun bear has a banana-strawberry smoothie.\nhas(sun_bear, banana_strawberry_smoothie) = True\n\n# Based on the game state and the rules and preferences, does the sun bear remove from the board one of the pieces of the caterpillar?\nquestion = remove_piece(caterpillar)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something proceeds to the spot that is right after the spot of the polar bear but does not offer a job to the tilapia, then it will proceed to the spot right after the parrot.\nRule2: If the caterpillar has a device to connect to the internet, then it proceeds to the spot that is right after the spot of the polar bear.\nRule3: If the caterpillar has more than two friends, then it proceeds to the spot right after the polar bear.\nRule4: If the ferret respects the caterpillar and the cockroach does not remove one of the pieces of the caterpillar, then the caterpillar will never offer a job to the tilapia.\n\nThe current state of the game is as follows\nThe caterpillar has 3 friends and a knife\nThe name of the caterpillar is Casper\nThe name of the donkey is Cinnamon\nThe ferret respects the caterpillar\nThe cockroach does not remove one of the pieces of the caterpillar.\n\nBased on the game state and the rules and preferences, does the caterpillar proceed to the spot right after the parrot?\nQuestion: Does the caterpillar proceed to the spot right after the parrot?",
        "idx": 348,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something proceeds to the spot that is right after the spot of the polar bear but does not offer a job to the tilapia because in this case it will, surely, proceed to the spot right after the parrot (this may or may not be problematic)\nrule1(something) = proceed(something, spot_after(polar_bear)) & not offer_job_position(something, tilapia) => proceed(something, spot_after(parrot))\n# Rule2: Regarding the caterpillar, if it has a device to connect to the internet, then we can conclude that it proceeds to the spot that is right after the spot of the polar bear\nrule2() = has(caterpillar, internet_device) => proceed(caterpillar, spot_after(polar_bear))\n# Rule3: Regarding the caterpillar, if it has more than two friends, then we can conclude that it proceeds to the spot right after the polar bear\nrule3() = friends(caterpillar) > 2 => proceed(caterpillar, spot_after(polar_bear))\n# Rule4: If the ferret respects the caterpillar and the cockroach does not remove one of the pieces of the caterpillar, then the caterpillar will never offer a job to the tilapia.\nrule4() = respect(ferret, caterpillar) & not remove_piece(cockroach, caterpillar) => not offer_job_position(caterpillar, tilapia)\n\n# The current state of the game is as follows\n# The caterpillar has 3 friends, and has a knife\nfriends(caterpillar) = 3\nhas(caterpillar, knife) = True\n# The caterpillar is named Casper\nname(caterpillar, Casper) = True\n# The donkey is named Cinnamon\nname(donkey, Cinnamon) = True\n# The ferret respects the caterpillar\nrespect(ferret, caterpillar) = True\n# The cockroach does not remove from the board one of the pieces of the caterpillar.\nremove_piece(cockroach, caterpillar) = False\n\n# Based on the game state and the rules and preferences, does the caterpillar proceed to the spot right after the parrot?\nquestion = proceed(caterpillar, spot_after(parrot))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the aardvark has more than 6 friends, then it does not attack the green fields whose owner is the tiger\nRule2: If the leopard eats the food of the aardvark and the baboon respects the aardvark, then the aardvark attacks the green fields of the tiger\nRule3: The aardvark rolls the dice for the raven whenever at least one animal attacks the green fields whose owner is the lion\nRule4: If something attacks the green fields whose owner is the tiger, then it does not eat the food of the black bear\nRule5: If the aardvark has a musical instrument, then it does not attack the green fields whose owner is the tiger\nRule6: If the aardvark works more hours than before, then it does not roll the dice for the raven\nRule7: If the first letter of the name of the aardvark is the same as the first letter of the name of the snail, then the aardvark does not roll the dice for the raven\nRule8: If something rolls the dice for the raven and also winks at the eagle, then it eats the food of the black bear.\n\nRule1 is preferred over Rule2\nRule5 is preferred over Rule2\nRule6 is preferred over Rule3\nRule7 is preferred over Rule3\nRule8 is preferred over Rule4\n\nThe current state of the game is as follows\nThe aardvark has a basket\nThe name of the aardvark is Paco\nThe aardvark reduced her work hours recently\nThe baboon respects the aardvark\nThe leopard eats the food of the aardvark\nThe turtle attacks the green fields whose owner is the lion\n\nBased on the game state and the rules and preferences, does the aardvark eat the food of the black bear?\nQuestion: Does the aardvark eat the food of the black bear?",
        "idx": 349,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the aardvark has more than 6 friends, then the aardvark does not attack the green fields whose owner is the tiger\nrule1() = friends(aardvark) > 6 => not attack(aardvark, green_fields, owner(tiger))\n# Rule2: If the leopard eats the food that belongs to the aardvark and the baboon respects the aardvark, then the aardvark attacks the green fields of the tiger\nrule2() = eat_food(leopard, food_of(aardvark)) & respect(baboon, aardvark) => attack(aardvark, green_fields, owner(tiger))\n# Rule3: The aardvark rolls the dice for the raven whenever at least one animal attacks the green fields whose owner is the lion\nrule3() = attack(something, green_fields, owner(lion)) => roll_dice(aardvark, raven)\n# Rule4: If something attacks the green fields whose owner is the tiger, then it does not eat the food of the black bear\nrule4() = attack(something, green_fields, owner(tiger)) => not eat_food(something, food_of(black_bear))\n# Rule5: Regarding the aardvark, if it has a musical instrument, then we can conclude that it does not attack the green fields whose owner is the tiger\nrule5() = has(aardvark, musical_instrument) => not attack(aardvark, green_fields, owner(tiger))\n# Rule6: If the aardvark works more hours than before, then the aardvark does not roll the dice for the raven\nrule6() = work_hours(aardvark) > previous_work_hours(aardvark) => not roll_dice(aardvark, raven)\n# Rule7: If the aardvark has a name whose first letter is the same as the first letter of the snail's name, then the aardvark does not roll the dice for the raven\nrule7() = first_letter_of(name(aardvark)) == first_letter_of(name(snail)) => not roll_dice(aardvark, raven)\n# Rule8: Be careful when something rolls the dice for the raven and also winks at the eagle because in this case it will surely eat the food of the black bear (this may or may not be problematic).\nrule8() = roll_dice(something, raven) & wink(something, eagle) => eat_food(something, food_of(black_bear))\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule5 is preferred over Rule2\norder(rule5) > order(rule2) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n# Rule8 is preferred over Rule4\norder(rule8) > order(rule4) = True\n\n# The current state of the game is as follows\n# The aardvark has a basket\nhas(aardvark, basket) = True\n# The aardvark is named Paco\nname(aardvark, Paco) = True\n# The aardvark reduced her work hours recently\nreduced_work_hours(aardvark) = True\n# The baboon respects the aardvark\nrespect(baboon, aardvark) = True\n# The leopard eats the food of the aardvark\neat_food(leopard, food_of(aardvark)) = True\n# The turtle attacks the green fields whose owner is the lion\nattack(turtle, green_fields, owner(lion)) = True\n\n# Based on the game state and the rules and preferences, does the aardvark eat the food of the black bear?\nquestion = eat_food(aardvark, food_of(black_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the polar bear does not need support from the eagle, then the eagle knocks down the fortress that belongs to the hare\nRule2: If something does not eat the food of the cockroach but becomes an actual enemy of the sea bass, then it is not going to knock down the fortress that belongs to the hare\nRule3: If the polar bear has a card with a primary color, then it needs support from the eagle\nRule4: If something attacks the green fields whose owner is the carp, then it does not need the support of the eagle\nRule5: If the polar bear has access to an abundance of food, then it needs support from the eagle\nRule6: If the whale rolls the dice for the eagle and the pig rolls the dice for the eagle, then the eagle is not going to become an actual enemy of the sea bass.\n\nRule1 is preferred over Rule2\nRule4 is preferred over Rule3\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe pig removes from the board one of the pieces of the eagle, and rolls the dice for the eagle\nThe polar bear respects the carp and struggles to find food\nThe whale does not roll the dice for the eagle.\n\nBased on the game state and the rules and preferences, does the eagle knock down the fortress of the hare?\nQuestion: Does the eagle knock down the fortress of the hare?",
        "idx": 350,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the polar bear does not need support from the eagle, then the eagle knocks down the fortress that belongs to the hare\nrule1() = not need_support(polar_bear, eagle) => knock_down_fortress(eagle, hare)\n# Rule2: If you see that something does not eat the food of the cockroach but it becomes an actual enemy of the sea bass, what can you certainly conclude? You can conclude that it is not going to knock down the fortress that belongs to the hare\nrule2(something) = not eat_food(something, food_of(cockroach)) & become_enemy(something, sea_bass) => not knock_down_fortress(something, hare)\n# Rule3: Regarding the polar bear, if it has a card with a primary color, then we can conclude that it needs support from the eagle\nrule3() = has(polar_bear, card) & color(card) in primary_colors => need_support(polar_bear, eagle)\n# Rule4: If something attacks the green fields whose owner is the carp, then it does not need the support of the eagle\nrule4(something) = attack(something, green_fields) & owner(green_fields) == carp => not need_support(something, eagle)\n# Rule5: Regarding the polar bear, if it has access to an abundance of food, then we can conclude that it needs support from the eagle\nrule5() = has_access(polar_bear, abundance_of_food) => need_support(polar_bear, eagle)\n# Rule6: For the eagle, if the belief is that the whale rolls the dice for the eagle and the pig rolls the dice for the eagle, then you can add that \"the eagle is not going to become an actual enemy of the sea bass\" to your conclusions.\nrule6() = roll_dice(whale, eagle) & roll_dice(pig, eagle) => not become_enemy(eagle, sea_bass)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The pig removes from the board one of the pieces of the eagle, and rolls the dice for the eagle\nremove(pig, piece, eagle) = True\nroll_dice(pig, eagle) = True\n# The polar bear respects the carp, and struggles to find food\nrespect(polar_bear, carp) = True\nstruggle_to_find_food(polar_bear) = True\n# The whale does not roll the dice for the eagle.\nroll_dice(whale, eagle) = False\n\n# Based on the game state and the rules and preferences, does the eagle knock down the fortress of the hare?\nquestion = knock_down_fortress(eagle, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the parrot has a card whose color appears in the flag of Netherlands, then it removes from the board one of the pieces of the mosquito\nRule2: If something removes from the board one of the pieces of the mosquito, then it holds the same number of points as the sun bear\nRule3: If the polar bear winks at the viperfish and the kiwi rolls the dice for the viperfish, then the viperfish burns the warehouse of the grizzly bear\nRule4: If the first letter of the name of the parrot is the same as the first letter of the name of the jellyfish, then the parrot removes from the board one of the pieces of the mosquito.\n\nThe current state of the game is as follows\nThe name of the jellyfish is Pablo\nThe kiwi rolls the dice for the viperfish\nThe parrot has a red card\nThe name of the parrot is Mojo\nThe polar bear winks at the viperfish.\n\nBased on the game state and the rules and preferences, does the parrot hold the same number of points as the sun bear?\nQuestion: Does the parrot hold the same number of points as the sun bear?",
        "idx": 351,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the parrot has a card whose color appears in the flag of Netherlands, then the parrot removes from the board one of the pieces of the mosquito\nrule1() = has(parrot, card) and color(card) in colors_of(flag_of_Netherlands) => remove_from_board(parrot, piece, mosquito)\n# Rule2: If you are positive that you saw one of the animals removes from the board one of the pieces of the mosquito, you can be certain that it will also hold the same number of points as the sun bear\nrule2(something) = remove_from_board(something, piece, mosquito) => points(something) == points(sun_bear)\n# Rule3: For the viperfish, if the belief is that the polar bear winks at the viperfish and the kiwi rolls the dice for the viperfish, then you can add \"the viperfish burns the warehouse of the grizzly bear\" to your conclusions\nrule3() = wink(polar_bear, viperfish) & roll_dice(kiwi, viperfish) => add_to_conclusions(\"the viperfish burns the warehouse of the grizzly bear\")\n# Rule4: If the parrot has a name whose first letter is the same as the first letter of the jellyfish's name, then the parrot removes from the board one of the pieces of the mosquito.\nrule4() = first_letter_of(name(parrot)) == first_letter_of(name(jellyfish)) => remove_from_board(parrot, piece, mosquito)\n\n# The current state of the game is as follows\n# The jellyfish is named Pablo\nname(jellyfish, Pablo) = True\n# The kiwi rolls the dice for the viperfish\nroll_dice(kiwi, viperfish) = True\n# The parrot has a card that is red in color, and is named Mojo\nhas(parrot, card) = True\ncolor(card, red) = True\nname(parrot, Mojo) = True\n# The polar bear winks at the viperfish.\nwink(polar_bear, viperfish) = True\n\n# Based on the game state and the rules and preferences, does the parrot hold the same number of points as the sun bear?\nquestion = points(parrot) == points(sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something winks at the grasshopper, then the hippopotamus removes one of the pieces of the raven\nRule2: If the hippopotamus has a device to connect to the internet, then it learns elementary resource management from the parrot\nRule3: If the hippopotamus has a musical instrument, then it does not remove one of the pieces of the raven\nRule4: If the hippopotamus has a sharp object, then it learns the basics of resource management from the parrot\nRule5: If the hippopotamus has fewer than 7 friends, then it does not remove one of the pieces of the raven\nRule6: If something does not remove one of the pieces of the raven, then it does not give a magnifying glass to the koala\nRule7: If the sea bass prepares armor for the hippopotamus and the caterpillar does not know the defensive plans of the hippopotamus, then the hippopotamus does not learn the basics of resource management from the parrot.\n\nRule1 is preferred over Rule3\nRule1 is preferred over Rule5\nRule2 is preferred over Rule7\nRule4 is preferred over Rule7\n\nThe current state of the game is as follows\nThe hippopotamus has 1 friend and a love seat sofa\nThe hippopotamus has a basket\nThe sea bass prepares armor for the hippopotamus\nThe caterpillar does not know the defensive plans of the hippopotamus.\n\nBased on the game state and the rules and preferences, does the hippopotamus give a magnifier to the koala?\nQuestion: Does the hippopotamus give a magnifying glass to the koala?",
        "idx": 352,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal winks at the grasshopper, then the hippopotamus removes one of the pieces of the raven\nrule1() = wink(something, grasshopper) => remove_one_piece(hippopotamus, raven)\n# Rule2: Regarding the hippopotamus, if it has a device to connect to the internet, then we can conclude that it learns elementary resource management from the parrot\nrule2() = has(hippopotamus, internet_device) => learns(hippopotamus, elementary_resource_management, parrot)\n# Rule3: Regarding the hippopotamus, if it has a musical instrument, then we can conclude that it does not remove one of the pieces of the raven\nrule3() = has(hippopotamus, musical_instrument) => not remove_one_piece(hippopotamus, raven)\n# Rule4: Regarding the hippopotamus, if it has a sharp object, then we can conclude that it learns the basics of resource management from the parrot\nrule4() = has(hippopotamus, sharp_object) => learns(hippopotamus, basics_of_resource_management, parrot)\n# Rule5: If the hippopotamus has fewer than 7 friends, then the hippopotamus does not remove one of the pieces of the raven\nrule5() = friends(hippopotamus) < 7 => not remove_one_piece(hippopotamus, raven)\n# Rule6: If something does not remove one of the pieces of the raven, then it does not give a magnifying glass to the koala\nrule6() = not remove_one_piece(something, raven) => not give(something, magnifying_glass, koala)\n# Rule7: For the hippopotamus, if the belief is that the sea bass prepares armor for the hippopotamus and the caterpillar does not know the defensive plans of the hippopotamus, then you can add \"the hippopotamus does not learn the basics of resource management from the parrot\" to your conclusions.\nrule7() = prepares_armor(sea_bass, hippopotamus) & not knows(caterpillar, defensive_plans, hippopotamus) => not learns(hippopotamus, basics_of_resource_management, parrot)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule4 is preferred over Rule7\norder(rule4) > order(rule7) = True\n\n# The current state of the game is as follows\n# The hippopotamus has 1 friend, and has a love seat sofa\nfriends(hippopotamus) = 1\nhas(hippopotamus, love_seat_sofa) = True\n# The hippopotamus has a basket\nhas(hippopotamus, basket) = True\n# The sea bass prepares armor for the hippopotamus\nprepares_armor(sea_bass, hippopotamus) = True\n# The caterpillar does not know the defensive plans of the hippopotamus.\nknows(caterpillar, defensive_plans, hippopotamus) = False\n\n# Based on the game state and the rules and preferences, does the hippopotamus give a magnifier to the koala?\nquestion = give(hippopotamus, magnifying_glass, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the donkey has a card and the color of the card is one of the rainbow colors, then it owes money to the penguin\nRule2: If the meerkat has something to sit on, then it gives a magnifier to the penguin\nRule3: If something owes money to the elephant, then the penguin does not show all her cards to the panda bear\nRule4: If the donkey has access to an abundance of food, then it owes money to the penguin\nRule5: If the meerkat has more than one friend, then it gives a magnifying glass to the penguin\nRule6: If the donkey owes money to the penguin and the meerkat does not give a magnifier to the penguin, then the penguin shows all her cards to the panda bear\nRule7: If something holds an equal number of points as the gecko, then the meerkat does not give a magnifying glass to the penguin.\n\nRule6 is preferred over Rule3\nRule7 is preferred over Rule2\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe donkey has a card\nThe color of the card is indigo\nThe donkey struggles to find food\nThe meerkat has 4 energetic friends and 5 non-energetic friends\nThe meerkat has arugula.\n\nBased on the game state and the rules and preferences, does the penguin show all her cards to the panda bear?\nQuestion: Does the penguin show all her cards to the panda bear?",
        "idx": 353,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the donkey, if it has a card whose color is one of the rainbow colors, then we can conclude that it owes $$$ to the penguin\nrule1() = has(donkey, card) and color(card) in rainbow_colors => owes(donkey, money, penguin)\n# Rule2: Regarding the meerkat, if it has something to sit on, then we can conclude that it gives a magnifier to the penguin\nrule2() = has(meerkat, something_to_sit_on) => give(meerkat, magnifier, penguin)\n# Rule3: If at least one animal owes $$$ to the elephant, then the penguin does not show all her cards to the panda bear\nrule3(something) = owes(something, money, elephant) => not show_all_cards(penguin, panda_bear)\n# Rule4: If the donkey has access to an abundance of food, then the donkey owes money to the penguin\nrule4() = has_access(donkey, abundance_of_food) => owes(donkey, money, penguin)\n# Rule5: Regarding the meerkat, if it has more than one friend, then we can conclude that it gives a magnifying glass to the penguin\nrule5() = friends(meerkat) > 1 => give(meerkat, magnifying_glass, penguin)\n# Rule6: For the penguin, if the belief is that the donkey owes money to the penguin and the meerkat does not give a magnifier to the penguin, then you can add \"the penguin shows all her cards to the panda bear\" to your conclusions\nrule6() = owes(donkey, money, penguin) & not give(meerkat, magnifier, penguin) => show_all_cards(penguin, panda_bear)\n# Rule7: If at least one animal holds an equal number of points as the gecko, then the meerkat does not give a magnifying glass to the penguin.\nrule7(something) = points(something) == points(gecko) => not give(meerkat, magnifying_glass, penguin)\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n# Rule7 is preferred over Rule2\norder(rule7) > order(rule2) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The donkey has a card that is indigo in color\nhas(donkey, card) = True\ncolor(card, indigo) = True\n# The donkey struggles to find food\nstruggles_to_find_food(donkey) = True\n# The meerkat has 4 friends that are energetic and 5 friends that are not, and has some arugula.\nenergetic_friends(meerkat) = 4\nnon_energetic_friends(meerkat) = 5\nhas(meerkat, arugula) = True\n\n# Based on the game state and the rules and preferences, does the penguin show all her cards to the panda bear?\nquestion = show_all_cards(penguin, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the moose is the same as the first letter of the name of the parrot, then the moose does not give a magnifier to the raven\nRule2: If the moose killed the mayor, then it does not give a magnifying glass to the raven\nRule3: If something gives a magnifier to the raven, then the wolverine eats the food of the puffin\nRule4: If the moose has a card with a primary color, then it gives a magnifying glass to the raven\nRule5: If something offers a job to the sun bear, then it does not eat the food that belongs to the puffin.\n\nRule1 is preferred over Rule4\nRule2 is preferred over Rule4\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe moose has a green card\nThe name of the moose is Meadow\nThe name of the parrot is Bella\n\nBased on the game state and the rules and preferences, does the wolverine eat the food of the puffin?\nQuestion: Does the wolverine eat the food of the puffin?",
        "idx": 354,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the moose, if it has a name whose first letter is the same as the first letter of the parrot's name, then we can conclude that it does not give a magnifier to the raven\nrule1() = first_letter_of(name(moose)) == first_letter_of(name(parrot)) => not give(moose, magnifier, raven)\n# Rule2: Regarding the moose, if it killed the mayor, then we can conclude that it does not give a magnifying glass to the raven\nrule2() = killed(moose, mayor) => not give(moose, magnifying_glass, raven)\n# Rule3: If at least one animal gives a magnifier to the raven, then the wolverine eats the food of the puffin\nrule3() = give(something, magnifier, raven) => eat(wolverine, food_of(puffin))\n# Rule4: Regarding the moose, if it has a card with a primary color, then we can conclude that it gives a magnifying glass to the raven\nrule4() = has(moose, card) and color(card) in primary_colors => give(moose, magnifying_glass, raven)\n# Rule5: If something offers a job to the sun bear, then it does not eat the food that belongs to the puffin.\nrule5(something) = offer_job_position(something, sun_bear) => not eat(something, food_of(puffin))\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The moose has a card that is green in color, and is named Meadow\nhas(moose, card) = True\ncolor(card, green) = True\nname(moose, Meadow) = True\n# The parrot is named Bella.\nname(parrot, Bella) = True\n\n# Based on the game state and the rules and preferences, does the wolverine eat the food of the puffin?\nquestion = eat(wolverine, food_of(puffin))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo has a card whose color starts with the letter \"v\", then the kangaroo winks at the ferret\nRule2: If something owes money to the catfish, then the kangaroo does not wink at the ferret\nRule3: If the kangaroo winks at the ferret, then the ferret does not show all her cards to the octopus.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe kangaroo has a card that is violet in color.\n\nBased on the game state and the rules and preferences, does the ferret show all her cards to the octopus?\nQuestion: Does the ferret show all her cards to the octopus?",
        "idx": 355,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the kangaroo has a card whose color starts with the letter \"v\", then the kangaroo winks at the ferret\nrule1() = color_starts_with(kangaroo, \"v\") => wink(kangaroo, ferret)\n# Rule2: If at least one animal owes $$$ to the catfish, then the kangaroo does not wink at the ferret\nrule2() = owes(something, money, catfish) => not wink(kangaroo, ferret)\n# Rule3: If the kangaroo winks at the ferret, then the ferret is not going to show her cards (all of them) to the octopus.\nrule3() = wink(kangaroo, ferret) => not show_cards(ferret, octopus)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The kangaroo has a card that is violet in color.\ncolor(kangaroo_card, violet) = True\n\n# Based on the game state and the rules and preferences, does the ferret show all her cards to the octopus?\nquestion = show_cards(ferret, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the moose and steals five points from the pig, then it does not offer a job to the sun bear\nRule2: If the first letter of the name of the turtle is the same as the first letter of the name of the eagle, then the turtle offers a job position to the sun bear\nRule3: If something does not offer a job position to the sun bear, then it owes money to the squirrel.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the eagle is Max\nThe turtle has 3 playful friends and 7 non-playful friends\nThe turtle steals 5 points from the pig\nThe name of the turtle is Blossom\nThe turtle does not roll the dice for the moose.\n\nBased on the game state and the rules and preferences, does the turtle owe money to the squirrel?\nQuestion: Does the turtle owe money to the squirrel?",
        "idx": 356,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something rolls the dice for the moose and steals five points from the pig, what can you certainly conclude? You can conclude that it does not offer a job to the sun bear\nrule1() = roll_dice(something, moose) & steal_points(something, 5, pig) => not offer_job_position(something, sun_bear)\n# Rule2: If the turtle has a name whose first letter is the same as the first letter of the eagle's name, then the turtle offers a job position to the sun bear\nrule2() = first_letter_of(name(turtle)) == first_letter_of(name(eagle)) => offer_job_position(turtle, sun_bear)\n# Rule3: If something does not offer a job position to the sun bear, then it owes money to the squirrel.\nrule3(something) = not offer_job_position(something, sun_bear) => owe(something, money, squirrel)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The eagle is named Max\nname(eagle, Max) = True\n# The turtle has three friends that are playful and 7 friends that are not, and steals five points from the pig\nplayful_friends(turtle) = 3\nnon_playful_friends(turtle) = 7\nsteal_points(turtle, 5, pig) = True\n# The turtle is named Blossom, and does not roll the dice for the moose.\nname(turtle, Blossom) = True\nroll_dice(turtle, moose) = False\n\n# Based on the game state and the rules and preferences, does the turtle owe money to the squirrel?\nquestion = owe(turtle, money, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not eat the food that belongs to the kangaroo, then it knows the defense plan of the wolverine\nRule2: If the jellyfish has fewer than 6 friends, then it does not eat the food of the kangaroo\nRule3: If the jellyfish has a musical instrument, then it does not eat the food of the kangaroo.\n\nThe current state of the game is as follows\nThe jellyfish has a guitar\nThe jellyfish has nine friends.\n\nBased on the game state and the rules and preferences, does the jellyfish know the defensive plans of the wolverine?\nQuestion: Does the jellyfish know the defensive plans of the wolverine?",
        "idx": 357,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not eat the food that belongs to the kangaroo, then it knows the defense plan of the wolverine\nrule1(something) = not eat_food(something, food_of(kangaroo)) => knows(something, defense_plans, wolverine)\n# Rule2: Regarding the jellyfish, if it has fewer than 6 friends, then we can conclude that it does not eat the food of the kangaroo\nrule2() = friends(jellyfish) < 6 => not eat_food(jellyfish, food_of(kangaroo))\n# Rule3: If the jellyfish has a musical instrument, then the jellyfish does not eat the food of the kangaroo.\nrule3() = has(jellyfish, musical_instrument) => not eat_food(jellyfish, food_of(kangaroo))\n\n# The current state of the game is as follows\n# The jellyfish has a guitar\nhas(jellyfish, guitar) = True\n# The jellyfish has nine friends.\nfriends(jellyfish) = 9\n\n# Based on the game state and the rules and preferences, does the jellyfish know the defensive plans of the wolverine?\nquestion = knows(jellyfish, defense_plans, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squirrel has a card and the color of the card is one of the rainbow colors, then it owes money to the buffalo\nRule2: If the squirrel has something to sit on, then it does not show all her cards to the doctorfish\nRule3: If something does not owe money to the buffalo and also does not show all her cards to the doctorfish, then it will not prepare armor for the mosquito\nRule4: If the squirrel has more than eleven friends, then it does not show all her cards to the doctorfish\nRule5: If something needs support from the bat, then the squirrel does not owe money to the buffalo.\n\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe black bear needs support from the bat\nThe squirrel has a bench\nThe squirrel has two friends\nThe squirrel has a card that is red in color\nThe starfish gives a magnifying glass to the rabbit\n\nBased on the game state and the rules and preferences, does the squirrel prepare armor for the mosquito?\nQuestion: Does the squirrel prepare armor for the mosquito?",
        "idx": 358,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the squirrel, if it has a card whose color is one of the rainbow colors, then we can conclude that it owes money to the buffalo\nrule1() = has(squirrel, card) and color(card) in rainbow_colors => owe(squirrel, money, buffalo)\n# Rule2: If the squirrel has something to sit on, then the squirrel does not show her cards (all of them) to the doctorfish\nrule2() = has(squirrel, something_to_sit_on) => not show_cards(squirrel, doctorfish)\n# Rule3: Be careful when something does not owe $$$ to the buffalo and also does not show all her cards to the doctorfish because in this case it will surely not prepare armor for the mosquito (this may or may not be problematic)\nrule3(something) = not owe(something, money, buffalo) and not show_cards(something, doctorfish) => not prepare_armor(something, mosquito)\n# Rule4: If the squirrel has more than eleven friends, then the squirrel does not show her cards (all of them) to the doctorfish\nrule4() = friends(squirrel) > 11 => not show_cards(squirrel, doctorfish)\n# Rule5: If at least one animal needs support from the bat, then the squirrel does not owe money to the buffalo.\nrule5() = needs_support(something, bat) => not owe(squirrel, money, buffalo)\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The black bear needs support from the bat\nneeds_support(black_bear, bat) = True\n# The squirrel has a bench\nhas(squirrel, bench) = True\n# The squirrel has two friends\nfriends(squirrel) = 2\n# The squirrel has a card that is red in color\nhas(squirrel, card) = True\ncolor(card, red) = True\n# The starfish gives a magnifier to the rabbit\n# Background information: magnifier is the same as magnifying glass\ngive(starfish, magnifying_glass, rabbit) = True\n\n# Based on the game state and the rules and preferences, does the squirrel prepare armor for the mosquito?\nquestion = prepare_armor(squirrel, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the snail is the same as the first letter of the name of the cricket, then the snail does not offer a job to the panda bear\nRule2: If the lion eats the food of the panda bear and the snail does not offer a job to the panda bear, then the panda bear eats the food of the cat\nRule3: If at least one animal shows all her cards to the black bear, then the panda bear does not eat the food of the cat\nRule4: If something winks at the raven, then it eats the food of the panda bear\nRule5: If the snail has a leafy green vegetable, then it offers a job to the panda bear\nRule6: If the snail has something to sit on, then it offers a job position to the panda bear.\n\nRule1 is preferred over Rule5\nRule1 is preferred over Rule6\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe name of the cricket is Pashmak\nThe lion winks at the raven\nThe snail has green tea and kale\nThe name of the snail is Max\n\nBased on the game state and the rules and preferences, does the panda bear eat the food of the cat?\nQuestion: Does the panda bear eat the food of the cat?",
        "idx": 359,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the snail has a name whose first letter is the same as the first letter of the cricket's name, then the snail does not offer a job to the panda bear\nrule1() = first_letter_of(name(snail)) == first_letter_of(name(cricket)) => not offer_job_position(snail, panda_bear)\n# Rule2: If the lion eats the food that belongs to the panda bear and the snail does not offer a job to the panda bear, then, inevitably, the panda bear eats the food that belongs to the cat\nrule2() = eat_food(lion, food_of(panda_bear)) & not offer_job_position(snail, panda_bear) => eat_food(panda_bear, food_of(cat))\n# Rule3: If at least one animal shows all her cards to the black bear, then the panda bear does not eat the food of the cat\nrule3() = show_cards(something, all_cards) to black_bear => not eat_food(panda_bear, food_of(cat))\n# Rule4: If you are positive that you saw one of the animals winks at the raven, you can be certain that it will also eat the food of the panda bear\nrule4() = wink(something, raven) => eat_food(something, food_of(panda_bear))\n# Rule5: If the snail has a leafy green vegetable, then the snail offers a job to the panda bear\nrule5() = has(snail, leafy_green_vegetable) => offer_job_position(snail, panda_bear)\n# Rule6: If the snail has something to sit on, then the snail offers a job position to the panda bear.\nrule6() = has(snail, something_to_sit_on) => offer_job_position(snail, panda_bear)\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cricket is named Pashmak\nname(cricket, Pashmak) = True\n# The lion winks at the raven\nwink(lion, raven) = True\n# The snail has a green tea, has some kale, and is named Max.\nhas(snail, green_tea) = True\nhas(snail, kale) = True\nname(snail, Max) = True\n\n# Based on the game state and the rules and preferences, does the panda bear eat the food of the cat?\nquestion = eat_food(panda_bear, food_of(cat))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus knocks down the fortress that belongs to the moose, then the moose prepares armor for the squirrel\nRule2: If something prepares armor for the squirrel, then it steals five of the points of the caterpillar.\n\nThe current state of the game is as follows\nThe octopus knocks down the fortress of the moose.\n\nBased on the game state and the rules and preferences, does the moose steal five points from the caterpillar?\nQuestion: Does the moose steal five points from the caterpillar?",
        "idx": 360,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the octopus knocks down the fortress that belongs to the moose, then the moose prepares armor for the squirrel\nrule1() = knocks_down(octopus, fortress, moose) => prepare_armor(moose, squirrel)\n# Rule2: If something prepares armor for the squirrel, then it steals five of the points of the caterpillar, too.\nrule2(something) = prepare_armor(something, squirrel) => steal_points(something, caterpillar, 5)\n\n# The current state of the game is as follows\n# The octopus knocks down the fortress of the moose.\nknocks_down(octopus, fortress, moose) = True\n\n# Based on the game state and the rules and preferences, does the moose steal five points from the caterpillar?\nquestion = steal_points(moose, caterpillar, 5)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the cricket is the same as the first letter of the name of the elephant, then the cricket does not knock down the fortress of the moose\nRule2: If the first letter of the name of the raven is the same as the first letter of the name of the grizzly bear, then the raven does not remove from the board one of the pieces of the cricket\nRule3: If the raven has a leafy green vegetable, then the raven does not remove from the board one of the pieces of the cricket\nRule4: If something offers a job to the moose but does not knock down the fortress that belongs to the moose, then it does not hold an equal number of points as the cow\nRule5: If the belief is that the panda bear does not eat the food of the cricket and the raven does not remove from the board one of the pieces of the cricket, then the cricket holds an equal number of points as the cow\nRule6: If the cricket has a card and the color of the card is one of the rainbow colors, then the cricket does not knock down the fortress that belongs to the moose\nRule7: If the cricket is a fan of Chris Ronaldo, then it offers a job to the moose.\n\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe cricket has a violet card\nThe name of the cricket is Peddi\nThe cricket supports Chris Ronaldo\nThe name of the elephant is Lola\nThe name of the grizzly bear is Cinnamon\nThe raven has a knife\nThe name of the raven is Casper\n\nBased on the game state and the rules and preferences, does the cricket hold the same number of points as the cow?\nQuestion: Does the cricket hold the same number of points as the cow?",
        "idx": 361,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cricket, if it has a name whose first letter is the same as the first letter of the elephant's name, then we can conclude that it does not knock down the fortress of the moose\nrule1() = first_letter_of(name(cricket)) == first_letter_of(name(elephant)) => not knock_down(cricket, fortress, moose)\n# Rule2: If the raven has a name whose first letter is the same as the first letter of the grizzly bear's name, then the raven does not remove from the board one of the pieces of the cricket\nrule2() = first_letter_of(name(raven)) == first_letter_of(name(grizzly_bear)) => not remove_from_board(raven, piece, cricket)\n# Rule3: If the raven has a leafy green vegetable, then the raven does not remove from the board one of the pieces of the cricket\nrule3() = has(raven, leafy_green_vegetable) => not remove_from_board(raven, piece, cricket)\n# Rule4: Be careful when something offers a job to the moose but does not knock down the fortress that belongs to the moose because in this case it will, surely, not hold an equal number of points as the cow (this may or may not be problematic)\nrule4(something) = offer_job_position(something, moose) & not knock_down(something, fortress, moose) => not hold_equal_number_of_points(something, cow)\n# Rule5: For the cricket, if the belief is that the panda bear does not eat the food of the cricket and the raven does not remove from the board one of the pieces of the cricket, then you can add \"the cricket holds an equal number of points as the cow\" to your conclusions\nrule5() = not eat_food(panda_bear, food_of(cricket)) & not remove_from_board(raven, piece, cricket) => hold_equal_number_of_points(cricket, cow)\n# Rule6: If the cricket has a card whose color is one of the rainbow colors, then the cricket does not knock down the fortress that belongs to the moose\nrule6() = has(cricket, card) and color(card) in rainbow_colors => not knock_down(cricket, fortress, moose)\n# Rule7: If the cricket is a fan of Chris Ronaldo, then the cricket offers a job to the moose.\nrule7() = fan_of(cricket, Chris_Ronaldo) => offer_job_position(cricket, moose)\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The cricket has a card that is violet in color\nhas(cricket, card) = True\ncolor(card, violet) = True\n# The cricket is named Peddi, and supports Chris Ronaldo\nname(cricket, Peddi) = True\nsupports(cricket, Chris_Ronaldo) = True\n# The elephant is named Lola\nname(elephant, Lola) = True\n# The grizzly bear is named Cinnamon\nname(grizzly_bear, Cinnamon) = True\n# The raven has a knife\nhas(raven, knife) = True\n# The raven is named Casper\nname(raven, Casper) = True\n\n# Based on the game state and the rules and preferences, does the cricket hold the same number of points as the cow?\nquestion = hold_equal_number_of_points(cricket, cow)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the rabbit is the same as the first letter of the name of the hare, then the rabbit knocks down the fortress that belongs to the donkey\nRule2: If the blobfish has access to an abundance of food, then it offers a job position to the donkey\nRule3: If the first letter of the name of the blobfish is the same as the first letter of the name of the carp, then the blobfish offers a job position to the donkey\nRule4: If the belief is that the blobfish offers a job position to the donkey and the rabbit learns elementary resource management from the donkey, then you can add \"the donkey winks at the mosquito\" to your conclusions.\n\nThe current state of the game is as follows\nThe blobfish dreamed of a luxury aircraft\nThe name of the blobfish is Pashmak\nThe name of the carp is Pablo\nThe name of the hare is Bella\nThe name of the rabbit is Blossom.\n\nBased on the game state and the rules and preferences, does the donkey wink at the mosquito?\nQuestion: Does the donkey wink at the mosquito?",
        "idx": 362,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the rabbit, if it has a name whose first letter is the same as the first letter of the hare's name, then we can conclude that it knocks down the fortress that belongs to the donkey\nrule1() = first_letter_of(name(rabbit)) == first_letter_of(name(hare)) => knock_down(rabbit, fortress, donkey)\n# Rule2: Regarding the blobfish, if it has access to an abundance of food, then we can conclude that it offers a job position to the donkey\nrule2() = has_access(blobfish, abundance_of_food) => offer_job_position(blobfish, donkey)\n# Rule3: If the blobfish has a name whose first letter is the same as the first letter of the carp's name, then the blobfish offers a job position to the donkey\nrule3() = first_letter_of(name(blobfish)) == first_letter_of(name(carp)) => offer_job_position(blobfish, donkey)\n# Rule4: For the donkey, if the belief is that the blobfish offers a job position to the donkey and the rabbit learns elementary resource management from the donkey, then you can add \"the donkey winks at the mosquito\" to your conclusions.\nrule4() = belief(offer_job_position(blobfish, donkey)) & learn(rabbit, elementary_resource_management_from(donkey)) => add_conclusion(\"the donkey winks at the mosquito\")\n\n# The current state of the game is as follows\n# The blobfish dreamed of a luxury aircraft, and is named Pashmak\ndream(blobfish, luxury_aircraft) = True\nname(blobfish, Pashmak) = True\n# The carp is named Pablo\nname(carp, Pablo) = True\n# The hare is named Bella\nname(hare, Bella) = True\n# The rabbit is named Blossom.\nname(rabbit, Blossom) = True\n\n# Based on the game state and the rules and preferences, does the donkey wink at the mosquito?\nquestion = \"the donkey winks at the mosquito\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the oscar offers a job position to the lobster and the koala burns the warehouse of the lobster, then the lobster eats the food of the donkey\nRule2: If something eats the food that belongs to the donkey, then it winks at the swordfish, too\nRule3: If the lobster has a card whose color appears in the flag of Belgium, then it does not eat the food that belongs to the donkey.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe koala burns the warehouse of the lobster\nThe lobster has a card that is orange in color\nThe lobster purchased a luxury aircraft\nThe oscar offers a job to the lobster.\n\nBased on the game state and the rules and preferences, does the lobster wink at the swordfish?\nQuestion: Does the lobster wink at the swordfish?",
        "idx": 363,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the oscar offers a job position to the lobster and the koala burns the warehouse of the lobster, then the lobster eats the food of the donkey\nrule1() = offer_job_position(oscar, lobster) & burn_warehouse(koala, lobster) => eat_food(lobster, food_of(donkey))\n# Rule2: If something eats the food that belongs to the donkey, then it winks at the swordfish, too\nrule2(something) = eat_food(something, food_of(donkey)) => wink(something, swordfish)\n# Rule3: If the lobster has a card whose color appears in the flag of Belgium, then the lobster does not eat the food that belongs to the donkey.\nrule3() = has(lobster, card) & color(card) in colors_of_Belgium_flag => not eat_food(lobster, food_of(donkey))\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The koala burns the warehouse of the lobster\nburn_warehouse(koala, lobster) = True\n# The lobster has a card that is orange in color\nhas(lobster, card) = True\ncolor(card, orange) = True\n# The lobster purchased a luxury aircraft\nowns(lobster, luxury_aircraft) = True\n# The oscar offers a job to the lobster.\noffer_job_position(oscar, lobster) = True\n\n# Based on the game state and the rules and preferences, does the lobster wink at the swordfish?\nquestion = wink(lobster, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grasshopper does not roll the dice for the cow, then the cow does not wink at the cat\nRule2: If something does not need the support of the lion but raises a flag of peace for the cheetah, then it does not roll the dice for the cow.\n\nThe current state of the game is as follows\nThe grasshopper raises a peace flag for the cheetah\nThe grasshopper does not need support from the lion.\n\nBased on the game state and the rules and preferences, does the cow wink at the cat?\nQuestion: Does the cow wink at the cat?",
        "idx": 364,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grasshopper does not roll the dice for the cow, then the cow does not wink at the cat\nrule1() = not roll_dice(grasshopper, cow) => not wink(cow, cat)\n# Rule2: Be careful when something does not need the support of the lion but raises a flag of peace for the cheetah because in this case it certainly does not roll the dice for the cow (this may or may not be problematic).\nrule2(something) = not need_support(something, lion) & raise_flag_of_peace(something, cheetah) => not roll_dice(something, cow)\n\n# The current state of the game is as follows\n# The grasshopper raises a peace flag for the cheetah\nraise_flag_of_peace(grasshopper, cheetah) = True\n# The grasshopper does not need support from the lion.\nneed_support(grasshopper, lion) = False\n\n# Based on the game state and the rules and preferences, does the cow wink at the cat?\nquestion = wink(cow, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tiger voted for the mayor, then it learns elementary resource management from the cheetah\nRule2: The tiger winks at the hare whenever at least one animal winks at the lion\nRule3: If the tiger has a sharp object, then it learns elementary resource management from the cheetah\nRule4: If something knows the defense plan of the hare and also learns elementary resource management from the cheetah, then it needs the support of the donkey\nRule5: The tiger does not learn elementary resource management from the cheetah, in the case where the crocodile attacks the green fields of the tiger.\n\nRule5 is preferred over Rule1\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cat winks at the lion\nThe tiger assassinated the mayor and has a blade.\n\nBased on the game state and the rules and preferences, does the tiger need support from the donkey?\nQuestion: Does the tiger need support from the donkey?",
        "idx": 365,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the tiger voted for the mayor, then the tiger learns elementary resource management from the cheetah\nrule1() = voted(tiger, mayor) => learn(tiger, elementary_resource_management, cheetah)\n# Rule2: The tiger winks at the hare whenever at least one animal winks at the lion\nrule2() = wink(tiger, hare) if wink(something, lion)\n# Rule3: If the tiger has a sharp object, then the tiger learns elementary resource management from the cheetah\nrule3() = has(tiger, sharp_object) => learn(tiger, elementary_resource_management, cheetah)\n# Rule4: Be careful when something knows the defense plan of the hare and also learns elementary resource management from the cheetah because in this case it will surely need the support of the donkey (this may or may not be problematic)\nrule4(something) = knows(something, defense_plan, hare) & learn(something, elementary_resource_management, cheetah) => need_support(something, donkey)\n# Rule5: The tiger does not learn elementary resource management from the cheetah, in the case where the crocodile attacks the green fields of the tiger.\nrule5() = attack(crocodile, green_fields, tiger) => not learn(tiger, elementary_resource_management, cheetah)\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cat winks at the lion\nwink(cat, lion) = True\n# The tiger assassinated the mayor, and has a blade.\nassassinate(tiger, mayor) = True\nhas(tiger, blade) = True\n\n# Based on the game state and the rules and preferences, does the tiger need support from the donkey?\nquestion = need_support(tiger, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the phoenix has a device to connect to the internet, then it gives a magnifying glass to the rabbit\nRule2: If the phoenix has a leafy green vegetable, then it does not give a magnifying glass to the rabbit\nRule3: If the phoenix does not have her keys, then it does not give a magnifying glass to the rabbit\nRule4: If the name of the blobfish starts with the same letter as the name of the octopus, then it offers a job to the rabbit\nRule5: If the belief is that the blobfish offers a job to the rabbit and the phoenix gives a magnifying glass to the rabbit, then you can add that \"the rabbit is not going to respect the polar bear\" to your conclusions\nRule6: If the raven respects the blobfish, then the blobfish respects the rabbit\nRule7: If the name of the phoenix starts with the same letter as the name of the puffin, then it gives a magnifier to the rabbit\nRule8: If the blobfish respects the rabbit, then the rabbit respects the polar bear.\n\nRule2 is preferred over Rule1\nRule2 is preferred over Rule7\nRule3 is preferred over Rule1\nRule3 is preferred over Rule7\nRule8 is preferred over Rule5\n\nThe current state of the game is as follows\nThe blobfish holds the same number of points as the spider, and is named Max\nThe name of the octopus is Milo\nThe phoenix has a blade and a cutter\nThe name of the phoenix is Cinnamon\nThe name of the puffin is Chickpea\nThe raven respects the blobfish.\n\nBased on the game state and the rules and preferences, does the rabbit respect the polar bear?\nQuestion: Does the rabbit respect the polar bear?",
        "idx": 366,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the phoenix, if it has a device to connect to the internet, then we can conclude that it gives a magnifying glass to the rabbit\nrule1() = has(phoenix, device_to_connect_to_internet) => give(phoenix, magnifying_glass, rabbit)\n# Rule2: If the phoenix has a leafy green vegetable, then the phoenix does not give a magnifying glass to the rabbit\nrule2() = has(phoenix, leafy_green_vegetable) => not give(phoenix, magnifying_glass, rabbit)\n# Rule3: If the phoenix does not have her keys, then the phoenix does not give a magnifying glass to the rabbit\nrule3() = not has(phoenix, keys) => not give(phoenix, magnifying_glass, rabbit)\n# Rule4: Regarding the blobfish, if it has a name whose first letter is the same as the first letter of the octopus's name, then we can conclude that it offers a job to the rabbit\nrule4() = first_letter_of(name(blobfish)) == first_letter_of(name(octopus)) => offer_job(blobfish, rabbit)\n# Rule5: For the rabbit, if the belief is that the blobfish offers a job to the rabbit and the phoenix gives a magnifying glass to the rabbit, then you can add that \"the rabbit is not going to respect the polar bear\" to your conclusions\nrule5() = belief(offer_job(blobfish, rabbit)) & belief(give(phoenix, magnifying_glass, rabbit)) => add_conclusion(\"the rabbit is not going to respect the polar bear\")\n# Rule6: The blobfish unquestionably respects the rabbit, in the case where the raven respects the blobfish\nrule6() = respect(raven, blobfish) => respect(blobfish, rabbit)\n# Rule7: Regarding the phoenix, if it has a name whose first letter is the same as the first letter of the puffin's name, then we can conclude that it gives a magnifier to the rabbit\nrule7() = first_letter_of(name(phoenix)) == first_letter_of(name(puffin)) => give(phoenix, magnifier, rabbit)\n# Rule8: If the blobfish respects the rabbit, then the rabbit respects the polar bear.\nrule8() = respect(blobfish, rabbit) => respect(rabbit, polar_bear)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule2 is preferred over Rule7\norder(rule2) > order(rule7) = True\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n\n# The current state of the game is as follows\n# The blobfish holds the same number of points as the spider, and is named Max\npoints(blobfish) == points(spider) = True\nname(blobfish, Max) = True\n# The octopus is named Milo\nname(octopus, Milo) = True\n# The phoenix has a blade, and has a cutter\nhas(phoenix, blade) = True\nhas(phoenix, cutter) = True\n# The phoenix is named Cinnamon\nname(phoenix, Cinnamon) = True\n# The puffin is named Chickpea\nname(puffin, Chickpea) = True\n# The raven respects the blobfish.\nrespect(raven, blobfish) = True\n\n# Based on the game state and the rules and preferences, does the rabbit respect the polar bear?\nquestion = respect(rabbit, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sea bass has difficulty to find food, then it respects the hippopotamus\nRule2: The sea bass rolls the dice for the tilapia, in the case where the eagle knows the defensive plans of the sea bass\nRule3: If something respects the hippopotamus, then it holds an equal number of points as the blobfish\nRule4: If the sea bass has a leafy green vegetable, then it does not need the support of the whale\nRule5: If something needs the support of the whale and also rolls the dice for the tilapia, then it will not hold an equal number of points as the blobfish\nRule6: The sea bass needs the support of the whale, in the case where the ferret winks at the sea bass.\n\nRule4 is preferred over Rule6\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe eagle knows the defensive plans of the sea bass\nThe ferret winks at the sea bass\nThe sea bass holds the same number of points as the penguin, and struggles to find food.\n\nBased on the game state and the rules and preferences, does the sea bass hold the same number of points as the blobfish?\nQuestion: Does the sea bass hold the same number of points as the blobfish?",
        "idx": 367,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sea bass has difficulty to find food, then the sea bass respects the hippopotamus\nrule1() = difficulty_to_find_food(sea_bass) => respect(sea_bass, hippopotamus)\n# Rule2: The sea bass unquestionably rolls the dice for the tilapia, in the case where the eagle knows the defensive plans of the sea bass\nrule2() = knows(eagle, defensive_plans, sea_bass) => roll_dice(sea_bass, tilapia)\n# Rule3: If you are positive that you saw one of the animals respects the hippopotamus, you can be certain that it will also hold an equal number of points as the blobfish\nrule3(something) = respect(something, hippopotamus) => points(something) == points(blobfish)\n# Rule4: Regarding the sea bass, if it has a leafy green vegetable, then we can conclude that it does not need the support of the whale\nrule4() = has(sea_bass, leafy_green_vegetable) => not need_support(sea_bass, whale)\n# Rule5: Be careful when something needs the support of the whale and also rolls the dice for the tilapia because in this case it will surely not hold an equal number of points as the blobfish (this may or may not be problematic)\nrule5() = need_support(something, whale) & roll_dice(something, tilapia) => not points(something) == points(blobfish)\n# Rule6: The sea bass unquestionably needs the support of the whale, in the case where the ferret winks at the sea bass.\nrule6() = wink(ferret, sea_bass) => need_support(sea_bass, whale)\n# Rule4 is preferred over Rule6\norder(rule4) > order(rule6) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The eagle knows the defensive plans of the sea bass\nknows(eagle, defensive_plans, sea_bass) = True\n# The ferret winks at the sea bass\nwink(ferret, sea_bass) = True\n# The sea bass holds the same number of points as the penguin, and struggles to find food.\npoints(sea_bass) == points(penguin) = True\ndifficulty_to_find_food(sea_bass) = True\n\n# Based on the game state and the rules and preferences, does the sea bass hold the same number of points as the blobfish?\nquestion = points(sea_bass) == points(blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not roll the dice for the carp, then it burns the warehouse of the turtle\nRule2: If something burns the warehouse of the turtle, then it rolls the dice for the puffin\nRule3: If the hippopotamus has fewer than 13 friends, then it becomes an enemy of the kiwi\nRule4: If something does not roll the dice for the elephant, then it sings a victory song for the cat.\n\nThe current state of the game is as follows\nThe hippopotamus has 5 wise friends and 4 non-wise friends\nThe hippopotamus rolls the dice for the carp but does not roll the dice for the elephant\nThe penguin rolls the dice for the lobster.\n\nBased on the game state and the rules and preferences, does the hippopotamus roll the dice for the puffin?\nQuestion: Does the hippopotamus roll the dice for the puffin?",
        "idx": 368,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not roll the dice for the carp, you can be certain that it will burn the warehouse of the turtle without a doubt\nrule1(something) = not roll_dice(something, carp) => burn_warehouse(something, turtle)\n# Rule2: If something burns the warehouse of the turtle, then it rolls the dice for the puffin, too\nrule2(something) = burn_warehouse(something, turtle) => roll_dice(something, puffin)\n# Rule3: Regarding the hippopotamus, if it has fewer than 13 friends, then we can conclude that it becomes an actual enemy of the kiwi\nrule3() = friends(hippopotamus) < 13 => become_enemy(hippopotamus, kiwi)\n# Rule4: If something does not roll the dice for the elephant, then it sings a victory song for the cat.\nrule4(something) = not roll_dice(something, elephant) => sing_victory_song(something, cat)\n\n# The current state of the game is as follows\n# The hippopotamus has 5 friends that are wise and four friends that are not\nwise_friends(hippopotamus) = 5\nnon_wise_friends(hippopotamus) = 4\n# The hippopotamus rolls the dice for the carp but does not roll the dice for the elephant\nroll_dice(hippopotamus, carp) = True\nnot roll_dice(hippopotamus, elephant) = True\n# The penguin rolls the dice for the lobster.\nroll_dice(penguin, lobster) = True\n\n# Based on the game state and the rules and preferences, does the hippopotamus roll the dice for the puffin?\nquestion = roll_dice(hippopotamus, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the ferret winks at the wolverine and the mosquito needs support from the wolverine, then the wolverine gives a magnifying glass to the starfish\nRule2: If something gives a magnifying glass to the starfish, then the lobster burns the warehouse that is in possession of the pig\nRule3: If something does not need the support of the rabbit, then it does not burn the warehouse that is in possession of the pig.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe ferret winks at the wolverine\nThe mosquito needs support from the wolverine.\n\nBased on the game state and the rules and preferences, does the lobster burn the warehouse of the pig?\nQuestion: Does the lobster burn the warehouse of the pig?",
        "idx": 369,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the ferret winks at the wolverine and the mosquito needs support from the wolverine, then the wolverine gives a magnifying glass to the starfish\nrule1() = wink(ferret, wolverine) & needs_support(mosquito, wolverine) => give(wolverine, magnifying_glass, starfish)\n# Rule2: If at least one animal gives a magnifying glass to the starfish, then the lobster burns the warehouse that is in possession of the pig\nrule2() = give(something, magnifying_glass, starfish) => burn(lobster, warehouse, pig)\n# Rule3: If something does not need the support of the rabbit, then it does not burn the warehouse that is in possession of the pig.\nrule3(something) = not needs_support(something, rabbit) => not burn(something, warehouse, pig)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The ferret winks at the wolverine\nwink(ferret, wolverine) = True\n# The mosquito needs support from the wolverine.\nneeds_support(mosquito, wolverine) = True\n\n# Based on the game state and the rules and preferences, does the lobster burn the warehouse of the pig?\nquestion = burn(lobster, warehouse, pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something proceeds to the spot that is right after the spot of the hippopotamus and also knows the defensive plans of the starfish, then it will surely not offer a job to the caterpillar.\nRule2: If the carp has something to carry apples and oranges, then it offers a job position to the kiwi\nRule3: If the viperfish has a name whose first letter is the same as the first letter of the parrot's name, then it offers a job position to the caterpillar\nRule4: If the carp has a card whose color starts with the letter \"b\", then it offers a job to the kiwi\nRule5: The kiwi does not hold an equal number of points as the grasshopper whenever at least one animal offers a job position to the caterpillar\nRule6: If the carp offers a job to the kiwi and the kangaroo does not give a magnifying glass to the kiwi, then the kiwi holds the same number of points as the grasshopper.\n\nRule1 is preferred over Rule3\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe carp has a blue card and a tablet\nThe name of the parrot is Teddy\nThe name of the viperfish is Tarzan, and it knows the defensive plans of the starfish.\n\nBased on the game state and the rules and preferences, does the kiwi hold the same number of points as the grasshopper?\nQuestion: Does the kiwi hold the same number of points as the grasshopper?",
        "idx": 370,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something proceeds to the spot that is right after the spot of the hippopotamus and also knows the defensive plans of the starfish because in this case it will surely not offer a job to the caterpillar (this may or may not be problematic)\nrule1(something) = proceeds_to_right_after(something, spot(hippopotamus)) & knows(something, defensive_plans, starfish) => not offer_job_position(something, caterpillar)\n# Rule2: If the carp has something to carry apples and oranges, then the carp offers a job position to the kiwi\nrule2() = has(carp, carry(apples)) & has(carp, carry(oranges)) => offer_job_position(carp, kiwi)\n# Rule3: If the viperfish has a name whose first letter is the same as the first letter of the parrot's name, then the viperfish offers a job position to the caterpillar\nrule3() = first_letter_of(name(viperfish)) == first_letter_of(name(parrot)) => offer_job_position(viperfish, caterpillar)\n# Rule4: If the carp has a card whose color starts with the letter \"b\", then the carp offers a job to the kiwi\nrule4() = has(carp, card) & starts_with(color(card), \"b\") => offer_job_position(carp, kiwi)\n# Rule5: The kiwi does not hold an equal number of points as the grasshopper whenever at least one animal offers a job position to the caterpillar\nrule5() = offer_job_position(something, caterpillar) => not equal_points(kiwi, grasshopper)\n# Rule6: If the carp offers a job to the kiwi and the kangaroo does not give a magnifying glass to the kiwi, then, inevitably, the kiwi holds the same number of points as the grasshopper.\nrule6() = offer_job_position(carp, kiwi) & not give(kangaroo, magnifying_glass, kiwi) => equal_points(kiwi, grasshopper)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The carp has a card that is blue in color, and has a tablet\nhas(carp, card) = True\ncolor(card, blue) = True\nhas(carp, tablet) = True\n# The parrot is named Teddy\nname(parrot, Teddy) = True\n# The viperfish is named Tarzan, and knows the defensive plans of the starfish.\nname(viperfish, Tarzan) = True\nknows(viperfish, defensive_plans, starfish) = True\n\n# Based on the game state and the rules and preferences, does the kiwi hold the same number of points as the grasshopper?\nquestion = equal_points(kiwi, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the puffin has a sharp object, then it attacks the green fields of the sun bear\nRule2: If the first letter of the name of the puffin is the same as the first letter of the name of the phoenix, then it attacks the green fields of the sun bear\nRule3: If something attacks the green fields of the sun bear, then it proceeds to the spot right after the black bear.\n\nThe current state of the game is as follows\nThe name of the phoenix is Tarzan\nThe puffin has a cello\nThe name of the puffin is Cinnamon.\n\nBased on the game state and the rules and preferences, does the puffin proceed to the spot right after the black bear?\nQuestion: Does the puffin proceed to the spot right after the black bear?",
        "idx": 371,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the puffin has a sharp object, then the puffin attacks the green fields of the sun bear\nrule1() = has(puffin, sharp_object) => attacks(puffin, green_fields, sun_bear)\n# Rule2: Regarding the puffin, if it has a name whose first letter is the same as the first letter of the phoenix's name, then we can conclude that it attacks the green fields of the sun bear\nrule2() = first_letter_of(name(puffin)) == first_letter_of(name(phoenix)) => attacks(puffin, green_fields, sun_bear)\n# Rule3: If something attacks the green fields of the sun bear, then it proceeds to the spot right after the black bear, too.\nrule3() = attacks(something, green_fields, sun_bear) => proceeds_to(something, spot_right_after(black_bear))\n\n# The current state of the game is as follows\n# The phoenix is named Tarzan\nname(phoenix, Tarzan) = True\n# The puffin has a cello\nhas(puffin, cello) = True\n# The puffin is named Cinnamon.\nname(puffin, Cinnamon) = True\n\n# Based on the game state and the rules and preferences, does the puffin proceed to the spot right after the black bear?\nquestion = proceeds_to(puffin, spot_right_after(black_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the wolverine removes from the board one of the pieces of the buffalo, then the buffalo holds the same number of points as the turtle\nRule2: If something holds the same number of points as the turtle, then it raises a peace flag for the bat.\n\nThe current state of the game is as follows\nThe wolverine removes from the board one of the pieces of the buffalo.\n\nBased on the game state and the rules and preferences, does the buffalo raise a peace flag for the bat?\nQuestion: Does the buffalo raise a peace flag for the bat?",
        "idx": 372,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the wolverine removes from the board one of the pieces of the buffalo, then the buffalo holds the same number of points as the turtle\nrule1() = remove(wolverine, piece, buffalo) => points(buffalo) == points(turtle)\n# Rule2: If something holds the same number of points as the turtle, then it raises a peace flag for the bat, too.\nrule2(something) = points(something) == points(turtle) => raise_flag_of_peace(something, bat)\n\n# The current state of the game is as follows\n# The wolverine removes from the board one of the pieces of the buffalo.\nremove(wolverine, piece, buffalo) = True\n\n# Based on the game state and the rules and preferences, does the buffalo raise a peace flag for the bat?\nquestion = raise_flag_of_peace(buffalo, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion gives a magnifier to the viperfish and the kudu eats the food that belongs to the viperfish, then the viperfish will not learn elementary resource management from the tiger\nRule2: If the lion killed the mayor, then it gives a magnifier to the viperfish\nRule3: If something eats the food that belongs to the dog, then it eats the food that belongs to the viperfish.\n\nThe current state of the game is as follows\nThe kudu eats the food of the dog\nThe lion assassinated the mayor.\n\nBased on the game state and the rules and preferences, does the viperfish learn the basics of resource management from the tiger?\nQuestion: Does the viperfish learn the basics of resource management from the tiger?",
        "idx": 373,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lion gives a magnifier to the viperfish and the kudu eats the food that belongs to the viperfish, then the viperfish will not learn elementary resource management from the tiger\nrule1() = give(lion, magnifier, viperfish) & eat(kudu, food_of(viperfish)) => not learn(viperfish, elementary_resource_management_from(tiger))\n# Rule2: Regarding the lion, if it killed the mayor, then we can conclude that it gives a magnifier to the viperfish\nrule2() = kill(lion, mayor) => give(lion, magnifier, viperfish)\n# Rule3: If something eats the food that belongs to the dog, then it eats the food that belongs to the viperfish, too.\nrule3(something) = eat(something, food_of(dog)) => eat(something, food_of(viperfish))\n\n# The current state of the game is as follows\n# The kudu eats the food of the dog\neat(kudu, food_of(dog)) = True\n# The lion assassinated the mayor.\nkill(lion, mayor) = True\n\n# Based on the game state and the rules and preferences, does the viperfish learn the basics of resource management from the tiger?\nquestion = learn(viperfish, elementary_resource_management_from(tiger))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eel respects the whale and the grizzly bear gives a magnifier to the whale, then the whale will not prepare armor for the blobfish\nRule2: If something steals five points from the gecko, then the whale burns the warehouse of the canary\nRule3: If something knocks down the fortress that belongs to the caterpillar but does not need support from the sheep, then it does not burn the warehouse that is in possession of the canary\nRule4: If the whale has a leafy green vegetable, then the whale prepares armor for the blobfish\nRule5: The canary proceeds to the spot right after the cat, in the case where the whale burns the warehouse that is in possession of the canary.\n\nRule2 is preferred over Rule3\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe eel respects the whale\nThe grizzly bear gives a magnifier to the whale\nThe tilapia needs support from the gecko\nThe whale has some kale\nThe whale knocks down the fortress of the caterpillar\nThe whale does not need support from the sheep.\n\nBased on the game state and the rules and preferences, does the canary proceed to the spot right after the cat?\nQuestion: Does the canary proceed to the spot right after the cat?",
        "idx": 374,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the eel respects the whale and the grizzly bear gives a magnifier to the whale, then the whale will not prepare armor for the blobfish\nrule1() = respects(eel, whale) & give(grizzly_bear, magnifier, whale) => not prepare_armor(whale, blobfish)\n# Rule2: If at least one animal steals five of the points of the gecko, then the whale burns the warehouse of the canary\nrule2() = steal_points(something, 5, gecko) => burn_warehouse(whale, canary)\n# Rule3: If you see that something knocks down the fortress that belongs to the caterpillar but does not need support from the sheep, what can you certainly conclude? You can conclude that it does not burn the warehouse that is in possession of the canary\nrule3(something) = knock_down_fortress(something, caterpillar) & not need_support(something, sheep) => not burn_warehouse(something, canary)\n# Rule4: If the whale has a leafy green vegetable, then the whale prepares armor for the blobfish\nrule4() = has(whale, leafy_green_vegetable) => prepare_armor(whale, blobfish)\n# Rule5: The canary unquestionably proceeds to the spot right after the cat, in the case where the whale burns the warehouse that is in possession of the canary.\nrule5() = burn_warehouse(whale, canary) => proceed_to_spot(canary, right_after, cat)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The eel respects the whale\nrespects(eel, whale) = True\n# The grizzly bear gives a magnifier to the whale\ngive(grizzly_bear, magnifier, whale) = True\n# The tilapia needs support from the gecko\nneed_support(tilapia, gecko) = True\n# The whale has some kale\nhas(whale, kale) = True\n# The whale knocks down the fortress of the caterpillar\nknock_down_fortress(whale, caterpillar) = True\n# The whale does not need support from the sheep.\nnot need_support(whale, sheep) = True\n\n# Based on the game state and the rules and preferences, does the canary proceed to the spot right after the cat?\nquestion = proceed_to_spot(canary, right_after, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panther has a musical instrument, then it prepares armor for the sea bass\nRule2: If something raises a peace flag for the gecko and also prepares armor for the sea bass, then it learns elementary resource management from the dog\nRule3: If at least one animal holds the same number of points as the viperfish, then the panther does not learn the basics of resource management from the dog\nRule4: If the panther has fewer than 8 friends, then it raises a flag of peace for the gecko\nRule5: If the panther has a musical instrument, then it does not prepare armor for the sea bass\nRule6: If the panther has a device to connect to the internet, then it raises a flag of peace for the gecko\nRule7: If the panther has a device to connect to the internet, then it prepares armor for the sea bass.\n\nRule1 is preferred over Rule5\nRule3 is preferred over Rule2\nRule7 is preferred over Rule5\n\nThe current state of the game is as follows\nThe panther has 3 friends and a guitar\nThe panther has a cello, a tablet, and some romaine lettuce.\n\nBased on the game state and the rules and preferences, does the panther learn the basics of resource management from the dog?\nQuestion: Does the panther learn the basics of resource management from the dog?",
        "idx": 375,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panther has a musical instrument, then the panther prepares armor for the sea bass\nrule1() = has(panther, musical_instrument) => prepare_armor(panther, sea_bass)\n# Rule2: Be careful when something raises a peace flag for the gecko and also prepares armor for the sea bass because in this case it will surely learn elementary resource management from the dog (this may or may not be problematic)\nrule2(something) = raise_flag_of_peace(something, gecko) & prepare_armor(something, sea_bass) => learn(something, elementary_resource_management_from(dog))\n# Rule3: If at least one animal holds the same number of points as the viperfish, then the panther does not learn the basics of resource management from the dog\nrule3(something) = points(something) == points(viperfish) => not learn(panther, basics_of_resource_management_from(dog))\n# Rule4: Regarding the panther, if it has fewer than 8 friends, then we can conclude that it raises a flag of peace for the gecko\nrule4() = friends(panther) < 8 => raise_flag_of_peace(panther, gecko)\n# Rule5: If the panther has a musical instrument, then the panther does not prepare armor for the sea bass\nrule5() = has(panther, musical_instrument) => not prepare_armor(panther, sea_bass)\n# Rule6: If the panther has a device to connect to the internet, then the panther raises a flag of peace for the gecko\nrule6() = has(panther, internet_device) => raise_flag_of_peace(panther, gecko)\n# Rule7: Regarding the panther, if it has a device to connect to the internet, then we can conclude that it prepares armor for the sea bass.\nrule7() = has(panther, internet_device) => prepare_armor(panther, sea_bass)\n# Rule1 is preferred over Rule5\norder(rule1) > order(rule5) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule7 is preferred over Rule5\norder(rule7) > order(rule5) = True\n\n# The current state of the game is as follows\n# The panther has 3 friends, and has a guitar\nfriends(panther) = 3\nhas(panther, guitar) = True\n# The panther has a cello, has a tablet, and has some romaine lettuce.\nhas(panther, cello) = True\nhas(panther, tablet) = True\nhas(panther, romaine_lettuce) = True\n\n# Based on the game state and the rules and preferences, does the panther learn the basics of resource management from the dog?\nquestion = learn(panther, basics_of_resource_management_from(dog))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the koala voted for the mayor, then it respects the phoenix\nRule2: If something respects the phoenix, then it will not steal five points from the moose\nRule3: If the koala has a card whose color appears in the flag of France, then it respects the phoenix.\n\nThe current state of the game is as follows\nThe koala assassinated the mayor\nThe koala has a card that is blue in color.\n\nBased on the game state and the rules and preferences, does the koala steal five points from the moose?\nQuestion: Does the koala steal five points from the moose?",
        "idx": 376,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the koala, if it voted for the mayor, then we can conclude that it respects the phoenix\nrule1() = voted(koala, mayor) => respects(koala, phoenix)\n# Rule2: If you are positive that you saw one of the animals respects the phoenix, you can be certain that it will not steal five points from the moose\nrule2(something) = respects(something, phoenix) => not steal(five_points, moose)\n# Rule3: If the koala has a card whose color appears in the flag of France, then the koala respects the phoenix.\nrule3() = has(koala, card) and color(card) in flag_of_france_colors => respects(koala, phoenix)\n\n# The current state of the game is as follows\n# The koala assassinated the mayor\nassassinated(koala, mayor) = True\n# The koala has a card that is blue in color.\nhas(koala, card) = True\ncolor(card, blue) = True\n\n# Based on the game state and the rules and preferences, does the koala steal five points from the moose?\nquestion = steal(five_points, moose)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the buffalo has more than 4 friends, then it holds the same number of points as the hare\nRule2: If the canary prepares armor for the buffalo and the snail does not show all her cards to the buffalo, then you can add \"the buffalo burns the warehouse of the sun bear\" to your conclusions\nRule3: If something burns the warehouse of the sun bear but does not hold the same number of points as the hare, then it gives a magnifier to the kangaroo\nRule4: If something shows all her cards to the pig, then it will not give a magnifying glass to the kangaroo.\n\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe buffalo has a white card and 11 friends\nThe name of the buffalo is Tarzan\nThe canary prepares armor for the buffalo\nThe name of the hare is Tessa\nThe snail does not show all her cards to the buffalo.\n\nBased on the game state and the rules and preferences, does the buffalo give a magnifier to the kangaroo?\nQuestion: Does the buffalo give a magnifier to the kangaroo?",
        "idx": 377,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the buffalo, if it has more than 4 friends, then we can conclude that it holds the same number of points as the hare\nrule1() = friends(buffalo) > 4 => points(buffalo) == points(hare)\n# Rule2: For the buffalo, if the belief is that the canary prepares armor for the buffalo and the snail does not show all her cards to the buffalo, then you can add \"the buffalo burns the warehouse of the sun bear\" to your conclusions\nrule2() = prepare_armor(canary, buffalo) & not show_all_cards(snail, buffalo) => add_conclusion(\"the buffalo burns the warehouse of the sun bear\")\n# Rule3: If you see that something burns the warehouse of the sun bear but does not hold the same number of points as the hare, what can you certainly conclude? You can conclude that it gives a magnifier to the kangaroo\nrule3() = burns_warehouse(something, sun_bear) & points(something) != points(hare) => give(something, magnifier, kangaroo)\n# Rule4: If you are positive that you saw one of the animals shows her cards (all of them) to the pig, you can be certain that it will not give a magnifying glass to the kangaroo.\nrule4() = show_all_cards(something, pig) => not give(something, magnifying_glass, kangaroo)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The buffalo has a card that is white in color, and has eleven friends\nhas(buffalo, card) and color(card, white) = True\nfriends(buffalo) = 11\n# The buffalo is named Tarzan\nname(buffalo, Tarzan) = True\n# The canary prepares armor for the buffalo\nprepare_armor(canary, buffalo) = True\n# The hare is named Tessa\nname(hare, Tessa) = True\n# The snail does not show all her cards to the buffalo.\nnot show_all_cards(snail, buffalo) = True\n\n# Based on the game state and the rules and preferences, does the buffalo give a magnifier to the kangaroo?\nquestion = give(buffalo, magnifier, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the panther, then the starfish does not remove from the board one of the pieces of the amberjack\nRule2: If the kudu has a card with a primary color, then it does not raise a peace flag for the starfish\nRule3: If the kudu has a high-quality paper, then it raises a flag of peace for the starfish\nRule4: If the kudu does not raise a flag of peace for the starfish, then the starfish removes from the board one of the pieces of the amberjack.\n\nRule1 is preferred over Rule4\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe kudu has a card that is green in color\nThe kudu published a high-quality paper.\n\nBased on the game state and the rules and preferences, does the starfish remove from the board one of the pieces of the amberjack?\nQuestion: Does the starfish remove from the board one of the pieces of the amberjack?",
        "idx": 378,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal rolls the dice for the panther, then the starfish does not remove from the board one of the pieces of the amberjack\nrule1() = rolls_dice(something, panther) => not remove_from_board(starfish, piece, amberjack)\n# Rule2: If the kudu has a card with a primary color, then the kudu does not raise a peace flag for the starfish\nrule2() = has(kudu, card) and color(card) in primary_colors => not raise_flag_of_peace(kudu, starfish)\n# Rule3: Regarding the kudu, if it has a high-quality paper, then we can conclude that it raises a flag of peace for the starfish\nrule3() = has(kudu, high_quality_paper) => raise_flag_of_peace(kudu, starfish)\n# Rule4: If the kudu does not raise a flag of peace for the starfish, then the starfish removes from the board one of the pieces of the amberjack.\nrule4() = not raise_flag_of_peace(kudu, starfish) => remove_from_board(starfish, piece, amberjack)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The kudu has a card that is green in color\nhas(kudu, card) = True\ncolor(card, green) = True\n# The kudu published a high-quality paper.\nhas(kudu, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the starfish remove from the board one of the pieces of the amberjack?\nquestion = remove_from_board(starfish, piece, amberjack)"
    },
    {
        "nl_code": "I'm sorry, I didn't receive any input. Is there anything else I can help you with?",
        "idx": 379,
        "code": ""
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not roll the dice for the penguin, then it will not hold an equal number of points as the grasshopper\nRule2: If the whale has a card whose color is one of the rainbow colors, then it shows all her cards to the gecko\nRule3: If something shows her cards (all of them) to the gecko and learns elementary resource management from the kiwi, then it holds an equal number of points as the grasshopper\nRule4: If the whale has a sharp object, then it becomes an enemy of the kiwi.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe tiger prepares armor for the whale\nThe whale has a green card and a knife\nThe whale has fifteen friends\nThe whale is holding her keys\nThe eel does not attack the green fields whose owner is the whale.\n\nBased on the game state and the rules and preferences, does the whale hold the same number of points as the grasshopper?\nQuestion: Does the whale hold the same number of points as the grasshopper?",
        "idx": 380,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not roll the dice for the penguin, you can be certain that it will not hold an equal number of points as the grasshopper\nrule1(something) = not roll_dice(something, penguin) => not hold_equal_points(something, grasshopper)\n# Rule2: Regarding the whale, if it has a card whose color is one of the rainbow colors, then we can conclude that it shows all her cards to the gecko\nrule2() = has_card(whale, color(rainbow_colors)) => show_cards(whale, all_cards, gecko)\n# Rule3: If you see that something shows her cards (all of them) to the gecko and learns elementary resource management from the kiwi, what can you certainly conclude? You can conclude that it also holds an equal number of points as the grasshopper\nrule3(something) = show_cards(something, all_cards, gecko) & learn(something, elementary_resource_management_from(kiwi)) => hold_equal_points(something, grasshopper)\n# Rule4: If the whale has a sharp object, then the whale becomes an enemy of the kiwi.\nrule4() = has(whale, sharp_object) => become_enemy(whale, kiwi)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The tiger prepares armor for the whale\nprepare_armor(tiger, whale) = True\n# The whale has a card that is green in color, and has a knife\nhas_card(whale, green) = True\nhas(whale, knife) = True\n# The whale has fifteen friends\nfriends(whale) = 15\n# The whale is holding her keys\nhold_keys(whale) = True\n# The eel does not attack the green fields whose owner is the whale.\nattack(eel, green_fields(whale)) = False\n\n# Based on the game state and the rules and preferences, does the whale hold the same number of points as the grasshopper?\nquestion = hold_equal_points(whale, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the swordfish eats the food that belongs to the cricket, then the cricket unquestionably respects the kiwi\nRule2: If the swordfish has a sharp object, then it eats the food of the cricket.\n\nThe current state of the game is as follows\nThe swordfish has a blade.\n\nBased on the game state and the rules and preferences, does the cricket respect the kiwi?\nQuestion: Does the cricket respect the kiwi?",
        "idx": 381,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The cricket unquestionably respects the kiwi, in the case where the swordfish eats the food that belongs to the cricket\nrule1() = eat_food(swordfish, food_of(cricket)) => respect(cricket, kiwi)\n# Rule2: Regarding the swordfish, if it has a sharp object, then we can conclude that it eats the food of the cricket.\nrule2() = has(swordfish, sharp_object) => eat_food(swordfish, food_of(cricket))\n\n# The current state of the game is as follows\n# The swordfish has a blade.\nhas(swordfish, blade) = True\n\n# Based on the game state and the rules and preferences, does the cricket respect the kiwi?\nquestion = respect(cricket, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo has more than seven friends, then it does not respect the hippopotamus\nRule2: If the first letter of the name of the kangaroo is the same as the first letter of the name of the turtle, then the kangaroo learns elementary resource management from the grasshopper\nRule3: If something does not respect the hippopotamus, then it will not respect the mosquito\nRule4: If the kangaroo works fewer hours than before, then it offers a job position to the penguin\nRule5: If something removes one of the pieces of the crocodile, then the kangaroo respects the hippopotamus\nRule6: If the kangaroo has something to carry apples and oranges, then it does not learn elementary resource management from the grasshopper.\n\nRule2 is preferred over Rule6\nRule5 is preferred over Rule1\n\nThe current state of the game is as follows\nThe kangaroo has a cell phone\nThe kangaroo has 14 friends\nThe kangaroo has a cutter\nThe name of the kangaroo is Milo\nThe kangaroo reduced her work hours recently\nThe name of the turtle is Max.\n\nBased on the game state and the rules and preferences, does the kangaroo respect the mosquito?\nQuestion: Does the kangaroo respect the mosquito?",
        "idx": 382,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kangaroo, if it has more than seven friends, then we can conclude that it does not respect the hippopotamus\nrule1() = friends(kangaroo) > 7 => not respect(kangaroo, hippopotamus)\n# Rule2: If the kangaroo has a name whose first letter is the same as the first letter of the turtle's name, then the kangaroo learns elementary resource management from the grasshopper\nrule2() = first_letter_of(name(kangaroo)) == first_letter_of(name(turtle)) => learn(kangaroo, elementary_resource_management, grasshopper)\n# Rule3: If you are positive that one of the animals does not respect the hippopotamus, you can be certain that it will not respect the mosquito\nrule3(something) = not respect(something, hippopotamus) => not respect(something, mosquito)\n# Rule4: If the kangaroo works fewer hours than before, then the kangaroo offers a job position to the penguin\nrule4() = works_fewer_hours(kangaroo) => offer_job_position(kangaroo, penguin)\n# Rule5: If at least one animal removes from the board one of the pieces of the crocodile, then the kangaroo respects the hippopotamus\nrule5() = remove_piece(something, crocodile) => respect(kangaroo, hippopotamus)\n# Rule6: Regarding the kangaroo, if it has something to carry apples and oranges, then we can conclude that it does not learn elementary resource management from the grasshopper.\nrule6() = has(kangaroo, something_to_carry_apples_and_oranges) => not learn(kangaroo, elementary_resource_management, grasshopper)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n\n# The current state of the game is as follows\n# The kangaroo has a cell phone, and has fourteen friends\nhas(kangaroo, cell_phone) = True\nfriends(kangaroo) = 14\n# The kangaroo has a cutter\nhas(kangaroo, cutter) = True\n# The kangaroo is named Milo\nname(kangaroo, Milo) = True\n# The kangaroo reduced her work hours recently\nworks_fewer_hours(kangaroo) = True\n# The turtle is named Max.\nname(turtle, Max) = True\n\n# Based on the game state and the rules and preferences, does the kangaroo respect the mosquito?\nquestion = respect(kangaroo, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sheep has a card whose color starts with the letter \"b\", then it learns the basics of resource management from the cheetah\nRule2: If something does not learn the basics of resource management from the cheetah and also does not know the defense plan of the tilapia, then it winks at the octopus\nRule3: If the aardvark and the canary wink at the sheep, then the sheep does not learn the basics of resource management from the cheetah\nRule4: If the sheep has something to sit on, then it does not know the defense plan of the tilapia.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe aardvark winks at the sheep\nThe sheep has a club chair\nThe canary does not wink at the sheep.\n\nBased on the game state and the rules and preferences, does the sheep wink at the octopus?\nQuestion: Does the sheep wink at the octopus?",
        "idx": 383,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the sheep, if it has a card whose color starts with the letter \"b\", then we can conclude that it learns the basics of resource management from the cheetah\nrule1() = has(sheep, card) and starts_with(color(card), \"b\") => learns(sheep, basics_of_resource_management_from(cheetah))\n# Rule2: Be careful when something does not learn the basics of resource management from the cheetah and also does not know the defense plan of the tilapia because in this case it will surely wink at the octopus (this may or may not be problematic)\nrule2(something) = not learns(something, basics_of_resource_management_from(cheetah)) and not knows(something, defense_plan, tilapia) => wink(something, octopus)\n# Rule3: For the sheep, if the belief is that the aardvark winks at the sheep and the canary winks at the sheep, then you can add that \"the sheep is not going to learn the basics of resource management from the cheetah\" to your conclusions\nrule3() = wink(aardvark, sheep) and wink(canary, sheep) => not learns(sheep, basics_of_resource_management_from(cheetah))\n# Rule4: If the sheep has something to sit on, then the sheep does not know the defense plan of the tilapia.\nrule4() = has(sheep, something_to_sit_on) => not knows(sheep, defense_plan, tilapia)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The aardvark winks at the sheep\nwink(aardvark, sheep) = True\n# The sheep has a club chair\nhas(sheep, club_chair) = True\n# The canary does not wink at the sheep.\nwink(canary, sheep) = False\n\n# Based on the game state and the rules and preferences, does the sheep wink at the octopus?\nquestion = wink(sheep, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something proceeds to the spot that is right after the spot of the sea bass, then the caterpillar gives a magnifier to the amberjack\nRule2: If the gecko steals five points from the caterpillar, then the caterpillar does not give a magnifying glass to the amberjack\nRule3: The oscar proceeds to the spot right after the sea bass, in the case where the ferret does not hold the same number of points as the oscar.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe ferret does not hold the same number of points as the oscar.\n\nBased on the game state and the rules and preferences, does the caterpillar give a magnifier to the amberjack?\nQuestion: Does the caterpillar give a magnifier to the amberjack?",
        "idx": 384,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The caterpillar gives a magnifier to the amberjack whenever at least one animal proceeds to the spot that is right after the spot of the sea bass\nrule1() = proceed_to_spot(something, spot_after(sea_bass)) => give(caterpillar, magnifier, amberjack)\n# Rule2: If the gecko steals five points from the caterpillar, then the caterpillar is not going to give a magnifying glass to the amberjack\nrule2() = steal(gecko, 5_points, caterpillar) => not give(caterpillar, magnifying_glass, amberjack)\n# Rule3: The oscar unquestionably proceeds to the spot right after the sea bass, in the case where the ferret does not hold the same number of points as the oscar.\nrule3() = not same_number_of_points(ferret, oscar) => proceed_to_spot(oscar, spot_after(sea_bass))\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The ferret does not hold the same number of points as the oscar.\nsame_number_of_points(ferret, oscar) = False\n\n# Based on the game state and the rules and preferences, does the caterpillar give a magnifier to the amberjack?\nquestion = give(caterpillar, magnifier, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the hare starts with the same letter as the name of the gecko, then the hare sings a victory song for the spider\nRule2: If the baboon does not respect the hare, then the hare will not raise a flag of peace for the hippopotamus\nRule3: If something sings a victory song for the spider but does not show all its cards to the meerkat, then it raises a flag of peace for the hippopotamus\nRule4: If the name of the baboon starts with the same letter as the name of the elephant, then the baboon does not respect the hare\nRule5: If the hare has difficulty finding food, then it sings a victory song for the spider.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe baboon is named Lucy\nThe elephant is named Lola\nThe gecko is named Teddy\nThe hare is named Bella\nThe hare struggles to find food.\n\nBased on the game state and the rules and preferences, does the hare raise a peace flag for the hippopotamus?\nQuestion: Does the hare raise a peace flag for the hippopotamus?",
        "idx": 385,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the hare, if it has a name whose first letter is the same as the first letter of the gecko's name, then we can conclude that it sings a victory song for the spider\nrule1() = first_letter_of(name(hare)) == first_letter_of(name(gecko)) => sing_victory_song(hare, spider)\n# Rule2: The hare will not raise a flag of peace for the hippopotamus, in the case where the baboon does not respect the hare\nrule2() = not respect(baboon, hare) => not raise_flag_of_peace(hare, hippopotamus)\n# Rule3: If you see that something sings a victory song for the spider but does not show her cards (all of them) to the meerkat, what can you certainly conclude? You can conclude that it raises a flag of peace for the hippopotamus\nrule3() = sing_victory_song(something, spider) & not show_cards(something, meerkat) => raise_flag_of_peace(something, hippopotamus)\n# Rule4: Regarding the baboon, if it has a name whose first letter is the same as the first letter of the elephant's name, then we can conclude that it does not respect the hare\nrule4() = first_letter_of(name(baboon)) == first_letter_of(name(elephant)) => not respect(baboon, hare)\n# Rule5: If the hare has difficulty to find food, then the hare sings a victory song for the spider.\nrule5() = difficulty_to_find_food(hare) => sing_victory_song(hare, spider)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The baboon is named Lucy\nname(baboon, Lucy) = True\n# The elephant is named Lola\nname(elephant, Lola) = True\n# The gecko is named Teddy\nname(gecko, Teddy) = True\n# The hare is named Bella\nname(hare, Bella) = True\n# The hare struggles to find food.\ndifficulty_to_find_food(hare) = True\n\n# Based on the game state and the rules and preferences, does the hare raise a peace flag for the hippopotamus?\nquestion = raise_flag_of_peace(hare, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the elephant has fewer than 4 friends, then it prepares armor for the canary\nRule2: If the belief is that the elephant burns the warehouse that is in possession of the canary and the cockroach attacks the green fields of the canary, then you can add \"the canary prepares armor for the panther\" to your conclusions\nRule3: If the elephant has difficulty finding food, then it does not prepare armor for the canary\nRule4: If something does not sing a victory song for the dog, then it will attack the green fields of the canary.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe elephant has one friend and struggles to find food\nThe cockroach does not sing a victory song for the dog.\n\nBased on the game state and the rules and preferences, does the canary prepare armor for the panther?\nQuestion: Does the canary prepare armor for the panther?",
        "idx": 386,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the elephant, if it has fewer than 4 friends, then we can conclude that it prepares armor for the canary\nrule1() = friends(elephant) < 4 => prepare_armor(elephant, canary)\n# Rule2: For the canary, if the belief is that the elephant burns the warehouse that is in possession of the canary and the cockroach attacks the green fields of the canary, then you can add \"the canary prepares armor for the panther\" to your conclusions\nrule2() = belief(elephant_burns_warehouse(canary)) & belief(cockroach_attacks_green_fields(canary)) => add_conclusion(\"the canary prepares armor for the panther\")\n# Rule3: If the elephant has difficulty to find food, then the elephant does not prepare armor for the canary\nrule3() = difficulty_finding_food(elephant) => not prepare_armor(elephant, canary)\n# Rule4: If you are positive that one of the animals does not sing a song of victory for the dog, you can be certain that it will attack the green fields of the canary without a doubt.\nrule4(something) = not sing_victory_song(something, dog) => attack_green_fields(something, canary)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The elephant has one friend, and struggles to find food\nfriends(elephant) = 1\ndifficulty_finding_food(elephant) = True\n# The cockroach does not sing a victory song for the dog.\nsing_victory_song(cockroach, dog) = False\n\n# Based on the game state and the rules and preferences, does the canary prepare armor for the panther?\nquestion = prepare_armor(canary, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the whale, then it respects the canary\nRule2: If the squid has more than 14 friends, then it does not roll the dice for the whale\nRule3: If the squid has a card whose color appears in the flag of Italy, then it rolls the dice for the whale\nRule4: If the squid has a device to connect to the internet, then it does not roll the dice for the whale.\n\nRule2 is preferred over Rule3\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe squid has 5 bald friends\nThe squid has 3 friends that are not bald\nThe squid has a card that is white in color.\n\nBased on the game state and the rules and preferences, does the squid respect the canary?\nQuestion: Does the squid respect the canary?",
        "idx": 387,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals rolls the dice for the whale, you can be certain that it will also respect the canary\nrule1(something) = saw(something, roll_dice, whale) => respect(something, canary)\n# Rule2: If the squid has more than 14 friends, then the squid does not roll the dice for the whale\nrule2() = friends(squid) > 14 => not roll_dice(squid, whale)\n# Rule3: If the squid has a card whose color appears in the flag of Italy, then the squid rolls the dice for the whale\nrule3() = has(squid, card) and color(card) in flag_of_italy_colors => roll_dice(squid, whale)\n# Rule4: Regarding the squid, if it has a device to connect to the internet, then we can conclude that it does not roll the dice for the whale.\nrule4() = has(squid, internet_device) => not roll_dice(squid, whale)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The squid has 5 friends that are bald and three friends that are not\nbald_friends(squid) = 5\nnon_bald_friends(squid) = 3\n# The squid has a card that is white in color.\nhas(squid, card) = True\ncolor(card, white) = True\n\n# Based on the game state and the rules and preferences, does the squid respect the canary?\nquestion = respect(squid, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus has a card with a primary color, then it raises a peace flag for the cheetah\nRule2: If the octopus has a leafy green vegetable, then it raises a peace flag for the cheetah\nRule3: If something burns the warehouse of the salmon and proceeds to the spot that is right after the spot of the doctorfish, then it will not raise a peace flag for the cheetah\nRule4: If at least one animal raises a peace flag for the cheetah, then the tilapia does not sing a song of victory for the starfish\nRule5: The squid rolls the dice for the tilapia whenever at least one animal rolls the dice for the panther\nRule6: The sheep owes money to the tilapia whenever at least one animal raises a peace flag for the halibut\nRule7: The squid will not roll the dice for the tilapia, in the case where the eel does not raise a peace flag for the squid.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\nRule5 is preferred over Rule7\n\nThe current state of the game is as follows\nThe octopus burns the warehouse of the salmon\nThe octopus has a green card and a cello\nThe polar bear raises a peace flag for the halibut\nThe eel does not raise a peace flag for the squid.\n\nBased on the game state and the rules and preferences, does the tilapia sing a victory song for the starfish?\nQuestion: Does the tilapia sing a victory song for the starfish?",
        "idx": 388,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the octopus has a card with a primary color, then the octopus raises a flag of peace for the cheetah\nrule1() = has(octopus, card) and color(card) in primary_colors => raise_flag_of_peace(octopus, cheetah)\n# Rule2: Regarding the octopus, if it has a leafy green vegetable, then we can conclude that it raises a peace flag for the cheetah\nrule2() = has(octopus, leafy_green_vegetable) => raise_flag_of_peace(octopus, cheetah)\n# Rule3: Be careful when something burns the warehouse that is in possession of the salmon and also proceeds to the spot that is right after the spot of the doctorfish because in this case it will surely not raise a flag of peace for the cheetah (this may or may not be problematic)\nrule3() = burns_warehouse(something, salmon) & proceeds_to_right(something, spot_of(doctorfish)) => not raise_flag_of_peace(something, cheetah)\n# Rule4: If at least one animal raises a peace flag for the cheetah, then the tilapia does not sing a song of victory for the starfish\nrule4() = raise_flag_of_peace(something, cheetah) => not sing_song_of_victory(tilapia, starfish)\n# Rule5: The squid rolls the dice for the tilapia whenever at least one animal rolls the dice for the panther\nrule5() = roll_dice(something, panther) => roll_dice(squid, tilapia)\n# Rule6: The sheep owes money to the tilapia whenever at least one animal raises a flag of peace for the halibut\nrule6() = raise_flag_of_peace(something, halibut) => owe_money(sheep, tilapia)\n# Rule7: The squid will not roll the dice for the tilapia, in the case where the eel does not raise a flag of peace for the squid.\nrule7() = not raise_flag_of_peace(eel, squid) => not roll_dice(squid, tilapia)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule5 is preferred over Rule7\norder(rule5) > order(rule7) = True\n\n# The current state of the game is as follows\n# The octopus burns the warehouse of the salmon\nburns_warehouse(octopus, salmon) = True\n# The octopus has a card that is green in color, and has a cello\nhas(octopus, card) = True\ncolor(card, green) = True\nhas(octopus, cello) = True\n# The polar bear raises a peace flag for the halibut\nraise_flag_of_peace(polar_bear, halibut) = True\n# The eel does not raise a peace flag for the squid.\nraise_flag_of_peace(eel, squid) = False\n\n# Based on the game state and the rules and preferences, does the tilapia sing a victory song for the starfish?\nquestion = sing_song_of_victory(tilapia, starfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal becomes an actual enemy of the sun bear, then the salmon eats the food that belongs to the eel\nRule2: If the catfish has a name whose first letter is the same as the first letter of the aardvark's name, then the catfish becomes an enemy of the sun bear.\n\nThe current state of the game is as follows\nThe name of the aardvark is Tessa\nThe name of the catfish is Pashmak\n\nBased on the game state and the rules and preferences, does the salmon eat the food of the eel?\nQuestion: Does the salmon eat the food that belongs to the eel?",
        "idx": 389,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal becomes an actual enemy of the sun bear, then the salmon eats the food that belongs to the eel\nrule1() = become_enemy(something, sun_bear) => eat_food(salmon, food_of(eel))\n# Rule2: If the catfish has a name whose first letter is the same as the first letter of the aardvark's name, then the catfish becomes an enemy of the sun bear.\nrule2() = first_letter_of(name(catfish)) == first_letter_of(name(aardvark)) => become_enemy(catfish, sun_bear)\n\n# The current state of the game is as follows\n# The aardvark is named Tessa\nname(aardvark, Tessa) = True\n# The catfish is named Pashmak.\nname(catfish, Pashmak) = True\n\n# Based on the game state and the rules and preferences, does the salmon eat the food of the eel?\nquestion = eat_food(salmon, food_of(eel))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not knock down the fortress of the polar bear, then it becomes an enemy of the donkey\nRule2: If the panther has a card with a primary color, then it does not knock down the fortress of the polar bear\nRule3: The panther does not become an enemy of the donkey whenever at least one animal holds the same number of points as the pig.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe panther has a card that is green in color.\n\nBased on the game state and the rules and preferences, does the panther become an enemy of the donkey?\nQuestion: Does the panther become an enemy of the donkey?",
        "idx": 390,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not knock down the fortress of the polar bear, you can be certain that it will become an enemy of the donkey without a doubt\nrule1(something) = not knock_down(something, fortress, polar_bear) => become_enemy(something, donkey)\n# Rule2: If the panther has a card with a primary color, then the panther does not knock down the fortress that belongs to the polar bear\nrule2() = has(panther, card) and color(card) in primary_colors => not knock_down(panther, fortress, polar_bear)\n# Rule3: The panther does not become an enemy of the donkey whenever at least one animal holds the same number of points as the pig.\nrule3() = points(something) == points(pig) => not become_enemy(panther, donkey)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The panther has a card that is green in color.\nhas(panther, card) = True\ncolor(card, green) = True\n\n# Based on the game state and the rules and preferences, does the panther become an enemy of the donkey?\nquestion = become_enemy(panther, donkey)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the name of the dog starts with the same letter as the name of the doctorfish, then the dog becomes an enemy of the goldfish\nRule2: If the dog created a time machine, then the dog becomes an enemy of the goldfish\nRule3: If the dog becomes an enemy of the goldfish, then the goldfish does not prepare armor for the pig.\n\nThe current state of the game is as follows\nThe name of the doctorfish is Max\nThe dog invented a time machine\nThe name of the dog is Chickpea\nThe ferret gives a magnifying glass to the dog.\n\nBased on the game state and the rules and preferences, does the goldfish prepare armor for the pig?\nQuestion: Does the goldfish prepare armor for the pig?",
        "idx": 391,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the dog, if it has a name whose first letter is the same as the first letter of the doctorfish's name, then we can conclude that it becomes an actual enemy of the goldfish\nrule1() = first_letter_of(name(dog)) == first_letter_of(name(doctorfish)) => become_enemy(dog, goldfish)\n# Rule2: Regarding the dog, if it created a time machine, then we can conclude that it becomes an actual enemy of the goldfish\nrule2() = created(dog, time_machine) => become_enemy(dog, goldfish)\n# Rule3: The goldfish does not prepare armor for the pig, in the case where the dog becomes an enemy of the goldfish.\nrule3() = become_enemy(dog, goldfish) => not prepare_armor(goldfish, pig)\n\n# The current state of the game is as follows\n# The doctorfish is named Max\nname(doctorfish, Max) = True\n# The dog invented a time machine, and is named Chickpea\ncreated(dog, time_machine) = True\nname(dog, Chickpea) = True\n# The ferret gives a magnifier to the dog.\n# Background information: magnifier is the same as magnifying glass\ngive(ferret, magnifying_glass, dog) = True\n\n# Based on the game state and the rules and preferences, does the goldfish prepare armor for the pig?\nquestion = prepare_armor(goldfish, pig)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something attacks the green fields whose owner is the baboon, then the tiger needs the support of the turtle\nRule2: If the tiger needs support from the turtle and the kangaroo does not hold an equal number of points as the turtle, then you can add \"the turtle rolls the dice for the ferret\" to your conclusions\nRule3: If the eagle does not knock down the fortress of the kangaroo, then the kangaroo does not hold the same number of points as the turtle.\n\nThe current state of the game is as follows\nThe kangaroo knows the defensive plans of the catfish\nThe sheep attacks the green fields whose owner is the baboon\nThe eagle does not give a magnifying glass to the kangaroo.\n\nBased on the game state and the rules and preferences, does the turtle roll the dice for the ferret?\nQuestion: Does the turtle roll the dice for the ferret?",
        "idx": 392,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal attacks the green fields whose owner is the baboon, then the tiger needs the support of the turtle\nrule1() = attacks(something, green_fields, owner(baboon)) => needs_support(tiger, turtle)\n# Rule2: For the turtle, if the belief is that the tiger needs support from the turtle and the kangaroo does not hold an equal number of points as the turtle, then you can add \"the turtle rolls the dice for the ferret\" to your conclusions\nrule2() = believes(tiger, needs_support(turtle)) & points(kangaroo) != points(turtle) => add_conclusion(\"the turtle rolls the dice for the ferret\")\n# Rule3: If the eagle does not knock down the fortress of the kangaroo, then the kangaroo does not hold the same number of points as the turtle.\nrule3() = not knock_down(eagle, fortress(kangaroo)) => points(kangaroo) != points(turtle)\n\n# The current state of the game is as follows\n# The kangaroo knows the defensive plans of the catfish\nknows(kangaroo, defensive_plans, catfish) = True\n# The sheep attacks the green fields whose owner is the baboon\nattacks(sheep, green_fields, owner(baboon)) = True\n# The eagle does not give a magnifier to the kangaroo.\n# Background information: magnifier is the same as magnifying glass\nnot give(eagle, magnifying_glass, kangaroo) = True\n\n# Based on the game state and the rules and preferences, does the turtle roll the dice for the ferret?\nquestion = \"the turtle rolls the dice for the ferret\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The doctorfish knocks down the fortress that belongs to the squirrel whenever at least one animal prepares armor for the grasshopper\nRule2: The whale prepares armor for the grasshopper if the kiwi raises a peace flag for the whale.\n\nThe current state of the game is as follows\nThe kiwi raises a peace flag for the whale.\n\nBased on the game state and the rules and preferences, does the doctorfish knock down the fortress of the squirrel?\nQuestion: Does the doctorfish knock down the fortress of the squirrel?",
        "idx": 393,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The doctorfish knocks down the fortress that belongs to the squirrel whenever at least one animal prepares armor for the grasshopper\nrule1() = prepare_armor(something, grasshopper) => knock_down(doctorfish, fortress, squirrel)\n# Rule2: The whale unquestionably prepares armor for the grasshopper, in the case where the kiwi raises a peace flag for the whale.\nrule2() = raise_flag_of_peace(kiwi, whale) => prepare_armor(whale, grasshopper)\n\n# The current state of the game is as follows\n# The kiwi raises a peace flag for the whale.\nraise_flag_of_peace(kiwi, whale) = True\n\n# Based on the game state and the rules and preferences, does the doctorfish knock down the fortress of the squirrel?\nquestion = knock_down(doctorfish, fortress, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the sheep has a card whose color starts with the letter \"g\", then the sheep owes $$$ to the wolverine\nRule2: If something removes from the board one of the pieces of the panther and also gives a magnifier to the parrot, then it will hold the same number of points as the wolverine\nRule3: If the bat holds an equal number of points as the wolverine and the sheep owes $$$ to the wolverine, then the wolverine will not attack the green fields whose owner is the goldfish.\n\nThe current state of the game is as follows\nThe bat gives a magnifier to the parrot\nThe bat removes from the board one of the pieces of the panther\nThe sheep has a card that is green in color.\n\nBased on the game state and the rules and preferences, does the wolverine attack the green fields whose owner is the goldfish?\nQuestion: Does the wolverine attack the green fields whose owner is the goldfish?",
        "idx": 394,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the sheep has a card whose color starts with the letter \"g\", then the sheep owes $$$ to the wolverine\nrule1() = starts_with(color(card(sheep)), \"g\") => owes(sheep, $$$, wolverine)\n# Rule2: Be careful when something removes from the board one of the pieces of the panther and also gives a magnifier to the parrot because in this case it will surely hold the same number of points as the wolverine (this may or may not be problematic)\nrule2() = remove_from_board(something, piece(panther)) & give(something, magnifier, parrot) => points(something) == points(wolverine)\n# Rule3: If the bat holds an equal number of points as the wolverine and the sheep owes $$$ to the wolverine, then the wolverine will not attack the green fields whose owner is the goldfish.\nrule3() = points(bat) == points(wolverine) & owes(sheep, $$$, wolverine) => not attack(green_fields(owner(goldfish)))\n\n# The current state of the game is as follows\n# The bat gives a magnifier to the parrot\ngive(bat, magnifier, parrot) = True\n# The bat removes from the board one of the pieces of the panther\nremove_from_board(bat, piece(panther)) = True\n# The sheep has a card that is green in color.\ncolor(card(sheep), green) = True\n\n# Based on the game state and the rules and preferences, does the wolverine attack the green fields whose owner is the goldfish?\nquestion = attack(green_fields(owner(goldfish)))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not attack the green fields whose owner is the hippopotamus, then it will steal five points from the raven without a doubt\nRule2: If something needs support from the cow, then the ferret attacks the green fields of the hippopotamus.\n\nThe current state of the game is as follows\nThe moose needs support from the cow.\n\nBased on the game state and the rules and preferences, does the ferret steal five points from the raven?\nQuestion: Does the ferret steal five points from the raven?",
        "idx": 395,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not attack the green fields whose owner is the hippopotamus, you can be certain that it will steal five points from the raven without a doubt\nrule1(something) = not attack(something, green_fields, owner(hippopotamus)) => steal_points(something, 5, raven)\n# Rule2: If at least one animal needs support from the cow, then the ferret attacks the green fields of the hippopotamus.\nrule2() = needs_support(something, cow) => attack(ferret, green_fields, owner(hippopotamus))\n\n# The current state of the game is as follows\n# The moose needs support from the cow.\nneeds_support(moose, cow) = True\n\n# Based on the game state and the rules and preferences, does the ferret steal five points from the raven?\nquestion = steal_points(ferret, 5, raven)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knocks down the fortress of the donkey, then it does not raise a peace flag for the canary\nRule2: The squirrel rolls the dice for the elephant, in the case where the squid does not show all her cards to the squirrel\nRule3: If the first letter of the name of the squirrel is the same as the first letter of the name of the panther, then the squirrel does not roll the dice for the turtle\nRule4: If something rolls the dice for the elephant but does not roll the dice for the turtle, then it raises a peace flag for the canary.\n\nRule1 is preferred over Rule4\n\nThe current state of the game is as follows\nThe name of the panther is Lily\nThe name of the squirrel is Luna\nThe squirrel winks at the tiger\nThe squid does not show all her cards to the squirrel.\n\nBased on the game state and the rules and preferences, does the squirrel raise a peace flag for the canary?\nQuestion: Does the squirrel raise a peace flag for the canary?",
        "idx": 396,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something knocks down the fortress of the donkey, then it does not raise a peace flag for the canary\nrule1() = knocks_down(something, fortress(donkey)) => not raise_flag_of_peace(something, canary)\n# Rule2: The squirrel unquestionably rolls the dice for the elephant, in the case where the squid does not show all her cards to the squirrel\nrule2() = not show_all_cards(squid, squirrel) => roll_dice(squirrel, elephant)\n# Rule3: Regarding the squirrel, if it has a name whose first letter is the same as the first letter of the panther's name, then we can conclude that it does not roll the dice for the turtle\nrule3() = first_letter_of(name(squirrel)) == first_letter_of(name(panther)) => not roll_dice(squirrel, turtle)\n# Rule4: If you see that something rolls the dice for the elephant but does not roll the dice for the turtle, what can you certainly conclude? You can conclude that it raises a peace flag for the canary.\nrule4() = roll_dice(something, elephant) & not roll_dice(something, turtle) => raise_flag_of_peace(something, canary)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n\n# The current state of the game is as follows\n# The panther is named Lily\nname(panther, Lily) = True\n# The squirrel is named Luna\nname(squirrel, Luna) = True\n# The squirrel winks at the tiger\nwink(squirrel, tiger) = True\n# The squid does not show all her cards to the squirrel.\nshow_all_cards(squid, squirrel) = False\n\n# Based on the game state and the rules and preferences, does the squirrel raise a peace flag for the canary?\nquestion = raise_flag_of_peace(squirrel, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something winks at the panda bear and needs support from the panda bear, then it will not attack the green fields whose owner is the phoenix.\nRule2: If the lion has a leafy green vegetable, then it needs support from the panda bear\nRule3: If the lion has a card whose color appears in the flag of Netherlands, then it needs support from the panda bear\nRule4: If something respects the elephant, then it will burn the warehouse of the viperfish\nRule5: The lion winks at the panda bear whenever at least one animal attacks the green fields whose owner is the buffalo\nRule6: If the lion has fewer than five friends, then it does not need support from the panda bear.\n\nRule2 is preferred over Rule6\nRule3 is preferred over Rule6\n\nThe current state of the game is as follows\nThe grasshopper respects the elephant\nThe lion has 3 friends\nThe lion has a card that is blue in color, and parked her bike in front of the store\nThe lion has a cutter\nThe squirrel attacks the green fields whose owner is the buffalo.\n\nBased on the game state and the rules and preferences, does the lion attack the green fields whose owner is the phoenix?\nQuestion: Does the lion attack the green fields whose owner is the phoenix?",
        "idx": 397,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something winks at the panda bear and also needs support from the panda bear because in this case it will surely not attack the green fields whose owner is the phoenix (this may or may not be problematic)\nrule1(something) = winks(something, panda_bear) & needs_support(something, panda_bear) => not attack(green_fields, owner(phoenix))\n# Rule2: If the lion has a leafy green vegetable, then the lion needs support from the panda bear\nrule2() = has(lion, leafy_green_vegetable) => needs_support(lion, panda_bear)\n# Rule3: If the lion has a card whose color appears in the flag of Netherlands, then the lion needs support from the panda bear\nrule3() = has(lion, card) & color(card) in colors_of(flag_of_Netherlands) => needs_support(lion, panda_bear)\n# Rule4: If you are positive that you saw one of the animals respects the elephant, you can be certain that it will also burn the warehouse of the viperfish\nrule4(something) = respects(something, elephant) => burn_warehouse(something, viperfish)\n# Rule5: The lion winks at the panda bear whenever at least one animal attacks the green fields whose owner is the buffalo\nrule5() = attacks(something, green_fields, owner(buffalo)) => winks(lion, panda_bear)\n# Rule6: If the lion has fewer than five friends, then the lion does not need support from the panda bear.\nrule6() = friends(lion) < 5 => not needs_support(lion, panda_bear)\n# Rule2 is preferred over Rule6\norder(rule2) > order(rule6) = True\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n\n# The current state of the game is as follows\n# The grasshopper respects the elephant\nrespects(grasshopper, elephant) = True\n# The lion has 3 friends\nfriends(lion) = 3\n# The lion has a card that is blue in color, and parked her bike in front of the store\nhas(lion, card) = True\ncolor(card, blue) = True\nparked_bike(lion, front_of(store)) = True\n# The lion has a cutter\nhas(lion, cutter) = True\n# The squirrel attacks the green fields whose owner is the buffalo.\nattacks(squirrel, green_fields, owner(buffalo)) = True\n\n# Based on the game state and the rules and preferences, does the lion attack the green fields whose owner is the phoenix?\nquestion = attack(green_fields, owner(phoenix))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cow respects the panda bear, then the panda bear rolls the dice for the swordfish\nRule2: If something does not raise a flag of peace for the penguin, then it will respect the panda bear\nRule3: If something proceeds to the spot right after the spider, then it will not roll the dice for the swordfish.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cow raises a peace flag for the penguin\nThe leopard prepares armor for the cow.\n\nBased on the game state and the rules and preferences, does the panda bear roll the dice for the swordfish?\nQuestion: Does the panda bear roll the dice for the swordfish?",
        "idx": 398,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cow respects the panda bear, then the panda bear rolls the dice for the swordfish\nrule1() = respect(cow, panda_bear) => roll_dice(panda_bear, swordfish)\n# Rule2: If you are positive that one of the animals does not raise a flag of peace for the penguin, you can be certain that it will respect the panda bear without a doubt\nrule2(something) = not raise_flag_of_peace(something, penguin) => respect(something, panda_bear)\n# Rule3: If you are positive that you saw one of the animals proceeds to the spot right after the spider, you can be certain that it will not roll the dice for the swordfish.\nrule3(something) = proceed_to_spot_right_after(something, spider) => not roll_dice(something, swordfish)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cow raises a peace flag for the penguin\nraise_flag_of_peace(cow, penguin) = True\n# The leopard prepares armor for the cow.\nprepare_armor(leopard, cow) = True\n\n# Based on the game state and the rules and preferences, does the panda bear roll the dice for the swordfish?\nquestion = roll_dice(panda_bear, swordfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The black bear removes one of the pieces of the goldfish if the phoenix prepares armor for the black bear\nRule2: If something burns the warehouse of the doctorfish but does not owe money to the salmon, then it prepares armor for the black bear.\n\nThe current state of the game is as follows\nThe phoenix burns the warehouse of the doctorfish\nThe phoenix does not owe money to the salmon.\n\nBased on the game state and the rules and preferences, does the black bear remove from the board one of the pieces of the goldfish?\nQuestion: Does the black bear remove from the board one of the pieces of the goldfish?",
        "idx": 399,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The black bear unquestionably removes one of the pieces of the goldfish, in the case where the phoenix prepares armor for the black bear\nrule1() = prepare_armor(phoenix, black_bear) => remove_piece(black_bear, goldfish)\n# Rule2: Be careful when something burns the warehouse that is in possession of the doctorfish but does not owe $$$ to the salmon because in this case it will, surely, prepare armor for the black bear (this may or may not be problematic).\nrule2() = burn_warehouse(something, doctorfish) & not owe(something, money, salmon) => prepare_armor(something, black_bear)\n\n# The current state of the game is as follows\n# The phoenix burns the warehouse of the doctorfish\nburn_warehouse(phoenix, doctorfish) = True\n# The phoenix does not owe money to the salmon.\nnot owe(phoenix, money, salmon) = True\n\n# Based on the game state and the rules and preferences, does the black bear remove from the board one of the pieces of the goldfish?\nquestion = remove_piece(black_bear, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tiger has something to carry apples and oranges, then it offers a job position to the crocodile\nRule2: If the tiger has a sharp object, then it does not offer a job to the crocodile\nRule3: The crocodile does not hold an equal number of points as the spider, in the case where the tiger offers a job to the crocodile\nRule4: If the tiger has a card whose color starts with the letter \"l\", then it does not offer a job position to the crocodile\nRule5: If the first letter of the name of the tiger is the same as the first letter of the name of the aardvark, then the tiger offers a job position to the crocodile.\n\nRule2 is preferred over Rule1\nRule2 is preferred over Rule5\nRule4 is preferred over Rule1\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe name of the aardvark is Tessa\nThe tiger has a blue card\nThe tiger has a computer\nThe name of the tiger is Tango.\n\nBased on the game state and the rules and preferences, does the crocodile hold the same number of points as the spider?\nQuestion: Does the crocodile hold the same number of points as the spider?",
        "idx": 400,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the tiger, if it has something to carry apples and oranges, then we can conclude that it offers a job position to the crocodile\nrule1() = has(tiger, carry_apples_and_oranges) => offer_job_position(tiger, crocodile)\n# Rule2: Regarding the tiger, if it has a sharp object, then we can conclude that it does not offer a job to the crocodile\nrule2() = has(tiger, sharp_object) => not offer_job_position(tiger, crocodile)\n# Rule3: The crocodile does not hold an equal number of points as the spider, in the case where the tiger offers a job to the crocodile\nrule3() = offer_job_position(tiger, crocodile) => points(crocodile) != points(spider)\n# Rule4: If the tiger has a card whose color starts with the letter \"l\", then the tiger does not offer a job position to the crocodile\nrule4() = has(tiger, card) and starts_with(color(card), \"l\") => not offer_job_position(tiger, crocodile)\n# Rule5: If the tiger has a name whose first letter is the same as the first letter of the aardvark's name, then the tiger offers a job position to the crocodile.\nrule5() = first_letter_of(name(tiger)) == first_letter_of(name(aardvark)) => offer_job_position(tiger, crocodile)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The aardvark is named Tessa\nname(aardvark, Tessa) = True\n# The tiger has a card that is blue in color\nhas(tiger, card) = True\ncolor(card, blue) = True\n# The tiger has a computer, and is named Tango.\nhas(tiger, computer) = True\nname(tiger, Tango) = True\n\n# Based on the game state and the rules and preferences, does the crocodile hold the same number of points as the spider?\nquestion = points(crocodile) == points(spider)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The sea bass does not become an actual enemy of the kangaroo, in the case where the carp knows the defensive plans of the sea bass\nRule2: If the whale has something to sit on, then the whale knows the defense plan of the sea bass\nRule3: The sea bass unquestionably becomes an actual enemy of the kangaroo, in the case where the whale knows the defense plan of the sea bass.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe whale has a plastic bag.\n\nBased on the game state and the rules and preferences, does the sea bass become an enemy of the kangaroo?\nQuestion: Does the sea bass become an enemy of the kangaroo?",
        "idx": 401,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The sea bass does not become an actual enemy of the kangaroo, in the case where the carp knows the defensive plans of the sea bass\nrule1() = knows(carp, defensive_plans, sea_bass) => not become_enemy(sea_bass, kangaroo)\n# Rule2: If the whale has something to sit on, then the whale knows the defense plan of the sea bass\nrule2() = has(whale, something_to_sit_on) => knows(whale, defensive_plans, sea_bass)\n# Rule3: The sea bass unquestionably becomes an actual enemy of the kangaroo, in the case where the whale knows the defense plan of the sea bass.\nrule3() = knows(whale, defensive_plans, sea_bass) => become_enemy(sea_bass, kangaroo)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The whale has a plastic bag.\nhas(whale, plastic_bag) = True\n\n# Based on the game state and the rules and preferences, does the sea bass become an enemy of the kangaroo?\nquestion = become_enemy(sea_bass, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the halibut learns elementary resource management from the carp and the turtle winks at the carp, then you can add \"the carp burns the warehouse that is in possession of the sheep\" to your conclusions\nRule2: If something burns the warehouse of the sheep, then the moose needs support from the catfish.\n\nThe current state of the game is as follows\nThe halibut learns the basics of resource management from the carp\nThe turtle winks at the carp.\n\nBased on the game state and the rules and preferences, does the moose need support from the catfish?\nQuestion: Does the moose need support from the catfish?",
        "idx": 402,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the carp, if the belief is that the halibut learns elementary resource management from the carp and the turtle winks at the carp, then you can add \"the carp burns the warehouse that is in possession of the sheep\" to your conclusions\nrule1() = belief(carp, learns(halibut, elementary_resource_management_from(carp))) & wink(turtle, carp) => add_conclusion(\"the carp burns the warehouse that is in possession of the sheep\")\n# Rule2: If at least one animal burns the warehouse of the sheep, then the moose needs support from the catfish.\nrule2() = burns(something, warehouse(sheep)) => needs_support(moose, catfish)\n\n# The current state of the game is as follows\n# The halibut learns the basics of resource management from the carp\nbelief(carp, learns(halibut, elementary_resource_management_from(carp))) = True\n# The turtle winks at the carp.\nwink(turtle, carp) = True\n\n# Based on the game state and the rules and preferences, does the moose need support from the catfish?\nquestion = needs_support(moose, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal owes money to the amberjack, then the lobster does not hold the same number of points as the sun bear\nRule2: If the dog has a card whose color starts with the letter \"n\", then the dog owes money to the amberjack\nRule3: If the dog has a device to connect to the internet, then it owes money to the amberjack.\n\nThe current state of the game is as follows\nThe dog has a card that is indigo in color\nThe dog has a tablet.\n\nBased on the game state and the rules and preferences, does the lobster hold the same number of points as the sun bear?\nQuestion: Does the lobster hold the same number of points as the sun bear?",
        "idx": 403,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal owes $$$ to the amberjack, then the lobster does not hold the same number of points as the sun bear\nrule1() = owes(something, money, amberjack) => points(lobster) != points(sun_bear)\n# Rule2: If the dog has a card whose color starts with the letter \"n\", then the dog owes $$$ to the amberjack\nrule2() = has(dog, card) and starts_with(color(card), \"n\") => owes(dog, money, amberjack)\n# Rule3: Regarding the dog, if it has a device to connect to the internet, then we can conclude that it owes money to the amberjack.\nrule3() = has(dog, device_to_connect_to_internet) => owes(dog, money, amberjack)\n\n# The current state of the game is as follows\n# The dog has a card that is indigo in color\nhas(dog, card) = True\ncolor(card, indigo) = True\n# The dog has a tablet.\nhas(dog, tablet) = True\n\n# Based on the game state and the rules and preferences, does the lobster hold the same number of points as the sun bear?\nquestion = points(lobster) == points(sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the starfish raises a flag of peace for the swordfish and the cockroach offers a job to the swordfish, then the swordfish will not owe $$$ to the eel\nRule2: The eel prepares armor for the grasshopper, in the case where the swordfish does not owe $$$ to the eel.\n\nThe current state of the game is as follows\nThe mosquito holds the same number of points as the swordfish\nThe starfish raises a peace flag for the swordfish\nThe cockroach does not offer a job to the swordfish.\n\nBased on the game state and the rules and preferences, does the eel prepare armor for the grasshopper?\nQuestion: Does the eel prepare armor for the grasshopper?",
        "idx": 404,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the starfish raises a flag of peace for the swordfish and the cockroach offers a job to the swordfish, then the swordfish will not owe $$$ to the eel\nrule1() = raise_flag_of_peace(starfish, swordfish) & offer_job_position(cockroach, swordfish) => not owe(swordfish, $$$, eel)\n# Rule2: The eel unquestionably prepares armor for the grasshopper, in the case where the swordfish does not owe $$$ to the eel.\nrule2() = not owe(swordfish, $$$, eel) => prepare_armor(eel, grasshopper)\n\n# The current state of the game is as follows\n# The mosquito holds the same number of points as the swordfish\npoints(mosquito) == points(swordfish) = True\n# The starfish raises a peace flag for the swordfish\nraise_flag_of_peace(starfish, swordfish) = True\n# The cockroach does not offer a job to the swordfish.\noffer_job_position(cockroach, swordfish) = False\n\n# Based on the game state and the rules and preferences, does the eel prepare armor for the grasshopper?\nquestion = prepare_armor(eel, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knows the defensive plans of the parrot, then the meerkat winks at the tiger\nRule2: If the meerkat has a card whose color starts with the letter \"b\", then it does not remove one of the pieces of the cow\nRule3: If the meerkat has fewer than thirteen friends, then it does not wink at the tiger\nRule4: If something winks at the tiger and removes one of the pieces of the cow, then it also removes one of the pieces of the baboon\nRule5: If the rabbit steals five points from the meerkat, then the meerkat removes one of the pieces of the cow.\n\nRule2 is preferred over Rule5\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe rabbit steals five points from the meerkat\nThe sheep knows the defensive plans of the parrot.\n\nBased on the game state and the rules and preferences, does the meerkat remove from the board one of the pieces of the baboon?\nQuestion: Does the meerkat remove from the board one of the pieces of the baboon?",
        "idx": 405,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The meerkat winks at the tiger whenever at least one animal knows the defensive plans of the parrot\nrule1() = knows(something, defensive_plans, parrot) => wink(meerkat, tiger)\n# Rule2: If the meerkat has a card whose color starts with the letter \"b\", then the meerkat does not remove from the board one of the pieces of the cow\nrule2() = has(meerkat, card) and starts_with(color(card), \"b\") => not remove(meerkat, piece, cow)\n# Rule3: Regarding the meerkat, if it has fewer than thirteen friends, then we can conclude that it does not wink at the tiger\nrule3() = friends(meerkat) < 13 => not wink(meerkat, tiger)\n# Rule4: If you see that something winks at the tiger and removes one of the pieces of the cow, what can you certainly conclude? You can conclude that it also removes from the board one of the pieces of the baboon\nrule4() = wink(something, tiger) & remove(something, piece, cow) => remove(something, piece, baboon)\n# Rule5: If the rabbit steals five points from the meerkat, then the meerkat removes one of the pieces of the cow.\nrule5() = steal(rabbit, 5, points, meerkat) => remove(meerkat, piece, cow)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The rabbit steals five points from the meerkat\nsteal(rabbit, 5, points, meerkat) = True\n# The sheep knows the defensive plans of the parrot.\nknows(sheep, defensive_plans, parrot) = True\n\n# Based on the game state and the rules and preferences, does the meerkat remove from the board one of the pieces of the baboon?\nquestion = remove(meerkat, piece, baboon)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not learn the basics of resource management from the koala, then it will not steal five points from the crocodile\nRule2: If something steals five points from the crocodile, then the carp does not prepare armor for the hare\nRule3: If something does not remove a piece of the catfish, then it prepares armor for the hare\nRule4: If the sheep does not roll the dice for the hummingbird and the salmon does not owe money to the hummingbird, then the hummingbird steals five points from the crocodile.\n\nRule1 is preferred over Rule4\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe salmon does not owe money to the hummingbird\nThe sheep does not roll the dice for the hummingbird.\n\nBased on the game state and the rules and preferences, does the carp prepare armor for the hare?\nQuestion: Does the carp prepare armor for the hare?",
        "idx": 406,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not learn the basics of resource management from the koala, you can be certain that it will not steal five of the points of the crocodile\nrule1(something) = not learn(something, basics_of_resource_management, koala) => not steal_points(something, 5, crocodile)\n# Rule2: If at least one animal steals five points from the crocodile, then the carp does not prepare armor for the hare\nrule2() = steal_points(something, 5, crocodile) => not prepare_armor(carp, hare)\n# Rule3: If something does not remove one of the pieces of the catfish, then it prepares armor for the hare\nrule3(something) = not remove_piece(something, catfish) => prepare_armor(something, hare)\n# Rule4: For the hummingbird, if the belief is that the sheep does not roll the dice for the hummingbird and the salmon does not owe $$$ to the hummingbird, then you can add \"the hummingbird steals five points from the crocodile\" to your conclusions.\nrule4() = not roll_dice(sheep, hummingbird) & not owe(salmon, money, hummingbird) => steal_points(hummingbird, 5, crocodile)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The salmon does not owe money to the hummingbird\nowe(salmon, money, hummingbird) = False\n# The sheep does not roll the dice for the hummingbird.\nroll_dice(sheep, hummingbird) = False\n\n# Based on the game state and the rules and preferences, does the carp prepare armor for the hare?\nquestion = prepare_armor(carp, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something sings a victory song for the donkey, then it becomes an enemy of the lion, too\nRule2: If something offers a job to the turtle, then it does not become an actual enemy of the lion\nRule3: If something owes money to the dog, then the aardvark does not proceed to the spot that is right after the spot of the baboon\nRule4: If the aardvark has a musical instrument, then it proceeds to the spot that is right after the spot of the baboon\nRule5: If something does not become an actual enemy of the lion but it proceeds to the spot right after the baboon, then it holds an equal number of points as the buffalo.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe aardvark has a saxophone\nThe aardvark knocks down the fortress of the turtle.\n\nBased on the game state and the rules and preferences, does the aardvark hold the same number of points as the buffalo?\nQuestion: Does the aardvark hold the same number of points as the buffalo?",
        "idx": 407,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something sings a victory song for the donkey, then it becomes an enemy of the lion, too\nrule1(something) = sings_victory_song(something, donkey) => become_enemy(something, lion)\n# Rule2: If something offers a job to the turtle, then it does not become an actual enemy of the lion\nrule2(something) = offer_job_position(something, turtle) => not become_enemy(something, lion)\n# Rule3: If at least one animal owes money to the dog, then the aardvark does not proceed to the spot that is right after the spot of the baboon\nrule3() = owes_money(something, dog) => not proceed_to_spot(aardvark, right_after_spot(baboon))\n# Rule4: If the aardvark has a musical instrument, then the aardvark proceeds to the spot that is right after the spot of the baboon\nrule4() = has(aardvark, musical_instrument) => proceed_to_spot(aardvark, right_after_spot(baboon))\n# Rule5: If you see that something does not become an actual enemy of the lion but it proceeds to the spot right after the baboon, what can you certainly conclude? You can conclude that it also holds an equal number of points as the buffalo.\nrule5(something) = not become_enemy(something, lion) & proceed_to_spot(something, right_after_spot(baboon)) => points(something) == points(buffalo)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The aardvark has a saxophone\nhas(aardvark, saxophone) = True\n# The aardvark knocks down the fortress of the turtle.\nknock_down(aardvark, fortress, turtle) = True\n\n# Based on the game state and the rules and preferences, does the aardvark hold the same number of points as the buffalo?\nquestion = points(aardvark) == points(buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squirrel has a musical instrument, then it shows all her cards to the elephant\nRule2: If the squirrel has a leafy green vegetable, then it shows all her cards to the elephant\nRule3: If the squirrel has a sharp object, then it does not show all her cards to the elephant\nRule4: If the squirrel shows all her cards to the elephant, then the elephant removes one of the pieces of the black bear.\n\nRule1 is preferred over Rule3\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe squirrel has a backpack and a basket\nThe squirrel has a blade\nThe squirrel has some spinach.\n\nBased on the game state and the rules and preferences, does the elephant remove from the board one of the pieces of the black bear?\nQuestion: Does the elephant remove from the board one of the pieces of the black bear?",
        "idx": 408,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the squirrel, if it has a musical instrument, then we can conclude that it shows all her cards to the elephant\nrule1() = has(squirrel, musical_instrument) => show_all_cards(squirrel, elephant)\n# Rule2: If the squirrel has a leafy green vegetable, then the squirrel shows all her cards to the elephant\nrule2() = has(squirrel, leafy_green_vegetable) => show_all_cards(squirrel, elephant)\n# Rule3: If the squirrel has a sharp object, then the squirrel does not show all her cards to the elephant\nrule3() = has(squirrel, sharp_object) => not show_all_cards(squirrel, elephant)\n# Rule4: If the squirrel shows all her cards to the elephant, then the elephant removes one of the pieces of the black bear.\nrule4() = show_all_cards(squirrel, elephant) => remove_piece(elephant, black_bear)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The squirrel has a backpack, and has a basket\nhas(squirrel, backpack) = True\nhas(squirrel, basket) = True\n# The squirrel has a blade\nhas(squirrel, blade) = True\n# The squirrel has some spinach.\nhas(squirrel, spinach) = True\n\n# Based on the game state and the rules and preferences, does the elephant remove from the board one of the pieces of the black bear?\nquestion = remove_piece(elephant, black_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the eel has a sharp object, then it does not roll the dice for the mosquito\nRule2: If something does not roll the dice for the mosquito but it rolls the dice for the viperfish, then it is not going to learn the basics of resource management from the bat\nRule3: If the eel has a card whose color is one of the rainbow colors, then it rolls the dice for the viperfish\nRule4: If the eel has more than 10 friends, then it rolls the dice for the viperfish\nRule5: If the eel has published a high-quality paper, then it does not roll the dice for the mosquito.\n\nThe current state of the game is as follows\nThe eel has 1 adventurous friend\nThe eel has 1 non-adventurous friend\nThe eel has a blade\nThe eel has a red card\nThe eel has a piano\nThe eel recently read a high-quality paper\n\nBased on the game state and the rules and preferences, does the eel learn the basics of resource management from the bat?\nQuestion: Does the eel learn the basics of resource management from the bat?",
        "idx": 409,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the eel, if it has a sharp object, then we can conclude that it does not roll the dice for the mosquito\nrule1() = has(eel, sharp_object) => not roll_dice(eel, mosquito)\n# Rule2: If you see that something does not roll the dice for the mosquito but it rolls the dice for the viperfish, what can you certainly conclude? You can conclude that it is not going to learn the basics of resource management from the bat\nrule2(something) = not roll_dice(something, mosquito) & roll_dice(something, viperfish) => not learn_basics_of_resource_management(something, bat)\n# Rule3: Regarding the eel, if it has a card whose color is one of the rainbow colors, then we can conclude that it rolls the dice for the viperfish\nrule3() = has(eel, card) and color(card) in rainbow_colors => roll_dice(eel, viperfish)\n# Rule4: If the eel has more than 10 friends, then the eel rolls the dice for the viperfish\nrule4() = friends(eel) > 10 => roll_dice(eel, viperfish)\n# Rule5: If the eel has published a high-quality paper, then the eel does not roll the dice for the mosquito.\nrule5() = published(eel, high_quality_paper) => not roll_dice(eel, mosquito)\n\n# The current state of the game is as follows\n# The eel has 1 friend that is adventurous and 1 friend that is not\nadventurous_friends(eel) = 1\nnon_adventurous_friends(eel) = 1\n# The eel has a blade\nhas(eel, blade) = True\n# The eel has a card that is red in color\nhas(eel, card) = True\ncolor(card, red) = True\n# The eel has a piano\nhas(eel, piano) = True\n# The eel recently read a high-quality paper\nrecently_read(eel, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the eel learn the basics of resource management from the bat?\nquestion = learn_basics_of_resource_management(eel, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion has more than 9 friends, then it steals five points from the cat\nRule2: If the buffalo holds an equal number of points as the oscar, then the oscar does not wink at the lion\nRule3: If something steals five points from the cat and sings a victory song for the crocodile, then it raises a flag of peace for the catfish\nRule4: If the lion has a card and the color of the card appears in the flag of Japan, then it steals five points from the cat\nRule5: If something offers a job position to the oscar, then it sings a victory song for the crocodile\nRule6: If the swordfish respects the lion and the oscar does not prepare armor for the lion, then the lion does not raise a peace flag for the catfish.\n\nRule3 is preferred over Rule6\n\nThe current state of the game is as follows\nThe buffalo holds the same number of points as the oscar\nThe lion has 12 friends\nThe lion has a black card\nThe lion does not offer a job to the oscar\nThe oscar does not roll the dice for the squirrel.\n\nBased on the game state and the rules and preferences, does the lion raise a peace flag for the catfish?\nQuestion: Does the lion raise a peace flag for the catfish?",
        "idx": 410,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lion has more than 9 friends, then the lion steals five of the points of the cat\nrule1() = friends(lion) > 9 => steal_points(lion, 5, cat)\n# Rule2: If the buffalo holds an equal number of points as the oscar, then the oscar is not going to wink at the lion\nrule2() = points(buffalo) == points(oscar) => not wink(oscar, lion)\n# Rule3: Be careful when something steals five points from the cat and also sings a victory song for the crocodile because in this case it will surely raise a flag of peace for the catfish (this may or may not be problematic)\nrule3(something) = steal_points(something, 5, cat) & sing_victory_song(something, crocodile) => raise_flag_of_peace(something, catfish)\n# Rule4: Regarding the lion, if it has a card whose color appears in the flag of Japan, then we can conclude that it steals five points from the cat\nrule4() = has(lion, card) and color(card) in flag_of_Japan_colors => steal_points(lion, 5, cat)\n# Rule5: If you are positive that you saw one of the animals offers a job position to the oscar, you can be certain that it will also sing a victory song for the crocodile\nrule5(something) = offer_job_position(something, oscar) => sing_victory_song(something, crocodile)\n# Rule6: For the lion, if the belief is that the swordfish respects the lion and the oscar does not prepare armor for the lion, then you can add \"the lion does not raise a peace flag for the catfish\" to your conclusions.\nrule6() = respect(swordfish, lion) & not prepare_armor(oscar, lion) => not raise_flag_of_peace(lion, catfish)\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n\n# The current state of the game is as follows\n# The buffalo holds the same number of points as the oscar\npoints(buffalo) == points(oscar) = True\n# The lion has 12 friends\nfriends(lion) = 12\n# The lion has a card that is black in color\nhas(lion, card) = True\ncolor(card, black) = True\n# The lion does not offer a job to the oscar\nnot offer_job_position(lion, oscar) = True\n# The oscar does not roll the dice for the squirrel.\nnot roll_dice(oscar, squirrel) = True\n\n# Based on the game state and the rules and preferences, does the lion raise a peace flag for the catfish?\nquestion = raise_flag_of_peace(lion, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the catfish has a leafy green vegetable, then it owes money to the sea bass\nRule2: If the tiger has fewer than ten friends, then it owes money to the sea bass\nRule3: If the catfish owes money to the sea bass and the tiger owes money to the sea bass, then the sea bass knows the defensive plans of the gecko\nRule4: If something attacks the green fields whose owner is the whale, then the tiger does not owe money to the sea bass\nRule5: If the first letter of the name of the tiger is the same as the first letter of the name of the hummingbird, then the tiger owes money to the sea bass.\n\nRule4 is preferred over Rule2\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe catfish has some romaine lettuce\nThe name of the hummingbird is Milo\nThe tiger has 9 friends\nThe name of the tiger is Paco\n\nBased on the game state and the rules and preferences, does the sea bass know the defensive plans of the gecko?\nQuestion: Does the sea bass know the defensive plans of the gecko?",
        "idx": 411,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the catfish has a leafy green vegetable, then the catfish owes money to the sea bass\nrule1() = has(catfish, leafy_green_vegetable) => owes(catfish, money, sea_bass)\n# Rule2: Regarding the tiger, if it has fewer than ten friends, then we can conclude that it owes money to the sea bass\nrule2() = friends(tiger) < 10 => owes(tiger, money, sea_bass)\n# Rule3: For the sea bass, if the belief is that the catfish owes money to the sea bass and the tiger owes $$$ to the sea bass, then you can add \"the sea bass knows the defensive plans of the gecko\" to your conclusions\nrule3() = owes(catfish, money, sea_bass) & owes(tiger, money, sea_bass) => knows(sea_bass, defensive_plans, gecko)\n# Rule4: The tiger does not owe $$$ to the sea bass whenever at least one animal attacks the green fields whose owner is the whale\nrule4() = attacks(something, green_fields, owner(whale)) => not owes(tiger, money, sea_bass)\n# Rule5: If the tiger has a name whose first letter is the same as the first letter of the hummingbird's name, then the tiger owes $$$ to the sea bass.\nrule5() = first_letter_of(name(tiger)) == first_letter_of(name(hummingbird)) => owes(tiger, money, sea_bass)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The catfish has some romaine lettuce\nhas(catfish, romaine_lettuce) = True\n# The hummingbird is named Milo\nname(hummingbird, Milo) = True\n# The tiger has 9 friends\nfriends(tiger) = 9\n# The tiger is named Paco\nname(tiger, Paco) = True\n\n# Based on the game state and the rules and preferences, does the sea bass know the defensive plans of the gecko?\nquestion = knows(sea_bass, defensive_plans, gecko)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something steals five points from the rabbit, then it does not learn elementary resource management from the hippopotamus\nRule2: If something shows all her cards to the grasshopper, then the dog steals five of the points of the rabbit.\n\nThe current state of the game is as follows\nThe parrot shows all her cards to the grasshopper.\n\nBased on the game state and the rules and preferences, does the dog learn the basics of resource management from the hippopotamus?\nQuestion: Does the dog learn the basics of resource management from the hippopotamus?",
        "idx": 412,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something steals five points from the rabbit, then it does not learn elementary resource management from the hippopotamus\nrule1(something) = steal_points(something, 5, rabbit) => not learn(something, elementary_resource_management, hippopotamus)\n# Rule2: If at least one animal shows all her cards to the grasshopper, then the dog steals five of the points of the rabbit.\nrule2() = show_all_cards(something, grasshopper) => steal_points(dog, 5, rabbit)\n\n# The current state of the game is as follows\n# The parrot shows all her cards to the grasshopper.\nshow_all_cards(parrot, grasshopper) = True\n\n# Based on the game state and the rules and preferences, does the dog learn the basics of resource management from the hippopotamus?\nquestion = learn(dog, elementary_resource_management, hippopotamus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the rabbit has a musical instrument, then it burns the warehouse of the crocodile\nRule2: If the rabbit is a fan of Chris Ronaldo, then it sings a song of victory for the jellyfish\nRule3: If the first letter of the name of the rabbit is the same as the first letter of the name of the tilapia, then it burns the warehouse of the crocodile\nRule4: If something prepares armor for the sheep, then it will not become an enemy of the dog\nRule5: If something does not burn the warehouse of the snail, then it will respect the sheep without a doubt\nRule6: If something burns the warehouse of the crocodile and also sings a song of victory for the jellyfish, then it will become an enemy of the dog\n\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe rabbit has a beer, and does not burn the warehouse of the snail\nThe rabbit has a blade\nThe rabbit has 1 adventurous friend and 5 non-adventurous friends\nThe name of the rabbit is Charlie\nThe rabbit stole a bike from the store\nThe raven eats the food of the rabbit\nThe name of the tilapia is Peddi.\n\nBased on the game state and the rules and preferences, does the rabbit become an enemy of the dog?\nQuestion: Does the rabbit become an enemy of the dog?",
        "idx": 413,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the rabbit, if it has a musical instrument, then we can conclude that it burns the warehouse that is in possession of the crocodile\nrule1() = has(rabbit, musical_instrument) => burn_warehouse(rabbit, warehouse_of(crocodile))\n# Rule2: Regarding the rabbit, if it is a fan of Chris Ronaldo, then we can conclude that it sings a song of victory for the jellyfish\nrule2() = fan_of(rabbit, Chris_Ronaldo) => sing_song_of_victory(rabbit, jellyfish)\n# Rule3: Regarding the rabbit, if it has a name whose first letter is the same as the first letter of the tilapia's name, then we can conclude that it burns the warehouse of the crocodile\nrule3() = first_letter_of(name(rabbit)) == first_letter_of(name(tilapia)) => burn_warehouse(rabbit, warehouse_of(crocodile))\n# Rule4: If you are positive that you saw one of the animals prepares armor for the sheep, you can be certain that it will not become an actual enemy of the dog\nrule4(something) = prepare_armor(something, sheep) => not become_enemy(something, dog)\n# Rule5: If you are positive that one of the animals does not burn the warehouse of the snail, you can be certain that it will respect the sheep without a doubt\nrule5(something) = not burn_warehouse(something, warehouse_of(snail)) => respect(something, sheep)\n# Rule6: Be careful when something burns the warehouse of the crocodile and also sings a song of victory for the jellyfish because in this case it will surely become an enemy of the dog (this may or may not be problematic).\nrule6() = burn_warehouse(something, warehouse_of(crocodile)) & sing_song_of_victory(something, jellyfish) => become_enemy(something, dog)\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The rabbit has a beer, and does not burn the warehouse of the snail\nhas(rabbit, beer) = True\nnot burn_warehouse(rabbit, warehouse_of(snail)) = True\n# The rabbit has a blade, and has one friend that is adventurous and 5 friends that are not\nhas(rabbit, blade) = True\nadventurous_friends(rabbit) = 1\nnon_adventurous_friends(rabbit) = 5\n# The rabbit is named Charlie, and stole a bike from the store\nname(rabbit, Charlie) = True\nstole(rabbit, bike, store) = True\n# The raven eats the food of the rabbit\neat_food(raven, food_of(rabbit)) = True\n# The tilapia is named Peddi.\nname(tilapia, Peddi) = True\n\n# Based on the game state and the rules and preferences, does the rabbit become an enemy of the dog?\nquestion = become_enemy(rabbit, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The squirrel knows the defensive plans of the kangaroo whenever at least one animal offers a job position to the black bear\nRule2: If the raven created a time machine, then it offers a job position to the black bear.\n\nThe current state of the game is as follows\nThe raven invented a time machine.\n\nBased on the game state and the rules and preferences, does the squirrel know the defensive plans of the kangaroo?\nQuestion: Does the squirrel know the defensive plans of the kangaroo?",
        "idx": 414,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The squirrel knows the defensive plans of the kangaroo whenever at least one animal offers a job position to the black bear\nrule1() = offer_job_position(something, black_bear) => knows(squirrel, defensive_plans, kangaroo)\n# Rule2: Regarding the raven, if it created a time machine, then we can conclude that it offers a job position to the black bear.\nrule2() = created(raven, time_machine) => offer_job_position(raven, black_bear)\n\n# The current state of the game is as follows\n# The raven invented a time machine.\ncreated(raven, time_machine) = True\n\n# Based on the game state and the rules and preferences, does the squirrel know the defensive plans of the kangaroo?\nquestion = knows(squirrel, defensive_plans, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the leopard has a sharp object, then it needs the support of the panther\nRule2: If the leopard has a card whose color starts with the letter \"l\", then it needs the support of the panther\nRule3: If the raven respects the leopard, then the leopard does not need support from the panther\nRule4: If the snail gives a magnifying glass to the panther and the leopard needs support from the panther, then the panther is not going to learn the basics of resource management from the jellyfish\nRule5: If something removes one of the pieces of the wolverine and also respects the lobster, then it gives a magnifier to the panther.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe leopard has a blade\nThe leopard has a card that is black in color\nThe snail removes from the board one of the pieces of the wolverine\nThe snail respects the lobster\n\nBased on the game state and the rules and preferences, does the panther learn the basics of resource management from the jellyfish?\nQuestion: Does the panther learn the basics of resource management from the jellyfish?",
        "idx": 415,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the leopard, if it has a sharp object, then we can conclude that it needs the support of the panther\nrule1() = has(leopard, sharp_object) => needs_support(leopard, panther)\n# Rule2: Regarding the leopard, if it has a card whose color starts with the letter \"l\", then we can conclude that it needs the support of the panther\nrule2() = has(leopard, card) and starts_with(color(card), \"l\") => needs_support(leopard, panther)\n# Rule3: If the raven respects the leopard, then the leopard is not going to need support from the panther\nrule3() = respects(raven, leopard) => not needs_support(leopard, panther)\n# Rule4: For the panther, if the belief is that the snail gives a magnifying glass to the panther and the leopard needs support from the panther, then you can add that \"the panther is not going to learn the basics of resource management from the jellyfish\" to your conclusions\nrule4() = give(snail, magnifying_glass, panther) & needs_support(leopard, panther) => add_conclusion(\"the panther is not going to learn the basics of resource management from the jellyfish\")\n# Rule5: Be careful when something removes one of the pieces of the wolverine and also respects the lobster because in this case it will surely give a magnifier to the panther (this may or may not be problematic).\nrule5() = remove(something, piece, wolverine) & respects(something, lobster) => give(something, magnifying_glass, panther)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The leopard has a blade\nhas(leopard, blade) = True\n# The leopard has a card that is black in color\nhas(leopard, card) = True\ncolor(card, black) = True\n# The snail removes from the board one of the pieces of the wolverine\nremove(snail, piece, wolverine) = True\n# The snail respects the lobster\nrespects(snail, lobster) = True\n\n# Based on the game state and the rules and preferences, does the panther learn the basics of resource management from the jellyfish?\nquestion = \"the panther is going to learn the basics of resource management from the jellyfish\" not in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something removes from the board one of the pieces of the crocodile and steals five points from the aardvark, then it also attacks the green fields of the sheep\nRule2: If something holds an equal number of points as the sheep, then it shows her cards (all of them) to the squirrel, too\nRule3: If the snail burns the warehouse of the moose and the catfish does not burn the warehouse of the moose, then the moose holds the same number of points as the sheep\nRule4: If something attacks the green fields whose owner is the sheep, then it does not show all her cards to the squirrel\nRule5: If the moose has a name whose first letter is the same as the first letter of the parrot's name, then it does not hold an equal number of points as the sheep\nRule6: If the moose has something to carry apples and oranges, then it does not hold the same number of points as the sheep\nRule7: If something does not prepare armor for the zander, then it will not attack the green fields whose owner is the sheep.\n\nRule1 is preferred over Rule7\nRule2 is preferred over Rule4\nRule5 is preferred over Rule3\nRule6 is preferred over Rule3\n\nThe current state of the game is as follows\nThe name of the moose is Lola\nThe moose steals five points from the aardvark but does not prepare armor for the zander\nThe name of the parrot is Meadow\nThe snail knows the defensive plans of the moose\nThe catfish does not burn the warehouse of the moose\nThe moose does not remove from the board one of the pieces of the crocodile.\n\nBased on the game state and the rules and preferences, does the moose show all her cards to the squirrel?\nQuestion: Does the moose show all her cards to the squirrel?",
        "idx": 416,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something removes from the board one of the pieces of the crocodile and steals five points from the aardvark, what can you certainly conclude? You can conclude that it also attacks the green fields of the sheep\nrule1() = remove(something, piece, crocodile) & steal(something, 5, points, aardvark) => attack(something, green_fields, sheep)\n# Rule2: If something holds an equal number of points as the sheep, then it shows her cards (all of them) to the squirrel, too\nrule2(something) = points(something) == points(sheep) => show_cards(something, all, squirrel)\n# Rule3: If the snail burns the warehouse of the moose and the catfish does not burn the warehouse of the moose, then, inevitably, the moose holds the same number of points as the sheep\nrule3() = burn(snail, warehouse, moose) & not burn(catfish, warehouse, moose) => points(moose) == points(sheep)\n# Rule4: If something attacks the green fields whose owner is the sheep, then it does not show all her cards to the squirrel\nrule4(something) = attack(something, green_fields, owner(sheep)) => not show_cards(something, all, squirrel)\n# Rule5: Regarding the moose, if it has a name whose first letter is the same as the first letter of the parrot's name, then we can conclude that it does not hold an equal number of points as the sheep\nrule5() = first_letter_of(name(moose)) == first_letter_of(name(parrot)) => points(moose) != points(sheep)\n# Rule6: If the moose has something to carry apples and oranges, then the moose does not hold the same number of points as the sheep\nrule6() = has(moose, carry, apples) & has(moose, carry, oranges) => points(moose) != points(sheep)\n# Rule7: If you are positive that one of the animals does not prepare armor for the zander, you can be certain that it will not attack the green fields whose owner is the sheep.\nrule7(something) = not prepare_armor(something, zander) => not attack(something, green_fields, owner(sheep))\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule2 is preferred over Rule4\norder(rule2) > order(rule4) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n# Rule6 is preferred over Rule3\norder(rule6) > order(rule3) = True\n\n# The current state of the game is as follows\n# The moose is named Lola\nname(moose, Lola) = True\n# The moose steals five points from the aardvark but does not prepare armor for the zander\nsteal(moose, 5, points, aardvark) = True\nprepare_armor(moose, zander) = False\n# The parrot is named Meadow\nname(parrot, Meadow) = True\n# The snail knows the defensive plans of the moose\nknows(snail, defensive_plans, moose) = True\n# The catfish does not burn the warehouse of the moose\nburn(catfish, warehouse, moose) = False\n# The moose does not remove from the board one of the pieces of the crocodile.\nremove(moose, piece, crocodile) = False\n\n# Based on the game state and the rules and preferences, does the moose show all her cards to the squirrel?\nquestion = show_cards(moose, all, squirrel)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something proceeds to the spot right after the panda bear but does not sing a victory song for the penguin, then it will sing a victory song for the sea bass.\nRule2: If the dog sings a victory song for the sea bass and the aardvark knocks down the fortress of the sea bass, then the sea bass owes money to the blobfish.\nRule3: If the cat offers a job to the aardvark, then the aardvark knocks down the fortress of the sea bass.\n\nThe current state of the game is as follows\nThe cat offers a job to the aardvark.\nThe dog proceeds to the spot right after the panda bear but does not sing a victory song for the penguin.\nThe kiwi shows all her cards to the tiger.\n\nBased on the game state and the rules and preferences, does the sea bass owe money to the blobfish?\nQuestion: Does the sea bass owe money to the blobfish?",
        "idx": 417,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something proceeds to the spot right after the panda bear but does not sing a song of victory for the penguin because in this case it will, surely, sing a victory song for the sea bass (this may or may not be problematic)\nrule1(something) = proceeds_to_spot_right_after(something, panda_bear) & not sing_victory_song(something, penguin) => sing_victory_song(something, sea_bass)\n# Rule2: If the dog sings a victory song for the sea bass and the aardvark knocks down the fortress of the sea bass, then the sea bass owes $$$ to the blobfish\nrule2() = sing_victory_song(dog, sea_bass) & knocks_down_fortress(aardvark, sea_bass) => owe(sea_bass, money, blobfish)\n# Rule3: The aardvark unquestionably knocks down the fortress of the sea bass, in the case where the cat offers a job to the aardvark.\nrule3() = offer_job_position(cat, aardvark) => knocks_down_fortress(aardvark, sea_bass)\n\n# The current state of the game is as follows\n# The cat offers a job to the aardvark\noffer_job_position(cat, aardvark) = True\n# The dog proceeds to the spot right after the panda bear but does not sing a victory song for the penguin\nproceeds_to_spot_right_after(dog, panda_bear) = True\nnot sing_victory_song(dog, penguin) = True\n# The kiwi shows all her cards to the tiger.\nshow_all_cards(kiwi, tiger) = True\n\n# Based on the game state and the rules and preferences, does the sea bass owe money to the blobfish?\nquestion = owe(sea_bass, money, blobfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not eat the food of the halibut, then it does not hold the same number of points as the carp\nRule2: If the buffalo needs the support of the cat and the amberjack prepares armor for the cat, then the cat will not eat the food that belongs to the halibut.\n\nThe current state of the game is as follows\nThe amberjack prepares armor for the cat\nThe buffalo needs support from the cat.\n\nBased on the game state and the rules and preferences, does the cat hold the same number of points as the carp?\nQuestion: Does the cat hold the same number of points as the carp?",
        "idx": 418,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not eat the food of the halibut, then it does not hold the same number of points as the carp\nrule1(something) = not eat_food(something, food_of(halibut)) => not hold_same_points(something, carp)\n# Rule2: If the buffalo needs the support of the cat and the amberjack prepares armor for the cat, then the cat will not eat the food that belongs to the halibut.\nrule2() = needs_support(buffalo, cat) & prepare_armor(amberjack, cat) => not eat_food(cat, food_of(halibut))\n\n# The current state of the game is as follows\n# The amberjack prepares armor for the cat\nprepare_armor(amberjack, cat) = True\n# The buffalo needs support from the cat.\nneeds_support(buffalo, cat) = True\n\n# Based on the game state and the rules and preferences, does the cat hold the same number of points as the carp?\nquestion = hold_same_points(cat, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something rolls the dice for the doctorfish, then it raises a flag of peace for the buffalo\nRule2: If something does not sing a victory song for the leopard, then it does not burn the warehouse of the puffin\nRule3: If something becomes an enemy of the koala and attacks the green fields whose owner is the cricket, then it sings a victory song for the leopard\nRule4: If the panda bear rolls the dice for the buffalo and the black bear raises a peace flag for the buffalo, then the buffalo burns the warehouse of the puffin\nRule5: If something attacks the green fields whose owner is the elephant, then it rolls the dice for the buffalo\nRule6: If the panda bear has something to carry apples and oranges, then it does not roll the dice for the buffalo.\n\nRule4 is preferred over Rule2\nRule5 is preferred over Rule6\n\nThe current state of the game is as follows\nThe black bear rolls the dice for the doctorfish\nThe buffalo attacks the green fields whose owner is the cricket\nThe buffalo becomes an enemy of the koala\nThe panda bear does not attack the green fields whose owner is the elephant.\n\nBased on the game state and the rules and preferences, does the buffalo burn the warehouse of the puffin?\nQuestion: Does the buffalo burn the warehouse of the puffin?",
        "idx": 419,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals rolls the dice for the doctorfish, you can be certain that it will also raise a flag of peace for the buffalo\nrule1(something) = rolls_dice(something, doctorfish) => raise_flag_of_peace(something, buffalo)\n# Rule2: If something does not sing a victory song for the leopard, then it does not burn the warehouse of the puffin\nrule2(something) = not sing_victory_song(something, leopard) => not burn_warehouse(something, puffin)\n# Rule3: Be careful when something becomes an actual enemy of the koala and also attacks the green fields whose owner is the cricket because in this case it will surely sing a victory song for the leopard (this may or may not be problematic)\nrule3(something) = become_enemy(something, koala) & attacks(something, green_fields, owner(cricket)) => sing_victory_song(something, leopard)\n# Rule4: If the panda bear rolls the dice for the buffalo and the black bear raises a peace flag for the buffalo, then the buffalo burns the warehouse of the puffin\nrule4() = rolls_dice(panda_bear, buffalo) & raise_flag_of_peace(black_bear, buffalo) => burn_warehouse(buffalo, puffin)\n# Rule5: If something attacks the green fields whose owner is the elephant, then it rolls the dice for the buffalo, too\nrule5(something) = attacks(something, green_fields, owner(elephant)) => rolls_dice(something, buffalo)\n# Rule6: If the panda bear has something to carry apples and oranges, then the panda bear does not roll the dice for the buffalo.\nrule6() = has(panda_bear, carry(apples)) & has(panda_bear, carry(oranges)) => not rolls_dice(panda_bear, buffalo)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n\n# The current state of the game is as follows\n# The black bear rolls the dice for the doctorfish\nrolls_dice(black_bear, doctorfish) = True\n# The buffalo attacks the green fields whose owner is the cricket\nattacks(buffalo, green_fields, owner(cricket)) = True\n# The buffalo becomes an enemy of the koala\nbecome_enemy(buffalo, koala) = True\n# The panda bear does not attack the green fields whose owner is the elephant.\nattacks(panda_bear, green_fields, owner(elephant)) = False\n\n# Based on the game state and the rules and preferences, does the buffalo burn the warehouse of the puffin?\nquestion = burn_warehouse(buffalo, puffin)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the aardvark has something to sit on, then it does not sing a song of victory for the tilapia\nRule2: If something does not sing a victory song for the tilapia, then it proceeds to the spot right after the dog.\n\nThe current state of the game is as follows\nThe aardvark has 12 friends\nThe aardvark has a club chair\nThe aardvark stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the aardvark proceed to the spot right after the dog?\nQuestion: Does the aardvark proceed to the spot right after the dog?",
        "idx": 420,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the aardvark, if it has something to sit on, then we can conclude that it does not sing a song of victory for the tilapia\nrule1() = has(aardvark, something_to_sit_on) => not sing_song_of_victory(aardvark, tilapia)\n# Rule2: If something does not sing a victory song for the tilapia, then it proceeds to the spot right after the dog.\nrule2(something) = not sing_song_of_victory(something, tilapia) => proceed_to_spot_right_after(dog)\n\n# The current state of the game is as follows\n# The aardvark has 12 friends\nfriends(aardvark) = 12\n# The aardvark has a club chair\nhas(aardvark, club_chair) = True\n# The aardvark stole a bike from the store.\nstole(aardvark, bike, store) = True\n\n# Based on the game state and the rules and preferences, does the aardvark proceed to the spot right after the dog?\nquestion = proceed_to_spot_right_after(aardvark, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal owes money to the cricket, then the panda bear does not know the defensive plans of the wolverine\nRule2: If the mosquito sings a victory song for the goldfish, then the goldfish owes money to the cricket\nRule3: If something needs the support of the salmon and does not know the defense plan of the whale, then it is not going to show all her cards to the squid\nRule4: If something shows all her cards to the squid, then it knows the defense plan of the wolverine\nRule5: If the panda bear works fewer hours than before, then it shows all her cards to the squid.\n\nRule1 is preferred over Rule4\nRule3 is preferred over Rule5\n\nThe current state of the game is as follows\nThe mosquito sings a victory song for the goldfish\nThe panda bear needs support from the salmon\nThe panda bear reduced her work hours recently.\n\nBased on the game state and the rules and preferences, does the panda bear know the defensive plans of the wolverine?\nQuestion: Does the panda bear know the defensive plans of the wolverine?",
        "idx": 421,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal owes money to the cricket, then the panda bear does not know the defensive plans of the wolverine\nrule1() = owes(something, money, cricket) => not know(panda_bear, defensive_plans, wolverine)\n# Rule2: If the mosquito sings a victory song for the goldfish, then the goldfish owes money to the cricket\nrule2() = sings(mosquito, victory_song, goldfish) => owes(goldfish, money, cricket)\n# Rule3: If you see that something does not know the defense plan of the whale but it needs the support of the salmon, what can you certainly conclude? You can conclude that it is not going to show her cards (all of them) to the squid\nrule3(something) = not know(something, defensive_plans, whale) & needs_support(something, salmon) => not show_cards(something, all, squid)\n# Rule4: If you are positive that you saw one of the animals shows all her cards to the squid, you can be certain that it will also know the defense plan of the wolverine\nrule4(something) = show_cards(something, all, squid) => know(something, defensive_plans, wolverine)\n# Rule5: If the panda bear works fewer hours than before, then the panda bear shows her cards (all of them) to the squid.\nrule5() = works_fewer_hours(panda_bear) => show_cards(panda_bear, all, squid)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n\n# The current state of the game is as follows\n# The mosquito sings a victory song for the goldfish\nsings(mosquito, victory_song, goldfish) = True\n# The panda bear needs support from the salmon\nneeds_support(panda_bear, salmon) = True\n# The panda bear reduced her work hours recently.\nworks_fewer_hours(panda_bear) = True\n\n# Based on the game state and the rules and preferences, does the panda bear know the defensive plans of the wolverine?\nquestion = know(panda_bear, defensive_plans, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not sing a song of victory for the aardvark, then it removes from the board one of the pieces of the whale\nRule2: If the turtle has a name whose first letter is the same as the first letter of the grizzly bear's name, then the turtle does not eat the food that belongs to the cheetah\nRule3: If the turtle does not eat the food that belongs to the cheetah and the buffalo eats the food of the cheetah, then the cheetah will not remove one of the pieces of the whale\nRule4: If the cheetah has fewer than 12 friends, then the cheetah sings a victory song for the aardvark\nRule5: If the turtle has fewer than four friends, then it eats the food of the cheetah\nRule6: If the turtle does not have her keys, then the turtle does not eat the food of the cheetah.\n\nRule2 is preferred over Rule5\nRule3 is preferred over Rule1\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cheetah has 1 mean friend and 1 non-mean friend\nThe cheetah does not learn the basics of resource management from the oscar\nThe cheetah does not raise a peace flag for the moose\nThe grizzly bear is named Beauty\nThe turtle has 2 easy-going friends and 1 non-easy-going friend\nThe turtle is holding her keys.\n\nBased on the game state and the rules and preferences, does the cheetah remove from the board one of the pieces of the whale?\nQuestion: Does the cheetah remove from the board one of the pieces of the whale?",
        "idx": 422,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not sing a song of victory for the aardvark, then it removes from the board one of the pieces of the whale\nrule1(something) = not sing(something, song_of_victory, aardvark) => remove_from_board(something, piece_of_whale)\n# Rule2: If the turtle has a name whose first letter is the same as the first letter of the grizzly bear's name, then the turtle does not eat the food that belongs to the cheetah\nrule2() = first_letter_of(name(turtle)) == first_letter_of(name(grizzly_bear)) => not eat(turtle, food_of(cheetah))\n# Rule3: If the turtle does not eat the food that belongs to the cheetah however the buffalo eats the food of the cheetah, then the cheetah will not remove one of the pieces of the whale\nrule3() = not eat(turtle, food_of(cheetah)) & eat(buffalo, food_of(cheetah)) => not remove_from_board(cheetah, piece_of_whale)\n# Rule4: If the cheetah has fewer than 12 friends, then the cheetah sings a victory song for the aardvark\nrule4() = friends(cheetah) < 12 => sing(cheetah, song_of_victory, aardvark)\n# Rule5: Regarding the turtle, if it has fewer than four friends, then we can conclude that it eats the food of the cheetah\nrule5() = friends(turtle) < 4 => eat(turtle, food_of(cheetah))\n# Rule6: If the turtle does not have her keys, then the turtle does not eat the food of the cheetah.\nrule6() = not has(turtle, keys) => not eat(turtle, food_of(cheetah))\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cheetah has 1 friend that is mean and 1 friend that is not, does not learn the basics of resource management from the oscar, and does not raise a peace flag for the moose\nmean_friends(cheetah) = 1\nnon_mean_friends(cheetah) = 1\nlearn(cheetah, basics_of_resource_management, oscar) = False\nraise_flag_of_peace(cheetah, moose) = False\n# The grizzly bear is named Beauty\nname(grizzly_bear, Beauty) = True\n# The turtle has 2 friends that are easy going and one friend that is not, and is holding her keys.\neasy_going_friends(turtle) = 2\nnon_easy_going_friends(turtle) = 1\nhas(turtle, keys) = True\n\n# Based on the game state and the rules and preferences, does the cheetah remove from the board one of the pieces of the whale?\nquestion = remove_from_board(cheetah, piece_of_whale)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The goldfish offers a job to the catfish whenever at least one animal rolls the dice for the hippopotamus\nRule2: If at least one animal raises a flag of peace for the polar bear, then the cat rolls the dice for the hippopotamus.\n\nThe current state of the game is as follows\nThe dog raises a peace flag for the polar bear.\n\nBased on the game state and the rules and preferences, does the goldfish offer a job to the catfish?\nQuestion: Does the goldfish offer a job to the catfish?",
        "idx": 423,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The goldfish offers a job to the catfish whenever at least one animal rolls the dice for the hippopotamus\nrule1() = roll_dice(something, hippopotamus) => offer_job_position(goldfish, catfish)\n# Rule2: If at least one animal raises a flag of peace for the polar bear, then the cat rolls the dice for the hippopotamus.\nrule2() = raise_flag_of_peace(something, polar_bear) => roll_dice(cat, hippopotamus)\n\n# The current state of the game is as follows\n# The dog raises a peace flag for the polar bear.\nraise_flag_of_peace(dog, polar_bear) = True\n\n# Based on the game state and the rules and preferences, does the goldfish offer a job to the catfish?\nquestion = offer_job_position(goldfish, catfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the squid took a bike from the store, then it knows the defensive plans of the sea bass\nRule2: If the eagle has fewer than nine friends, then it eats the food that belongs to the squid\nRule3: If the eagle has access to an abundance of food, then it eats the food of the squid\nRule4: If something steals five points from the doctorfish, then it does not know the defensive plans of the sea bass\nRule5: If the eagle eats the food of the squid and the panther rolls the dice for the squid, then the squid will not knock down the fortress of the baboon\nRule6: If the first letter of the name of the panther is the same as the first letter of the name of the cricket, then the panther rolls the dice for the squid\nRule7: If the squid has a card whose color starts with the letter \"y\", then it eats the food that belongs to the buffalo.\n\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the cricket is Lily\nThe eagle has one bald friend and two non-bald friends, and struggles to find food\nThe name of the panther is Lola, and it does not roll the dice for the aardvark\nThe squid has a yellow card, and stole a bike from the store.\n\nBased on the game state and the rules and preferences, does the squid knock down the fortress of the baboon?\nQuestion: Does the squid knock down the fortress of the baboon?",
        "idx": 424,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the squid, if it took a bike from the store, then we can conclude that it knows the defensive plans of the sea bass\nrule1() = took(squid, bike, store) => knows(squid, defensive_plans, sea_bass)\n# Rule2: If the eagle has fewer than nine friends, then the eagle eats the food that belongs to the squid\nrule2() = friends(eagle) < 9 => eat_food(eagle, food_of(squid))\n# Rule3: Regarding the eagle, if it has access to an abundance of food, then we can conclude that it eats the food of the squid\nrule3() = has(eagle, abundance_of_food) => eat_food(eagle, food_of(squid))\n# Rule4: If you are positive that you saw one of the animals steals five points from the doctorfish, you can be certain that it will not know the defensive plans of the sea bass\nrule4(something) = steal_points(something, 5, doctorfish) => not knows(something, defensive_plans, sea_bass)\n# Rule5: If the eagle eats the food of the squid and the panther rolls the dice for the squid, then the squid will not knock down the fortress of the baboon\nrule5() = eat_food(eagle, food_of(squid)) & roll_dice(panther, squid) => not knock_down(squid, fortress_of(baboon))\n# Rule6: Regarding the panther, if it has a name whose first letter is the same as the first letter of the cricket's name, then we can conclude that it rolls the dice for the squid\nrule6() = first_letter_of(name(panther)) == first_letter_of(name(cricket)) => roll_dice(panther, squid)\n# Rule7: If the squid has a card whose color starts with the letter \"y\", then the squid eats the food that belongs to the buffalo.\nrule7() = has(squid, card) and starts_with(color(card), \"y\") => eat_food(squid, food_of(buffalo))\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cricket is named Lily\nname(cricket, Lily) = True\n# The eagle has one friend that is bald and two friends that are not, and struggles to find food\nbald_friends(eagle) = 1\nnon_bald_friends(eagle) = 2\nstruggles_to_find_food(eagle) = True\n# The panther is named Lola, and does not roll the dice for the aardvark\nname(panther, Lola) = True\nroll_dice(panther, aardvark) = False\n# The squid has a card that is yellow in color, and stole a bike from the store.\nhas(squid, card) = True\ncolor(card, yellow) = True\ntook(squid, bike, store) = True\n\n# Based on the game state and the rules and preferences, does the squid knock down the fortress of the baboon?\nquestion = knock_down(squid, fortress_of(baboon))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the blobfish is the same as the first letter of the name of the viperfish, then the blobfish does not burn the warehouse that belongs to the koala\nRule2: If the lobster has a high-quality paper, then it attacks the green fields of the koala\nRule3: If the lobster knocks down the fortress that belongs to the koala and the blobfish does not burn the warehouse of the koala, then the koala shows her cards (all of them) to the mosquito.\n\nThe current state of the game is as follows\nThe name of the blobfish is Milo\nThe lobster has a high-quality paper\nThe name of the viperfish is Mojo\n\nBased on the game state and the rules and preferences, does the koala show all her cards to the mosquito?\nQuestion: Does the koala show all her cards to the mosquito?",
        "idx": 425,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the blobfish has a name whose first letter is the same as the first letter of the viperfish's name, then the blobfish does not burn the warehouse that is in possession of the koala\nrule1() = first_letter_of(name(blobfish)) == first_letter_of(name(viperfish)) => not burn(blobfish, warehouse, koala)\n# Rule2: Regarding the lobster, if it has a high-quality paper, then we can conclude that it attacks the green fields of the koala\nrule2() = has(lobster, high_quality_paper) => attack(lobster, green_fields, koala)\n# Rule3: For the koala, if the belief is that the lobster knocks down the fortress that belongs to the koala and the blobfish does not burn the warehouse of the koala, then you can add \"the koala shows her cards (all of them) to the mosquito\" to your conclusions.\nrule3() = knock_down(lobster, fortress, koala) & not burn(blobfish, warehouse, koala) => show_cards(koala, all_cards, mosquito)\n\n# The current state of the game is as follows\n# The blobfish is named Milo\nname(blobfish, Milo) = True\n# The lobster published a high-quality paper\nhas(lobster, high_quality_paper) = True\n# The viperfish is named Mojo.\nname(viperfish, Mojo) = True\n\n# Based on the game state and the rules and preferences, does the koala show all her cards to the mosquito?\nquestion = show_cards(koala, all_cards, mosquito)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the oscar has more than 11 friends, then it does not knock down the fortress that belongs to the eagle\nRule2: Whenever something knocks down the fortress that belongs to the eagle, the mosquito gives a magnifying glass to the panther\nRule3: If the snail does not respect the oscar and the hummingbird does not knock down the fortress of the oscar, then the oscar knocks down the fortress of the eagle\nRule4: If the first letter of the name of the oscar is the same as the first letter of the name of the snail, then the oscar does not knock down the fortress of the eagle.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe oscar has 1 friend\nThe name of the snail is Lola\nThe hummingbird does not knock down the fortress of the oscar\nThe snail does not respect the oscar.\n\nBased on the game state and the rules and preferences, does the mosquito give a magnifier to the panther?\nQuestion: Does the mosquito give a magnifying glass to the panther?",
        "idx": 426,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the oscar has more than 11 friends, then the oscar does not knock down the fortress that belongs to the eagle\nrule1() = friends(oscar) > 11 => not knock_down(oscar, fortress, eagle)\n# Rule2: The mosquito gives a magnifying glass to the panther whenever at least one animal knocks down the fortress that belongs to the eagle\nrule2() = knock_down(something, fortress, eagle) => give(mosquito, magnifying_glass, panther)\n# Rule3: If the snail does not respect the oscar and the hummingbird does not knock down the fortress of the oscar, then the oscar knocks down the fortress of the eagle\nrule3() = not respect(snail, oscar) & not knock_down(hummingbird, fortress, oscar) => knock_down(oscar, fortress, eagle)\n# Rule4: Regarding the oscar, if it has a name whose first letter is the same as the first letter of the snail's name, then we can conclude that it does not knock down the fortress of the eagle.\nrule4() = first_letter_of(name(oscar)) == first_letter_of(name(snail)) => not knock_down(oscar, fortress, eagle)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The oscar has 1 friend\nfriends(oscar) = 1\n# The snail is named Lola\nname(snail, Lola) = True\n# The hummingbird does not knock down the fortress of the oscar\nknock_down(hummingbird, fortress, oscar) = False\n# The snail does not respect the oscar.\nrespect(snail, oscar) = False\n\n# Based on the game state and the rules and preferences, does the mosquito give a magnifier to the panther?\nquestion = give(mosquito, magnifying_glass, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal holds an equal number of points as the gecko, then the carp does not raise a flag of peace for the kangaroo\nRule2: If at least one animal offers a job position to the hummingbird, then the carp does not eat the food that belongs to the eagle\nRule3: If the rabbit offers a job position to the carp, then the carp raises a flag of peace for the kangaroo\nRule4: If something does not eat the food of the eagle but it raises a peace flag for the kangaroo, then it is not going to eat the food that belongs to the koala.\n\nRule1 is preferred over Rule3\n\nThe current state of the game is as follows\nThe goldfish offers a job to the hummingbird\nThe rabbit offers a job to the carp\n\nBased on the game state and the rules and preferences, does the carp eat the food of the koala?\nQuestion: Does the carp eat the food that belongs to the koala?",
        "idx": 427,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal holds an equal number of points as the gecko, then the carp does not raise a flag of peace for the kangaroo\nrule1(something) = points(something) == points(gecko) => not raise_flag_of_peace(carp, kangaroo)\n# Rule2: If at least one animal offers a job position to the hummingbird, then the carp does not eat the food that belongs to the eagle\nrule2(something) = offer_job_position(something, hummingbird) => not eat_food(carp, food_of(eagle))\n# Rule3: If the rabbit offers a job position to the carp, then the carp raises a flag of peace for the kangaroo\nrule3() = offer_job_position(rabbit, carp) => raise_flag_of_peace(carp, kangaroo)\n# Rule4: If you see that something does not eat the food of the eagle but it raises a peace flag for the kangaroo, what can you certainly conclude? You can conclude that it is not going to eat the food that belongs to the koala.\nrule4(something) = not eat_food(something, food_of(eagle)) & raise_flag_of_peace(something, kangaroo) => not eat_food(something, food_of(koala))\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n\n# The current state of the game is as follows\n# The goldfish offers a job to the hummingbird\noffer_job_position(goldfish, hummingbird) = True\n# The rabbit offers a job to the carp\noffer_job_position(rabbit, carp) = True\n\n# Based on the game state and the rules and preferences, does the carp eat the food of the koala?\nquestion = eat_food(carp, food_of(koala))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the blobfish removes one of the pieces of the elephant, then the elephant eats the food of the kiwi\nRule2: The buffalo holds an equal number of points as the cricket whenever at least one animal shows all her cards to the kiwi.\n\nThe current state of the game is as follows\nThe blobfish removes from the board one of the pieces of the elephant\nThe elephant has a red card and is holding her keys.\n\nBased on the game state and the rules and preferences, does the buffalo hold the same number of points as the cricket?\nQuestion: Does the buffalo hold the same number of points as the cricket?",
        "idx": 428,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the blobfish removes one of the pieces of the elephant, then the elephant eats the food of the kiwi\nrule1() = remove(blobfish, piece, elephant) => eat(elephant, food, kiwi)\n# Rule2: The buffalo holds an equal number of points as the cricket whenever at least one animal shows all her cards to the kiwi.\nrule2() = show_all_cards(something, kiwi) => points(buffalo) == points(cricket)\n\n# The current state of the game is as follows\n# The blobfish removes from the board one of the pieces of the elephant\nremove(blobfish, piece, elephant) = True\n# The elephant has a card that is red in color, and is holding her keys.\nhas(elephant, card) = True\ncolor(card, red) = True\nholding(elephant, keys) = True\n\n# Based on the game state and the rules and preferences, does the buffalo hold the same number of points as the cricket?\nquestion = points(buffalo) == points(cricket)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grizzly bear has fewer than 10 friends, then it prepares armor for the squid\nRule2: If the name of the goldfish starts with the same letter as the name of the wolverine, then it does not attack the green fields of the squid\nRule3: If the name of the panther starts with the same letter as the name of the catfish, then it does not give a magnifier to the squid\nRule4: If the panther has a card whose color appears in the flag of Italy, then it gives a magnifying glass to the squid\nRule5: If something learns the basics of resource management from the amberjack and also prepares armor for the bat, then it will not prepare armor for the squid\nRule6: If the color of the card of the goldfish starts with the letter \"r\", then it does not attack the green fields whose owner is the squid\nRule7: If the panther has fewer than 11 friends, then it gives a magnifying glass to the squid\nRule8: If the goldfish owns a luxury aircraft, then it attacks the green fields whose owner is the squid\nRule9: The squid respects the elephant, in the case where the goldfish does not attack the green fields of the squid.\n\nRule4 is preferred over Rule3\nRule5 is preferred over Rule1\nRule7 is preferred over Rule3\nRule8 is preferred over Rule2\nRule8 is preferred over Rule6\n\nThe current state of the game is as follows\nThe name of the catfish is Paco\nThe goldfish has a card that is orange in color\nThe name of the goldfish is Tarzan\nThe grizzly bear has seven friends\nThe grizzly bear learns the basics of resource management from the amberjack, and prepares armor for the bat\nThe panther has a card that is indigo in color\nThe panther has two bald friends and five non-bald friends\nThe name of the panther is Pashmak\nThe name of the wolverine is Teddy.\n\nBased on the game state and the rules and preferences, does the squid respect the elephant?\nQuestion: Does the squid respect the elephant?",
        "idx": 429,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grizzly bear has fewer than 10 friends, then the grizzly bear prepares armor for the squid\nrule1() = friends(grizzly_bear) < 10 => prepare_armor(grizzly_bear, squid)\n# Rule2: Regarding the goldfish, if it has a name whose first letter is the same as the first letter of the wolverine's name, then we can conclude that it does not attack the green fields of the squid\nrule2() = first_letter_of(name(goldfish)) == first_letter_of(name(wolverine)) => not attack(goldfish, green_fields, squid)\n# Rule3: Regarding the panther, if it has a name whose first letter is the same as the first letter of the catfish's name, then we can conclude that it does not give a magnifier to the squid\nrule3() = first_letter_of(name(panther)) == first_letter_of(name(catfish)) => not give(panther, magnifying_glass, squid)\n# Rule4: If the panther has a card whose color appears in the flag of Italy, then the panther gives a magnifying glass to the squid\nrule4() = has(panther, card) and color(card) in colors_of_italian_flag => give(panther, magnifying_glass, squid)\n# Rule5: Be careful when something learns the basics of resource management from the amberjack and also prepares armor for the bat because in this case it will surely not prepare armor for the squid (this may or may not be problematic)\nrule5(something) = learn(something, basics_of_resource_management_from(amberjack)) & prepare_armor(something, bat) => not prepare_armor(something, squid)\n# Rule6: Regarding the goldfish, if it has a card whose color starts with the letter \"r\", then we can conclude that it does not attack the green fields whose owner is the squid\nrule6() = has(goldfish, card) and starts_with(color(card), \"r\") => not attack(goldfish, green_fields, squid)\n# Rule7: If the panther has fewer than 11 friends, then the panther gives a magnifying glass to the squid\nrule7() = friends(panther) < 11 => give(panther, magnifying_glass, squid)\n# Rule8: If the goldfish owns a luxury aircraft, then the goldfish attacks the green fields whose owner is the squid\nrule8() = owns(goldfish, luxury_aircraft) => attack(goldfish, green_fields, squid)\n# Rule9: The squid unquestionably respects the elephant, in the case where the goldfish does not attack the green fields of the squid.\nrule9() = not attack(goldfish, green_fields, squid) => respect(squid, elephant)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n# Rule8 is preferred over Rule2\norder(rule8) > order(rule2) = True\n# Rule8 is preferred over Rule6\norder(rule8) > order(rule6) = True\n\n# The current state of the game is as follows\n# The catfish is named Paco\nname(catfish, Paco) = True\n# The goldfish has a card that is orange in color\nhas(goldfish, card) = True\ncolor(card, orange) = True\n# The goldfish is named Tarzan\nname(goldfish, Tarzan) = True\n# The grizzly bear has seven friends\nfriends(grizzly_bear) = 7\n# The grizzly bear learns the basics of resource management from the amberjack, and prepares armor for the bat\nlearn(grizzly_bear, basics_of_resource_management_from(amberjack)) = True\nprepare_armor(grizzly_bear, bat) = True\n# The panther has a card that is indigo in color\nhas(panther, card) = True\ncolor(card, indigo) = True\n# The panther has two friends that are bald and five friends that are not\nbald_friends(panther) = 2\nnon_bald_friends(panther) = 5\n# The panther is named Pashmak\nname(panther, Pashmak) = True\n# The wolverine is named Teddy.\nname(wolverine, Teddy) = True\n\n# Based on the game state and the rules and preferences, does the squid respect the elephant?\nquestion = respect(squid, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lion has a card with a primary color, then the lion rolls the dice for the cat\nRule2: If the lion owns a luxury aircraft, then the lion rolls the dice for the cat\nRule3: If the eagle winks at the squid, then the squid learns elementary resource management from the cat\nRule4: If the squid has difficulty finding food, then it does not learn elementary resource management from the cat\nRule5: If the squid learns the basics of resource management from the cat and the lion rolls the dice for the cat, then the cat will not know the defensive plans of the zander.\n\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe eagle winks at the squid\nThe lion has a card that is indigo in color\nThe lion purchased a luxury aircraft.\n\nBased on the game state and the rules and preferences, does the cat know the defensive plans of the zander?\nQuestion: Does the cat know the defensive plans of the zander?",
        "idx": 430,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lion has a card with a primary color, then the lion rolls the dice for the cat\nrule1() = has(lion, card) and color(card) in primary_colors => roll_dice(lion, cat)\n# Rule2: If the lion owns a luxury aircraft, then the lion rolls the dice for the cat\nrule2() = owns(lion, luxury_aircraft) => roll_dice(lion, cat)\n# Rule3: If the eagle winks at the squid, then the squid learns elementary resource management from the cat\nrule3() = wink(eagle, squid) => learn(squid, elementary_resource_management, cat)\n# Rule4: Regarding the squid, if it has difficulty to find food, then we can conclude that it does not learn elementary resource management from the cat\nrule4() = difficulty_finding_food(squid) => not learn(squid, elementary_resource_management, cat)\n# Rule5: If the squid learns the basics of resource management from the cat and the lion rolls the dice for the cat, then the cat will not know the defensive plans of the zander.\nrule5() = learn(squid, basics_of_resource_management, cat) & roll_dice(lion, cat) => not know(cat, defensive_plans, zander)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The eagle winks at the squid\nwink(eagle, squid) = True\n# The lion has a card that is indigo in color\nhas(lion, card) = True\ncolor(card, indigo) = True\n# The lion purchased a luxury aircraft.\nowns(lion, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the cat know the defensive plans of the zander?\nquestion = know(cat, defensive_plans, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not roll the dice for the whale, then it gives a magnifying glass to the puffin\nRule2: If the kiwi has access to an abundance of food, then it does not give a magnifier to the puffin\nRule3: If something gives a magnifier to the squirrel, then it owes money to the puffin\nRule4: If the crocodile has a device to connect to the internet, then it does not owe money to the puffin\nRule5: If the crocodile owes money to the puffin and the kiwi does not give a magnifier to the puffin, then the puffin eats the food that belongs to the doctorfish\nRule6: If the kiwi has more than six friends, then it does not give a magnifying glass to the puffin\nRule7: If the crocodile purchased a time machine, then it does not owe money to the puffin\nRule8: If something learns elementary resource management from the eagle, then it does not eat the food that belongs to the doctorfish.\n\nRule2 is preferred over Rule1\nRule3 is preferred over Rule4\nRule3 is preferred over Rule7\nRule6 is preferred over Rule1\nRule8 is preferred over Rule5\n\nThe current state of the game is as follows\nThe crocodile has a computer and invented a time machine\nThe crocodile does not give a magnifier to the squirrel\nThe kiwi has 7 friends\nThe kiwi struggles to find food and does not roll the dice for the whale.\n\nBased on the game state and the rules and preferences, does the puffin eat the food of the doctorfish?\nQuestion: Does the puffin eat the food of the doctorfish?",
        "idx": 431,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not roll the dice for the whale, you can be certain that it will give a magnifying glass to the puffin without a doubt\nrule1(something) = not roll_dice(something, whale) => give(something, magnifying_glass, puffin)\n# Rule2: Regarding the kiwi, if it has access to an abundance of food, then we can conclude that it does not give a magnifier to the puffin\nrule2() = has_access(kiwi, abundance_of_food) => not give(kiwi, magnifying_glass, puffin)\n# Rule3: If you are positive that you saw one of the animals gives a magnifier to the squirrel, you can be certain that it will also owe money to the puffin\nrule3(something) = give(something, magnifying_glass, squirrel) => owe(something, money, puffin)\n# Rule4: Regarding the crocodile, if it has a device to connect to the internet, then we can conclude that it does not owe money to the puffin\nrule4() = has(crocodile, device_to_connect_to_internet) => not owe(crocodile, money, puffin)\n# Rule5: If the crocodile owes money to the puffin and the kiwi does not give a magnifier to the puffin, then, inevitably, the puffin eats the food that belongs to the doctorfish\nrule5() = owe(crocodile, money, puffin) & not give(kiwi, magnifying_glass, puffin) => eat(puffin, food_of(doctorfish))\n# Rule6: Regarding the kiwi, if it has more than six friends, then we can conclude that it does not give a magnifying glass to the puffin\nrule6() = friends(kiwi) > 6 => not give(kiwi, magnifying_glass, puffin)\n# Rule7: Regarding the crocodile, if it purchased a time machine, then we can conclude that it does not owe money to the puffin\nrule7() = purchased(crocodile, time_machine) => not owe(crocodile, money, puffin)\n# Rule8: If something learns elementary resource management from the eagle, then it does not eat the food that belongs to the doctorfish.\nrule8(something) = learn(something, elementary_resource_management_from(eagle)) => not eat(something, food_of(doctorfish))\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n# Rule6 is preferred over Rule1\norder(rule6) > order(rule1) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n\n# The current state of the game is as follows\n# The crocodile has a computer, invented a time machine, and does not give a magnifier to the squirrel\nhas(crocodile, computer) = True\ninvented(crocodile, time_machine) = True\nnot give(crocodile, magnifying_glass, squirrel) = True\n# The kiwi has seven friends\nfriends(kiwi) = 7\n# The kiwi struggles to find food, and does not roll the dice for the whale.\nstruggles_to_find_food(kiwi) = True\nnot roll_dice(kiwi, whale) = True\n\n# Based on the game state and the rules and preferences, does the puffin eat the food of the doctorfish?\nquestion = eat(puffin, food_of(doctorfish))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the color of the card of the raven starts with the letter \"r\", then it owes money to the doctorfish\nRule2: If something owes money to the doctorfish, then it becomes an enemy of the tilapia\nRule3: If the raven has more than one friend, then it owes money to the doctorfish.\n\nThe current state of the game is as follows\nThe color of the card of the raven is orange\nThe raven has eight friends\n\nBased on the game state and the rules and preferences, does the raven become an enemy of the tilapia?\nQuestion: Does the raven become an enemy of the tilapia?",
        "idx": 432,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the raven, if it has a card whose color starts with the letter \"r\", then we can conclude that it owes money to the doctorfish\nrule1() = starts_with(color(card, \"r\")) => owe(raven, money, doctorfish)\n# Rule2: If you are positive that you saw one of the animals owes $$$ to the doctorfish, you can be certain that it will also become an actual enemy of the tilapia\nrule2(something) = owe(something, money, doctorfish) => become_enemy(something, tilapia)\n# Rule3: If the raven has more than one friend, then the raven owes $$$ to the doctorfish.\nrule3() = friends(raven) > 1 => owe(raven, money, doctorfish)\n\n# The current state of the game is as follows\n# The raven has a card that is orange in color\ncolor(card, orange) = True\n# The raven has eight friends\nfriends(raven) = 8\n\n# Based on the game state and the rules and preferences, does the raven become an enemy of the tilapia?\nquestion = become_enemy(raven, tilapia)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grizzly bear has a sharp object, then it does not burn the warehouse of the buffalo\nRule2: If the first letter of the name of the grizzly bear is the same as the first letter of the name of the dog, then it does not become an enemy of the squid\nRule3: If the grizzly bear took a bike from the store, then it becomes an enemy of the squid\nRule4: If something does not prepare armor for the octopus and does not roll the dice for the sun bear, then it burns the warehouse of the buffalo\nRule5: If something burns the warehouse that is in possession of the buffalo, then it does not sing a song of victory for the ferret.\n\nRule3 is preferred over Rule2\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the dog is Blossom\nThe grizzly bear has a cell phone\nThe name of the grizzly bear is Beauty\nThe grizzly bear has a couch\nThe grizzly bear does not prepare armor for the octopus\nThe grizzly bear does not roll the dice for the sun bear.\n\nBased on the game state and the rules and preferences, does the grizzly bear sing a victory song for the ferret?\nQuestion: Does the grizzly bear sing a victory song for the ferret?",
        "idx": 433,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grizzly bear has a sharp object, then the grizzly bear does not burn the warehouse of the buffalo\nrule1() = has(grizzly_bear, sharp_object) => not burn_warehouse(grizzly_bear, buffalo)\n# Rule2: Regarding the grizzly bear, if it has a name whose first letter is the same as the first letter of the dog's name, then we can conclude that it does not become an actual enemy of the squid\nrule2() = first_letter_of(name(grizzly_bear)) == first_letter_of(name(dog)) => not become_enemy(grizzly_bear, squid)\n# Rule3: Regarding the grizzly bear, if it took a bike from the store, then we can conclude that it becomes an enemy of the squid\nrule3() = took(grizzly_bear, bike, store) => become_enemy(grizzly_bear, squid)\n# Rule4: If you see that something does not prepare armor for the octopus and also does not roll the dice for the sun bear, what can you certainly conclude? You can conclude that it also burns the warehouse of the buffalo\nrule4(something) = not prepare_armor(something, octopus) & not roll_dice(something, sun_bear) => burn_warehouse(something, buffalo)\n# Rule5: If you are positive that you saw one of the animals burns the warehouse that is in possession of the buffalo, you can be certain that it will not sing a song of victory for the ferret.\nrule5(something) = burn_warehouse(something, buffalo) => not sing_song_of_victory(something, ferret)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The dog is named Blossom\nname(dog, Blossom) = True\n# The grizzly bear has a cell phone, and is named Beauty\nname(grizzly_bear, Beauty) = True\nhas(grizzly_bear, cell_phone) = True\n# The grizzly bear has a couch, and does not prepare armor for the octopus\nhas(grizzly_bear, couch) = True\nnot prepare_armor(grizzly_bear, octopus) = True\n# The grizzly bear does not roll the dice for the sun bear.\nnot roll_dice(grizzly_bear, sun_bear) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear sing a victory song for the ferret?\nquestion = sing_song_of_victory(grizzly_bear, ferret)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something learns elementary resource management from the leopard, then it winks at the kudu, too\nRule2: If something proceeds to the spot that is right after the spot of the lobster, then the penguin does not wink at the kudu\nRule3: If something learns the basics of resource management from the sun bear and needs support from the cow, then it prepares armor for the leopard.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe penguin learns the basics of resource management from the sun bear and needs support from the cow.\n\nBased on the game state and the rules and preferences, does the penguin wink at the kudu?\nQuestion: Does the penguin wink at the kudu?",
        "idx": 434,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something learns elementary resource management from the leopard, then it winks at the kudu, too\nrule1(something) = learns(something, elementary_resource_management, leopard) => wink(something, kudu)\n# Rule2: If at least one animal proceeds to the spot that is right after the spot of the lobster, then the penguin does not wink at the kudu\nrule2() = proceeds_to_spot(something, spot_after(lobster)) => not wink(penguin, kudu)\n# Rule3: If you see that something learns the basics of resource management from the sun bear and needs support from the cow, what can you certainly conclude? You can conclude that it also prepares armor for the leopard.\nrule3(something) = learns(something, basics_of_resource_management, sun_bear) & needs_support(something, cow) => prepare_armor(something, leopard)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The penguin learns the basics of resource management from the sun bear, and needs support from the cow.\nlearns(penguin, basics_of_resource_management, sun_bear) = True\nneeds_support(penguin, cow) = True\n\n# Based on the game state and the rules and preferences, does the penguin wink at the kudu?\nquestion = wink(penguin, kudu)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something proceeds to the spot that is right after the spot of the squid, then the hippopotamus proceeds to the spot right after the cheetah\nRule2: If the hippopotamus proceeds to the spot right after the cheetah and the kudu steals five of the points of the cheetah, then you can add \"the cheetah needs the support of the moose\" to your conclusions\nRule3: If something sings a song of victory for the wolverine, then it respects the raven, too\nRule4: If the kudu has a card whose color starts with the letter \"b\", then the kudu steals five of the points of the cheetah.\n\nThe current state of the game is as follows\nThe aardvark proceeds to the spot right after the squid\nThe cheetah sings a victory song for the wolverine\nThe hippopotamus has a club chair\nThe name of the hippopotamus is Tessa\nThe kudu has a card that is blue in color\nThe name of the squirrel is Luna.\n\nBased on the game state and the rules and preferences, does the cheetah need support from the moose?\nQuestion: Does the cheetah need support from the moose?",
        "idx": 435,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal proceeds to the spot that is right after the spot of the squid, then the hippopotamus proceeds to the spot right after the cheetah\nrule1() = proceeds_to(something, spot_right_after(spot(squid))) => proceeds_to(hippopotamus, spot_right_after(spot(cheetah)))\n# Rule2: For the cheetah, if the belief is that the hippopotamus proceeds to the spot right after the cheetah and the kudu steals five of the points of the cheetah, then you can add \"the cheetah needs the support of the moose\" to your conclusions\nrule2() = belief(hippopotamus_proceeds_to_spot_right_after_cheetah) & steal_points(kudu, 5, cheetah) => add_conclusion(\"the cheetah needs the support of the moose\")\n# Rule3: If something sings a song of victory for the wolverine, then it respects the raven, too\nrule3(something) = sings_song_of_victory(something, wolverine) => respects(something, raven)\n# Rule4: If the kudu has a card whose color starts with the letter \"b\", then the kudu steals five of the points of the cheetah.\nrule4() = has(kudu, card) & starts_with(color_of(card), \"b\") => steal_points(kudu, 5, cheetah)\n\n# The current state of the game is as follows\n# The aardvark proceeds to the spot right after the squid\nproceeds_to(aardvark, spot_right_after(spot(squid))) = True\n# The cheetah sings a victory song for the wolverine\nsings_song_of_victory(cheetah, wolverine) = True\n# The hippopotamus has a club chair\nhas(hippopotamus, club_chair) = True\n# The hippopotamus is named Tessa\nname(hippopotamus, Tessa) = True\n# The kudu has a card that is blue in color\nhas(kudu, card) = True\ncolor_of(card, blue) = True\n# The squirrel is named Luna.\nname(squirrel, Luna) = True\n\n# Based on the game state and the rules and preferences, does the cheetah need support from the moose?\nquestion = \"the cheetah needs the support of the moose\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the ferret eats the food of the raven and the zander does not sing a victory song for the raven, then you can add \"the raven does not raise a peace flag for the elephant\" to your conclusions\nRule2: If the rabbit rolls the dice for the ferret, then the ferret eats the food that belongs to the raven\nRule3: If something attacks the green fields of the turtle, then the zander does not sing a victory song for the raven\nRule4: If the ferret has a device to connect to the internet, then it does not eat the food of the raven.\n\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe goldfish attacks the green fields whose owner is the turtle\nThe rabbit rolls the dice for the ferret.\n\nBased on the game state and the rules and preferences, does the raven raise a peace flag for the elephant?\nQuestion: Does the raven raise a peace flag for the elephant?",
        "idx": 436,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the raven, if the belief is that the ferret eats the food of the raven and the zander does not sing a victory song for the raven, then you can add \"the raven does not raise a peace flag for the elephant\" to your conclusions\nrule1() = belief(ferret, eats_food(raven)) & not sing_victory_song(zander, raven) => add_conclusion(\"the raven does not raise a peace flag for the elephant\")\n# Rule2: If the rabbit rolls the dice for the ferret, then the ferret eats the food that belongs to the raven\nrule2() = roll_dice(rabbit, ferret) => eats_food(ferret, food_of(raven))\n# Rule3: If at least one animal attacks the green fields of the turtle, then the zander does not sing a victory song for the raven\nrule3() = attacks(something, green_fields(turtle)) => not sing_victory_song(zander, raven)\n# Rule4: Regarding the ferret, if it has a device to connect to the internet, then we can conclude that it does not eat the food of the raven.\nrule4() = has(ferret, internet_device) => not eats_food(ferret, food_of(raven))\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The goldfish attacks the green fields whose owner is the turtle\nattacks(goldfish, green_fields(turtle)) = True\n# The rabbit rolls the dice for the ferret.\nroll_dice(rabbit, ferret) = True\n\n# Based on the game state and the rules and preferences, does the raven raise a peace flag for the elephant?\nquestion = raises_peace_flag(raven, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the amberjack does not need support from the eel but the hippopotamus sings a victory song for the eel, then the eel knocks down the fortress that belongs to the zander unavoidably\nRule2: If at least one animal knocks down the fortress of the zander, then the penguin winks at the cat.\n\nThe current state of the game is as follows\nThe hippopotamus sings a victory song for the eel\nThe amberjack does not wink at the eel.\n\nBased on the game state and the rules and preferences, does the penguin wink at the cat?\nQuestion: Does the penguin wink at the cat?",
        "idx": 437,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the amberjack does not need support from the eel but the hippopotamus sings a victory song for the eel, then the eel knocks down the fortress that belongs to the zander unavoidably\nrule1() = not need_support(amberjack, eel) & sings_victory_song(hippopotamus, eel) => knock_down_fortress(eel, zander, unavoidably)\n# Rule2: If at least one animal knocks down the fortress of the zander, then the penguin winks at the cat.\nrule2() = knock_down_fortress(something, zander) => wink(penguin, cat)\n\n# The current state of the game is as follows\n# The hippopotamus sings a victory song for the eel\nsings_victory_song(hippopotamus, eel) = True\n# The amberjack does not wink at the eel.\nnot wink(amberjack, eel) = True\n\n# Based on the game state and the rules and preferences, does the penguin wink at the cat?\nquestion = wink(penguin, cat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The sun bear does not become an enemy of the kangaroo whenever at least one animal becomes an enemy of the sheep\nRule2: If the hippopotamus does not have her keys, then it knows the defensive plans of the sun bear\nRule3: If something does not need support from the canary and also does not become an actual enemy of the kangaroo, then it will not give a magnifier to the buffalo\nRule4: If the hippopotamus does not know the defense plan of the sun bear, then the sun bear gives a magnifier to the buffalo\nRule5: If the sun bear has a card whose color appears in the flag of Belgium, then the sun bear becomes an actual enemy of the kangaroo\nRule6: The hippopotamus does not know the defensive plans of the sun bear whenever at least one animal burns the warehouse of the phoenix.\n\nRule3 is preferred over Rule4\nRule5 is preferred over Rule1\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe hippopotamus lost her keys\nThe panther becomes an enemy of the sheep\nThe squirrel burns the warehouse of the phoenix.\n\nBased on the game state and the rules and preferences, does the sun bear give a magnifier to the buffalo?\nQuestion: Does the sun bear give a magnifier to the buffalo?",
        "idx": 438,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The sun bear does not become an enemy of the kangaroo whenever at least one animal becomes an enemy of the sheep\nrule1() = enemy_of(something, sheep) => not enemy_of(sun_bear, kangaroo)\n# Rule2: Regarding the hippopotamus, if it does not have her keys, then we can conclude that it knows the defensive plans of the sun bear\nrule2() = not has(hippopotamus, keys) => knows(hippopotamus, defensive_plans, sun_bear)\n# Rule3: Be careful when something does not need support from the canary and also does not become an actual enemy of the kangaroo because in this case it will surely not give a magnifier to the buffalo (this may or may not be problematic)\nrule3(something) = not needs_support(something, canary) & not enemy_of(something, kangaroo) => not give(something, magnifier, buffalo)\n# Rule4: If the hippopotamus does not know the defense plan of the sun bear, then the sun bear gives a magnifier to the buffalo\nrule4() = not knows(hippopotamus, defensive_plans, sun_bear) => give(sun_bear, magnifier, buffalo)\n# Rule5: If the sun bear has a card whose color appears in the flag of Belgium, then the sun bear becomes an actual enemy of the kangaroo\nrule5() = has(sun_bear, card) and color(card) in flag_of_belgium_colors => enemy_of(sun_bear, kangaroo)\n# Rule6: The hippopotamus does not know the defensive plans of the sun bear whenever at least one animal burns the warehouse of the phoenix.\nrule6() = burns_warehouse(something, phoenix) => not knows(hippopotamus, defensive_plans, sun_bear)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule5 is preferred over Rule1\norder(rule5) > order(rule1) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The hippopotamus lost her keys\nhas(hippopotamus, keys) = False\n# The panther becomes an enemy of the sheep\nenemy_of(panther, sheep) = True\n# The squirrel burns the warehouse of the phoenix.\nburns_warehouse(squirrel, phoenix) = True\n\n# Based on the game state and the rules and preferences, does the sun bear give a magnifier to the buffalo?\nquestion = give(sun_bear, magnifier, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal holds an equal number of points as the ferret, then the gecko does not respect the raven\nRule2: If the belief is that the goldfish holds the same number of points as the meerkat and the aardvark offers a job to the meerkat, then you can add \"the meerkat holds an equal number of points as the ferret\" to your conclusions.\n\nThe current state of the game is as follows\nThe aardvark offers a job to the meerkat\nThe goldfish holds the same number of points as the meerkat.\n\nBased on the game state and the rules and preferences, does the gecko respect the raven?\nQuestion: Does the gecko respect the raven?",
        "idx": 439,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal holds an equal number of points as the ferret, then the gecko does not respect the raven\nrule1(something) = points(something) == points(ferret) => not respect(gecko, raven)\n# Rule2: For the meerkat, if the belief is that the goldfish holds the same number of points as the meerkat and the aardvark offers a job to the meerkat, then you can add \"the meerkat holds an equal number of points as the ferret\" to your conclusions.\nrule2() = belief(goldfish, points(meerkat) == points(goldfish)) & offer_job_position(aardvark, meerkat) => add_conclusion(\"the meerkat holds an equal number of points as the ferret\")\n\n# The current state of the game is as follows\n# The aardvark offers a job to the meerkat\noffer_job_position(aardvark, meerkat) = True\n# The goldfish holds the same number of points as the meerkat.\npoints(goldfish) == points(meerkat) = True\n\n# Based on the game state and the rules and preferences, does the gecko respect the raven?\nquestion = respect(gecko, raven)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not steal five points from the koala, then it removes from the board one of the pieces of the sheep\nRule2: If the ferret has more than 5 friends, then it steals five points from the koala.\n\nThe current state of the game is as follows\nThe ferret has 9 friends.\n\nBased on the game state and the rules and preferences, does the ferret remove from the board one of the pieces of the sheep?\nQuestion: Does the ferret remove from the board one of the pieces of the sheep?",
        "idx": 440,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not steal five points from the koala, then it removes from the board one of the pieces of the sheep\nrule1(something) = not steal(something, 5, points, koala) => remove_from_board(something, piece, sheep)\n# Rule2: If the ferret has more than 5 friends, then the ferret steals five points from the koala.\nrule2() = friends(ferret) > 5 => steal(ferret, 5, points, koala)\n\n# The current state of the game is as follows\n# The ferret has 9 friends.\nfriends(ferret) = 9\n\n# Based on the game state and the rules and preferences, does the ferret remove from the board one of the pieces of the sheep?\nquestion = remove_from_board(ferret, piece, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the mosquito owns a luxury aircraft, then it does not know the defense plan of the rabbit\nRule2: If the mosquito has a card whose color starts with the letter \"l\", then it knows the defensive plans of the rabbit\nRule3: If the gecko offers a job position to the rabbit and the mosquito knows the defensive plans of the rabbit, then the rabbit needs the support of the lobster\nRule4: If the mosquito has more than 9 friends, then it knows the defensive plans of the rabbit\nRule5: If the gecko has a high salary, then it does not offer a job position to the rabbit\nRule6: If something does not knock down the fortress of the snail, then it offers a job position to the rabbit\nRule7: The rabbit does not need support from the lobster whenever at least one animal knows the defense plan of the mosquito.\n\nRule1 is preferred over Rule2\nRule1 is preferred over Rule4\nRule5 is preferred over Rule6\nRule7 is preferred over Rule3\n\nThe current state of the game is as follows\nThe mosquito has a black card\nThe mosquito has 14 friends\nThe gecko does not knock down the fortress of the snail.\n\nBased on the game state and the rules and preferences, does the rabbit need support from the lobster?\nQuestion: Does the rabbit need support from the lobster?",
        "idx": 441,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the mosquito, if it owns a luxury aircraft, then we can conclude that it does not know the defense plan of the rabbit\nrule1() = owns(mosquito, luxury_aircraft) => not knows(mosquito, defensive_plans, rabbit)\n# Rule2: Regarding the mosquito, if it has a card whose color starts with the letter \"l\", then we can conclude that it knows the defensive plans of the rabbit\nrule2() = has(mosquito, card) and starts_with(color(card), \"l\") => knows(mosquito, defensive_plans, rabbit)\n# Rule3: If the gecko offers a job position to the rabbit and the mosquito knows the defensive plans of the rabbit, then the rabbit needs the support of the lobster\nrule3() = offer_job_position(gecko, rabbit) & knows(mosquito, defensive_plans, rabbit) => needs_support(rabbit, lobster)\n# Rule4: If the mosquito has more than 9 friends, then the mosquito knows the defensive plans of the rabbit\nrule4() = friends(mosquito) > 9 => knows(mosquito, defensive_plans, rabbit)\n# Rule5: Regarding the gecko, if it has a high salary, then we can conclude that it does not offer a job position to the rabbit\nrule5() = has_high_salary(gecko) => not offer_job_position(gecko, rabbit)\n# Rule6: If you are positive that one of the animals does not knock down the fortress that belongs to the snail, you can be certain that it will offer a job to the rabbit without a doubt\nrule6() = not knock_down_fortress(something, snail) => offer_job_position(something, rabbit)\n# Rule7: The rabbit does not need support from the lobster whenever at least one animal knows the defense plan of the mosquito.\nrule7() = knows(something, defensive_plans, mosquito) => not needs_support(rabbit, lobster)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule5 is preferred over Rule6\norder(rule5) > order(rule6) = True\n# Rule7 is preferred over Rule3\norder(rule7) > order(rule3) = True\n\n# The current state of the game is as follows\n# The mosquito has a card that is black in color\nhas(mosquito, card) = True\ncolor(card, black) = True\n# The mosquito has fourteen friends\nfriends(mosquito) = 14\n# The gecko does not knock down the fortress of the snail.\nknock_down_fortress(gecko, snail) = False\n\n# Based on the game state and the rules and preferences, does the rabbit need support from the lobster?\nquestion = needs_support(rabbit, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something burns the warehouse that is in possession of the tilapia, then the koala rolls the dice for the wolverine\nRule2: If the koala does not have her keys, then the koala does not roll the dice for the wolverine\nRule3: The wolverine does not roll the dice for the canary, in the case where the koala rolls the dice for the wolverine\nRule4: If the koala has more than eight friends, then it does not roll the dice for the wolverine.\n\nRule2 is preferred over Rule1\nRule4 is preferred over Rule1\n\nThe current state of the game is as follows\nThe koala is holding her keys\nThe salmon burns the warehouse of the tilapia.\n\nBased on the game state and the rules and preferences, does the wolverine roll the dice for the canary?\nQuestion: Does the wolverine roll the dice for the canary?",
        "idx": 442,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal burns the warehouse that is in possession of the tilapia, then the koala rolls the dice for the wolverine\nrule1() = burns(warehouse, tilapia) => roll_dice(koala, wolverine)\n# Rule2: If the koala does not have her keys, then the koala does not roll the dice for the wolverine\nrule2() = not has(koala, keys) => not roll_dice(koala, wolverine)\n# Rule3: The wolverine does not roll the dice for the canary, in the case where the koala rolls the dice for the wolverine\nrule3() = roll_dice(koala, wolverine) => not roll_dice(wolverine, canary)\n# Rule4: Regarding the koala, if it has more than eight friends, then we can conclude that it does not roll the dice for the wolverine.\nrule4() = friends(koala) > 8 => not roll_dice(koala, wolverine)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n\n# The current state of the game is as follows\n# The koala is holding her keys\nhas(koala, keys) = True\n# The salmon burns the warehouse of the tilapia.\nburns(salmon, warehouse, tilapia) = True\n\n# Based on the game state and the rules and preferences, does the wolverine roll the dice for the canary?\nquestion = roll_dice(wolverine, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cat has a musical instrument, then it removes one of the pieces of the baboon\nRule2: If the kangaroo owes money to the cat, then the cat does not remove one of the pieces of the baboon\nRule3: If the cat has something to carry apples and oranges, then it removes one of the pieces of the baboon\nRule4: The mosquito shows her cards to the panther whenever at least one animal gives a magnifier to the baboon.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cat has a cappuccino\nThe cat has a violin.\n\nBased on the game state and the rules and preferences, does the mosquito show all her cards to the panther?\nQuestion: Does the mosquito show all her cards to the panther?",
        "idx": 443,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cat, if it has a musical instrument, then we can conclude that it removes one of the pieces of the baboon\nrule1() = has(cat, musical_instrument) => remove_piece(cat, baboon)\n# Rule2: If the kangaroo owes $$$ to the cat, then the cat is not going to remove one of the pieces of the baboon\nrule2() = owes(kangaroo, money, cat) => not remove_piece(cat, baboon)\n# Rule3: If the cat has something to carry apples and oranges, then the cat removes from the board one of the pieces of the baboon\nrule3() = has(cat, carrier_for(apples_and_oranges)) => remove_piece(cat, baboon)\n# Rule4: The mosquito shows her cards (all of them) to the panther whenever at least one animal gives a magnifier to the baboon.\nrule4() = give(something, magnifier, baboon) => show_cards(mosquito, panther)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cat has a cappuccino\nhas(cat, cappuccino) = True\n# The cat has a violin.\nhas(cat, violin) = True\n\n# Based on the game state and the rules and preferences, does the mosquito show all her cards to the panther?\nquestion = show_cards(mosquito, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the starfish works fewer hours than before, then it knows the defensive plans of the black bear\nRule2: If the starfish has more than eleven friends, then it knows the defense plan of the black bear\nRule3: If something knows the defense plan of the black bear, then it eats the food of the grasshopper.\n\nThe current state of the game is as follows\nThe starfish has a banana-strawberry smoothie\nThe starfish has reduced her work hours recently\nThe starfish has one wise friend and three non-wise friends.\n\nBased on the game state and the rules and preferences, does the starfish eat the food of the grasshopper?\nQuestion: Does the starfish eat the food of the grasshopper?",
        "idx": 444,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the starfish, if it works fewer hours than before, then we can conclude that it knows the defensive plans of the black bear\nrule1() = works_hours(starfish) < previous_work_hours(starfish) => knows(starfish, defensive_plans, black_bear)\n# Rule2: If the starfish has more than eleven friends, then the starfish knows the defense plan of the black bear\nrule2() = friends(starfish) > 11 => knows(starfish, defensive_plans, black_bear)\n# Rule3: If something knows the defense plan of the black bear, then it eats the food of the grasshopper, too.\nrule3(something) = knows(something, defensive_plans, black_bear) => eats_food(something, food_of(grasshopper))\n\n# The current state of the game is as follows\n# The starfish has a banana-strawberry smoothie, and reduced her work hours recently\nhas(starfish, banana_strawberry_smoothie) = True\nreduced_work_hours(starfish) = True\n# The starfish has one friend that is wise and three friends that are not.\nwise_friends(starfish) = 1\nnon_wise_friends(starfish) = 3\n\n# Based on the game state and the rules and preferences, does the starfish eat the food of the grasshopper?\nquestion = eats_food(starfish, food_of(grasshopper))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The panda bear does not sing a song of victory for the zander, in the case where the baboon steals five of the points of the panda bear\nRule2: The baboon steals five points from the panda bear, in the case where the carp knocks down the fortress of the baboon.\n\nThe current state of the game is as follows\nThe baboon owes money to the elephant\nThe baboon steals five points from the bat\nThe carp knocks down the fortress of the baboon.\n\nBased on the game state and the rules and preferences, does the panda bear sing a victory song for the zander?\nQuestion: Does the panda bear sing a victory song for the zander?",
        "idx": 445,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The panda bear does not sing a song of victory for the zander, in the case where the baboon steals five of the points of the panda bear\nrule1() = steals(baboon, 5, points, panda_bear) => not sing_victory_song(panda_bear, zander)\n# Rule2: The baboon unquestionably steals five points from the panda bear, in the case where the carp knocks down the fortress of the baboon.\nrule2() = knocks_down(carp, fortress, baboon) => steals(baboon, 5, points, panda_bear)\n\n# The current state of the game is as follows\n# The baboon owes money to the elephant, and steals five points from the bat\nowe(baboon, money, elephant) = True\nsteals(baboon, 5, points, bat) = True\n# The carp knocks down the fortress of the baboon.\nknocks_down(carp, fortress, baboon) = True\n\n# Based on the game state and the rules and preferences, does the panda bear sing a victory song for the zander?\nquestion = sing_victory_song(panda_bear, zander)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something needs support from the rabbit and eats the food of the kiwi, then it prepares armor for the sheep.\nRule2: If the polar bear prepares armor for the sheep, then the sheep winks at the kangaroo.\nRule3: If the hare respects the sheep, then the sheep does not wink at the kangaroo.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe polar bear eats the food of the kiwi\nThe polar bear knows the defensive plans of the rabbit.\n\nBased on the game state and the rules and preferences, does the sheep wink at the kangaroo?\nQuestion: Does the sheep wink at the kangaroo?",
        "idx": 446,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something needs support from the rabbit and also eats the food of the kiwi because in this case it will surely prepare armor for the sheep (this may or may not be problematic)\nrule1(something) = needs_support(something, rabbit) & eats_food(something, kiwi) => prepare_armor(sheep)\n# Rule2: The sheep unquestionably winks at the kangaroo, in the case where the polar bear prepares armor for the sheep\nrule2() = prepare_armor(polar_bear, sheep) => wink(sheep, kangaroo)\n# Rule3: The sheep does not wink at the kangaroo, in the case where the hare respects the sheep.\nrule3() = respect(hare, sheep) => not wink(sheep, kangaroo)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The polar bear eats the food of the kiwi\neats_food(polar_bear, kiwi) = True\n# The polar bear knows the defensive plans of the rabbit.\nknows(polar_bear, defensive_plans, rabbit) = True\n\n# Based on the game state and the rules and preferences, does the sheep wink at the kangaroo?\nquestion = wink(sheep, kangaroo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something becomes an enemy of the tiger but does not hold the same number of points as the lobster, then it will become an actual enemy of the tilapia\nRule2: If the kudu has more than 3 friends, then it does not hold the same number of points as the tilapia\nRule3: If the kudu is a fan of Chris Ronaldo, then it does not hold an equal number of points as the tilapia\nRule4: If something sings a song of victory for the sun bear, then it winks at the tilapia\nRule5: If someone shows all her cards to the carp, then the kudu holds an equal number of points as the tilapia\nRule6: If the kangaroo winks at the tilapia and the cockroach does not become an enemy of the tilapia, then the tilapia eats the food of the parrot\nRule7: If the cockroach has a card whose color appears in the flag of France, then it does not become an actual enemy of the tilapia.\n\nRule2 is preferred over Rule5\nRule3 is preferred over Rule5\nRule7 is preferred over Rule1\n\nThe current state of the game is as follows\nThe cockroach becomes an enemy of the tiger\nThe cockroach has a blue card\nThe cockroach does not hold the same number of points as the lobster\nThe kangaroo sings a victory song for the sun bear\nThe kudu hates Chris Ronaldo\nThe meerkat shows all her cards to the carp.\n\nBased on the game state and the rules and preferences, does the tilapia eat the food of the parrot?\nQuestion: Does the tilapia eat the food of the parrot?",
        "idx": 447,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something becomes an enemy of the tiger but does not hold the same number of points as the lobster because in this case it will, surely, become an actual enemy of the tilapia (this may or may not be problematic)\nrule1(something) = enemy_of(something, tiger) & not same_number_of_points(something, lobster) => actual_enemy_of(something, tilapia)\n# Rule2: Regarding the kudu, if it has more than 3 friends, then we can conclude that it does not hold the same number of points as the tilapia\nrule2() = friends(kudu) > 3 => not same_number_of_points(kudu, tilapia)\n# Rule3: Regarding the kudu, if it is a fan of Chris Ronaldo, then we can conclude that it does not hold an equal number of points as the tilapia\nrule3() = fan_of(kudu, Chris_Ronaldo) => not same_number_of_points(kudu, tilapia)\n# Rule4: If you are positive that you saw one of the animals sings a song of victory for the sun bear, you can be certain that it will also wink at the tilapia\nrule4(something) = sings_victory_song(something, sun_bear) => wink_at(something, tilapia)\n# Rule5: If at least one animal shows all her cards to the carp, then the kudu holds an equal number of points as the tilapia\nrule5() = shows_all_cards(someone, carp) => same_number_of_points(kudu, tilapia)\n# Rule6: If the kangaroo winks at the tilapia and the cockroach does not become an enemy of the tilapia, then, inevitably, the tilapia eats the food of the parrot\nrule6() = wink_at(kangaroo, tilapia) & not enemy_of(cockroach, tilapia) => eat_food(tilapia, food_of(parrot))\n# Rule7: If the cockroach has a card whose color appears in the flag of France, then the cockroach does not become an actual enemy of the tilapia.\nrule7() = has(cockroach, card) & color(card) in colors_of(flag_of_France) => not actual_enemy_of(cockroach, tilapia)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n# Rule7 is preferred over Rule1\norder(rule7) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cockroach becomes an enemy of the tiger, has a card that is blue in color, and does not hold the same number of points as the lobster\nenemy_of(cockroach, tiger) = True\nhas(cockroach, card) = True\ncolor(card, blue) = True\nnot same_number_of_points(cockroach, lobster) = True\n# The kangaroo sings a victory song for the sun bear\nsings_victory_song(kangaroo, sun_bear) = True\n# The kudu hates Chris Ronaldo\nfan_of(kudu, Chris_Ronaldo) = False\n# The meerkat shows all her cards to the carp.\nshows_all_cards(meerkat, carp) = True\n\n# Based on the game state and the rules and preferences, does the tilapia eat the food of the parrot?\nquestion = eat_food(tilapia, food_of(parrot))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the halibut does not become an actual enemy of the mosquito, then the mosquito winks at the buffalo\nRule2: The mosquito does not wink at the buffalo whenever at least one animal winks at the spider\nRule3: If the phoenix has more than six friends, then the phoenix winks at the spider.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe phoenix has 10 friends.\n\nBased on the game state and the rules and preferences, does the mosquito wink at the buffalo?\nQuestion: Does the mosquito wink at the buffalo?",
        "idx": 448,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the halibut does not become an actual enemy of the mosquito, then the mosquito winks at the buffalo\nrule1() = not become_enemy(halibut, mosquito) => wink(mosquito, buffalo)\n# Rule2: The mosquito does not wink at the buffalo whenever at least one animal winks at the spider\nrule2() = wink(something, spider) => not wink(mosquito, buffalo)\n# Rule3: If the phoenix has more than six friends, then the phoenix winks at the spider.\nrule3() = friends(phoenix) > 6 => wink(phoenix, spider)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The phoenix has 10 friends.\nfriends(phoenix) = 10\n\n# Based on the game state and the rules and preferences, does the mosquito wink at the buffalo?\nquestion = wink(mosquito, buffalo)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the cricket is the same as the first letter of the name of the pig, then the cricket does not sing a victory song for the oscar\nRule2: If something steals five points from the eel and shows all its cards to the squirrel, then it sings a victory song for the oscar\nRule3: If the cricket has fewer than four friends, then it does not sing a victory song for the oscar\nRule4: If the cricket sings a victory song for the oscar, then the oscar steals five points from the sun bear.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cricket has 6 lazy friends and 1 non-lazy friend\nThe name of the cricket is Paco\nThe cricket shows all her cards to the squirrel\nThe cricket does not steal five points from the eel.\n\nBased on the game state and the rules and preferences, does the oscar steal five points from the sun bear?\nQuestion: Does the oscar steal five points from the sun bear?",
        "idx": 449,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cricket has a name whose first letter is the same as the first letter of the pig's name, then the cricket does not sing a victory song for the oscar\nrule1() = first_letter_of(name(cricket)) == first_letter_of(name(pig)) => not sing_victory_song(cricket, oscar)\n# Rule2: If you see that something steals five points from the eel and shows her cards (all of them) to the squirrel, what can you certainly conclude? You can conclude that it also sings a song of victory for the oscar\nrule2() = steal_points(something, 5, eel) & show_cards(something, all, squirrel) => sing_victory_song(something, oscar)\n# Rule3: If the cricket has fewer than four friends, then the cricket does not sing a victory song for the oscar\nrule3() = friends(cricket) < 4 => not sing_victory_song(cricket, oscar)\n# Rule4: If the cricket sings a victory song for the oscar, then the oscar steals five points from the sun bear.\nrule4() = sing_victory_song(cricket, oscar) => steal_points(oscar, 5, sun_bear)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cricket has six friends that are lazy and 1 friend that is not\nlazy_friends(cricket) = 6\nnon_lazy_friends(cricket) = 1\n# The cricket is named Paco, shows all her cards to the squirrel, and does not steal five points from the eel.\nname(cricket, Paco) = True\nshow_cards(cricket, all, squirrel) = True\nsteal_points(cricket, 5, eel) = False\n\n# Based on the game state and the rules and preferences, does the oscar steal five points from the sun bear?\nquestion = steal_points(oscar, 5, sun_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the goldfish has a name whose first letter is the same as the first letter of the kudu's name, then it does not remove one of the pieces of the grizzly bear\nRule2: If something raises a peace flag for the panther, then it removes from the board one of the pieces of the grizzly bear\nRule3: If the goldfish has a card and the color of the card is one of the rainbow colors, then it does not remove one of the pieces of the grizzly bear\nRule4: If the eel shows her cards to the grizzly bear and the goldfish removes from the board one of the pieces of the grizzly bear, then you can add \"the grizzly bear burns the warehouse of the snail\" to your conclusions\nRule5: If something raises a peace flag for the dog, then it shows all her cards to the grizzly bear.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe eel raises a peace flag for the dog\nThe goldfish has a black card\nThe goldfish raises a peace flag for the panther\nThe kudu is named Mojo.\n\nBased on the game state and the rules and preferences, does the grizzly bear burn the warehouse of the snail?\nQuestion: Does the grizzly bear burn the warehouse of the snail?",
        "idx": 450,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the goldfish, if it has a name whose first letter is the same as the first letter of the kudu's name, then we can conclude that it does not remove one of the pieces of the grizzly bear\nrule1() = first_letter_of(name(goldfish)) == first_letter_of(name(kudu)) => not remove(goldfish, piece, grizzly_bear)\n# Rule2: If you are positive that you saw one of the animals raises a flag of peace for the panther, you can be certain that it will also remove from the board one of the pieces of the grizzly bear\nrule2() = raise_flag_of_peace(something, panther) => remove(something, piece, grizzly_bear)\n# Rule3: Regarding the goldfish, if it has a card whose color is one of the rainbow colors, then we can conclude that it does not remove one of the pieces of the grizzly bear\nrule3() = has(goldfish, card) and color(card) in rainbow_colors => not remove(goldfish, piece, grizzly_bear)\n# Rule4: For the grizzly bear, if the belief is that the eel shows her cards (all of them) to the grizzly bear and the goldfish removes from the board one of the pieces of the grizzly bear, then you can add \"the grizzly bear burns the warehouse of the snail\" to your conclusions\nrule4() = show_cards(eel, grizzly_bear) & remove(goldfish, piece, grizzly_bear) => add_conclusion(\"the grizzly bear burns the warehouse of the snail\")\n# Rule5: If something raises a peace flag for the dog, then it shows all her cards to the grizzly bear, too.\nrule5() = raise_flag_of_peace(something, dog) => show_cards(something, grizzly_bear)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The eel raises a peace flag for the dog\nraise_flag_of_peace(eel, dog) = True\n# The goldfish has a card that is black in color, and raises a peace flag for the panther\nhas(goldfish, card) = True\ncolor(card, black) = True\nraise_flag_of_peace(goldfish, panther) = True\n# The kudu is named Mojo.\nname(kudu, Mojo) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear burn the warehouse of the snail?\nquestion = \"the grizzly bear burns the warehouse of the snail\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the bat has more than seven friends, then it prepares armor for the kudu\nRule2: If something prepares armor for the kudu but does not need support from the lion, then it does not owe money to the polar bear\nRule3: If the first letter of the name of the bat is the same as the first letter of the name of the hummingbird, then the bat does not need the support of the lion\nRule4: If the spider gives a magnifier to the bat and the panda bear burns the warehouse that is in possession of the bat, then the bat is not going to prepare armor for the kudu\nRule5: If something does not raise a flag of peace for the sheep, then it needs support from the lion.\n\nRule1 is preferred over Rule4\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe bat has 14 friends\nThe name of the bat is Pablo\nThe name of the hummingbird is Pashmak\nThe panda bear burns the warehouse of the bat\nThe spider gives a magnifier to the bat\n\nBased on the game state and the rules and preferences, does the bat owe money to the polar bear?\nQuestion: Does the bat owe money to the polar bear?",
        "idx": 451,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the bat, if it has more than seven friends, then we can conclude that it prepares armor for the kudu\nrule1() = friends(bat) > 7 => prepare_armor(bat, kudu)\n# Rule2: Be careful when something prepares armor for the kudu but does not need support from the lion because in this case it will, surely, not owe $$$ to the polar bear (this may or may not be problematic)\nrule2() = prepare_armor(something, kudu) & not need_support(something, lion) => not owe(something, money, polar_bear)\n# Rule3: If the bat has a name whose first letter is the same as the first letter of the hummingbird's name, then the bat does not need the support of the lion\nrule3() = first_letter_of(name(bat)) == first_letter_of(name(hummingbird)) => not need_support(bat, lion)\n# Rule4: For the bat, if the belief is that the spider gives a magnifier to the bat and the panda bear burns the warehouse that is in possession of the bat, then you can add that \"the bat is not going to prepare armor for the kudu\" to your conclusions\nrule4() = give(spider, magnifier, bat) & burn_warehouse(panda_bear, bat) => not prepare_armor(bat, kudu)\n# Rule5: If something does not raise a flag of peace for the sheep, then it needs support from the lion.\nrule5(something) = not raise_flag_of_peace(something, sheep) => need_support(something, lion)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The bat has fourteen friends\nfriends(bat) = 14\n# The bat is named Pablo\nname(bat, Pablo) = True\n# The hummingbird is named Pashmak\nname(hummingbird, Pashmak) = True\n# The panda bear burns the warehouse of the bat\nburn_warehouse(panda_bear, bat) = True\n# The spider gives a magnifier to the bat\ngive(spider, magnifier, bat) = True\n\n# Based on the game state and the rules and preferences, does the bat owe money to the polar bear?\nquestion = owe(bat, money, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the spider has a card and the color of the card is one of the rainbow colors, then it raises a flag of peace for the lobster\nRule2: If something does not owe money to the mosquito, then it winks at the viperfish\nRule3: If the spider has a leafy green vegetable, then it raises a flag of peace for the lobster\nRule4: If something needs support from the crocodile, then the cheetah offers a job position to the lobster\nRule5: If something prepares armor for the starfish but does not attack the green fields whose owner is the raven, then it does not offer a job position to the lobster\nRule6: If the lobster has a sharp object, then it owes money to the mosquito\nRule7: If something removes one of the pieces of the doctorfish, then the spider does not raise a flag of peace for the lobster\nRule8: If the lobster has a card and the color of the card is a primary color, then it owes money to the mosquito.\n\nRule1 is preferred over Rule7\nRule3 is preferred over Rule7\nRule4 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cheetah prepares armor for the starfish but does not attack the green fields whose owner is the raven\nThe lobster has a blue card and a hot chocolate\nThe spider has a white card and some romaine lettuce.\n\nBased on the game state and the rules and preferences, does the lobster wink at the viperfish?\nQuestion: Does the lobster wink at the viperfish?",
        "idx": 452,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the spider, if it has a card whose color is one of the rainbow colors, then we can conclude that it raises a flag of peace for the lobster\nrule1() = has(spider, card) and color(card) in rainbow_colors => raise_flag_of_peace(spider, lobster)\n# Rule2: If you are positive that one of the animals does not owe money to the mosquito, you can be certain that it will wink at the viperfish without a doubt\nrule2(something) = not owe(something, money, mosquito) => wink(something, viperfish)\n# Rule3: If the spider has a leafy green vegetable, then the spider raises a flag of peace for the lobster\nrule3() = has(spider, leafy_green_vegetable) => raise_flag_of_peace(spider, lobster)\n# Rule4: If at least one animal needs support from the crocodile, then the cheetah offers a job position to the lobster\nrule4() = needs_support(something, crocodile) => offer_job_position(cheetah, lobster)\n# Rule5: Be careful when something prepares armor for the starfish but does not attack the green fields whose owner is the raven because in this case it will, surely, not offer a job position to the lobster (this may or may not be problematic)\nrule5() = prepare_armor(something, starfish) & not attack(something, green_fields, owner=raven) => not offer_job_position(something, lobster)\n# Rule6: Regarding the lobster, if it has a sharp object, then we can conclude that it owes $$$ to the mosquito\nrule6() = has(lobster, sharp_object) => owe(lobster, money, mosquito)\n# Rule7: The spider does not raise a flag of peace for the lobster whenever at least one animal removes one of the pieces of the doctorfish\nrule7() = remove_piece(something, doctorfish) => not raise_flag_of_peace(spider, lobster)\n# Rule8: Regarding the lobster, if it has a card with a primary color, then we can conclude that it owes $$$ to the mosquito.\nrule8() = has(lobster, card) and color(card) in primary_colors => owe(lobster, money, mosquito)\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cheetah prepares armor for the starfish but does not attack the green fields whose owner is the raven\nprepare_armor(cheetah, starfish) = True\nnot attack(cheetah, green_fields, owner=raven) = True\n# The lobster has a card that is blue in color, and has a hot chocolate\nhas(lobster, card) = True\ncolor(card, blue) = True\nhas(lobster, hot_chocolate) = True\n# The spider has a card that is white in color\nhas(spider, card) = True\ncolor(card, white) = True\n# The spider has some romaine lettuce.\nhas(spider, romaine_lettuce) = True\n\n# Based on the game state and the rules and preferences, does the lobster wink at the viperfish?\nquestion = wink(lobster, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If at least one animal becomes an actual enemy of the sheep, then the tiger sings a victory song for the amberjack\nRule2: If something sings a victory song for the amberjack, then the elephant prepares armor for the hare\nRule3: If the raven raises a peace flag for the elephant, then the elephant is not going to prepare armor for the hare\nRule4: If the raven has a high salary, then the raven does not raise a peace flag for the elephant\nRule5: If the raven has a basket and carries apples or oranges, then the raven raises a peace flag for the elephant\nRule6: If the raven has more than 6 friends, then it does not raise a peace flag for the elephant.\n\nRule2 is preferred over Rule3\nRule4 is preferred over Rule5\nRule6 is preferred over Rule5\n\nThe current state of the game is as follows\nThe donkey becomes an enemy of the sheep\nThe raven has a basket\nThe job income of the raven is low\n\nBased on the game state and the rules and preferences, does the elephant prepare armor for the hare?\nQuestion: Does the elephant prepare armor for the hare?",
        "idx": 453,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal becomes an actual enemy of the sheep, then the tiger sings a victory song for the amberjack\nrule1() = becomes_enemy(something, sheep) => sing_victory_song(tiger, amberjack)\n# Rule2: The elephant prepares armor for the hare whenever at least one animal sings a victory song for the amberjack\nrule2() = sings_victory_song(something, amberjack) => prepare_armor(elephant, hare)\n# Rule3: If the raven raises a peace flag for the elephant, then the elephant is not going to prepare armor for the hare\nrule3() = raise_flag_of_peace(raven, elephant) => not prepare_armor(elephant, hare)\n# Rule4: If the raven has a high salary, then the raven does not raise a peace flag for the elephant\nrule4() = salary(raven) == high => not raise_flag_of_peace(raven, elephant)\n# Rule5: If the raven has something to carry apples and oranges, then the raven raises a peace flag for the elephant\nrule5() = has(raven, basket) and carries(raven, apples_oranges) => raise_flag_of_peace(raven, elephant)\n# Rule6: Regarding the raven, if it has more than 6 friends, then we can conclude that it does not raise a peace flag for the elephant.\nrule6() = friends(raven) > 6 => not raise_flag_of_peace(raven, elephant)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule5\norder(rule4) > order(rule5) = True\n# Rule6 is preferred over Rule5\norder(rule6) > order(rule5) = True\n\n# The current state of the game is as follows\n# The donkey becomes an enemy of the sheep\nbecomes_enemy(donkey, sheep) = True\n# The raven has a basket, and has a low-income job.\nhas(raven, basket) = True\njob_income(raven, low) = True\n\n# Based on the game state and the rules and preferences, does the elephant prepare armor for the hare?\nquestion = prepare_armor(elephant, hare)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something eats the food of the wolverine, then the gecko does not sing a song of victory for the goldfish\nRule2: If the cheetah has a card with a primary color, then it eats the food of the wolverine.\n\nThe current state of the game is as follows\nThe cheetah has a card that is red in color.\n\nBased on the game state and the rules and preferences, does the gecko sing a victory song for the goldfish?\nQuestion: Does the gecko sing a victory song for the goldfish?",
        "idx": 454,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal eats the food of the wolverine, then the gecko does not sing a song of victory for the goldfish\nrule1() = eats_food(something, food_of(wolverine)) => not sing_victory_song(gecko, goldfish)\n# Rule2: Regarding the cheetah, if it has a card with a primary color, then we can conclude that it eats the food of the wolverine.\nrule2() = has(cheetah, card) and color(card) in primary_colors => eats_food(cheetah, food_of(wolverine))\n\n# The current state of the game is as follows\n# The cheetah has a card that is red in color.\nhas(cheetah, card) = True\ncolor(card, red) = True\n\n# Based on the game state and the rules and preferences, does the gecko sing a victory song for the goldfish?\nquestion = sing_victory_song(gecko, goldfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kiwi steals five points from the sun bear, then the sun bear knocks down the fortress of the phoenix\nRule2: If the kiwi has a card whose color appears in the flag of Italy, then it steals five points from the sun bear.\n\nThe current state of the game is as follows\nThe kiwi has a card that is orange in color.\n\nBased on the game state and the rules and preferences, does the sun bear knock down the fortress of the phoenix?\nQuestion: Does the sun bear knock down the fortress of the phoenix?",
        "idx": 455,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The sun bear unquestionably knocks down the fortress of the phoenix, in the case where the kiwi steals five points from the sun bear\nrule1() = steal(kiwi, 5, points, sun_bear) => knock_down(sun_bear, fortress, phoenix)\n# Rule2: Regarding the kiwi, if it has a card whose color appears in the flag of Italy, then we can conclude that it steals five points from the sun bear.\nrule2() = has(kiwi, card) and color(card) in flag_colors(italy) => steal(kiwi, 5, points, sun_bear)\n\n# The current state of the game is as follows\n# The kiwi has a card that is orange in color.\nhas(kiwi, card) = True\ncolor(card, orange) = True\n\n# Based on the game state and the rules and preferences, does the sun bear knock down the fortress of the phoenix?\nquestion = knock_down(sun_bear, fortress, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something becomes an enemy of the polar bear and shows all her cards to the carp, then it needs the support of the panda bear\nRule2: If the crocodile has fewer than three friends, then it becomes an actual enemy of the polar bear\nRule3: If the sun bear knocks down the fortress that belongs to the crocodile, then the crocodile shows her cards (all of them) to the carp\nRule4: If the crocodile purchased a time machine, then it becomes an enemy of the polar bear.\n\nThe current state of the game is as follows\nThe crocodile has one smart friend and one non-smart friend\nThe crocodile invented a time machine\nThe sun bear knocks down the fortress of the crocodile.\n\nBased on the game state and the rules and preferences, does the crocodile need support from the panda bear?\nQuestion: Does the crocodile need support from the panda bear?",
        "idx": 456,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something becomes an enemy of the polar bear and shows all her cards to the carp, what can you certainly conclude? You can conclude that it also needs the support of the panda bear\nrule1(something) = become_enemy(something, polar_bear) & show_cards(something, all, carp) => need_support(something, panda_bear)\n# Rule2: Regarding the crocodile, if it has fewer than three friends, then we can conclude that it becomes an actual enemy of the polar bear\nrule2() = friends(crocodile) < 3 => become_enemy(crocodile, polar_bear)\n# Rule3: If the sun bear knocks down the fortress that belongs to the crocodile, then the crocodile shows her cards (all of them) to the carp\nrule3() = knock_down(sun_bear, fortress, crocodile) => show_cards(crocodile, all, carp)\n# Rule4: Regarding the crocodile, if it purchased a time machine, then we can conclude that it becomes an enemy of the polar bear.\nrule4() = purchased(crocodile, time_machine) => become_enemy(crocodile, polar_bear)\n\n# The current state of the game is as follows\n# The crocodile has one friend that is smart and 1 friend that is not, and invented a time machine\nsmart_friends(crocodile) = 1\nnon_smart_friends(crocodile) = 1\ninvented(crocodile, time_machine) = True\n# The sun bear knocks down the fortress of the crocodile.\nknock_down(sun_bear, fortress, crocodile) = True\n\n# Based on the game state and the rules and preferences, does the crocodile need support from the panda bear?\nquestion = need_support(crocodile, panda_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the pig has fewer than eight friends, then it does not attack the green fields whose owner is the leopard\nRule2: If something attacks the green fields of the leopard and the green fields of the wolverine, then it does not knock down the fortress of the koala\nRule3: If something rolls the dice for the snail, then it does not know the defense plan of the pig\nRule4: If something learns elementary resource management from the puffin, then it attacks the green fields whose owner is the wolverine, too\nRule5: If something does not become an actual enemy of the black bear, then it knows the defensive plans of the pig\nRule6: If at least one animal owes money to the moose, then the pig attacks the green fields of the leopard.\n\nRule1 is preferred over Rule6\nRule3 is preferred over Rule5\n\nThe current state of the game is as follows\nThe cricket owes money to the moose\nThe pig learns the basics of resource management from the puffin\nThe amberjack does not become an enemy of the black bear.\n\nBased on the game state and the rules and preferences, does the pig knock down the fortress of the koala?\nQuestion: Does the pig knock down the fortress of the koala?",
        "idx": 457,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the pig, if it has fewer than eight friends, then we can conclude that it does not attack the green fields whose owner is the leopard\nrule1() = friends(pig) < 8 => not attack(pig, green_fields, owner(leopard))\n# Rule2: If you see that something attacks the green fields of the leopard and attacks the green fields of the wolverine, what can you certainly conclude? You can conclude that it does not knock down the fortress of the koala\nrule2() = attack(something, green_fields, owner(leopard)) & attack(something, green_fields, owner(wolverine)) => not knock_down(something, fortress, koala)\n# Rule3: If something rolls the dice for the snail, then it does not know the defense plan of the pig\nrule3(something) = roll_dice(something, snail) => not know(something, defense_plan, pig)\n# Rule4: If something learns elementary resource management from the puffin, then it attacks the green fields whose owner is the wolverine, too\nrule4(something) = learn(something, elementary_resource_management_from(puffin)) => attack(something, green_fields, owner(wolverine))\n# Rule5: If something does not become an actual enemy of the black bear, then it knows the defensive plans of the pig\nrule5(something) = not become_enemy(something, black_bear) => know(something, defensive_plans, pig)\n# Rule6: If at least one animal owes money to the moose, then the pig attacks the green fields of the leopard.\nrule6() = owes_money_to(something, moose) => attack(pig, green_fields, owner(leopard))\n# Rule1 is preferred over Rule6\norder(rule1) > order(rule6) = True\n# Rule3 is preferred over Rule5\norder(rule3) > order(rule5) = True\n\n# The current state of the game is as follows\n# The cricket owes money to the moose\nowes_money_to(cricket, moose) = True\n# The pig learns the basics of resource management from the puffin\nlearn(pig, basics_of_resource_management_from(puffin)) = True\n# The amberjack does not become an enemy of the black bear.\nnot become_enemy(amberjack, black_bear) = True\n\n# Based on the game state and the rules and preferences, does the pig knock down the fortress of the koala?\nquestion = knock_down(pig, fortress, koala)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the penguin burns the warehouse of the ferret, then the ferret is not going to attack the green fields whose owner is the hippopotamus\nRule2: If something does not remove a piece of the hippopotamus, then it gives a magnifying glass to the leopard.\n\nThe current state of the game is as follows\nThe ferret has 5 lazy friends and 1 non-lazy friend\nThe penguin burns the warehouse of the ferret.\n\nBased on the game state and the rules and preferences, does the ferret give a magnifier to the leopard?\nQuestion: Does the ferret give a magnifying glass to the leopard?",
        "idx": 458,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the penguin burns the warehouse of the ferret, then the ferret is not going to attack the green fields whose owner is the hippopotamus\nrule1() = burn(penguin, warehouse, ferret) => not attack(ferret, green_fields, owner(hippopotamus))\n# Rule2: If you are positive that one of the animals does not remove one of the pieces of the hippopotamus, you can be certain that it will give a magnifying glass to the leopard without a doubt.\nrule2(something) = not remove(something, piece, hippopotamus) => give(something, magnifying_glass, leopard)\n\n# The current state of the game is as follows\n# The ferret has five friends that are lazy and one friend that is not\nlazy_friends(ferret) = 5\nnon_lazy_friends(ferret) = 1\n# The penguin burns the warehouse of the ferret.\nburn(penguin, warehouse, ferret) = True\n\n# Based on the game state and the rules and preferences, does the ferret give a magnifier to the leopard?\nquestion = give(ferret, magnifying_glass, leopard)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the whale took a bike from the store, then it does not knock down the fortress of the eagle\nRule2: If something does not owe money to the kudu, then it will knock down the fortress that belongs to the eagle without a doubt\nRule3: If something knocks down the fortress that belongs to the eagle, then it shows all her cards to the wolverine.\n\nRule2 is preferred over Rule1\n\nThe current state of the game is as follows\nThe whale stole a bike from the store and does not owe money to the kudu.\n\nBased on the game state and the rules and preferences, does the whale show all her cards to the wolverine?\nQuestion: Does the whale show all her cards to the wolverine?",
        "idx": 459,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the whale, if it took a bike from the store, then we can conclude that it does not knock down the fortress of the eagle\nrule1() = took(whale, bike, store) => not knock_down(whale, fortress, eagle)\n# Rule2: If you are positive that one of the animals does not owe $$$ to the kudu, you can be certain that it will knock down the fortress that belongs to the eagle without a doubt\nrule2(something) = not owe(something, money, kudu) => knock_down(something, fortress, eagle)\n# Rule3: If something knocks down the fortress that belongs to the eagle, then it shows all her cards to the wolverine, too.\nrule3(something) = knock_down(something, fortress, eagle) => show_cards(something, wolverine)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n\n# The current state of the game is as follows\n# The whale stole a bike from the store, and does not owe money to the kudu.\ntook(whale, bike, store) = True\nnot owe(whale, money, kudu) = True\n\n# Based on the game state and the rules and preferences, does the whale show all her cards to the wolverine?\nquestion = show_cards(whale, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grizzly bear has a name whose first letter is the same as the first letter of the moose's name, then the grizzly bear rolls the dice for the snail\nRule2: If the meerkat has a sharp object, then it does not remove from the board one of the pieces of the snail\nRule3: If the meerkat has a leafy green vegetable, then it removes one of the pieces of the snail\nRule4: If the grizzly bear created a time machine, then it does not roll the dice for the snail\nRule5: If at least one animal steals five points from the cheetah, then the snail does not know the defense plan of the spider\nRule6: If the belief is that the grizzly bear is not going to roll the dice for the snail but the meerkat removes from the board one of the pieces of the snail, then you can add that \"the snail is not going to proceed to the spot right after the leopard\" to your conclusions\nRule7: If the grizzly bear has fewer than 4 friends, then it does not roll the dice for the snail\nRule8: If the meerkat has more than 5 friends, then it does not remove from the board one of the pieces of the snail\nRule9: If the meerkat has a name whose first letter is the same as the first letter of the pig's name, then the meerkat removes one of the pieces of the snail.\n\nRule1 is preferred over Rule4\nRule1 is preferred over Rule7\nRule2 is preferred over Rule3\nRule2 is preferred over Rule9\nRule8 is preferred over Rule3\nRule8 is preferred over Rule9\n\nThe current state of the game is as follows\nThe grizzly bear has ten friends, invented a time machine, and is named Peddi\nThe hippopotamus steals five points from the cheetah\nThe meerkat has a saxophone and some arugula\nThe name of the meerkat is Blossom\nThe name of the pig is Charlie.\n\nBased on the game state and the rules and preferences, does the snail proceed to the spot right after the leopard?\nQuestion: Does the snail proceed to the spot right after the leopard?",
        "idx": 460,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grizzly bear has a name whose first letter is the same as the first letter of the moose's name, then the grizzly bear rolls the dice for the snail\nrule1() = first_letter_of(name(grizzly_bear)) == first_letter_of(name(moose)) => roll_dice(grizzly_bear, snail)\n# Rule2: Regarding the meerkat, if it has a sharp object, then we can conclude that it does not remove from the board one of the pieces of the snail\nrule2() = has(meerkat, sharp_object) => not remove_piece(meerkat, snail)\n# Rule3: Regarding the meerkat, if it has a leafy green vegetable, then we can conclude that it removes one of the pieces of the snail\nrule3() = has(meerkat, leafy_green_vegetable) => remove_piece(meerkat, snail)\n# Rule4: If the grizzly bear created a time machine, then the grizzly bear does not roll the dice for the snail\nrule4() = created_time_machine(grizzly_bear) => not roll_dice(grizzly_bear, snail)\n# Rule5: The snail does not know the defense plan of the spider whenever at least one animal steals five points from the cheetah\nrule5() = steal_points(something, 5, cheetah) => not know(snail, defense_plan, spider)\n# Rule6: For the snail, if the belief is that the grizzly bear is not going to roll the dice for the snail but the meerkat removes from the board one of the pieces of the snail, then you can add that \"the snail is not going to proceed to the spot right after the leopard\" to your conclusions\nrule6() = not roll_dice(grizzly_bear, snail) & remove_piece(meerkat, snail) => add_conclusion(\"the snail is not going to proceed to the spot right after the leopard\")\n# Rule7: Regarding the grizzly bear, if it has fewer than 4 friends, then we can conclude that it does not roll the dice for the snail\nrule7() = friends(grizzly_bear) < 4 => not roll_dice(grizzly_bear, snail)\n# Rule8: Regarding the meerkat, if it has more than 5 friends, then we can conclude that it does not remove from the board one of the pieces of the snail\nrule8() = friends(meerkat) > 5 => not remove_piece(meerkat, snail)\n# Rule9: If the meerkat has a name whose first letter is the same as the first letter of the pig's name, then the meerkat removes one of the pieces of the snail.\nrule9() = first_letter_of(name(meerkat)) == first_letter_of(name(pig)) => remove_piece(meerkat, snail)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule1 is preferred over Rule7\norder(rule1) > order(rule7) = True\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule2 is preferred over Rule9\norder(rule2) > order(rule9) = True\n# Rule8 is preferred over Rule3\norder(rule8) > order(rule3) = True\n# Rule8 is preferred over Rule9\norder(rule8) > order(rule9) = True\n\n# The current state of the game is as follows\n# The grizzly bear has ten friends, invented a time machine, and is named Peddi\nfriends(grizzly_bear) = 10\ninvented_time_machine(grizzly_bear) = True\nname(grizzly_bear, Peddi) = True\n# The hippopotamus steals five points from the cheetah\nsteal_points(hippopotamus, 5, cheetah) = True\n# The meerkat has a saxophone, and has some arugula\nhas(meerkat, saxophone) = True\nhas(meerkat, arugula) = True\n# The meerkat is named Blossom\nname(meerkat, Blossom) = True\n# The pig is named Charlie.\nname(pig, Charlie) = True\n\n# Based on the game state and the rules and preferences, does the snail proceed to the spot right after the leopard?\nquestion = \"the snail is not going to proceed to the spot right after the leopard\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo has something to drink, then it does not proceed to the spot that is right after the spot of the amberjack\nRule2: If the panda bear sings a victory song for the kangaroo, then the kangaroo proceeds to the spot that is right after the spot of the amberjack\nRule3: If the eagle steals five points from the amberjack and the kangaroo does not proceed to the spot right after the amberjack, then the amberjack does not learn elementary resource management from the bat\nRule4: The amberjack learns elementary resource management from the bat if the swordfish raises a flag of peace for the amberjack\nRule5: If something shows all of her cards to the hare, then it raises a flag of peace for the amberjack.\n\nRule2 is preferred over Rule1\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe kangaroo has a banana-strawberry smoothie\nThe swordfish knocks down the fortress of the hare.\n\nBased on the game state and the rules and preferences, does the amberjack learn the basics of resource management from the bat?\nQuestion: Does the amberjack learn the basics of resource management from the bat?",
        "idx": 461,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kangaroo, if it has something to drink, then we can conclude that it does not proceed to the spot that is right after the spot of the amberjack\nrule1() = has(kangaroo, drink) => not proceed_to_spot(kangaroo, right_after_spot(amberjack))\n# Rule2: If the panda bear sings a victory song for the kangaroo, then the kangaroo proceeds to the spot that is right after the spot of the amberjack\nrule2() = sings(panda_bear, victory_song, kangaroo) => proceed_to_spot(kangaroo, right_after_spot(amberjack))\n# Rule3: For the amberjack, if the belief is that the eagle steals five of the points of the amberjack and the kangaroo does not proceed to the spot right after the amberjack, then you can add \"the amberjack does not learn elementary resource management from the bat\" to your conclusions\nrule3() = belief(eagle, steals_points(amberjack, 5)) & not proceed_to_spot(kangaroo, right_after_spot(amberjack)) => not learn(amberjack, elementary_resource_management, bat)\n# Rule4: The amberjack unquestionably learns elementary resource management from the bat, in the case where the swordfish raises a flag of peace for the amberjack\nrule4() = raise_flag_of_peace(swordfish, amberjack) => learn(amberjack, elementary_resource_management, bat)\n# Rule5: If you are positive that you saw one of the animals shows her cards (all of them) to the hare, you can be certain that it will also raise a flag of peace for the amberjack.\nrule5() = saw(something, shows_cards(all_cards), hare) => raise_flag_of_peace(something, amberjack)\n# Rule2 is preferred over Rule1\norder(rule2) > order(rule1) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The kangaroo has a banana-strawberry smoothie\nhas(kangaroo, banana_strawberry_smoothie) = True\n# The swordfish knocks down the fortress of the hare.\nknocks_down(swordfish, fortress(hare)) = True\n\n# Based on the game state and the rules and preferences, does the amberjack learn the basics of resource management from the bat?\nquestion = learn(amberjack, elementary_resource_management, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the tiger does not burn the warehouse of the kudu, then the kudu burns the warehouse of the mosquito\nRule2: If something shows all her cards to the snail and needs the support of the dog, then it knows the defensive plans of the viperfish\nRule3: If the catfish has a card whose color appears in the flag of Belgium, then it does not show all her cards to the snail\nRule4: If the catfish has fewer than three friends, then it shows all her cards to the snail\nRule5: If the catfish has published a high-quality paper, then it needs support from the dog\nRule6: If the catfish has a leafy green vegetable, then it shows all her cards to the snail\nRule7: If the catfish has a leafy green vegetable, then it needs the support of the dog\nRule8: If the elephant does not attack the green fields whose owner is the catfish and the eagle does not know the defensive plans of the catfish, then the catfish does not need support from the dog\nRule9: If the first letter of the name of the catfish is the same as the first letter of the name of the lion, then the catfish does not show all her cards to the snail.\n\nRule3 is preferred over Rule4\nRule3 is preferred over Rule6\nRule8 is preferred over Rule5\nRule8 is preferred over Rule7\nRule9 is preferred over Rule4\nRule9 is preferred over Rule6\n\nThe current state of the game is as follows\nThe catfish has romaine lettuce\nThe name of the catfish is Teddy\nThe catfish recently read a high-quality paper\nThe catfish has 3 adventurous friends and 2 non-adventurous friends\nThe name of the lion is Mojo\nThe elephant does not attack the green fields whose owner is the catfish\nThe tiger does not burn the warehouse of the kudu\n\nBased on the game state and the rules and preferences, does the catfish know the defensive plans of the viperfish?\nQuestion: Does the catfish know the defensive plans of the viperfish?",
        "idx": 462,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the tiger does not burn the warehouse of the kudu, then the kudu burns the warehouse of the mosquito\nrule1() = not burn(tiger, warehouse, kudu) => burn(kudu, warehouse, mosquito)\n# Rule2: Be careful when something shows her cards (all of them) to the snail and also needs the support of the dog because in this case it will surely know the defensive plans of the viperfish (this may or may not be problematic)\nrule2(something) = show_cards(something, all, snail) & needs_support(something, dog) => knows(something, defensive_plans, viperfish)\n# Rule3: Regarding the catfish, if it has a card whose color appears in the flag of Belgium, then we can conclude that it does not show all her cards to the snail\nrule3() = has(catfish, card) & color(card) in colors_of(flag_of_Belgium) => not show_cards(catfish, all, snail)\n# Rule4: If the catfish has fewer than three friends, then the catfish shows her cards (all of them) to the snail\nrule4() = friends(catfish) < 3 => show_cards(catfish, all, snail)\n# Rule5: If the catfish has published a high-quality paper, then the catfish needs support from the dog\nrule5() = published(catfish, high_quality_paper) => needs_support(catfish, dog)\n# Rule6: Regarding the catfish, if it has a leafy green vegetable, then we can conclude that it shows her cards (all of them) to the snail\nrule6() = has(catfish, leafy_green_vegetable) => show_cards(catfish, all, snail)\n# Rule7: Regarding the catfish, if it has a leafy green vegetable, then we can conclude that it needs the support of the dog\nrule7() = has(catfish, leafy_green_vegetable) => needs_support(catfish, dog)\n# Rule8: For the catfish, if the belief is that the elephant does not attack the green fields whose owner is the catfish and the eagle does not know the defensive plans of the catfish, then you can add \"the catfish does not need support from the dog\" to your conclusions\nrule8() = not attack(elephant, green_fields, owner=catfish) & not knows(eagle, defensive_plans, catfish) => not needs_support(catfish, dog)\n# Rule9: If the catfish has a name whose first letter is the same as the first letter of the lion's name, then the catfish does not show her cards (all of them) to the snail.\nrule9() = first_letter_of(name(catfish)) == first_letter_of(name(lion)) => not show_cards(catfish, all, snail)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n# Rule8 is preferred over Rule5\norder(rule8) > order(rule5) = True\n# Rule8 is preferred over Rule7\norder(rule8) > order(rule7) = True\n# Rule9 is preferred over Rule4\norder(rule9) > order(rule4) = True\n# Rule9 is preferred over Rule6\norder(rule9) > order(rule6) = True\n\n# The current state of the game is as follows\n# The catfish has some romaine lettuce\nhas(catfish, romaine_lettuce) = True\n# The catfish is named Teddy\nname(catfish, Teddy) = True\n# The catfish recently read a high-quality paper\nrecently_read(catfish, high_quality_paper) = True\n# The catfish has three friends that are adventurous and 2 friends that are not\nadventurous_friends(catfish) = 3\nnon_adventurous_friends(catfish) = 2\n# The lion is named Mojo\nname(lion, Mojo) = True\n# The elephant does not attack the green fields whose owner is the catfish\nnot attack(elephant, green_fields, owner=catfish) = True\n# The tiger does not burn the warehouse of the kudu\nnot burn(tiger, warehouse, kudu) = True\n\n# Based on the game state and the rules and preferences, does the catfish know the defensive plans of the viperfish?\nquestion = knows(catfish, defensive_plans, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cricket has a card whose color appears in the flag of France, then it does not become an enemy of the black bear\nRule2: If something becomes an enemy of the black bear, then it does not raise a flag of peace for the raven\nRule3: If something steals five points from the cockroach and removes one of the pieces of the hippopotamus, then it becomes an enemy of the black bear\nRule4: If the first letter of the name of the cricket is the same as the first letter of the name of the grasshopper, then it does not become an enemy of the black bear.\n\nRule1 is preferred over Rule3\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe name of the cricket is Tessa\nThe cricket steals five points from the cockroach\nThe cricket removes one of the pieces of the hippopotamus\nThe name of the grasshopper is Pashmak\n\nBased on the game state and the rules and preferences, does the cricket raise a peace flag for the raven?\nQuestion: Does the cricket raise a peace flag for the raven?",
        "idx": 463,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cricket, if it has a card whose color appears in the flag of France, then we can conclude that it does not become an enemy of the black bear\nrule1() = has(cricket, card) and color(card) in colors_of_flag(france) => not become_enemy(cricket, black_bear)\n# Rule2: If you are positive that you saw one of the animals becomes an actual enemy of the black bear, you can be certain that it will not raise a flag of peace for the raven\nrule2(something) = become_enemy(something, black_bear) => not raise_flag_of_peace(something, raven)\n# Rule3: Be careful when something steals five points from the cockroach and also removes from the board one of the pieces of the hippopotamus because in this case it will surely become an enemy of the black bear (this may or may not be problematic)\nrule3(something) = steal_points(something, cockroach, 5) & remove_piece(something, hippopotamus) => become_enemy(something, black_bear)\n# Rule4: Regarding the cricket, if it has a name whose first letter is the same as the first letter of the grasshopper's name, then we can conclude that it does not become an actual enemy of the black bear.\nrule4() = first_letter_of(name(cricket)) == first_letter_of(name(grasshopper)) => not become_enemy(cricket, black_bear)\n# Rule1 is preferred over Rule3\norder(rule1) > order(rule3) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cricket is named Tessa, and steals five points from the cockroach\nname(cricket, Tessa) = True\nsteal_points(cricket, cockroach, 5) = True\n# The cricket removes from the board one of the pieces of the hippopotamus\nremove_piece(cricket, hippopotamus) = True\n# The grasshopper is named Pashmak.\nname(grasshopper, Pashmak) = True\n\n# Based on the game state and the rules and preferences, does the cricket raise a peace flag for the raven?\nquestion = raise_flag_of_peace(cricket, raven)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not hold an equal number of points as the panda bear, then it burns the warehouse of the grizzly bear\nRule2: If the first letter of the name of the raven is the same as the first letter of the name of the cockroach, then the raven does not raise a flag of peace for the panda bear\nRule3: If something knows the defense plan of the penguin but does not give a magnifier to the meerkat, then it raises a peace flag for the panda bear\nRule4: If the raven owns a luxury aircraft, then it does not raise a peace flag for the panda bear.\n\nRule2 is preferred over Rule3\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe name of the cockroach is Luna\nThe name of the raven is Tango\nThe raven knows the defensive plans of the penguin\nThe raven owns a luxury aircraft\nThe raven does not give a magnifier to the meerkat.\n\nBased on the game state and the rules and preferences, does the raven burn the warehouse of the grizzly bear?\nQuestion: Does the raven burn the warehouse of the grizzly bear?",
        "idx": 464,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not hold an equal number of points as the panda bear, then it burns the warehouse of the grizzly bear\nrule1(something) = points(something) != points(panda_bear) => burn_warehouse(something, grizzly_bear)\n# Rule2: If the raven has a name whose first letter is the same as the first letter of the cockroach's name, then the raven does not raise a flag of peace for the panda bear\nrule2() = first_letter_of(name(raven)) == first_letter_of(name(cockroach)) => not raise_flag_of_peace(raven, panda_bear)\n# Rule3: Be careful when something knows the defense plan of the penguin but does not give a magnifier to the meerkat because in this case it will, surely, raise a peace flag for the panda bear (this may or may not be problematic)\nrule3(something) = knows(something, defense_plan, penguin) & not give(something, magnifier, meerkat) => raise_flag_of_peace(something, panda_bear)\n# Rule4: Regarding the raven, if it owns a luxury aircraft, then we can conclude that it does not raise a peace flag for the panda bear.\nrule4() = owns(raven, luxury_aircraft) => not raise_flag_of_peace(raven, panda_bear)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cockroach is named Luna\nname(cockroach, Luna) = True\n# The raven is named Tango, knows the defensive plans of the penguin, and purchased a luxury aircraft\nname(raven, Tango) = True\nknows(raven, defense_plan, penguin) = True\nowns(raven, luxury_aircraft) = True\n# The raven does not give a magnifier to the meerkat.\ngive(raven, magnifier, meerkat) = False\n\n# Based on the game state and the rules and preferences, does the raven burn the warehouse of the grizzly bear?\nquestion = burn_warehouse(raven, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the wolverine steals five points from the parrot, then the parrot attacks the green fields of the grizzly bear\nRule2: If the first letter of the name of the parrot is the same as the first letter of the name of the sea bass, then the parrot does not raise a flag of peace for the halibut\nRule3: If something attacks the green fields of the grizzly bear, then it gives a magnifier to the tiger\nRule4: If something does not remove a piece from the pig and does not raise a peace flag for the halibut, then it does not give a magnifying glass to the tiger.\n\nRule4 is preferred over Rule3\n\nThe current state of the game is as follows\nThe name of the parrot is Max\nThe name of the sea bass is Meadow\nThe wolverine steals five points from the parrot.\n\nBased on the game state and the rules and preferences, does the parrot give a magnifier to the tiger?\nQuestion: Does the parrot give a magnifier to the tiger?",
        "idx": 465,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The parrot unquestionably attacks the green fields of the grizzly bear, in the case where the wolverine steals five points from the parrot\nrule1() = steals(wolverine, 5, points, parrot) => attack(parrot, green_fields, grizzly_bear)\n# Rule2: If the parrot has a name whose first letter is the same as the first letter of the sea bass's name, then the parrot does not raise a flag of peace for the halibut\nrule2() = first_letter_of(name(parrot)) == first_letter_of(name(sea_bass)) => not raise_flag_of_peace(parrot, halibut)\n# Rule3: If something attacks the green fields whose owner is the grizzly bear, then it gives a magnifier to the tiger, too\nrule3(something) = attack(something, green_fields, grizzly_bear) => give(something, magnifier, tiger)\n# Rule4: If you see that something does not remove one of the pieces of the pig and also does not raise a peace flag for the halibut, what can you certainly conclude? You can conclude that it also does not give a magnifying glass to the tiger.\nrule4(something) = not remove(something, piece, pig) & not raise_flag_of_peace(something, halibut) => not give(something, magnifying_glass, tiger)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n\n# The current state of the game is as follows\n# The parrot is named Max\nname(parrot, Max) = True\n# The sea bass is named Meadow\nname(sea_bass, Meadow) = True\n# The wolverine steals five points from the parrot.\nsteals(wolverine, 5, points, parrot) = True\n\n# Based on the game state and the rules and preferences, does the parrot give a magnifier to the tiger?\nquestion = give(parrot, magnifier, tiger)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knocks down the fortress that belongs to the halibut and also attacks the green fields whose owner is the rabbit, then it will surely knock down the fortress that belongs to the octopus.\nRule2: If the grasshopper does not raise a peace flag for the eagle, then the eagle unquestionably eats the food that belongs to the octopus.\nRule3: If the dog knocks down the fortress of the octopus and the eagle eats the food that belongs to the octopus, then the octopus will not steal five points from the canary.\nRule4: If something needs the support of the viperfish, then it will not eat the food that belongs to the octopus.\n\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe dog attacks the green fields whose owner is the rabbit, and knocks down the fortress of the halibut.\nThe grasshopper does not raise a peace flag for the eagle.\n\nBased on the game state and the rules and preferences, does the octopus steal five points from the canary?\nQuestion: Does the octopus steal five points from the canary?",
        "idx": 466,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something knocks down the fortress that belongs to the halibut and also attacks the green fields whose owner is the rabbit because in this case it will surely knock down the fortress that belongs to the octopus (this may or may not be problematic)\nrule1() = knocks_down(something, fortress(halibut)) & attacks(something, green_fields(rabbit)) => knocks_down(fortress(octopus))\n# Rule2: The eagle unquestionably eats the food that belongs to the octopus, in the case where the grasshopper does not raise a flag of peace for the eagle\nrule2() = not raise_flag_of_peace(grasshopper, eagle) => eats(food(octopus), eagle)\n# Rule3: For the octopus, if the belief is that the dog knocks down the fortress of the octopus and the eagle eats the food that belongs to the octopus, then you can add that \"the octopus is not going to steal five of the points of the canary\" to your conclusions\nrule3() = knocks_down(fortress(dog), fortress(octopus)) & eats(food(octopus), eagle) => not steal_points(octopus, 5, canary)\n# Rule4: If you are positive that you saw one of the animals needs the support of the viperfish, you can be certain that it will not eat the food that belongs to the octopus.\nrule4(something) = needs_support(something, viperfish) => not eats(food(octopus), something)\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The dog attacks the green fields whose owner is the rabbit, and knocks down the fortress of the halibut\nattacks(dog, green_fields(rabbit)) = True\nknocks_down(dog, fortress(halibut)) = True\n# The grasshopper does not raise a peace flag for the eagle.\nnot raise_flag_of_peace(grasshopper, eagle) = True\n\n# Based on the game state and the rules and preferences, does the octopus steal five points from the canary?\nquestion = steal_points(octopus, 5, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the jellyfish attacks the green fields whose owner is the catfish, then the catfish knows the defense plan of the hippopotamus\nRule2: If something knows the defensive plans of the hippopotamus but does not respect the snail, then it learns the basics of resource management from the kiwi\nRule3: If something does not become an enemy of the meerkat, then it respects the snail.\n\nThe current state of the game is as follows\nThe jellyfish attacks the green fields whose owner is the catfish\nThe catfish does not become an enemy of the meerkat.\n\nBased on the game state and the rules and preferences, does the catfish learn the basics of resource management from the kiwi?\nQuestion: Does the catfish learn the basics of resource management from the kiwi?",
        "idx": 467,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The catfish unquestionably knows the defense plan of the hippopotamus, in the case where the jellyfish attacks the green fields whose owner is the catfish\nrule1() = attacks(jellyfish, green_fields) & owner(green_fields) == catfish => knows(catfish, defense_plan, hippopotamus)\n# Rule2: Be careful when something knows the defensive plans of the hippopotamus but does not respect the snail because in this case it will, surely, learn the basics of resource management from the kiwi (this may or may not be problematic)\nrule2(something) = knows(something, defense_plan, hippopotamus) & not respect(something, snail) => learn(something, basics_of_resource_management, kiwi)\n# Rule3: If you are positive that one of the animals does not become an actual enemy of the meerkat, you can be certain that it will respect the snail without a doubt.\nrule3(something) = not become_enemy(something, meerkat) => respect(something, snail)\n\n# The current state of the game is as follows\n# The jellyfish attacks the green fields whose owner is the catfish\nattacks(jellyfish, green_fields) & owner(green_fields) == catfish = True\n# The catfish does not become an enemy of the meerkat.\nnot become_enemy(catfish, meerkat) = True\n\n# Based on the game state and the rules and preferences, does the catfish learn the basics of resource management from the kiwi?\nquestion = learn(catfish, basics_of_resource_management, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cat has a card and the color of the card is one of the rainbow colors, then the cat does not offer a job to the gecko\nRule2: If something owes money to the lion and does not knock down the fortress of the jellyfish, then it knocks down the fortress of the gecko\nRule3: If the tilapia has a card and the color of the card is one of the rainbow colors, then it steals five points from the gecko\nRule4: If something burns the warehouse of the caterpillar, then it does not steal five points from the gecko\nRule5: If the cat does not offer a job to the gecko and the wolverine knocks down the fortress of the gecko, then the gecko knows the defensive plans of the halibut\nRule6: If something eats the food of the goldfish, then the wolverine does not knock down the fortress of the gecko\nRule7: If the first letter of the name of the cat is the same as the first letter of the name of the tilapia, then the cat does not offer a job to the gecko\nRule8: If the tilapia has something to carry apples and oranges, then it steals five points from the gecko.\n\nRule4 is preferred over Rule3\nRule4 is preferred over Rule8\nRule6 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cat has a blue card\nThe name of the cat is Lucy\nThe tilapia has a blade\nThe tilapia has a green card\nThe name of the tilapia is Pablo\nThe wolverine owes money to the lion\nThe wolverine does not knock down the fortress of the jellyfish.\n\nBased on the game state and the rules and preferences, does the gecko know the defensive plans of the halibut?\nQuestion: Does the gecko know the defensive plans of the halibut?",
        "idx": 468,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the cat has a card whose color is one of the rainbow colors, then the cat does not offer a job to the gecko\nrule1() = has(cat, card) and color(card) in rainbow_colors => not offer_job_position(cat, gecko)\n# Rule2: If you see that something does not knock down the fortress of the jellyfish but it owes money to the lion, what can you certainly conclude? You can conclude that it also knocks down the fortress of the gecko\nrule2(something) = not knock_down(something, fortress, jellyfish) & owe(something, money, lion) => knock_down(something, fortress, gecko)\n# Rule3: Regarding the tilapia, if it has a card whose color is one of the rainbow colors, then we can conclude that it steals five points from the gecko\nrule3() = has(tilapia, card) and color(card) in rainbow_colors => steal_points(tilapia, 5, gecko)\n# Rule4: If something burns the warehouse of the caterpillar, then it does not steal five of the points of the gecko\nrule4() = burn(something, warehouse, caterpillar) => not steal_points(something, 5, gecko)\n# Rule5: For the gecko, if the belief is that the cat does not offer a job to the gecko but the wolverine knocks down the fortress of the gecko, then you can add \"the gecko knows the defensive plans of the halibut\" to your conclusions\nrule5() = not offer_job_position(cat, gecko) & knock_down(wolverine, fortress, gecko) => know(gecko, defensive_plans, halibut)\n# Rule6: The wolverine does not knock down the fortress that belongs to the gecko whenever at least one animal eats the food that belongs to the goldfish\nrule6() = eat_food(something, food_of(goldfish)) => not knock_down(wolverine, fortress, gecko)\n# Rule7: If the cat has a name whose first letter is the same as the first letter of the tilapia's name, then the cat does not offer a job position to the gecko\nrule7() = first_letter_of(name(cat)) == first_letter_of(name(tilapia)) => not offer_job_position(cat, gecko)\n# Rule8: Regarding the tilapia, if it has something to carry apples and oranges, then we can conclude that it steals five points from the gecko.\nrule8() = has(tilapia, something_to_carry(apples, oranges)) => steal_points(tilapia, 5, gecko)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule4 is preferred over Rule8\norder(rule4) > order(rule8) = True\n# Rule6 is preferred over Rule2\norder(rule6) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cat has a card that is blue in color, and is named Lucy\nhas(cat, card) = True\ncolor(card, blue) = True\nname(cat, Lucy) = True\n# The tilapia has a blade\nhas(tilapia, blade) = True\n# The tilapia has a card that is green in color, and is named Pablo\nhas(tilapia, card) = True\ncolor(card, green) = True\nname(tilapia, Pablo) = True\n# The wolverine owes money to the lion\nowe(wolverine, money, lion) = True\n# The wolverine does not knock down the fortress of the jellyfish.\nnot knock_down(wolverine, fortress, jellyfish) = True\n\n# Based on the game state and the rules and preferences, does the gecko know the defensive plans of the halibut?\nquestion = know(gecko, defensive_plans, halibut)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the mosquito has something to carry apples and oranges, then it becomes an enemy of the turtle\nRule2: If something does not burn the warehouse of the pig but becomes an enemy of the turtle, then it does not show all its cards to the cockroach\nRule3: If the mosquito has a high salary, then it does not burn the warehouse of the pig\nRule4: If the mosquito has a card whose color starts with the letter \"o\", then it burns the warehouse of the pig\nRule5: If the first letter of the name of the mosquito is the same as the first letter of the name of the whale, then the mosquito does not burn the warehouse of the pig.\n\nRule3 is preferred over Rule4\nRule5 is preferred over Rule4\n\nThe current state of the game is as follows\nThe mosquito has a card that is orange in color, and has a plastic bag\nThe mosquito has a low-income job\nThe name of the mosquito is Mojo\nThe name of the whale is Max.\n\nBased on the game state and the rules and preferences, does the mosquito show all her cards to the cockroach?\nQuestion: Does the mosquito show all her cards to the cockroach?",
        "idx": 469,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the mosquito, if it has something to carry apples and oranges, then we can conclude that it becomes an actual enemy of the turtle\nrule1() = has(mosquito, carry(apples)) & has(mosquito, carry(oranges)) => become_enemy(mosquito, turtle)\n# Rule2: If you see that something does not burn the warehouse of the pig but it becomes an enemy of the turtle, what can you certainly conclude? You can conclude that it is not going to show her cards (all of them) to the cockroach\nrule2() = not burn(warehouse, pig) & become_enemy(something, turtle) => not show_cards(something, all, cockroach)\n# Rule3: Regarding the mosquito, if it has a high salary, then we can conclude that it does not burn the warehouse of the pig\nrule3() = salary(mosquito) == high => not burn(warehouse, pig)\n# Rule4: Regarding the mosquito, if it has a card whose color starts with the letter \"o\", then we can conclude that it burns the warehouse of the pig\nrule4() = has(mosquito, card) & starts_with(color(card), \"o\") => burn(warehouse, pig)\n# Rule5: If the mosquito has a name whose first letter is the same as the first letter of the whale's name, then the mosquito does not burn the warehouse of the pig.\nrule5() = first_letter_of(name(mosquito)) == first_letter_of(name(whale)) => not burn(warehouse, pig)\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n# Rule5 is preferred over Rule4\norder(rule5) > order(rule4) = True\n\n# The current state of the game is as follows\n# The mosquito has a card that is orange in color, and has a plastic bag\nhas(mosquito, card) = True\ncolor(card, orange) = True\nhas(mosquito, plastic_bag) = True\n# The mosquito has a low-income job\nsalary(mosquito) == low = True\n# The mosquito is named Mojo\nname(mosquito, Mojo) = True\n# The whale is named Max.\nname(whale, Max) = True\n\n# Based on the game state and the rules and preferences, does the mosquito show all her cards to the cockroach?\nquestion = show_cards(mosquito, all, cockroach)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not learn the basics of resource management from the moose but it knocks down the fortress that belongs to the turtle, then it steals five of the points of the elephant\nRule2: The hippopotamus prepares armor for the amberjack whenever at least one animal steals five points from the elephant.\n\nThe current state of the game is as follows\nThe canary winks at the turtle\nThe canary does not learn the basics of resource management from the moose.\n\nBased on the game state and the rules and preferences, does the hippopotamus prepare armor for the amberjack?\nQuestion: Does the hippopotamus prepare armor for the amberjack?",
        "idx": 470,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something does not learn the basics of resource management from the moose but it knocks down the fortress that belongs to the turtle, what can you certainly conclude? You can conclude that it also steals five of the points of the elephant\nrule1(something) = not learn(something, basics_of_resource_management, moose) & knocks_down(something, fortress, turtle) => steal_points(something, 5, elephant)\n# Rule2: The hippopotamus prepares armor for the amberjack whenever at least one animal steals five points from the elephant.\nrule2() = steal_points(something, 5, elephant) => prepare_armor(hippopotamus, amberjack)\n\n# The current state of the game is as follows\n# The canary winks at the turtle\nwinks(canary, turtle) = True\n# The canary does not learn the basics of resource management from the moose.\nlearn(canary, basics_of_resource_management, moose) = False\n\n# Based on the game state and the rules and preferences, does the hippopotamus prepare armor for the amberjack?\nquestion = prepare_armor(hippopotamus, amberjack)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the doctorfish has a high salary, then it does not need support from the donkey\nRule2: If something does not need the support of the donkey, then it prepares armor for the polar bear\nRule3: If the doctorfish has a sharp object, then it does not need the support of the donkey.\n\nThe current state of the game is as follows\nThe doctorfish has a well-paid job\nThe doctorfish has a hot chocolate\nThe name of the doctorfish is Cinnamon\nThe name of the kangaroo is Chickpea\n\nBased on the game state and the rules and preferences, does the doctorfish prepare armor for the polar bear?\nQuestion: Does the doctorfish prepare armor for the polar bear?",
        "idx": 471,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the doctorfish, if it has a high salary, then we can conclude that it does not need support from the donkey\nrule1() = has(doctorfish, high_salary) => not need_support(doctorfish, donkey)\n# Rule2: If something does not need the support of the donkey, then it prepares armor for the polar bear\nrule2() = not need_support(something, donkey) => prepare_armor(something, polar_bear)\n# Rule3: If the doctorfish has a sharp object, then the doctorfish does not need the support of the donkey.\nrule3() = has(doctorfish, sharp_object) => not need_support(doctorfish, donkey)\n\n# The current state of the game is as follows\n# The doctorfish got a well-paid job\nhas(doctorfish, high_salary) = True\n# The doctorfish has a hot chocolate\nhas(doctorfish, hot_chocolate) = True\n# The doctorfish is named Cinnamon\nname(doctorfish, Cinnamon) = True\n# The kangaroo is named Chickpea\nname(kangaroo, Chickpea) = True\n\n# Based on the game state and the rules and preferences, does the doctorfish prepare armor for the polar bear?\nquestion = prepare_armor(doctorfish, polar_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something gives a magnifier to the koala, then it does not raise a flag of peace for the lobster\nRule2: If the koala does not show all her cards to the eagle, then the eagle gives a magnifier to the koala\nRule3: The eagle does not give a magnifier to the koala if the spider owes money to the eagle.\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe spider owes money to the eagle\nThe koala does not show all her cards to the eagle.\n\nBased on the game state and the rules and preferences, does the eagle raise a peace flag for the lobster?\nQuestion: Does the eagle raise a peace flag for the lobster?",
        "idx": 472,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something gives a magnifier to the koala, then it does not raise a flag of peace for the lobster\nrule1(something) = give(something, magnifier, koala) => not raise_flag_of_peace(something, lobster)\n# Rule2: If the koala does not show her cards (all of them) to the eagle, then the eagle gives a magnifier to the koala\nrule2() = not show_all_cards(koala, eagle) => give(eagle, magnifier, koala)\n# Rule3: The eagle does not give a magnifier to the koala, in the case where the spider owes money to the eagle.\nrule3() = owe(spider, money, eagle) => not give(eagle, magnifier, koala)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The spider owes money to the eagle\nowe(spider, money, eagle) = True\n# The koala does not show all her cards to the eagle.\nshow_all_cards(koala, eagle) = False\n\n# Based on the game state and the rules and preferences, does the eagle raise a peace flag for the lobster?\nquestion = raise_flag_of_peace(eagle, lobster)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something offers a job to the oscar, then the cow holds an equal number of points as the cheetah\nRule2: If the bat has published a high-quality paper, then it offers a job to the oscar\nRule3: If the bat has something to carry apples and oranges, then it offers a job position to the oscar.\n\nThe current state of the game is as follows\nThe bat has a flute\nThe bat recently read a high-quality paper.\n\nBased on the game state and the rules and preferences, does the cow hold the same number of points as the cheetah?\nQuestion: Does the cow hold the same number of points as the cheetah?",
        "idx": 473,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If at least one animal offers a job to the oscar, then the cow holds an equal number of points as the cheetah\nrule1() = offer_job_position(something, oscar) => points(cow) == points(cheetah)\n# Rule2: Regarding the bat, if it has published a high-quality paper, then we can conclude that it offers a job to the oscar\nrule2() = published(bat, high_quality_paper) => offer_job_position(bat, oscar)\n# Rule3: Regarding the bat, if it has something to carry apples and oranges, then we can conclude that it offers a job position to the oscar.\nrule3() = has(bat, something_to_carry_apples_and_oranges) => offer_job_position(bat, oscar)\n\n# The current state of the game is as follows\n# The bat has a flute\nhas(bat, flute) = True\n# The bat recently read a high-quality paper.\nrecently_read(bat, high_quality_paper) = True\n\n# Based on the game state and the rules and preferences, does the cow hold the same number of points as the cheetah?\nquestion = points(cow) == points(cheetah)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the dog winks at the cricket and the sun bear does not know the defensive plans of the cricket, then the cricket raises a peace flag for the carp\nRule2: If the dog has fewer than eight friends, then it winks at the cricket\nRule3: If the snail attacks the green fields whose owner is the cricket, then the cricket does not raise a peace flag for the carp\nRule4: If something gives a magnifier to the cheetah, then it does not know the defense plan of the cricket.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe dog has 4 playful friends and 1 non-playful friend\nThe sun bear gives a magnifier to the cheetah.\n\nBased on the game state and the rules and preferences, does the cricket raise a peace flag for the carp?\nQuestion: Does the cricket raise a peace flag for the carp?",
        "idx": 474,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the cricket, if the belief is that the dog winks at the cricket and the sun bear does not know the defensive plans of the cricket, then you can add \"the cricket raises a peace flag for the carp\" to your conclusions\nrule1() = wink(dog, cricket) & not knows(sun_bear, defensive_plans, cricket) => raise_flag_of_peace(cricket, carp)\n# Rule2: Regarding the dog, if it has fewer than eight friends, then we can conclude that it winks at the cricket\nrule2() = friends(dog) < 8 => wink(dog, cricket)\n# Rule3: If the snail attacks the green fields whose owner is the cricket, then the cricket is not going to raise a peace flag for the carp\nrule3() = attack(snail, green_fields(cricket)) => not raise_flag_of_peace(cricket, carp)\n# Rule4: If something gives a magnifier to the cheetah, then it does not know the defense plan of the cricket.\nrule4(something) = give(something, magnifier, cheetah) => not knows(something, defensive_plans, cricket)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The dog has four friends that are playful and one friend that is not\nplayful_friends(dog) = 4\nnon_playful_friends(dog) = 1\n# The sun bear gives a magnifier to the cheetah.\ngive(sun_bear, magnifier, cheetah) = True\n\n# Based on the game state and the rules and preferences, does the cricket raise a peace flag for the carp?\nquestion = raise_flag_of_peace(cricket, carp)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The eel does not knock down the fortress of the canary whenever at least one animal attacks the green fields whose owner is the penguin\nRule2: If the sea bass does not offer a job to the turtle however the puffin winks at the turtle, then the turtle will not attack the green fields whose owner is the penguin\nRule3: The turtle attacks the green fields of the penguin whenever at least one animal shows all her cards to the amberjack.\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe tiger shows all her cards to the amberjack\nThe sea bass does not offer a job to the turtle.\n\nBased on the game state and the rules and preferences, does the eel knock down the fortress of the canary?\nQuestion: Does the eel knock down the fortress of the canary?",
        "idx": 475,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The eel does not knock down the fortress of the canary whenever at least one animal attacks the green fields whose owner is the penguin\nrule1() = attacks(something, green_fields, owner(penguin)) => not knock_down(eel, fortress, canary)\n# Rule2: If the sea bass does not offer a job to the turtle however the puffin winks at the turtle, then the turtle will not attack the green fields whose owner is the penguin\nrule2() = not offer_job_position(sea_bass, turtle) & wink(puffin, turtle) => not attack(turtle, green_fields, owner(penguin))\n# Rule3: The turtle attacks the green fields of the penguin whenever at least one animal shows all her cards to the amberjack.\nrule3() = show_all_cards(something, amberjack) => attack(turtle, green_fields, owner(penguin))\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The tiger shows all her cards to the amberjack\nshow_all_cards(tiger, amberjack) = True\n# The sea bass does not offer a job to the turtle.\nnot offer_job_position(sea_bass, turtle) = True\n\n# Based on the game state and the rules and preferences, does the eel knock down the fortress of the canary?\nquestion = knock_down(eel, fortress, canary)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something steals five of the points of the doctorfish and also attacks the green fields whose owner is the cat, then it will surely knock down the fortress that belongs to the lobster.\nRule2: If the meerkat has a card whose color appears in the flag of Belgium, then it does not give a magnifying glass to the baboon\nRule3: If the tilapia has a sharp object, then it owes money to the lobster\nRule4: If something rolls the dice for the baboon, then the lobster does not hold the same number of points as the dog\nRule5: The meerkat gives a magnifying glass to the baboon whenever at least one animal becomes an actual enemy of the goldfish\nRule6: If the grizzly bear does not knock down the fortress that belongs to the lobster but the tilapia owes money to the lobster, then the lobster holds the same number of points as the dog unavoidably.\n\nRule2 is preferred over Rule5\nRule6 is preferred over Rule4\n\nThe current state of the game is as follows\nThe grizzly bear attacks the green fields whose owner is the cat, and steals five points from the doctorfish\nThe lion becomes an enemy of the goldfish\nThe tilapia has a blade.\n\nBased on the game state and the rules and preferences, does the lobster hold the same number of points as the dog?\nQuestion: Does the lobster hold the same number of points as the dog?",
        "idx": 476,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Be careful when something steals five of the points of the doctorfish and also attacks the green fields whose owner is the cat because in this case it will surely knock down the fortress that belongs to the lobster (this may or may not be problematic)\nrule1() = steals_points(something, doctorfish, 5) & attacks(something, green_fields, cat) => knock_down_fortress(lobster)\n# Rule2: Regarding the meerkat, if it has a card whose color appears in the flag of Belgium, then we can conclude that it does not give a magnifying glass to the baboon\nrule2() = has(meerkat, card) & color(card) in colors_of(flag_of_Belgium) => not give(meerkat, magnifying_glass, baboon)\n# Rule3: Regarding the tilapia, if it has a sharp object, then we can conclude that it owes $$$ to the lobster\nrule3() = has(tilapia, sharp_object) => owe(tilapia, money, lobster)\n# Rule4: If at least one animal rolls the dice for the baboon, then the lobster does not hold the same number of points as the dog\nrule4() = rolls_dice(something, baboon) => not points(lobster) == points(dog)\n# Rule5: The meerkat gives a magnifying glass to the baboon whenever at least one animal becomes an actual enemy of the goldfish\nrule5() = becomes_enemy(something, goldfish) => give(meerkat, magnifying_glass, baboon)\n# Rule6: If the grizzly bear does not knock down the fortress that belongs to the lobster but the tilapia owes $$$ to the lobster, then the lobster holds the same number of points as the dog unavoidably.\nrule6() = not knock_down_fortress(grizzly_bear) & owe(tilapia, money, lobster) => points(lobster) == points(dog)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n# Rule6 is preferred over Rule4\norder(rule6) > order(rule4) = True\n\n# The current state of the game is as follows\n# The grizzly bear attacks the green fields whose owner is the cat, and steals five points from the doctorfish\nattacks(grizzly_bear, green_fields, cat) = True\nsteals_points(grizzly_bear, doctorfish, 5) = True\n# The lion becomes an enemy of the goldfish\nbecomes_enemy(lion, goldfish) = True\n# The tilapia has a blade.\nhas(tilapia, blade) = True\n\n# Based on the game state and the rules and preferences, does the lobster hold the same number of points as the dog?\nquestion = points(lobster) == points(dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the octopus knocks down the fortress of the elephant, then the elephant knocks down the fortress of the salmon\nRule2: If something knocks down the fortress that belongs to the salmon, then the halibut attacks the green fields whose owner is the grizzly bear\nRule3: If something does not prepare armor for the meerkat, then it does not attack the green fields whose owner is the grizzly bear\nRule4: If the first letter of the name of the elephant is the same as the first letter of the name of the tilapia, then the elephant does not knock down the fortress that belongs to the salmon.\n\nRule1 is preferred over Rule4\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe elephant has a blade\nThe name of the elephant is Chickpea\nThe octopus knocks down the fortress of the elephant\nThe name of the tilapia is Pashmak.\n\nBased on the game state and the rules and preferences, does the halibut attack the green fields whose owner is the grizzly bear?\nQuestion: Does the halibut attack the green fields whose owner is the grizzly bear?",
        "idx": 477,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the octopus knocks down the fortress of the elephant, then the elephant knocks down the fortress of the salmon\nrule1() = knocks_down(octopus, fortress, elephant) => knocks_down(elephant, fortress, salmon)\n# Rule2: If at least one animal knocks down the fortress that belongs to the salmon, then the halibut attacks the green fields whose owner is the grizzly bear\nrule2() = knocks_down(something, fortress, salmon) => attacks(halibut, green_fields, owner(grizzly_bear))\n# Rule3: If something does not prepare armor for the meerkat, then it does not attack the green fields whose owner is the grizzly bear\nrule3(something) = not prepare_armor(something, meerkat) => not attacks(something, green_fields, owner(grizzly_bear))\n# Rule4: If the elephant has a name whose first letter is the same as the first letter of the tilapia's name, then the elephant does not knock down the fortress that belongs to the salmon.\nrule4() = first_letter_of(name(elephant)) == first_letter_of(name(tilapia)) => not knocks_down(elephant, fortress, salmon)\n# Rule1 is preferred over Rule4\norder(rule1) > order(rule4) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The elephant has a blade\nhas(elephant, blade) = True\n# The elephant is named Chickpea\nname(elephant, Chickpea) = True\n# The octopus knocks down the fortress of the elephant\nknocks_down(octopus, fortress, elephant) = True\n# The tilapia is named Pashmak.\nname(tilapia, Pashmak) = True\n\n# Based on the game state and the rules and preferences, does the halibut attack the green fields whose owner is the grizzly bear?\nquestion = attacks(halibut, green_fields, owner(grizzly_bear))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the panther becomes an enemy of the cat, then the cat is not going to knock down the fortress of the octopus\nRule2: If something does not knock down the fortress that belongs to the octopus but it offers a job position to the phoenix, then it is not going to knock down the fortress that belongs to the grizzly bear\nRule3: If the first letter of the name of the cat is the same as the first letter of the name of the panda bear, then the cat does not offer a job position to the phoenix\nRule4: If the cat has a card with a primary color, then it offers a job to the phoenix\nRule5: If the cat owns a luxury aircraft, then it offers a job to the phoenix.\n\nRule4 is preferred over Rule3\nRule5 is preferred over Rule3\n\nThe current state of the game is as follows\nThe cat has a violet card\nThe name of the cat is Meadow\nThe cat owns a luxury aircraft\nThe name of the panda bear is Max\nThe panther becomes an enemy of the cat\nThe squirrel knocks down the fortress of the cat.\n\nBased on the game state and the rules and preferences, does the cat knock down the fortress of the grizzly bear?\nQuestion: Does the cat knock down the fortress of the grizzly bear?",
        "idx": 478,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the panther becomes an enemy of the cat, then the cat is not going to knock down the fortress of the octopus\nrule1() = become_enemy(panther, cat) => not knock_down(cat, fortress, octopus)\n# Rule2: If you see that something does not knock down the fortress that belongs to the octopus but it offers a job position to the phoenix, what can you certainly conclude? You can conclude that it is not going to knock down the fortress that belongs to the grizzly bear\nrule2(something) = not knock_down(something, fortress, octopus) & offer_job_position(something, phoenix) => not knock_down(something, fortress, grizzly_bear)\n# Rule3: If the cat has a name whose first letter is the same as the first letter of the panda bear's name, then the cat does not offer a job position to the phoenix\nrule3() = first_letter_of(name(cat)) == first_letter_of(name(panda_bear)) => not offer_job_position(cat, phoenix)\n# Rule4: Regarding the cat, if it has a card with a primary color, then we can conclude that it offers a job to the phoenix\nrule4() = has(cat, card) and color(card) in primary_colors => offer_job_position(cat, phoenix)\n# Rule5: Regarding the cat, if it owns a luxury aircraft, then we can conclude that it offers a job to the phoenix.\nrule5() = owns(cat, luxury_aircraft) => offer_job_position(cat, phoenix)\n# Rule4 is preferred over Rule3\norder(rule4) > order(rule3) = True\n# Rule5 is preferred over Rule3\norder(rule5) > order(rule3) = True\n\n# The current state of the game is as follows\n# The cat has a card that is violet in color, and is named Meadow\nhas(cat, card) = True\ncolor(card, violet) = True\nname(cat, Meadow) = True\n# The cat purchased a luxury aircraft\nowns(cat, luxury_aircraft) = True\n# The panda bear is named Max\nname(panda_bear, Max) = True\n# The panther becomes an enemy of the cat\nbecome_enemy(panther, cat) = True\n# The squirrel knocks down the fortress of the cat.\nknock_down(squirrel, fortress, cat) = True\n\n# Based on the game state and the rules and preferences, does the cat knock down the fortress of the grizzly bear?\nquestion = knock_down(cat, fortress, grizzly_bear)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The hippopotamus eats the food that belongs to the cricket whenever at least one animal shows her cards (all of them) to the salmon\nRule2: The black bear needs the support of the phoenix whenever at least one animal eats the food of the cricket\nRule3: If the hippopotamus has a card whose color appears in the flag of France, then the hippopotamus does not eat the food of the cricket\nRule4: If the lobster owns a luxury aircraft, then it holds the same number of points as the black bear.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe caterpillar shows all her cards to the salmon\nThe name of the goldfish is Luna\nThe hippopotamus has a card that is white in color\nThe lobster has a card that is yellow in color, and is named Tango\nThe lobster owns a luxury aircraft.\n\nBased on the game state and the rules and preferences, does the black bear need support from the phoenix?\nQuestion: Does the black bear need support from the phoenix?",
        "idx": 479,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The hippopotamus eats the food that belongs to the cricket whenever at least one animal shows her cards (all of them) to the salmon\nrule1() = show_cards(something, all_cards) to salmon => eat_food(hippopotamus, food_of(cricket))\n# Rule2: The black bear needs the support of the phoenix whenever at least one animal eats the food of the cricket\nrule2() = eat_food(something, food_of(cricket)) => support(black_bear, phoenix)\n# Rule3: If the hippopotamus has a card whose color appears in the flag of France, then the hippopotamus does not eat the food of the cricket\nrule3() = has(hippopotamus, card) and color(card) in colors_of(flag_of_france) => not eat_food(hippopotamus, food_of(cricket))\n# Rule4: Regarding the lobster, if it owns a luxury aircraft, then we can conclude that it holds the same number of points as the black bear.\nrule4() = owns(lobster, luxury_aircraft) => points(lobster) == points(black_bear)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The caterpillar shows all her cards to the salmon\nshow_cards(caterpillar, all_cards) to salmon = True\n# The goldfish is named Luna\nname(goldfish, Luna) = True\n# The hippopotamus has a card that is white in color\nhas(hippopotamus, card) = True\ncolor(card, white) = True\n# The lobster has a card that is yellow in color, and is named Tango\nhas(lobster, card) = True\ncolor(card, yellow) = True\nname(lobster, Tango) = True\n# The lobster purchased a luxury aircraft.\nowns(lobster, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the black bear need support from the phoenix?\nquestion = support(black_bear, phoenix)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The caterpillar offers a job to the hummingbird whenever at least one animal learns elementary resource management from the tiger\nRule2: If something removes one of the pieces of the squirrel but does not burn the warehouse of the donkey, then it learns elementary resource management from the tiger.\n\nThe current state of the game is as follows\nThe baboon removes from the board one of the pieces of the squirrel but does not burn the warehouse of the donkey.\n\nBased on the game state and the rules and preferences, does the caterpillar offer a job to the hummingbird?\nQuestion: Does the caterpillar offer a job to the hummingbird?",
        "idx": 480,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The caterpillar offers a job to the hummingbird whenever at least one animal learns elementary resource management from the tiger\nrule1() = learns(something, elementary_resource_management, tiger) => offer_job_position(caterpillar, hummingbird)\n# Rule2: If you see that something removes one of the pieces of the squirrel but does not burn the warehouse of the donkey, what can you certainly conclude? You can conclude that it learns elementary resource management from the tiger.\nrule2(something) = removes(something, piece, squirrel) & not burn(warehouse, donkey) => learns(something, elementary_resource_management, tiger)\n\n# The current state of the game is as follows\n# The baboon removes from the board one of the pieces of the squirrel but does not burn the warehouse of the donkey.\nremoves(baboon, piece, squirrel) = True\nburn(warehouse, donkey) = False\n\n# Based on the game state and the rules and preferences, does the caterpillar offer a job to the hummingbird?\nquestion = offer_job_position(caterpillar, hummingbird)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: The grizzly bear does not respect the kiwi whenever at least one animal burns the warehouse of the cheetah\nRule2: If something proceeds to the spot that is right after the spot of the donkey and also prepares armor for the halibut, then it will surely burn the warehouse of the cheetah.\n\nThe current state of the game is as follows\nThe panther prepares armor for the halibut\nThe panther proceeds to the spot right after the donkey.\n\nBased on the game state and the rules and preferences, does the grizzly bear respect the kiwi?\nQuestion: Does the grizzly bear respect the kiwi?",
        "idx": 481,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: The grizzly bear does not respect the kiwi whenever at least one animal burns the warehouse of the cheetah\nrule1() = burn_warehouse(something, cheetah) => not respect(grizzly_bear, kiwi)\n# Rule2: Be careful when something proceeds to the spot that is right after the spot of the donkey and also prepares armor for the halibut because in this case it will surely burn the warehouse of the cheetah (this may or may not be problematic).\nrule2() = proceed_to_spot(something, spot_after(donkey)) & prepare_armor(something, halibut) => burn_warehouse(something, cheetah)\n\n# The current state of the game is as follows\n# The panther prepares armor for the halibut\nprepare_armor(panther, halibut) = True\n# The panther proceeds to the spot right after the donkey.\nproceed_to_spot(panther, spot_after(donkey)) = True\n\n# Based on the game state and the rules and preferences, does the grizzly bear respect the kiwi?\nquestion = respect(grizzly_bear, kiwi)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the viperfish knows the defensive plans of the cow and the salmon needs the support of the cow, then you can add \"the cow rolls the dice for the eel\" to your conclusions\nRule2: The eel shows all her cards to the spider, in the case where the cow rolls the dice for the eel.\n\nThe current state of the game is as follows\nThe cow has 1 kind friend and 1 unkind friend\nThe cow lost her keys\nThe viperfish knows the defensive plans of the cow\nThe salmon does not need support from the cow.\n\nBased on the game state and the rules and preferences, does the eel show all her cards to the spider?\nQuestion: Does the eel show all her cards to the spider?",
        "idx": 482,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the cow, if the belief is that the viperfish knows the defensive plans of the cow and the salmon needs the support of the cow, then you can add \"the cow rolls the dice for the eel\" to your conclusions\nrule1() = knows(viperfish, defensive_plans, cow) & needs_support(salmon, cow) => add_conclusion(\"the cow rolls the dice for the eel\")\n# Rule2: The eel unquestionably shows her cards (all of them) to the spider, in the case where the cow rolls the dice for the eel.\nrule2() = cow_rolls_dice_for(eel) => show_all_cards(eel, spider)\n\n# The current state of the game is as follows\n# The cow has 1 friend that is kind and 1 friend that is not\nkind_friends(cow) = 1\nunkind_friends(cow) = 1\n# The cow lost her keys\nlost(cow, keys) = True\n# The viperfish knows the defensive plans of the cow\nknows(viperfish, defensive_plans, cow) = True\n# The salmon does not need support from the cow.\nneeds_support(salmon, cow) = False\n\n# Based on the game state and the rules and preferences, does the eel show all her cards to the spider?\nquestion = show_all_cards(eel, spider)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something gives a magnifier to the grizzly bear and knocks down the fortress that belongs to the kudu, then it prepares armor for the eagle\nRule2: If the halibut prepares armor for the eagle, then the eagle prepares armor for the dog\nRule3: If the salmon does not learn elementary resource management from the eagle, then the eagle will not prepare armor for the dog.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe halibut gives a magnifier to the grizzly bear\nThe halibut knocks down the fortress of the kudu\n\nBased on the game state and the rules and preferences, does the eagle prepare armor for the dog?\nQuestion: Does the eagle prepare armor for the dog?",
        "idx": 483,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something gives a magnifier to the grizzly bear and knocks down the fortress that belongs to the kudu, what can you certainly conclude? You can conclude that it also prepares armor for the eagle\nrule1(something) = give(something, magnifier, grizzly_bear) & knocks_down_fortress(something, kudu) => prepare_armor(something, eagle)\n# Rule2: The eagle unquestionably prepares armor for the dog, in the case where the halibut prepares armor for the eagle\nrule2() = prepare_armor(halibut, eagle) => prepare_armor(eagle, dog)\n# Rule3: The eagle will not prepare armor for the dog, in the case where the salmon does not learn elementary resource management from the eagle.\nrule3() = not learn(salmon, elementary_resource_management, eagle) => not prepare_armor(eagle, dog)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The halibut gives a magnifier to the grizzly bear\ngive(halibut, magnifier, grizzly_bear) = True\n# The halibut knocks down the fortress of the kudu\nknocks_down_fortress(halibut, kudu) = True\n\n# Based on the game state and the rules and preferences, does the eagle prepare armor for the dog?\nquestion = prepare_armor(eagle, dog)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not respect the koala, then it will attack the green fields whose owner is the whale without a doubt\nRule2: If something prepares armor for the carp, then it does not attack the green fields whose owner is the whale\nRule3: If the panda bear has a device to connect to the internet, then it prepares armor for the carp\nRule4: If the panda bear has a sharp object, then it prepares armor for the carp.\n\nRule1 is preferred over Rule2\n\nThe current state of the game is as follows\nThe panda bear has a guitar\nThe panda bear has a knife\n\nBased on the game state and the rules and preferences, does the panda bear attack the green fields whose owner is the whale?\nQuestion: Does the panda bear attack the green fields whose owner is the whale?",
        "idx": 484,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that one of the animals does not respect the koala, you can be certain that it will attack the green fields whose owner is the whale without a doubt\nrule1(something) = not respect(something, koala) => attack(green_fields, owner(whale))\n# Rule2: If something prepares armor for the carp, then it does not attack the green fields whose owner is the whale\nrule2(something) = prepare_armor(something, carp) => not attack(green_fields, owner(whale))\n# Rule3: If the panda bear has a device to connect to the internet, then the panda bear prepares armor for the carp\nrule3() = has(panda_bear, device_to_connect_to_internet) => prepare_armor(panda_bear, carp)\n# Rule4: If the panda bear has a sharp object, then the panda bear prepares armor for the carp.\nrule4() = has(panda_bear, sharp_object) => prepare_armor(panda_bear, carp)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n\n# The current state of the game is as follows\n# The panda bear has a guitar\nhas(panda_bear, guitar) = True\n# The panda bear has a knife\nhas(panda_bear, knife) = True\n\n# Based on the game state and the rules and preferences, does the panda bear attack the green fields whose owner is the whale?\nquestion = attack(green_fields, owner(whale))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grasshopper has fewer than four friends, then it burns the warehouse of the rabbit\nRule2: If the grasshopper winks at the rabbit, then the rabbit unquestionably knocks down the fortress of the elephant.\n\nThe current state of the game is as follows\nThe grasshopper has one friend.\n\nBased on the game state and the rules and preferences, does the rabbit knock down the fortress of the elephant?\nQuestion: Does the rabbit knock down the fortress of the elephant?",
        "idx": 485,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the grasshopper, if it has fewer than four friends, then we can conclude that it burns the warehouse of the rabbit\nrule1() = friends(grasshopper) < 4 => burn(warehouse, rabbit)\n# Rule2: The rabbit unquestionably knocks down the fortress of the elephant, in the case where the grasshopper winks at the rabbit.\nrule2() = wink(grasshopper, rabbit) => knock_down(fortress, rabbit, elephant)\n\n# The current state of the game is as follows\n# The grasshopper has one friend.\nfriends(grasshopper) = 1\n\n# Based on the game state and the rules and preferences, does the rabbit knock down the fortress of the elephant?\nquestion = knock_down(fortress, rabbit, elephant)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something becomes an actual enemy of the salmon and raises a flag of peace for the caterpillar, then it shows all its cards to the elephant\nRule2: If the carp respects the elephant, then the elephant does not learn the basics of resource management from the octopus\nRule3: If the black bear shows all its cards to the elephant, then the elephant learns elementary resource management from the octopus.\n\nRule2 is preferred over Rule3\n\nThe current state of the game is as follows\nThe black bear becomes an enemy of the salmon\nThe black bear has a white card\nThe name of the black bear is Casper\nThe black bear raises a peace flag for the caterpillar\nThe name of the grasshopper is Tango\n\nBased on the game state and the rules and preferences, does the elephant learn the basics of resource management from the octopus?\nQuestion: Does the elephant learn the basics of resource management from the octopus?",
        "idx": 486,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you see that something becomes an actual enemy of the salmon and raises a flag of peace for the caterpillar, what can you certainly conclude? You can conclude that it also shows her cards (all of them) to the elephant\nrule1(something) = become_enemy(something, salmon) & raise_flag_of_peace(something, caterpillar) => show_cards(something, all, elephant)\n# Rule2: The elephant does not learn the basics of resource management from the octopus, in the case where the carp respects the elephant\nrule2() = respect(carp, elephant) => not learn(elephant, basics_of_resource_management, octopus)\n# Rule3: If the black bear shows her cards (all of them) to the elephant, then the elephant learns elementary resource management from the octopus.\nrule3() = show_cards(black_bear, all, elephant) => learn(elephant, elementary_resource_management, octopus)\n# Rule2 is preferred over Rule3\norder(rule2) > order(rule3) = True\n\n# The current state of the game is as follows\n# The black bear becomes an enemy of the salmon\nbecome_enemy(black_bear, salmon) = True\n# The black bear has a card that is white in color\nhas(black_bear, card) = True\ncolor(card, white) = True\n# The black bear is named Casper\nname(black_bear, Casper) = True\n# The black bear raises a peace flag for the caterpillar\nraise_flag_of_peace(black_bear, caterpillar) = True\n# The grasshopper is named Tango\nname(grasshopper, Tango) = True\n\n# Based on the game state and the rules and preferences, does the elephant learn the basics of resource management from the octopus?\nquestion = learn(elephant, basics_of_resource_management, octopus)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the first letter of the name of the aardvark is the same as the first letter of the name of the zander, then the aardvark winks at the phoenix\nRule2: If the phoenix has something to sit on, then it does not eat the food of the hummingbird\nRule3: If the aardvark has a card with a primary color, then it winks at the phoenix\nRule4: If the phoenix has a card with a primary color, then it does not eat the food of the hummingbird\nRule5: If the wolverine gives a magnifying glass to the phoenix and the aardvark winks at the phoenix, then the phoenix will not burn the warehouse of the turtle\nRule6: If the wolverine has a card whose color is one of the rainbow colors, then it does not give a magnifying glass to the phoenix\nRule7: If the wolverine has fewer than 10 friends, then it gives a magnifying glass to the phoenix.\n\nRule7 is preferred over Rule6\n\nThe current state of the game is as follows\nThe aardvark has a green card\nThe name of the aardvark is Casper\nThe phoenix has a yellow card\nThe phoenix has a club chair\nThe wolverine has 6 friends\nThe wolverine has an indigo card\nThe name of the zander is Milo.\n\nBased on the game state and the rules and preferences, does the phoenix burn the warehouse of the turtle?\nQuestion: Does the phoenix burn the warehouse of the turtle?",
        "idx": 487,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the aardvark, if it has a name whose first letter is the same as the first letter of the zander's name, then we can conclude that it winks at the phoenix\nrule1() = first_letter_of(name(aardvark)) == first_letter_of(name(zander)) => wink(aardvark, phoenix)\n# Rule2: If the phoenix has something to sit on, then the phoenix does not eat the food of the hummingbird\nrule2() = has(phoenix, something_to_sit_on) => not eat(phoenix, food_of(hummingbird))\n# Rule3: Regarding the aardvark, if it has a card with a primary color, then we can conclude that it winks at the phoenix\nrule3() = has(aardvark, card) and color(card) in primary_colors => wink(aardvark, phoenix)\n# Rule4: If the phoenix has a card with a primary color, then the phoenix does not eat the food that belongs to the hummingbird\nrule4() = has(phoenix, card) and color(card) in primary_colors => not eat(phoenix, food_of(hummingbird))\n# Rule5: If the wolverine gives a magnifying glass to the phoenix and the aardvark winks at the phoenix, then the phoenix will not burn the warehouse of the turtle\nrule5() = give(wolverine, magnifying_glass, phoenix) & wink(aardvark, phoenix) => not burn(phoenix, warehouse_of(turtle))\n# Rule6: If the wolverine has a card whose color is one of the rainbow colors, then the wolverine does not give a magnifying glass to the phoenix\nrule6() = has(wolverine, card) and color(card) in rainbow_colors => not give(wolverine, magnifying_glass, phoenix)\n# Rule7: If the wolverine has fewer than 10 friends, then the wolverine gives a magnifying glass to the phoenix.\nrule7() = friends(wolverine) < 10 => give(wolverine, magnifying_glass, phoenix)\n# Rule7 is preferred over Rule6\norder(rule7) > order(rule6) = True\n\n# The current state of the game is as follows\n# The aardvark has a card that is green in color, and is named Casper\nhas(aardvark, card) = True\ncolor(card(aardvark), green) = True\nname(aardvark, Casper) = True\n# The phoenix has a card that is yellow in color\nhas(phoenix, card) = True\ncolor(card(phoenix), yellow) = True\n# The phoenix has a club chair\nhas(phoenix, club_chair) = True\n# The wolverine has 6 friends\nfriends(wolverine) = 6\n# The wolverine has a card that is indigo in color\nhas(wolverine, card) = True\ncolor(card(wolverine), indigo) = True\n# The zander is named Milo.\nname(zander, Milo) = True\n\n# Based on the game state and the rules and preferences, does the phoenix burn the warehouse of the turtle?\nquestion = burn(phoenix, warehouse_of(turtle))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something knows the defense plan of the sun bear, then it will learn elementary resource management from the rabbit\nRule2: The hummingbird does not know the defensive plans of the sun bear whenever something proceeds to the spot right after the parrot\nRule3: If the hummingbird has a device to connect to the internet, then it knows the defense plan of the sun bear.\n\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe hummingbird has a cello.\n\nBased on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the rabbit?\nQuestion: Does the hummingbird learn the basics of resource management from the rabbit?",
        "idx": 488,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals knows the defense plan of the sun bear, you can be certain that it will also learn elementary resource management from the rabbit\nrule1(something) = knows(something, defense_plan, sun_bear) => learn(something, elementary_resource_management, rabbit)\n# Rule2: The hummingbird does not know the defensive plans of the sun bear whenever at least one animal proceeds to the spot right after the parrot\nrule2() = proceed(something, spot_right_after(parrot)) => not knows(hummingbird, defense_plan, sun_bear)\n# Rule3: If the hummingbird has a device to connect to the internet, then the hummingbird knows the defense plan of the sun bear.\nrule3() = has(hummingbird, device_to_connect_to_internet) => knows(hummingbird, defense_plan, sun_bear)\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The hummingbird has a cello.\nhas(hummingbird, cello) = True\n\n# Based on the game state and the rules and preferences, does the hummingbird learn the basics of resource management from the rabbit?\nquestion = learn(hummingbird, elementary_resource_management, rabbit)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the doctorfish has a sharp object, then it rolls the dice for the turtle\nRule2: If something rolls the dice for the turtle, then the canary winks at the bat\nRule3: If the kudu owes money to the doctorfish and the carp sings a song of victory for the doctorfish, then the doctorfish will not roll the dice for the turtle\nRule4: If the doctorfish is a fan of Chris Ronaldo, then it rolls the dice for the turtle.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule4\n\nThe current state of the game is as follows\nThe doctorfish has a violin\nThe doctorfish supports Chris Ronaldo\nThe kudu owes money to the doctorfish.\n\nBased on the game state and the rules and preferences, does the canary wink at the bat?\nQuestion: Does the canary wink at the bat?",
        "idx": 489,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the doctorfish has a sharp object, then the doctorfish rolls the dice for the turtle\nrule1() = has(doctorfish, sharp_object) => roll_dice(doctorfish, turtle)\n# Rule2: If at least one animal rolls the dice for the turtle, then the canary winks at the bat\nrule2() = rolls_dice(something, turtle) => wink(canary, bat)\n# Rule3: If the kudu owes money to the doctorfish and the carp sings a song of victory for the doctorfish, then the doctorfish will not roll the dice for the turtle\nrule3() = owe(kudu, money, doctorfish) & sings(carp, song_of_victory, doctorfish) => not roll_dice(doctorfish, turtle)\n# Rule4: If the doctorfish is a fan of Chris Ronaldo, then the doctorfish rolls the dice for the turtle.\nrule4() = fan_of(doctorfish, Chris_Ronaldo) => roll_dice(doctorfish, turtle)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule4\norder(rule3) > order(rule4) = True\n\n# The current state of the game is as follows\n# The doctorfish has a violin\nhas(doctorfish, violin) = True\n# The doctorfish supports Chris Ronaldo\nfan_of(doctorfish, Chris_Ronaldo) = True\n# The kudu owes money to the doctorfish.\nowe(kudu, money, doctorfish) = True\n\n# Based on the game state and the rules and preferences, does the canary wink at the bat?\nquestion = wink(canary, bat)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the turtle purchased a time machine, then the turtle owes money to the gecko\nRule2: If something removes one of the pieces of the catfish, then the crocodile respects the gecko\nRule3: If the first letter of the name of the turtle is the same as the first letter of the name of the aardvark, then the turtle owes money to the gecko\nRule4: If something proceeds to the spot right after the grasshopper, then it sings a victory song for the hippopotamus\nRule5: If the first letter of the name of the crocodile is the same as the first letter of the name of the zander, then the crocodile does not respect the gecko\nRule6: If the turtle owes money to the gecko and the crocodile respects the gecko, then the gecko is not going to knock down the fortress of the sheep\nRule7: If the squirrel does not know the defensive plans of the gecko, then the gecko does not become an enemy of the meerkat.\n\nRule2 is preferred over Rule5\n\nThe current state of the game is as follows\nThe name of the aardvark is Meadow\nThe name of the crocodile is Meadow\nThe eagle removes one of the pieces of the catfish\nThe gecko has 10 friends\nThe gecko has a bench\nThe gecko proceeds to the spot right after the grasshopper\nThe turtle owns a time machine\nThe name of the turtle is Mojo\nThe name of the zander is Max\nThe cat does not need support from the gecko\nThe squirrel does not know the defensive plans of the gecko.\n\nBased on the game state and the rules and preferences, does the gecko knock down the fortress of the sheep?\nQuestion: Does the gecko knock down the fortress of the sheep?",
        "idx": 490,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the turtle purchased a time machine, then the turtle owes money to the gecko\nrule1() = owns(turtle, time_machine) => owe(turtle, money, gecko)\n# Rule2: If at least one animal removes one of the pieces of the catfish, then the crocodile respects the gecko\nrule2() = remove(something, piece, catfish) => respect(crocodile, gecko)\n# Rule3: If the turtle has a name whose first letter is the same as the first letter of the aardvark's name, then the turtle owes money to the gecko\nrule3() = first_letter_of(name(turtle)) == first_letter_of(name(aardvark)) => owe(turtle, money, gecko)\n# Rule4: If you are positive that you saw one of the animals proceeds to the spot right after the grasshopper, you can be certain that it will also sing a victory song for the hippopotamus\nrule4(something) = proceeds_to(something, spot_right_after(grasshopper)) => sing_victory_song(something, hippopotamus)\n# Rule5: Regarding the crocodile, if it has a name whose first letter is the same as the first letter of the zander's name, then we can conclude that it does not respect the gecko\nrule5() = first_letter_of(name(crocodile)) == first_letter_of(name(zander)) => not respect(crocodile, gecko)\n# Rule6: For the gecko, if the belief is that the turtle owes $$$ to the gecko and the crocodile respects the gecko, then you can add that \"the gecko is not going to knock down the fortress of the sheep\" to your conclusions\nrule6() = owe(turtle, money, gecko) & respect(crocodile, gecko) => not knock_down_fortress(gecko, sheep)\n# Rule7: If the squirrel does not know the defensive plans of the gecko, then the gecko does not become an enemy of the meerkat.\nrule7() = not know(squirrel, defensive_plans, gecko) => not become_enemy(gecko, meerkat)\n# Rule2 is preferred over Rule5\norder(rule2) > order(rule5) = True\n\n# The current state of the game is as follows\n# The aardvark is named Meadow\nname(aardvark, Meadow) = True\n# The crocodile is named Meadow\nname(crocodile, Meadow) = True\n# The eagle removes from the board one of the pieces of the catfish\nremove(eagle, piece, catfish) = True\n# The gecko has 10 friends\nfriends(gecko) = 10\n# The gecko has a bench\nhas(gecko, bench) = True\n# The gecko proceeds to the spot right after the grasshopper\nproceeds_to(gecko, spot_right_after(grasshopper)) = True\n# The turtle invented a time machine, and is named Mojo\nowns(turtle, time_machine) = True\nname(turtle, Mojo) = True\n# The zander is named Max\nname(zander, Max) = True\n# The cat does not need support from the gecko\nnot_need_support(cat, gecko) = True\n# The squirrel does not know the defensive plans of the gecko.\nknow(squirrel, defensive_plans, gecko) = False\n\n# Based on the game state and the rules and preferences, does the gecko knock down the fortress of the sheep?\nquestion = knock_down_fortress(gecko, sheep)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the koala owns a luxury aircraft, then it sings a song of victory for the eel\nRule2: If the cat does not know the defense plan of the eel but the koala burns the warehouse that is in possession of the eel, then the eel knows the defense plan of the viperfish unavoidably\nRule3: If the koala has a card whose color starts with the letter \"h\", then it sings a victory song for the eel\nRule4: If something shows all her cards to the squirrel, then it does not know the defense plan of the eel.\n\nThe current state of the game is as follows\nThe cat shows all her cards to the squirrel\nThe koala has a white card\nThe koala owns a luxury aircraft.\n\nBased on the game state and the rules and preferences, does the eel know the defensive plans of the viperfish?\nQuestion: Does the eel know the defensive plans of the viperfish?",
        "idx": 491,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the koala, if it owns a luxury aircraft, then we can conclude that it sings a song of victory for the eel\nrule1() = owns(koala, luxury_aircraft) => sings(koala, song_of_victory, eel)\n# Rule2: If the cat does not know the defense plan of the eel but the koala burns the warehouse that is in possession of the eel, then the eel knows the defense plan of the viperfish unavoidably\nrule2() = not knows(cat, defense_plan, eel) & burns(koala, warehouse, eel) => knows(eel, defense_plan, viperfish)\n# Rule3: If the koala has a card whose color starts with the letter \"h\", then the koala sings a victory song for the eel\nrule3() = has(koala, card) and starts_with(color(card), \"h\") => sings(koala, song_of_victory, eel)\n# Rule4: If something shows her cards (all of them) to the squirrel, then it does not know the defense plan of the eel.\nrule4(something) = shows(something, all_cards, squirrel) => not knows(something, defense_plan, eel)\n\n# The current state of the game is as follows\n# The cat shows all her cards to the squirrel\nshows(cat, all_cards, squirrel) = True\n# The koala has a card that is white in color\nhas(koala, card) = True\ncolor(card, white) = True\n# The koala purchased a luxury aircraft.\nowns(koala, luxury_aircraft) = True\n\n# Based on the game state and the rules and preferences, does the eel know the defensive plans of the viperfish?\nquestion = knows(eel, defense_plan, viperfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the cat took a bike from the store, then it does not knock down the fortress of the cheetah\nRule2: The cat knocks down the fortress that belongs to the cheetah whenever at least one animal raises a peace flag for the polar bear\nRule3: If the cat has a card with a primary color, then it does not knock down the fortress that belongs to the cheetah\nRule4: If something knocks down the fortress of the cheetah, then the kudu eats the food that belongs to the starfish.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule2\n\nThe current state of the game is as follows\nThe cat has a yellow card\nThe oscar raises a peace flag for the polar bear.\n\nBased on the game state and the rules and preferences, does the kudu eat the food of the starfish?\nQuestion: Does the kudu eat the food of the starfish?",
        "idx": 492,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the cat, if it took a bike from the store, then we can conclude that it does not knock down the fortress of the cheetah\nrule1() = took(cat, bike) => not knock_down(cat, fortress, cheetah)\n# Rule2: The cat knocks down the fortress that belongs to the cheetah whenever at least one animal raises a peace flag for the polar bear\nrule2() = raise_flag(something, peace, polar_bear) => knock_down(cat, fortress, cheetah)\n# Rule3: If the cat has a card with a primary color, then the cat does not knock down the fortress that belongs to the cheetah\nrule3() = has(cat, card) and color(card) in primary_colors => not knock_down(cat, fortress, cheetah)\n# Rule4: If at least one animal knocks down the fortress of the cheetah, then the kudu eats the food that belongs to the starfish.\nrule4() = knock_down(something, fortress, cheetah) => eat(kudu, food, starfish)\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n\n# The current state of the game is as follows\n# The cat has a card that is yellow in color\nhas(cat, card) = True\ncolor(card, yellow) = True\n# The oscar raises a peace flag for the polar bear.\nraise_flag(oscar, peace, polar_bear) = True\n\n# Based on the game state and the rules and preferences, does the kudu eat the food of the starfish?\nquestion = eat(kudu, food, starfish)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the belief is that the raven is not going to respect the crocodile but the hummingbird needs the support of the crocodile, then you can add that \"the crocodile is not going to proceed to the spot that is right after the spot of the amberjack\" to your conclusions\nRule2: If the raven has a card and the color of the card is one of the rainbow colors, then the raven does not respect the crocodile\nRule3: If the first letter of the name of the raven is the same as the first letter of the name of the starfish, then the raven does not respect the crocodile\nRule4: If the hummingbird has a card and the color of the card appears in the flag of Italy, then it needs the support of the crocodile.\n\nThe current state of the game is as follows\nThe hummingbird has a red card\nThe raven has a white card\nThe name of the raven is Lucy\nThe name of the starfish is Lily.\n\nBased on the game state and the rules and preferences, does the crocodile proceed to the spot right after the amberjack?\nQuestion: Is the statement \"the crocodile is not going to proceed to the spot that is right after the spot of the amberjack\" in the conclusions?",
        "idx": 493,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: For the crocodile, if the belief is that the raven is not going to respect the crocodile but the hummingbird needs the support of the crocodile, then you can add that \"the crocodile is not going to proceed to the spot that is right after the spot of the amberjack\" to your conclusions\nrule1() = not respect(raven, crocodile) & needs_support(hummingbird, crocodile) => add_conclusion(\"the crocodile is not going to proceed to the spot that is right after the spot of the amberjack\")\n# Rule2: If the raven has a card whose color is one of the rainbow colors, then the raven does not respect the crocodile\nrule2() = has(raven, card) and color(card) in rainbow_colors => not respect(raven, crocodile)\n# Rule3: Regarding the raven, if it has a name whose first letter is the same as the first letter of the starfish's name, then we can conclude that it does not respect the crocodile\nrule3() = first_letter_of(name(raven)) == first_letter_of(name(starfish)) => not respect(raven, crocodile)\n# Rule4: Regarding the hummingbird, if it has a card whose color appears in the flag of Italy, then we can conclude that it needs the support of the crocodile.\nrule4() = has(hummingbird, card) and color(card) in colors_of_Italy_flag => needs_support(hummingbird, crocodile)\n\n# The current state of the game is as follows\n# The hummingbird has a card that is red in color\nhas(hummingbird, card) = True\ncolor(card, red) = True\n# The raven has a card that is white in color, and is named Lucy\nhas(raven, card) = True\ncolor(card, white) = True\nname(raven, Lucy) = True\n# The starfish is named Lily.\nname(starfish, Lily) = True\n\n# Based on the game state and the rules and preferences, does the crocodile proceed to the spot right after the amberjack?\nquestion = \"the crocodile is not going to proceed to the spot that is right after the spot of the amberjack\" in conclusions"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the grasshopper has a card with a primary color, then it raises a flag of peace for the polar bear\nRule2: If the grasshopper raises a peace flag for the polar bear, then the polar bear needs support from the sea bass\nRule3: If the grasshopper has a device to connect to the internet, then it does not raise a peace flag for the polar bear.\n\nRule3 is preferred over Rule1\n\nThe current state of the game is as follows\nThe name of the cheetah is Cinnamon\nThe grasshopper has a green card and a cell phone\nThe name of the grasshopper is Max\n\nBased on the game state and the rules and preferences, does the polar bear need support from the sea bass?\nQuestion: Does the polar bear need support from the sea bass?",
        "idx": 494,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the grasshopper has a card with a primary color, then the grasshopper raises a flag of peace for the polar bear\nrule1() = has(grasshopper, card) and color(card) in primary_colors => raise_flag_of_peace(grasshopper, polar_bear)\n# Rule2: If the grasshopper raises a peace flag for the polar bear, then the polar bear needs support from the sea bass\nrule2() = raise_flag_of_peace(grasshopper, polar_bear) => need_support(polar_bear, sea_bass)\n# Rule3: Regarding the grasshopper, if it has a device to connect to the internet, then we can conclude that it does not raise a peace flag for the polar bear.\nrule3() = has(grasshopper, device_to_connect_to_internet) => not raise_flag_of_peace(grasshopper, polar_bear)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n\n# The current state of the game is as follows\n# The cheetah is named Cinnamon\nname(cheetah, Cinnamon) = True\n# The grasshopper has a card that is green in color, and has a cell phone\nhas(grasshopper, card) = True\ncolor(card, green) = True\nhas(grasshopper, cell_phone) = True\n# The grasshopper is named Max.\nname(grasshopper, Max) = True\n\n# Based on the game state and the rules and preferences, does the polar bear need support from the sea bass?\nquestion = need_support(polar_bear, sea_bass)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the lobster has a card whose color starts with the letter \"o\", then it does not need support from the turtle\nRule2: If something removes from the board one of the pieces of the cat, then the lobster needs support from the turtle\nRule3: If something learns elementary resource management from the moose, then the squirrel eats the food that belongs to the turtle\nRule4: If the turtle has a card whose color is one of the rainbow colors, then it offers a job to the bat\nRule5: If something offers a job position to the bat but does not knock down the fortress of the amberjack, then it needs support from the grasshopper\nRule6: If the squirrel has something to sit on, then it does not eat the food of the turtle\nRule7: If the squirrel owns a luxury aircraft, then it does not eat the food that belongs to the turtle\nRule8: If something burns the warehouse of the donkey, then the turtle does not knock down the fortress of the amberjack.\n\nRule1 is preferred over Rule2\nRule3 is preferred over Rule6\nRule3 is preferred over Rule7\n\nThe current state of the game is as follows\nThe aardvark removes from the board one of the pieces of the cat\nThe lobster has a card that is orange in color\nThe sheep burns the warehouse of the donkey\nThe squirrel has a plastic bag and owns a luxury aircraft\nThe turtle has a card that is orange in color and hates Chris Ronaldo\nThe turtle has a hot chocolate.\n\nBased on the game state and the rules and preferences, does the turtle need support from the grasshopper?\nQuestion: Does the turtle need support from the grasshopper?",
        "idx": 495,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If the lobster has a card whose color starts with the letter \"o\", then the lobster does not need support from the turtle\nrule1() = has(lobster, card) and starts_with(color(card), \"o\") => not need_support(lobster, turtle)\n# Rule2: If at least one animal removes from the board one of the pieces of the cat, then the lobster needs support from the turtle\nrule2() = remove_from_board(something, piece_of(cat)) => need_support(lobster, turtle)\n# Rule3: If at least one animal learns elementary resource management from the moose, then the squirrel eats the food that belongs to the turtle\nrule3() = learns(something, elementary_resource_management_from(moose)) => eat_food(squirrel, food_of(turtle))\n# Rule4: If the turtle has a card whose color is one of the rainbow colors, then the turtle offers a job to the bat\nrule4() = has(turtle, card) and color(card) in rainbow_colors => offer_job_position(turtle, bat)\n# Rule5: If you see that something does not knock down the fortress of the amberjack but it offers a job position to the bat, what can you certainly conclude? You can conclude that it also needs support from the grasshopper\nrule5(something) = not knock_down(something, fortress_of(amberjack)) and offer_job_position(something, bat) => need_support(something, grasshopper)\n# Rule6: Regarding the squirrel, if it has something to sit on, then we can conclude that it does not eat the food of the turtle\nrule6() = has(squirrel, something_to_sit_on) => not eat_food(squirrel, food_of(turtle))\n# Rule7: Regarding the squirrel, if it owns a luxury aircraft, then we can conclude that it does not eat the food that belongs to the turtle\nrule7() = owns(squirrel, luxury_aircraft) => not eat_food(squirrel, food_of(turtle))\n# Rule8: If at least one animal burns the warehouse of the donkey, then the turtle does not knock down the fortress of the amberjack.\nrule8() = burn(something, warehouse_of(donkey)) => not knock_down(turtle, fortress_of(amberjack))\n# Rule1 is preferred over Rule2\norder(rule1) > order(rule2) = True\n# Rule3 is preferred over Rule6\norder(rule3) > order(rule6) = True\n# Rule3 is preferred over Rule7\norder(rule3) > order(rule7) = True\n\n# The current state of the game is as follows\n# The aardvark removes from the board one of the pieces of the cat\nremove_from_board(aardvark, piece_of(cat)) = True\n# The lobster has a card that is orange in color\nhas(lobster, card) = True\ncolor(card, orange) = True\n# The sheep burns the warehouse of the donkey\nburn(sheep, warehouse_of(donkey)) = True\n# The squirrel has a plastic bag, and purchased a luxury aircraft\nhas(squirrel, plastic_bag) = True\nowns(squirrel, luxury_aircraft) = True\n# The turtle has a card that is orange in color, and hates Chris Ronaldo\nhas(turtle, card) = True\ncolor(card, orange) = True\nhates(turtle, Chris_Ronaldo) = True\n# The turtle has a hot chocolate.\nhas(turtle, hot_chocolate) = True\n\n# Based on the game state and the rules and preferences, does the turtle need support from the grasshopper?\nquestion = need_support(turtle, grasshopper)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something removes one of the pieces of the blobfish, then it does not know the defense plan of the panther\nRule2: If the wolverine has a card whose color appears in the flag of Japan, then the wolverine removes from the board one of the pieces of the blobfish\nRule3: If the first letter of the name of the wolverine is the same as the first letter of the name of the sun bear, then the wolverine removes one of the pieces of the blobfish.\n\nThe current state of the game is as follows\nThe sun bear is named Lily\nThe wolverine has a yellow card\nThe name of the wolverine is Lola\n\nBased on the game state and the rules and preferences, does the wolverine know the defensive plans of the panther?\nQuestion: Does the wolverine know the defensive plans of the panther?",
        "idx": 496,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something removes one of the pieces of the blobfish, then it does not know the defense plan of the panther\nrule1(something) = remove(something, piece, blobfish) => not know(something, defense_plans, panther)\n# Rule2: If the wolverine has a card whose color appears in the flag of Japan, then the wolverine removes from the board one of the pieces of the blobfish\nrule2() = has(wolverine, card) and color(card) in flag_colors(Japan) => remove(wolverine, piece, blobfish)\n# Rule3: Regarding the wolverine, if it has a name whose first letter is the same as the first letter of the sun bear's name, then we can conclude that it removes one of the pieces of the blobfish.\nrule3() = first_letter_of(name(wolverine)) == first_letter_of(name(sun_bear)) => remove(wolverine, piece, blobfish)\n\n# The current state of the game is as follows\n# The sun bear is named Lily\nname(sun_bear, Lily) = True\n# The wolverine has a card that is yellow in color\nhas(wolverine, card) = True\ncolor(card, yellow) = True\n# The wolverine is named Lola\nname(wolverine, Lola) = True\n\n# Based on the game state and the rules and preferences, does the wolverine know the defensive plans of the panther?\nquestion = know(wolverine, defense_plans, panther)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something learns the basics of resource management from the squirrel, then it becomes an enemy of the squirrel\nRule2: If something rolls the dice for the turtle, then the sheep does not eat the food that belongs to the cricket\nRule3: If the hare sings a victory song for the sheep and the carp does not need support from the sheep, then the sheep will never burn the warehouse that is in possession of the phoenix\nRule4: If something becomes an enemy of the squirrel but does not burn the warehouse of the phoenix, then it eats the food of the cricket.\n\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe hare sings a victory song for the sheep\nThe sheep prepares armor for the squirrel\nThe carp does not need support from the sheep.\n\nBased on the game state and the rules and preferences, does the sheep eat the food of the cricket?\nQuestion: Does the sheep eat the food of the cricket?",
        "idx": 497,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If you are positive that you saw one of the animals learns the basics of resource management from the squirrel, you can be certain that it will also become an enemy of the squirrel\nrule1(something) = learns(something, basics_of_resource_management, squirrel) => become_enemy(something, squirrel)\n# Rule2: The sheep does not eat the food that belongs to the cricket whenever at least one animal rolls the dice for the turtle\nrule2() = rolls_dice(something, turtle) => not eat_food(sheep, food_of(cricket))\n# Rule3: If the hare sings a song of victory for the sheep and the carp does not need support from the sheep, then the sheep will never burn the warehouse that is in possession of the phoenix\nrule3() = sings_song(hare, victory, sheep) & not need_support(carp, sheep) => not burn_warehouse(sheep, warehouse_of(phoenix))\n# Rule4: If you see that something becomes an enemy of the squirrel but does not burn the warehouse of the phoenix, what can you certainly conclude? You can conclude that it eats the food of the cricket.\nrule4() = become_enemy(something, squirrel) & not burn_warehouse(something, warehouse_of(phoenix)) => eat_food(something, food_of(cricket))\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The hare sings a victory song for the sheep\nsings_song(hare, victory, sheep) = True\n# The sheep prepares armor for the squirrel\nprepares_armor(sheep, squirrel) = True\n# The carp does not need support from the sheep.\nnot need_support(carp, sheep) = True\n\n# Based on the game state and the rules and preferences, does the sheep eat the food of the cricket?\nquestion = eat_food(sheep, food_of(cricket))"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If something does not offer a job position to the cat, then it does not need support from the moose\nRule2: If something knocks down the fortress of the starfish, then the moose does not burn the warehouse that is in possession of the crocodile\nRule3: The moose prepares armor for the swordfish, in the case where the eel does not knock down the fortress that belongs to the moose\nRule4: If the buffalo has a card whose color appears in the flag of Japan, then the buffalo raises a flag of peace for the moose\nRule5: If something does not burn the warehouse that is in possession of the crocodile but it prepares armor for the swordfish, then it also prepares armor for the wolverine\nRule6: If the buffalo has fewer than 10 friends, then it raises a flag of peace for the moose.\n\nThe current state of the game is as follows\nThe buffalo has a white card\nThe buffalo has 16 friends\nThe elephant knocks down the fortress of the starfish\nThe eel does not knock down the fortress of the moose\nThe oscar does not offer a job to the cat.\n\nBased on the game state and the rules and preferences, does the moose prepare armor for the wolverine?\nQuestion: Does the moose prepare armor for the wolverine?",
        "idx": 498,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: If something does not offer a job position to the cat, then it does not need support from the moose\nrule1(something) = not offer_job_position(something, cat) => not need_support(something, moose)\n# Rule2: If at least one animal knocks down the fortress of the starfish, then the moose does not burn the warehouse that is in possession of the crocodile\nrule2() = knocks_down(something, fortress, starfish) => not burn_warehouse(moose, crocodile)\n# Rule3: The moose unquestionably prepares armor for the swordfish, in the case where the eel does not knock down the fortress that belongs to the moose\nrule3() = not knocks_down(eel, fortress, moose) => prepare_armor(moose, swordfish)\n# Rule4: If the buffalo has a card whose color appears in the flag of Japan, then the buffalo raises a flag of peace for the moose\nrule4() = has(buffalo, card) and color(card) in flag_colors(japan) => raise_flag_of_peace(buffalo, moose)\n# Rule5: If you see that something does not burn the warehouse that is in possession of the crocodile but it prepares armor for the swordfish, what can you certainly conclude? You can conclude that it also prepares armor for the wolverine\nrule5() = not burn_warehouse(something, crocodile) & prepare_armor(something, swordfish) => prepare_armor(something, wolverine)\n# Rule6: Regarding the buffalo, if it has fewer than 10 friends, then we can conclude that it raises a flag of peace for the moose.\nrule6() = friends(buffalo) < 10 => raise_flag_of_peace(buffalo, moose)\n\n# The current state of the game is as follows\n# The buffalo has a card that is white in color\nhas(buffalo, card) = True\ncolor(card, white) = True\n# The buffalo has sixteen friends\nfriends(buffalo) = 16\n# The elephant knocks down the fortress of the starfish\nknocks_down(elephant, fortress, starfish) = True\n# The eel does not knock down the fortress of the moose\nknocks_down(eel, fortress, moose) = False\n# The oscar does not offer a job to the cat.\noffer_job_position(oscar, cat) = False\n\n# Based on the game state and the rules and preferences, does the moose prepare armor for the wolverine?\nquestion = prepare_armor(moose, wolverine)"
    },
    {
        "nl_code": "A few players are playing a boardgame\nThe rules of the game are as follows\nRule1: If the kangaroo has a card and the color of the card is one of the rainbow colors, then it becomes an enemy of the turtle\nRule2: If the kangaroo does not have her keys, then it becomes an enemy of the turtle\nRule3: If the kangaroo has fewer than 5 friends, then it does not become an enemy of the turtle\nRule4: If the first letter of the name of the kangaroo is the same as the first letter of the name of the baboon, then the kangaroo does not become an enemy of the turtle\nRule5: If the kangaroo becomes an enemy of the turtle, then the turtle does not owe money to the eagle.\n\nRule3 is preferred over Rule1\nRule3 is preferred over Rule2\nRule4 is preferred over Rule1\nRule4 is preferred over Rule2\n\nThe current state of the game is as follows\nThe kangaroo has a card that is orange in color\nThe kangaroo has 14 friends\nThe name of the kangaroo is Luna\nThe kangaroo is holding her keys\n\nBased on the game state and the rules and preferences, does the turtle owe money to the eagle?\nQuestion: Does the turtle owe money to the eagle?",
        "idx": 499,
        "code": "# A few players are playing a boardgame\n# The rules of the game are as follows\n# Rule1: Regarding the kangaroo, if it has a card whose color is one of the rainbow colors, then we can conclude that it becomes an actual enemy of the turtle\nrule1() = has(kangaroo, card) and color(card) in rainbow_colors => become_enemy(kangaroo, turtle)\n# Rule2: If the kangaroo does not have her keys, then the kangaroo becomes an enemy of the turtle\nrule2() = not has(kangaroo, keys) => become_enemy(kangaroo, turtle)\n# Rule3: If the kangaroo has fewer than 5 friends, then the kangaroo does not become an actual enemy of the turtle\nrule3() = friends(kangaroo) < 5 => not become_enemy(kangaroo, turtle)\n# Rule4: If the kangaroo has a name whose first letter is the same as the first letter of the baboon's name, then the kangaroo does not become an enemy of the turtle\nrule4() = first_letter_of(name(kangaroo)) == first_letter_of(name(baboon)) => not become_enemy(kangaroo, turtle)\n# Rule5: If the kangaroo becomes an actual enemy of the turtle, then the turtle is not going to owe money to the eagle.\nrule5() = become_enemy(kangaroo, turtle) => not owe(turtle, money, eagle)\n# Rule3 is preferred over Rule1\norder(rule3) > order(rule1) = True\n# Rule3 is preferred over Rule2\norder(rule3) > order(rule2) = True\n# Rule4 is preferred over Rule1\norder(rule4) > order(rule1) = True\n# Rule4 is preferred over Rule2\norder(rule4) > order(rule2) = True\n\n# The current state of the game is as follows\n# The kangaroo has a card that is orange in color\nhas(kangaroo, card) and color(card, orange) = True\n# The kangaroo has fourteen friends\nfriends(kangaroo) = 14\n# The kangaroo is named Luna\nname(kangaroo, Luna) = True\n# The kangaroo is holding her keys\nhas(kangaroo, keys) = True\n\n# Based on the game state and the rules and preferences, does the turtle owe money to the eagle?\nquestion = owe(turtle, money, eagle)"
    }
]